{"sha": "0b77eec922441e3252803f3fbf20fb5ca0b8c6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzdlZWM5MjI0NDFlMzI1MjgwM2YzZmJmMjBmYjVjYTBiOGM2ZWY=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-09T19:19:23Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T20:12:18Z"}, "message": "Add a test to ensure that we can parse each file\n\nNote that this has a non-spurious failure in ra_analysis/src/mock_analysis", "tree": {"sha": "1a83ac45527aa95220820ec86b0f12f9595f3df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a83ac45527aa95220820ec86b0f12f9595f3df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b77eec922441e3252803f3fbf20fb5ca0b8c6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b77eec922441e3252803f3fbf20fb5ca0b8c6ef", "html_url": "https://github.com/rust-lang/rust/commit/0b77eec922441e3252803f3fbf20fb5ca0b8c6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b77eec922441e3252803f3fbf20fb5ca0b8c6ef/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd22dbde20179192776a32e40b4f73f2df02c99e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd22dbde20179192776a32e40b4f73f2df02c99e", "html_url": "https://github.com/rust-lang/rust/commit/fd22dbde20179192776a32e40b4f73f2df02c99e"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "7f385f86f15b2bd0d0924e557d235ab7cda800c3", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0b77eec922441e3252803f3fbf20fb5ca0b8c6ef/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77eec922441e3252803f3fbf20fb5ca0b8c6ef/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=0b77eec922441e3252803f3fbf20fb5ca0b8c6ef", "patch": "@@ -6,7 +6,7 @@ extern crate walkdir;\n use std::{\n     fmt::Write,\n     fs,\n-    path::{Path, PathBuf},\n+    path::{Path, PathBuf, Component},\n };\n \n use ra_syntax::{\n@@ -37,6 +37,45 @@ fn parser_fuzz_tests() {\n     }\n }\n \n+/// Test that Rust-analyzer can parse and validate the rust-analyser\n+/// TODO: Use this as a benchmark\n+#[test]\n+fn self_hosting_parsing() {\n+    let empty_vec = vec![];\n+    let dir = project_dir();\n+    let mut count = 0u32;\n+    for entry in walkdir::WalkDir::new(dir)\n+        .into_iter()\n+        .filter_entry(|entry| {\n+            !entry\n+                .path()\n+                .components()\n+                // TODO: this more neatly\n+                .any(|component| {\n+                    // Get all files which are not in the crates/ra_syntax/tests/data folder\n+                    (component == Component::Normal(std::ffi::OsStr::new(\"data\"))\n+                    // or the .git folder\n+                        || component == Component::Normal(std::ffi::OsStr::new(\".git\")))\n+                })\n+        })\n+        .map(|e| e.unwrap())\n+        .filter(|entry| {\n+            // Get all `.rs ` files\n+            !entry.path().is_dir() && (entry.path().extension() == Some(std::ffi::OsStr::new(\"rs\")))\n+        })\n+    {\n+        count += 1;\n+        let text = read_text(entry.path());\n+        let node = SourceFileNode::parse(&text);\n+        let errors = node.errors();\n+        assert_eq!(\n+            errors, empty_vec,\n+            \"There should be no errors in the file {:?}\",\n+            entry\n+        );\n+    }\n+    panic!(\"{}\", count)\n+}\n /// Read file and normalize newlines.\n ///\n /// `rustc` seems to always normalize `\\r\\n` newlines to `\\n`:\n@@ -49,7 +88,9 @@ fn parser_fuzz_tests() {\n ///\n /// so this should always be correct.\n fn read_text(path: &Path) -> String {\n-    fs::read_to_string(path).unwrap().replace(\"\\r\\n\", \"\\n\")\n+    fs::read_to_string(path)\n+        .expect(&format!(\"File at {:?} should be valid\", path))\n+        .replace(\"\\r\\n\", \"\\n\")\n }\n \n pub fn dir_tests<F>(paths: &[&str], f: F)"}]}