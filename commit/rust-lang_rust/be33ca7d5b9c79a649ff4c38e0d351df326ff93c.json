{"sha": "be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "node_id": "C_kwDOAAsO6NoAKGJlMzNjYTdkNWI5Yzc5YTY0OWZmNGMzOGUwZDM1MWRmMzI2ZmY5M2M", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2021-12-13T21:41:42Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2021-12-13T21:41:42Z"}, "message": "Use Inherited Visibility instead of None when no vis is present", "tree": {"sha": "95b1fb03c8e8e4b954136eb07e092542fd090753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95b1fb03c8e8e4b954136eb07e092542fd090753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "html_url": "https://github.com/rust-lang/rust/commit/be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be33ca7d5b9c79a649ff4c38e0d351df326ff93c/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0806b2de9a737e1b4821a4c163b29dcac088ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0806b2de9a737e1b4821a4c163b29dcac088ce8", "html_url": "https://github.com/rust-lang/rust/commit/b0806b2de9a737e1b4821a4c163b29dcac088ce8"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "618aa3fd002a8ba8256e1752eeed2e560445d38e", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be33ca7d5b9c79a649ff4c38e0d351df326ff93c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be33ca7d5b9c79a649ff4c38e0d351df326ff93c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n             (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, Some(vis))?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, vis)?;\n             (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -1511,9 +1511,16 @@ impl<'a> Parser<'a> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n             let err = if self.check_fn_front_matter(false) {\n+                let inherited_vis = Visibility {\n+                    span: rustc_span::DUMMY_SP,\n+                    kind: VisibilityKind::Inherited,\n+                    tokens: None,\n+                };\n                 // We use `parse_fn` to get a span for the function\n                 let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n-                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo, None) {\n+                if let Err(mut db) =\n+                    self.parse_fn(&mut Vec::new(), fn_parse_mode, lo, &inherited_vis)\n+                {\n                     db.delay_as_bug();\n                 }\n                 let mut err = self.struct_span_err(\n@@ -1793,7 +1800,7 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         fn_parse_mode: FnParseMode,\n         sig_lo: Span,\n-        vis: Option<&Visibility>,\n+        vis: &Visibility,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n         let header = self.parse_fn_front_matter(vis)?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n@@ -1909,10 +1916,10 @@ impl<'a> Parser<'a> {\n     /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n     /// FnFrontMatter = FnQual \"fn\" ;\n     /// ```\n-    pub(super) fn parse_fn_front_matter(\n-        &mut self,\n-        vis: Option<&Visibility>,\n-    ) -> PResult<'a, FnHeader> {\n+    ///\n+    /// `vis` represents the visibility that was already parsed, if any. Use\n+    /// `Visibility::Inherited` when no visibility is known.\n+    pub(super) fn parse_fn_front_matter(&mut self, orig_vis: &Visibility) -> PResult<'a, FnHeader> {\n         let sp_start = self.token.span;\n         let constness = self.parse_constness();\n \n@@ -1995,12 +2002,6 @@ impl<'a> Parser<'a> {\n                     }\n                     // Recover incorrect visibility order such as `async pub`\n                     else if self.check_keyword(kw::Pub) {\n-                        let orig_vis = vis.unwrap_or(&Visibility {\n-                            span: rustc_span::DUMMY_SP,\n-                            kind: VisibilityKind::Inherited,\n-                            tokens: None,\n-                        });\n-\n                         let sp = sp_start.to(self.prev_token.span);\n                         if let Ok(snippet) = self.span_to_snippet(sp) {\n                             let current_vis = match self.parse_visibility(FollowedByType::No) {"}, {"sha": "02a774ba1291cf4228441acb11a1d863bc3d53bd", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be33ca7d5b9c79a649ff4c38e0d351df326ff93c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be33ca7d5b9c79a649ff4c38e0d351df326ff93c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=be33ca7d5b9c79a649ff4c38e0d351df326ff93c", "patch": "@@ -474,8 +474,13 @@ impl<'a> Parser<'a> {\n         params: Vec<GenericParam>,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, TyKind> {\n+        let inherited_vis = rustc_ast::Visibility {\n+            span: rustc_span::DUMMY_SP,\n+            kind: rustc_ast::VisibilityKind::Inherited,\n+            tokens: None,\n+        };\n         let ast::FnHeader { ext, unsafety, constness, asyncness } =\n-            self.parse_fn_front_matter(None)?;\n+            self.parse_fn_front_matter(&inherited_vis)?;\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {"}]}