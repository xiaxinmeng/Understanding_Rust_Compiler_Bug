{"sha": "c2eebd7a50faa2578376a80ceba91bdc75d748e2", "node_id": "C_kwDOAAsO6NoAKGMyZWViZDdhNTBmYWEyNTc4Mzc2YTgwY2ViYTkxYmRjNzVkNzQ4ZTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T16:14:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T16:14:51Z"}, "message": "Auto merge of #12877 - zachs18:inline-def-in-macro, r=zachs18\n\nfix: Insert spaces when inlining a function defined in a macro.\n\n(partially) fixes #12860.\n\nThis PR (only) addresses the whitespace issue when inlining functions defined in macros.\n\nAdditionally, the indentation/spacing is not ideal, but works, e.g.\n```rs\nmacro_rules! define_function {\n    () => { fn test_function_macro() {\n        if let Some(3) = 3i32.checked_add(0) {\n            println!(\"3 + 0 == 3\");\n        }\n    } };\n}\ndefine_function!();\nfn main() {\n    test_function_macro();\n}\n// previously became\n// ...\nfn main() {\n    ifletSome(3)=3i32.checked_add(0){println!(\"3 + 0 == 3\");};\n}\n// now becomes\n// ...\nfn main() {\n    if let Some(3) = 3i32.checked_add(0){\n        println!(\"3 + 0 == 3\");\n\n      };\n}\n```\n\nThe `self` -> `this` problem[^this] is (probably?) a separate problem that I am also looking into.\n\n[^this]: As mentioned in [my comment on the above issue](https://github.com/rust-lang/rust-analyzer/issues/12860#issuecomment-1193231766), inlining a method defined in a macro does not properly replace `self` with the new local `this`.", "tree": {"sha": "cf9ee9f5302ec3cbbd455143aafb0dda30d59a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf9ee9f5302ec3cbbd455143aafb0dda30d59a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2eebd7a50faa2578376a80ceba91bdc75d748e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2eebd7a50faa2578376a80ceba91bdc75d748e2", "html_url": "https://github.com/rust-lang/rust/commit/c2eebd7a50faa2578376a80ceba91bdc75d748e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2eebd7a50faa2578376a80ceba91bdc75d748e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a30f62ecf5642174dbc52de122fc0b21e1c15e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a30f62ecf5642174dbc52de122fc0b21e1c15e1", "html_url": "https://github.com/rust-lang/rust/commit/7a30f62ecf5642174dbc52de122fc0b21e1c15e1"}, {"sha": "add33b65dda4b59b46b5192f3a88a83b771af844", "url": "https://api.github.com/repos/rust-lang/rust/commits/add33b65dda4b59b46b5192f3a88a83b771af844", "html_url": "https://github.com/rust-lang/rust/commit/add33b65dda4b59b46b5192f3a88a83b771af844"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "80d3b925593674266776a705fadd0c4ea59f9b65", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2eebd7a50faa2578376a80ceba91bdc75d748e2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eebd7a50faa2578376a80ceba91bdc75d748e2/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=c2eebd7a50faa2578376a80ceba91bdc75d748e2", "patch": "@@ -7,7 +7,7 @@ use ide_db::{\n     imports::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n-    syntax_helpers::node_ext::expr_as_name_ref,\n+    syntax_helpers::{insert_whitespace_into_node::insert_ws_into, node_ext::expr_as_name_ref},\n     RootDatabase,\n };\n use itertools::{izip, Itertools};\n@@ -301,7 +301,16 @@ fn inline(\n     params: &[(ast::Pat, Option<ast::Type>, hir::Param)],\n     CallInfo { node, arguments, generic_arg_list }: &CallInfo,\n ) -> ast::Expr {\n-    let body = fn_body.clone_for_update();\n+    let body = if sema.hir_file_for(fn_body.syntax()).is_macro() {\n+        cov_mark::hit!(inline_call_defined_in_macro);\n+        if let Some(body) = ast::BlockExpr::cast(insert_ws_into(fn_body.syntax().clone())) {\n+            body\n+        } else {\n+            fn_body.clone_for_update()\n+        }\n+    } else {\n+        fn_body.clone_for_update()\n+    };\n     let usages_for_locals = |local| {\n         Definition::Local(local)\n             .usages(sema)\n@@ -1144,6 +1153,41 @@ fn bar() -> u32 {\n         x\n     }) + foo()\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn inline_call_defined_in_macro() {\n+        cov_mark::check!(inline_call_defined_in_macro);\n+        check_assist(\n+            inline_call,\n+            r#\"\n+macro_rules! define_foo {\n+    () => { fn foo() -> u32 {\n+        let x = 0;\n+        x\n+    } };\n+}\n+define_foo!();\n+fn bar() -> u32 {\n+    foo$0()\n+}\n+\"#,\n+            r#\"\n+macro_rules! define_foo {\n+    () => { fn foo() -> u32 {\n+        let x = 0;\n+        x\n+    } };\n+}\n+define_foo!();\n+fn bar() -> u32 {\n+    {\n+      let x = 0;\n+      x\n+    }\n+}\n \"#,\n         )\n     }"}]}