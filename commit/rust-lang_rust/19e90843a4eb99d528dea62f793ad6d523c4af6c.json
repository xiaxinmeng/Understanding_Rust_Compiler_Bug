{"sha": "19e90843a4eb99d528dea62f793ad6d523c4af6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTkwODQzYTRlYjk5ZDUyOGRlYTYyZjc5M2FkNmQ1MjNjNGFmNmM=", "commit": {"author": {"name": "Avi Dessauer", "email": "avi.the.coder@gmail.com", "date": "2020-07-05T23:02:30Z"}, "committer": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-09-23T01:55:23Z"}, "message": "Add documentation", "tree": {"sha": "dc911c4e56ad51f3788909d42fa7b1e114099851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc911c4e56ad51f3788909d42fa7b1e114099851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e90843a4eb99d528dea62f793ad6d523c4af6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e90843a4eb99d528dea62f793ad6d523c4af6c", "html_url": "https://github.com/rust-lang/rust/commit/19e90843a4eb99d528dea62f793ad6d523c4af6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e90843a4eb99d528dea62f793ad6d523c4af6c/comments", "author": {"login": "Avi-D-coder", "id": 29133776, "node_id": "MDQ6VXNlcjI5MTMzNzc2", "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avi-D-coder", "html_url": "https://github.com/Avi-D-coder", "followers_url": "https://api.github.com/users/Avi-D-coder/followers", "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}", "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions", "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs", "repos_url": "https://api.github.com/users/Avi-D-coder/repos", "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events", "type": "User", "site_admin": false}, "committer": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3947591ee82702f124af9248463036155b83b907", "url": "https://api.github.com/repos/rust-lang/rust/commits/3947591ee82702f124af9248463036155b83b907", "html_url": "https://github.com/rust-lang/rust/commit/3947591ee82702f124af9248463036155b83b907"}], "stats": {"total": 126, "additions": 90, "deletions": 36}, "files": [{"sha": "28d139faa59b0610e696323539357c3b3eaf62f7", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19e90843a4eb99d528dea62f793ad6d523c4af6c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e90843a4eb99d528dea62f793ad6d523c4af6c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=19e90843a4eb99d528dea62f793ad6d523c4af6c", "patch": "@@ -395,7 +395,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// This function will also check if the item is deprecated.\n     /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n-        self.check_stability_internal(def_id, id, span, |span, def_id| {\n+        self.check_optional_stability(def_id, id, span, |span, def_id| {\n             // The API could be uncallable for other reasons, for example when a private module\n             // was referenced.\n             self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n@@ -409,7 +409,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This function will also check if the item is deprecated.\n     /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n-    pub fn check_stability_internal(\n+    ///\n+    /// The `unmarked` closure is called definitions without a stability annotation.\n+    /// This is needed for generic parameters, since they may not be marked when used in a staged_api crate.\n+    pub fn check_optional_stability(\n         self,\n         def_id: DefId,\n         id: Option<HirId>,"}, {"sha": "d34363e05772691e9eaa47213f60181f66909bdd", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 84, "deletions": 33, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/19e90843a4eb99d528dea62f793ad6d523c4af6c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e90843a4eb99d528dea62f793ad6d523c4af6c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=19e90843a4eb99d528dea62f793ad6d523c4af6c", "patch": "@@ -37,6 +37,20 @@ enum AnnotationKind {\n     Container,\n }\n \n+/// Inheriting deprecations Nested items causes duplicate warnings.\n+/// Inheriting the deprecation of `Foo<T>` onto the parameter `T`, would cause a duplicate warnings.\n+#[derive(PartialEq, Copy, Clone)]\n+enum InheritDeprecation {\n+    Yes,\n+    No,\n+}\n+\n+impl InheritDeprecation {\n+    fn yes(&self) -> bool {\n+        *self == InheritDeprecation::Yes\n+    }\n+}\n+\n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -56,7 +70,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         attrs: &[Attribute],\n         item_sp: Span,\n         kind: AnnotationKind,\n-        inherit_deprecation: bool,\n+        inherit_deprecation: InheritDeprecation,\n         visit_children: F,\n     ) where\n         F: FnOnce(&mut Self),\n@@ -81,7 +95,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             let depr_entry = DeprecationEntry::local(depr.clone(), hir_id);\n             self.index.depr_map.insert(hir_id, depr_entry);\n         } else if let Some(parent_depr) = self.parent_depr.clone() {\n-            if inherit_deprecation {\n+            if inherit_deprecation.yes() {\n                 is_deprecated = true;\n                 info!(\"tagging child {:?} as deprecated from parent\", hir_id);\n                 self.index.depr_map.insert(hir_id, parent_depr);\n@@ -189,7 +203,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if stab.is_none() {\n             debug!(\"annotate: stab not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n-                if inherit_deprecation && stab.level.is_unstable() {\n+                if inherit_deprecation.yes() && stab.level.is_unstable() {\n                     self.index.stab_map.insert(hir_id, stab);\n                 }\n             }\n@@ -240,7 +254,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     }\n \n     // returns true if an error occurred, used to suppress some spurious errors\n-    fn forbid_staged_api_attrs(&mut self, hir_id: HirId, attrs: &[Attribute], inherit_deprecation: bool) -> bool {\n+    fn forbid_staged_api_attrs(&mut self, hir_id: HirId, attrs: &[Attribute], inherit_deprecation: InheritDeprecation) -> bool {\n         // Emit errors for non-staged-api crates.\n         let unstable_attrs = [\n             sym::unstable,\n@@ -268,7 +282,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         // Propagate unstability.  This can happen even for non-staged-api crates in case\n         // -Zforce-unstable-if-unmarked is set.\n         if let Some(stab) = self.parent_stab {\n-            if inherit_deprecation && stab.level.is_unstable() {\n+            if inherit_deprecation.yes() && stab.level.is_unstable() {\n                 self.index.stab_map.insert(hir_id, stab);\n             }\n         }\n@@ -309,63 +323,100 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                         &i.attrs,\n                         i.span,\n                         AnnotationKind::Required,\n-                        true,\n+                        InheritDeprecation::Yes,\n                         |_| {},\n                     )\n                 }\n             }\n             _ => {}\n         }\n \n-        self.annotate(i.hir_id, &i.attrs, i.span, kind, true, |v| intravisit::walk_item(v, i));\n+        self.annotate(i.hir_id, &i.attrs, i.span, kind, InheritDeprecation::Yes, |v| {\n+            intravisit::walk_item(v, i)\n+        });\n         self.in_trait_impl = orig_in_trait_impl;\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n-        self.annotate(ti.hir_id, &ti.attrs, ti.span, AnnotationKind::Required, true, |v| {\n-            intravisit::walk_trait_item(v, ti);\n-        });\n+        self.annotate(\n+            ti.hir_id,\n+            &ti.attrs,\n+            ti.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                intravisit::walk_trait_item(v, ti);\n+            },\n+        );\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n-        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, true, |v| {\n+        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, InheritDeprecation::Yes, |v| {\n             intravisit::walk_impl_item(v, ii);\n         });\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n-        self.annotate(var.id, &var.attrs, var.span, AnnotationKind::Required, true, |v| {\n-            if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n-                v.annotate(\n-                    ctor_hir_id,\n-                    &var.attrs,\n-                    var.span,\n-                    AnnotationKind::Required,\n-                    true,\n-                    |_| {},\n-                );\n-            }\n+        self.annotate(\n+            var.id,\n+            &var.attrs,\n+            var.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n+                    v.annotate(\n+                        ctor_hir_id,\n+                        &var.attrs,\n+                        var.span,\n+                        AnnotationKind::Required,\n+                        InheritDeprecation::Yes,\n+                        |_| {},\n+                    );\n+                }\n \n-            intravisit::walk_variant(v, var, g, item_id)\n-        })\n+                intravisit::walk_variant(v, var, g, item_id)\n+            },\n+        )\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n-        self.annotate(s.hir_id, &s.attrs, s.span, AnnotationKind::Required, true, |v| {\n-            intravisit::walk_struct_field(v, s);\n-        });\n+        self.annotate(\n+            s.hir_id,\n+            &s.attrs,\n+            s.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                intravisit::walk_struct_field(v, s);\n+            },\n+        );\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n-        self.annotate(i.hir_id, &i.attrs, i.span, AnnotationKind::Required, true, |v| {\n-            intravisit::walk_foreign_item(v, i);\n-        });\n+        self.annotate(\n+            i.hir_id,\n+            &i.attrs,\n+            i.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                intravisit::walk_foreign_item(v, i);\n+            },\n+        );\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.annotate(md.hir_id, &md.attrs, md.span, AnnotationKind::Required, true, |_| {});\n+        self.annotate(\n+            md.hir_id,\n+            &md.attrs,\n+            md.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |_| {},\n+        );\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n@@ -377,7 +428,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             _ => AnnotationKind::Prohibited,\n         };\n \n-        self.annotate(p.hir_id, &p.attrs, p.span, kind, false, |v| {\n+        self.annotate(p.hir_id, &p.attrs, p.span, kind, InheritDeprecation::No, |v| {\n             intravisit::walk_generic_param(v, p);\n         });\n     }\n@@ -519,7 +570,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n             &krate.item.attrs,\n             krate.item.span,\n             AnnotationKind::Required,\n-            true,\n+            InheritDeprecation::Yes,\n             |v| intravisit::walk_crate(v, krate),\n         );\n     }"}, {"sha": "3c95184c35feb9fd4ca7625eb3f9f43895ceee56", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e90843a4eb99d528dea62f793ad6d523c4af6c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e90843a4eb99d528dea62f793ad6d523c4af6c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=19e90843a4eb99d528dea62f793ad6d523c4af6c", "patch": "@@ -362,7 +362,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 (GenericParamDefKind::Type { has_default, .. }, GenericArg::Type(ty)) => {\n                     if *has_default {\n-                        tcx.check_stability_internal(\n+                        tcx.check_optional_stability(\n                             param.def_id,\n                             Some(arg.id()),\n                             arg.span(),"}]}