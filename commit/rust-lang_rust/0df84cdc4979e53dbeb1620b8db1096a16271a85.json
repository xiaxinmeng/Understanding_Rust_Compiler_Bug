{"sha": "0df84cdc4979e53dbeb1620b8db1096a16271a85", "node_id": "C_kwDOAAsO6NoAKDBkZjg0Y2RjNDk3OWU1M2RiZWIxNjIwYjhkYjEwOTZhMTYyNzFhODU", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2022-04-01T05:29:38Z"}, "committer": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2022-04-01T15:02:36Z"}, "message": "Don't emit non-asm contents error for naked function composed of errors", "tree": {"sha": "b260a292523103c009abe5189bac8830ca155f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b260a292523103c009abe5189bac8830ca155f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df84cdc4979e53dbeb1620b8db1096a16271a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df84cdc4979e53dbeb1620b8db1096a16271a85", "html_url": "https://github.com/rust-lang/rust/commit/0df84cdc4979e53dbeb1620b8db1096a16271a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df84cdc4979e53dbeb1620b8db1096a16271a85/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "cd966df119f4c86717b687df73c39eed30e78d4d", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0df84cdc4979e53dbeb1620b8db1096a16271a85/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df84cdc4979e53dbeb1620b8db1096a16271a85/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=0df84cdc4979e53dbeb1620b8db1096a16271a85", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n     let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n     this.visit_body(body);\n-    if let [(ItemKind::Asm, _)] = this.items[..] {\n+    if let [(ItemKind::Asm | ItemKind::Err, _)] = this.items[..] {\n         // Ok.\n     } else {\n         let mut diag = struct_span_err!(\n@@ -156,19 +156,33 @@ fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span\n             E0787,\n             \"naked functions must contain a single asm block\"\n         );\n+\n+        let mut must_show_error = false;\n         let mut has_asm = false;\n+        let mut has_err = false;\n         for &(kind, span) in &this.items {\n             match kind {\n                 ItemKind::Asm if has_asm => {\n+                    must_show_error = true;\n                     diag.span_label(span, \"multiple asm blocks are unsupported in naked functions\");\n                 }\n                 ItemKind::Asm => has_asm = true,\n                 ItemKind::NonAsm => {\n+                    must_show_error = true;\n                     diag.span_label(span, \"non-asm is unsupported in naked functions\");\n                 }\n+                ItemKind::Err => has_err = true,\n             }\n         }\n-        diag.emit();\n+\n+        // If the naked function only contains a single asm block and a non-zero number of\n+        // errors, then don't show an additional error. This allows for appending/prepending\n+        // `compile_error!(\"...\")` statements and reduces error noise.\n+        if must_show_error || !has_err {\n+            diag.emit();\n+        } else {\n+            diag.cancel();\n+        }\n     }\n }\n \n@@ -181,6 +195,7 @@ struct CheckInlineAssembly<'tcx> {\n enum ItemKind {\n     Asm,\n     NonAsm,\n+    Err,\n }\n \n impl<'tcx> CheckInlineAssembly<'tcx> {\n@@ -222,9 +237,13 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 self.check_inline_asm(asm, span);\n             }\n \n-            ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n+            ExprKind::DropTemps(..) | ExprKind::Block(..) => {\n                 hir::intravisit::walk_expr(self, expr);\n             }\n+\n+            ExprKind::Err => {\n+                self.items.push((ItemKind::Err, span));\n+            }\n         }\n     }\n "}, {"sha": "a8fd24a3e07c03bd943a12090dee8a707856a292", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0df84cdc4979e53dbeb1620b8db1096a16271a85/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df84cdc4979e53dbeb1620b8db1096a16271a85/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=0df84cdc4979e53dbeb1620b8db1096a16271a85", "patch": "@@ -196,3 +196,16 @@ pub unsafe extern \"C\" fn inline_never() {\n pub unsafe extern \"C\" fn inline_all() {\n     asm!(\"\", options(noreturn));\n }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn allow_compile_error(a: u32) -> u32 {\n+    compile_error!(\"this is a user specified error\")\n+    //~^ ERROR this is a user specified error\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn allow_compile_error_and_asm(a: u32) -> u32 {\n+    compile_error!(\"this is a user specified error\");\n+    //~^ ERROR this is a user specified error\n+    asm!(\"\", options(noreturn))\n+}"}, {"sha": "32eae1f37a3f01e391e9f4d263fd51b24703abdd", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0df84cdc4979e53dbeb1620b8db1096a16271a85/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0df84cdc4979e53dbeb1620b8db1096a16271a85/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=0df84cdc4979e53dbeb1620b8db1096a16271a85", "patch": "@@ -4,6 +4,18 @@ error: asm with the `pure` option must have at least one output\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n+error: this is a user specified error\n+  --> $DIR/naked-functions.rs:202:5\n+   |\n+LL |     compile_error!(\"this is a user specified error\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this is a user specified error\n+  --> $DIR/naked-functions.rs:208:5\n+   |\n+LL |     compile_error!(\"this is a user specified error\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: patterns not allowed in naked function parameters\n   --> $DIR/naked-functions.rs:20:5\n    |\n@@ -255,6 +267,6 @@ error: naked functions cannot be inlined\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors; 2 warnings emitted\n+error: aborting due to 32 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0787`."}]}