{"sha": "a871a0f11196ed028edeedc4843338f702880672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzFhMGYxMTE5NmVkMDI4ZWRlZWRjNDg0MzMzOGY3MDI4ODA2NzI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T19:46:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:28Z"}, "message": "Only store a LocalDefId in hir::TraitItem.", "tree": {"sha": "c8420d83e77f3b66d3b47b6ddfc1aac50626f63b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8420d83e77f3b66d3b47b6ddfc1aac50626f63b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a871a0f11196ed028edeedc4843338f702880672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a871a0f11196ed028edeedc4843338f702880672", "html_url": "https://github.com/rust-lang/rust/commit/a871a0f11196ed028edeedc4843338f702880672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a871a0f11196ed028edeedc4843338f702880672/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebbba081e4609099df3921de8a1422b7ea52599", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebbba081e4609099df3921de8a1422b7ea52599", "html_url": "https://github.com/rust-lang/rust/commit/cebbba081e4609099df3921de8a1422b7ea52599"}], "stats": {"total": 264, "additions": 139, "deletions": 125}, "files": [{"sha": "192ca79e78006804efd24422899ed31afbbf75a1", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -92,7 +92,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.with_hir_id_owner(item.id, |lctx| match ctxt {\n             AssocCtxt::Trait => {\n                 let hir_item = lctx.lower_trait_item(item);\n-                let id = hir::TraitItemId { hir_id: hir_item.hir_id };\n+                let id = hir_item.trait_item_id();\n                 lctx.trait_items.insert(id, hir_item);\n                 lctx.modules.get_mut(&lctx.current_module).unwrap().trait_items.insert(id);\n             }\n@@ -846,7 +846,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         hir::TraitItem {\n-            hir_id: self.lower_node_id(i.id),\n+            def_id: trait_item_def_id,\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n@@ -866,7 +866,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::MacCall(..) => unimplemented!(),\n         };\n-        let id = hir::TraitItemId { hir_id: self.lower_node_id(i.id) };\n+        let id = hir::TraitItemId { def_id: self.lower_node_id(i.id).expect_owner() };\n         let defaultness = hir::Defaultness::Default { has_value: has_default };\n         hir::TraitItemRef { id, ident: i.ident, span: i.span, defaultness, kind }\n     }"}, {"sha": "d47e0a4629ab111d79d0a38174cb14f21d648b19", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -1907,7 +1907,14 @@ pub struct FnSig<'hir> {\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct TraitItemId {\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n+}\n+\n+impl TraitItemId {\n+    pub fn hir_id(&self) -> HirId {\n+        // Items are always HIR owners.\n+        HirId::make_owner(self.def_id)\n+    }\n }\n \n /// Represents an item declaration within a trait declaration,\n@@ -1917,13 +1924,24 @@ pub struct TraitItemId {\n #[derive(Debug)]\n pub struct TraitItem<'hir> {\n     pub ident: Ident,\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub attrs: &'hir [Attribute],\n     pub generics: Generics<'hir>,\n     pub kind: TraitItemKind<'hir>,\n     pub span: Span,\n }\n \n+impl TraitItem<'_> {\n+    pub fn hir_id(&self) -> HirId {\n+        // Items are always HIR owners.\n+        HirId::make_owner(self.def_id)\n+    }\n+\n+    pub fn trait_item_id(&self) -> TraitItemId {\n+        TraitItemId { def_id: self.def_id }\n+    }\n+}\n+\n /// Represents a trait method's body (or just argument names).\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub enum TraitFn<'hir> {\n@@ -2885,9 +2903,10 @@ impl<'hir> Node<'hir> {\n \n     pub fn hir_id(&self) -> Option<HirId> {\n         match self {\n-            Node::Item(Item { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n+            Node::Item(Item { def_id, .. }) | Node::TraitItem(TraitItem { def_id, .. }) => {\n+                Some(HirId::make_owner(*def_id))\n+            }\n             Node::ForeignItem(ForeignItem { hir_id, .. })\n-            | Node::TraitItem(TraitItem { hir_id, .. })\n             | Node::ImplItem(ImplItem { hir_id, .. })\n             | Node::Field(StructField { hir_id, .. })\n             | Node::AnonConst(AnonConst { hir_id, .. })\n@@ -2922,7 +2941,7 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n \n     rustc_data_structures::static_assert_size!(super::Item<'static>, 200);\n-    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 152);\n+    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 144);\n     rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 168);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 160);\n }"}, {"sha": "a145d4dc47688e517a580436daa959eb652bbf1d", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -964,12 +964,12 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     visitor.visit_generics(&trait_item.generics);\n     match trait_item.kind {\n         TraitItemKind::Const(ref ty, default) => {\n-            visitor.visit_id(trait_item.hir_id);\n+            visitor.visit_id(trait_item.hir_id());\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n         TraitItemKind::Fn(ref sig, TraitFn::Required(param_names)) => {\n-            visitor.visit_id(trait_item.hir_id);\n+            visitor.visit_id(trait_item.hir_id());\n             visitor.visit_fn_decl(&sig.decl);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n@@ -981,11 +981,11 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n                 &sig.decl,\n                 body_id,\n                 trait_item.span,\n-                trait_item.hir_id,\n+                trait_item.hir_id(),\n             );\n         }\n         TraitItemKind::Type(bounds, ref default) => {\n-            visitor.visit_id(trait_item.hir_id);\n+            visitor.visit_id(trait_item.hir_id());\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }"}, {"sha": "e7e676fe147b95ef5884408186608163debcae1e", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -44,11 +44,11 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemId {\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for TraitItemId {\n-    type KeyType = (DefPathHash, ItemLocalId);\n+    type KeyType = DefPathHash;\n \n     #[inline]\n-    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n-        self.hir_id.to_stable_hash_key(hcx)\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n+        hcx.local_def_path_hash(self.def_id)\n     }\n }\n \n@@ -109,7 +109,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItemId {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_reference_to_item(self.hir_id, hasher)\n+        hcx.hash_reference_to_item(self.hir_id(), hasher)\n     }\n }\n \n@@ -139,7 +139,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for VisibilityKind<'_>\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let TraitItem { hir_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n+        let TraitItem { def_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);"}, {"sha": "72a5804f50f7f8f8574094bf576bb6ea0d9444df", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -934,7 +934,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_trait_item(&mut self, ti: &hir::TraitItem<'_>) {\n-        self.ann.pre(self, AnnNode::SubItem(ti.hir_id));\n+        self.ann.pre(self, AnnNode::SubItem(ti.hir_id()));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ti.span.lo());\n         self.print_outer_attributes(&ti.attrs);\n@@ -969,7 +969,7 @@ impl<'a> State<'a> {\n                 );\n             }\n         }\n-        self.ann.post(self, AnnNode::SubItem(ti.hir_id))\n+        self.ann.post(self, AnnNode::SubItem(ti.hir_id()))\n     }\n \n     pub fn print_impl_item(&mut self, ii: &hir::ImplItem<'_>) {"}, {"sha": "ea33e2c12da614d595bfbda0d22cab0c53445cda", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -172,7 +172,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.process_attrs(trait_item.hir_id, &trait_item.attrs);\n+        self.process_attrs(trait_item.hir_id(), &trait_item.attrs);\n         intravisit::walk_trait_item(self, trait_item);\n     }\n "}, {"sha": "f6cc70969c2d27f1c46d63d7f4ed1c0a42c5f740", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -454,7 +454,7 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, item: &hir::TraitItem<'_>) {\n-        self.check_item(item.hir_id, item.span);\n+        self.check_item(item.hir_id(), item.span);\n     }\n \n     fn visit_impl_item(&mut self, item: &hir::ImplItem<'_>) {"}, {"sha": "aab6883637555e5e4159de3457d576b49dffd797", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -8,8 +8,7 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorRepor\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    self as hir, GenericBound, ImplItem, Item, ItemKind, Lifetime, LifetimeName, Node, TraitItem,\n-    TyKind,\n+    self as hir, GenericBound, ImplItem, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind,\n };\n use rustc_middle::ty::{self, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor};\n use rustc_span::symbol::Ident;\n@@ -352,8 +351,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     _ => None,\n                 }\n             }\n-            Some(Node::TraitItem(TraitItem { ident, hir_id, .. })) => {\n-                let parent_id = tcx.hir().get_parent_item(*hir_id);\n+            Some(Node::TraitItem(trait_item)) => {\n+                let parent_id = tcx.hir().get_parent_item(trait_item.hir_id());\n                 match tcx.hir().find(parent_id) {\n                     Some(Node::Item(Item { kind: ItemKind::Trait(..), .. })) => {\n                         // The method being called is defined in the `trait`, but the `'static`\n@@ -389,7 +388,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             })\n                             .next()\n                         {\n-                            Some(self_ty) => Some((*ident, self_ty)),\n+                            Some(self_ty) => Some((trait_item.ident, self_ty)),\n                             _ => None,\n                         }\n                     }"}, {"sha": "36db31a35dcf9cf40d6ec7db56915eb5b1b06daa", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -586,7 +586,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n                 if let hir::VisibilityKind::Inherited = it.vis.node {\n                     self.private_traits.insert(it.hir_id());\n                     for trait_item_ref in trait_item_refs {\n-                        self.private_traits.insert(trait_item_ref.id.hir_id);\n+                        self.private_traits.insert(trait_item_ref.id.hir_id());\n                     }\n                     return;\n                 }\n@@ -626,16 +626,15 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_>, trait_item: &hir::TraitItem<'_>) {\n-        if self.private_traits.contains(&trait_item.hir_id) {\n+        if self.private_traits.contains(&trait_item.hir_id()) {\n             return;\n         }\n \n-        let def_id = cx.tcx.hir().local_def_id(trait_item.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(\n             cx,\n-            Some(trait_item.hir_id),\n+            Some(trait_item.hir_id()),\n             &trait_item.attrs,\n             trait_item.span,\n             article,"}, {"sha": "927e64706213c33aa7c7b5440fd7a92a34c970bb", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -301,8 +301,8 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = Some(&trait_item.generics);\n-        self.with_lint_attrs(trait_item.hir_id, &trait_item.attrs, |cx| {\n-            cx.with_param_env(trait_item.hir_id, |cx| {\n+        self.with_lint_attrs(trait_item.hir_id(), &trait_item.attrs, |cx| {\n+            cx.with_param_env(trait_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n                 lint_callback!(cx, check_trait_item_post, trait_item);"}, {"sha": "b765ac08714cf37022e48d8466c34728d3c7849a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -631,7 +631,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.with_lint_attrs(trait_item.hir_id, &trait_item.attrs, |builder| {\n+        self.with_lint_attrs(trait_item.hir_id(), &trait_item.attrs, |builder| {\n             intravisit::walk_trait_item(builder, trait_item);\n         });\n     }"}, {"sha": "0b1fe94cbfe8888e2a79bf35563c1cb387fd7964", "filename": "compiler/rustc_middle/src/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -229,7 +229,7 @@ impl<'a> FnLikeNode<'a> {\n             },\n             Node::TraitItem(ti) => match ti.kind {\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                    method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n+                    method(ti.hir_id(), ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },"}, {"sha": "6f9f75a4994c976189281c61b17e17be8308f77b", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -391,14 +391,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n-        debug_assert_eq!(\n-            ti.hir_id.owner,\n-            self.definitions.opt_hir_id_to_local_def_id(ti.hir_id).unwrap()\n-        );\n-        self.with_dep_node_owner(ti.hir_id.owner, ti, |this, hash| {\n-            this.insert_with_hash(ti.span, ti.hir_id, Node::TraitItem(ti), hash);\n+        self.with_dep_node_owner(ti.def_id, ti, |this, hash| {\n+            this.insert_with_hash(ti.span, ti.hir_id(), Node::TraitItem(ti), hash);\n \n-            this.with_parent(ti.hir_id, |this| {\n+            this.with_parent(ti.hir_id(), |this| {\n                 intravisit::walk_trait_item(this, ti);\n             });\n         });"}, {"sha": "f9de6cbf93e9df0709bf8e5966684e84b0abdebf", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -308,7 +308,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n-        match self.find(id.hir_id).unwrap() {\n+        match self.find(id.hir_id()).unwrap() {\n             Node::TraitItem(item) => item,\n             _ => bug!(),\n         }"}, {"sha": "9ee299ac4fb268640777cfc004a0f76dc17607b3", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -816,7 +816,7 @@ fn foo(&self) -> Self::T { String::new() }\n                             // an assoc type as a return type (#72076).\n                             if let hir::Defaultness::Default { has_value: true } = item.defaultness\n                             {\n-                                if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n+                                if self.type_of(item.id.def_id) == found {\n                                     db.span_label(\n                                         item.span,\n                                         \"associated type defaults can't be assumed inside the \\"}, {"sha": "0552ad7389186664fe5204cfa013119f6075c8db", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -1081,7 +1081,13 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n-        self.check_attributes(trait_item.hir_id, &trait_item.attrs, &trait_item.span, target, None);\n+        self.check_attributes(\n+            trait_item.hir_id(),\n+            &trait_item.attrs,\n+            &trait_item.span,\n+            target,\n+            None,\n+        );\n         intravisit::walk_trait_item(self, trait_item)\n     }\n "}, {"sha": "bdf33438116358d773cf5f36a91ace7e84933466", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -440,9 +440,9 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         use hir::TraitItemKind::{Const, Fn};\n         if matches!(trait_item.kind, Const(_, Some(_)) | Fn(_, hir::TraitFn::Provided(_)))\n-            && has_allow_dead_code_or_lang_attr(self.tcx, trait_item.hir_id, &trait_item.attrs)\n+            && has_allow_dead_code_or_lang_attr(self.tcx, trait_item.hir_id(), &trait_item.attrs)\n         {\n-            self.worklist.push(trait_item.hir_id);\n+            self.worklist.push(trait_item.hir_id());\n         }\n     }\n "}, {"sha": "ded5fa1e57b3a81001296f2157f48f35f094f2a8", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -31,7 +31,7 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        self.observe_item(&trait_item.attrs, trait_item.hir_id);\n+        self.observe_item(&trait_item.attrs, trait_item.hir_id());\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {"}, {"sha": "3c83fdfa11bd68af549ae97541e725426b439586", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n \n     fn visit_trait_item(&mut self, i: &'hir hir::TraitItem<'hir>) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.hir_id, |this| intravisit::walk_trait_item(this, i));\n+        inner_visitor.check(i.hir_id(), |this| intravisit::walk_trait_item(this, i));\n     }\n \n     fn visit_impl_item(&mut self, i: &'hir hir::ImplItem<'hir>) {"}, {"sha": "0db8481b824949b453df97cb0b0e93f8bf0810f0", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -187,7 +187,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'v hir::TraitItem<'v>) {\n-        self.record(\"TraitItem\", Id::Node(ti.hir_id), ti);\n+        self.record(\"TraitItem\", Id::Node(ti.hir_id()), ti);\n         hir_visit::walk_trait_item(self, ti)\n     }\n "}, {"sha": "84e1444b4cc4cb1e2459860f408fcc905a65d45b", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -42,7 +42,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         self.check_for_lang(\n             Target::from_trait_item(trait_item),\n-            trait_item.hir_id,\n+            trait_item.hir_id(),\n             trait_item.attrs,\n         )\n     }"}, {"sha": "7782b0298568365b340e1d489de1f03c1a669ace", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n         self.annotate(\n-            ti.hir_id,\n+            ti.hir_id(),\n             &ti.attrs,\n             ti.span,\n             AnnotationKind::Required,\n@@ -571,7 +571,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n-        self.check_missing_stability(ti.hir_id, ti.span);\n+        self.check_missing_stability(ti.hir_id(), ti.span);\n         intravisit::walk_trait_item(self, ti);\n     }\n "}, {"sha": "3c0e85eb7b909f3b7af856a57e3c213ab5fcff20", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -669,7 +669,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n                 for trait_item_ref in trait_item_refs {\n-                    self.update(trait_item_ref.id.hir_id, item_level);\n+                    self.update(trait_item_ref.id.hir_id(), item_level);\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n@@ -745,7 +745,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.hir_id(), item_level).generics().predicates();\n \n                     for trait_item_ref in trait_item_refs {\n-                        let mut reach = self.reach(trait_item_ref.id.hir_id, item_level);\n+                        let mut reach = self.reach(trait_item_ref.id.hir_id(), item_level);\n                         reach.generics().predicates();\n \n                         if trait_item_ref.kind == AssocItemKind::Type\n@@ -1954,14 +1954,14 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n \n                 for trait_item_ref in trait_item_refs {\n                     self.check_assoc_item(\n-                        trait_item_ref.id.hir_id,\n+                        trait_item_ref.id.hir_id(),\n                         trait_item_ref.kind,\n                         trait_item_ref.defaultness,\n                         item_visibility,\n                     );\n \n                     if let AssocItemKind::Type = trait_item_ref.kind {\n-                        self.check(trait_item_ref.id.hir_id, item_visibility).bounds();\n+                        self.check(trait_item_ref.id.hir_id(), item_visibility).bounds();\n                     }\n                 }\n             }"}, {"sha": "2c5e7f7c212fec66f39f779625de420584bb2554", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -635,7 +635,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let parent_item_id =\n                                     hir::ItemId { def_id: parent_id.expect_owner() };\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n-                                let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n+                                let parent_trait_id =\n+                                    hir::TraitItemId { def_id: parent_id.expect_owner() };\n                                 let krate = self.tcx.hir().krate();\n \n                                 if !(krate.items.contains_key(&parent_item_id)\n@@ -740,7 +741,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n-                    Some(tcx.hir().get_parent_item(trait_item.hir_id)),\n+                    Some(tcx.hir().get_parent_item(trait_item.hir_id())),\n                     &sig.decl,\n                     &trait_item.generics,\n                     |this| intravisit::walk_trait_item(this, trait_item),\n@@ -2113,7 +2114,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {\n                     assoc_item_kind =\n-                        trait_items.iter().find(|ti| ti.id.hir_id == parent).map(|ti| ti.kind);\n+                        trait_items.iter().find(|ti| ti.id.hir_id() == parent).map(|ti| ti.kind);\n                 }\n                 match *m {\n                     hir::TraitFn::Required(_) => None,"}, {"sha": "4a58dfd4294647695edbbd264c8866df18831f84", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -674,7 +674,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             let id = id_from_def_id(item.def_id.to_def_id());\n             let span = self.span_from_span(item.ident.span);\n             let children =\n-                methods.iter().map(|i| id_from_hir_id(i.id.hir_id, &self.save_ctxt)).collect();\n+                methods.iter().map(|i| id_from_def_id(i.id.def_id.to_def_id())).collect();\n             self.dumper.dump_def(\n                 &access_from!(self.save_ctxt, item, item.hir_id()),\n                 Def {\n@@ -999,7 +999,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 let body = body.map(|b| &self.tcx.hir().body(b).value);\n                 let respan = respan(vis_span, hir::VisibilityKind::Public);\n                 self.process_assoc_const(\n-                    trait_item.hir_id,\n+                    trait_item.hir_id(),\n                     trait_item.ident,\n                     &ty,\n                     body,\n@@ -1015,7 +1015,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 self.process_method(\n                     sig,\n                     body,\n-                    trait_item.hir_id,\n+                    trait_item.hir_id(),\n                     trait_item.ident,\n                     &trait_item.generics,\n                     &respan,\n@@ -1025,15 +1025,12 @@ impl<'tcx> DumpVisitor<'tcx> {\n             hir::TraitItemKind::Type(ref bounds, ref default_ty) => {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n-                let qualname = format!(\n-                    \"::{}\",\n-                    self.tcx\n-                        .def_path_str(self.tcx.hir().local_def_id(trait_item.hir_id).to_def_id())\n-                );\n+                let qualname =\n+                    format!(\"::{}\", self.tcx.def_path_str(trait_item.def_id.to_def_id()));\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n                     let span = self.span_from_span(trait_item.ident.span);\n-                    let id = id_from_hir_id(trait_item.hir_id, &self.save_ctxt);\n+                    let id = id_from_def_id(trait_item.def_id.to_def_id());\n \n                     self.dumper.dump_def(\n                         &Access { public: true, reachable: true },\n@@ -1049,7 +1046,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                             decl_id: None,\n                             docs: self.save_ctxt.docs_for_attrs(&trait_item.attrs),\n                             sig: sig::assoc_type_signature(\n-                                trait_item.hir_id,\n+                                trait_item.hir_id(),\n                                 trait_item.ident,\n                                 Some(bounds),\n                                 default_ty.as_ref().map(|ty| &**ty),"}, {"sha": "7a667a127d3caa58fc902f8e9c23414c938bccca", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -65,7 +65,7 @@ impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.process_attrs(trait_item.hir_id);\n+        self.process_attrs(trait_item.hir_id());\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {"}, {"sha": "d89c8e81218611de0db8f9e9ac63681d2346abd9", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -82,7 +82,7 @@ fn associated_item_from_trait_item_ref(\n     parent_def_id: LocalDefId,\n     trait_item_ref: &hir::TraitItemRef,\n ) -> ty::AssocItem {\n-    let def_id = tcx.hir().local_def_id(trait_item_ref.id.hir_id);\n+    let def_id = trait_item_ref.id.def_id;\n     let (kind, has_self) = match trait_item_ref.kind {\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n         hir::AssocItemKind::Fn { has_self } => (ty::AssocKind::Fn, has_self),\n@@ -139,7 +139,9 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n         }\n \n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n-            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.hir_id == id) {\n+            if let Some(trait_item_ref) =\n+                trait_item_refs.iter().find(|i| i.id.def_id.to_def_id() == def_id)\n+            {\n                 let assoc_item =\n                     associated_item_from_trait_item_ref(tcx, parent_def_id, trait_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n@@ -196,10 +198,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let item = tcx.hir().expect_item(id);\n     match item.kind {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n-            trait_item_refs\n-                .iter()\n-                .map(|trait_item_ref| trait_item_ref.id)\n-                .map(|id| tcx.hir().local_def_id(id.hir_id).to_def_id()),\n+            trait_item_refs.iter().map(|trait_item_ref| trait_item_ref.id.def_id.to_def_id()),\n         ),\n         hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n             impl_"}, {"sha": "8c33abd45edc7e9b9a0b73e5a1a3a13e87241ef3", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -725,8 +725,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                         fn_maybe_err(tcx, item.ident.span, abi);\n                     }\n                     hir::TraitItemKind::Type(.., Some(_default)) => {\n-                        let item_def_id = tcx.hir().local_def_id(item.hir_id).to_def_id();\n-                        let assoc_item = tcx.associated_item(item_def_id);\n+                        let assoc_item = tcx.associated_item(item.def_id);\n                         let trait_substs =\n                             InternalSubsts::identity_for_item(tcx, it.def_id.to_def_id());\n                         let _: Result<_, rustc_errors::ErrorReported> = check_type_bounds("}, {"sha": "5f4db8cc989fbffd65486c0d5586377d2ab40cdf", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -823,8 +823,8 @@ fn compare_synthetic_generics<'tcx>(\n                         // FIXME: this is obviously suboptimal since the name can already be used\n                         // as another generic argument\n                         let new_name = tcx.sess.source_map().span_to_snippet(trait_span).ok()?;\n-                        let trait_m = tcx.hir().local_def_id_to_hir_id(trait_m.def_id.as_local()?);\n-                        let trait_m = tcx.hir().trait_item(hir::TraitItemId { hir_id: trait_m });\n+                        let trait_m = trait_m.def_id.as_local()?;\n+                        let trait_m = tcx.hir().trait_item(hir::TraitItemId { def_id: trait_m });\n \n                         let impl_m = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.as_local()?);\n                         let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });"}, {"sha": "b9a96fcfb6f920bd7cdcf85cb98d9ec9d207c642", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -197,7 +197,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => None,\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n-    check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n+    check_associated_item(tcx, trait_item.hir_id(), trait_item.span, method_sig);\n }\n \n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n@@ -213,7 +213,7 @@ fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n /// Detect when an object unsafe trait is referring to itself in one of its associated items.\n /// When this is done, suggest using `Self` instead.\n fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n-    let (trait_name, trait_def_id) = match tcx.hir().get(tcx.hir().get_parent_item(item.hir_id)) {\n+    let (trait_name, trait_def_id) = match tcx.hir().get(tcx.hir().get_parent_item(item.hir_id())) {\n         hir::Node::Item(item) => match item.kind {\n             hir::ItemKind::Trait(..) => (item.ident, item.def_id),\n             _ => return,\n@@ -1354,8 +1354,7 @@ impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n-        let def_id = self.tcx.hir().local_def_id(trait_item.hir_id);\n-        self.tcx.ensure().check_trait_item_well_formed(def_id);\n+        self.tcx.ensure().check_trait_item_well_formed(trait_item.def_id);\n         hir_visit::walk_trait_item(self, trait_item);\n     }\n "}, {"sha": "29c18ef4d55f5d95af7616df5bbfff5ec81daac1", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -281,7 +281,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        convert_trait_item(self.tcx, trait_item.hir_id);\n+        convert_trait_item(self.tcx, trait_item.trait_item_id());\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n@@ -804,40 +804,39 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n     }\n }\n \n-fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n-    let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n-    let def_id = tcx.hir().local_def_id(trait_item.hir_id);\n-    tcx.ensure().generics_of(def_id);\n+fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n+    let trait_item = tcx.hir().trait_item(trait_item_id);\n+    tcx.ensure().generics_of(trait_item_id.def_id);\n \n     match trait_item.kind {\n         hir::TraitItemKind::Fn(..) => {\n-            tcx.ensure().type_of(def_id);\n-            tcx.ensure().fn_sig(def_id);\n+            tcx.ensure().type_of(trait_item_id.def_id);\n+            tcx.ensure().fn_sig(trait_item_id.def_id);\n         }\n \n         hir::TraitItemKind::Const(.., Some(_)) => {\n-            tcx.ensure().type_of(def_id);\n+            tcx.ensure().type_of(trait_item_id.def_id);\n         }\n \n         hir::TraitItemKind::Const(..) => {\n-            tcx.ensure().type_of(def_id);\n+            tcx.ensure().type_of(trait_item_id.def_id);\n             // Account for `const C: _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n             placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n         }\n \n         hir::TraitItemKind::Type(_, Some(_)) => {\n-            tcx.ensure().item_bounds(def_id);\n-            tcx.ensure().type_of(def_id);\n+            tcx.ensure().item_bounds(trait_item_id.def_id);\n+            tcx.ensure().type_of(trait_item_id.def_id);\n             // Account for `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n             placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n         }\n \n         hir::TraitItemKind::Type(_, None) => {\n-            tcx.ensure().item_bounds(def_id);\n+            tcx.ensure().item_bounds(trait_item_id.def_id);\n             // #74612: Visit and try to find bad placeholders\n             // even if there is no concrete type.\n             let mut visitor = PlaceholderHirTyCollector::default();\n@@ -847,7 +846,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n         }\n     };\n \n-    tcx.ensure().predicates_of(def_id);\n+    tcx.ensure().predicates_of(trait_item_id.def_id);\n }\n \n fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {"}, {"sha": "2154280f48fce6371f7b13c0b9326c7ae65a9e38", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -599,8 +599,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         }\n         fn visit_trait_item(&mut self, it: &'tcx TraitItem<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n-            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n-            self.check(def_id);\n+            self.check(it.def_id);\n             intravisit::walk_trait_item(self, it);\n         }\n     }"}, {"sha": "570504aa6270b99fabb4f503252693e0c11249a2", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n-            self.visit_node_helper(trait_item.hir_id);\n+            self.visit_node_helper(trait_item.hir_id());\n         }\n     }\n "}, {"sha": "9ff52c0d226d98f141e3bbbee7c9c0a887242735", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n-            self.add_inferreds_for_item(trait_item.hir_id);\n+            self.add_inferreds_for_item(trait_item.hir_id());\n         }\n     }\n "}, {"sha": "c20d3eda858d8b8558370854bcaacf71b09df088", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -1044,7 +1044,7 @@ impl Clean<TypeKind> for hir::def::DefKind {\n \n impl Clean<Item> for hir::TraitItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let local_did = cx.tcx.hir().local_def_id(self.hir_id).to_def_id();\n+        let local_did = self.def_id.to_def_id();\n         cx.with_param_env(local_did, || {\n             let inner = match self.kind {\n                 hir::TraitItemKind::Const(ref ty, default) => {"}, {"sha": "5df2a293ea24e056dd0f358ed416451700ac909b", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -1056,9 +1056,15 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n     }\n \n     fn visit_trait_item(&mut self, item: &'hir hir::TraitItem<'_>) {\n-        self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n-            intravisit::walk_trait_item(this, item);\n-        });\n+        self.visit_testable(\n+            item.ident.to_string(),\n+            &item.attrs,\n+            item.hir_id(),\n+            item.span,\n+            |this| {\n+                intravisit::walk_trait_item(this, item);\n+            },\n+        );\n     }\n \n     fn visit_impl_item(&mut self, item: &'hir hir::ImplItem<'_>) {"}, {"sha": "8a82b550bdae647be072c68b6dfabbc4d2a6a3ed", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);\n             }\n         }\n     }"}, {"sha": "f8ef2a464d5c31aa929ce65aba6a53f64307f92d", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -87,11 +87,11 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             // find `self` ty for this trait if relevant\n             if let ItemKind::Trait(_, _, _, _, items) = item.kind {\n                 for trait_item in items {\n-                    if trait_item.id.hir_id == hir_id {\n+                    if trait_item.id.hir_id() == hir_id {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n                             trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.hir_id.owner.to_def_id()).self_ty());\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n                         }\n                     }\n                 }"}, {"sha": "eabc745a7b07e0b54bb7e581aee9b4ca18d6217e", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -339,27 +339,27 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if sig.header.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span.with_hi(sig.decl.output.span().hi()));\n             }\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             if is_public {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n \n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n-                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n+                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id());\n \n                 if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,\n                         body,\n                         item.span,\n-                        item.hir_id,\n+                        item.hir_id(),\n                         item.span.with_hi(sig.decl.output.span().hi()),\n                         \"this method could have a `#[must_use]` attribute\",\n                     );"}, {"sha": "a89941ceb226bc36ea2867f0d0f8dfaa19fe3ae7", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -159,10 +159,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && {\n-                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n-                    cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n-                }\n+                has_self && { cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1 }\n             } else {\n                 false\n             }"}, {"sha": "a68775ffb7541eea98673b72f8de343bfa0ebd7b", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -1791,7 +1791,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = sig.decl.inputs.iter().next();\n             let first_arg_span = first_arg_ty.span;\n             let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n \n             then {\n                 lint_wrong_self_convention(cx, &item.ident.name.as_str(), false, self_ty, first_arg_ty, first_arg_span);\n@@ -1801,8 +1801,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if_chain! {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n-            let ret_ty = return_ty(cx, item.hir_id);\n-            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            let ret_ty = return_ty(cx, item.hir_id());\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n             if !contains_ty(ret_ty, self_ty);\n \n             then {"}, {"sha": "5fce322933e98813ffdabe503a45b1e1c7d4e911", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -164,8 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n-        let def_id = cx.tcx.hir().local_def_id(trait_item.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n     }"}, {"sha": "16981946e18e764bb10b58ccad7ec459b13c0a04", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n-            check_sig(cx, item.hir_id, &sig.decl);\n+            check_sig(cx, item.hir_id(), &sig.decl);\n         }\n     }\n "}, {"sha": "b9ba32001b5137620f077b3996ef7bc00dab041c", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.hir_id, &*method_sig.decl, None);\n+            self.check_poly_fn(cx, item.hir_id(), &*method_sig.decl, None);\n         }\n     }\n "}, {"sha": "ee4ad086eb9a29bf6c8608f8292f4fa702796e39", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871a0f11196ed028edeedc4843338f702880672/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=a871a0f11196ed028edeedc4843338f702880672", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             } else {\n                 None\n             };\n-            check_fn(cx, &sig.decl, item.hir_id, body_id);\n+            check_fn(cx, &sig.decl, item.hir_id(), body_id);\n         }\n     }\n "}]}