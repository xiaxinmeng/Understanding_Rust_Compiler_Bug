{"sha": "c15fa3a02aa3e7e5111f0410abf7321387a7a97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNWZhM2EwMmFhM2U3ZTUxMTFmMDQxMGFiZjczMjEzODdhN2E5N2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-29T19:11:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-05-03T20:07:28Z"}, "message": "Be more careful about the order in which we read the next field\nduring task annihilation, since it is easy to tread on freed memory.", "tree": {"sha": "d9147f27d4a03d32e28594f6c995d045516d7f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9147f27d4a03d32e28594f6c995d045516d7f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15fa3a02aa3e7e5111f0410abf7321387a7a97f", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15fa3a02aa3e7e5111f0410abf7321387a7a97f", "html_url": "https://github.com/rust-lang/rust/commit/c15fa3a02aa3e7e5111f0410abf7321387a7a97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15fa3a02aa3e7e5111f0410abf7321387a7a97f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79aeb529d5603e38e1e1ca0e0307eb9e998e1104", "url": "https://api.github.com/repos/rust-lang/rust/commits/79aeb529d5603e38e1e1ca0e0307eb9e998e1104", "html_url": "https://github.com/rust-lang/rust/commit/79aeb529d5603e38e1e1ca0e0307eb9e998e1104"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "aca49c946447751ee267df310480c24b2d5becf6", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c15fa3a02aa3e7e5111f0410abf7321387a7a97f/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15fa3a02aa3e7e5111f0410abf7321387a7a97f/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=c15fa3a02aa3e7e5111f0410abf7321387a7a97f", "patch": "@@ -126,22 +126,29 @@ struct AnnihilateStats {\n     n_bytes_freed: uint\n }\n \n-unsafe fn each_live_alloc(f: &fn(box: *mut BoxRepr, uniq: bool) -> bool) {\n+unsafe fn each_live_alloc(read_next_before: bool,\n+                          f: &fn(box: *mut BoxRepr, uniq: bool) -> bool) {\n+    //! Walks the internal list of allocations\n+\n     use managed;\n \n     let task: *Task = transmute(rustrt::rust_get_task());\n     let box = (*task).boxed_region.live_allocs;\n     let mut box: *mut BoxRepr = transmute(copy box);\n     while box != mut_null() {\n-        let next = transmute(copy (*box).header.next);\n+        let next_before = transmute(copy (*box).header.next);\n         let uniq =\n             (*box).header.ref_count == managed::raw::RC_MANAGED_UNIQUE;\n \n         if ! f(box, uniq) {\n             break\n         }\n \n-        box = next\n+        if read_next_before {\n+            box = next_before;\n+        } else {\n+            box = transmute(copy (*box).header.next);\n+        }\n     }\n }\n \n@@ -173,7 +180,10 @@ pub unsafe fn annihilate() {\n     };\n \n     // Pass 1: Make all boxes immortal.\n-    for each_live_alloc |box, uniq| {\n+    //\n+    // In this pass, nothing gets freed, so it does not matter whether\n+    // we read the next field before or after the callback.\n+    for each_live_alloc(true) |box, uniq| {\n         stats.n_total_boxes += 1;\n         if uniq {\n             stats.n_unique_boxes += 1;\n@@ -183,7 +193,11 @@ pub unsafe fn annihilate() {\n     }\n \n     // Pass 2: Drop all boxes.\n-    for each_live_alloc |box, uniq| {\n+    //\n+    // In this pass, unique-managed boxes may get freed, but not\n+    // managed boxes, so we must read the `next` field *after* the\n+    // callback, as the original value may have been freed.\n+    for each_live_alloc(false) |box, uniq| {\n         if !uniq {\n             let tydesc: *TypeDesc = transmute(copy (*box).header.type_desc);\n             let drop_glue: DropGlue = transmute(((*tydesc).drop_glue, 0));\n@@ -192,7 +206,12 @@ pub unsafe fn annihilate() {\n     }\n \n     // Pass 3: Free all boxes.\n-    for each_live_alloc |box, uniq| {\n+    //\n+    // In this pass, managed boxes may get freed (but not\n+    // unique-managed boxes, though I think that none of those are\n+    // left), so we must read the `next` field before, since it will\n+    // not be valid after.\n+    for each_live_alloc(true) |box, uniq| {\n         if !uniq {\n             stats.n_bytes_freed +=\n                 (*((*box).header.type_desc)).size"}]}