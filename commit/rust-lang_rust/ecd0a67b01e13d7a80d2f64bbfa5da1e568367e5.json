{"sha": "ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDBhNjdiMDFlMTNkN2E4MGQyZjY0YmJmYTVkYTFlNTY4MzY3ZTU=", "commit": {"author": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2020-05-20T10:23:51Z"}, "committer": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2020-05-20T13:39:03Z"}, "message": "Make match_wild_err_arm pedantic, and update help messages", "tree": {"sha": "6e04a49a3d95ad218cbc4931e86b6e3889f90dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e04a49a3d95ad218cbc4931e86b6e3889f90dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl7FMvgZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf/IjD/0RhEj3Z8ELWFCANdvWSt2d\nKMZH6iUrgyym1DCMqTfPDzIkxrBAV6fABbXEd7Kjpdn/L4wAIhN9AcG2gRSRMomM\n74jlIuRfnWJyhAyPxJj9e1qfzgeLNUiV0pqr0HL5mPpatokivERMHPj5F7wjlWLd\n7MI7PL9qh9dGLq15Lji6ECBgpChty3K7+Qmx4eyhuEZrjGRMT8F3Z4RBxCxUil7K\nE4GoCHPqIUcQSuceNmB+n8UXR4I0gCBL0MvZs9X4tM7h7g7WqC3EZvxAw2qPOOsF\nvuaSz+lFjw3wbrLMwaXE+jVETyWVm7v9Jga6nLZk+wd35ytfg51V9BlUKpU2mT/8\nExsXXVAn7UDL//4R18sGqQDpVdiFzenbduXIeYBJuVHtKTdufnTgSBdf1nUQs/nv\nUQdeJcljvZ9wrHkLAg0QsUler1lgea4kkQUOKUZKtnW+9yw7VFaXNnnFsD39vXC/\nfAufSiyp/TAUeobDsDpyFXsaQYQvmed6LO/XQADaedyC54xsyFDX1AF4xhMj4vHf\nIuJN0knZfZQqMebONczymBePbXeVEsdQ5UqqkL3Ul+U5eW0sF5ccGNrl7g8+dqPv\nCCdFIK932ubF47HyIJ5Y8HZigdiy/A2nR6SBF/FUYKA5c52+NSEEwLVtkRNM0alL\nu8+w8VgvchMnwQxNQgRBAg==\n=zbLv\n-----END PGP SIGNATURE-----", "payload": "tree 6e04a49a3d95ad218cbc4931e86b6e3889f90dc6\nparent cafa94662ce3ffc1c8c1edca86e328fcc26ad3db\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1589970231 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1589981943 +0300\n\nMake match_wild_err_arm pedantic, and update help messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "html_url": "https://github.com/rust-lang/rust/commit/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/comments", "author": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "html_url": "https://github.com/rust-lang/rust/commit/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "057d39d4c825288ad295d1686043386a2000147a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "patch": "@@ -1141,6 +1141,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n+        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n@@ -1285,7 +1286,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_SINGLE_BINDING),\n-        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n@@ -1476,7 +1476,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n         LintId::of(&matches::MATCH_REF_PATS),\n-        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),"}, {"sha": "94380acfcfd4cb767c84df6bcc46a9fd78e36cef", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "patch": "@@ -168,7 +168,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for arm which matches all errors with `Err(_)`\n     /// and take drastic actions like `panic!`.\n     ///\n-    /// **Why is this bad?** It is generally a bad practice, just like\n+    /// **Why is this bad?** It is generally a bad practice, similar to\n     /// catching all exceptions in java with `catch(Exception)`\n     ///\n     /// **Known problems:** None.\n@@ -182,7 +182,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub MATCH_WILD_ERR_ARM,\n-    style,\n+    pedantic,\n     \"a `match` with `Err(_)` arm and take drastic actions\"\n }\n \n@@ -711,7 +711,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                                 arm.pat.span,\n                                 &format!(\"`Err({})` matches all errors\", &ident_bind_name),\n                                 None,\n-                                \"match each error separately or use the error output\",\n+                                \"match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\",\n                             );\n                         }\n                     }"}, {"sha": "8211a57b564391d42b8b15f1a97d11cbfa608f7e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "patch": "@@ -1195,7 +1195,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"match_wild_err_arm\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"a `match` with `Err(_)` arm and take drastic actions\",\n         deprecation: None,\n         module: \"matches\","}, {"sha": "6a2a02987dea7497b3773f4443c12b3d98fc76d9", "filename": "tests/ui/match_wild_err_arm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/tests%2Fui%2Fmatch_wild_err_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5/tests%2Fui%2Fmatch_wild_err_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.stderr?ref=ecd0a67b01e13d7a80d2f64bbfa5da1e568367e5", "patch": "@@ -5,31 +5,31 @@ LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n    |\n    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:17:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:23:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n   --> $DIR/match_wild_err_arm.rs:31:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^\n    |\n-   = note: match each error separately or use the error output\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: aborting due to 4 previous errors\n "}]}