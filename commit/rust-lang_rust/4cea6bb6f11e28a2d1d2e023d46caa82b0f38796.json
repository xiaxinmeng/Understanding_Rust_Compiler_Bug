{"sha": "4cea6bb6f11e28a2d1d2e023d46caa82b0f38796", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZWE2YmI2ZjExZTI4YTJkMWQyZTAyM2Q0NmNhYTgyYjBmMzg3OTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-13T08:55:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-13T08:59:18Z"}, "message": "Make make:: builders slightly more convenient", "tree": {"sha": "1e42b170b230271a5a906f0e9c19cbec27429929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e42b170b230271a5a906f0e9c19cbec27429929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796", "html_url": "https://github.com/rust-lang/rust/commit/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e177c65e36f432821087b215b83c2dad1c97f478", "url": "https://api.github.com/repos/rust-lang/rust/commits/e177c65e36f432821087b215b83c2dad1c97f478", "html_url": "https://github.com/rust-lang/rust/commit/e177c65e36f432821087b215b83c2dad1c97f478"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "6f005a2d88c9b0f9dccc4956ebfec057592d29ca", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=4cea6bb6f11e28a2d1d2e023d46caa82b0f38796", "patch": "@@ -358,7 +358,7 @@ fn replace_children<N: AstNode>(\n fn test_increase_indent() {\n     let arm_list = {\n         let arm = make::match_arm(iter::once(make::placeholder_pat().into()), make::expr_unit());\n-        make::match_arm_list(vec![arm.clone(), arm].into_iter())\n+        make::match_arm_list(vec![arm.clone(), arm])\n     };\n     assert_eq!(\n         arm_list.syntax().to_string(),"}, {"sha": "9749327fa45a55cdb7ea96d574882d7440ae0fc1", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cea6bb6f11e28a2d1d2e023d46caa82b0f38796/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=4cea6bb6f11e28a2d1d2e023d46caa82b0f38796", "patch": "@@ -84,18 +84,18 @@ pub fn placeholder_pat() -> ast::PlaceholderPat {\n \n pub fn tuple_struct_pat(\n     path: ast::Path,\n-    pats: impl Iterator<Item = ast::Pat>,\n+    pats: impl IntoIterator<Item = ast::Pat>,\n ) -> ast::TupleStructPat {\n-    let pats_str = pats.map(|p| p.syntax().to_string()).join(\", \");\n+    let pats_str = pats.into_iter().map(|p| p.syntax().to_string()).join(\", \");\n     return from_text(&format!(\"{}({})\", path.syntax(), pats_str));\n \n     fn from_text(text: &str) -> ast::TupleStructPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n \n-pub fn record_pat(path: ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n-    let pats_str = pats.map(|p| p.syntax().to_string()).join(\", \");\n+pub fn record_pat(path: ast::Path, pats: impl IntoIterator<Item = ast::Pat>) -> ast::RecordPat {\n+    let pats_str = pats.into_iter().map(|p| p.syntax().to_string()).join(\", \");\n     return from_text(&format!(\"{} {{ {} }}\", path.syntax(), pats_str));\n \n     fn from_text(text: &str) -> ast::RecordPat {\n@@ -129,17 +129,20 @@ pub fn match_arm_list(arms: impl IntoIterator<Item = ast::MatchArm>) -> ast::Mat\n     }\n }\n \n-pub fn where_pred(path: ast::Path, bounds: impl Iterator<Item = ast::TypeBound>) -> ast::WherePred {\n-    let bounds = bounds.map(|b| b.syntax().to_string()).join(\" + \");\n+pub fn where_pred(\n+    path: ast::Path,\n+    bounds: impl IntoIterator<Item = ast::TypeBound>,\n+) -> ast::WherePred {\n+    let bounds = bounds.into_iter().map(|b| b.syntax().to_string()).join(\" + \");\n     return from_text(&format!(\"{}: {}\", path.syntax(), bounds));\n \n     fn from_text(text: &str) -> ast::WherePred {\n         ast_from_text(&format!(\"fn f() where {} {{ }}\", text))\n     }\n }\n \n-pub fn where_clause(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereClause {\n-    let preds = preds.map(|p| p.syntax().to_string()).join(\", \");\n+pub fn where_clause(preds: impl IntoIterator<Item = ast::WherePred>) -> ast::WhereClause {\n+    let preds = preds.into_iter().map(|p| p.syntax().to_string()).join(\", \");\n     return from_text(preds.as_str());\n \n     fn from_text(text: &str) -> ast::WhereClause {"}]}