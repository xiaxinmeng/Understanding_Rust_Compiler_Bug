{"sha": "dd7735b722cc5de7c217012818de355f427d0bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNzczNWI3MjJjYzVkZTdjMjE3MDEyODE4ZGUzNTVmNDI3ZDBiYjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-02T00:59:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-02T00:59:00Z"}, "message": "make StorageLive kill the current value of the local", "tree": {"sha": "4d9876ac5412d02967e66d6db2d41856c8a183f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9876ac5412d02967e66d6db2d41856c8a183f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7735b722cc5de7c217012818de355f427d0bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7735b722cc5de7c217012818de355f427d0bb5", "html_url": "https://github.com/rust-lang/rust/commit/dd7735b722cc5de7c217012818de355f427d0bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7735b722cc5de7c217012818de355f427d0bb5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6ce463fe3d40dac627378bfbaeaa700da43a5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6ce463fe3d40dac627378bfbaeaa700da43a5c", "html_url": "https://github.com/rust-lang/rust/commit/db6ce463fe3d40dac627378bfbaeaa700da43a5c"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "b923ef24dccdb4b80bda2a92230d34a8e4e1e9e3", "filename": "src/eval_context.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd7735b722cc5de7c217012818de355f427d0bb5/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7735b722cc5de7c217012818de355f427d0bb5/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=dd7735b722cc5de7c217012818de355f427d0bb5", "patch": "@@ -1720,15 +1720,12 @@ impl<'tcx> Frame<'tcx> {\n         return Ok(());\n     }\n \n-    pub fn storage_live(&mut self, local: mir::Local) -> EvalResult<'tcx> {\n+    pub fn storage_live(&mut self, local: mir::Local) -> EvalResult<'tcx, Option<Value>> {\n         trace!(\"{:?} is now live\", local);\n-        if self.locals[local.index() - 1].is_some() {\n-            // The variables comes live now, but was already accessed previously, when it was still dead\n-            return Err(EvalError::DeadLocal);\n-        } else {\n-            self.locals[local.index() - 1] = Some(Value::ByVal(PrimVal::Undef));\n-        }\n-        return Ok(());\n+\n+        let old = self.locals[local.index() - 1];\n+        self.locals[local.index() - 1] = Some(Value::ByVal(PrimVal::Undef)); // StorageLive *always* kills the value that's currently stored\n+        return Ok(old);\n     }\n \n     /// Returns the old value of the local"}, {"sha": "aef73f8eb0d9208df605561bfc28dcb8c21e38b4", "filename": "src/step.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd7735b722cc5de7c217012818de355f427d0bb5/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7735b722cc5de7c217012818de355f427d0bb5/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=dd7735b722cc5de7c217012818de355f427d0bb5", "patch": "@@ -132,13 +132,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Lvalue::Local{ frame, local, field: None } if self.stack.len() == frame+1 => (frame, local),\n                     _ => return Err(EvalError::Unimplemented(\"Stroage annotations must refer to locals of the topmost stack frame.\".to_owned())) // FIXME maybe this should get its own error type\n                 };\n-                match stmt.kind {\n+                let old_val = match stmt.kind {\n                     StorageLive(_) => self.stack[frame].storage_live(local)?,\n-                    _ =>  {\n-                        let old_val = self.stack[frame].storage_dead(local)?;\n-                        self.deallocate_local(old_val)?;\n-                    }\n+                    StorageDead(_) =>  self.stack[frame].storage_dead(local)?,\n+                    _ => bug!(\"We already checked that we are a storage stmt\")\n                 };\n+                self.deallocate_local(old_val)?;\n             }\n \n             // Defined to do nothing. These are added by optimization passes, to avoid changing the"}]}