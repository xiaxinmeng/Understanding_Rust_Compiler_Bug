{"sha": "2e83c22154afb6dd9fe32a17e9eaa0332c073707", "node_id": "C_kwDOAAsO6NoAKDJlODNjMjIxNTRhZmI2ZGQ5ZmUzMmExN2U5ZWFhMDMzMmMwNzM3MDc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-06-28T09:40:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-08-27T12:30:05Z"}, "message": "rustc_target: Add some more target spec sanity checking", "tree": {"sha": "3d1845fa87471c29cff641f76d1df8487b1e8a8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1845fa87471c29cff641f76d1df8487b1e8a8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e83c22154afb6dd9fe32a17e9eaa0332c073707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e83c22154afb6dd9fe32a17e9eaa0332c073707", "html_url": "https://github.com/rust-lang/rust/commit/2e83c22154afb6dd9fe32a17e9eaa0332c073707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e83c22154afb6dd9fe32a17e9eaa0332c073707/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "html_url": "https://github.com/rust-lang/rust/commit/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0"}], "stats": {"total": 77, "additions": 60, "deletions": 17}, "files": [{"sha": "8cca33cc43b358e1a55cf56f23ce8c2bf5c31f51", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=2e83c22154afb6dd9fe32a17e9eaa0332c073707", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, RelocModel, Target, TargetOptions};\n \n /// A base target for AVR devices using the GNU toolchain.\n ///\n@@ -21,6 +21,7 @@ pub fn target(target_cpu: &'static str, mmcu: &'static str) -> Target {\n             late_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-lgcc\"]),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n+            relocation_model: RelocModel::Static,\n             ..TargetOptions::default()\n         },\n     }"}, {"sha": "cab4dd333d43dbc5edb34d0f634616d7af6597bb", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=2e83c22154afb6dd9fe32a17e9eaa0332c073707", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -9,6 +9,7 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,\n         families: cvs![\"unix\"],\n+        relocation_model: RelocModel::Static,\n         ..Default::default()\n     }\n }"}, {"sha": "3ae5c9b5d65ddb7b8451ab92a58e5adafd28271a", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=2e83c22154afb6dd9fe32a17e9eaa0332c073707", "patch": "@@ -837,15 +837,15 @@ impl fmt::Display for StackProtector {\n }\n \n macro_rules! supported_targets {\n-    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n+    ( $(($triple:literal, $module:ident ),)+ ) => {\n         $(mod $module;)+\n \n         /// List of supported targets\n-        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n+        pub const TARGETS: &[&str] = &[$($triple),+];\n \n         fn load_builtin(target: &str) -> Option<Target> {\n             let mut t = match target {\n-                $( $($triple)|+ => $module::target(), )+\n+                $( $triple => $module::target(), )+\n                 _ => return None,\n             };\n             t.is_builtin = true;\n@@ -861,7 +861,7 @@ macro_rules! supported_targets {\n             $(\n                 #[test] // `#[test]`\n                 fn $module() {\n-                    tests_impl::test_target(super::$module::target());\n+                    tests_impl::test_target(super::$module::target(), $triple);\n                 }\n             )+\n         }"}, {"sha": "4a53b9c173d1ff43b492e886e3313ab410c23530", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=2e83c22154afb6dd9fe32a17e9eaa0332c073707", "patch": "@@ -2,18 +2,20 @@ use super::super::*;\n use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n-pub(super) fn test_target(target: Target) {\n-    target.check_consistency();\n+pub(super) fn test_target(target: Target, triple: &str) {\n+    target.check_consistency(triple);\n     assert_eq!(Target::from_json(target.to_json()).map(|(j, _)| j), Ok(target));\n }\n \n impl Target {\n-    fn check_consistency(&self) {\n+    fn check_consistency(&self, triple: &str) {\n         assert_eq!(self.is_like_osx, self.vendor == \"apple\");\n         assert_eq!(self.is_like_solaris, self.os == \"solaris\" || self.os == \"illumos\");\n         assert_eq!(self.is_like_windows, self.os == \"windows\" || self.os == \"uefi\");\n         assert_eq!(self.is_like_wasm, self.arch == \"wasm32\" || self.arch == \"wasm64\");\n-        assert!(self.is_like_windows || !self.is_like_msvc);\n+        if self.is_like_msvc {\n+            assert!(self.is_like_windows);\n+        }\n \n         // Check that default linker flavor and lld flavor are compatible\n         // with some other key properties.\n@@ -94,8 +96,9 @@ impl Target {\n                             check_noncc(LinkerFlavor::Ld);\n                             check_noncc(LinkerFlavor::Lld(LldFlavor::Ld));\n                         }\n+                        LldFlavor::Ld64 => check_noncc(LinkerFlavor::Lld(LldFlavor::Ld64)),\n                         LldFlavor::Wasm => check_noncc(LinkerFlavor::Lld(LldFlavor::Wasm)),\n-                        LldFlavor::Ld64 | LldFlavor::Link => {}\n+                        LldFlavor::Link => {}\n                     },\n                     _ => {}\n                 }\n@@ -109,20 +112,56 @@ impl Target {\n             );\n         }\n \n-        assert!(\n-            (self.pre_link_objects_self_contained.is_empty()\n-                && self.post_link_objects_self_contained.is_empty())\n-                || self.link_self_contained != LinkSelfContainedDefault::False\n-        );\n+        if self.link_self_contained == LinkSelfContainedDefault::False {\n+            assert!(\n+                self.pre_link_objects_self_contained.is_empty()\n+                    && self.post_link_objects_self_contained.is_empty()\n+            );\n+        }\n \n         // If your target really needs to deviate from the rules below,\n         // except it and document the reasons.\n         // Keep the default \"unknown\" vendor instead.\n         assert_ne!(self.vendor, \"\");\n+        assert_ne!(self.os, \"\");\n         if !self.can_use_os_unknown() {\n             // Keep the default \"none\" for bare metal targets instead.\n             assert_ne!(self.os, \"unknown\");\n         }\n+\n+        // Check dynamic linking stuff\n+        // BPF: when targeting user space vms (like rbpf), those can load dynamic libraries.\n+        if self.os == \"none\" && self.arch != \"bpf\" {\n+            assert!(!self.dynamic_linking);\n+        }\n+        if self.only_cdylib\n+            || self.crt_static_allows_dylibs\n+            || !self.late_link_args_dynamic.is_empty()\n+        {\n+            assert!(self.dynamic_linking);\n+        }\n+        // Apparently PIC was slow on wasm at some point, see comments in wasm_base.rs\n+        if self.dynamic_linking && !(self.is_like_wasm && self.os != \"emscripten\") {\n+            assert_eq!(self.relocation_model, RelocModel::Pic);\n+        }\n+        // PIEs are supported but not enabled by default with linuxkernel target.\n+        if self.position_independent_executables && !triple.ends_with(\"-linuxkernel\") {\n+            assert_eq!(self.relocation_model, RelocModel::Pic);\n+        }\n+        if self.relocation_model == RelocModel::Pic {\n+            assert!(self.dynamic_linking || self.position_independent_executables);\n+        }\n+        if self.static_position_independent_executables {\n+            assert!(self.position_independent_executables);\n+        }\n+        if self.position_independent_executables {\n+            assert!(self.executables);\n+        }\n+\n+        // Check crt static stuff\n+        if self.crt_static_default || self.crt_static_allows_dylibs {\n+            assert!(self.crt_static_respected);\n+        }\n     }\n \n     // Add your target to the whitelist if it has `std` library"}, {"sha": "250da03cbd2b656af8fa21df4a369f6a33c82f2d", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e83c22154afb6dd9fe32a17e9eaa0332c073707/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=2e83c22154afb6dd9fe32a17e9eaa0332c073707", "patch": "@@ -9,7 +9,8 @@\n // the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n // code runs in the same environment, no process separation is supported.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, StackProbeType, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy};\n+use crate::spec::{RelocModel, StackProbeType, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::msvc_base::opts();\n@@ -46,6 +47,7 @@ pub fn opts() -> TargetOptions {\n         stack_probes: StackProbeType::Call,\n         singlethread: true,\n         linker: Some(\"rust-lld\".into()),\n+        relocation_model: RelocModel::Static,\n         ..base\n     }\n }"}]}