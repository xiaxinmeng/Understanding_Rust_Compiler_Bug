{"sha": "7a7256015411f3178df466438006fe45530f4109", "node_id": "C_kwDOAAsO6NoAKDdhNzI1NjAxNTQxMWYzMTc4ZGY0NjY0MzgwMDZmZTQ1NTMwZjQxMDk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-08T01:28:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-12T22:32:48Z"}, "message": "Reduce direct `mk_ty` usage.\n\nWe use more specific `mk_*` functions in most places, might as well use\nthem as much as possible.", "tree": {"sha": "ffd106d4018c6af3dce117fb13ad7f31ba677944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd106d4018c6af3dce117fb13ad7f31ba677944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7256015411f3178df466438006fe45530f4109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7256015411f3178df466438006fe45530f4109", "html_url": "https://github.com/rust-lang/rust/commit/7a7256015411f3178df466438006fe45530f4109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7256015411f3178df466438006fe45530f4109/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6248bbbf268c327d70967bc7dcab909f912b9bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6248bbbf268c327d70967bc7dcab909f912b9bf8", "html_url": "https://github.com/rust-lang/rust/commit/6248bbbf268c327d70967bc7dcab909f912b9bf8"}], "stats": {"total": 174, "additions": 92, "deletions": 82}, "files": [{"sha": "708f3bc0c78f942e39d549e929f719b4d0298646", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -385,10 +385,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     calculate_debuginfo_offset(bx, local, &var, base);\n \n                 // Create a variable which will be a pointer to the actual value\n-                let ptr_ty = bx.tcx().mk_ty(ty::RawPtr(ty::TypeAndMut {\n-                    mutbl: mir::Mutability::Mut,\n-                    ty: place.layout.ty,\n-                }));\n+                let ptr_ty = bx\n+                    .tcx()\n+                    .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n                 let ptr_layout = bx.layout_of(ptr_ty);\n                 let alloca = PlaceRef::alloca(bx, ptr_layout);\n                 bx.set_var_name(alloca.llval, &(var.name.to_string() + \".dbg.spill\"));"}, {"sha": "fc546e4de0ef61e57d8431383f0bd962136a78c0", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -193,7 +193,7 @@ fn get_info_on_unsized_field<'tcx>(\n \n     // Have to adjust type for ty::Str\n     let unsized_inner_ty = match unsized_inner_ty.kind() {\n-        ty::Str => tcx.mk_ty(ty::Uint(ty::UintTy::U8)),\n+        ty::Str => tcx.types.u8,\n         _ => unsized_inner_ty,\n     };\n \n@@ -216,7 +216,7 @@ fn create_pointee_place<'tcx>(\n \n         let (unsized_inner_ty, num_elems) = get_info_on_unsized_field(ty, valtree, tcx);\n         let unsized_inner_ty = match unsized_inner_ty.kind() {\n-            ty::Str => tcx.mk_ty(ty::Uint(ty::UintTy::U8)),\n+            ty::Str => tcx.types.u8,\n             _ => unsized_inner_ty,\n         };\n         let unsized_inner_ty_size ="}, {"sha": "bb4b7ad50b8f23e7099ef7c0c96dcb2c953332c9", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -217,10 +217,10 @@ impl Qualif for CustomEq {\n \n     fn in_adt_inherently<'tcx>(\n         cx: &ConstCx<'_, 'tcx>,\n-        adt: AdtDef<'tcx>,\n+        def: AdtDef<'tcx>,\n         substs: SubstsRef<'tcx>,\n     ) -> bool {\n-        let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));\n+        let ty = cx.tcx.mk_adt(def, substs);\n         !ty.is_structural_eq_shallow(cx.tcx)\n     }\n }"}, {"sha": "8c753a99a09f09b3c27d8fc6a088fb551fdd3cda", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -1250,7 +1250,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_ty(ty::Alias(ty::Projection, projection_ty.skip_binder()));\n+                let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n                 self.add_bounds(param_ty, ast_bounds.iter(), bounds, candidate.bound_vars());\n             }\n         }\n@@ -2930,7 +2930,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 };\n \n-                tcx.mk_ty(ty::Array(self.ast_ty_to_ty(ty), length))\n+                tcx.mk_array_with_const_len(self.ast_ty_to_ty(ty), length)\n             }\n             hir::TyKind::Typeof(e) => {\n                 let ty_erased = tcx.type_of(e.def_id);"}, {"sha": "c86af6a379bfa3bce6f73d15e4cf61bbe96193b1", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -1927,10 +1927,10 @@ pub(super) fn check_type_bounds<'tcx>(\n             let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n             let bound_var = ty::BoundVariableKind::Ty(kind);\n             bound_vars.push(bound_var);\n-            tcx.mk_ty(ty::Bound(\n+            tcx.mk_bound(\n                 ty::INNERMOST,\n                 ty::BoundTy { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n-            ))\n+            )\n             .into()\n         }\n         GenericParamDefKind::Lifetime => {"}, {"sha": "5f95622883b8f1230ddebf1c30c68418b1d89110", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -603,8 +603,7 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n                 // our example, the type was `Self`, which will also be\n                 // `Self` in the GAT.\n                 let ty_param = gat_generics.param_at(*ty_idx, tcx);\n-                let ty_param = tcx\n-                    .mk_ty(ty::Param(ty::ParamTy { index: ty_param.index, name: ty_param.name }));\n+                let ty_param = tcx.mk_ty_param(ty_param.index, ty_param.name);\n                 // Same for the region. In our example, 'a corresponds\n                 // to the 'me parameter.\n                 let region_param = gat_generics.param_at(*region_a_idx, tcx);"}, {"sha": "05f6d8e607211b424f47e26a3b6f58045ae74151", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -264,9 +264,7 @@ fn check_lang_start_fn<'tcx>(\n         // for example `start`'s generic should be a type parameter\n         let generics = tcx.generics_of(def_id);\n         let fn_generic = generics.param_at(0, tcx);\n-        let generic_tykind =\n-            ty::Param(ty::ParamTy { index: fn_generic.index, name: fn_generic.name });\n-        let generic_ty = tcx.mk_ty(generic_tykind);\n+        let generic_ty = tcx.mk_ty_param(fn_generic.index, fn_generic.name);\n         let expected_fn_sig =\n             tcx.mk_fn_sig([].iter(), &generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n         let expected_ty = tcx.mk_fn_ptr(Binder::dummy(expected_fn_sig));"}, {"sha": "12850c733e8a4968e635d5dac8ee38cd423483ec", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -1429,7 +1429,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n \n-        tcx.mk_ty(ty::Array(t, count))\n+        tcx.mk_array_with_const_len(t, count)\n     }\n \n     fn check_repeat_element_needs_copy_bound("}, {"sha": "3201035bdd8ba338ed90b35017661af99bcd857d", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -1296,7 +1296,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             )\n         });\n         let element_tys = tcx.mk_type_list(element_tys_iter);\n-        let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));\n+        let pat_ty = tcx.intern_tup(element_tys);\n         if let Some(mut err) = self.demand_eqtype_pat_diag(span, expected, pat_ty, ti) {\n             let reported = err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence"}, {"sha": "c11dcc8587b5d5515bd615875fc8598f05df4a6d", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -752,7 +752,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_ty(bound_to)\n         } else {\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))\n+            self.tcx().mk_bound(self.binder_index, var.into())\n         }\n     }\n "}, {"sha": "d5cb3fb24984871cb8393a0a4d79c1faeb6b8ba0", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, name }) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderType { universe: universe_mapped, name };\n-                self.tcx.mk_ty(ty::Placeholder(placeholder_mapped)).into()\n+                self.tcx.mk_placeholder(placeholder_mapped).into()\n             }\n \n             CanonicalVarKind::Region(ui) => self"}, {"sha": "39940f4592ded7982d93515c880121f5ecb320b3", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -88,10 +88,10 @@ impl<'tcx> InferCtxt<'tcx> {\n                 }))\n             },\n             types: &mut |bound_ty: ty::BoundTy| {\n-                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n                     name: bound_ty.kind,\n-                }))\n+                })\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n                 self.tcx"}, {"sha": "ae196a7133cae8d615816a02ddc12625ce881518", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -2071,14 +2071,14 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n \n         fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n             if let ty::Infer(_) = t.kind() {\n-                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n                     name: ty::BoundTyKind::Anon({\n                         let idx = self.idx;\n                         self.idx += 1;\n                         idx\n                     }),\n-                }))\n+                })\n             } else {\n                 t.super_fold_with(self)\n             }"}, {"sha": "e6e4545d9c3fb195f13a97ebaee34ae52c495b4b", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -345,9 +345,9 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n             var_values: tcx.mk_substs(infos.iter().enumerate().map(\n                 |(i, info)| -> ty::GenericArg<'tcx> {\n                     match info.kind {\n-                        CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => tcx\n-                            .mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into()))\n-                            .into(),\n+                        CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => {\n+                            tcx.mk_bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into()).into()\n+                        }\n                         CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n                             let br = ty::BoundRegion {\n                                 var: ty::BoundVar::from_usize(i),"}, {"sha": "9f544de9f8720d07adcbc2241d5c9e63de0d7728", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -162,7 +162,7 @@ impl<'tcx> Rvalue<'tcx> {\n         match *self {\n             Rvalue::Use(ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Repeat(ref operand, count) => {\n-                tcx.mk_ty(ty::Array(operand.ty(local_decls, tcx), count))\n+                tcx.mk_array_with_const_len(operand.ty(local_decls, tcx), count)\n             }\n             Rvalue::ThreadLocalRef(did) => {\n                 let static_ty = tcx.type_of(did);"}, {"sha": "802a1a5435ae1a9979d08bb5a2b92eab428dc941", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -1636,6 +1636,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if *r == kind { r } else { self.mk_region(kind) }\n     }\n \n+    // Avoid this in favour of more specific `mk_*` methods, where possible.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {\n@@ -1787,6 +1788,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))\n     }\n \n+    #[inline]\n+    pub fn mk_array_with_const_len(self, ty: Ty<'tcx>, ct: Const<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(Array(ty, ct))\n+    }\n+\n     #[inline]\n     pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(Slice(ty))\n@@ -1862,7 +1868,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         item_def_id: DefId,\n         substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n-        self.mk_ty(Alias(ty::Projection, self.mk_alias_ty(item_def_id, substs)))\n+        self.mk_alias(ty::Projection, self.mk_alias_ty(item_def_id, substs))\n     }\n \n     #[inline]\n@@ -1970,9 +1976,24 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn mk_bound(self, index: ty::DebruijnIndex, bound_ty: ty::BoundTy) -> Ty<'tcx> {\n+        self.mk_ty(Bound(index, bound_ty))\n+    }\n+\n+    #[inline]\n+    pub fn mk_placeholder(self, placeholder: ty::PlaceholderType) -> Ty<'tcx> {\n+        self.mk_ty(Placeholder(placeholder))\n+    }\n+\n+    #[inline]\n+    pub fn mk_alias(self, kind: ty::AliasKind, alias_ty: ty::AliasTy<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(Alias(kind, alias_ty))\n+    }\n+\n     #[inline]\n     pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Alias(ty::Opaque, self.mk_alias_ty(def_id, substs)))\n+        self.mk_alias(ty::Opaque, self.mk_alias_ty(def_id, substs))\n     }\n \n     pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {"}, {"sha": "c0d319edf76cef53678d35317ba267a56b423bff", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -562,10 +562,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     ))\n                 },\n                 types: &mut |t: ty::BoundTy| {\n-                    self.mk_ty(ty::Bound(\n-                        ty::INNERMOST,\n-                        ty::BoundTy { var: shift_bv(t.var), kind: t.kind },\n-                    ))\n+                    self.mk_bound(ty::INNERMOST, ty::BoundTy { var: shift_bv(t.var), kind: t.kind })\n                 },\n                 consts: &mut |c, ty: Ty<'tcx>| {\n                     self.mk_const(ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)), ty)\n@@ -614,7 +611,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon(index as u32))\n                     })\n                     .expect_ty();\n-                self.tcx.mk_ty(ty::Bound(ty::INNERMOST, BoundTy { var, kind }))\n+                self.tcx.mk_bound(ty::INNERMOST, BoundTy { var, kind })\n             }\n             fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n                 let entry = self.map.entry(bv);\n@@ -684,7 +681,7 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n         match *ty.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))\n+                self.tcx.mk_bound(debruijn, bound_ty)\n             }\n \n             _ if ty.has_vars_bound_at_or_above(self.current_index) => ty.super_fold_with(self),"}, {"sha": "3b22da41a57b130de59ed44424ea3fc823322943", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -502,7 +502,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {\n             let t = relation.relate(a_t, b_t)?;\n             match relation.relate(sz_a, sz_b) {\n-                Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n+                Ok(sz) => Ok(tcx.mk_array_with_const_len(t, sz)),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics."}, {"sha": "89cde91e755e12dddfd0823d92783a9576edcd9c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -1171,7 +1171,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_ty(ty::Bound(index.shifted_out(1), bv)))\n+                Ok(self.tcx().mk_bound(index.shifted_out(1), bv))\n             }\n         } else {\n             ty.try_super_fold_with(self)\n@@ -1260,7 +1260,7 @@ impl<'tcx> AliasTy<'tcx> {\n     }\n \n     pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        tcx.mk_ty(ty::Alias(self.kind(tcx), self))\n+        tcx.mk_alias(self.kind(tcx), self)\n     }\n }\n "}, {"sha": "cca178299df11af1a9f36509397f79018fa3c56b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -3572,7 +3572,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 {\n                     type_diffs = vec![\n                         Sorts(ty::error::ExpectedFound {\n-                            expected: self.tcx.mk_ty(ty::Alias(ty::Projection, where_pred.skip_binder().projection_ty)),\n+                            expected: self.tcx.mk_alias(ty::Projection, where_pred.skip_binder().projection_ty),\n                             found,\n                         }),\n                     ];"}, {"sha": "c2bce774bb5313b54cd1a69ce534d002a88c727d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -785,7 +785,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderType { universe, name: bound_ty.kind };\n                 self.mapped_types.insert(p, bound_ty);\n-                self.infcx.tcx.mk_ty(ty::Placeholder(p))\n+                self.infcx.tcx.mk_placeholder(p)\n             }\n             _ if t.has_vars_bound_at_or_above(self.current_index) => t.super_fold_with(self),\n             _ => t,\n@@ -915,7 +915,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.tcx().mk_ty(ty::Bound(db, *replace_var))\n+                        self.tcx().mk_bound(db, *replace_var)\n                     }\n                     None => ty,\n                 }"}, {"sha": "dc5bcb48cad7fc54dc6c3f96e2b06153755a6271", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -527,13 +527,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n                                 let bound_var = ty::BoundVariableKind::Ty(kind);\n                                 bound_vars.push(bound_var);\n-                                tcx.mk_ty(ty::Bound(\n+                                tcx.mk_bound(\n                                     ty::INNERMOST,\n                                     ty::BoundTy {\n                                         var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                         kind,\n                                     },\n-                                ))\n+                                )\n                                 .into()\n                             }\n                             GenericParamDefKind::Lifetime => {"}, {"sha": "7101f4042694f86c3ad6079d345497e41ff9a8fc", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -588,10 +588,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         _id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n     ) -> chalk_ir::Ty<RustInterner<'tcx>> {\n         // FIXME(chalk): actually get hidden ty\n-        self.interner\n-            .tcx\n-            .mk_ty(ty::Tuple(self.interner.tcx.intern_type_list(&[])))\n-            .lower_into(self.interner)\n+        self.interner.tcx.types.unit.lower_into(self.interner)\n     }\n \n     fn closure_kind(\n@@ -721,13 +718,13 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n     InternalSubsts::for_item(tcx, def_id, |param, substs| match param.kind {\n         ty::GenericParamDefKind::Type { .. } => tcx\n-            .mk_ty(ty::Bound(\n+            .mk_bound(\n                 ty::INNERMOST,\n                 ty::BoundTy {\n                     var: ty::BoundVar::from(param.index),\n                     kind: ty::BoundTyKind::Param(param.def_id, param.name),\n                 },\n-            ))\n+            )\n             .into(),\n \n         ty::GenericParamDefKind::Lifetime => {\n@@ -790,10 +787,9 @@ impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) = *ty.kind() {\n             if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n-                return self.tcx.mk_ty(ty::Bound(\n-                    self.binder_index,\n-                    ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n-                ));\n+                return self\n+                    .tcx\n+                    .mk_bound(self.binder_index, ty::BoundTy::from(ty::BoundVar::from_u32(0)));\n             }\n         }\n         ty"}, {"sha": "4f71dcde81878ebea059ab4d9f85766d81f1fe53", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -677,11 +677,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         // shifted in by one so that they are still escaping.\n         let predicates = ty::fold::shift_vars(interner.tcx, self, 1);\n \n-        let self_ty = interner.tcx.mk_ty(ty::Bound(\n+        let self_ty = interner.tcx.mk_bound(\n             // This is going to be wrapped in a binder\n             ty::DebruijnIndex::from_usize(1),\n             ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon(0) },\n-        ));\n+        );\n         let where_clauses = predicates.into_iter().map(|predicate| {\n             let (predicate, binders, _named_regions) =\n                 collect_bound_vars(interner, interner.tcx, predicate);\n@@ -1077,18 +1077,18 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n-                Some(idx) => self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                Some(idx) => self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n                     name: ty::BoundTyKind::Anon(idx as u32),\n-                })),\n+                }),\n                 None => {\n                     self.list.push(param);\n                     let idx = self.list.len() - 1 + self.next_ty_placeholder;\n                     self.params.insert(idx as u32, param);\n-                    self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                    self.tcx.mk_placeholder(ty::PlaceholderType {\n                         universe: ty::UniverseIndex::from_usize(0),\n                         name: ty::BoundTyKind::Anon(idx as u32),\n-                    }))\n+                    })\n                 }\n             },\n             _ => t.super_fold_with(self),\n@@ -1147,7 +1147,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n         match *t.kind() {\n             ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n                 match self.params.get(&name.expect_anon()) {\n-                    Some(param) => self.tcx.mk_ty(ty::Param(*param)),\n+                    Some(&ty::ParamTy { index, name }) => self.tcx.mk_ty_param(index, name),\n                     None => t,\n                 }\n             }"}, {"sha": "0e2191185eb2ef13895c7288a69d25cd5a17bdf4", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a7256015411f3178df466438006fe45530f4109/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7256015411f3178df466438006fe45530f4109/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7a7256015411f3178df466438006fe45530f4109", "patch": "@@ -516,27 +516,27 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         // FIXME: Only simple types are supported here, see if we can support\n         // other types such as Tuple, Array, Slice, etc.\n         // See https://github.com/rust-lang/rust/issues/90703#issuecomment-1004263455\n-        Some(tcx.mk_ty(match prim {\n-            Bool => ty::Bool,\n-            Str => ty::Str,\n-            Char => ty::Char,\n-            Never => ty::Never,\n-            I8 => ty::Int(ty::IntTy::I8),\n-            I16 => ty::Int(ty::IntTy::I16),\n-            I32 => ty::Int(ty::IntTy::I32),\n-            I64 => ty::Int(ty::IntTy::I64),\n-            I128 => ty::Int(ty::IntTy::I128),\n-            Isize => ty::Int(ty::IntTy::Isize),\n-            F32 => ty::Float(ty::FloatTy::F32),\n-            F64 => ty::Float(ty::FloatTy::F64),\n-            U8 => ty::Uint(ty::UintTy::U8),\n-            U16 => ty::Uint(ty::UintTy::U16),\n-            U32 => ty::Uint(ty::UintTy::U32),\n-            U64 => ty::Uint(ty::UintTy::U64),\n-            U128 => ty::Uint(ty::UintTy::U128),\n-            Usize => ty::Uint(ty::UintTy::Usize),\n+        Some(match prim {\n+            Bool => tcx.types.bool,\n+            Str => tcx.types.str_,\n+            Char => tcx.types.char,\n+            Never => tcx.types.never,\n+            I8 => tcx.types.i8,\n+            I16 => tcx.types.i16,\n+            I32 => tcx.types.i32,\n+            I64 => tcx.types.i64,\n+            I128 => tcx.types.i128,\n+            Isize => tcx.types.isize,\n+            F32 => tcx.types.f32,\n+            F64 => tcx.types.f64,\n+            U8 => tcx.types.u8,\n+            U16 => tcx.types.u16,\n+            U32 => tcx.types.u32,\n+            U64 => tcx.types.u64,\n+            U128 => tcx.types.u128,\n+            Usize => tcx.types.usize,\n             _ => return None,\n-        }))\n+        })\n     }\n \n     /// Resolve an associated item, returning its containing page's `Res`"}]}