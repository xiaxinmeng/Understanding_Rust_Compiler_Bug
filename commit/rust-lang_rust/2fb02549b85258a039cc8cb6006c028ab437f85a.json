{"sha": "2fb02549b85258a039cc8cb6006c028ab437f85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjAyNTQ5Yjg1MjU4YTAzOWNjOGNiNjAwNmMwMjhhYjQzN2Y4NWE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-28T15:50:39Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Ensure RPIT types get recorded in borrowck", "tree": {"sha": "2765e519c33b928c48cedefbedb2c176e5b7ef91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2765e519c33b928c48cedefbedb2c176e5b7ef91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb02549b85258a039cc8cb6006c028ab437f85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb02549b85258a039cc8cb6006c028ab437f85a", "html_url": "https://github.com/rust-lang/rust/commit/2fb02549b85258a039cc8cb6006c028ab437f85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb02549b85258a039cc8cb6006c028ab437f85a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edee23ee25d813547587fdd6bcd3677606839fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/edee23ee25d813547587fdd6bcd3677606839fad", "html_url": "https://github.com/rust-lang/rust/commit/edee23ee25d813547587fdd6bcd3677606839fad"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "1f1106f054555de52ec73d0a15408dc1d6591244", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb02549b85258a039cc8cb6006c028ab437f85a/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb02549b85258a039cc8cb6006c028ab437f85a/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=2fb02549b85258a039cc8cb6006c028ab437f85a", "patch": "@@ -120,6 +120,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.mir_def_id,\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n+            true,\n         ) {\n             span_mirbug!(\n                 self,\n@@ -143,6 +144,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.mir_def_id,\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n+                false,\n             ) {\n                 span_mirbug!(\n                     self,"}, {"sha": "e7b447158650379c0db7b845abcb42b3bf483308", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2fb02549b85258a039cc8cb6006c028ab437f85a/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb02549b85258a039cc8cb6006c028ab437f85a/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=2fb02549b85258a039cc8cb6006c028ab437f85a", "patch": "@@ -1122,7 +1122,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n                 let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id);\n-                return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n+                return self.eq_opaque_type_and_type(\n+                    sub,\n+                    sup,\n+                    parent_def_id,\n+                    locations,\n+                    category,\n+                    false,\n+                );\n             } else {\n                 return Err(terr);\n             }\n@@ -1188,6 +1195,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         anon_owner_def_id: DefId,\n         locations: Locations,\n         category: ConstraintCategory,\n+        is_function_return: bool,\n     ) -> Fallible<()> {\n         debug!(\n             \"eq_opaque_type_and_type( \\\n@@ -1241,11 +1249,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         };\n                         let opaque_defn_ty = match concrete_opaque_types.get(&opaque_def_id) {\n                             None => {\n-                                assert!(\n-                                    concrete_is_opaque,\n-                                    \"Non-defining use of {:?} with revealed type\",\n-                                    opaque_def_id,\n-                                );\n+                                if !concrete_is_opaque {\n+                                    tcx.sess.delay_span_bug(\n+                                        body.span,\n+                                        &format!(\n+                                            \"Non-defining use of {:?} with revealed type\",\n+                                            opaque_def_id,\n+                                        ),\n+                                    );\n+                                }\n                                 continue;\n                             }\n                             Some(opaque_defn_ty) => opaque_defn_ty,\n@@ -1261,7 +1273,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             opaque_decl.concrete_ty, resolved_ty, renumbered_opaque_defn_ty,\n                         );\n \n-                        if !concrete_is_opaque {\n+                        if !concrete_is_opaque\n+                            || (is_function_return\n+                                && matches!(opaque_decl.origin, hir::OpaqueTyOrigin::FnReturn))\n+                        {\n+                            // For return position impl Trait, the function\n+                            // return is the only possible definition site, so\n+                            // always record it.\n                             obligations.add(\n                                 infcx\n                                     .at(&ObligationCause::dummy(), param_env)"}]}