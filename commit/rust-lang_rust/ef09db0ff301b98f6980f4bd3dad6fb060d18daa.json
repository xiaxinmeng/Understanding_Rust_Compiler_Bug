{"sha": "ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDlkYjBmZjMwMWI5OGY2OTgwZjRiZDNkYWQ2ZmIwNjBkMThkYWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-04T01:41:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-08T18:25:42Z"}, "message": "Point out the known type when field doesn't satisfy bound\n\nFor file\n\n```rust\nuse std::path::Path;\n\nfn f(p: Path) { }\n```\n\nprovide the following error\n\n```nocode\nerror[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n --> file.rs:3:6\n  |\n3 | fn f(p: Path) { }\n  |      ^ within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n  |\n  = note: `[u8]` does not have a constant size known at compile-time\n  = note: required because it appears within the type `std::path::Path`\n  = note: all local variables must have a statically known size\n```", "tree": {"sha": "bbd68503fe3c97948fcfe670c05587b6c7d96931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd68503fe3c97948fcfe670c05587b6c7d96931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "html_url": "https://github.com/rust-lang/rust/commit/ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef09db0ff301b98f6980f4bd3dad6fb060d18daa/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070fad1701fb36b112853b0a6a9787a7bb7ff34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/070fad1701fb36b112853b0a6a9787a7bb7ff34c", "html_url": "https://github.com/rust-lang/rust/commit/070fad1701fb36b112853b0a6a9787a7bb7ff34c"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "db375f2be735b08ad0fe2158eec4220035e9b892", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ef09db0ff301b98f6980f4bd3dad6fb060d18daa/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef09db0ff301b98f6980f4bd3dad6fb060d18daa/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "patch": "@@ -487,13 +487,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             } else {\n                                 let trait_ref = trait_predicate.to_poly_trait_ref();\n \n-                                let mut err = struct_span_err!(self.tcx.sess, span, E0277,\n-                                    \"the trait bound `{}` is not satisfied\",\n-                                    trait_ref.to_predicate());\n-                                err.span_label(span, &format!(\"the trait `{}` is not implemented \\\n-                                                               for `{}`\",\n-                                                              trait_ref,\n-                                                              trait_ref.self_ty()));\n+                                let (post_message, pre_message) =\n+                                    if let ObligationCauseCode::BuiltinDerivedObligation(ref data)\n+                                        = obligation.cause.code {\n+                                    let parent_trait_ref = self.resolve_type_vars_if_possible(\n+                                        &data.parent_trait_ref);\n+                                    (format!(\" in `{}`\", parent_trait_ref.0.self_ty()),\n+                                     format!(\"within `{}`, \", parent_trait_ref.0.self_ty()))\n+                                } else {\n+                                    (String::new(), String::new())\n+                                };\n+                                let mut err = struct_span_err!(\n+                                    self.tcx.sess,\n+                                    span,\n+                                    E0277,\n+                                    \"the trait bound `{}` is not satisfied{}\",\n+                                    trait_ref.to_predicate(),\n+                                    post_message);\n+                                err.span_label(span,\n+                                               &format!(\"{}the trait `{}` is not \\\n+                                                         implemented for `{}`\",\n+                                                        pre_message,\n+                                                        trait_ref,\n+                                                        trait_ref.self_ty()));\n \n                                 // Try to report a help message\n "}, {"sha": "e31fea1e45863205e40132d17162e04a9fbe9e85", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef09db0ff301b98f6980f4bd3dad6fb060d18daa/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef09db0ff301b98f6980f4bd3dad6fb060d18daa/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::path::Path;\n+\n trait Foo {\n     fn bar(&self);\n }\n@@ -16,6 +18,13 @@ fn some_func<T: Foo>(foo: T) {\n     foo.bar();\n }\n \n+fn f(p: Path) { }\n+//~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n+//~| NOTE within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+//~| NOTE `[u8]` does not have a constant size known at compile-time\n+//~| NOTE required because it appears within the type `std::path::Path`\n+//~| NOTE all local variables must have a statically known size\n+\n fn main() {\n     some_func(5i32);\n     //~^ ERROR the trait bound `i32: Foo` is not satisfied"}]}