{"sha": "b4e17a5098f0413b01c90c8505e0f01e8bea50de", "node_id": "C_kwDOAAsO6NoAKGI0ZTE3YTUwOThmMDQxM2IwMWM5MGM4NTA1ZTBmMDFlOGJlYTUwZGU", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-17T08:41:26Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-19T07:24:06Z"}, "message": "refactor: improve \"ident starts with number\" error", "tree": {"sha": "48ec7d45ab5f0608ee1ffaadcbf360efceb67ad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ec7d45ab5f0608ee1ffaadcbf360efceb67ad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4e17a5098f0413b01c90c8505e0f01e8bea50de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQWuJYACgkQZ6vxb7Ds\n2HA+og//d9pgFMcEJdPaMI3ssoQgsxcwn/kr8bp9mN9mycDPrYNOVQknri0J3Z1V\ngm28l/fZ09z4nfPug9cq/quV0If+OwUC6ApQYE+LVjtzy9t1creQA9q34KyWd4xN\nbxRCsBpwGJDyNZFK8N7lZtpFlBAuWLX1l7yUPqtSMYTKJV7FLQtYZHKbIpUKtXoQ\nh3V63u7tGdK9rO+YcaDX0rJMgJlH7+Xhr/nI1tfum1P1AwBrYI1EBDVMZu4YU+aL\nPO+hRUlN+BQhDup+5j6EioS8uE5lJdQMgQwQkETLWmXCD22ssFwClZ4QZgNYMGpw\nvNVQ/PLH1fuX/Jlafg7vbVoWZ9uatnuSskanjUNnEu7497498AIgnqSMm6BThH4Y\nmLYbEOLzch8Zyki3bhJxEvy01gPok5jwCLFFHkDnU3o5oJb2SCMPi7UMon/kSepp\nRrkU7YcPYEzvLde/Nt/LE7zi+/wSl++baM0LOHbg9soG1imsGF1K5h8cQARm2W5S\nDnJCIHfYiZAUnPlH9QX9gKGSsqLw1wBmheaN/iyXZa37r3lToERQTa+AU0f2y1D7\nJstYtiQN65PTYdCfbRhsxF9PJmEsqkWPaS4CYaBy+wjgDbiWH/yeFtYHXVVh0W72\n+AyI3wfTTtFu5pxF30auH5f5bptu2AB/rhn36xWSwt+LUSUI1H0=\n=qtyt\n-----END PGP SIGNATURE-----", "payload": "tree 48ec7d45ab5f0608ee1ffaadcbf360efceb67ad1\nparent c9ddb73184290e0698060a80b0b5727d6ee11098\nauthor Ezra Shaw <ezrasure@outlook.com> 1679042486 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1679210646 +1300\n\nrefactor: improve \"ident starts with number\" error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e17a5098f0413b01c90c8505e0f01e8bea50de", "html_url": "https://github.com/rust-lang/rust/commit/b4e17a5098f0413b01c90c8505e0f01e8bea50de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4e17a5098f0413b01c90c8505e0f01e8bea50de/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9ddb73184290e0698060a80b0b5727d6ee11098", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ddb73184290e0698060a80b0b5727d6ee11098", "html_url": "https://github.com/rust-lang/rust/commit/c9ddb73184290e0698060a80b0b5727d6ee11098"}], "stats": {"total": 81, "additions": 61, "deletions": 20}, "files": [{"sha": "a9d116012ae5bf680dfb337568739e436342fc0e", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=b4e17a5098f0413b01c90c8505e0f01e8bea50de", "patch": "@@ -986,7 +986,10 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n \n #[derive(Subdiagnostic)]\n #[help(parse_invalid_identifier_with_leading_number)]\n-pub(crate) struct HelpIdentifierStartsWithNumber;\n+pub(crate) struct HelpIdentifierStartsWithNumber {\n+    #[primary_span]\n+    pub num_span: Span,\n+}\n \n pub(crate) struct ExpectedSemi {\n     pub span: Span,"}, {"sha": "47d1108491530e6ae6da69d031b5e484d47bb017", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b4e17a5098f0413b01c90c8505e0f01e8bea50de", "patch": "@@ -38,7 +38,7 @@ use rustc_errors::{\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n+use rustc_span::{Span, SpanSnippetError, Symbol, DUMMY_SP};\n use std::mem::take;\n use std::ops::{Deref, DerefMut};\n use thin_vec::{thin_vec, ThinVec};\n@@ -309,8 +309,11 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |t| t.is_ident()))\n         .then_some(SuggRemoveComma { span: self.token.span });\n \n-        let help_cannot_start_number =\n-            self.is_lit_bad_ident().then_some(HelpIdentifierStartsWithNumber);\n+        let help_cannot_start_number = self.is_lit_bad_ident().map(|(len, _valid_portion)| {\n+            let (invalid, _valid) = self.token.span.split_at(len as u32);\n+\n+            HelpIdentifierStartsWithNumber { num_span: invalid }\n+        });\n \n         let err = ExpectedIdentifier {\n             span: self.token.span,\n@@ -378,13 +381,24 @@ impl<'a> Parser<'a> {\n \n     /// Checks if the current token is a integer or float literal and looks like\n     /// it could be a invalid identifier with digits at the start.\n-    pub(super) fn is_lit_bad_ident(&mut self) -> bool {\n-        matches!(self.token.uninterpolate().kind, token::Literal(Lit { kind: token::LitKind::Integer | token::LitKind::Float, .. })\n-            // ensure that the integer literal is followed by a *invalid*\n-            // suffix: this is how we know that it is a identifier with an\n-            // invalid beginning.\n-            if rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n-        )\n+    ///\n+    /// Returns the number of characters (bytes) composing the invalid portion\n+    /// of the identifier and the valid portion of the identifier.\n+    pub(super) fn is_lit_bad_ident(&mut self) -> Option<(usize, Symbol)> {\n+        // ensure that the integer literal is followed by a *invalid*\n+        // suffix: this is how we know that it is a identifier with an\n+        // invalid beginning.\n+        if let token::Literal(Lit {\n+            kind: token::LitKind::Integer | token::LitKind::Float,\n+            symbol,\n+            suffix,\n+        }) = self.token.uninterpolate().kind\n+            && rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n+        {\n+            Some((symbol.as_str().len(), suffix.unwrap()))\n+        } else {\n+            None\n+        }\n     }\n \n     pub(super) fn expected_one_of_not_found("}, {"sha": "d9af2415848684f112c8962d2926fbeb2de14e4b", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=b4e17a5098f0413b01c90c8505e0f01e8bea50de", "patch": "@@ -348,10 +348,6 @@ impl<'a> Parser<'a> {\n             lo = self.token.span;\n         }\n \n-        if self.is_lit_bad_ident() {\n-            return Err(self.expected_ident_found());\n-        }\n-\n         let pat = if self.check(&token::BinOp(token::And)) || self.token.kind == token::AndAnd {\n             self.parse_pat_deref(expected)?\n         } else if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n@@ -395,7 +391,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 PatKind::Lit(const_expr)\n             }\n-        } else if self.can_be_ident_pat() {\n+        } else if self.can_be_ident_pat() || self.is_lit_bad_ident().is_some() {\n             // Parse `ident @ pat`\n             // This can give false positives and parse nullary enums,\n             // they are dealt with later in resolve."}, {"sha": "02cffc762bed32597274febc1332400af944eebd", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e17a5098f0413b01c90c8505e0f01e8bea50de/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=b4e17a5098f0413b01c90c8505e0f01e8bea50de", "patch": "@@ -795,6 +795,18 @@ impl Span {\n         })\n     }\n \n+    /// Splits a span into two composite spans around a certain position.\n+    pub fn split_at(self, pos: u32) -> (Span, Span) {\n+        let len = self.hi().0 - self.lo().0;\n+        debug_assert!(pos <= len);\n+\n+        let split_pos = BytePos(self.lo().0 + pos);\n+        (\n+            Span::new(self.lo(), split_pos, self.ctxt(), self.parent()),\n+            Span::new(split_pos, self.hi(), self.ctxt(), self.parent()),\n+        )\n+    }\n+\n     /// Returns a `Span` that would enclose both `self` and `end`.\n     ///\n     /// Note that this can also be used to extend the span \"backwards\":"}, {"sha": "b2c6612965608ed45307849ed034d9ce480ac0dc", "filename": "tests/ui/parser/integer-literal-start-ident.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4e17a5098f0413b01c90c8505e0f01e8bea50de/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4e17a5098f0413b01c90c8505e0f01e8bea50de/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr?ref=b4e17a5098f0413b01c90c8505e0f01e8bea50de", "patch": "@@ -4,7 +4,11 @@ error: expected identifier, found `1main`\n LL | fn 1main() {}\n    |    ^^^^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/integer-literal-start-ident.rs:1:4\n+   |\n+LL | fn 1main() {}\n+   |    ^\n \n error: aborting due to previous error\n "}, {"sha": "08ea1c891c1726b1bdfd2283537bdf2d5089da51", "filename": "tests/ui/parser/issues/issue-104088.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4e17a5098f0413b01c90c8505e0f01e8bea50de/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4e17a5098f0413b01c90c8505e0f01e8bea50de/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr?ref=b4e17a5098f0413b01c90c8505e0f01e8bea50de", "patch": "@@ -4,23 +4,35 @@ error: expected identifier, found `1x`\n LL |     let 1x = 123;\n    |         ^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:6:9\n+   |\n+LL |     let 1x = 123;\n+   |         ^\n \n error: expected identifier, found `2x`\n   --> $DIR/issue-104088.rs:11:9\n    |\n LL |     let 2x: i32 = 123;\n    |         ^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:11:9\n+   |\n+LL |     let 2x: i32 = 123;\n+   |         ^\n \n error: expected identifier, found `23name`\n   --> $DIR/issue-104088.rs:22:9\n    |\n LL |     let 23name = 123;\n    |         ^^^^^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:22:9\n+   |\n+LL |     let 23name = 123;\n+   |         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-104088.rs:16:12"}]}