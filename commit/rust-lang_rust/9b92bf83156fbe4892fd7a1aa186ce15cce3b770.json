{"sha": "9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTJiZjgzMTU2ZmJlNDg5MmZkN2ExYWExODZjZTE1Y2NlM2I3NzA=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-09T11:03:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T11:03:49Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "4a2052f7823e16704144a13ef0727d793e408198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2052f7823e16704144a13ef0727d793e408198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFwiVCRBK7hj4Ov3rIwAAdHIIAKU/O3gjsC0FNmz0Zx0Sb7Bk\n8nlxd2BMjgP5BpWOgkSa0vvz09ZWFbgtRjFes7/wYDEikTZugenvsbRYL4xoBnzI\n8lS66BQ6bl1rlgfhyjdsXEtdt0lDvEJhkt54YyXwSzmBMmvdnOrEvlBoX794nXoF\neAJJ8fpoGsw9cAwot3+oMjP6CZ6iDDFdYYy4ph5IpQexMJUtOwg9J+ocAZMMec5j\nvEk1cxGpXSglAoFbd0ECQsJgbgIRtAFrZ1SXNkK0NQljDCl8XYxJdRfeF37rR1Vf\nlfTiXd2vOHfcEM6NmPgw2zQcUQz96S7x9tWIvJ6EEdxCuvFDY3t2JCadb3Lra/w=\n=8qLE\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a2052f7823e16704144a13ef0727d793e408198\nparent 37b5cca3d58413fafdf40aa231bcc5ababaaa0fe\nauthor Stein Somers <git@steinsomers.be> 1578567829 +0100\ncommitter GitHub <noreply@github.com> 1578567829 +0100\n\nApply suggestions from code review\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "html_url": "https://github.com/rust-lang/rust/commit/9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b92bf83156fbe4892fd7a1aa186ce15cce3b770/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe", "html_url": "https://github.com/rust-lang/rust/commit/37b5cca3d58413fafdf40aa231bcc5ababaaa0fe"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "f40e0b0c30479ae5a5b7fd3faa36faf8481631a7", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b92bf83156fbe4892fd7a1aa186ce15cce3b770/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b92bf83156fbe4892fd7a1aa186ce15cce3b770/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "patch": "@@ -591,6 +591,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         unsafe { &mut *(self.root as *mut Root<K, V>) }\n     }\n \n+    /// The caller must ensure that the node is not the shared root.\n     fn into_key_slice_mut(mut self) -> &'a mut [K] {\n         debug_assert!(!self.is_shared_root());\n         // We cannot be the shared root, so `as_leaf_mut` is okay."}, {"sha": "48cbf67eea2542afa0805698048011bd3db6d9c5", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b92bf83156fbe4892fd7a1aa186ce15cce3b770/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b92bf83156fbe4892fd7a1aa186ce15cce3b770/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "patch": "@@ -62,7 +62,7 @@ where\n     // This function is defined over all borrow types (immutable, mutable, owned),\n     // and may be called on the shared root in each case.\n     // Crucially, we use `keys()` here, i.e., we work with immutable data.\n-    // We do not need to make `keys_mut()` public and require support for the shared root.\n+    // `keys_mut()` does not support the shared root, so we cannot use it.\n     // Using `keys()` is fine here even if BorrowType is mutable, as all we return\n     // is an index -- not a reference.\n     for (i, k) in node.keys().iter().enumerate() {"}]}