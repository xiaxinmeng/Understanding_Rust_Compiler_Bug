{"sha": "99a33b32b8a7c639d6d742ad5f31592d33098596", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YTMzYjMyYjhhN2M2MzlkNmQ3NDJhZDVmMzE1OTJkMzMwOTg1OTY=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2020-12-01T13:45:43Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2020-12-01T13:45:43Z"}, "message": "Adding diesel to the cargetest suite\n\nThis was proposed in #79459 and #79560.\nDiesel stresses the trait system implementation quite a lot and there\nhave been various regressions regarding that in the past.", "tree": {"sha": "07f52b307b18540b1182652a589e33a53bc4016d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f52b307b18540b1182652a589e33a53bc4016d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a33b32b8a7c639d6d742ad5f31592d33098596", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAl/GSXIACgkQqHvO5SBc\n5Im/Hgf9FpsoPzFg1Z/PCxu9CunQt68s1b/OHyX2zkLlni8eMfI0SfjO4gwln/e8\nz7mhB2nd/3xoq8mCx0cJirTBFf+DUfTs8YKA2Q2JgmViBT8eTeuAvqUtokcaUW7d\n4Z9yRGOBkqN2wwfWUnAspwqBZ8pdz5AxZfI3JYG0Vt2uaL1cW6VAUEv8Z4AIJ7An\nYDvTqoTmCZbKVDh3x8FX9VLu69jveViBAkJW2kLal0bJ1n8JiJatmiE1tY2TNH/p\n564GcAAFrHwamqJvV6lUE4btsgQTRU+drN9tCWFayPyy5yCyCaRv95MT41HZD1nL\np9i0EhQViLan1ddio/KFNUVaFp3Uqg==\n=XsD/\n-----END PGP SIGNATURE-----", "payload": "tree 07f52b307b18540b1182652a589e33a53bc4016d\nparent 2b17f025610077b2b45bdb6401756e404e6c34b2\nauthor Georg Semmler <georg_semmler_05@web.de> 1606830343 +0100\ncommitter Georg Semmler <georg_semmler_05@web.de> 1606830343 +0100\n\nAdding diesel to the cargetest suite\n\nThis was proposed in #79459 and #79560.\nDiesel stresses the trait system implementation quite a lot and there\nhave been various regressions regarding that in the past.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a33b32b8a7c639d6d742ad5f31592d33098596", "html_url": "https://github.com/rust-lang/rust/commit/99a33b32b8a7c639d6d742ad5f31592d33098596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a33b32b8a7c639d6d742ad5f31592d33098596/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b17f025610077b2b45bdb6401756e404e6c34b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b17f025610077b2b45bdb6401756e404e6c34b2", "html_url": "https://github.com/rust-lang/rust/commit/2b17f025610077b2b45bdb6401756e404e6c34b2"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "574938235c6eea6372c55994b0a663b627e95e7a", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/99a33b32b8a7c639d6d742ad5f31592d33098596/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a33b32b8a7c639d6d742ad5f31592d33098596/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=99a33b32b8a7c639d6d742ad5f31592d33098596", "patch": "@@ -9,6 +9,8 @@ struct Test {\n     sha: &'static str,\n     lock: Option<&'static str>,\n     packages: &'static [&'static str],\n+    features: Option<&'static [&'static str]>,\n+    manifest_path: Option<&'static str>,\n }\n \n const TEST_REPOS: &[Test] = &[\n@@ -18,27 +20,35 @@ const TEST_REPOS: &[Test] = &[\n         sha: \"cf056ea5e8052c1feea6141e40ab0306715a2c33\",\n         lock: None,\n         packages: &[],\n+        features: None,\n+        manifest_path: None,\n     },\n     Test {\n         name: \"ripgrep\",\n         repo: \"https://github.com/BurntSushi/ripgrep\",\n         sha: \"3de31f752729525d85a3d1575ac1978733b3f7e7\",\n         lock: None,\n         packages: &[],\n+        features: None,\n+        manifest_path: None,\n     },\n     Test {\n         name: \"tokei\",\n         repo: \"https://github.com/XAMPPRocky/tokei\",\n         sha: \"fdf3f8cb279a7aeac0696c87e5d8b0cd946e4f9e\",\n         lock: None,\n         packages: &[],\n+        features: None,\n+        manifest_path: None,\n     },\n     Test {\n         name: \"xsv\",\n         repo: \"https://github.com/BurntSushi/xsv\",\n         sha: \"66956b6bfd62d6ac767a6b6499c982eae20a2c9f\",\n         lock: None,\n         packages: &[],\n+        features: None,\n+        manifest_path: None,\n     },\n     Test {\n         name: \"servo\",\n@@ -48,6 +58,23 @@ const TEST_REPOS: &[Test] = &[\n         // Only test Stylo a.k.a. Quantum CSS, the parts of Servo going into Firefox.\n         // This takes much less time to build than all of Servo and supports stable Rust.\n         packages: &[\"selectors\"],\n+        features: None,\n+        manifest_path: None,\n+    },\n+    Test {\n+        name: \"diesel\",\n+        repo: \"https://github.com/diesel-rs/diesel\",\n+        sha: \"91493fe47175076f330ce5fc518f0196c0476f56\",\n+        lock: None,\n+        packages: &[],\n+        // Test the embeded sqlite variant of diesel\n+        // This does not require any dependency to be present,\n+        // sqlite will be compiled as part of the build process\n+        features: Some(&[\"sqlite\", \"libsqlite3-sys/bundled\"]),\n+        // We are only interested in testing diesel itself\n+        // not any other crate present in the diesel workspace\n+        // (This is required to set the feature flags above)\n+        manifest_path: Some(\"diesel/Cargo.toml\"),\n     },\n ];\n \n@@ -68,7 +95,7 @@ fn test_repo(cargo: &Path, out_dir: &Path, test: &Test) {\n     if let Some(lockfile) = test.lock {\n         fs::write(&dir.join(\"Cargo.lock\"), lockfile).unwrap();\n     }\n-    if !run_cargo_test(cargo, &dir, test.packages) {\n+    if !run_cargo_test(cargo, &dir, test.packages, test.features, test.manifest_path) {\n         panic!(\"tests failed for {}\", test.repo);\n     }\n }\n@@ -120,12 +147,31 @@ fn clone_repo(test: &Test, out_dir: &Path) -> PathBuf {\n     out_dir\n }\n \n-fn run_cargo_test(cargo_path: &Path, crate_path: &Path, packages: &[&str]) -> bool {\n+fn run_cargo_test(\n+    cargo_path: &Path,\n+    crate_path: &Path,\n+    packages: &[&str],\n+    features: Option<&[&str]>,\n+    manifest_path: Option<&str>,\n+) -> bool {\n     let mut command = Command::new(cargo_path);\n     command.arg(\"test\");\n+\n+    if let Some(path) = manifest_path {\n+        command.arg(format!(\"--manifest-path={}\", path));\n+    }\n+\n+    if let Some(features) = features {\n+        command.arg(\"--no-default-features\");\n+        for feature in features {\n+            command.arg(format!(\"--features={}\", feature));\n+        }\n+    }\n+\n     for name in packages {\n         command.arg(\"-p\").arg(name);\n     }\n+\n     let status = command\n         // Disable rust-lang/cargo's cross-compile tests\n         .env(\"CFG_DISABLE_CROSS_TESTS\", \"1\")"}]}