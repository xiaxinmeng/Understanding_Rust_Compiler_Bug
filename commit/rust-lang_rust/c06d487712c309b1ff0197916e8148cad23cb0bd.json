{"sha": "c06d487712c309b1ff0197916e8148cad23cb0bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNmQ0ODc3MTJjMzA5YjFmZjAxOTc5MTZlODE0OGNhZDIzY2IwYmQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-14T11:37:54Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-14T11:37:54Z"}, "message": "Add offset wherever necessary", "tree": {"sha": "d30418303b70fa69c078a22d9401caf0e6e161de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d30418303b70fa69c078a22d9401caf0e6e161de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06d487712c309b1ff0197916e8148cad23cb0bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06d487712c309b1ff0197916e8148cad23cb0bd", "html_url": "https://github.com/rust-lang/rust/commit/c06d487712c309b1ff0197916e8148cad23cb0bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06d487712c309b1ff0197916e8148cad23cb0bd/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496e95846745aaa3f90c07cfd24bea1b6b24a0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/496e95846745aaa3f90c07cfd24bea1b6b24a0fa", "html_url": "https://github.com/rust-lang/rust/commit/496e95846745aaa3f90c07cfd24bea1b6b24a0fa"}], "stats": {"total": 95, "additions": 57, "deletions": 38}, "files": [{"sha": "7729ef5f10b142af43ac274343db71e8913a181c", "filename": "src/expr.rs", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c06d487712c309b1ff0197916e8148cad23cb0bd/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06d487712c309b1ff0197916e8148cad23cb0bd/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c06d487712c309b1ff0197916e8148cad23cb0bd", "patch": "@@ -371,7 +371,9 @@ where\n         // This is needed in case of line break not caused by a\n         // shortage of space, but by end-of-line comments, for example.\n         if !rhs_result.contains('\\n') {\n-            let lhs_shape = try_opt!(shape.sub_width(prefix.len() + infix.len()));\n+            let lhs_shape = try_opt!(try_opt!(shape.offset_left(prefix.len())).sub_width(\n+                infix.len(),\n+            ));\n             let lhs_result = lhs.rewrite(context, lhs_shape);\n             if let Some(lhs_result) = lhs_result {\n                 let mut result = format!(\"{}{}{}\", prefix, lhs_result, infix);\n@@ -412,22 +414,23 @@ where\n             try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n         }\n         Style::Rfc => {\n-            shape\n-                .block_indent(context.config.tab_spaces())\n-                .with_max_width(context.config)\n+            // Try to calculate the initial constraint on the right hand side.\n+            let rhs_overhead = context\n+                .config\n+                .max_width()\n+                .checked_sub(shape.used_width() + shape.width)\n+                .unwrap_or(0);\n+            try_opt!(\n+                Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                    .sub_width(rhs_overhead)\n+            )\n         }\n     };\n-\n     let rhs_result = try_opt!(rhs.rewrite(context, rhs_shape));\n-    let lhs_shape = match context.config.control_style() {\n-        Style::Legacy => {\n-            let lhs_overhead = shape.used_width() + prefix.len() + infix.len();\n-            Shape {\n-                width: try_opt!(context.config.max_width().checked_sub(lhs_overhead)),\n-                ..shape\n-            }\n-        }\n-        Style::Rfc => try_opt!(shape.sub_width(prefix.len() + infix.len())),\n+    let lhs_overhead = shape.used_width() + prefix.len() + infix.len();\n+    let lhs_shape = Shape {\n+        width: try_opt!(context.config.max_width().checked_sub(lhs_overhead)),\n+        ..shape\n     };\n     let lhs_result = try_opt!(lhs.rewrite(context, lhs_shape));\n     Some(format!(\n@@ -484,12 +487,9 @@ where\n         }\n     }\n \n-    let has_long_item = try_opt!(\n-        items\n-            .iter()\n-            .map(|li| li.item.as_ref().map(|s| s.len() > 10))\n-            .fold(Some(false), |acc, x| acc.and_then(|y| x.map(|x| x || y)))\n-    );\n+    let has_long_item = items.iter().any(|li| {\n+        li.item.as_ref().map(|s| s.len() > 10).unwrap_or(false)\n+    });\n \n     let tactic = match context.config.array_layout() {\n         IndentStyle::Block => {\n@@ -622,7 +622,7 @@ fn rewrite_closure(\n \n     // 1 = space between `|...|` and body.\n     let extra_offset = extra_offset(&prefix, shape) + 1;\n-    let body_shape = try_opt!(shape.sub_width(extra_offset)).add_offset(extra_offset);\n+    let body_shape = try_opt!(shape.offset_left(extra_offset));\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n         // The body of the closure is an empty block.\n@@ -1020,13 +1020,13 @@ impl<'a> Rewrite for ControlFlow<'a> {\n \n         let label_string = rewrite_label(self.label);\n         // 1 = space after keyword.\n-        let add_offset = self.keyword.len() + label_string.len() + 1;\n+        let offset = self.keyword.len() + label_string.len() + 1;\n \n         let pat_expr_string = match self.cond {\n             Some(cond) => {\n                 let mut cond_shape = match context.config.control_style() {\n-                    Style::Legacy => try_opt!(constr_shape.shrink_left(add_offset)),\n-                    Style::Rfc => try_opt!(constr_shape.sub_width(add_offset)),\n+                    Style::Legacy => try_opt!(constr_shape.shrink_left(offset)),\n+                    Style::Rfc => try_opt!(constr_shape.offset_left(offset)),\n                 };\n                 if context.config.control_brace_style() != ControlBraceStyle::AlwaysNextLine {\n                     // 2 = \" {\".len()\n@@ -1346,7 +1346,7 @@ fn rewrite_match(\n     // `match `cond` {`\n     let cond_shape = match context.config.control_style() {\n         Style::Legacy => try_opt!(shape.shrink_left(6).and_then(|s| s.sub_width(2))),\n-        Style::Rfc => try_opt!(shape.sub_width(8)),\n+        Style::Rfc => try_opt!(shape.offset_left(8)),\n     };\n     let cond_str = try_opt!(cond.rewrite(context, cond_shape));\n     let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n@@ -1572,8 +1572,7 @@ impl Rewrite for ast::Arm {\n \n         // FIXME: we're doing a second rewrite of the expr; This may not be\n         // necessary.\n-        let body_shape = try_opt!(shape.sub_width(context.config.tab_spaces()))\n-            .block_indent(context.config.tab_spaces());\n+        let body_shape = try_opt!(shape.block_left(context.config.tab_spaces()));\n         let next_line_body = try_opt!(nop_block_collapse(\n             body.rewrite(context, body_shape),\n             body_shape.width,\n@@ -1700,7 +1699,7 @@ fn rewrite_pat_expr(\n             } else {\n                 format!(\"{} \", matcher)\n             };\n-            let pat_shape = try_opt!(try_opt!(shape.shrink_left(matcher.len())).sub_width(\n+            let pat_shape = try_opt!(try_opt!(shape.offset_left(matcher.len())).sub_width(\n                 connector.len(),\n             ));\n             pat_string = try_opt!(pat.rewrite(context, pat_shape));\n@@ -2133,19 +2132,29 @@ fn wrap_args_with_parens(\n \n fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) -> Option<String> {\n     debug!(\"rewrite_paren, shape: {:?}\", shape);\n-    // 1 is for opening paren, 2 is for opening+closing, we want to keep the closing\n-    // paren on the same line as the subexpr.\n-    let sub_shape = try_opt!(shape.sub_width(2)).visual_indent(1);\n-    let subexpr_str = subexpr.rewrite(context, sub_shape);\n-    debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n+    let paren_overhead = paren_overhead(context);\n+    let sub_shape = try_opt!(shape.sub_width(paren_overhead / 2)).visual_indent(paren_overhead / 2);\n \n-    subexpr_str.map(|s| if context.config.spaces_within_parens() &&\n-        s.len() > 0\n-    {\n+    let paren_wrapper = |s: &str| if context.config.spaces_within_parens() && s.len() > 0 {\n         format!(\"( {} )\", s)\n     } else {\n         format!(\"({})\", s)\n-    })\n+    };\n+\n+    let subexpr_str = try_opt!(subexpr.rewrite(context, sub_shape));\n+    debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n+\n+    if subexpr_str.contains('\\n') {\n+        Some(paren_wrapper(&subexpr_str))\n+    } else {\n+        if subexpr_str.len() + paren_overhead <= shape.width {\n+            Some(paren_wrapper(&subexpr_str))\n+        } else {\n+            let sub_shape = try_opt!(shape.offset_left(2));\n+            let subexpr_str = try_opt!(subexpr.rewrite(context, sub_shape));\n+            Some(paren_wrapper(&subexpr_str))\n+        }\n+    }\n }\n \n fn rewrite_index("}, {"sha": "2e00bcbd10d73dc8bb97f53039dbe7015640c017", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c06d487712c309b1ff0197916e8148cad23cb0bd/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06d487712c309b1ff0197916e8148cad23cb0bd/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c06d487712c309b1ff0197916e8148cad23cb0bd", "patch": "@@ -1831,7 +1831,17 @@ fn rewrite_fn_base(\n     result.push_str(&ident.to_string());\n \n     // Generics.\n-    let shape = Shape::indented(indent + last_line_width(&result), context.config);\n+    let overhead = if has_braces && !newline_brace {\n+        // 4 = `() {`\n+        4\n+    } else {\n+        // 2 = `()`\n+        2\n+    };\n+    let shape = try_opt!(\n+        Shape::indented(indent + last_line_width(&result), context.config)\n+            .sub_width(overhead)\n+    );\n     let g_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n     result.push_str(&generics_str);"}]}