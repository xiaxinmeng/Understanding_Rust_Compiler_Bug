{"sha": "8fe6688fcf14508f95db6c96b92f4279ccb0c6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTY2ODhmY2YxNDUwOGY5NWRiNmM5NmI5MmY0Mjc5Y2NiMGM2YmU=", "commit": {"author": {"name": "Franc\u0327ois Mockers", "email": "mockersf@gmail.com", "date": "2018-10-22T07:08:09Z"}, "committer": {"name": "Franc\u0327ois Mockers", "email": "mockersf@gmail.com", "date": "2018-10-22T07:08:09Z"}, "message": "better dummy span detection and remove redundant branch", "tree": {"sha": "cac80437d05baf809513e31a0832c1c1c154a9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac80437d05baf809513e31a0832c1c1c154a9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe6688fcf14508f95db6c96b92f4279ccb0c6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe6688fcf14508f95db6c96b92f4279ccb0c6be", "html_url": "https://github.com/rust-lang/rust/commit/8fe6688fcf14508f95db6c96b92f4279ccb0c6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe6688fcf14508f95db6c96b92f4279ccb0c6be/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eacd68a4945aaba244885c330f64004da58a408", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eacd68a4945aaba244885c330f64004da58a408", "html_url": "https://github.com/rust-lang/rust/commit/9eacd68a4945aaba244885c330f64004da58a408"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "b18747da0bcdd8599f739477ed7e965f1ffbc441", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8fe6688fcf14508f95db6c96b92f4279ccb0c6be/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe6688fcf14508f95db6c96b92f4279ccb0c6be/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8fe6688fcf14508f95db6c96b92f4279ccb0c6be", "patch": "@@ -4779,11 +4779,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if let (\n                 Ok(snippet),\n                 NameBindingKind::Import { directive, ..},\n-                _x @ 1 ... std::u32::MAX,\n+                _dummy @ false,\n             ) = (\n                 cm.span_to_snippet(binding.span),\n                 binding.kind.clone(),\n-                binding.span.hi().0,\n+                binding.span.is_dummy(),\n             ) {\n                 let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n                     format!(\"Other{}\", name)\n@@ -4794,28 +4794,27 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 err.span_suggestion_with_applicability(\n                     binding.span,\n                     &rename_msg,\n-                    match (&directive.subclass, snippet.ends_with(\";\"), snippet.as_ref()) {\n-                        (ImportDirectiveSubclass::SingleImport { .. }, false, \"self\") =>\n+                    match (&directive.subclass, snippet.as_ref()) {\n+                        (ImportDirectiveSubclass::SingleImport { .. }, \"self\") =>\n                             format!(\"self as {}\", suggested_name),\n-                        (ImportDirectiveSubclass::SingleImport { source, .. }, false, _) =>\n+                        (ImportDirectiveSubclass::SingleImport { source, .. }, _) =>\n                             format!(\n-                                \"{} as {}\",\n-                                &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n-                                suggested_name,\n-                            ),\n-                        (ImportDirectiveSubclass::SingleImport { source, .. }, true, _) =>\n-                            format!(\n-                                \"{} as {};\",\n+                                \"{} as {}{}\",\n                                 &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n                                 suggested_name,\n+                                if snippet.ends_with(\";\") {\n+                                    \";\"\n+                                } else {\n+                                    \"\"\n+                                }\n                             ),\n-                        (ImportDirectiveSubclass::ExternCrate { source, target, .. }, _, _) =>\n+                        (ImportDirectiveSubclass::ExternCrate { source, target, .. }, _) =>\n                             format!(\n                                 \"extern crate {} as {};\",\n                                 source.unwrap_or(target.name),\n                                 suggested_name,\n                             ),\n-                        (_, _, _) => unreachable!(),\n+                        (_, _) => unreachable!(),\n                     },\n                     Applicability::MaybeIncorrect,\n                 );"}]}