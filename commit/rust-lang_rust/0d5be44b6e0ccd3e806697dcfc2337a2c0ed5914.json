{"sha": "0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNWJlNDRiNmUwY2NkM2U4MDY2OTdkY2ZjMjMzN2EyYzBlZDU5MTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-06T18:10:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-06T18:10:17Z"}, "message": "Merge #6482\n\n6482: More orthogonal API r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1f048935ea6b51cc1e5f01d0613552264b31f02d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f048935ea6b51cc1e5f01d0613552264b31f02d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfpZGJCRBK7hj4Ov3rIwAAdHIIAKVObr2TC2f8bT/c1way3e+R\nPipuqZQt6TDWYYVlIb0QzolmFpaxjlLUVS2GiSRFow4YjnpwIeKLs50UUhU1X8Rb\nE+b4XqC/n54Hw/SeHGjeKUAKh3xfSi48an1jB081wflEoVYsHNtx+iOEAHh4iw/k\nFGiutzvLnKfciihHvJgK0USVEGX7/RttaxV3kLSgKO+QDb+I+wsREgzX0XFqp94G\njIAqURsz5I3Xg8iE5v8aozw9LXNxrVtbsG2WK8l04L/4U98ww03Xcyl6WBNv0zTT\ndNiv5vg2/7lK8MoFlJxjHQ4jrVS4lLyOunEg1vnTmByF3kz0yIXL69nKZbRK4r4=\n=f8dG\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f048935ea6b51cc1e5f01d0613552264b31f02d\nparent 2c408c68a4a27e9a85ce85ec1342e3af58c1571f\nparent eb460333907a44c37bf7287b31c653877c3358c2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604686217 +0000\ncommitter GitHub <noreply@github.com> 1604686217 +0000\n\nMerge #6482\n\n6482: More orthogonal API r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "html_url": "https://github.com/rust-lang/rust/commit/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c408c68a4a27e9a85ce85ec1342e3af58c1571f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c408c68a4a27e9a85ce85ec1342e3af58c1571f", "html_url": "https://github.com/rust-lang/rust/commit/2c408c68a4a27e9a85ce85ec1342e3af58c1571f"}, {"sha": "eb460333907a44c37bf7287b31c653877c3358c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb460333907a44c37bf7287b31c653877c3358c2", "html_url": "https://github.com/rust-lang/rust/commit/eb460333907a44c37bf7287b31c653877c3358c2"}], "stats": {"total": 257, "additions": 154, "deletions": 103}, "files": [{"sha": "5957834d307349f2dd4047a58816f1f9bf941520", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "patch": "@@ -1,4 +1,4 @@\n-use syntax::{ast, ast::Radix, AstNode};\n+use syntax::{ast, ast::Radix, AstToken};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n \n@@ -14,15 +14,13 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // const _: i32 = 0b1010;\n // ```\n pub(crate) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let literal = ctx.find_node_at_offset::<ast::Literal>()?;\n-    let (radix, value) = literal.int_value()?;\n+    let literal = ctx.find_node_at_offset::<ast::Literal>()?.as_int_number()?;\n+    let radix = literal.radix();\n+    let value = literal.value()?;\n+    let suffix = literal.suffix();\n \n     let range = literal.syntax().text_range();\n     let group_id = GroupLabel(\"Convert integer base\".into());\n-    let suffix = match literal.kind() {\n-        ast::LiteralKind::IntNumber { suffix } => suffix,\n-        _ => return None,\n-    };\n \n     for &target_radix in Radix::ALL {\n         if target_radix == radix {\n@@ -36,16 +34,11 @@ pub(crate) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext) ->\n             Radix::Hexadecimal => format!(\"0x{:X}\", value),\n         };\n \n-        let label = format!(\n-            \"Convert {} to {}{}\",\n-            literal,\n-            converted,\n-            suffix.as_deref().unwrap_or_default()\n-        );\n+        let label = format!(\"Convert {} to {}{}\", literal, converted, suffix.unwrap_or_default());\n \n         // Appends the type suffix back into the new literal if it exists.\n-        if let Some(suffix) = &suffix {\n-            converted.push_str(&suffix);\n+        if let Some(suffix) = suffix {\n+            converted.push_str(suffix);\n         }\n \n         acc.add_group("}, {"sha": "8a0e3d27b21ab6647ed0229cbafccf0c9717c05a", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, Radix, RangeOp},\n+    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,"}, {"sha": "3d33cd1cf7955cb5928c182c4a784bf1cffbac99", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 12, "deletions": 75, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n-    SmolStr,\n+    AstToken, SmolStr,\n     SyntaxKind::*,\n     SyntaxToken, T,\n };\n@@ -316,6 +316,10 @@ impl ast::Literal {\n             .unwrap()\n     }\n \n+    pub fn as_int_number(&self) -> Option<ast::IntNumber> {\n+        ast::IntNumber::cast(self.token())\n+    }\n+\n     fn find_suffix(text: &str, possible_suffixes: &[&str]) -> Option<SmolStr> {\n         possible_suffixes\n             .iter()\n@@ -324,11 +328,6 @@ impl ast::Literal {\n     }\n \n     pub fn kind(&self) -> LiteralKind {\n-        const INT_SUFFIXES: [&str; 12] = [\n-            \"u64\", \"u32\", \"u16\", \"u8\", \"usize\", \"isize\", \"i64\", \"i32\", \"i16\", \"i8\", \"u128\", \"i128\",\n-        ];\n-        const FLOAT_SUFFIXES: [&str; 2] = [\"f32\", \"f64\"];\n-\n         let token = self.token();\n \n         match token.kind() {\n@@ -337,17 +336,20 @@ impl ast::Literal {\n                 // The lexer treats e.g. `1f64` as an integer literal. See\n                 // https://github.com/rust-analyzer/rust-analyzer/issues/1592\n                 // and the comments on the linked PR.\n-\n                 let text = token.text();\n-                if let suffix @ Some(_) = Self::find_suffix(&text, &FLOAT_SUFFIXES) {\n+                if let suffix @ Some(_) = Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES) {\n                     LiteralKind::FloatNumber { suffix }\n                 } else {\n-                    LiteralKind::IntNumber { suffix: Self::find_suffix(&text, &INT_SUFFIXES) }\n+                    LiteralKind::IntNumber {\n+                        suffix: Self::find_suffix(&text, &ast::IntNumber::SUFFIXES),\n+                    }\n                 }\n             }\n             FLOAT_NUMBER => {\n                 let text = token.text();\n-                LiteralKind::FloatNumber { suffix: Self::find_suffix(&text, &FLOAT_SUFFIXES) }\n+                LiteralKind::FloatNumber {\n+                    suffix: Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES),\n+                }\n             }\n             STRING | RAW_STRING => LiteralKind::String,\n             T![true] => LiteralKind::Bool(true),\n@@ -358,71 +360,6 @@ impl ast::Literal {\n             _ => unreachable!(),\n         }\n     }\n-\n-    // FIXME: should probably introduce string token type?\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/6308\n-    pub fn int_value(&self) -> Option<(Radix, u128)> {\n-        let suffix = match self.kind() {\n-            LiteralKind::IntNumber { suffix } => suffix,\n-            _ => return None,\n-        };\n-\n-        let token = self.token();\n-        let mut text = token.text().as_str();\n-        text = &text[..text.len() - suffix.map_or(0, |it| it.len())];\n-\n-        let buf;\n-        if text.contains(\"_\") {\n-            buf = text.replace('_', \"\");\n-            text = buf.as_str();\n-        };\n-\n-        let radix = Radix::identify(text)?;\n-        let digits = &text[radix.prefix_len()..];\n-        let value = u128::from_str_radix(digits, radix as u32).ok()?;\n-        Some((radix, value))\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n-pub enum Radix {\n-    Binary = 2,\n-    Octal = 8,\n-    Decimal = 10,\n-    Hexadecimal = 16,\n-}\n-\n-impl Radix {\n-    pub const ALL: &'static [Radix] =\n-        &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n-\n-    fn identify(literal_text: &str) -> Option<Self> {\n-        // We cannot express a literal in anything other than decimal in under 3 characters, so we return here if possible.\n-        if literal_text.len() < 3 && literal_text.chars().all(|c| c.is_digit(10)) {\n-            return Some(Self::Decimal);\n-        }\n-\n-        let res = match &literal_text[..2] {\n-            \"0b\" => Radix::Binary,\n-            \"0o\" => Radix::Octal,\n-            \"0x\" => Radix::Hexadecimal,\n-            _ => Radix::Decimal,\n-        };\n-\n-        // Checks that all characters after the base prefix are all valid digits for that base.\n-        if literal_text[res.prefix_len()..].chars().all(|c| c.is_digit(res as u32)) {\n-            Some(res)\n-        } else {\n-            None\n-        }\n-    }\n-\n-    const fn prefix_len(&self) -> usize {\n-        match self {\n-            Self::Decimal => 0,\n-            _ => 2,\n-        }\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "1b8449221d31abdf5078bd7e94ef0630f4b21a9b", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "patch": "@@ -89,3 +89,45 @@ impl AstToken for RawString {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct IntNumber {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for IntNumber {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for IntNumber {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == INT_NUMBER }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct FloatNumber {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for FloatNumber {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for FloatNumber {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}"}, {"sha": "8d3fad5a6c6f6f42896109f3ef9885aa9244ee35", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 86, "deletions": 11, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "patch": "@@ -8,11 +8,11 @@ use std::{\n use rustc_lexer::unescape::{unescape_literal, Mode};\n \n use crate::{\n-    ast::{AstToken, Comment, RawString, String, Whitespace},\n+    ast::{self, AstToken},\n     TextRange, TextSize,\n };\n \n-impl Comment {\n+impl ast::Comment {\n     pub fn kind(&self) -> CommentKind {\n         kind_by_prefix(self.text())\n     }\n@@ -80,7 +80,7 @@ fn kind_by_prefix(text: &str) -> CommentKind {\n     panic!(\"bad comment text: {:?}\", text)\n }\n \n-impl Whitespace {\n+impl ast::Whitespace {\n     pub fn spans_multiple_lines(&self) -> bool {\n         let text = self.text();\n         text.find('\\n').map_or(false, |idx| text[idx + 1..].contains('\\n'))\n@@ -138,19 +138,19 @@ pub trait HasQuotes: AstToken {\n     }\n }\n \n-impl HasQuotes for String {}\n-impl HasQuotes for RawString {}\n+impl HasQuotes for ast::String {}\n+impl HasQuotes for ast::RawString {}\n \n pub trait HasStringValue: HasQuotes {\n     fn value(&self) -> Option<Cow<'_, str>>;\n }\n \n-impl HasStringValue for String {\n+impl HasStringValue for ast::String {\n     fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n-        let mut buf = std::string::String::with_capacity(text.len());\n+        let mut buf = String::with_capacity(text.len());\n         let mut has_error = false;\n         unescape_literal(text, Mode::Str, &mut |_, unescaped_char| match unescaped_char {\n             Ok(c) => buf.push(c),\n@@ -166,15 +166,16 @@ impl HasStringValue for String {\n     }\n }\n \n-impl HasStringValue for RawString {\n+// FIXME: merge `ast::RawString` and `ast::String`.\n+impl HasStringValue for ast::RawString {\n     fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n         Some(Cow::Borrowed(text))\n     }\n }\n \n-impl RawString {\n+impl ast::RawString {\n     pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n         let contents_range = self.text_range_between_quotes()?;\n         assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n@@ -500,7 +501,7 @@ pub trait HasFormatSpecifier: AstToken {\n     }\n }\n \n-impl HasFormatSpecifier for String {\n+impl HasFormatSpecifier for ast::String {\n     fn char_ranges(\n         &self,\n     ) -> Option<Vec<(TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>> {\n@@ -521,7 +522,7 @@ impl HasFormatSpecifier for String {\n     }\n }\n \n-impl HasFormatSpecifier for RawString {\n+impl HasFormatSpecifier for ast::RawString {\n     fn char_ranges(\n         &self,\n     ) -> Option<Vec<(TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>> {\n@@ -536,3 +537,77 @@ impl HasFormatSpecifier for RawString {\n         Some(res)\n     }\n }\n+\n+impl ast::IntNumber {\n+    #[rustfmt::skip]\n+    pub(crate) const SUFFIXES: &'static [&'static str] = &[\n+        \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\",\n+        \"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\",\n+    ];\n+\n+    pub fn radix(&self) -> Radix {\n+        match self.text().get(..2).unwrap_or_default() {\n+            \"0b\" => Radix::Binary,\n+            \"0o\" => Radix::Octal,\n+            \"0x\" => Radix::Hexadecimal,\n+            _ => Radix::Decimal,\n+        }\n+    }\n+\n+    pub fn value(&self) -> Option<u128> {\n+        let token = self.syntax();\n+\n+        let mut text = token.text().as_str();\n+        if let Some(suffix) = self.suffix() {\n+            text = &text[..text.len() - suffix.len()]\n+        }\n+\n+        let radix = self.radix();\n+        text = &text[radix.prefix_len()..];\n+\n+        let buf;\n+        if text.contains(\"_\") {\n+            buf = text.replace('_', \"\");\n+            text = buf.as_str();\n+        };\n+\n+        let value = u128::from_str_radix(text, radix as u32).ok()?;\n+        Some(value)\n+    }\n+\n+    pub fn suffix(&self) -> Option<&str> {\n+        let text = self.text();\n+        // FIXME: don't check a fixed set of suffixes, `1_0_1___lol` is valid\n+        // syntax, suffix is `lol`.\n+        ast::IntNumber::SUFFIXES.iter().find_map(|suffix| {\n+            if text.ends_with(suffix) {\n+                return Some(&text[text.len() - suffix.len()..]);\n+            }\n+            None\n+        })\n+    }\n+}\n+\n+impl ast::FloatNumber {\n+    pub(crate) const SUFFIXES: &'static [&'static str] = &[\"f32\", \"f64\"];\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+pub enum Radix {\n+    Binary = 2,\n+    Octal = 8,\n+    Decimal = 10,\n+    Hexadecimal = 16,\n+}\n+\n+impl Radix {\n+    pub const ALL: &'static [Radix] =\n+        &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n+\n+    const fn prefix_len(&self) -> usize {\n+        match self {\n+            Self::Decimal => 0,\n+            _ => 2,\n+        }\n+    }\n+}"}, {"sha": "87c934e66763d3efcb9d32a3f4a786df718e424d", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=0d5be44b6e0ccd3e806697dcfc2337a2c0ed5914", "patch": "@@ -504,7 +504,11 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc::default();\n-    res.tokens = vec![\"Whitespace\".into(), \"Comment\".into(), \"String\".into(), \"RawString\".into()];\n+\n+    res.tokens = \"Whitespace Comment String RawString IntNumber FloatNumber\"\n+        .split_ascii_whitespace()\n+        .map(|it| it.to_string())\n+        .collect::<Vec<_>>();\n \n     let nodes = grammar.iter().collect::<Vec<_>>();\n "}]}