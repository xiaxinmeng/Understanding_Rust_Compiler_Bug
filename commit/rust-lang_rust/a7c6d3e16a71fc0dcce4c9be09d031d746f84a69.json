{"sha": "a7c6d3e16a71fc0dcce4c9be09d031d746f84a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzZkM2UxNmE3MWZjMGRjY2U0YzliZTA5ZDAzMWQ3NDZmODRhNjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-28T17:54:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-28T17:54:11Z"}, "message": "Improve function naming", "tree": {"sha": "ef921fb6928678e39c2972b3613b6547c4a54eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef921fb6928678e39c2972b3613b6547c4a54eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c6d3e16a71fc0dcce4c9be09d031d746f84a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c6d3e16a71fc0dcce4c9be09d031d746f84a69", "html_url": "https://github.com/rust-lang/rust/commit/a7c6d3e16a71fc0dcce4c9be09d031d746f84a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c6d3e16a71fc0dcce4c9be09d031d746f84a69/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "286a51da9187971c2aa5bac89834f5be7cc96d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/286a51da9187971c2aa5bac89834f5be7cc96d86", "html_url": "https://github.com/rust-lang/rust/commit/286a51da9187971c2aa5bac89834f5be7cc96d86"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "117cfbabb52f7211379bdfa040aa9258967802a9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a7c6d3e16a71fc0dcce4c9be09d031d746f84a69/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c6d3e16a71fc0dcce4c9be09d031d746f84a69/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a7c6d3e16a71fc0dcce4c9be09d031d746f84a69", "patch": "@@ -10,17 +10,16 @@\n \n //! Markdown formatting for rustdoc\n //!\n-//! This module implements markdown formatting through the hoedown C-library\n-//! (bundled into the rust runtime). This module self-contains the C bindings\n-//! and necessary legwork to render markdown, and exposes all of the\n+//! This module implements markdown formatting through the pulldown-cmark\n+//! rust-library. This module exposes all of the\n //! functionality through a unit-struct, `Markdown`, which has an implementation\n //! of `fmt::Display`. Example usage:\n //!\n //! ```rust,ignore\n-//! use rustdoc::html::markdown::Markdown;\n+//! use rustdoc::html::markdown::{Markdown, MarkdownOutputStyle};\n //!\n //! let s = \"My *markdown* _text_\";\n-//! let html = format!(\"{}\", Markdown(s));\n+//! let html = format!(\"{}\", Markdown(s, MarkdownOutputStyle::Fancy));\n //! // ... something using html\n //! ```\n \n@@ -138,7 +137,7 @@ pub fn render(w: &mut fmt::Formatter,\n               s: &str,\n               print_toc: bool,\n               shorter: MarkdownOutputStyle) -> fmt::Result {\n-    fn block(parser: &mut Parser, buffer: &mut String, lang: &str) {\n+    fn code_block(parser: &mut Parser, buffer: &mut String, lang: &str) {\n         let mut origtext = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -216,8 +215,8 @@ pub fn render(w: &mut fmt::Formatter,\n         });\n     }\n \n-    fn header(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-              shorter: MarkdownOutputStyle, level: i32) {\n+    fn heading(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+               shorter: MarkdownOutputStyle, level: i32) {\n         let mut ret = String::new();\n         let mut id = String::new();\n         event_loop_break!(parser, toc_builder, shorter, ret, true, &mut Some(&mut id),\n@@ -250,8 +249,8 @@ pub fn render(w: &mut fmt::Formatter,\n                                  ret, lvl = level, id = id, sec = sec));\n     }\n \n-    fn codespan(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-                shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+    fn inline_code(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+                   shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id, Event::End(Tag::Code));\n         buffer.push_str(&format!(\"<code>{}</code>\",\n@@ -274,8 +273,8 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<p>{}</p>\", content.trim_right()));\n     }\n \n-    fn cell(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-            shorter: MarkdownOutputStyle) {\n+    fn table_cell(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+                  shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n                           Event::End(Tag::TableHead) |\n@@ -285,16 +284,16 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<td>{}</td>\", content.trim()));\n     }\n \n-    fn row(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-           shorter: MarkdownOutputStyle) {\n+    fn table_row(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+                 shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n                 Event::End(Tag::TableHead) |\n                     Event::End(Tag::Table(_)) |\n                     Event::End(Tag::TableRow) => break,\n                 Event::Start(Tag::TableCell) => {\n-                    cell(parser, &mut content, toc_builder, shorter);\n+                    table_cell(parser, &mut content, toc_builder, shorter);\n                 }\n                 x => {\n                     looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n@@ -304,14 +303,14 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<tr>{}</tr>\", content));\n     }\n \n-    fn head(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-            shorter: MarkdownOutputStyle) {\n+    fn table_head(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n+                  shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n                 Event::End(Tag::TableHead) | Event::End(Tag::Table(_)) => break,\n                 Event::Start(Tag::TableCell) => {\n-                    cell(parser, &mut content, toc_builder, shorter);\n+                    table_cell(parser, &mut content, toc_builder, shorter);\n                 }\n                 x => {\n                     looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n@@ -331,10 +330,10 @@ pub fn render(w: &mut fmt::Formatter,\n             match event {\n                 Event::End(Tag::Table(_)) => break,\n                 Event::Start(Tag::TableHead) => {\n-                    head(parser, &mut content, toc_builder, shorter);\n+                    table_head(parser, &mut content, toc_builder, shorter);\n                 }\n                 Event::Start(Tag::TableRow) => {\n-                    row(parser, &mut rows, toc_builder, shorter);\n+                    table_row(parser, &mut rows, toc_builder, shorter);\n                 }\n                 _ => {}\n             }\n@@ -412,13 +411,13 @@ pub fn render(w: &mut fmt::Formatter,\n         if let Some(event) = next_event {\n             match event {\n                 Event::Start(Tag::CodeBlock(lang)) => {\n-                    block(parser, buffer, &*lang);\n+                    code_block(parser, buffer, &*lang);\n                 }\n                 Event::Start(Tag::Header(level)) => {\n-                    header(parser, buffer, toc_builder, shorter, level);\n+                    heading(parser, buffer, toc_builder, shorter, level);\n                 }\n                 Event::Start(Tag::Code) => {\n-                    codespan(parser, buffer, toc_builder, shorter, id);\n+                    inline_code(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Start(Tag::Paragraph) => {\n                     paragraph(parser, buffer, toc_builder, shorter, id);"}]}