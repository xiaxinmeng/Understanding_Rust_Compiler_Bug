{"sha": "97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "node_id": "C_kwDOAAsO6NoAKDk3NDIzZDMzMWY1ZGJlZDNiYmJmNDc0ZTNiNmJkMmQ4YjdiZDlhZjI", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-04T01:27:11Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-27T22:58:53Z"}, "message": "Add tests for static async functions in traits\n\nThis patch adds test cases for AFIT, the majority of which are currently\nexpected to run as `check-fail`.", "tree": {"sha": "35f7a6dfa3a04692100579f6a31f03f2966af9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f7a6dfa3a04692100579f6a31f03f2966af9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "html_url": "https://github.com/rust-lang/rust/commit/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da281b6068a7d889ae89a9bd8991284cc9b7535", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da281b6068a7d889ae89a9bd8991284cc9b7535", "html_url": "https://github.com/rust-lang/rust/commit/0da281b6068a7d889ae89a9bd8991284cc9b7535"}], "stats": {"total": 530, "additions": 530, "deletions": 0}, "files": [{"sha": "0269f00bbab731c84cffabc318e521c09e056d7e", "filename": "src/test/ui/async-await/in-trait/async-associated-types.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,24 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait MyTrait<'a, 'b, T> where Self: 'a, T: Debug + Sized + 'b {\n+    type MyAssoc;// = (&'a T, &'b U);\n+\n+    async fn foo(&'a self, key: &'b T) -> Self::MyAssoc;\n+}\n+\n+impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+    type MyAssoc = (&'a U, &'b T);\n+\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+//~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+//~| ERROR cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+\n+fn main() {}"}, {"sha": "c1c66f9023bd7922ee39c663cd4c9e9cc1350714", "filename": "src/test/ui/async-await/in-trait/async-associated-types.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,57 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/async-associated-types.rs:17:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n+  --> $DIR/async-associated-types.rs:14:6\n+   |\n+LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+   |      ^^\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:17:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `(&'a U, &'b T)`\n+              found `(&U, &T)`\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:17:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `MyTrait<'static, 'static, T>`\n+              found `MyTrait<'_, '_, T>`\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+  --> $DIR/async-associated-types.rs:17:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n+  --> $DIR/async-associated-types.rs:14:10\n+   |\n+LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+   |          ^^\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:17:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `(&'a U, &'b T)`\n+              found `(&U, &T)`\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:17:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `MyTrait<'static, 'static, T>`\n+              found `MyTrait<'_, '_, T>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "85d29eb703e7673ad6a2f7b1240dced57929af4c", "filename": "src/test/ui/async-await/in-trait/async-associated-types2-desugared.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,31 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    type Fut<'a>: Future<Output = i32>\n+    where\n+        Self: 'a;\n+\n+    async fn foo(&self) -> Self::Fut<'a>;\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+    //~| ERROR the parameter type `Self` may not live long enough\n+}\n+\n+impl MyTrait for i32 {\n+    type Fut<'a> = impl Future + 'a\n+    where\n+        Self: 'a;\n+    //~^^^ ERROR `impl Trait` in type aliases is unstable\n+\n+    fn foo<'a>(&'a self) -> Self::Fut<'a> {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6bc553b26350affffa5a5804d847254abca1b52f", "filename": "src/test/ui/async-await/in-trait/async-associated-types2-desugared.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,42 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/async-associated-types2-desugared.rs:13:38\n+   |\n+LL |     async fn foo(&self) -> Self::Fut<'a>;\n+   |                                      ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     async fn foo<'a>(&self) -> Self::Fut<'a>;\n+   |                 ++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | trait MyTrait<'a> {\n+   |              ++++\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/async-associated-types2-desugared.rs:19:20\n+   |\n+LL |     type Fut<'a> = impl Future + 'a\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0310]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-associated-types2-desugared.rs:13:28\n+   |\n+LL |     async fn foo(&self) -> Self::Fut<'a>;\n+   |                            ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'static`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/async-associated-types2-desugared.rs:11:15\n+   |\n+LL |         Self: 'a;\n+   |               ^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0261, E0310, E0658.\n+For more information about an error, try `rustc --explain E0261`."}, {"sha": "c2133b04bc8475cd1df97751662214ba52f5f736", "filename": "src/test/ui/async-await/in-trait/async-associated-types2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,32 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    type Fut<'a>: Future<Output = i32>\n+    where\n+        Self: 'a;\n+\n+    fn foo(&self) -> Self::Fut<'a>;\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+}\n+\n+impl MyTrait for i32 {\n+    type Fut<'a> = impl Future + 'a\n+    where\n+        Self: 'a;\n+    //~^^^ ERROR `impl Trait` in type aliases is unstable\n+    //~| ERROR expected `<i32 as MyTrait>::Fut<'a>` to be a future that resolves to `i32`, but it resolves to `<<i32 as MyTrait>::Fut<'a> as Future>::Output`\n+\n+    fn foo<'a>(&'a self) -> Self::Fut<'a> {\n+        //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f3343852fa0932045dfbb7018c6086248a1ac569", "filename": "src/test/ui/async-await/in-trait/async-associated-types2.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,63 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/async-associated-types2.rs:13:32\n+   |\n+LL |     fn foo(&self) -> Self::Fut<'a>;\n+   |                                ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     fn foo<'a>(&self) -> Self::Fut<'a>;\n+   |           ++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | trait MyTrait<'a> {\n+   |              ++++\n+\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/async-associated-types2.rs:18:20\n+   |\n+LL |     type Fut<'a> = impl Future + 'a\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0271]: expected `<i32 as MyTrait>::Fut<'a>` to be a future that resolves to `i32`, but it resolves to `<<i32 as MyTrait>::Fut<'a> as Future>::Output`\n+  --> $DIR/async-associated-types2.rs:18:20\n+   |\n+LL |     type Fut<'a> = impl Future + 'a\n+   |                    ^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n+   |\n+   = note:         expected type `i32`\n+           found associated type `<<i32 as MyTrait>::Fut<'a> as Future>::Output`\n+note: required by a bound in `MyTrait::Fut`\n+  --> $DIR/async-associated-types2.rs:9:26\n+   |\n+LL |     type Fut<'a>: Future<Output = i32>\n+   |                          ^^^^^^^^^^^^ required by this bound in `MyTrait::Fut`\n+help: consider constraining the associated type `<<i32 as MyTrait>::Fut<'a> as Future>::Output` to `i32`\n+   |\n+LL |     type Fut<'a> = impl Future<Output = i32> + 'a\n+   |                               ++++++++++++++\n+\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/async-associated-types2.rs:24:5\n+   |\n+LL |     fn foo(&self) -> Self::Fut<'a>;\n+   |     ------------------------------- expected `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'static>`\n+...\n+LL |     fn foo<'a>(&'a self) -> Self::Fut<'a> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'1>`\n+   |\n+   = note: expected `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'static>`\n+              found `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'1>`\n+help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+  --> $DIR/async-associated-types2.rs:13:22\n+   |\n+LL |     fn foo(&self) -> Self::Fut<'a>;\n+   |                      ^^^^ consider borrowing this type parameter in the trait\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0261, E0271, E0658.\n+For more information about an error, try `rustc --explain E0261`."}, {"sha": "2c2297c6b584b74b9badea3dd400872ecbfd3df8", "filename": "src/test/ui/async-await/in-trait/async-example.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d748430c5ee8ec59464b10f35d5e1b2b505e0791", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+use std::hash::Hash;\n+\n+trait MyTrait<T, U> {\n+    async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+}\n+//~^^ ERROR the parameter type `U` may not live long enough\n+//~| ERROR the parameter type `T` may not live long enough\n+\n+impl<T, U> MyTrait<T, U> for (T, U) {\n+    async fn foo(&self) -> &(T, U) {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8975ec21a015d191b7034f9bf7df0a719af65d4d", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:10:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics-and-bounds.rs:10:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:10:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:10:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics-and-bounds.rs:10:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:10:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "3e6f70cd49f66e8680e8b37b2da68f4dcd6d8291", "filename": "src/test/ui/async-await/in-trait/async-generics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,18 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T, U> {\n+    async fn foo(&self) -> &(T, U);\n+}\n+//~^^ ERROR the parameter type `U` may not live long enough\n+//~| ERROR the parameter type `T` may not live long enough\n+\n+impl<T, U> MyTrait<T, U> for (T, U) {\n+    async fn foo(&self) -> &(T, U) {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "84c7b3095368c0e01ad25d05367f3dc1cbd5d041", "filename": "src/test/ui/async-await/in-trait/async-generics.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics.rs:7:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics.rs:7:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "6a2276c96c8c183c8ab139f4d7db1b83aa5c283e", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,20 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait MyTrait<'a, 'b, T> {\n+    async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+}\n+//~^^ ERROR  the parameter type `Self` may not live long enough\n+//~| ERROR the parameter type `T` may not live long enough\n+\n+impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d74f80917a48da521deaa1ad016fbfc8cc0fceab", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,23 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-lifetimes-and-bounds.rs:9:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+   |                                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/async-lifetimes-and-bounds.rs:9:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait MyTrait<'a, 'b, T: 'b> {\n+   |                        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "1032a3435479df8ecb3b3ed09e273fae1ee6876f", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,18 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<'a, 'b, T> {\n+    async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+}\n+//~^^ ERROR the parameter type `Self` may not live long enough\n+//~| ERROR the parameter type `T` may not live long enough\n+\n+impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "780f75cf683d4fbf45b2f02cc7e952fe1d01f58a", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,23 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-lifetimes.rs:7:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+   |                                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/async-lifetimes.rs:7:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait MyTrait<'a, 'b, T: 'b> {\n+   |                        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "f94d32145a290297c1750035ba89297ecf8220eb", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,17 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> i32 {\n+        //~^ ERROR: `i32` is not a future [E0277]\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "03321dc5b5af16a4ccbd9baa3f78fb005151201b", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `i32` is not a future\n+  --> $DIR/fn-not-async-err.rs:11:22\n+   |\n+LL |     fn foo(&self) -> i32 {\n+   |                      ^^^ `i32` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `i32`\n+   = note: i32 must be a future or must implement `IntoFuture` to be awaited\n+note: required by a bound in `MyTrait::foo::{opaque#0}`\n+  --> $DIR/fn-not-async-err.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |                            ^^^ required by this bound in `MyTrait::foo::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f617a19ab3415d88c5e18d72419a904a913a9e8d", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+    \n+impl MyTrait for i32 {\n+    fn foo(&self) -> impl Future<Output = i32> {\n+        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f591f184772901e061a6928067e2484df9ce552c", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+  --> $DIR/fn-not-async-err2.rs:13:22\n+   |\n+LL |     fn foo(&self) -> impl Future<Output = i32> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}]}