{"sha": "88f9f49b47cea22a28d91932ed5d3100d127512e", "node_id": "C_kwDOAAsO6NoAKDg4ZjlmNDliNDdjZWEyMmEyOGQ5MTkzMmVkNWQzMTAwZDEyNzUxMmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-02T21:06:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-02T21:06:28Z"}, "message": "Rollup merge of #103886 - GuillaumeGomez:local-reexport-doc, r=notriddle\n\nrustdoc: Fix merge of attributes for reexports of local items\n\nFixes https://github.com/rust-lang/rust/issues/84619.\n\nThe problem was that we didn't merge attributes between the the reexport and the item.\n\nr? `@notriddle`", "tree": {"sha": "a2fbb265fa0ccf6e2df6eb211690f184d2ec006d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2fbb265fa0ccf6e2df6eb211690f184d2ec006d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f9f49b47cea22a28d91932ed5d3100d127512e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYtvUCRBK7hj4Ov3rIwAAtBEIADKHNbMFIw6BZWhAL8cZQcDn\nZLDpbruNt9nnxWxU5jZ7oEyraTzamw7+cazNJZCSY258x2+B5cmqEreFdFjz52Lm\nsXqpG5KyW1EZ8tO8+Zm1I4h5pEKgMOVG7+tkfT1i5LBe+plrGsYB/itvH4ewvkR/\naA29euXj8xyhKs0oJPp6C6n/gWekdzwnFUuEZ2nocOUv/WXsmUzcXYsqMavno60N\nAlbQTwMic39EYiwGFX3zFVS7qVcAELR1EfxkwKe3H1b2OTLlU1NbSfje/8O3ApVR\nic/6UGqix3fbCqWjQwEWkc4bxqXEBKhbYeXztaYkROK5FRix1CGTJRAe/4WrXkg=\n=trLN\n-----END PGP SIGNATURE-----\n", "payload": "tree a2fbb265fa0ccf6e2df6eb211690f184d2ec006d\nparent bb201b5d95571ff4dd93533463f858c1b3c69d40\nparent c983bb162c932acc4854c6288104e03280a17983\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667423188 +0100\ncommitter GitHub <noreply@github.com> 1667423188 +0100\n\nRollup merge of #103886 - GuillaumeGomez:local-reexport-doc, r=notriddle\n\nrustdoc: Fix merge of attributes for reexports of local items\n\nFixes https://github.com/rust-lang/rust/issues/84619.\n\nThe problem was that we didn't merge attributes between the the reexport and the item.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f9f49b47cea22a28d91932ed5d3100d127512e", "html_url": "https://github.com/rust-lang/rust/commit/88f9f49b47cea22a28d91932ed5d3100d127512e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f9f49b47cea22a28d91932ed5d3100d127512e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb201b5d95571ff4dd93533463f858c1b3c69d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb201b5d95571ff4dd93533463f858c1b3c69d40", "html_url": "https://github.com/rust-lang/rust/commit/bb201b5d95571ff4dd93533463f858c1b3c69d40"}, {"sha": "c983bb162c932acc4854c6288104e03280a17983", "url": "https://api.github.com/repos/rust-lang/rust/commits/c983bb162c932acc4854c6288104e03280a17983", "html_url": "https://github.com/rust-lang/rust/commit/c983bb162c932acc4854c6288104e03280a17983"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "ad4ad4104e104e9d48562e13d4fe6b9bae150843", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88f9f49b47cea22a28d91932ed5d3100d127512e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f9f49b47cea22a28d91932ed5d3100d127512e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=88f9f49b47cea22a28d91932ed5d3100d127512e", "patch": "@@ -74,20 +74,20 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     // This covers the case where somebody does an import which should pull in an item,\n     // but there's already an item with the same namespace and same name. Rust gives\n     // priority to the not-imported one, so we should, too.\n-    items.extend(doc.items.iter().flat_map(|(item, renamed)| {\n+    items.extend(doc.items.iter().flat_map(|(item, renamed, import_id)| {\n         // First, lower everything other than imports.\n         if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n             return Vec::new();\n         }\n-        let v = clean_maybe_renamed_item(cx, item, *renamed);\n+        let v = clean_maybe_renamed_item(cx, item, *renamed, *import_id);\n         for item in &v {\n             if let Some(name) = item.name && !item.attrs.lists(sym::doc).has_word(sym::hidden) {\n                 inserted.insert((item.type_(), name));\n             }\n         }\n         v\n     }));\n-    items.extend(doc.items.iter().flat_map(|(item, renamed)| {\n+    items.extend(doc.items.iter().flat_map(|(item, renamed, _)| {\n         // Now we actually lower the imports, skipping everything else.\n         if let hir::ItemKind::Use(path, hir::UseKind::Glob) = item.kind {\n             let name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id()));\n@@ -1911,6 +1911,7 @@ fn clean_maybe_renamed_item<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     item: &hir::Item<'tcx>,\n     renamed: Option<Symbol>,\n+    import_id: Option<hir::HirId>,\n ) -> Vec<Item> {\n     use hir::ItemKind;\n \n@@ -1987,8 +1988,23 @@ fn clean_maybe_renamed_item<'tcx>(\n             }\n             _ => unreachable!(\"not yet converted\"),\n         };\n-\n-        vec![Item::from_def_id_and_parts(def_id, Some(name), kind, cx)]\n+        if let Some(import_id) = import_id {\n+            let (attrs, cfg) = inline::merge_attrs(\n+                cx,\n+                Some(cx.tcx.parent_module(import_id).to_def_id()),\n+                inline::load_attrs(cx, def_id),\n+                Some(inline::load_attrs(cx, cx.tcx.hir().local_def_id(import_id).to_def_id())),\n+            );\n+            vec![Item::from_def_id_and_attrs_and_parts(\n+                def_id,\n+                Some(name),\n+                kind,\n+                Box::new(attrs),\n+                cfg,\n+            )]\n+        } else {\n+            vec![Item::from_def_id_and_parts(def_id, Some(name), kind, cx)]\n+        }\n     })\n }\n "}, {"sha": "c788b9f4093fea7721b838118443e16a71708ee1", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/88f9f49b47cea22a28d91932ed5d3100d127512e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f9f49b47cea22a28d91932ed5d3100d127512e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=88f9f49b47cea22a28d91932ed5d3100d127512e", "patch": "@@ -25,8 +25,8 @@ pub(crate) struct Module<'hir> {\n     pub(crate) where_inner: Span,\n     pub(crate) mods: Vec<Module<'hir>>,\n     pub(crate) id: hir::HirId,\n-    // (item, renamed)\n-    pub(crate) items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>)>,\n+    // (item, renamed, import_id)\n+    pub(crate) items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>, Option<hir::HirId>)>,\n     pub(crate) foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n }\n \n@@ -93,6 +93,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::CRATE_HIR_ID,\n             self.cx.tcx.hir().root_module(),\n             self.cx.tcx.crate_name(LOCAL_CRATE),\n+            None,\n         );\n \n         // `#[macro_export] macro_rules!` items are reexported at the top level of the\n@@ -113,7 +114,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n                         if inserted.insert(def_id) {\n                             let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                            top_level_module.items.push((item, None));\n+                            top_level_module.items.push((item, None, None));\n                         }\n                     }\n                 }\n@@ -155,6 +156,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,\n+        parent_id: Option<hir::HirId>,\n     ) -> Module<'tcx> {\n         let mut om = Module::new(name, id, m.spans.inner_span);\n         let def_id = self.cx.tcx.hir().local_def_id(id).to_def_id();\n@@ -166,15 +168,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n                 continue;\n             }\n-            self.visit_item(item, None, &mut om);\n+            self.visit_item(item, None, &mut om, parent_id);\n         }\n         for &i in m.item_ids {\n             let item = self.cx.tcx.hir().item(i);\n             // To match the way import precedence works, visit glob imports last.\n             // Later passes in rustdoc will de-duplicate by name and kind, so if glob-\n             // imported items appear last, then they'll be the ones that get discarded.\n             if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n-                self.visit_item(item, None, &mut om);\n+                self.visit_item(item, None, &mut om, parent_id);\n             }\n         }\n         self.inside_public_path = orig_inside_public_path;\n@@ -247,14 +249,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let prev = mem::replace(&mut self.inlining, true);\n                 for &i in m.item_ids {\n                     let i = self.cx.tcx.hir().item(i);\n-                    self.visit_item(i, None, om);\n+                    self.visit_item(i, None, om, Some(id));\n                 }\n                 self.inlining = prev;\n                 true\n             }\n             Node::Item(it) if !glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n-                self.visit_item(it, renamed, om);\n+                self.visit_item(it, renamed, om, Some(id));\n                 self.inlining = prev;\n                 true\n             }\n@@ -275,6 +277,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         item: &'tcx hir::Item<'_>,\n         renamed: Option<Symbol>,\n         om: &mut Module<'tcx>,\n+        parent_id: Option<hir::HirId>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n         let name = renamed.unwrap_or(item.ident.name);\n@@ -330,7 +333,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     }\n                 }\n \n-                om.items.push((item, renamed))\n+                om.items.push((item, renamed, parent_id))\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 // `#[macro_export] macro_rules!` items are handled separately in `visit()`,\n@@ -349,11 +352,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let nonexported = !self.cx.tcx.has_attr(def_id, sym::macro_export);\n \n                 if is_macro_2_0 || nonexported || self.inlining {\n-                    om.items.push((item, renamed));\n+                    om.items.push((item, renamed, None));\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(item.hir_id(), m, name));\n+                om.mods.push(self.visit_mod_contents(item.hir_id(), m, name, parent_id));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)\n@@ -364,19 +367,19 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n-            | hir::ItemKind::TraitAlias(..) => om.items.push((item, renamed)),\n+            | hir::ItemKind::TraitAlias(..) => om.items.push((item, renamed, parent_id)),\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if name != kw::Underscore {\n-                    om.items.push((item, renamed));\n+                    om.items.push((item, renamed, parent_id));\n                 }\n             }\n             hir::ItemKind::Impl(impl_) => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located.\n                 if !self.inlining && impl_.of_trait.is_none() {\n-                    om.items.push((item, None));\n+                    om.items.push((item, None, None));\n                 }\n             }\n         }"}, {"sha": "1c8468008dd0afd0eb64d80e32174a1c16c1a93c", "filename": "src/test/rustdoc/local-reexport-doc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88f9f49b47cea22a28d91932ed5d3100d127512e/src%2Ftest%2Frustdoc%2Flocal-reexport-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f9f49b47cea22a28d91932ed5d3100d127512e/src%2Ftest%2Frustdoc%2Flocal-reexport-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flocal-reexport-doc.rs?ref=88f9f49b47cea22a28d91932ed5d3100d127512e", "patch": "@@ -0,0 +1,16 @@\n+// This test ensures that the reexports of local items also get the doc from\n+// the reexport.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/fn.g.html'\n+// @has - '//*[@class=\"rustdoc-toggle top-doc\"]/*[@class=\"docblock\"]' \\\n+// 'outer module inner module'\n+\n+mod inner_mod {\n+    /// inner module\n+    pub fn g() {}\n+}\n+\n+/// outer module\n+pub use inner_mod::g;"}]}