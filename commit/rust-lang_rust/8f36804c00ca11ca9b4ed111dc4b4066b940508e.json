{"sha": "8f36804c00ca11ca9b4ed111dc4b4066b940508e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzY4MDRjMDBjYTExY2E5YjRlZDExMWRjNGI0MDY2Yjk0MDUwOGU=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-03-30T13:49:56Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-04-26T14:22:18Z"}, "message": "Treat repr(Rust) univariant fieldless enums as a ZST (fixes #15747)\n\nThis makes all those enums be represented the same way:\n\n```rust\nenum A1 {\u00a0B1 }\nenum A2 { B2 = 0 }\nenum A3 { B3, C3(!) }\n```", "tree": {"sha": "1bab393e295a519c8f6ac71c1a91b13e58ba9738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bab393e295a519c8f6ac71c1a91b13e58ba9738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f36804c00ca11ca9b4ed111dc4b4066b940508e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f36804c00ca11ca9b4ed111dc4b4066b940508e", "html_url": "https://github.com/rust-lang/rust/commit/8f36804c00ca11ca9b4ed111dc4b4066b940508e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f36804c00ca11ca9b4ed111dc4b4066b940508e/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfe3ae00a36e8162e2f8f5b47eb7127562e1d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfe3ae00a36e8162e2f8f5b47eb7127562e1d17", "html_url": "https://github.com/rust-lang/rust/commit/7bfe3ae00a36e8162e2f8f5b47eb7127562e1d17"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "7dec180c5a732e92087cd4c68fd92ba582301a77", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8f36804c00ca11ca9b4ed111dc4b4066b940508e", "patch": "@@ -1451,11 +1451,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     // Only one variant is inhabited.\n                     (inh_second.is_none() &&\n                     // Representation optimizations are allowed.\n-                     !def.repr.inhibit_enum_layout_opt() &&\n-                    // Inhabited variant either has data ...\n-                     (!variants[inh_first.unwrap()].is_empty() ||\n-                    // ... or there other, uninhabited, variants.\n-                      variants.len() > 1));\n+                     !def.repr.inhibit_enum_layout_opt());\n                 if is_struct {\n                     // Struct, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n@@ -1489,6 +1485,9 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     return Ok(tcx.intern_layout(st));\n                 }\n \n+                // The current code for niche-filling relies on variant indices\n+                // instead of actual discriminants, so dataful enums with\n+                // explicit discriminants (RFC #2363) would misbehave.\n                 let no_explicit_discriminants = def.variants.iter().enumerate()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i));\n "}, {"sha": "00f90573682c6d84c7c820ee9ed7c9eb0065007d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8f36804c00ca11ca9b4ed111dc4b4066b940508e", "patch": "@@ -669,6 +669,23 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                 (Value::ByVal(_), _) => bug!(\"expected fat ptr\"),\n                             }\n                         } else {\n+                            let src_layout = self.layout_of(src.ty)?;\n+                            match src_layout.variants {\n+                                layout::Variants::Single { index } => {\n+                                    if let Some(def) = src.ty.ty_adt_def() {\n+                                        let discr_val = def\n+                                            .discriminant_for_variant(*self.tcx, index)\n+                                            .val;\n+                                        return self.write_primval(\n+                                            dest,\n+                                            PrimVal::Bytes(discr_val),\n+                                            dest_ty);\n+                                    }\n+                                }\n+                                layout::Variants::Tagged { .. } |\n+                                layout::Variants::NicheFilling { .. } => {},\n+                            }\n+\n                             let src_val = self.value_to_primval(src)?;\n                             let dest_val = self.cast_primval(src_val, src.ty, dest_ty)?;\n                             let valty = ValTy {\n@@ -856,7 +873,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n         match layout.variants {\n             layout::Variants::Single { index } => {\n-                return Ok(index as u128);\n+                let discr_val = ty.ty_adt_def().map_or(\n+                    index as u128,\n+                    |def| def.discriminant_for_variant(*self.tcx, index).val);\n+                return Ok(discr_val);\n             }\n             layout::Variants::Tagged { .. } |\n             layout::Variants::NicheFilling { .. } => {},"}, {"sha": "b8b0c019ca6063ab424eaae872f0ecca4b56d148", "filename": "src/librustc_trans/mir/place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fplace.rs?ref=8f36804c00ca11ca9b4ed111dc4b4066b940508e", "patch": "@@ -269,7 +269,10 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n         }\n         match self.layout.variants {\n             layout::Variants::Single { index } => {\n-                return C_uint(cast_to, index as u64);\n+                let discr_val = self.layout.ty.ty_adt_def().map_or(\n+                    index as u128,\n+                    |def| def.discriminant_for_variant(bx.cx.tcx, index).val);\n+                return C_uint_big(cast_to, discr_val);\n             }\n             layout::Variants::Tagged { .. } |\n             layout::Variants::NicheFilling { .. } => {},"}, {"sha": "c932777402eb842ec4a61e72c0a3e30ea0e6a7f6", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=8f36804c00ca11ca9b4ed111dc4b4066b940508e", "patch": "@@ -278,6 +278,22 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                             .expect(\"bad input type for cast\");\n                         let r_t_out = CastTy::from_ty(cast.ty).expect(\"bad output type for cast\");\n                         let ll_t_in = operand.layout.immediate_llvm_type(bx.cx);\n+                        match operand.layout.variants {\n+                            layout::Variants::Single { index } => {\n+                                if let Some(def) = operand.layout.ty.ty_adt_def() {\n+                                    let discr_val = def\n+                                        .discriminant_for_variant(bx.cx.tcx, index)\n+                                        .val;\n+                                    let discr = C_uint_big(ll_t_out, discr_val);\n+                                    return (bx, OperandRef {\n+                                        val: OperandValue::Immediate(discr),\n+                                        layout: cast,\n+                                    });\n+                                }\n+                            }\n+                            layout::Variants::Tagged { .. } |\n+                            layout::Variants::NicheFilling { .. } => {},\n+                        }\n                         let llval = operand.immediate();\n \n                         let mut signed = false;"}, {"sha": "a47f082b9c3ee8baa53644f840bc9b8b635c8cc0", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36804c00ca11ca9b4ed111dc4b4066b940508e/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=8f36804c00ca11ca9b4ed111dc4b4066b940508e", "patch": "@@ -43,6 +43,31 @@ enum ReorderedEnum {\n     B(u8, u16, u8),\n }\n \n+enum EnumEmpty {}\n+\n+enum EnumSingle1 {\n+    A,\n+}\n+\n+enum EnumSingle2 {\n+    A = 42 as isize,\n+}\n+\n+enum EnumSingle3 {\n+    A,\n+    B(!),\n+}\n+\n+#[repr(u8)]\n+enum EnumSingle4 {\n+    A,\n+}\n+\n+#[repr(u8)]\n+enum EnumSingle5 {\n+    A = 42 as u8,\n+}\n+\n enum NicheFilledEnumWithInhabitedVariant {\n     A(&'static ()),\n     B(&'static (), !),\n@@ -74,5 +99,13 @@ pub fn main() {\n     assert_eq!(size_of::<e3>(), 4 as usize);\n     assert_eq!(size_of::<ReorderedStruct>(), 4);\n     assert_eq!(size_of::<ReorderedEnum>(), 6);\n+\n+    assert_eq!(size_of::<EnumEmpty>(), 0);\n+    assert_eq!(size_of::<EnumSingle1>(), 0);\n+    assert_eq!(size_of::<EnumSingle2>(), 0);\n+    assert_eq!(size_of::<EnumSingle3>(), 0);\n+    assert_eq!(size_of::<EnumSingle4>(), 1);\n+    assert_eq!(size_of::<EnumSingle5>(), 1);\n+\n     assert_eq!(size_of::<NicheFilledEnumWithInhabitedVariant>(), size_of::<&'static ()>());\n }"}]}