{"sha": "e89908231bede75f2e21959dfd851df85efd25c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTkwODIzMWJlZGU3NWYyZTIxOTU5ZGZkODUxZGY4NWVmZDI1YzU=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-07-20T05:38:00Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-04T21:36:13Z"}, "message": "Don't cache projection if no padding is used.\n\nIn this case we can just return memory_index(index) which is readily available.", "tree": {"sha": "6591dc6a88e7bfd7e04f2e80975ce83c9059b477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6591dc6a88e7bfd7e04f2e80975ce83c9059b477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89908231bede75f2e21959dfd851df85efd25c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89908231bede75f2e21959dfd851df85efd25c5", "html_url": "https://github.com/rust-lang/rust/commit/e89908231bede75f2e21959dfd851df85efd25c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89908231bede75f2e21959dfd851df85efd25c5/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4106581de25d31d94695372b299aa2c8b0bce8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4106581de25d31d94695372b299aa2c8b0bce8e", "html_url": "https://github.com/rust-lang/rust/commit/e4106581de25d31d94695372b299aa2c8b0bce8e"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "da2927566730f11ea0b27b1a3259c2c8781be20d", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e89908231bede75f2e21959dfd851df85efd25c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89908231bede75f2e21959dfd851df85efd25c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=e89908231bede75f2e21959dfd851df85efd25c5", "patch": "@@ -99,6 +99,7 @@ fn struct_llfields<'a, 'tcx>(\n     let mut prev_effective_align = layout.align.abi;\n     let mut result: Vec<_> = Vec::with_capacity(1 + field_count * 2);\n     let mut projection = vec![0; field_count];\n+    let mut padding_used = false;\n     for i in layout.fields.index_by_increasing_offset() {\n         let target_offset = layout.fields.offset(i as usize);\n         let field = layout.field(cx, i);\n@@ -118,6 +119,7 @@ fn struct_llfields<'a, 'tcx>(\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n         if padding != Size::ZERO {\n+            padding_used = true;\n             let padding_align = prev_effective_align.min(effective_field_align);\n             assert_eq!(offset.align_to(padding_align) + padding, target_offset);\n             result.push(cx.type_padding_filler(padding, padding_align));\n@@ -145,7 +147,9 @@ fn struct_llfields<'a, 'tcx>(\n     } else {\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n-    cx.field_projection_cache.borrow_mut().insert(layout, projection);\n+    if padding_used {\n+        cx.field_projection_cache.borrow_mut().insert(layout, projection);\n+    }\n \n     (result, packed)\n }\n@@ -361,9 +365,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n \n             FieldsShape::Arbitrary { .. } => match cx.field_projection_cache.borrow().get(self) {\n                 Some(projection) => projection[index] as u64,\n-                None => {\n-                    bug!(\"TyAndLayout::llvm_field_index({:?}): field projection not cached\", self)\n-                }\n+                None => self.fields.memory_index(index) as u64,\n             },\n         }\n     }"}]}