{"sha": "c0a41b9999f43c2ed89e342355e2ad7937ab939e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTQxYjk5OTlmNDNjMmVkODllMzQyMzU1ZTJhZDc5MzdhYjkzOWU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-29T19:24:47Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-29T19:24:47Z"}, "message": "Rollup merge of #25873 - nham:update_E0015, r=Aatch\n\nThe E0397 explanation, as I've written it, isn't really an explanation, but I'm not sure what to put here. I will happily take suggestions.\r\n\r\nPartially addresses https://github.com/rust-lang/rust/issues/25851", "tree": {"sha": "3b83ed6d7bb72cb6f4095d59a81448fcb1e6fdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b83ed6d7bb72cb6f4095d59a81448fcb1e6fdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a41b9999f43c2ed89e342355e2ad7937ab939e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a41b9999f43c2ed89e342355e2ad7937ab939e", "html_url": "https://github.com/rust-lang/rust/commit/c0a41b9999f43c2ed89e342355e2ad7937ab939e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a41b9999f43c2ed89e342355e2ad7937ab939e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a5d31f30712aa6e18b9b35d124e4d8a4c33ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a5d31f30712aa6e18b9b35d124e4d8a4c33ca4", "html_url": "https://github.com/rust-lang/rust/commit/c2a5d31f30712aa6e18b9b35d124e4d8a4c33ca4"}, {"sha": "fdf3ce76cfe6be7b5343d191411019836ff3373f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf3ce76cfe6be7b5343d191411019836ff3373f", "html_url": "https://github.com/rust-lang/rust/commit/fdf3ce76cfe6be7b5343d191411019836ff3373f"}], "stats": {"total": 120, "additions": 106, "deletions": 14}, "files": [{"sha": "a3577981c1e4b6105b67d2f19e90984e8b29ebea", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c0a41b9999f43c2ed89e342355e2ad7937ab939e", "patch": "@@ -196,9 +196,13 @@ const Y: i32 = A;\n \"##,\n \n E0015: r##\"\n-The only function calls allowed in static or constant expressions are enum\n-variant constructors or struct constructors (for unit or tuple structs). This\n-is because Rust currently does not support compile-time function execution.\n+The only functions that can be called in static or constant expressions are\n+`const` functions. Rust currently does not support more general compile-time\n+function execution.\n+\n+See [RFC 911] for more details on the design of `const fn`s.\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n \"##,\n \n E0018: r##\"\n@@ -842,6 +846,53 @@ struct Foo<T: 'static> {\n     foo: &'static T\n }\n ```\n+\"##,\n+\n+E0378: r##\"\n+Method calls that aren't calls to inherent `const` methods are disallowed\n+in statics, constants, and constant functions.\n+\n+For example:\n+\n+```\n+const BAZ: i32 = Foo(25).bar(); // error, `bar` isn't `const`\n+\n+struct Foo(i32);\n+\n+impl Foo {\n+    const fn foo(&self) -> i32 {\n+        self.bar() // error, `bar` isn't `const`\n+    }\n+\n+    fn bar(&self) -> i32 { self.0 }\n+}\n+```\n+\n+For more information about `const fn`'s, see [RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n+\"##,\n+\n+E0394: r##\"\n+From [RFC 246]:\n+\n+ > It is illegal for a static to reference another static by value. It is\n+ > required that all references be borrowed.\n+\n+[RFC 246]: https://github.com/rust-lang/rfcs/pull/246\n+\"##,\n+\n+E0397: r##\"\n+It is not allowed for a mutable static to allocate or have destructors. For\n+example:\n+\n+```\n+// error: mutable statics are not allowed to have boxes\n+static mut FOO: Option<Box<usize>> = None;\n+\n+// error: mutable statics are not allowed to have destructors\n+static mut BAR: Option<Vec<i32>> = None;\n+```\n \"##\n \n }\n@@ -891,9 +942,6 @@ register_diagnostics! {\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n     E0370, // discriminant overflow\n-    E0378, // method calls limited to constant inherent methods\n-    E0394, // cannot refer to other statics by value, use the address-of\n-           // operator or a constant instead\n     E0395, // pointer comparison in const-expr\n     E0396  // pointer dereference in const-expr\n }"}, {"sha": "7403462df8ace518898596ca0c3d933ee2fa2582", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=c0a41b9999f43c2ed89e342355e2ad7937ab939e", "patch": "@@ -273,13 +273,13 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let suffix = if tcontents.has_dtor() {\n             \"destructors\"\n         } else if tcontents.owns_owned() {\n-            \"owned pointers\"\n+            \"boxes\"\n         } else {\n             return\n         };\n \n-        self.tcx.sess.span_err(e.span, &format!(\"mutable statics are not allowed \\\n-                                                 to have {}\", suffix));\n+        span_err!(self.tcx.sess, e.span, E0397,\n+                 \"mutable statics are not allowed to have {}\", suffix);\n     }\n \n     fn check_static_type(&self, e: &ast::Expr) {"}, {"sha": "c822a7faa19b473383fd3b1b524d23cbe42e2a89", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=c0a41b9999f43c2ed89e342355e2ad7937ab939e", "patch": "@@ -170,6 +170,31 @@ Reference:\n http://doc.rust-lang.org/reference.html#trait-objects\n \"##,\n \n+E0040: r##\"\n+It is not allowed to manually call destructors in Rust. It is also not\n+necessary to do this since `drop` is called automatically whenever a value goes\n+out of scope.\n+\n+Here's an example of this error:\n+\n+```\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    x.drop(); // error: explicit use of destructor method\n+}\n+```\n+\"##,\n+\n E0046: r##\"\n When trying to make some type implement a trait `Foo`, you must, at minimum,\n provide implementations for all of `Foo`'s required methods (meaning the\n@@ -241,7 +266,7 @@ impl Foo for Bar {\n     fn foo(x: i16) { }\n \n     // error, values differ in mutability\n-    fn foo(&mut self) { }\n+    fn bar(&mut self) { }\n }\n ```\n \"##,\n@@ -542,6 +567,21 @@ enum Empty {}\n ```\n \"##,\n \n+E0087: r##\"\n+Too many type parameters were supplied for a function. For example:\n+\n+```\n+fn foo<T>() {}\n+\n+fn main() {\n+    foo::<f64, bool>(); // error, expected 1 parameter, found 2 parameters\n+}\n+```\n+\n+The number of supplied parameters much exactly match the number of defined type\n+parameters.\n+\"##,\n+\n E0089: r##\"\n Not enough type parameters were supplied for a function. For example:\n \n@@ -1098,6 +1138,13 @@ Trait2 { ... }`) does not work if the trait is not object-safe. Please see the\n [RFC 255]: https://github.com/rust-lang/rfcs/pull/255\n \"##,\n \n+E0379: r##\"\n+Trait methods cannot be declared `const` by design. For more information, see\n+[RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n+\"##,\n+\n E0380: r##\"\n Default impls are only allowed for traits with no methods or associated items.\n For more information see the [opt-in builtin traits RFC](https://github.com/rust\n@@ -1113,7 +1160,6 @@ register_diagnostics! {\n     E0034, // multiple applicable methods in scope\n     E0035, // does not take type parameters\n     E0036, // incorrect number of type parameters given for this method\n-    E0040, // explicit use of destructor method\n     E0044, // foreign items may not have type parameters\n     E0045, // variadic function must have C calling convention\n     E0057, // method has an incompatible type for trait\n@@ -1128,7 +1174,6 @@ register_diagnostics! {\n     E0077,\n     E0085,\n     E0086,\n-    E0087,\n     E0088,\n     E0090,\n     E0091,\n@@ -1235,7 +1280,6 @@ register_diagnostics! {\n            // between structures\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0379,  // trait fns cannot be const\n     E0390, // only a single inherent implementation marked with\n            // `#[lang = \\\"{}\\\"]` is allowed for the `{}` primitive\n     E0391, // unsupported cyclic reference between types/traits detected"}, {"sha": "e3bb01e6970786fa1bf94be2ce1502eedf4ec95a", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a41b9999f43c2ed89e342355e2ad7937ab939e/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=c0a41b9999f43c2ed89e342355e2ad7937ab939e", "patch": "@@ -12,6 +12,6 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n-//~^^ ERROR mutable statics are not allowed to have owned pointers\n+//~^^ ERROR mutable statics are not allowed to have boxes\n \n fn main() {}"}]}