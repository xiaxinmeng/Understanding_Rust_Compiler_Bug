{"sha": "538e198193451e680cc95b66c82baac3ac687c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOGUxOTgxOTM0NTFlNjgwY2M5NWI2NmM4MmJhYWMzYWM2ODdjOGM=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-04T00:35:27Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-04T00:35:27Z"}, "message": "Move various ui const tests to `library`\n\nMove:\n - `src\\test\\ui\\consts\\const-nonzero.rs` to `library\\core`\n - `src\\test\\ui\\consts\\ascii.rs` to `library\\core`\n - `src\\test\\ui\\consts\\cow-is-borrowed` to `library\\alloc`\n\nPart of #76268", "tree": {"sha": "681bc99a51195deb0c9869a95d804839e1398e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/681bc99a51195deb0c9869a95d804839e1398e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/538e198193451e680cc95b66c82baac3ac687c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/538e198193451e680cc95b66c82baac3ac687c8c", "html_url": "https://github.com/rust-lang/rust/commit/538e198193451e680cc95b66c82baac3ac687c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/538e198193451e680cc95b66c82baac3ac687c8c/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0f6b113047b2cf9afbde990cee30fd5b866469", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0f6b113047b2cf9afbde990cee30fd5b866469", "html_url": "https://github.com/rust-lang/rust/commit/0d0f6b113047b2cf9afbde990cee30fd5b866469"}], "stats": {"total": 88, "additions": 42, "deletions": 46}, "files": [{"sha": "57976aa6cdfdfee288d90fc2afe91ae16109f30e", "filename": "library/alloc/tests/borrow.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/538e198193451e680cc95b66c82baac3ac687c8c/library%2Falloc%2Ftests%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538e198193451e680cc95b66c82baac3ac687c8c/library%2Falloc%2Ftests%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fborrow.rs?ref=538e198193451e680cc95b66c82baac3ac687c8c", "patch": "@@ -45,3 +45,16 @@ fn test_from_cow_path() {\n     let path = Path::new(\"hello\");\n     test_from_cow!(path: &Path);\n }\n+\n+#[test]\n+fn cow_const() {\n+    // test that the methods of `Cow` are usable in a const context\n+\n+    const COW: Cow<'_, str> = Cow::Borrowed(\"moo\");\n+\n+    const IS_BORROWED: bool = COW.is_borrowed();\n+    assert!(IS_BORROWED);\n+\n+    const IS_OWNED: bool = COW.is_owned();\n+    assert!(!IS_OWNED);\n+}"}, {"sha": "590639d983481bdc0b3f0518ff820941d5fbf0cc", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/538e198193451e680cc95b66c82baac3ac687c8c/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538e198193451e680cc95b66c82baac3ac687c8c/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=538e198193451e680cc95b66c82baac3ac687c8c", "patch": "@@ -1,5 +1,6 @@\n #![feature(allocator_api)]\n #![feature(box_syntax)]\n+#![feature(cow_is_borrowed)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(new_uninit)]"}, {"sha": "3244bbc2d670ddc00f7f9aefe14b3ef543f3b44c", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/538e198193451e680cc95b66c82baac3ac687c8c/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538e198193451e680cc95b66c82baac3ac687c8c/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=538e198193451e680cc95b66c82baac3ac687c8c", "patch": "@@ -397,3 +397,14 @@ fn test_is_ascii_align_size_thoroughly() {\n         }\n     }\n }\n+\n+#[test]\n+fn ascii_const() {\n+    // test that the `is_ascii` methods of `char` and `u8` are usable in a const context\n+\n+    const CHAR_IS_ASCII: bool = 'a'.is_ascii();\n+    assert!(CHAR_IS_ASCII);\n+\n+    const BYTE_IS_ASCII: bool = 97u8.is_ascii();\n+    assert!(BYTE_IS_ASCII);\n+}"}, {"sha": "825e5e63b59bc84822cb0250c0c8406313331aef", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/538e198193451e680cc95b66c82baac3ac687c8c/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538e198193451e680cc95b66c82baac3ac687c8c/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=538e198193451e680cc95b66c82baac3ac687c8c", "patch": "@@ -195,3 +195,20 @@ fn test_nonzero_from_int_on_err() {\n     assert!(NonZeroI8::try_from(0).is_err());\n     assert!(NonZeroI32::try_from(0).is_err());\n }\n+\n+#[test]\n+fn nonzero_const() {\n+    // test that the methods of `NonZeroX>` are usable in a const context\n+    // Note: only tests NonZero8\n+\n+    const NONZERO: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };\n+\n+    const GET: u8 = NONZERO.get();\n+    assert_eq!(GET, 5);\n+\n+    const ZERO: Option<NonZeroU8> = NonZeroU8::new(0);\n+    assert!(ZERO.is_none());\n+\n+    const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n+    assert!(ONE.is_some());\n+}"}, {"sha": "cf6f8c8d69a26b92ff4014eaf2812d1e7302ee84", "filename": "src/test/ui/consts/const-nonzero.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d0f6b113047b2cf9afbde990cee30fd5b866469/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0f6b113047b2cf9afbde990cee30fd5b866469/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs?ref=0d0f6b113047b2cf9afbde990cee30fd5b866469", "patch": "@@ -1,16 +0,0 @@\n-// run-pass\n-\n-use std::num::NonZeroU8;\n-\n-const X: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };\n-const Y: u8 = X.get();\n-\n-const ZERO: Option<NonZeroU8> = NonZeroU8::new(0);\n-const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n-\n-fn main() {\n-    assert_eq!(Y, 5);\n-\n-    assert!(ZERO.is_none());\n-    assert_eq!(ONE.unwrap().get(), 1);\n-}"}, {"sha": "adebe20f5a25591df1f21b58a7dd7acec590e820", "filename": "src/test/ui/consts/cow-is-borrowed.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d0f6b113047b2cf9afbde990cee30fd5b866469/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0f6b113047b2cf9afbde990cee30fd5b866469/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcow-is-borrowed.rs?ref=0d0f6b113047b2cf9afbde990cee30fd5b866469", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-#![feature(cow_is_borrowed)]\n-\n-use std::borrow::Cow;\n-\n-fn main() {\n-    const COW: Cow<str> = Cow::Borrowed(\"moo\");\n-\n-    const IS_BORROWED: bool = COW.is_borrowed();\n-    assert!(IS_BORROWED);\n-\n-    const IS_OWNED: bool = COW.is_owned();\n-    assert!(!IS_OWNED);\n-}"}, {"sha": "d8424549f93e6b29f9bf61d68fa31e540ee7aa3d", "filename": "src/test/ui/consts/is_ascii.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d0f6b113047b2cf9afbde990cee30fd5b866469/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0f6b113047b2cf9afbde990cee30fd5b866469/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fis_ascii.rs?ref=0d0f6b113047b2cf9afbde990cee30fd5b866469", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-static X: bool = 'a'.is_ascii();\n-static Y: bool = '\u00e4'.is_ascii();\n-\n-static BX: bool = b'a'.is_ascii();\n-static BY: bool = 192u8.is_ascii();\n-\n-fn main() {\n-    assert!(X);\n-    assert!(!Y);\n-\n-    assert!(BX);\n-    assert!(!BY);\n-}"}]}