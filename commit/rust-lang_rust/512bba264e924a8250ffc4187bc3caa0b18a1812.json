{"sha": "512bba264e924a8250ffc4187bc3caa0b18a1812", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMmJiYTI2NGU5MjRhODI1MGZmYzQxODdiYzNjYWEwYjE4YTE4MTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-04T23:32:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-05T00:02:31Z"}, "message": "Change 'statement' to 'expression' in a bunch of places", "tree": {"sha": "e3eff001a69ae1bbb09b6d626b86d8d902fd3987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3eff001a69ae1bbb09b6d626b86d8d902fd3987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/512bba264e924a8250ffc4187bc3caa0b18a1812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/512bba264e924a8250ffc4187bc3caa0b18a1812", "html_url": "https://github.com/rust-lang/rust/commit/512bba264e924a8250ffc4187bc3caa0b18a1812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/512bba264e924a8250ffc4187bc3caa0b18a1812/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e5457d7c99d3b273c3ef9edaebee1324be85c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5457d7c99d3b273c3ef9edaebee1324be85c7", "html_url": "https://github.com/rust-lang/rust/commit/70e5457d7c99d3b273c3ef9edaebee1324be85c7"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "368fb90c8ca1938e4bbb5561bb41e4bbcc4be912", "filename": "doc/rust.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/512bba264e924a8250ffc4187bc3caa0b18a1812/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/512bba264e924a8250ffc4187bc3caa0b18a1812/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=512bba264e924a8250ffc4187bc3caa0b18a1812", "patch": "@@ -334,7 +334,7 @@ The Rust type system is primarily structural, and contains the standard\n assortment of useful ``algebraic'' type constructors from functional\n languages, such as function types, tuples, record types, vectors, and\n nominally-tagged disjoint unions. Such values may be @emph{pattern-matched} in\n-an @code{alt} statement.\n+an @code{alt} expression.\n \n @sp 1\n @item Generic code\n@@ -394,8 +394,8 @@ the surrounding text by skipping over the bracketed ``extension text''.\n @sp 1\n @item Idempotent failure\n \n-If a task fails due to a signal, or if it executes the special @code{fail}\n-statement, it enters the @emph{failing} state. A failing task unwinds its\n+If a task fails due to a signal, or if it evaluates the special @code{fail}\n+expression, it enters the @emph{failing} state. A failing task unwinds its\n control stack, frees all of its owned resources (executing destructors) and\n enters the @emph{dead} state. Failure is idempotent and non-recoverable.\n \n@@ -1486,8 +1486,8 @@ operating-system processes.\n @cindex Port\n @cindex Channel\n @cindex Message passing\n-@cindex Send statement\n-@cindex Receive statement\n+@cindex Send expression\n+@cindex Receive expression\n \n With the exception of @emph{unsafe} constructs, Rust tasks are isolated from\n interfering with one another's memory directly. Instead of manipulating shared\n@@ -1563,14 +1563,14 @@ A task begins its lifecycle -- once it has been spawned -- in the\n function, and any functions called by the entry function.\n \n A task may transition from the @emph{running} state to the @emph{blocked}\n-state any time it executes a communication statement on a port or channel that\n-cannot be immediately completed.  When the communication statement can be\n+state any time it evaluates a communication expression on a port or channel that\n+cannot be immediately completed.  When the communication expression can be\n completed -- when a message arrives at a sender, or a queue drains\n sufficiently to complete a semi-synchronous send -- then the blocked task will\n unblock and transition back to @emph{running}.\n \n A task may transition to the @emph{failing} state at any time, due to an\n-un-trapped signal or the execution of a @code{fail} statement. Once\n+un-trapped signal or the evaluation of a @code{fail} expression. Once\n @emph{failing}, a task unwinds its stack and transitions to the @emph{dead}\n state. Unwinding the stack of a task is done by the task itself, on its own\n control stack. If a value with a destructor is freed during unwinding, the"}]}