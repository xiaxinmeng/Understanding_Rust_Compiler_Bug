{"sha": "00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "node_id": "C_kwDOAAsO6NoAKDAwMzA3YTViNmYxZDgxZmI1ZDE5ZjFlZjcyMzVmZjIzNWNlNzVkNTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T00:20:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-01T05:19:46Z"}, "message": "Rename `Ty::Literal` as `Ty::Path`.\n\nBecause a `Literal` is a type of expression, and is simply the wrong\nname for this.", "tree": {"sha": "b2dbb0f25e370965427d6c3202c9022c1075b327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2dbb0f25e370965427d6c3202c9022c1075b327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "html_url": "https://github.com/rust-lang/rust/commit/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9", "html_url": "https://github.com/rust-lang/rust/commit/18fef6bbd73d8d2dc721df458cb3b2a22e6b79c9"}], "stats": {"total": 47, "additions": 18, "deletions": 29}, "files": [{"sha": "1c507678489fec998af4969df78e2e464acb2a9e", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -55,7 +55,7 @@ pub fn expand_deriving_clone(\n                 }\n             }\n             ItemKind::Union(..) => {\n-                bounds = vec![Literal(path_std!(marker::Copy))];\n+                bounds = vec![Path(path_std!(marker::Copy))];\n                 is_simple = true;\n                 substructure = combine_substructure(Box::new(|c, s, sub| {\n                     cs_clone_simple(\"Clone\", c, s, sub, true)"}, {"sha": "c7850cd4b4cf6f4226153a8cfbe7edef31ddbf0f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_ord(\n             generics: Bounds::empty(),\n             explicit_self: true,\n             args: vec![(self_ref(), sym::other)],\n-            ret_ty: Literal(path_std!(cmp::Ordering)),\n+            ret_ty: Path(path_std!(cmp::Ordering)),\n             attributes: attrs,\n             unify_fieldless_variants: true,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| cs_cmp(a, b, c))),"}, {"sha": "ca5ca29eb826a6f02c3244049a79d734c28b0ccb", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -71,7 +71,7 @@ pub fn expand_deriving_partial_eq(\n                 generics: Bounds::empty(),\n                 explicit_self: true,\n                 args: vec![(self_ref(), sym::other)],\n-                ret_ty: Literal(path_local!(bool)),\n+                ret_ty: Path(path_local!(bool)),\n                 attributes: attrs,\n                 unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| $f(a, b, c))),"}, {"sha": "07db82fee935bb9d48537bf4529162567ac5b07f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -15,12 +15,9 @@ pub fn expand_deriving_partial_ord(\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n ) {\n-    let ordering_ty = Literal(path_std!(cmp::Ordering));\n-    let ret_ty = Literal(Path::new_(\n-        pathvec_std!(option::Option),\n-        vec![Box::new(ordering_ty)],\n-        PathKind::Std,\n-    ));\n+    let ordering_ty = Path(path_std!(cmp::Ordering));\n+    let ret_ty =\n+        Path(Path::new_(pathvec_std!(option::Option), vec![Box::new(ordering_ty)], PathKind::Std));\n \n     let inline = cx.meta_word(span, sym::inline);\n     let attrs = vec![cx.attribute(inline)];"}, {"sha": "1411c60c0bfd5e22a13c1bbb7874ce27c49e34bd", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -16,7 +16,7 @@ pub fn expand_deriving_debug(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     // &mut ::std::fmt::Formatter\n-    let fmtr = Ref(Box::new(Literal(path_std!(fmt::Formatter))), ast::Mutability::Mut);\n+    let fmtr = Ref(Box::new(Path(path_std!(fmt::Formatter))), ast::Mutability::Mut);\n \n     let trait_def = TraitDef {\n         span,\n@@ -30,7 +30,7 @@ pub fn expand_deriving_debug(\n             generics: Bounds::empty(),\n             explicit_self: true,\n             args: vec![(fmtr, sym::f)],\n-            ret_ty: Literal(path_std!(fmt::Result)),\n+            ret_ty: Path(path_std!(fmt::Result)),\n             attributes: Vec::new(),\n             unify_fieldless_variants: false,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {"}, {"sha": "16154fb4d031b160bc1d6bcd75f9a45cbcd7b7a0", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -36,16 +36,12 @@ pub fn expand_deriving_rustc_decodable(\n                 )],\n             },\n             explicit_self: false,\n-            args: vec![(Ref(Box::new(Literal(Path::new_local(typaram))), Mutability::Mut), sym::d)],\n-            ret_ty: Literal(Path::new_(\n+            args: vec![(Ref(Box::new(Path(Path::new_local(typaram))), Mutability::Mut), sym::d)],\n+            ret_ty: Path(Path::new_(\n                 pathvec_std!(result::Result),\n                 vec![\n                     Box::new(Self_),\n-                    Box::new(Literal(Path::new_(\n-                        vec![typaram, sym::Error],\n-                        vec![],\n-                        PathKind::Local,\n-                    ))),\n+                    Box::new(Path(Path::new_(vec![typaram, sym::Error], vec![], PathKind::Local))),\n                 ],\n                 PathKind::Std,\n             )),"}, {"sha": "7cce1a0c2a2d89062ae17d0e01d04bbc0bf22dc9", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -121,16 +121,12 @@ pub fn expand_deriving_rustc_encodable(\n                 )],\n             },\n             explicit_self: true,\n-            args: vec![(Ref(Box::new(Literal(Path::new_local(typaram))), Mutability::Mut), sym::s)],\n-            ret_ty: Literal(Path::new_(\n+            args: vec![(Ref(Box::new(Path(Path::new_local(typaram))), Mutability::Mut), sym::s)],\n+            ret_ty: Path(Path::new_(\n                 pathvec_std!(result::Result),\n                 vec![\n                     Box::new(Tuple(Vec::new())),\n-                    Box::new(Literal(Path::new_(\n-                        vec![typaram, sym::Error],\n-                        vec![],\n-                        PathKind::Local,\n-                    ))),\n+                    Box::new(Path(Path::new_(vec![typaram, sym::Error], vec![], PathKind::Local))),\n                 ],\n                 PathKind::Std,\n             )),"}, {"sha": "c2dcff36c397ad6853ebcc6fb91e1f00ad699da1", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -77,7 +77,7 @@ pub enum Ty {\n     Ref(Box<Ty>, ast::Mutability),\n     /// `mod::mod::Type<[lifetime], [Params...]>`, including a plain type\n     /// parameter, and things like `i32`\n-    Literal(Path),\n+    Path(Path),\n     /// includes unit\n     Tuple(Vec<Ty>),\n }\n@@ -103,7 +103,7 @@ impl Ty {\n                 let raw_ty = ty.to_ty(cx, span, self_ty, self_generics);\n                 cx.ty_rptr(span, raw_ty, None, *mutbl)\n             }\n-            Literal(p) => p.to_ty(cx, span, self_ty, self_generics),\n+            Path(p) => p.to_ty(cx, span, self_ty, self_generics),\n             Self_ => cx.ty_path(self.to_path(cx, span, self_ty, self_generics)),\n             Tuple(fields) => {\n                 let ty = ast::TyKind::Tup(\n@@ -141,7 +141,7 @@ impl Ty {\n \n                 cx.path_all(span, false, vec![self_ty], params)\n             }\n-            Literal(ref p) => p.to_path(cx, span, self_ty, generics),\n+            Path(ref p) => p.to_path(cx, span, self_ty, generics),\n             Ref(..) => cx.span_bug(span, \"ref in a path in generic `derive`\"),\n             Tuple(..) => cx.span_bug(span, \"tuple in a path in generic `derive`\"),\n         }"}, {"sha": "641744c47ce43f8999207db75f995bc83c5ba23d", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00307a5b6f1d81fb5d19f1ef7235ff235ce75d50/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=00307a5b6f1d81fb5d19f1ef7235ff235ce75d50", "patch": "@@ -31,7 +31,7 @@ pub fn expand_deriving_hash(\n             name: sym::hash,\n             generics: Bounds { bounds: vec![(typaram, vec![path_std!(hash::Hasher)])] },\n             explicit_self: true,\n-            args: vec![(Ref(Box::new(Literal(arg)), Mutability::Mut), sym::state)],\n+            args: vec![(Ref(Box::new(Path(arg)), Mutability::Mut), sym::state)],\n             ret_ty: nil_ty(),\n             attributes: vec![],\n             unify_fieldless_variants: true,"}]}