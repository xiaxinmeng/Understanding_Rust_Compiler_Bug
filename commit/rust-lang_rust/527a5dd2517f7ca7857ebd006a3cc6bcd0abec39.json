{"sha": "527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyN2E1ZGQyNTE3ZjdjYTc4NTdlYmQwMDZhM2NjNmJjZDBhYmVjMzk=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-12T05:41:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:55Z"}, "message": "Normalize LvalueTy for ops and format code to satisfy tidy check", "tree": {"sha": "5cc26776fa1f64bf51c3a6d095d03cab2aa06353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc26776fa1f64bf51c3a6d095d03cab2aa06353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "html_url": "https://github.com/rust-lang/rust/commit/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c6db09ee35810005274017abcd0798d6978a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c6db09ee35810005274017abcd0798d6978a47", "html_url": "https://github.com/rust-lang/rust/commit/47c6db09ee35810005274017abcd0798d6978a47"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "6888225de757c3b3900a206c11294ea4533f7842", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527a5dd2517f7ca7857ebd006a3cc6bcd0abec39/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=527a5dd2517f7ca7857ebd006a3cc6bcd0abec39", "patch": "@@ -1012,23 +1012,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn aggregate_field_ty(&mut self, ak: &Box<AggregateKind<'tcx>>, field: usize, location: Location)\n-        -> Result<Ty<'tcx>, FieldAccessError>\n-    {\n+    fn aggregate_field_ty(\n+        &mut self,\n+        ak: &Box<AggregateKind<'tcx>>,\n+        field: usize,\n+        location: Location,\n+    ) -> Result<Ty<'tcx>, FieldAccessError> {\n         let tcx = self.tcx();\n \n         let (variant, substs) = match **ak {\n-            AggregateKind::Adt(def, variant, substs, _) => { // handle unions?\n+            AggregateKind::Adt(def, variant, substs, _) => {\n+                // handle unions?\n                 (&def.variants[variant], substs)\n-            },\n+            }\n             AggregateKind::Closure(def_id, substs) => {\n                 return match substs.upvar_tys(def_id, tcx).nth(field) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.upvar_tys(def_id, tcx).count()\n+                        field_count: substs.upvar_tys(def_id, tcx).count(),\n                     }),\n                 }\n-            },\n+            }\n             AggregateKind::Generator(def_id, substs, _) => {\n                 if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field) {\n                     return Ok(ty);\n@@ -1037,22 +1041,24 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 return match substs.field_tys(def_id, tcx).nth(field) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.field_tys(def_id, tcx).count() + 1\n+                        field_count: substs.field_tys(def_id, tcx).count() + 1,\n                     }),\n-                }\n-            },\n+                };\n+            }\n             AggregateKind::Array(ty) => {\n                 return Ok(ty);\n-            },\n+            }\n             AggregateKind::Tuple => {\n                 unreachable!(\"This should have been covered in check_rvalues\");\n-            },\n+            }\n         };\n \n         if let Some(field) = variant.fields.get(field) {\n             Ok(self.normalize(&field.ty(tcx, substs), location))\n         } else {\n-            Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n+            Err(FieldAccessError::OutOfRange {\n+                field_count: variant.fields.len(),\n+            })\n         }\n     }\n \n@@ -1062,7 +1068,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             Rvalue::Aggregate(ak, ops) => {\n                 match **ak {\n                     // tuple rvalue field type is always the type of the op. Nothing to check here.\n-                    AggregateKind::Tuple => { },\n+                    AggregateKind::Tuple => {}\n                     _ => {\n                         for (i, op) in ops.iter().enumerate() {\n                             let field_ty = match self.aggregate_field_ty(ak, i, location) {\n@@ -1073,27 +1079,36 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                         rv,\n                                         \"accessed field #{} but variant only has {}\",\n                                         i,\n-                                        field_count);\n+                                        field_count\n+                                    );\n                                     continue;\n-                                },\n+                                }\n                             };\n                             let op_ty = match op {\n-                                Operand::Consume(lv) => lv.ty(mir, tcx).to_ty(tcx),\n+                                Operand::Consume(lv) => {\n+                                    self.normalize(&lv.ty(mir, tcx), location).to_ty(tcx)\n+                                }\n                                 Operand::Constant(c) => c.ty,\n                             };\n-                            if let Err(terr) = self.sub_types(op_ty, field_ty, location.at_successor_within_block()) {\n-                                span_mirbug!(\n+                            if let Err(terr) = self.sub_types(\n+                                op_ty,\n+                                field_ty,\n+                                location.at_successor_within_block(),\n+                            )\n+                                {\n+                                    span_mirbug!(\n                                     self,\n                                     rv,\n                                     \"{:?} is not a subtype of {:?}: {:?}\",\n                                     op_ty,\n                                     field_ty,\n-                                    terr);\n-                            }\n+                                    terr\n+                                );\n+                                }\n                         }\n-                    },\n+                    }\n                 }\n-            },\n+            }\n             // FIXME: These other cases have to be implemented in future PRs\n             Rvalue::Use(..) |\n             Rvalue::Repeat(..) |\n@@ -1104,7 +1119,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::UnaryOp(..) |\n             Rvalue::Discriminant(..) |\n-            Rvalue::NullaryOp(..) => { }\n+            Rvalue::NullaryOp(..) => {}\n         }\n     }\n "}]}