{"sha": "2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjJkMzA3ZTA4ZDlmNjJhNGNjOWZhYjBkZGFiMDZmNDE4MzQ3OTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-20T19:16:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-20T19:16:20Z"}, "message": "Rollup merge of #38150 - estebank:fix-23286, r=nikomatsakis\n\nPoint out the known type when field doesn't satisfy bound\n\nFor file\n\n```rust\nuse std::path::Path;\n\nfn f(p: Path) { }\n```\n\nprovide the following error\n\n```nocode\nerror[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n --> file.rs:3:6\n  |\n3 | fn f(p: Path) { }\n  |      ^ within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n  |\n  = note: `[u8]` does not have a constant size known at compile-time\n  = note: required because it appears within the type `std::path::Path`\n  = note: all local variables must have a statically known size\n```\n\nFix #23286.", "tree": {"sha": "16d9a034a7213946610a374ba816e7eb144db24b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d9a034a7213946610a374ba816e7eb144db24b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "html_url": "https://github.com/rust-lang/rust/commit/2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e9691cefdf48e09dcd6cce5bbd521044919598", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e9691cefdf48e09dcd6cce5bbd521044919598", "html_url": "https://github.com/rust-lang/rust/commit/65e9691cefdf48e09dcd6cce5bbd521044919598"}, {"sha": "5c130411e907b018aef90aabe766d04e989abe9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c130411e907b018aef90aabe766d04e989abe9e", "html_url": "https://github.com/rust-lang/rust/commit/5c130411e907b018aef90aabe766d04e989abe9e"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "ab8c552d561f6100dc4cde5e5ccd5af1b4fe5788", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "patch": "@@ -458,11 +458,28 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err\n     }\n \n+\n+    /// Get the parent trait chain start\n+    fn get_parent_trait_ref(&self, code: &ObligationCauseCode<'tcx>) -> Option<String> {\n+        match code {\n+            &ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n+                let parent_trait_ref = self.resolve_type_vars_if_possible(\n+                    &data.parent_trait_ref);\n+                match self.get_parent_trait_ref(&data.parent_code) {\n+                    Some(t) => Some(t),\n+                    None => Some(format!(\"{}\", parent_trait_ref.0.self_ty())),\n+                }\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     pub fn report_selection_error(&self,\n                                   obligation: &PredicateObligation<'tcx>,\n                                   error: &SelectionError<'tcx>)\n     {\n         let span = obligation.cause.span;\n+\n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n                 if let ObligationCauseCode::CompareImplMethodObligation {\n@@ -487,14 +504,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 return;\n                             } else {\n                                 let trait_ref = trait_predicate.to_poly_trait_ref();\n-\n-                                let mut err = struct_span_err!(self.tcx.sess, span, E0277,\n-                                    \"the trait bound `{}` is not satisfied\",\n-                                    trait_ref.to_predicate());\n-                                err.span_label(span, &format!(\"the trait `{}` is not implemented \\\n-                                                               for `{}`\",\n-                                                              trait_ref,\n-                                                              trait_ref.self_ty()));\n+                                let (post_message, pre_message) = match self.get_parent_trait_ref(\n+                                    &obligation.cause.code)\n+                                {\n+                                    Some(t) => {\n+                                        (format!(\" in `{}`\", t), format!(\"within `{}`, \", t))\n+                                    }\n+                                    None => (String::new(), String::new()),\n+                                };\n+                                let mut err = struct_span_err!(\n+                                    self.tcx.sess,\n+                                    span,\n+                                    E0277,\n+                                    \"the trait bound `{}` is not satisfied{}\",\n+                                    trait_ref.to_predicate(),\n+                                    post_message);\n+                                err.span_label(span,\n+                                               &format!(\"{}the trait `{}` is not \\\n+                                                         implemented for `{}`\",\n+                                                        pre_message,\n+                                                        trait_ref,\n+                                                        trait_ref.self_ty()));\n \n                                 // Try to report a help message\n "}, {"sha": "211c0e6f890313130583ac8d7796ddd6a6403a2d", "filename": "src/test/compile-fail/E0277-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277-2.rs?ref=2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    bar: Bar\n+}\n+\n+struct Bar {\n+    baz: Baz\n+}\n+\n+struct Baz {\n+    x: *const u8\n+}\n+\n+fn is_send<T: Send>() { }\n+\n+fn main() {\n+    is_send::<Foo>();\n+    //~^ ERROR the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n+    //~| NOTE within `Foo`, the trait `std::marker::Send` is not implemented for `*const u8`\n+    //~| NOTE: `*const u8` cannot be sent between threads safely\n+    //~| NOTE: required because it appears within the type `Baz`\n+    //~| NOTE: required because it appears within the type `Bar`\n+    //~| NOTE: required because it appears within the type `Foo`\n+    //~| NOTE: required by `is_send`\n+}"}, {"sha": "e31fea1e45863205e40132d17162e04a9fbe9e85", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2d307e08d9f62a4cc9fab0ddab06f41834797/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=2fb2d307e08d9f62a4cc9fab0ddab06f41834797", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::path::Path;\n+\n trait Foo {\n     fn bar(&self);\n }\n@@ -16,6 +18,13 @@ fn some_func<T: Foo>(foo: T) {\n     foo.bar();\n }\n \n+fn f(p: Path) { }\n+//~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n+//~| NOTE within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+//~| NOTE `[u8]` does not have a constant size known at compile-time\n+//~| NOTE required because it appears within the type `std::path::Path`\n+//~| NOTE all local variables must have a statically known size\n+\n fn main() {\n     some_func(5i32);\n     //~^ ERROR the trait bound `i32: Foo` is not satisfied"}]}