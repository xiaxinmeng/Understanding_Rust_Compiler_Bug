{"sha": "b0c20302b7a647ae362071d72b382b1bd393e4a5", "node_id": "C_kwDOAAsO6NoAKGIwYzIwMzAyYjdhNjQ3YWUzNjIwNzFkNzJiMzgyYjFiZDM5M2U0YTU", "commit": {"author": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2022-06-10T01:16:39Z"}, "committer": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2022-06-10T17:12:02Z"}, "message": "Some refactoring", "tree": {"sha": "ed229f66e486a93ee8db57b1d97fd5da91c384e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed229f66e486a93ee8db57b1d97fd5da91c384e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c20302b7a647ae362071d72b382b1bd393e4a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGofhdE61kfoixWy+rtlL+hwwE4kFAmKje2IACgkQrtlL+hww\nE4ksQw/+LmxsZyK2JnxvsMWGZ4siGhnAgZF/tc6XAvfoeBqIEl0B5jpFS29GPJ5S\n68ddDCrQLz7Slj+jmQGMScU5lBkbHGytgbmVNWix8+74VDX8QgkaKqFK4XgUjfok\nSvwDdcC6Gibmrbg7ZFrmAOP6G4nVIx1TMIikfrbliVq9pHlF1a+v6OxkG7HN1LSW\nyNgnqrecsaBK1GnK7HjQh3MtppC5UDBqEZIaCdFK1d6w8CBpP2c2uzYayOdge+c6\ni+61IK/6eDLs1SsSqG6adRlevjozuMzgnIeDdphTqZq2HGEdbBBxOjNN/VkaLNam\nsox2Lgx3lsvFxROMCbr103bWktkNnEAm9dg6T+xTFDcgkyC0jjjshlCd2QpY0OPa\nS+UD06e9Mk16RL03uC03xa8nbukn4zU7y/M/omfPOc4ZVFu8MmcbJXATIKSNP0z8\n1XL4mPISVzf+k+6Og8pCn51ZKBBhO7lZvVtjp/NmGKxtF+vYfbGCvzZJ81aMFtVs\naPwfhvaMQZSziBkbhVkf/IgjYxpBIZGWYeS9XHzPFQqvc9Do4X7kIhrm2NP9OCc1\n3NbqP1sc7bF0G6mlOBfT729+BZBrcjoArNq/3haGJMc2jWPspblfml5Shj9cLDH0\nw+LzLrXrEtpGLeXQK9K0avzXmDsaKqjNfPdFTHh5H4B6I4W05X4=\n=A4CP\n-----END PGP SIGNATURE-----", "payload": "tree ed229f66e486a93ee8db57b1d97fd5da91c384e3\nparent b46f1c4a7fa5c0705cc65953e9887c4449aa8cba\nauthor Micha White <botahamec@outlook.com> 1654823799 -0400\ncommitter Micha White <botahamec@outlook.com> 1654881122 -0400\n\nSome refactoring\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c20302b7a647ae362071d72b382b1bd393e4a5", "html_url": "https://github.com/rust-lang/rust/commit/b0c20302b7a647ae362071d72b382b1bd393e4a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c20302b7a647ae362071d72b382b1bd393e4a5/comments", "author": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46f1c4a7fa5c0705cc65953e9887c4449aa8cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46f1c4a7fa5c0705cc65953e9887c4449aa8cba", "html_url": "https://github.com/rust-lang/rust/commit/b46f1c4a7fa5c0705cc65953e9887c4449aa8cba"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "813469be2f755be36526b54fb18f17ee3f602d9b", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b0c20302b7a647ae362071d72b382b1bd393e4a5/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c20302b7a647ae362071d72b382b1bd393e4a5/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=b0c20302b7a647ae362071d72b382b1bd393e4a5", "patch": "@@ -140,22 +140,20 @@ fn check_opt_like<'a>(\n     ty: Ty<'a>,\n     els: Option<&Expr<'_>>,\n ) {\n-    // We want to suggest to exclude an arm that contains only wildcards or forms the exhaustive\n-    // match with the second branch, without enum variants in matches.\n-    if !contains_only_wilds(arms[1].pat) && !form_exhaustive_matches(cx, ty, arms[0].pat, arms[1].pat) {\n-        return;\n+    // We don't want to lint if the second arm contains an enum which could\n+    // have more variants in the future.\n+    if form_exhaustive_matches(cx, ty, arms[0].pat, arms[1].pat) {\n+        report_single_pattern(cx, ex, arms, expr, els);\n     }\n+}\n \n+fn pat_in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'a>, pat: &Pat<'_>) -> bool {\n     let mut paths_and_types = Vec::new();\n-    if !collect_pat_paths(&mut paths_and_types, cx, arms[1].pat, ty) {\n-        return;\n-    }\n-\n-    if paths_and_types.iter().all(|ty| in_candidate_enum(cx, *ty)) {\n-        report_single_pattern(cx, ex, arms, expr, els);\n-    }\n+    collect_pat_paths(&mut paths_and_types, cx, pat, ty);\n+    paths_and_types.iter().all(|ty| in_candidate_enum(cx, *ty))\n }\n \n+/// Returns `true` if the given type is an enum we know won't be expanded in the future\n fn in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'_>) -> bool {\n     // list of candidate `Enum`s we know will never get any more members\n     let candidates = [&paths::COW, &paths::OPTION, &paths::RESULT];\n@@ -168,20 +166,17 @@ fn in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'_>) -> bool {\n     false\n }\n \n-/// Collects paths and their types from the given patterns. Returns true if the given pattern could\n-/// be simplified, false otherwise.\n-fn collect_pat_paths<'a>(acc: &mut Vec<Ty<'a>>, cx: &LateContext<'a>, pat: &Pat<'_>, ty: Ty<'a>) -> bool {\n+/// Collects paths and their types from the given patterns\n+fn collect_pat_paths<'a>(acc: &mut Vec<Ty<'a>>, cx: &LateContext<'a>, pat: &Pat<'_>, ty: Ty<'a>) {\n     match pat.kind {\n-        PatKind::Wild => true,\n-        PatKind::Tuple(inner, _) => inner.iter().all(|p| {\n+        PatKind::Tuple(inner, _) => inner.iter().for_each(|p| {\n             let p_ty = cx.typeck_results().pat_ty(p);\n-            collect_pat_paths(acc, cx, p, p_ty)\n+            collect_pat_paths(acc, cx, p, p_ty);\n         }),\n         PatKind::TupleStruct(..) | PatKind::Binding(BindingAnnotation::Unannotated, .., None) | PatKind::Path(_) => {\n             acc.push(ty);\n-            true\n         },\n-        _ => false,\n+        _ => {},\n     }\n }\n \n@@ -242,9 +237,9 @@ fn form_exhaustive_matches<'a>(cx: &LateContext<'a>, ty: Ty<'a>, left: &Pat<'_>,\n             }\n             true\n         },\n-        (PatKind::TupleStruct(..), PatKind::Path(_)) => in_candidate_enum(cx, ty),\n+        (PatKind::TupleStruct(..), PatKind::Path(_)) => pat_in_candidate_enum(cx, ty, right),\n         (PatKind::TupleStruct(..), PatKind::TupleStruct(_, inner, _)) => {\n-            in_candidate_enum(cx, ty) && inner.iter().all(contains_only_wilds)\n+            pat_in_candidate_enum(cx, ty, right) && inner.iter().all(contains_only_wilds)\n         },\n         _ => false,\n     }"}]}