{"sha": "7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNTU4OGVkZjVlNmI3MDlmNmJhNjk1OWJjNTBmZmJjODk0NjhkM2I=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-03T23:05:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-03T23:05:58Z"}, "message": "Rollup merge of #87734 - Smittyvb:more-union-tests, r=LeSeulArtichaut\n\nTest dropping union fields more\n\nNow that #87403 is merged, a few more tests can be added for reads/writes to dropping union fields.\n\nr? ``@LeSeulArtichaut``", "tree": {"sha": "7d2884267ffc5c435502cd9290bae1c3e5b55b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2884267ffc5c435502cd9290bae1c3e5b55b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCcvXCRBK7hj4Ov3rIwAA1d8IABRU8Q0nhPWL93l2VrZXHL+y\nTj5H8AQ1Je6Ehm7JKBfZKhWebKLzfZ0CU1BpX3CLSjYkK5jTzjQNujr31+PaGPUw\nV8Gey7jY+GBFrXfsFWvzdPjzuIwCiKHo5cGVLN3LF6c3QphnofPehIbsH+V6hniB\nq9OQu7J2I3ZRQCekP7FXZqRI8SOjY7iFS4Flgr574hm38s5eJU8X4bNu8FrYgdHT\nLx2tXE7pkGTjkndN3KbiMzhSHDhCKZNMSLLzD4YfsACKIDpTo6MiEBY/MtFKl4zV\niyYjr3sV8sXXLYmq6MF+9jV0QlnjiLb3Mf2ILdsiYUTA+3m34XADSV2c1RMZiXY=\n=sVdy\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d2884267ffc5c435502cd9290bae1c3e5b55b78\nparent 1666c26d90a520cafd9623fd5e3f031a3b5c9626\nparent 6953f17aec75c83985db6861ddf4d3cfaa10f042\nauthor Yuki Okushi <jtitor@2k36.org> 1628031958 +0900\ncommitter GitHub <noreply@github.com> 1628031958 +0900\n\nRollup merge of #87734 - Smittyvb:more-union-tests, r=LeSeulArtichaut\n\nTest dropping union fields more\n\nNow that #87403 is merged, a few more tests can be added for reads/writes to dropping union fields.\n\nr? ``@LeSeulArtichaut``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "html_url": "https://github.com/rust-lang/rust/commit/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1666c26d90a520cafd9623fd5e3f031a3b5c9626", "url": "https://api.github.com/repos/rust-lang/rust/commits/1666c26d90a520cafd9623fd5e3f031a3b5c9626", "html_url": "https://github.com/rust-lang/rust/commit/1666c26d90a520cafd9623fd5e3f031a3b5c9626"}, {"sha": "6953f17aec75c83985db6861ddf4d3cfaa10f042", "url": "https://api.github.com/repos/rust-lang/rust/commits/6953f17aec75c83985db6861ddf4d3cfaa10f042", "html_url": "https://github.com/rust-lang/rust/commit/6953f17aec75c83985db6861ddf4d3cfaa10f042"}], "stats": {"total": 173, "additions": 151, "deletions": 22}, "files": [{"sha": "c3d7d41ca35fbb8b9942bb906dbdcf8026598117", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "9766ae4e435f2fb8822905e00900c92b5c9a7d4a", "filename": "src/test/ui/union/union-drop.thirunsafeck.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1666c26d90a520cafd9623fd5e3f031a3b5c9626/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1666c26d90a520cafd9623fd5e3f031a3b5c9626/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr?ref=1666c26d90a520cafd9623fd5e3f031a3b5c9626", "patch": "@@ -1,22 +0,0 @@\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:27:9\n-   |\n-LL |         unsafe { CHECK += 1; }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: `#[warn(unused_unsafe)]` on by default\n-\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:33:9\n-   |\n-LL |         unsafe { CHECK += 1; }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-\n-warning: unnecessary `unsafe` block\n-  --> $DIR/union-drop.rs:40:5\n-   |\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-warning: 3 warnings emitted\n-"}, {"sha": "cd338ac9e3a270dbb352a5644ef6aaf0cc6c9683", "filename": "src/test/ui/unsafe/union-assignop.mirunsafeck.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr?ref=7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "patch": "@@ -0,0 +1,59 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:20:5\n+   |\n+LL |     foo.a += 5;\n+   |     ^^^^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:5\n+   |\n+LL |     foo.b += Dropping;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:22:5\n+   |\n+LL |     foo.b = Dropping;\n+   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:23:5\n+   |\n+LL |     foo.a;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:25:5\n+   |\n+LL |     foo.b;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:13\n+   |\n+LL |     foo.b = foo.b;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:5\n+   |\n+LL |     foo.b = foo.b;\n+   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c4be20aa567b748f54736e2723db61abd660eee7", "filename": "src/test/ui/unsafe/union-assignop.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs?ref=7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "patch": "@@ -0,0 +1,30 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(untagged_unions)]\n+\n+use std::ops::AddAssign;\n+\n+struct Dropping;\n+impl AddAssign for Dropping {\n+    fn add_assign(&mut self, _: Self) {}\n+}\n+\n+union Foo {\n+    a: u8, // non-dropping\n+    b: Dropping, // treated as dropping\n+}\n+\n+fn main() {\n+    let mut foo = Foo { a: 42 };\n+    foo.a += 5; //~ ERROR access to union field is unsafe\n+    foo.b += Dropping; //~ ERROR access to union field is unsafe\n+    foo.b = Dropping; //~ ERROR assignment to union field that might need dropping is unsafe\n+    foo.a; //~ ERROR access to union field is unsafe\n+    let foo = Foo { a: 42 };\n+    foo.b; //~ ERROR access to union field is unsafe\n+    let mut foo = Foo { a: 42 };\n+    foo.b = foo.b;\n+    //~^ ERROR access to union field is unsafe\n+    //~| ERROR assignment to union field that might need dropping\n+}"}, {"sha": "71de421a2553e7dd7e64723e3866c8bc2d4f8329", "filename": "src/test/ui/unsafe/union-assignop.thirunsafeck.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c5588edf5e6b709f6ba6959bc50ffbc89468d3b/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr?ref=7c5588edf5e6b709f6ba6959bc50ffbc89468d3b", "patch": "@@ -0,0 +1,59 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:20:5\n+   |\n+LL |     foo.a += 5;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:5\n+   |\n+LL |     foo.b += Dropping;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:22:5\n+   |\n+LL |     foo.b = Dropping;\n+   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:23:5\n+   |\n+LL |     foo.a;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:25:5\n+   |\n+LL |     foo.b;\n+   |     ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:5\n+   |\n+LL |     foo.b = foo.b;\n+   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:27:13\n+   |\n+LL |     foo.b = foo.b;\n+   |             ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}