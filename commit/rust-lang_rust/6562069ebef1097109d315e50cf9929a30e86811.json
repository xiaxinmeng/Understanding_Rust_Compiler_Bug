{"sha": "6562069ebef1097109d315e50cf9929a30e86811", "node_id": "C_kwDOAAsO6NoAKDY1NjIwNjllYmVmMTA5NzEwOWQzMTVlNTBjZjk5MjlhMzBlODY4MTE", "commit": {"author": {"name": "yuhaixin.hx", "email": "yuhaixin.hx@bytedance.com", "date": "2022-01-28T10:31:49Z"}, "committer": {"name": "yuhaixin.hx", "email": "yuhaixin.hx@bytedance.com", "date": "2022-01-28T10:31:49Z"}, "message": "remove allow_fail test flag", "tree": {"sha": "7e18d0b71cbb66035581531ae7f119bcfbe2c4b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e18d0b71cbb66035581531ae7f119bcfbe2c4b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6562069ebef1097109d315e50cf9929a30e86811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6562069ebef1097109d315e50cf9929a30e86811", "html_url": "https://github.com/rust-lang/rust/commit/6562069ebef1097109d315e50cf9929a30e86811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6562069ebef1097109d315e50cf9929a30e86811/comments", "author": {"login": "name1e5s", "id": 15176913, "node_id": "MDQ6VXNlcjE1MTc2OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/15176913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/name1e5s", "html_url": "https://github.com/name1e5s", "followers_url": "https://api.github.com/users/name1e5s/followers", "following_url": "https://api.github.com/users/name1e5s/following{/other_user}", "gists_url": "https://api.github.com/users/name1e5s/gists{/gist_id}", "starred_url": "https://api.github.com/users/name1e5s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/name1e5s/subscriptions", "organizations_url": "https://api.github.com/users/name1e5s/orgs", "repos_url": "https://api.github.com/users/name1e5s/repos", "events_url": "https://api.github.com/users/name1e5s/events{/privacy}", "received_events_url": "https://api.github.com/users/name1e5s/received_events", "type": "User", "site_admin": false}, "committer": {"login": "name1e5s", "id": 15176913, "node_id": "MDQ6VXNlcjE1MTc2OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/15176913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/name1e5s", "html_url": "https://github.com/name1e5s", "followers_url": "https://api.github.com/users/name1e5s/followers", "following_url": "https://api.github.com/users/name1e5s/following{/other_user}", "gists_url": "https://api.github.com/users/name1e5s/gists{/gist_id}", "starred_url": "https://api.github.com/users/name1e5s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/name1e5s/subscriptions", "organizations_url": "https://api.github.com/users/name1e5s/orgs", "repos_url": "https://api.github.com/users/name1e5s/repos", "events_url": "https://api.github.com/users/name1e5s/events{/privacy}", "received_events_url": "https://api.github.com/users/name1e5s/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b4109306c1d98a8e993ec2c748d286927dddbf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4109306c1d98a8e993ec2c748d286927dddbf5", "html_url": "https://github.com/rust-lang/rust/commit/1b4109306c1d98a8e993ec2c748d286927dddbf5"}], "stats": {"total": 305, "additions": 35, "deletions": 270}, "files": [{"sha": "9459bb7047f5c64e2f45b53c7c8787431bd349e4", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -252,11 +252,6 @@ pub fn expand_test_or_bench(\n                                         \"ignore\",\n                                         cx.expr_bool(sp, should_ignore(&cx.sess, &item)),\n                                     ),\n-                                    // allow_fail: true | false\n-                                    field(\n-                                        \"allow_fail\",\n-                                        cx.expr_bool(sp, should_fail(&cx.sess, &item)),\n-                                    ),\n                                     // compile_fail: true | false\n                                     field(\"compile_fail\", cx.expr_bool(sp, false)),\n                                     // no_run: true | false\n@@ -359,10 +354,6 @@ fn should_ignore(sess: &Session, i: &ast::Item) -> bool {\n     sess.contains_name(&i.attrs, sym::ignore)\n }\n \n-fn should_fail(sess: &Session, i: &ast::Item) -> bool {\n-    sess.contains_name(&i.attrs, sym::allow_fail)\n-}\n-\n fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match cx.sess.find_by_name(&i.attrs, sym::should_panic) {\n         Some(attr) => {"}, {"sha": "d7e88ae53c12b71263dbd95d06dfa4e484cec4c0", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -274,8 +274,6 @@ declare_features! (\n     (incomplete, adt_const_params, \"1.56.0\", Some(44580), None),\n     /// Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n-    /// Allows a test to fail without failing the whole suite.\n-    (active, allow_fail, \"1.19.0\", Some(46488), None),\n     /// Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n     /// Allows trait methods with arbitrary self types."}, {"sha": "810b58c316475e2786653b3debdd30e17de22114", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -403,7 +403,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     },\n \n     // Testing:\n-    gated!(allow_fail, Normal, template!(Word), WarnFollowing, experimental!(allow_fail)),\n     gated!(\n         test_runner, CrateLevel, template!(List: \"path\"), ErrorFollowing, custom_test_frameworks,\n         \"custom test frameworks are an unstable feature\","}, {"sha": "f5f944db5e90b23cbbd63a3a381beb997e566ff1", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -48,6 +48,8 @@ declare_features! (\n     (removed, advanced_slice_patterns, \"1.0.0\", Some(62254), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n     (removed, allocator, \"1.0.0\", None, None, None),\n+    /// Allows a test to fail without failing the whole suite.\n+    (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "920f55ad251a651ca3f484c6d8f2fc1eb2c0d2c2", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -47,7 +47,6 @@ pub struct ConsoleTestState {\n     pub passed: usize,\n     pub failed: usize,\n     pub ignored: usize,\n-    pub allowed_fail: usize,\n     pub filtered_out: usize,\n     pub measured: usize,\n     pub exec_time: Option<TestSuiteExecTime>,\n@@ -71,7 +70,6 @@ impl ConsoleTestState {\n             passed: 0,\n             failed: 0,\n             ignored: 0,\n-            allowed_fail: 0,\n             filtered_out: 0,\n             measured: 0,\n             exec_time: None,\n@@ -112,7 +110,6 @@ impl ConsoleTestState {\n                     TestResult::TrFailed => \"failed\".to_owned(),\n                     TestResult::TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n                     TestResult::TrIgnored => \"ignored\".to_owned(),\n-                    TestResult::TrAllowedFail => \"failed (allowed)\".to_owned(),\n                     TestResult::TrBench(ref bs) => fmt_bench_samples(bs),\n                     TestResult::TrTimedFail => \"failed (time limit exceeded)\".to_owned(),\n                 },\n@@ -126,7 +123,7 @@ impl ConsoleTestState {\n     }\n \n     fn current_test_count(&self) -> usize {\n-        self.passed + self.failed + self.ignored + self.measured + self.allowed_fail\n+        self.passed + self.failed + self.ignored + self.measured\n     }\n }\n \n@@ -191,7 +188,6 @@ fn handle_test_result(st: &mut ConsoleTestState, completed_test: CompletedTest)\n             st.not_failures.push((test, stdout));\n         }\n         TestResult::TrIgnored => st.ignored += 1,\n-        TestResult::TrAllowedFail => st.allowed_fail += 1,\n         TestResult::TrBench(bs) => {\n             st.metrics.insert_metric(\n                 test.name.as_slice(),"}, {"sha": "c089bfc4791b5e2bf9b8162c1e72b9bba4ff9d75", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -124,15 +124,6 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                 self.write_event(\"test\", desc.name.as_slice(), \"ignored\", exec_time, stdout, None)\n             }\n \n-            TestResult::TrAllowedFail => self.write_event(\n-                \"test\",\n-                desc.name.as_slice(),\n-                \"allowed_failure\",\n-                exec_time,\n-                stdout,\n-                None,\n-            ),\n-\n             TestResult::TrBench(ref bs) => {\n                 let median = bs.ns_iter_summ.median as usize;\n                 let deviation = (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize;\n@@ -172,14 +163,12 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n              \\\"event\\\": \\\"{}\\\", \\\n              \\\"passed\\\": {}, \\\n              \\\"failed\\\": {}, \\\n-             \\\"allowed_fail\\\": {}, \\\n              \\\"ignored\\\": {}, \\\n              \\\"measured\\\": {}, \\\n              \\\"filtered_out\\\": {}\",\n             if state.failed == 0 { \"ok\" } else { \"failed\" },\n             state.passed,\n-            state.failed + state.allowed_fail,\n-            state.allowed_fail,\n+            state.failed,\n             state.ignored,\n             state.measured,\n             state.filtered_out,"}, {"sha": "6fc24fefa842b9ba5c8f43f72274aee07bfba774", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -122,7 +122,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                     ))?;\n                 }\n \n-                TestResult::TrOk | TestResult::TrAllowedFail => {\n+                TestResult::TrOk => {\n                     self.write_message(&*format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\"/>\","}, {"sha": "4726ae864df7733a34551e7c4181426231dcc87f", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -49,10 +49,6 @@ impl<T: Write> PrettyFormatter<T> {\n         self.write_short_result(\"ignored\", term::color::YELLOW)\n     }\n \n-    pub fn write_allowed_fail(&mut self) -> io::Result<()> {\n-        self.write_short_result(\"FAILED (allowed)\", term::color::YELLOW)\n-    }\n-\n     pub fn write_time_failed(&mut self) -> io::Result<()> {\n         self.write_short_result(\"FAILED (time limit exceeded)\", term::color::RED)\n     }\n@@ -219,7 +215,6 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             TestResult::TrOk => self.write_ok()?,\n             TestResult::TrFailed | TestResult::TrFailedMsg(_) => self.write_failed()?,\n             TestResult::TrIgnored => self.write_ignored()?,\n-            TestResult::TrAllowedFail => self.write_allowed_fail()?,\n             TestResult::TrBench(ref bs) => {\n                 self.write_bench()?;\n                 self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;\n@@ -263,22 +258,10 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n \n-        let s = if state.allowed_fail > 0 {\n-            format!(\n-                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\",\n-                state.passed,\n-                state.failed + state.allowed_fail,\n-                state.allowed_fail,\n-                state.ignored,\n-                state.measured,\n-                state.filtered_out\n-            )\n-        } else {\n-            format!(\n-                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n-                state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n-            )\n-        };\n+        let s = format!(\n+            \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n+            state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n+        );\n \n         self.write_plain(&s)?;\n "}, {"sha": "12aca7cd9a42dd7af12b5cea216bd1e164a751a4", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -54,10 +54,6 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_short_result(\"i\", term::color::YELLOW)\n     }\n \n-    pub fn write_allowed_fail(&mut self) -> io::Result<()> {\n-        self.write_short_result(\"a\", term::color::YELLOW)\n-    }\n-\n     pub fn write_bench(&mut self) -> io::Result<()> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n@@ -207,7 +203,6 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n                 self.write_failed()\n             }\n             TestResult::TrIgnored => self.write_ignored(),\n-            TestResult::TrAllowedFail => self.write_allowed_fail(),\n             TestResult::TrBench(ref bs) => {\n                 if self.is_multithreaded {\n                     self.write_test_name(desc)?;\n@@ -244,22 +239,10 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n \n-        let s = if state.allowed_fail > 0 {\n-            format!(\n-                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\",\n-                state.passed,\n-                state.failed + state.allowed_fail,\n-                state.allowed_fail,\n-                state.ignored,\n-                state.measured,\n-                state.filtered_out\n-            )\n-        } else {\n-            format!(\n-                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n-                state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n-            )\n-        };\n+        let s = format!(\n+            \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n+            state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n+        );\n \n         self.write_plain(&s)?;\n "}, {"sha": "8c216a1e0e70e2d40206073610ac6b7be29a1cf1", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -19,7 +19,6 @@ pub enum TestResult {\n     TrFailed,\n     TrFailedMsg(String),\n     TrIgnored,\n-    TrAllowedFail,\n     TrBench(BenchSamples),\n     TrTimedFail,\n }\n@@ -42,8 +41,6 @@ pub fn calc_result<'a>(\n \n             if maybe_panic_str.map(|e| e.contains(msg)).unwrap_or(false) {\n                 TestResult::TrOk\n-            } else if desc.allow_fail {\n-                TestResult::TrAllowedFail\n             } else if let Some(panic_str) = maybe_panic_str {\n                 TestResult::TrFailedMsg(format!(\n                     r#\"panic did not contain expected string\n@@ -64,7 +61,6 @@ pub fn calc_result<'a>(\n         (&ShouldPanic::Yes, Ok(())) | (&ShouldPanic::YesWithMessage(_), Ok(())) => {\n             TestResult::TrFailedMsg(\"test did not panic as expected\".to_string())\n         }\n-        _ if desc.allow_fail => TestResult::TrAllowedFail,\n         _ => TestResult::TrFailed,\n     };\n \n@@ -90,11 +86,10 @@ pub fn get_result_from_exit_code(\n     time_opts: &Option<time::TestTimeOptions>,\n     exec_time: &Option<time::TestExecTime>,\n ) -> TestResult {\n-    let result = match (desc.allow_fail, code) {\n-        (_, TR_OK) => TestResult::TrOk,\n-        (true, TR_FAILED) => TestResult::TrAllowedFail,\n-        (false, TR_FAILED) => TestResult::TrFailed,\n-        (_, _) => TestResult::TrFailedMsg(format!(\"got unexpected return code {}\", code)),\n+    let result = match code {\n+        TR_OK => TestResult::TrOk,\n+        TR_FAILED => TestResult::TrFailed,\n+        _ => TestResult::TrFailedMsg(format!(\"got unexpected return code {}\", code)),\n     };\n \n     // If test is already failed (or allowed to fail), do not change the result."}, {"sha": "8aba486bbf48f3db32737877d00c9773bb57f2ca", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -62,7 +62,6 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n@@ -74,7 +73,6 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n@@ -94,7 +92,6 @@ pub fn do_not_run_ignored_tests() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -115,7 +112,6 @@ pub fn ignored_tests_result_in_ignored() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -140,7 +136,6 @@ fn test_should_panic() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -165,7 +160,6 @@ fn test_should_panic_good_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -195,7 +189,6 @@ fn test_should_panic_bad_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -229,7 +222,6 @@ fn test_should_panic_non_string_message_type() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -255,7 +247,6 @@ fn test_should_panic_but_succeeds() {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 should_panic,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n@@ -289,7 +280,6 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -324,7 +314,6 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type,\n@@ -363,7 +352,6 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type,\n@@ -476,7 +464,6 @@ pub fn exclude_should_panic_option() {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n@@ -500,7 +487,6 @@ pub fn exact_filter_match() {\n                     name: StaticTestName(name),\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n                     compile_fail: false,\n                     no_run: false,\n                     test_type: TestType::Unknown,\n@@ -589,7 +575,6 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n@@ -740,7 +725,6 @@ pub fn test_bench_no_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n@@ -762,7 +746,6 @@ pub fn test_bench_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n@@ -778,7 +761,6 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n@@ -788,7 +770,6 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n@@ -802,7 +783,6 @@ fn should_sort_failures_before_printing_them() {\n         passed: 0,\n         failed: 0,\n         ignored: 0,\n-        allowed_fail: 0,\n         filtered_out: 0,\n         measured: 0,\n         exec_time: None,"}, {"sha": "90aa5e8b4f9661cf9633b6b8b517e1e5c56b929f", "filename": "library/test/src/types.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -118,7 +118,6 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub should_panic: options::ShouldPanic,\n-    pub allow_fail: bool,\n     pub compile_fail: bool,\n     pub no_run: bool,\n     pub test_type: TestType,\n@@ -150,9 +149,6 @@ impl TestDesc {\n             }\n             options::ShouldPanic::No => {}\n         }\n-        if self.allow_fail {\n-            return Some(\"allow fail\");\n-        }\n         if self.compile_fail {\n             return Some(\"compile fail\");\n         }"}, {"sha": "f34580c107f7cc7e52ac7ea91373ee70fe94f02a", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -951,7 +951,6 @@ impl Tester for Collector {\n                 },\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,\n-                allow_fail: config.allow_fail,\n                 compile_fail: config.compile_fail,\n                 no_run,\n                 test_type: test::TestType::DocTest,"}, {"sha": "a40181352f6c03a19fc955b8ff8c21c85c2586e7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -847,7 +847,6 @@ crate struct LangString {\n     crate test_harness: bool,\n     crate compile_fail: bool,\n     crate error_codes: Vec<String>,\n-    crate allow_fail: bool,\n     crate edition: Option<Edition>,\n }\n \n@@ -869,7 +868,6 @@ impl Default for LangString {\n             test_harness: false,\n             compile_fail: false,\n             error_codes: Vec::new(),\n-            allow_fail: false,\n             edition: None,\n         }\n     }\n@@ -943,10 +941,6 @@ impl LangString {\n                         seen_rust_tags = !seen_other_tags;\n                     }\n                 }\n-                \"allow_fail\" => {\n-                    data.allow_fail = true;\n-                    seen_rust_tags = !seen_other_tags;\n-                }\n                 \"rust\" => {\n                     data.rust = true;\n                     seen_rust_tags = true;\n@@ -994,12 +988,6 @@ impl LangString {\n                             \"the code block will either not be tested if not marked as a rust one \\\n                              or will be run (which you might not want)\",\n                         ))\n-                    } else if s == \"allow-fail\" || s == \"allow_fail\" || s == \"allowfail\" {\n-                        Some((\n-                            \"allow_fail\",\n-                            \"the code block will either not be tested if not marked as a rust one \\\n-                             or will be run (which you might not want)\",\n-                        ))\n                     } else if s == \"test-harness\" || s == \"test_harness\" || s == \"testharness\" {\n                         Some((\n                             \"test_harness\","}, {"sha": "ea6575d179d86716a10891c598c41b9ca20a2e8a", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -70,7 +70,6 @@ fn test_lang_string_parse() {\n         compile_fail: true,\n         ..Default::default()\n     });\n-    t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..Default::default() });\n     t(LangString { original: \"no_run,example\".into(), no_run: true, ..Default::default() });\n     t(LangString {\n         original: \"sh,should_panic\".into(),"}, {"sha": "e2c778aa8650964a540d747c0ace08018a7bda80", "filename": "src/test/run-make-fulldeps/libtest-json/output-default.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -7,4 +7,4 @@\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n-{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "68eb00c297ea72a175bbd3c3b952572503d62478", "filename": "src/test/run-make-fulldeps/libtest-json/output-stdout-success.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -7,4 +7,4 @@\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n-{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "e955470148a16cba9c857c43d0877f5d9f99f539", "filename": "src/test/rustdoc-ui/check-attr-test.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -23,13 +23,6 @@ pub fn bar() {}\n /// ```\n pub fn foobar() {}\n \n-/// barfoo\n-///\n-/// ```allow-fail,allowfail,allOw_fail\n-/// boo\n-/// ```\n-pub fn barfoo() {}\n-\n /// b\n ///\n /// ```test-harness,testharness,tesT_harness"}, {"sha": "b1fa9edf0e4cb3cb6ed3c688e5a8ce3f50cb0c1e", "filename": "src/test/rustdoc-ui/check-attr-test.stderr", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -111,77 +111,41 @@ error: unknown attribute `nO_run`. Did you mean `no_run`?\n    |\n    = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n \n-error: unknown attribute `allow-fail`. Did you mean `allow_fail`?\n+error: unknown attribute `test-harness`. Did you mean `test_harness`?\n   --> $DIR/check-attr-test.rs:26:1\n    |\n-26 | / /// barfoo\n+26 | / /// b\n 27 | | ///\n-28 | | /// ```allow-fail,allowfail,allOw_fail\n+28 | | /// ```test-harness,testharness,tesT_harness\n 29 | | /// boo\n 30 | | /// ```\n    | |_______^\n    |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n+   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: unknown attribute `allowfail`. Did you mean `allow_fail`?\n+error: unknown attribute `testharness`. Did you mean `test_harness`?\n   --> $DIR/check-attr-test.rs:26:1\n    |\n-26 | / /// barfoo\n+26 | / /// b\n 27 | | ///\n-28 | | /// ```allow-fail,allowfail,allOw_fail\n+28 | | /// ```test-harness,testharness,tesT_harness\n 29 | | /// boo\n 30 | | /// ```\n    | |_______^\n    |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n+   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: unknown attribute `allOw_fail`. Did you mean `allow_fail`?\n+error: unknown attribute `tesT_harness`. Did you mean `test_harness`?\n   --> $DIR/check-attr-test.rs:26:1\n    |\n-26 | / /// barfoo\n+26 | / /// b\n 27 | | ///\n-28 | | /// ```allow-fail,allowfail,allOw_fail\n+28 | | /// ```test-harness,testharness,tesT_harness\n 29 | | /// boo\n 30 | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n-error: unknown attribute `test-harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr-test.rs:33:1\n-   |\n-33 | / /// b\n-34 | | ///\n-35 | | /// ```test-harness,testharness,tesT_harness\n-36 | | /// boo\n-37 | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n-\n-error: unknown attribute `testharness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr-test.rs:33:1\n-   |\n-33 | / /// b\n-34 | | ///\n-35 | | /// ```test-harness,testharness,tesT_harness\n-36 | | /// boo\n-37 | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n-\n-error: unknown attribute `tesT_harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr-test.rs:33:1\n-   |\n-33 | / /// b\n-34 | | ///\n-35 | | /// ```test-harness,testharness,tesT_harness\n-36 | | /// boo\n-37 | | /// ```\n    | |_______^\n    |\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "0b3f7bedda5cf9b442a625b2a97e7bb90bd71141", "filename": "src/test/rustdoc-ui/check-attr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -30,16 +30,6 @@ pub fn bar() {}\n /// ```\n pub fn foobar() {}\n \n-/// barfoo\n-//~^ ERROR\n-//~^^ ERROR\n-//~^^^ ERROR\n-///\n-/// ```allow-fail,allowfail,alLow_fail\n-/// boo\n-/// ```\n-pub fn barfoo() {}\n-\n /// b\n //~^ ERROR\n //~^^ ERROR"}, {"sha": "370b804c56c64a840e3cfd37d909b15342e13be3", "filename": "src/test/rustdoc-ui/check-attr.stderr", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -129,50 +129,8 @@ LL | | /// ```\n    |\n    = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n \n-error: unknown attribute `allow-fail`. Did you mean `allow_fail`?\n-  --> $DIR/check-attr.rs:33:1\n-   |\n-LL | / /// barfoo\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | /// boo\n-LL | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n-error: unknown attribute `allowfail`. Did you mean `allow_fail`?\n-  --> $DIR/check-attr.rs:33:1\n-   |\n-LL | / /// barfoo\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | /// boo\n-LL | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n-error: unknown attribute `alLow_fail`. Did you mean `allow_fail`?\n-  --> $DIR/check-attr.rs:33:1\n-   |\n-LL | / /// barfoo\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | /// boo\n-LL | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n error: unknown attribute `test-harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr.rs:43:1\n+  --> $DIR/check-attr.rs:33:1\n    |\n LL | / /// b\n LL | |\n@@ -186,7 +144,7 @@ LL | | /// ```\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr.rs:43:1\n+  --> $DIR/check-attr.rs:33:1\n    |\n LL | / /// b\n LL | |\n@@ -200,7 +158,7 @@ LL | | /// ```\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `teSt_harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr.rs:43:1\n+  --> $DIR/check-attr.rs:33:1\n    |\n LL | / /// b\n LL | |\n@@ -213,5 +171,5 @@ LL | | /// ```\n    |\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "287d4ccf18010a6e803c18fc14bc6935524e90b4", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b4109306c1d98a8e993ec2c748d286927dddbf5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4109306c1d98a8e993ec2c748d286927dddbf5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs?ref=1b4109306c1d98a8e993ec2c748d286927dddbf5", "patch": "@@ -1,8 +0,0 @@\n-// check that #[allow_fail] is feature-gated\n-\n-#[allow_fail] //~ ERROR the `#[allow_fail]` attribute is an experimental feature\n-fn ok_to_fail() {\n-    assert!(false);\n-}\n-\n-fn main() {}"}, {"sha": "76115fb9698332502d0722020bcd0fad7690dcac", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b4109306c1d98a8e993ec2c748d286927dddbf5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b4109306c1d98a8e993ec2c748d286927dddbf5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr?ref=1b4109306c1d98a8e993ec2c748d286927dddbf5", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: the `#[allow_fail]` attribute is an experimental feature\n-  --> $DIR/feature-gate-allow_fail.rs:3:1\n-   |\n-LL | #[allow_fail]\n-   | ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #46488 <https://github.com/rust-lang/rust/issues/46488> for more information\n-   = help: add `#![feature(allow_fail)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "29ce9f7c2e94fe3dd1d5f663cf9854e3c528e70c", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b4109306c1d98a8e993ec2c748d286927dddbf5/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4109306c1d98a8e993ec2c748d286927dddbf5/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=1b4109306c1d98a8e993ec2c748d286927dddbf5", "patch": "@@ -1,17 +0,0 @@\n-// run-pass\n-// compile-flags: --test\n-#![feature(allow_fail)]\n-#![feature(cfg_panic)]\n-\n-#[test]\n-#[allow_fail]\n-fn test1() {\n-    #[cfg(not(panic = \"abort\"))]\n-    panic!();\n-}\n-\n-#[test]\n-#[allow_fail]\n-fn test2() {\n-    assert!(true);\n-}"}, {"sha": "603b0b68a42b00ff74a0cddc987e8da20cb84592", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6562069ebef1097109d315e50cf9929a30e86811/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6562069ebef1097109d315e50cf9929a30e86811", "patch": "@@ -922,7 +922,6 @@ pub fn make_test_description<R: Read>(\n         name,\n         ignore,\n         should_panic,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: test::TestType::Unknown,"}]}