{"sha": "c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NGVhZmRjZDdhMjBiZmUxYWY3NjFkMDdhN2FkOGFhZjUyNTRkOTE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-05T22:27:23Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-08T14:54:04Z"}, "message": "Use id instead of name", "tree": {"sha": "9250e1e823c370752e733c246374b61a63df196a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9250e1e823c370752e733c246374b61a63df196a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91", "html_url": "https://github.com/rust-lang/rust/commit/c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbd7e46ee274d1128d3d3e0f7f681127fcb0e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbd7e46ee274d1128d3d3e0f7f681127fcb0e14", "html_url": "https://github.com/rust-lang/rust/commit/4bbd7e46ee274d1128d3d3e0f7f681127fcb0e14"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "4768cb4830b81aa5887db704a17aca5b7b65b408", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=c44eafdcd7a20bfe1af761d07a7ad8aaf5254d91", "patch": "@@ -1,12 +1,14 @@\n-use crate::utils::{is_type_diagnostic_item, match_def_path, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{\n+    is_type_diagnostic_item, match_def_path, path_to_local, path_to_local_id, paths, snippet, span_lint_and_sugg,\n+};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Local, PatKind, QPath, Stmt, StmtKind};\n+use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Local, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{symbol::sym, Span, Symbol};\n+use rustc_span::{symbol::sym, Span};\n use std::convert::TryInto;\n \n declare_clippy_lint! {\n@@ -45,8 +47,8 @@ enum VecInitKind {\n     WithCapacity(u64),\n }\n struct VecPushSearcher {\n+    local_id: HirId,\n     init: VecInitKind,\n-    name: Symbol,\n     lhs_is_local: bool,\n     lhs_span: Span,\n     err_span: Span,\n@@ -86,12 +88,12 @@ impl LateLintPass<'_> for VecInitThenPush {\n         if_chain! {\n             if !in_external_macro(cx.sess(), local.span);\n             if let Some(init) = local.init;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, _, ident, None) = local.pat.kind;\n+            if let PatKind::Binding(BindingAnnotation::Mutable, id, _, None) = local.pat.kind;\n             if let Some(init_kind) = get_vec_init_kind(cx, init);\n             then {\n                 self.searcher = Some(VecPushSearcher {\n+                        local_id: id,\n                         init: init_kind,\n-                        name: ident.name,\n                         lhs_is_local: true,\n                         lhs_span: local.ty.map_or(local.pat.span, |t| local.pat.span.to(t.span)),\n                         err_span: local.span,\n@@ -106,13 +108,12 @@ impl LateLintPass<'_> for VecInitThenPush {\n             if_chain! {\n                 if !in_external_macro(cx.sess(), expr.span);\n                 if let ExprKind::Assign(left, right, _) = expr.kind;\n-                if let ExprKind::Path(QPath::Resolved(_, path)) = left.kind;\n-                if let Some(name) = path.segments.get(0);\n+                if let Some(id) = path_to_local(left);\n                 if let Some(init_kind) = get_vec_init_kind(cx, right);\n                 then {\n                     self.searcher = Some(VecPushSearcher {\n+                        local_id: id,\n                         init: init_kind,\n-                        name: name.ident.name,\n                         lhs_is_local: false,\n                         lhs_span: left.span,\n                         err_span: expr.span,\n@@ -128,10 +129,8 @@ impl LateLintPass<'_> for VecInitThenPush {\n             if_chain! {\n                 if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind;\n                 if let ExprKind::MethodCall(path, _, [self_arg, _], _) = expr.kind;\n+                if path_to_local_id(self_arg, searcher.local_id);\n                 if path.ident.name.as_str() == \"push\";\n-                if let ExprKind::Path(QPath::Resolved(_, self_path)) = self_arg.kind;\n-                if let [self_name] = self_path.segments;\n-                if self_name.ident.name == searcher.name;\n                 then {\n                     self.searcher = Some(VecPushSearcher {\n                         found: searcher.found + 1,"}]}