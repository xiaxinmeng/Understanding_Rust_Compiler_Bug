{"sha": "1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjIzODJhNGY0YTVkYjM3ZjNmYzAzNGMxOGUxZDg5ZDRlMmUwMGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-26T10:58:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-26T10:58:12Z"}, "message": "Rollup merge of #75454 - ltratt:option_optimisation_guarantees, r=dtolnay\n\nExplicitly document the size guarantees that Option makes.\n\nTriggered by a discussion on wg-unsafe-code-guidelines about which layouts of `Option<T>` one can guarantee are optimised to a single pointer.\n\nCC @RalfJung", "tree": {"sha": "21eb5fe647cab3530631fde9f6d98a681bbcdcc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21eb5fe647cab3530631fde9f6d98a681bbcdcc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbx7ECRBK7hj4Ov3rIwAAdHIIAIuHj7WVbQonwkMPEkMhbyPu\nyNKrjUNzjCOcmltlvdRdfQsaPpyfVN/dwd6cr4FICeJD3BOUj9HmJdtZcb/MCr+o\nOSvZIJVK2ZL3b+aOKJTbrGVLoryhuZPB5yw96XQ9K5wSWnfsACgLCB+FCCWZ36aF\n1EpITDTyMDaWUt62asWxteF7IAiD9fW2QHNt6moxCyVOLiaEkmf9HFMfd4Rr/j1i\nnYc5sQDgiZiguQAY4xLT/p7c7yH+D+vuVoWLrmgkxZHT4JfytAncYt6Q85GagzgK\nZcRkrFZLMEeI1uloy4aDl/stUpsvEwwu0YxgyBujk1MTuPl/8x0Rejg/AhEo40E=\n=Xiph\n-----END PGP SIGNATURE-----\n", "payload": "tree 21eb5fe647cab3530631fde9f6d98a681bbcdcc8\nparent fd15e6180d9c48b4f1157e44cdaff6e901e5f854\nparent 9bac5774d7b452b2227c9fb77a4c6de3f432ee55\nauthor Ralf Jung <post@ralfj.de> 1601117892 +0200\ncommitter GitHub <noreply@github.com> 1601117892 +0200\n\nRollup merge of #75454 - ltratt:option_optimisation_guarantees, r=dtolnay\n\nExplicitly document the size guarantees that Option makes.\n\nTriggered by a discussion on wg-unsafe-code-guidelines about which layouts of `Option<T>` one can guarantee are optimised to a single pointer.\n\nCC @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "html_url": "https://github.com/rust-lang/rust/commit/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd15e6180d9c48b4f1157e44cdaff6e901e5f854", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd15e6180d9c48b4f1157e44cdaff6e901e5f854", "html_url": "https://github.com/rust-lang/rust/commit/fd15e6180d9c48b4f1157e44cdaff6e901e5f854"}, {"sha": "9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bac5774d7b452b2227c9fb77a4c6de3f432ee55", "html_url": "https://github.com/rust-lang/rust/commit/9bac5774d7b452b2227c9fb77a4c6de3f432ee55"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "0cfb4af59b956203b160c031fd7e05e7732847c5", "filename": "library/core/src/option.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "patch": "@@ -70,10 +70,23 @@\n //! }\n //! ```\n //!\n-//! This usage of [`Option`] to create safe nullable pointers is so\n-//! common that Rust does special optimizations to make the\n-//! representation of [`Option`]`<`[`Box<T>`]`>` a single pointer. Optional pointers\n-//! in Rust are stored as efficiently as any other pointer type.\n+//! # Representation\n+//!\n+//! Rust guarantees to optimize the following types `T` such that\n+//! [`Option<T>`] has the same size as `T`:\n+//!\n+//! * [`Box<U>`]\n+//! * `&U`\n+//! * `&mut U`\n+//! * `fn`, `extern \"C\" fn`\n+//! * [`num::NonZero*`]\n+//! * [`ptr::NonNull<U>`]\n+//! * `#[repr(transparent)]` struct around one of the types in this list.\n+//!\n+//! It is further guaranteed that, for the cases above, one can\n+//! [`mem::transmute`] from all valid values of `T` to `Option<T>` and\n+//! from `Some::<T>(_)` to `T` (but transmuting `None::<T>` to `T`\n+//! is undefined behaviour).\n //!\n //! # Examples\n //!"}]}