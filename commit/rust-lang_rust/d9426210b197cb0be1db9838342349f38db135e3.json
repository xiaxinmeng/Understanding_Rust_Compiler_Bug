{"sha": "d9426210b197cb0be1db9838342349f38db135e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDI2MjEwYjE5N2NiMGJlMWRiOTgzODM0MjM0OWYzOGRiMTM1ZTM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-01-25T01:22:24Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-01-25T05:15:39Z"}, "message": "Register LLVM passes with the correct LLVM pass manager.\n\nLLVM was upgraded to a new version in this commit:\n\nhttps://github.com/rust-lang/rust/commit/f9d4149c29e8b989fa3624993be379f380e48dcf\n\nwhich was part of this pull request:\n\nhttps://github.com/rust-lang/rust/issues/26025\n\nConsider the following two lines from that commit:\n\nhttps://github.com/rust-lang/rust/commit/f9d4149c29e8b989fa3624993be379f380e48dcf#diff-a3b24dbe2ea7c1981f9ac79f9745f40aL462\n\nhttps://github.com/rust-lang/rust/commit/f9d4149c29e8b989fa3624993be379f380e48dcf#diff-a3b24dbe2ea7c1981f9ac79f9745f40aL469\n\nThe purpose of these lines is to register LLVM passes. Prior to the that\ncommit, the passes being handled were assumed to be ModulePasses (a\nspecific type of LLVM pass) since they were being added to a ModulePass\nmanager. After that commit, both lines were refactored (presumably in an\nattempt to DRY out the code), but the ModulePasses were changed to be\nregistered to a FunctionPass manager. This change resulted in\nModulePasses being run, but a Function object was being passed as a\nparameter to the pass instead of a Module, which resulted in\nsegmentation faults.\n\nIn this commit, I changed relevant sections of the code to check the\ntype of the passes being added and register them to the appropriate pass\nmanager.\n\nCloses https://github.com/rust-lang/rust/issues/31067", "tree": {"sha": "7efee96cdd36487adb3a231d05d50c2300127de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7efee96cdd36487adb3a231d05d50c2300127de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9426210b197cb0be1db9838342349f38db135e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9426210b197cb0be1db9838342349f38db135e3", "html_url": "https://github.com/rust-lang/rust/commit/d9426210b197cb0be1db9838342349f38db135e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9426210b197cb0be1db9838342349f38db135e3/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289020b21c95a4c8f8578e51cdea79a2182515e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/289020b21c95a4c8f8578e51cdea79a2182515e6", "html_url": "https://github.com/rust-lang/rust/commit/289020b21c95a4c8f8578e51cdea79a2182515e6"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "0f85c4528d2e913cfec784f61754ff673a93addb", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9426210b197cb0be1db9838342349f38db135e3/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9426210b197cb0be1db9838342349f38db135e3/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d9426210b197cb0be1db9838342349f38db135e3", "patch": "@@ -461,6 +461,15 @@ pub enum ArchiveKind {\n     K_COFF,\n }\n \n+/// Represents the different LLVM passes Rust supports\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+#[repr(C)]\n+pub enum SupportedPassKind {\n+    Function,\n+    Module,\n+    Unsupported,\n+}\n+\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -2008,7 +2017,10 @@ extern {\n     pub fn LLVMIsAAllocaInst(value_ref: ValueRef) -> ValueRef;\n     pub fn LLVMIsAConstantInt(value_ref: ValueRef) -> ValueRef;\n \n-    pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: *const c_char) -> bool;\n+    pub fn LLVMRustPassKind(Pass: PassRef) -> SupportedPassKind;\n+    pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> PassRef;\n+    pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: PassRef);\n+\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,"}, {"sha": "06d32b8f6015d279510af3db360adb5a27954528", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9426210b197cb0be1db9838342349f38db135e3/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9426210b197cb0be1db9838342349f38db135e3/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=d9426210b197cb0be1db9838342349f38db135e3", "patch": "@@ -145,15 +145,19 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n     unsafe {\n         let pm = llvm::LLVMCreatePassManager();\n         llvm::LLVMRustAddAnalysisPasses(tm, pm, llmod);\n-        llvm::LLVMRustAddPass(pm, \"verify\\0\".as_ptr() as *const _);\n+        let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+        assert!(!pass.is_null());\n+        llvm::LLVMRustAddPass(pm, pass);\n \n         with_llvm_pmb(llmod, config, &mut |b| {\n             llvm::LLVMPassManagerBuilderPopulateLTOPassManager(b, pm,\n                 /* Internalize = */ False,\n                 /* RunInliner = */ True);\n         });\n \n-        llvm::LLVMRustAddPass(pm, \"verify\\0\".as_ptr() as *const _);\n+        let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+        assert!(!pass.is_null());\n+        llvm::LLVMRustAddPass(pm, pass);\n \n         time(sess.time_passes(), \"LTO passes\", ||\n              llvm::LLVMRunPassManager(pm, llmod));"}, {"sha": "bc007da7174a7e7cf8c1c71a4f68ddfc981de1b8", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d9426210b197cb0be1db9838342349f38db135e3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9426210b197cb0be1db9838342349f38db135e3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d9426210b197cb0be1db9838342349f38db135e3", "patch": "@@ -446,9 +446,22 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n \n         // If we're verifying or linting, add them to the function pass\n         // manager.\n-        let addpass = |pass: &str| {\n-            let pass = CString::new(pass).unwrap();\n-            llvm::LLVMRustAddPass(fpm, pass.as_ptr())\n+        let addpass = |pass_name: &str| {\n+            let pass_name = CString::new(pass_name).unwrap();\n+            let pass = llvm::LLVMRustFindAndCreatePass(pass_name.as_ptr());\n+            if pass.is_null() {\n+                return false;\n+            }\n+            let pass_manager = match llvm::LLVMRustPassKind(pass) {\n+                llvm::SupportedPassKind::Function => fpm,\n+                llvm::SupportedPassKind::Module => mpm,\n+                llvm::SupportedPassKind::Unsupported => {\n+                    cgcx.handler.err(\"Encountered LLVM pass kind we can't handle\");\n+                    return true\n+                },\n+            };\n+            llvm::LLVMRustAddPass(pass_manager, pass);\n+            true\n         };\n \n         if !config.no_verify { assert!(addpass(\"verify\")); }"}, {"sha": "d6985719acbfad3050137d45fe774a01b86f3a55", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d9426210b197cb0be1db9838342349f38db135e3/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d9426210b197cb0be1db9838342349f38db135e3/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=d9426210b197cb0be1db9838342349f38db135e3", "patch": "@@ -58,19 +58,43 @@ LLVMInitializePasses() {\n   initializeTarget(Registry);\n }\n \n-extern \"C\" bool\n-LLVMRustAddPass(LLVMPassManagerRef PM, const char *PassName) {\n-    PassManagerBase *pm = unwrap(PM);\n \n+enum class SupportedPassKind {\n+  Function,\n+  Module,\n+  Unsupported\n+};\n+\n+extern \"C\" Pass*\n+LLVMRustFindAndCreatePass(const char *PassName) {\n     StringRef SR(PassName);\n     PassRegistry *PR = PassRegistry::getPassRegistry();\n \n     const PassInfo *PI = PR->getPassInfo(SR);\n     if (PI) {\n-        pm->add(PI->createPass());\n-        return true;\n+        return PI->createPass();\n     }\n-    return false;\n+    return NULL;\n+}\n+\n+extern \"C\" SupportedPassKind\n+LLVMRustPassKind(Pass *pass) {\n+    assert(pass);\n+    PassKind passKind = pass->getPassKind();\n+    if (passKind == PT_Module) {\n+        return SupportedPassKind::Module;\n+    } else if (passKind == PT_Function) {\n+        return SupportedPassKind::Function;\n+    } else {\n+        return SupportedPassKind::Unsupported;\n+    }\n+}\n+\n+extern \"C\" void\n+LLVMRustAddPass(LLVMPassManagerRef PM, Pass *pass) {\n+    assert(pass);\n+    PassManagerBase *pm = unwrap(PM);\n+    pm->add(pass);\n }\n \n extern \"C\" LLVMTargetMachineRef"}]}