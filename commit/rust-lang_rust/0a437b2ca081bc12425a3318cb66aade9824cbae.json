{"sha": "0a437b2ca081bc12425a3318cb66aade9824cbae", "node_id": "C_kwDOAAsO6NoAKDBhNDM3YjJjYTA4MWJjMTI0MjVhMzMxOGNiNjZhYWRlOTgyNGNiYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T16:47:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T16:47:17Z"}, "message": "Auto merge of #97283 - jackh726:rollup-ga84p7n, r=jackh726\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97043 (Move some tests to more reasonable directories)\n - #97206 (Do leak check after function pointer coercion)\n - #97275 (small change)\n - #97277 (Avoid accidentally enabling unstable features in compilers (take 2))\n - #97280 (Quote replace target in bootstrap configure)\n\nFailed merges:\n\n - #97214 (Finish bumping stage0)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e5bb27cf96f011cdd4f12b3fbc5471bb1241875d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5bb27cf96f011cdd4f12b3fbc5471bb1241875d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a437b2ca081bc12425a3318cb66aade9824cbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a437b2ca081bc12425a3318cb66aade9824cbae", "html_url": "https://github.com/rust-lang/rust/commit/0a437b2ca081bc12425a3318cb66aade9824cbae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a437b2ca081bc12425a3318cb66aade9824cbae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb4dc4672b4d80509db4c0572ae8ceeaf7d4a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb4dc4672b4d80509db4c0572ae8ceeaf7d4a1c", "html_url": "https://github.com/rust-lang/rust/commit/4bb4dc4672b4d80509db4c0572ae8ceeaf7d4a1c"}, {"sha": "b392cdf7de4cd8413f24ce77bf04dd646a60d79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b392cdf7de4cd8413f24ce77bf04dd646a60d79d", "html_url": "https://github.com/rust-lang/rust/commit/b392cdf7de4cd8413f24ce77bf04dd646a60d79d"}], "stats": {"total": 548, "additions": 287, "deletions": 261}, "files": [{"sha": "11c893a7cb6d93eee868cadd7de422348582d692", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1442,6 +1442,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// the message in `secondary_span` as the primary label, and apply the message that would\n     /// otherwise be used for the primary label on the `secondary_span` `Span`. This applies on\n     /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n+    #[tracing::instrument(\n+        level = \"debug\",\n+        skip(self, diag, secondary_span, swap_secondary_and_primary, force_label)\n+    )]\n     pub fn note_type_err(\n         &self,\n         diag: &mut Diagnostic,\n@@ -1453,7 +1457,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         force_label: bool,\n     ) {\n         let span = cause.span(self.tcx);\n-        debug!(\"note_type_err cause={:?} values={:?}, terr={:?}\", cause, values, terr);\n \n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n@@ -1621,9 +1624,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        // Ignore msg for object safe coercion\n-        // since E0038 message will be printed\n         match terr {\n+            // Ignore msg for object safe coercion\n+            // since E0038 message will be printed\n             TypeError::ObjectUnsafeCoercion(_) => {}\n             _ => {\n                 let mut label_or_note = |span: Span, msg: &str| {\n@@ -1774,6 +1777,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // It reads better to have the error origin as the final\n         // thing.\n         self.note_error_origin(diag, cause, exp_found, terr);\n+\n+        debug!(?diag);\n     }\n \n     fn suggest_tuple_pattern("}, {"sha": "a6c14ea0de343c636fb8a5e3fab3e7af8818e4a4", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -135,11 +135,10 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ArgCount => write!(f, \"incorrect number of function parameters\"),\n             FieldMisMatch(adt, field) => write!(f, \"field type mismatch: {}.{}\", adt, field),\n             RegionsDoesNotOutlive(..) => write!(f, \"lifetime mismatch\"),\n-            RegionsInsufficientlyPolymorphic(br, _) => write!(\n-                f,\n-                \"expected bound lifetime parameter{}, found concrete lifetime\",\n-                br_string(br)\n-            ),\n+            // Actually naming the region here is a bit confusing because context is lacking\n+            RegionsInsufficientlyPolymorphic(..) => {\n+                write!(f, \"one type is more general than the other\")\n+            }\n             RegionsOverlyPolymorphic(br, _) => write!(\n                 f,\n                 \"expected concrete lifetime, found bound lifetime parameter{}\","}, {"sha": "9df86c6ada134b9efdc310ceea3f07949cffba6c", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -151,6 +151,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// * From each pre-binding block to the next pre-binding block.\n     /// * From each otherwise block to the next pre-binding block.\n+    #[tracing::instrument(level = \"debug\", skip(self, arms))]\n     pub(crate) fn match_expr(\n         &mut self,\n         destination: Place<'tcx>,"}, {"sha": "59750d5d0b88ecacb62654868ded5bc5b406db40", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -75,6 +75,7 @@ impl<'tcx> Cx<'tcx> {\n                         };\n \n                         let mut pattern = self.pattern_from_hir(local.pat);\n+                        debug!(?pattern);\n \n                         if let Some(ty) = &local.ty {\n                             if let Some(&user_ty) ="}, {"sha": "bd17df60cd78896abc4b8f4520642e464f95c240", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -98,6 +98,7 @@ impl<'tcx> Cx<'tcx> {\n         }\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Pat<'tcx> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n             Node::Pat(p) | Node::Binding(p) => p,"}, {"sha": "3632e14385fe95cdd3e854ab7447e51bdd129e1d", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -56,6 +56,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut all_arms_diverge = Diverges::WarnedAlways;\n \n         let expected = orig_expected.adjust_for_branches(self);\n+        debug!(?expected);\n \n         let mut coercion = {\n             let coerce_first = match expected {\n@@ -127,6 +128,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(&arm.body),\n                 arm_ty,\n                 Some(&mut |err: &mut Diagnostic| {\n+                    let Some(ret) = self.ret_type_span else {\n+                        return;\n+                    };\n+                    let Expectation::IsLast(stmt) = orig_expected else {\n+                        return\n+                    };\n                     let can_coerce_to_return_ty = match self.ret_coercion.as_ref() {\n                         Some(ret_coercion) if self.in_tail_expr => {\n                             let ret_ty = ret_coercion.borrow().expected_ty();\n@@ -138,38 +145,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                         _ => false,\n                     };\n-                    if let (Expectation::IsLast(stmt), Some(ret), true) =\n-                        (orig_expected, self.ret_type_span, can_coerce_to_return_ty)\n-                    {\n-                        let semi_span = expr.span.shrink_to_hi().with_hi(stmt.hi());\n-                        let mut ret_span: MultiSpan = semi_span.into();\n-                        ret_span.push_span_label(\n-                            expr.span,\n-                            \"this could be implicitly returned but it is a statement, not a \\\n-                                tail expression\"\n-                                .to_owned(),\n-                        );\n-                        ret_span.push_span_label(\n-                            ret,\n-                            \"the `match` arms can conform to this return type\".to_owned(),\n-                        );\n-                        ret_span.push_span_label(\n-                            semi_span,\n-                            \"the `match` is a statement because of this semicolon, consider \\\n-                                removing it\"\n-                                .to_owned(),\n-                        );\n-                        err.span_note(\n-                            ret_span,\n-                            \"you might have meant to return the `match` expression\",\n-                        );\n-                        err.tool_only_span_suggestion(\n-                            semi_span,\n-                            \"remove this semicolon\",\n-                            String::new(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                    if !can_coerce_to_return_ty {\n+                        return;\n                     }\n+\n+                    let semi_span = expr.span.shrink_to_hi().with_hi(stmt.hi());\n+                    let mut ret_span: MultiSpan = semi_span.into();\n+                    ret_span.push_span_label(\n+                        expr.span,\n+                        \"this could be implicitly returned but it is a statement, not a \\\n+                            tail expression\"\n+                            .to_owned(),\n+                    );\n+                    ret_span.push_span_label(\n+                        ret,\n+                        \"the `match` arms can conform to this return type\".to_owned(),\n+                    );\n+                    ret_span.push_span_label(\n+                        semi_span,\n+                        \"the `match` is a statement because of this semicolon, consider \\\n+                            removing it\"\n+                            .to_owned(),\n+                    );\n+                    err.span_note(\n+                        ret_span,\n+                        \"you might have meant to return the `match` expression\",\n+                    );\n+                    err.tool_only_span_suggestion(\n+                        semi_span,\n+                        \"remove this semicolon\",\n+                        String::new(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }),\n                 false,\n             );\n@@ -199,7 +206,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // We won't diverge unless the scrutinee or all arms diverge.\n         self.diverges.set(scrut_diverges | all_arms_diverge);\n \n-        coercion.complete(self)\n+        let match_ty = coercion.complete(self);\n+        debug!(?match_ty);\n+        match_ty\n     }\n \n     fn get_appropriate_arm_semicolon_removal_span("}, {"sha": "6d540bf7e4f4b225872bb2819dff9be7c87b6191", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -737,14 +737,27 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         F: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,\n         G: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,\n     {\n-        if let ty::FnPtr(fn_ty_b) = b.kind()\n-            && let (hir::Unsafety::Normal, hir::Unsafety::Unsafe) =\n-                (fn_ty_a.unsafety(), fn_ty_b.unsafety())\n-        {\n-            let unsafe_a = self.tcx.safe_to_unsafe_fn_ty(fn_ty_a);\n-            return self.unify_and(unsafe_a, b, to_unsafe);\n-        }\n-        self.unify_and(a, b, normal)\n+        self.commit_unconditionally(|snapshot| {\n+            let result = if let ty::FnPtr(fn_ty_b) = b.kind()\n+                && let (hir::Unsafety::Normal, hir::Unsafety::Unsafe) =\n+                    (fn_ty_a.unsafety(), fn_ty_b.unsafety())\n+            {\n+                let unsafe_a = self.tcx.safe_to_unsafe_fn_ty(fn_ty_a);\n+                self.unify_and(unsafe_a, b, to_unsafe)\n+            } else {\n+                self.unify_and(a, b, normal)\n+            };\n+\n+            // FIXME(#73154): This is a hack. Currently LUB can generate\n+            // unsolvable constraints. Additionally, it returns `a`\n+            // unconditionally, even when the \"LUB\" is `b`. In the future, we\n+            // want the coerced type to be the actual supertype of these two,\n+            // but for now, we want to just error to ensure we don't lock\n+            // ourselves into a specific behavior with NLL.\n+            self.leak_check(false, snapshot)?;\n+\n+            result\n+        })\n     }\n \n     fn coerce_from_fn_pointer(\n@@ -1133,8 +1146,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (adjustments, target) = self.register_infer_ok_obligations(ok);\n                     self.apply_adjustments(new, adjustments);\n                     debug!(\n-                        \"coercion::try_find_coercion_lub: was able to coerce from previous type {:?} to new type {:?}\",\n-                        prev_ty, new_ty,\n+                        \"coercion::try_find_coercion_lub: was able to coerce from new type {:?} to previous type {:?} ({:?})\",\n+                        new_ty, prev_ty, target\n                     );\n                     return Ok(target);\n                 }\n@@ -1190,15 +1203,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             Ok(ok) => {\n-                debug!(\n-                    \"coercion::try_find_coercion_lub: was able to coerce previous type {:?} to new type {:?}\",\n-                    prev_ty, new_ty,\n-                );\n                 let (adjustments, target) = self.register_infer_ok_obligations(ok);\n                 for expr in exprs {\n                     let expr = expr.as_coercion_site();\n                     self.apply_adjustments(expr, adjustments.clone());\n                 }\n+                debug!(\n+                    \"coercion::try_find_coercion_lub: was able to coerce previous type {:?} to new type {:?} ({:?})\",\n+                    prev_ty, new_ty, target\n+                );\n                 Ok(target)\n             }\n         }\n@@ -1430,6 +1443,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 })\n         };\n \n+        debug!(?result);\n         match result {\n             Ok(v) => {\n                 self.final_ty = Some(v);\n@@ -1520,7 +1534,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     augment_error(&mut err);\n                 }\n \n-                if let Some(expr) = expression {\n+                let is_insufficiently_polymorphic =\n+                    matches!(coercion_error, TypeError::RegionsInsufficientlyPolymorphic(..));\n+\n+                if !is_insufficiently_polymorphic && let Some(expr) = expression {\n                     fcx.emit_coerce_suggestions(\n                         &mut err,\n                         expr,"}, {"sha": "d0d2841209a6ea370573e3de043f10ab0927f342", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -129,6 +129,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// N.B., this code relies on `self.diverges` to be accurate. In particular, assignments to `!`\n     /// will be permitted if the diverges flag is currently \"always\".\n+    #[tracing::instrument(level = \"debug\", skip(self, expr, expected_ty_expr, allow_two_phase))]\n     pub fn demand_coerce_diag(\n         &self,\n         expr: &hir::Expr<'tcx>,\n@@ -150,7 +151,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n         let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e.clone());\n \n-        self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected, expected_ty_expr, Some(e));\n+        let is_insufficiently_polymorphic =\n+            matches!(e, TypeError::RegionsInsufficientlyPolymorphic(..));\n+\n+        // FIXME(#73154): For now, we do leak check when coercing function\n+        // pointers in typeck, instead of only during borrowck. This can lead\n+        // to these `RegionsInsufficientlyPolymorphic` errors that aren't helpful.\n+        if !is_insufficiently_polymorphic {\n+            self.emit_coerce_suggestions(\n+                &mut err,\n+                expr,\n+                expr_ty,\n+                expected,\n+                expected_ty_expr,\n+                Some(e),\n+            );\n+        }\n \n         (expected, Some(err))\n     }"}, {"sha": "1def9fe0972025c901be03aa7ed6f75e3acf0d8c", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -2108,7 +2108,7 @@ pub fn id() -> u32 {\n \n /// A trait for implementing arbitrary return types in the `main` function.\n ///\n-/// The C-main function only supports to return integers as return type.\n+/// The C-main function only supports returning integers.\n /// So, every type implementing the `Termination` trait has to be converted\n /// to an integer.\n ///"}, {"sha": "6d46ea26e6a0b3e046632c8a2fe22b81a08b6752", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1192,7 +1192,6 @@ def bootstrap(help_triggered):\n     env = os.environ.copy()\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n-    env[\"RUSTC_BOOTSTRAP\"] = '1'\n     if build.rustc_commit is not None:\n         env[\"BOOTSTRAP_DOWNLOAD_RUSTC\"] = '1'\n     run(args, env=env, verbose=build.verbose, is_bootstrap=True)"}, {"sha": "761bd66b5057bb931ee1b0ac9d131a8da2855cb8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1226,6 +1226,14 @@ impl<'a> Builder<'a> {\n         // this), as well as #63012 which is the tracking issue for this\n         // feature on the rustc side.\n         cargo.arg(\"-Zbinary-dep-depinfo\");\n+        match mode {\n+            Mode::ToolBootstrap => {\n+                // Restrict the allowed features to those passed by rustbuild, so we don't depend on nightly accidentally.\n+                // HACK: because anyhow does feature detection in build.rs, we need to allow the backtrace feature too.\n+                rustflags.arg(\"-Zallow-features=binary-dep-depinfo,backtrace\");\n+            }\n+            Mode::Std | Mode::Rustc | Mode::ToolStd | Mode::Codegen | Mode::ToolRustc => {}\n+        }\n \n         cargo.arg(\"-j\").arg(self.jobs().to_string());\n         // Remove make-related flags to ensure Cargo can correctly set things up"}, {"sha": "2fc036082cba6991617941887a4991e7e90a4f66", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -407,7 +407,7 @@ def set(key, value):\n         configured_targets.append(target)\n for target in configured_targets:\n     targets[target] = sections['target'][:]\n-    targets[target][0] = targets[target][0].replace(\"x86_64-unknown-linux-gnu\", target)\n+    targets[target][0] = targets[target][0].replace(\"x86_64-unknown-linux-gnu\", \"'{}'\".format(target))\n \n \n def is_number(value):"}, {"sha": "be6655ddb61d0883bbe5396f99b89a5b424d8d30", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -881,6 +881,10 @@ impl Step for RustcBook {\n         if self.validate {\n             cmd.arg(\"--validate\");\n         }\n+        if !builder.unstable_features() {\n+            // We need to validate nightly features, even on the stable channel.\n+            cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        }\n         // If the lib directories are in an unusual location (changed in\n         // config.toml), then this needs to explicitly update the dylib search\n         // path."}, {"sha": "b79a2973082791fd96eb6c021381437f738590be", "filename": "src/test/ui/associated-types/issue-20825-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825-2.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-20825-2.rs"}, {"sha": "516c304d8b350e9d5184d1cf652c143d4118f136", "filename": "src/test/ui/associated-types/issue-20825.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-20825.rs"}, {"sha": "be2bbd448007b605ce3ea4e011a8ca592d16cf02", "filename": "src/test/ui/associated-types/issue-20825.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20825.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-20825.stderr"}, {"sha": "73b0a3173644772a32c111083e5a00e6250112c2", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.nll.stderr", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.nll.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,37 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:9:12\n+  --> $DIR/placeholder-pattern-fail.rs:9:47\n    |\n LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                                               ^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n               found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n \n-error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:9:12\n-   |\n-LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n-              found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/placeholder-pattern-fail.rs:14:13\n-   |\n-LL | fn simple1<'c>(x: (&'c i32,)) {\n-   |            -- lifetime `'c` defined here\n-LL |     let _x: (&'static i32,) = x;\n-   |             ^^^^^^^^^^^^^^^ type annotation requires that `'c` must outlive `'static`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/placeholder-pattern-fail.rs:19:12\n-   |\n-LL | fn simple2<'c>(x: (&'c i32,)) {\n-   |            -- lifetime `'c` defined here\n-LL |     let _: (&'static i32,) = x;\n-   |            ^^^^^^^^^^^^^^^ type annotation requires that `'c` must outlive `'static`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/hrtb-exists-forall-fn.rs:17:12\n+  --> $DIR/hrtb-exists-forall-fn.rs:17:34\n    |\n LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |            ^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                                  ^^^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'b> fn(&'b u32)`\n               found fn pointer `fn(&u32)`"}, {"sha": "54ec44a1cf4e519ce592a3d2abd23b68b922528f", "filename": "src/test/ui/hygiene/issue-32922.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhygiene%2Fissue-32922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fhygiene%2Fissue-32922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-32922.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-32922.rs"}, {"sha": "3611a956836ce063303b65ff1bc4eb4664aadb2e", "filename": "src/test/ui/impl-trait/issue-46959.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-46959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-46959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-46959.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-46959.rs"}, {"sha": "4448f9326cb94d6071441a6fa5bb62c83321711d", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.baseleak.stderr", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.baseleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.baseleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.baseleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,12 +1,15 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr-noteq1.rs:11:14\n+  --> $DIR/old-lub-glb-hr-noteq1.rs:17:14\n    |\n LL |       let z = match 22 {\n    |  _____________-\n LL | |         0 => x,\n    | |              - this is found to be of type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n LL | |         _ => y,\n    | |              ^ one type is more general than the other\n+LL | |\n+...  |\n+LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |", "previous_filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.stderr"}, {"sha": "4448f9326cb94d6071441a6fa5bb62c83321711d", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.basenoleak.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.basenoleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.basenoleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.basenoleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/old-lub-glb-hr-noteq1.rs:17:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => x,\n+   | |              - this is found to be of type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+LL | |         _ => y,\n+   | |              ^ one type is more general than the other\n+LL | |\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+              found fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4448f9326cb94d6071441a6fa5bb62c83321711d", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nllleak.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/old-lub-glb-hr-noteq1.rs:17:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => x,\n+   | |              - this is found to be of type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+LL | |         _ => y,\n+   | |              ^ one type is more general than the other\n+LL | |\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+              found fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0d61311350e8c5e2b7c8592e3111b1b6a9907000", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nllnoleak.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllnoleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllnoleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllnoleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-hr-noteq1.rs:11:14\n+  --> $DIR/old-lub-glb-hr-noteq1.rs:17:14\n    |\n LL |         _ => y,\n    |              ^ one type is more general than the other", "previous_filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nll.stderr"}, {"sha": "2cf123cce7ffd001e6d1bb4f5b5192b30b57fe31", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -2,13 +2,23 @@\n // general than the other. Test the case where the more general type (`x`) is the first\n // match arm specifically.\n \n+// revisions: baseleak basenoleak nllleak nllnoleak\n+// ignore-compare-mode-nll\n+//[nllleak] compile-flags: -Zborrowck=mir\n+//[nllnoleak] compile-flags: -Zborrowck=mir -Zno-leak-check\n+//[basenoleak] compile-flags:-Zno-leak-check\n+\n fn foo(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n     // The two types above are not equivalent. With the older LUB/GLB\n     // algorithm, this may have worked (I don't remember), but now it\n     // doesn't because we require equality.\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR `match` arms have incompatible types\n+        _ => y,\n+        //[baseleak]~^ ERROR `match` arms have incompatible types\n+        //[nllleak]~^^ ERROR `match` arms have incompatible types\n+        //[basenoleak]~^^^ ERROR `match` arms have incompatible types\n+        //[nllnoleak]~^^^^ ERROR mismatched types\n     };\n }\n "}, {"sha": "1c9ce115e961e11b5499afdd887203f3ab4676af", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.baseleak.stderr", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.baseleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.baseleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.baseleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,12 +1,15 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr-noteq2.rs:21:14\n+  --> $DIR/old-lub-glb-hr-noteq2.rs:28:14\n    |\n LL |       let z = match 22 {\n    |  _____________-\n LL | |         0 => y,\n    | |              - this is found to be of type `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n LL | |         _ => x,\n    | |              ^ one type is more general than the other\n+LL | |\n+LL | |\n+LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |", "previous_filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.stderr"}, {"sha": "1c9ce115e961e11b5499afdd887203f3ab4676af", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.basenoleak.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.basenoleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.basenoleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.basenoleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/old-lub-glb-hr-noteq2.rs:28:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => y,\n+   | |              - this is found to be of type `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+LL | |         _ => x,\n+   | |              ^ one type is more general than the other\n+LL | |\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+              found fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1c9ce115e961e11b5499afdd887203f3ab4676af", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.nllleak.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.nllleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.nllleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.nllleak.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/old-lub-glb-hr-noteq2.rs:28:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => y,\n+   | |              - this is found to be of type `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+LL | |         _ => x,\n+   | |              ^ one type is more general than the other\n+LL | |\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+              found fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d49b85ce05ef7e3ee90fc24a7aa045406f471726", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -2,23 +2,33 @@\n // one is more general than the other. Test the case where the more general type\n // (`x`) is the second match arm specifically.\n //\n-// FIXME(#73154) Skip for compare-mode because the pure NLL checker accepts this\n-// test. (Note that it still errors in old-lub-glb-hr-noteq1.rs). What happens\n+// FIXME(#73154) Pure NLL checker without leak check accepts this test.\n+// (Note that it still errors in old-lub-glb-hr-noteq1.rs). What happens\n // is that, due to the ordering of the match arms, we pick the correct \"more\n // general\" fn type, and we ignore the errors from the non-NLL type checker that\n // requires equality. The NLL type checker only requires a subtyping\n-// relationship, and that holds.\n-//\n+// relationship, and that holds. To unblock landing NLL - and ensure that we can\n+// choose to make this always in error in the future - we perform the leak check\n+// after coercing a function pointer.\n+\n+// revisions: baseleak basenoleak nllleak nllnoleak\n // ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n+//[nllleak] compile-flags: -Zborrowck=mir\n+//[nllnoleak] compile-flags: -Zborrowck=mir -Zno-leak-check\n+//[basenoleak] compile-flags:-Zno-leak-check\n+\n+//[nllnoleak] check-pass\n \n fn foo(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n     // The two types above are not equivalent. With the older LUB/GLB\n     // algorithm, this may have worked (I don't remember), but now it\n     // doesn't because we require equality.\n     let z = match 22 {\n         0 => y,\n-        _ => x, //~ ERROR `match` arms have incompatible types\n+        _ => x,\n+        //[baseleak]~^ ERROR `match` arms have incompatible types\n+        //[nllleak]~^^ ERROR `match` arms have incompatible types\n+        //[basenoleak]~^^^ ERROR `match` arms have incompatible types\n     };\n }\n "}, {"sha": "0d6669146a625ca280157741539bc3133da112c4", "filename": "src/test/ui/macros/issue-33185.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fmacros%2Fissue-33185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fmacros%2Fissue-33185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-33185.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-33185.rs"}, {"sha": "ef3b114a5fa2a084d3b19222262cc88858540514", "filename": "src/test/ui/match/issue-27021.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fmatch%2Fissue-27021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fmatch%2Fissue-27021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-27021.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-27021.rs"}, {"sha": "d1aa56b915ba3acf8c4441ba758c6a06eafb51f7", "filename": "src/test/ui/pattern/issue-27320.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fpattern%2Fissue-27320.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fpattern%2Fissue-27320.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-27320.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-27320.rs"}, {"sha": "b10f6d57255de148a594170c19e6c8caeaab57ce", "filename": "src/test/ui/process/issue-13304.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fprocess%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fprocess%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fissue-13304.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-13304.rs"}, {"sha": "b8b9de627af309279e0fea8582831dccd45662b2", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.base.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.base.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -8,7 +8,7 @@ LL |     *x = *y;\n    |          ^^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:7\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:19:7\n    |\n LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |                     ---------          --------- these two types are declared with different lifetimes...\n@@ -17,13 +17,13 @@ LL |     a(x, y);\n    |       ^ ...but data from `y` flows into `x` here\n \n error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:28:43\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:26:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8a4b313264654f553099cce145c9106f1004ee97", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,50 +1,12 @@\n-error: lifetime may not live long enough\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:12:5\n-   |\n-LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     // Illegal now because there is no `'b:'a` declaration.\n-LL |     *x = *y;\n-   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:5\n-   |\n-LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n-   |      -- -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-...\n-LL |     a(x, y);\n-   |     ^^^^^^^ argument requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to `&isize`\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:28:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n-\n error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:28:12\n+  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:26:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                                           ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "61ae1cc3fad6ae66efd062fd1d606a5a2d33d77b", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -11,23 +11,20 @@ fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n     *x = *y;\n     //[base]~^ ERROR E0623\n-    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n     a(x, y);\n     //[base]~^ ERROR lifetime mismatch [E0623]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n     let _: fn(&mut &isize, &mut &isize) = a;\n     //~^ ERROR mismatched types [E0308]\n-    //[nll]~^^ ERROR mismatched types [E0308]\n }\n \n fn e() {"}, {"sha": "062411e6f6890de64892b6bbe34894ddc922dad4", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.base.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.base.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -8,7 +8,7 @@ LL |     *x = *y;\n    |          ^^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:16:10\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:15:10\n    |\n LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |                                             ---------          ---------\n@@ -19,7 +19,7 @@ LL |     *z = *y;\n    |          ^^ ...but data from `y` flows into `z` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:7\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:21:7\n    |\n LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n    |                         ---------          --------- these two types are declared with different lifetimes...\n@@ -28,13 +28,13 @@ LL |     a(x, y, z);\n    |       ^ ...but data from `y` flows into `x` here\n \n error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:56\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:28:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |                                                        ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n+                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f304c69d44b5d991ec416d6910f4d08e8a323f7c", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 4, "deletions": 51, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,59 +1,12 @@\n-error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:13:5\n-   |\n-LL | fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     // Illegal now because there is no `'b:'a` declaration.\n-LL |     *x = *y;\n-   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:5\n-   |\n-LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n-   |      -- -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-...\n-LL |     a(x, y, z);\n-   |     ^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to `&isize`\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n-\n error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:30:12\n+  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:28:56\n    |\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                                                        ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found fn pointer `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)`\n+                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "da225d842d9b03062ec8665d201c4c2f45f91331", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -12,7 +12,6 @@ fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n     *x = *y;\n     //[base]~^ ERROR E0623\n-    //[nll]~^^ ERROR lifetime may not live long enough\n     *z = *y; //[base]~ ERROR E0623\n }\n \n@@ -21,16 +20,13 @@ fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n     // related as required.\n     a(x, y, z);\n     //[base]~^ ERROR lifetime mismatch [E0623]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n     //~^ ERROR E0308\n-    //[nll]~^^ ERROR mismatched types [E0308]\n-    //[nll]~| ERROR mismatched types [E0308]\n }\n \n fn e() {"}, {"sha": "4616035870abfe7148d3c0147e299973a1cdffd7", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.base.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.base.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -2,10 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:52:12\n    |\n LL |     want_G(baz);\n-   |            ^^^ one type is more general than the other\n+   |     ------ ^^^ one type is more general than the other\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n-              found fn pointer `for<'r> fn(&'r S) -> &'r S`\n+                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n+note: function defined here\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:24:4\n+   |\n+LL | fn want_G(f: G) {}\n+   |    ^^^^^^ ----\n \n error: aborting due to previous error\n "}, {"sha": "4616035870abfe7148d3c0147e299973a1cdffd7", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static-fail.nll.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.nll.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,11 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-fn-subtyping-return-static-fail.rs:52:5\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:52:12\n    |\n LL |     want_G(baz);\n-   |     ^^^^^^^^^^^ one type is more general than the other\n+   |     ------ ^^^ one type is more general than the other\n+   |     |\n+   |     arguments to this function are incorrect\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n-              found fn pointer `for<'r> fn(&'r S) -> &'r S`\n+                 found fn item `for<'r> fn(&'r S) -> &'r S {baz}`\n+note: function defined here\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:24:4\n+   |\n+LL | fn want_G(f: G) {}\n+   |    ^^^^^^ ----\n \n error: aborting due to previous error\n "}, {"sha": "613e9af90a43fb5d16692048997e9152ad3fc76b", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.base.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.base.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -8,7 +8,7 @@ LL |     *x = *y;\n    |          ^^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:7\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:19:7\n    |\n LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n    |                     ---------          --------- these two types are declared with different lifetimes...\n@@ -17,13 +17,13 @@ LL |     a(x, y);\n    |       ^ ...but data from `y` flows into `x` here\n \n error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:28:43\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:26:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "268a60968b7349cbafbf71919050222a2f752f08", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -1,50 +1,12 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:12:5\n-   |\n-LL | fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     // Illegal now because there is no `'b:'a` declaration.\n-LL |     *x = *y;\n-   |     ^^^^^^^ assignment requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:20:5\n-   |\n-LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n-   |      -- -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-...\n-LL |     a(x, y);\n-   |     ^^^^^^^ argument requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to `&isize`\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:28:12\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n-\n error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:28:12\n+  --> $DIR/regions-lifetime-bounds-on-fns.rs:26:43\n    |\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                                           ^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found fn pointer `for<'r, 's> fn(&'r mut &isize, &'s mut &isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ef5e5cb12ef10fdead8ebedb8f54ce1d165a1d72", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -11,23 +11,20 @@ fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Illegal now because there is no `'b:'a` declaration.\n     *x = *y;\n     //[base]~^ ERROR lifetime mismatch [E0623]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n     a(x, y);\n     //[base]~^ ERROR lifetime mismatch [E0623]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n     let _: fn(&mut &isize, &mut &isize) = a;\n     //~^ ERROR mismatched types [E0308]\n-    //[nll]~^^ ERROR mismatched types [E0308]\n }\n \n fn e() {"}, {"sha": "2ba05a0a47e01dd9590b61f106d840f7f78e8f70", "filename": "src/test/ui/save-analysis/issue-26459.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-26459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-26459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-26459.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-26459.rs"}, {"sha": "9f594990c6de8315252bb5ff0b718a83d231e70f", "filename": "src/test/ui/save-analysis/issue-26459.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-26459.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-26459.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-26459.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-26459.stderr"}, {"sha": "bd8580f9782e742573513b9034c54ea634c042f4", "filename": "src/test/ui/typeck/auxiliary/issue-36708.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Ftypeck%2Fauxiliary%2Fissue-36708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Ftypeck%2Fauxiliary%2Fissue-36708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fauxiliary%2Fissue-36708.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/auxiliary/issue-36708.rs"}, {"sha": "c9d9f2a6d5015e3ab6c0f8846d08d258787d4b7f", "filename": "src/test/ui/typeck/issue-36708.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Ftypeck%2Fissue-36708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Ftypeck%2Fissue-36708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-36708.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-36708.rs"}, {"sha": "140f19f1ff7746f0ed898c405acb7bd5564d4b8d", "filename": "src/test/ui/typeck/issue-36708.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Ftypeck%2Fissue-36708.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Ftypeck%2Fissue-36708.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-36708.stderr?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-36708.stderr"}, {"sha": "999399ec8d34c6bed4c93fcedc6bf399cf86cf9f", "filename": "src/test/ui/unsized/issue-40231-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Funsized%2Fissue-40231-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Funsized%2Fissue-40231-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-40231-1.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-40231-1.rs"}, {"sha": "780433b28c5964951ee043701d842a1607d76284", "filename": "src/test/ui/unsized/issue-40231-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Funsized%2Fissue-40231-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftest%2Fui%2Funsized%2Fissue-40231-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-40231-2.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "previous_filename": "src/test/ui/issues/issue-40231-2.rs"}, {"sha": "cf72dc4bd09a38b8f655e58a17af0cbfe16f333c", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a437b2ca081bc12425a3318cb66aade9824cbae/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=0a437b2ca081bc12425a3318cb66aade9824cbae", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 974;\n-const ISSUES_ENTRY_LIMIT: usize = 2248;\n+const ROOT_ENTRY_LIMIT: usize = 971;\n+const ISSUES_ENTRY_LIMIT: usize = 2234;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}