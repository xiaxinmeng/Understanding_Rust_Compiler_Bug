{"sha": "19a377510c3de9a7404f690d52a5de761ce2aafd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTM3NzUxMGMzZGU5YTc0MDRmNjkwZDUyYTVkZTc2MWNlMmFhZmQ=", "commit": {"author": {"name": "Morten Lohne", "email": "lohnemorten@gmail.com", "date": "2021-02-20T22:47:49Z"}, "committer": {"name": "Morten Lohne", "email": "lohnemorten@gmail.com", "date": "2021-02-20T23:11:17Z"}, "message": "Fix FP in inherent_to_string when the function has generic parameters", "tree": {"sha": "d62144a601afd2215c28009636d8aa00c3f2d119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62144a601afd2215c28009636d8aa00c3f2d119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a377510c3de9a7404f690d52a5de761ce2aafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a377510c3de9a7404f690d52a5de761ce2aafd", "html_url": "https://github.com/rust-lang/rust/commit/19a377510c3de9a7404f690d52a5de761ce2aafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a377510c3de9a7404f690d52a5de761ce2aafd/comments", "author": {"login": "MortenLohne", "id": 8531622, "node_id": "MDQ6VXNlcjg1MzE2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/8531622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MortenLohne", "html_url": "https://github.com/MortenLohne", "followers_url": "https://api.github.com/users/MortenLohne/followers", "following_url": "https://api.github.com/users/MortenLohne/following{/other_user}", "gists_url": "https://api.github.com/users/MortenLohne/gists{/gist_id}", "starred_url": "https://api.github.com/users/MortenLohne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MortenLohne/subscriptions", "organizations_url": "https://api.github.com/users/MortenLohne/orgs", "repos_url": "https://api.github.com/users/MortenLohne/repos", "events_url": "https://api.github.com/users/MortenLohne/events{/privacy}", "received_events_url": "https://api.github.com/users/MortenLohne/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MortenLohne", "id": 8531622, "node_id": "MDQ6VXNlcjg1MzE2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/8531622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MortenLohne", "html_url": "https://github.com/MortenLohne", "followers_url": "https://api.github.com/users/MortenLohne/followers", "following_url": "https://api.github.com/users/MortenLohne/following{/other_user}", "gists_url": "https://api.github.com/users/MortenLohne/gists{/gist_id}", "starred_url": "https://api.github.com/users/MortenLohne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MortenLohne/subscriptions", "organizations_url": "https://api.github.com/users/MortenLohne/orgs", "repos_url": "https://api.github.com/users/MortenLohne/repos", "events_url": "https://api.github.com/users/MortenLohne/events{/privacy}", "received_events_url": "https://api.github.com/users/MortenLohne/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67087a1b4ee06ce42fd8abe5825f9af96a41e83d", "html_url": "https://github.com/rust-lang/rust/commit/67087a1b4ee06ce42fd8abe5825f9af96a41e83d"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "0b23cdaa9f0a18d6c4e03fc137a7bcb9a88bf778", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19a377510c3de9a7404f690d52a5de761ce2aafd/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a377510c3de9a7404f690d52a5de761ce2aafd/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=19a377510c3de9a7404f690d52a5de761ce2aafd", "patch": "@@ -106,6 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n             if decl.inputs.len() == 1;\n+            if impl_item.generics.params.is_empty();\n \n             // Check if return type is String\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::string_type);"}, {"sha": "6e65fdbd04e7dafc7acfae04f81d757218b2bb9c", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19a377510c3de9a7404f690d52a5de761ce2aafd/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a377510c3de9a7404f690d52a5de761ce2aafd/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=19a377510c3de9a7404f690d52a5de761ce2aafd", "patch": "@@ -14,6 +14,7 @@ struct C;\n struct D;\n struct E;\n struct F;\n+struct G;\n \n impl A {\n     // Should be detected; emit warning\n@@ -73,6 +74,13 @@ impl F {\n     }\n }\n \n+impl G {\n+    // Should not be detected, as it does not match the function signature\n+    fn to_string<const _N: usize>(&self) -> String {\n+        \"G.to_string()\".to_string()\n+    }\n+}\n+\n fn main() {\n     let a = A;\n     a.to_string();\n@@ -93,4 +101,7 @@ fn main() {\n \n     let f = F;\n     f.to_string(1);\n+\n+    let g = G;\n+    g.to_string::<1>();\n }"}, {"sha": "f5fcc193b4d8a2332af013451b679751b0629d68", "filename": "tests/ui/inherent_to_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a377510c3de9a7404f690d52a5de761ce2aafd/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a377510c3de9a7404f690d52a5de761ce2aafd/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=19a377510c3de9a7404f690d52a5de761ce2aafd", "patch": "@@ -1,5 +1,5 @@\n error: implementation of inherent method `to_string(&self) -> String` for type `A`\n-  --> $DIR/inherent_to_string.rs:20:5\n+  --> $DIR/inherent_to_string.rs:21:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"A.to_string()\".to_string()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: implement trait `Display` for type `A` instead\n \n error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n-  --> $DIR/inherent_to_string.rs:44:5\n+  --> $DIR/inherent_to_string.rs:45:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"C.to_string()\".to_string()"}]}