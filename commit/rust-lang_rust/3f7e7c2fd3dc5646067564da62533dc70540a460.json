{"sha": "3f7e7c2fd3dc5646067564da62533dc70540a460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmN2U3YzJmZDNkYzU2NDYwNjc1NjRkYTYyNTMzZGM3MDU0MGE0NjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T17:42:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-20T17:42:18Z"}, "message": "Rollup merge of #63209 - Centril:stabilize-async-await, r=cramertj\n\nStabilize `async_await` in Rust 1.39.0\n\nHere we stabilize:\n- free and inherent `async fn`s,\n- the `<expr>.await` expression form,\n- and the `async move? { ... }` block form.\n\nCloses https://github.com/rust-lang/rust/issues/62149.\nCloses https://github.com/rust-lang/rust/issues/50547.\n\nAll the blockers are now closed.\n\n<details>\n- [x] FCP in https://github.com/rust-lang/rust/issues/62149\n- [x] https://github.com/rust-lang/rust/issues/61949; PR in https://github.com/rust-lang/rust/pull/62849.\n- [x] https://github.com/rust-lang/rust/issues/62517; PR in https://github.com/rust-lang/rust/pull/63376.\n- [x] https://github.com/rust-lang/rust/issues/63225; PR in https://github.com/rust-lang/rust/pull/63501\n- [x] https://github.com/rust-lang/rust/issues/63388; PR in https://github.com/rust-lang/rust/pull/63499\n- [x] https://github.com/rust-lang/rust/issues/63500; PR in https://github.com/rust-lang/rust/pull/63501\n- [x] https://github.com/rust-lang/rust/issues/62121#issuecomment-506884048\n    - [x] Some tests for control flow (PR https://github.com/rust-lang/rust/pull/63387):\n          - `?`\n          - `return` in `async` blocks\n          - `break`\n    - [x] https://github.com/rust-lang/rust/pull/61775#issuecomment-506883180, i.e. tests for https://github.com/rust-lang/rust/pull/60944 with `async fn`s instead). PR in https://github.com/rust-lang/rust/pull/63383\n\n</details>\n\nr? @cramertj", "tree": {"sha": "e57b09205871d7cdb36daae049c77075d79d9c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57b09205871d7cdb36daae049c77075d79d9c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7e7c2fd3dc5646067564da62533dc70540a460", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXDD6CRBK7hj4Ov3rIwAAdHIIAAyDDHOOIf2MGk4doHz4cI7a\nJz2l6pBRh2u6R6n3aiff//O6vgNTLiNPYquI+GRNST8jx/rlJkxP9S8TuemTywCH\nPdBjbDXNc6y/crkOVjHFNyQbkU/J/0+ClDpmXX/MrolhQuguTbhTI4Ed+nikHhEH\nlRFgf9h6KpvIJL5leHpw/rQUzHDJ2QhqCaWURhE5s8dShVD63EoK7g3BwXbLjMMB\n9t1HxoviHQg9/G9yI5kOGPmWutJgorROJAa04zkvz/nGdob3GUBBg+53P123rvz4\n9Rj441MRAkrPjPQLF/16mCR44TMvNxCD1M3mf3/JYGmb+/R9DvAB+1pgbrC8G28=\n=kd/V\n-----END PGP SIGNATURE-----\n", "payload": "tree e57b09205871d7cdb36daae049c77075d79d9c97\nparent 4593f40b291e34fa84011a6513e52b3a80863a50\nparent 21476e7d6ce80640ff39eb091584092076f13359\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566322938 +0200\ncommitter GitHub <noreply@github.com> 1566322938 +0200\n\nRollup merge of #63209 - Centril:stabilize-async-await, r=cramertj\n\nStabilize `async_await` in Rust 1.39.0\n\nHere we stabilize:\n- free and inherent `async fn`s,\n- the `<expr>.await` expression form,\n- and the `async move? { ... }` block form.\n\nCloses https://github.com/rust-lang/rust/issues/62149.\nCloses https://github.com/rust-lang/rust/issues/50547.\n\nAll the blockers are now closed.\n\n<details>\n- [x] FCP in https://github.com/rust-lang/rust/issues/62149\n- [x] https://github.com/rust-lang/rust/issues/61949; PR in https://github.com/rust-lang/rust/pull/62849.\n- [x] https://github.com/rust-lang/rust/issues/62517; PR in https://github.com/rust-lang/rust/pull/63376.\n- [x] https://github.com/rust-lang/rust/issues/63225; PR in https://github.com/rust-lang/rust/pull/63501\n- [x] https://github.com/rust-lang/rust/issues/63388; PR in https://github.com/rust-lang/rust/pull/63499\n- [x] https://github.com/rust-lang/rust/issues/63500; PR in https://github.com/rust-lang/rust/pull/63501\n- [x] https://github.com/rust-lang/rust/issues/62121#issuecomment-506884048\n    - [x] Some tests for control flow (PR https://github.com/rust-lang/rust/pull/63387):\n          - `?`\n          - `return` in `async` blocks\n          - `break`\n    - [x] https://github.com/rust-lang/rust/pull/61775#issuecomment-506883180, i.e. tests for https://github.com/rust-lang/rust/pull/60944 with `async fn`s instead). PR in https://github.com/rust-lang/rust/pull/63383\n\n</details>\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7e7c2fd3dc5646067564da62533dc70540a460", "html_url": "https://github.com/rust-lang/rust/commit/3f7e7c2fd3dc5646067564da62533dc70540a460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7e7c2fd3dc5646067564da62533dc70540a460/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4593f40b291e34fa84011a6513e52b3a80863a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/4593f40b291e34fa84011a6513e52b3a80863a50", "html_url": "https://github.com/rust-lang/rust/commit/4593f40b291e34fa84011a6513e52b3a80863a50"}, {"sha": "21476e7d6ce80640ff39eb091584092076f13359", "url": "https://api.github.com/repos/rust-lang/rust/commits/21476e7d6ce80640ff39eb091584092076f13359", "html_url": "https://github.com/rust-lang/rust/commit/21476e7d6ce80640ff39eb091584092076f13359"}], "stats": {"total": 876, "additions": 271, "deletions": 605}, "files": [{"sha": "a200a058f4f99bbd7a7e30e06a81c82fba8a4593", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2088,7 +2088,6 @@ generator can be constructed.\n Erroneous code example:\n \n ```edition2018,compile-fail,E0698\n-#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n@@ -2101,7 +2100,6 @@ To fix this you must bind `T` to a concrete type such as `String`\n so that a generator can then be constructed:\n \n ```edition2018\n-#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {"}, {"sha": "9c7ac83e82e9712d10de1bc31b0930a5788cebc7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4197,8 +4197,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// A possible error is to forget to add `.await` when using futures:\n     ///\n     /// ```\n-    /// #![feature(async_await)]\n-    ///\n     /// async fn make_u32() -> u32 {\n     ///     22\n     /// }"}, {"sha": "b52183d4b1b56de2e6aaec4ea4d2ddc93e218560", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4751,7 +4751,6 @@ E0733: r##\"\n Recursion in an `async fn` requires boxing. For example, this will not compile:\n \n ```edition2018,compile_fail,E0733\n-#![feature(async_await)]\n async fn foo(n: usize) {\n     if n > 0 {\n         foo(n - 1).await;\n@@ -4763,12 +4762,11 @@ To achieve async recursion, the `async fn` needs to be desugared\n such that the `Future` is explicit in the return type:\n \n ```edition2018,compile_fail,E0720\n-# #![feature(async_await)]\n use std::future::Future;\n-fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n+fn foo_desugared(n: usize) -> impl Future<Output = ()> {\n     async move {\n         if n > 0 {\n-            foo_desugered(n - 1).await;\n+            foo_desugared(n - 1).await;\n         }\n     }\n }\n@@ -4777,7 +4775,6 @@ fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n Finally, the future is wrapped in a pinned box:\n \n ```edition2018\n-# #![feature(async_await)]\n use std::future::Future;\n use std::pin::Pin;\n fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {"}, {"sha": "85a9dea09ed0d7500433340a5352a1bbc0cd1dcf", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -984,7 +984,6 @@ mod where_keyword { }\n \n // 2018 Edition keywords\n \n-#[unstable(feature = \"async_await\", issue = \"50547\")]\n #[doc(keyword = \"async\")]\n //\n /// Return a [`Future`] instead of blocking the current thread.\n@@ -995,7 +994,6 @@ mod where_keyword { }\n /// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod async_keyword { }\n \n-#[unstable(feature = \"async_await\", issue = \"50547\")]\n #[doc(keyword = \"await\")]\n //\n /// Suspend execution until the result of a [`Future`] is ready."}, {"sha": "bce0b07db1c233b3f84bd207eb78dadf83bbc05c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -461,9 +461,6 @@ declare_features! (\n     // Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n-    // Allows async and await syntax.\n-    (active, async_await, \"1.28.0\", Some(50547), None),\n-\n     // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n@@ -857,6 +854,8 @@ declare_features! (\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n     // Allows `const _: TYPE = VALUE`.\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n+    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    (accepted, async_await, \"1.38.0\", Some(50547), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features\n@@ -2100,12 +2099,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     \"labels on blocks are unstable\");\n                 }\n             }\n-            ast::ExprKind::Async(..) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n-            }\n-            ast::ExprKind::Await(_) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\");\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)\n@@ -2154,11 +2147,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 span: Span,\n                 _node_id: NodeId) {\n         if let Some(header) = fn_kind.header() {\n-            // Check for const fn and async fn declarations.\n-            if header.asyncness.node.is_async() {\n-                gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n-            }\n-\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n@@ -2198,9 +2186,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);\n                 }\n-                if sig.header.asyncness.node.is_async() {\n-                    gate_feature_post!(&self, async_await, ti.span, \"async fn is unstable\");\n-                }\n                 if sig.decl.c_variadic {\n                     gate_feature_post!(&self, c_variadic, ti.span,\n                                        \"C-variadic functions are unstable\");"}, {"sha": "5f9708a39722a6532521e8df3cd95d9d29fbcb13", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n // @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None"}, {"sha": "2ba61388c9e3b046dbcdf01f7c5dd3c86febcd1f", "filename": "src/test/rustdoc/async-move-doctest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Frustdoc%2Fasync-move-doctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Frustdoc%2Fasync-move-doctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-move-doctest.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,11 @@\n // compile-flags:--test\n // edition:2018\n \n-// prior to setting the default edition for the doctest pre-parser, this doctest would fail due to\n-// a fatal parsing error\n+// Prior to setting the default edition for the doctest pre-parser,\n+// this doctest would fail due to a fatal parsing error.\n // see https://github.com/rust-lang/rust/issues/59313\n \n //! ```\n-//! #![feature(async_await)]\n-//!\n //! fn foo() {\n //!     drop(async move {});\n //! }"}, {"sha": "ddbc2be651d904c23240902fa9591e93222e1831", "filename": "src/test/rustdoc/edition-flag.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Frustdoc%2Fedition-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Frustdoc%2Fedition-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fedition-flag.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,10 +1,7 @@\n // compile-flags:--test -Z unstable-options\n // edition:2018\n \n-#![feature(async_await)]\n-\n /// ```rust\n-/// #![feature(async_await)]\n /// fn main() {\n ///     let _ = async { };\n /// }"}, {"sha": "0e42f48b8351e90ff7e081ff3a85abbf22d8f901", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,6 @@\n \n #![allow(unused_variables)]\n #![deny(unused_mut)]\n-#![feature(async_await)]\n \n type A = Vec<u32>;\n "}, {"sha": "bf8bf0bcce0fef4f5ed4a31b2040a46ea0bc8b22", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n // edition:2018\n // aux-build:arc_wake.rs\n \n-#![feature(async_await)]\n-\n extern crate arc_wake;\n \n use std::pin::Pin;"}, {"sha": "90d75118f8e42ddabc17d9183a73bb32a0259ebd", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -6,8 +6,6 @@\n // edition:2018\n // ignore-tidy-linelength\n \n-#![feature(async_await)]\n-\n fn main() {}\n \n use core::future::Future;"}, {"sha": "bc42a46ae1021bb0163d7975b34f47dde528502c", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,17 +1,17 @@\n error[E0267]: `break` inside of an async block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:35:9\n+  --> $DIR/async-block-control-flow-static-semantics.rs:33:9\n    |\n LL |         break 0u8;\n    |         ^^^^^^^^^ cannot break inside of an async block\n \n error[E0267]: `break` inside of an async block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:42:13\n+  --> $DIR/async-block-control-flow-static-semantics.rs:40:13\n    |\n LL |             break 0u8;\n    |             ^^^^^^^^^ cannot break inside of an async block\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:15:43\n+  --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n    |\n LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    ---------------------------------      ^^ expected u8, found ()\n@@ -22,7 +22,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n               found type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:20:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected u8, found ()\n@@ -32,7 +32,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:29:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected u8, found ()\n@@ -42,7 +42,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:24:55\n+  --> $DIR/async-block-control-flow-static-semantics.rs:22:55\n    |\n LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    |                                                       ^^ expected (), found u8\n@@ -52,7 +52,7 @@ LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    = note: the return type of a function must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:50:44\n+  --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n@@ -63,7 +63,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:59:50\n+  --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()"}, {"sha": "d82fbcdc5505b638fb54cb6a1ab370e959882653", "filename": "src/test/ui/async-await/async-closure-matches-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n // edition:2018\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n macro_rules! match_expr {\n     ($x:expr) => {}"}, {"sha": "9a24bd8c9543953251f5bf54c02cab1e9bda9fcd", "filename": "src/test/ui/async-await/async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n // aux-build:arc_wake.rs\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n extern crate arc_wake;\n "}, {"sha": "dec3ac0f685547b5d66877babf9c4d3de1d1fade", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n-#![feature(async_await)]\n \n-// Regression test for issue #62382\n+// Regression test for issue #62382.\n \n use std::future::Future;\n "}, {"sha": "47441f5e4efcefc2d7c6f352c772dce285777581", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,11 +1,11 @@\n error[E0698]: type inside `async` object must be known in this context\n-  --> $DIR/async-error-span.rs:13:9\n+  --> $DIR/async-error-span.rs:12:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async` object because of this `await`\n-  --> $DIR/async-error-span.rs:14:5\n+  --> $DIR/async-error-span.rs:13:5\n    |\n LL |     get_future().await;\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "1c369fd7415db7be6063a69615d62ee8ff96b6c7", "filename": "src/test/ui/async-await/async-fn-elided-impl-lifetime-parameter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -6,8 +6,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Foo<'a>(&'a u8);\n \n impl Foo<'_> {"}, {"sha": "1f1bf4250eadf7547e2149786d2920e1fde58048", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n use std::{\n     cell::RefCell,\n     fmt::Debug,"}, {"sha": "6b4fff2dc6844bbe60054690591c0b1a974c0067", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,43 +1,43 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:52:5\n+  --> $DIR/async-fn-nonsend.rs:50:5\n    |\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n    = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:54:5\n+  --> $DIR/async-fn-nonsend.rs:52:5\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n    = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:56:5\n+  --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n@@ -47,18 +47,18 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n    = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n-  --> $DIR/async-fn-nonsend.rs:56:5\n+  --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n@@ -72,12 +72,12 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n    = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3f1f51c20ca0c3ce20d54462018398c918a2b393", "filename": "src/test/ui/async-await/async-fn-path-elision.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-#![allow(dead_code)]\n-\n struct HasLifetime<'a>(&'a bool);\n \n async fn error(lt: HasLifetime) { //~ ERROR implicit elided lifetime not allowed here"}, {"sha": "9694742200ef07d658e0a5606156f0f04f53a4ba", "filename": "src/test/ui/async-await/async-fn-path-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0726]: implicit elided lifetime not allowed here\n-  --> $DIR/async-fn-path-elision.rs:8:20\n+  --> $DIR/async-fn-path-elision.rs:5:20\n    |\n LL | async fn error(lt: HasLifetime) {\n    |                    ^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`"}, {"sha": "35d9cb15540d1f753d8af69098a7bf641b92cf3c", "filename": "src/test/ui/async-await/async-fn-send-uses-nonsend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n use std::{\n     cell::RefCell,\n     fmt::Debug,"}, {"sha": "3ffcbb58595eb75807f772be549d11f4cdda2726", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -12,8 +12,6 @@\n \n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n use std::pin::Pin;\n use std::task::{Context, Poll};"}, {"sha": "b5c94ecb716902bc14b2bb4efc956ecc0fff5e21", "filename": "src/test/ui/async-await/async-fn-size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // aux-build:arc_wake.rs\n // edition:2018\n \n-#![feature(async_await)]\n-\n extern crate arc_wake;\n \n use std::pin::Pin;"}, {"sha": "299faa0587bd58d8be20d7015ec27dee2c00b110", "filename": "src/test/ui/async-await/async-matches-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n macro_rules! match_expr {\n     ($x:expr) => {}\n }"}, {"sha": "ccc1b8553f07144c9af97dbe32db522130964579", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct S;\n \n impl S {"}, {"sha": "c95fe17348877a2627a5a6ee480d9af99071c515", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:12:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:13:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:18:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function"}, {"sha": "0b2255266753d01f004cc93ddc60dec188369374", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n trait MyClosure {\n     type Args;\n }"}, {"sha": "a3a20cb97e150d45e03d094342e7a6d70cdb3888", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,4 +1,3 @@\n-#![feature(async_await)]\n #![allow(non_camel_case_types)]\n #![deny(keyword_idents)]\n "}, {"sha": "f1a22cda51b2135af61fa189e5a9d9d2e7e07ec6", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,19 +1,19 @@\n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:6:13\n+  --> $DIR/2015-edition-error-various-positions.rs:5:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n note: lint level defined here\n-  --> $DIR/2015-edition-error-various-positions.rs:3:9\n+  --> $DIR/2015-edition-error-various-positions.rs:2:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:8:20\n+  --> $DIR/2015-edition-error-various-positions.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:12:16\n+  --> $DIR/2015-edition-error-various-positions.rs:11:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:12:23\n+  --> $DIR/2015-edition-error-various-positions.rs:11:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:17:14\n+  --> $DIR/2015-edition-error-various-positions.rs:16:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL | struct Foo { await: () }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:21:15\n+  --> $DIR/2015-edition-error-various-positions.rs:20:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -58,7 +58,7 @@ LL | impl Foo { fn await() {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:25:14\n+  --> $DIR/2015-edition-error-various-positions.rs:24:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -67,7 +67,7 @@ LL | macro_rules! await {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:32:5\n+  --> $DIR/2015-edition-error-various-positions.rs:31:5\n    |\n LL |     await!();\n    |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -76,7 +76,7 @@ LL |     await!();\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:35:11\n+  --> $DIR/2015-edition-error-various-positions.rs:34:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -85,7 +85,7 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:35:19\n+  --> $DIR/2015-edition-error-various-positions.rs:34:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`"}, {"sha": "5d85b0a243e0358858794fb439cf2f5e911e377e", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n \n #![allow(non_camel_case_types)]\n-#![feature(async_await)]\n \n mod outer_mod {\n     pub mod await { //~ ERROR expected identifier, found reserved keyword `await`"}, {"sha": "05f28d0a5b2267f6b680b1649a613778b73205cf", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:7:13\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:6:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found reserved keyword\n@@ -9,7 +9,7 @@ LL |     pub mod r#await {\n    |             ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:8:20\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found reserved keyword\n@@ -19,7 +19,7 @@ LL |         pub struct r#await;\n    |                    ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:11:22\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:10:22\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found reserved keyword\n@@ -29,7 +29,7 @@ LL | use self::outer_mod::r#await::await;\n    |                      ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:11:29\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:10:29\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found reserved keyword\n@@ -39,7 +39,7 @@ LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:14:14\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ expected identifier, found reserved keyword\n@@ -49,7 +49,7 @@ LL | struct Foo { r#await: () }\n    |              ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:17:15\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:16:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ expected identifier, found reserved keyword\n@@ -59,7 +59,7 @@ LL | impl Foo { fn r#await() {} }\n    |               ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:20:14\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:19:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ expected identifier, found reserved keyword"}, {"sha": "22bcbb1064dd744266b16cd3db205f5bac75debc", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn bar() -> Result<(), ()> {\n     Ok(())\n }"}, {"sha": "7caa9f26bc2f848ab341347a45419b24a15d6e7d", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,133 +1,133 @@\n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:10:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:8:13\n    |\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:14:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:12:13\n    |\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:18:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:16:13\n    |\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:23:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:21:13\n    |\n LL |     let _ = await { bar() };\n    |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:27:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:25:13\n    |\n LL |     let _ = await(bar());\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `(bar()).await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:31:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:29:13\n    |\n LL |     let _ = await { bar() }?;\n    |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:35:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:33:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:39:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:37:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:43:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:41:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:53:13\n    |\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:58:13\n    |\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:13\n    |\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:75:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:73:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:80:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:78:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:106:13\n    |\n LL |     let _ = await!(bar());\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:112:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:110:13\n    |\n LL |     let _ = await!(bar())?;\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:133:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:131:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:133:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:131:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:136:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:134:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n@@ -138,103 +138,103 @@ LL | }\n    | ^ unexpected token\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:53:13\n    |\n LL | fn foo9() -> Result<(), ()> {\n    |    ---- this is not `async`\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:58:13\n    |\n LL | fn foo10() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:13\n    |\n LL | fn foo11() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n    |\n LL | fn foo12() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:75:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:73:13\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:80:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:78:13\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:83:13\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:89:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:87:13\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:94:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:92:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:101:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:99:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/incorrect-syntax-suggestions.rs:18:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:16:19\n    |\n LL |     let _ = await bar()?;\n    |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`"}, {"sha": "aa09d4bdf088362190f5dbf901b48896def452ab", "filename": "src/test/ui/async-await/await-unsize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn make_boxed_object() -> Box<dyn Send> {\n     Box::new(()) as _\n }"}, {"sha": "5d260682f1d8163ea34a9030e7ea041fcfc56fed", "filename": "src/test/ui/async-await/bound-normalization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n // See issue 60414\n \n trait Trait {"}, {"sha": "56f4cbbd190f8b9fbac993191d76251d053b4ff3", "filename": "src/test/ui/async-await/conditional-and-guaranteed-initialization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fconditional-and-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fconditional-and-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fconditional-and-guaranteed-initialization.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn conditional_and_guaranteed_initialization(x: usize) -> usize {\n     let y;\n     if x > 5 {"}, {"sha": "68341a24c4e5d396e3bc52ffb84c3e4ca733831e", "filename": "src/test/ui/async-await/dont-print-desugared-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,6 @@\n // Test that we don't show variables with from async fn desugaring\n \n // edition:2018\n-#![feature(async_await)]\n \n async fn async_fn(&ref mut s: &[i32]) {}\n //~^ ERROR cannot borrow data in a `&` reference as mutable [E0596]"}, {"sha": "2bf1e77f09b3fb1bf0edcdc46a76906944281533", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/dont-print-desugared-async.rs:6:20\n+  --> $DIR/dont-print-desugared-async.rs:5:20\n    |\n LL | async fn async_fn(&ref mut s: &[i32]) {}\n    |                   -^^^^^^^^^"}, {"sha": "a8e5b38ec1dd8f3ce36692a903aed0372f435d00", "filename": "src/test/ui/async-await/dont-suggest-missing-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n \n // This test ensures we don't make the suggestion in bodies that aren't `async`.\n \n-#![feature(async_await)]\n-\n fn take_u32(x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "c87e0bc221de7a8a47dac3ff816f0640d0e8441d", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/dont-suggest-missing-await.rs:16:18\n+  --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n    |                  ^ expected u32, found opaque type"}, {"sha": "9817d377a7886f76edfc8ed05c247d8c5d724b5e", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "00072786a50a7524997dc8d5cd8f5e16d2e1af8e", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "5d020c9a52601cf8373fc48a7d9a905e7a7baa07", "filename": "src/test/ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,9 +2,7 @@\n // edition:2018\n // run-pass\n \n-#![allow(unused_variables)]\n #![deny(dead_code)]\n-#![feature(async_await)]\n \n // Test that the drop order for locals in a fn and async fn matches up.\n extern crate arc_wake;"}, {"sha": "79dedb1ba285e9796d4ca528d2a99629d4d5fc3c", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,5 @@\n // edition:2018\n \n-#![allow(unused_variables)]\n-#![feature(async_await)]\n-\n async fn foobar_async(x: u32, (a, _, _c): (u32, u32, u32), _: u32, _y: u32) {\n     assert_eq!(__arg1, (1, 2, 3)); //~ ERROR cannot find value `__arg1` in this scope [E0425]\n     assert_eq!(__arg2, 4); //~ ERROR cannot find value `__arg2` in this scope [E0425]"}, {"sha": "aa04a613f47c1298318fbb9184620c0982fd449e", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,23 +1,23 @@\n error[E0425]: cannot find value `__arg1` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:7:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:4:16\n    |\n LL |     assert_eq!(__arg1, (1, 2, 3));\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg2` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:8:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:5:16\n    |\n LL |     assert_eq!(__arg2, 4);\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg0` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:12:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:9:16\n    |\n LL |     assert_eq!(__arg0, 1);\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg1` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:13:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:10:16\n    |\n LL |     assert_eq!(__arg1, 2);\n    |                ^^^^^^ not found in this scope"}, {"sha": "84fe79348c601e0654a67c13c98e4293ed5f140c", "filename": "src/test/ui/async-await/drop-order/drop-order-when-cancelled.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,9 +2,6 @@\n // edition:2018\n // run-pass\n \n-#![allow(unused_variables)]\n-#![feature(async_await)]\n-\n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn is cancelled.\n // This file is mostly copy-pasted from drop-order-for-async-fn-parameters.rs"}, {"sha": "c85896150c29f430ef00bdae4b5ab933450bd647", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2015\n \n-#![feature(async_await)]\n-\n async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n \n fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition"}, {"sha": "d3f88af09d13434ad7ca987432f2ac66f6d1ac6e", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,59 +1,59 @@\n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:3:1\n    |\n LL | async fn foo() {}\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^\n \n error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "963b19b34a620b2edd13825211b1c1c6a75f79d9", "filename": "src/test/ui/async-await/generics-and-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n \n pub async fn simple_generic<T>() {}"}, {"sha": "9ee419c4a56fb16c0d2058c50cc33d8ef2f7c49c", "filename": "src/test/ui/async-await/issue-60709.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,9 +4,6 @@\n \n // run-pass\n \n-#![feature(async_await)]\n-#![allow(unused)]\n-\n use std::future::Future;\n use std::task::Poll;\n use std::task::Context;"}, {"sha": "9381251ad69688e1db8019c422b2e85f038736e9", "filename": "src/test/ui/async-await/issue-61452.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n \n pub async fn f(x: Option<usize>) {\n     x.take();"}, {"sha": "5eb4b548717371107b022ab0fb562d3b7bbb698b", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-61452.rs:5:5\n+  --> $DIR/issue-61452.rs:4:5\n    |\n LL | pub async fn f(x: Option<usize>) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     x.take();\n    |     ^ cannot borrow as mutable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/issue-61452.rs:10:5\n+  --> $DIR/issue-61452.rs:9:5\n    |\n LL | pub async fn g(x: usize) {\n    |                -"}, {"sha": "f6084be91674519aac6b194f964c1a026332f795", "filename": "src/test/ui/async-await/issue-61793.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -6,9 +6,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-#![allow(unused)]\n-\n async fn foo<F>(_: &(), _: F) {}\n \n fn main() {"}, {"sha": "6a28c69193da0db42b3a3208ddb33f07e3b9c342", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,6 +1,5 @@\n // ignore-tidy-linelength\n // edition:2018\n-#![feature(async_await)]\n \n // This test checks that `Self` is prohibited as a return type. See #61949 for context.\n "}, {"sha": "12fb77d8dd637efccac6bfb1cc21701d142ab6c8", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-61949-self-return-type.rs:12:40\n+  --> $DIR/issue-61949-self-return-type.rs:11:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n    |                                        ^^^^"}, {"sha": "d0af01e0c009f97f88f27af9224edbb76a7f0a6f", "filename": "src/test/ui/async-await/issue-62658.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-62658.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissue-62658.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-62658.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,8 +4,6 @@\n // build-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn noop() {}\n \n async fn foo() {"}, {"sha": "09241f982aa8a6685e7bf31e4b5acb5d615a87be", "filename": "src/test/ui/async-await/issues/issue-51719.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n //\n // Tests that the .await syntax can't be used to make a generator\n \n-#![feature(async_await)]\n-\n async fn foo() {}\n \n fn make_generator() {"}, {"sha": "6c3c8889da7cee629183bb3bb48a6d60a0cbe811", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:10:19\n+  --> $DIR/issue-51719.rs:8:19\n    |\n LL |     let _gen = || foo().await;\n    |                -- ^^^^^^^^^^^ only allowed inside `async` functions and blocks"}, {"sha": "bc85a96cea99e90bdcdcab74ffd6b2cd2593d8a2", "filename": "src/test/ui/async-await/issues/issue-51751.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn inc(limit: i64) -> i64 {\n     limit + 1\n }"}, {"sha": "e50c78534f852caa846b526cea558a64feac3f30", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:11:20\n+  --> $DIR/issue-51751.rs:9:20\n    |\n LL | fn main() {\n    |    ---- this is not `async`"}, {"sha": "5cae07044446081435ef16b3b69b7dda63265514", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await)]\n+#![feature(arbitrary_self_types)]\n \n use std::task::{self, Poll};\n use std::future::Future;"}, {"sha": "64f260cfe01b63fb30860f49dfcca949d79cc41d", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,4 @@\n // edition:2018\n // pp-exact\n \n-#![feature(async_await)]\n-#![allow(unused_parens)]\n-\n fn main() { let _a = (async  { }); }"}, {"sha": "9adc0a8232388b0d983f25a49a8e8a713792cf7e", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::sync::Arc;\n \n trait SomeTrait: Send + Sync + 'static {"}, {"sha": "1d77d420127a88d7e3acfb087be53c507245e255", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,11 +1,8 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n \n-#[allow(unused)]\n async fn foo<F: Future<Output = i32>>(x: &i32, future: F) -> i32 {\n     let y = future.await;\n     *x + y"}, {"sha": "3b271775a385175b544d67877472601f2a2afb18", "filename": "src/test/ui/async-await/issues/issue-55809.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-pass\n \n-#![feature(async_await)]\n-\n trait Foo { }\n \n impl Foo for () { }"}, {"sha": "72a45b5007d7af21488d040c7a99b84990299b7c", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "ea780d9f62214922d558ee6d054562c07d952d0a", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,11 +1,8 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n \n-#[allow(unused)]\n async fn enter<'a, F, R>(mut callback: F)\n where\n     F: FnMut(&'a mut i32) -> R,"}, {"sha": "154226e8bb88ffbf1639b54c5728208cb86bd345", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -6,8 +6,6 @@\n \n // compile-flags: --edition=2018\n \n-#![feature(async_await)]\n-\n pub enum Uninhabited { }\n \n fn uninhabited_async() -> Uninhabited {\n@@ -16,14 +14,12 @@ fn uninhabited_async() -> Uninhabited {\n \n async fn noop() { }\n \n-#[allow(unused)]\n async fn contains_never() {\n     let error = uninhabited_async();\n     noop().await;\n     let error2 = error;\n }\n \n-#[allow(unused)]\n async fn overlap_never() {\n     let error1 = uninhabited_async();\n     noop().await;\n@@ -35,6 +31,4 @@ async fn overlap_never() {\n \n #[allow(unused_must_use)]\n fn main() {\n-    contains_never();\n-    overlap_never();\n }"}, {"sha": "1ca051607518edd805903dba034cbeef99b81357", "filename": "src/test/ui/async-await/issues/issue-60518.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n // This is a regression test to ensure that simple bindings (where replacement arguments aren't\n // created during async fn lowering) that have their DefId used during HIR lowering (such as impl\n // trait) are visited during def collection and thus have a DefId."}, {"sha": "0d015e54f8b1c3913477fa2329b627f178f659f8", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n #![feature(type_alias_impl_trait)]\n \n use std::future::Future;"}, {"sha": "c0e34a8df77a4e82ef3798a8200efb90378a75ec", "filename": "src/test/ui/async-await/issues/issue-60674.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,6 @@\n // aux-build:issue-60674.rs\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n-#![feature(async_await)]\n \n // This is a regression test that ensures that `mut` patterns are not lost when provided as input\n // to a proc macro."}, {"sha": "8585a42511104aa67b15e2c8dada687012e45cb0", "filename": "src/test/ui/async-await/issues/issue-61187.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n-#![feature(async_await)]\n \n-fn main() {\n-}\n+fn main() {}\n \n async fn response(data: Vec<u8>) {\n     data.reverse(); //~ ERROR E0596"}, {"sha": "4d361c824dd6da8de946c3789dc1aa400d66646e", "filename": "src/test/ui/async-await/issues/issue-61187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `data` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-61187.rs:8:5\n+  --> $DIR/issue-61187.rs:6:5\n    |\n LL | async fn response(data: Vec<u8>) {\n    |                   ---- help: consider changing this to be mutable: `mut data`"}, {"sha": "879bc6912fce94364d890d85a190d41cd947b2eb", "filename": "src/test/ui/async-await/issues/issue-61986.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,8 +4,6 @@\n // Tests that we properly handle StorageDead/StorageLives for temporaries\n // created in async loop bodies.\n \n-#![feature(async_await)]\n-\n async fn bar() -> Option<()> {\n     Some(())\n }"}, {"sha": "3ee7ab2e9d12f5ed37adf1d826bb8f5c0b5674d3", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn print_dur() {}\n \n fn main() {"}, {"sha": "cd155f0fc32b6c44f2a2557d339a4d3ae449a910", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:6:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:14:5\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:14:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    |\n    = note: required by `std::future::poll_with_tls_context`\n "}, {"sha": "cb7336e6134225b8c6aa651a47f298880997a86a", "filename": "src/test/ui/async-await/issues/issue-62009-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n async fn print_dur() {}\n "}, {"sha": "4689ce36a78c03721ad9cf34e1a6d1266a75df96", "filename": "src/test/ui/async-await/issues/issue-62517-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -5,8 +5,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n trait FirstTrait {}\n trait SecondTrait {\n     type Item: ?Sized;"}, {"sha": "aaf28d6c132e3970193413b02b4f277557dbc4b9", "filename": "src/test/ui/async-await/issues/issue-62517-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -5,8 +5,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n trait Object {}\n \n trait Alpha<Param: ?Sized> {}"}, {"sha": "22610fe54a4cb1d8ed2f4eedb0fcf166829bb034", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/issue-63388-1.rs:14:10\n+  --> $DIR/issue-63388-1.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^^^^^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-63388-1.rs:15:5\n+  --> $DIR/issue-63388-1.rs:13:5\n    |\n LL |       async fn do_sth<'a>(\n    |                       -- lifetime `'a` defined here"}, {"sha": "3cde5de2198806617d56e74727a0ca4795f6d38f", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "a54cadb0cd2517abb6b15a82daf488f2f4d41cce", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-63388-1.rs:14:10\n+  --> $DIR/issue-63388-1.rs:12:10\n    |\n LL |         &'a self, foo: &dyn Foo\n    |         -------- this parameter and the return type are declared with different lifetimes..."}, {"sha": "7781af89deae2d5b9d80fb171e03cb629e9b1557", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:14:10\n+  --> $DIR/issue-63388-2.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`"}, {"sha": "73e7f25f97d0d82140a13bae39c93f3717587ccd", "filename": "src/test/ui/async-await/issues/issue-63388-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "1edeb3d54938968b34816c88ecf5e2210989e390", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,25 +1,25 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:14:10\n+  --> $DIR/issue-63388-2.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n \n error: cannot infer an appropriate lifetime\n-  --> $DIR/issue-63388-2.rs:13:9\n+  --> $DIR/issue-63388-2.rs:11:9\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |         ^^^ ...but this borrow...\n LL |     ) -> &dyn Foo\n    |          -------- this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 13:14\n-  --> $DIR/issue-63388-2.rs:13:14\n+note: ...can't outlive the lifetime '_ as defined on the method body at 11:14\n+  --> $DIR/issue-63388-2.rs:11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 13:14\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 11:14\n    |\n LL |     ) -> &dyn Foo + '_\n    |          ^^^^^^^^^^^^^"}, {"sha": "1a9822e02fa0199c12eaec42e7e21a7fbf09e85d", "filename": "src/test/ui/async-await/issues/issue-63388-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "58f9dacb3bcfa26611aff7a5905dc876b0e78566", "filename": "src/test/ui/async-await/issues/issue-63388-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct A;\n \n impl A {"}, {"sha": "d47c2137725d61f6b9780ce57248de31e4be8e80", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n \n async fn do_the_thing() -> u8 {\n     8"}, {"sha": "49ebf414c550bb4242f3182b6b35aca02bdf8fa1", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:10:13\n+  --> $DIR/non-async-enclosing-span.rs:9:13\n    |\n LL | fn main() {\n    |    ---- this is not `async`"}, {"sha": "39ea2aae563a4111b845405dad533c8f7dfb799c", "filename": "src/test/ui/async-await/move-part-await-return-rest-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n struct Small {\n     x: Vec<usize>,\n     y: Vec<usize>,"}, {"sha": "7b958b98b414f4d2f6b552619c1545fdcc7cf76c", "filename": "src/test/ui/async-await/move-part-await-return-rest-tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn move_part_await_return_rest_tuple() -> Vec<usize> {\n     let x = (vec![3], vec![4, 4]);\n     drop(x.1);"}, {"sha": "8258e2eff521bb012e65f950c0579caa4f5487f6", "filename": "src/test/ui/async-await/multiple-lifetimes/elided.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-\n async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n \n fn main() {"}, {"sha": "3912b854747de903e3fa71f5a52600ea0bcf19c2", "filename": "src/test/ui/async-await/multiple-lifetimes/fn-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-\n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8, _: fn(&u8)) {}\n \n fn gimme(_: &u8) { }"}, {"sha": "31d0736ba63c845ca4d7a21943164e3964f8de9c", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,9 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-#![allow(dead_code)]\n-\n use std::ops::Add;\n \n async fn multiple_hrtb_and_single_named_lifetime_ok<'c>("}, {"sha": "e8eb98102f478fd58280aba4c13ec73397687bf7", "filename": "src/test/ui/async-await/multiple-lifetimes/named.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-\n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n \n fn main() {"}, {"sha": "02b105999f5bb2e55d4b0e98fe60961a48349ee3", "filename": "src/test/ui/async-await/multiple-lifetimes/partial-relation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-pass\n \n-#![feature(async_await)]\n-\n async fn lotsa_lifetimes<'a, 'b, 'c>(a: &'a u32, b: &'b u32, c: &'c u32) -> (&'a u32, &'b u32)\n     where 'b: 'a\n {"}, {"sha": "b901b61aa1898315ae38e6a1f7041b11e64d8500", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,7 +4,7 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(async_await, member_constraints)]\n+#![feature(member_constraints)]\n \n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }"}, {"sha": "2c7a5cd378fc2d4e4723d32bcbb3d5811b8887e0", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(async_await)]\n-\n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n "}, {"sha": "59d7728d41c4cfa2a67d27c3495a8aaa7611f8bf", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:11:64\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n    |\n LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n    |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other"}, {"sha": "babc90a5e96ad395e3e14a9c68b2869a3b6e793f", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,7 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(async_await, member_constraints)]\n+#![feature(member_constraints)]\n \n trait Trait<'a> { }\n impl<T> Trait<'_> for T { }"}, {"sha": "149c020f9cb9c7c24fa93423c8106b2c693c7a96", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,8 +4,6 @@\n // function (which takes multiple lifetimes) only returns data from\n // one of them.\n \n-#![feature(async_await)]\n-\n async fn multiple_named_lifetimes<'a, 'b>(a: &'a u8, _: &'b u8) -> &'a u8 {\n     a\n }"}, {"sha": "d86e84033b8cd688191c48f0926dc1ea2256da36", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/ret-ref.rs:18:5\n+  --> $DIR/ret-ref.rs:16:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                           -- borrow of `a` occurs here\n@@ -10,7 +10,7 @@ LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `b` because it is borrowed\n-  --> $DIR/ret-ref.rs:19:5\n+  --> $DIR/ret-ref.rs:17:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                               -- borrow of `b` occurs here\n@@ -21,7 +21,7 @@ LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/ret-ref.rs:30:5\n+  --> $DIR/ret-ref.rs:28:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                           -- borrow of `a` occurs here"}, {"sha": "6ed8bef956a52f1cae057dd5e70006b901572cb5", "filename": "src/test/ui/async-await/multiple-lifetimes/variance.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,9 +4,6 @@\n // Test for async fn where the parameters have distinct lifetime\n // parameters that appear in all possible variances.\n \n-#![feature(async_await)]\n-\n-#[allow(dead_code)]\n async fn lotsa_lifetimes<'a, 'b, 'c>(_: fn(&'a u8), _: fn(&'b u8) -> &'b u8, _: fn() -> &'c u8) { }\n \n fn take_any(_: &u8) { }"}, {"sha": "76ed827d5973e4e9b4427840af9eda54a70c0a90", "filename": "src/test/ui/async-await/nested-in-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,8 +4,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Foo<'a>(&'a ());\n \n impl<'a> Foo<'a> {"}, {"sha": "0ca50807f2626b3047bc230c46fc39f0cd747c84", "filename": "src/test/ui/async-await/no-args-non-move-async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn main() {\n     let _ = async |x: u8| {};"}, {"sha": "7a6eb498b2ee0b3c0538a4102990d81da542a54f", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,7 +2,5 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n pub async const fn x() {}\n //~^ ERROR expected one of `fn` or `unsafe`, found `const`"}, {"sha": "edbdfb5652281a02fd78a93e3e751ba54c7589fe", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `fn` or `unsafe`, found `const`\n-  --> $DIR/no-async-const.rs:7:11\n+  --> $DIR/no-async-const.rs:5:11\n    |\n LL | pub async const fn x() {}\n    |           ^^^^^ expected one of `fn` or `unsafe` here"}, {"sha": "bd78a18a40ed9e6ba527bf830693232f641fd769", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n pub const async fn x() {}\n //~^ ERROR expected identifier, found reserved keyword `async`\n //~^^ expected `:`, found keyword `fn`"}, {"sha": "6d7df57e7b6afee01eddf591ca8877049caf834d", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found reserved keyword `async`\n-  --> $DIR/no-const-async.rs:7:11\n+  --> $DIR/no-const-async.rs:5:11\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found reserved keyword\n@@ -9,7 +9,7 @@ LL | pub const r#async fn x() {}\n    |           ^^^^^^^\n \n error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:7:17\n+  --> $DIR/no-const-async.rs:5:17\n    |\n LL | pub const async fn x() {}\n    |                 ^^ expected `:`"}, {"sha": "bef477bd256ec3a769c351ac03e8e12514becfe3", "filename": "src/test/ui/async-await/no-move-across-await-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn no_move_across_await_struct() -> Vec<usize> {\n     let s = Small { x: vec![31], y: vec![19, 1441] };\n     needs_vec(s.x).await;"}, {"sha": "88f147b8d9ddd10ec8fa1fea8261d3a6ac62b970", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s.x`\n-  --> $DIR/no-move-across-await-struct.rs:10:5\n+  --> $DIR/no-move-across-await-struct.rs:8:5\n    |\n LL |     needs_vec(s.x).await;\n    |               --- value moved here"}, {"sha": "565cbd7d5f4aeaeb5452e968168fbfed99e5d418", "filename": "src/test/ui/async-await/no-move-across-await-tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn no_move_across_await_tuple() -> Vec<usize> {\n     let x = (vec![3], vec![4, 4]);\n     drop(x.1);"}, {"sha": "fe98ecd599a2348b9c172c3c826e896f58021846", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x.1`\n-  --> $DIR/no-move-across-await-tuple.rs:11:5\n+  --> $DIR/no-move-across-await-tuple.rs:9:5\n    |\n LL |     drop(x.1);\n    |          --- value moved here"}, {"sha": "0afbf4cee1d3c881ada8d028fb25c71b51dbc0e7", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn no_non_guaranteed_initialization(x: usize) -> usize {\n     let y;\n     if x > 5 {"}, {"sha": "91d7994654f37448f5ed6f4c5e2f9f613f17ceec", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly uninitialized variable: `y`\n-  --> $DIR/no-non-guaranteed-initialization.rs:12:5\n+  --> $DIR/no-non-guaranteed-initialization.rs:10:5\n    |\n LL |     y\n    |     ^ use of possibly uninitialized `y`"}, {"sha": "1785fb7f29947757deddf633df07da57636b42bc", "filename": "src/test/ui/async-await/partial-initialization-across-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,8 +3,6 @@\n \n // edition:2018\n \n-#![feature(async_await)]\n-\n struct S { x: i32, y: i32 }\n struct T(i32, i32);\n "}, {"sha": "d9a2db985e54ddc4db7b55fd3b857b686507c604", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:15:5\n+  --> $DIR/partial-initialization-across-await.rs:13:5\n    |\n LL |     t.0 = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`\n \n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:24:5\n+  --> $DIR/partial-initialization-across-await.rs:22:5\n    |\n LL |     t.0 = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`\n \n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:33:5\n+  --> $DIR/partial-initialization-across-await.rs:31:5\n    |\n LL |     t.x = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`"}, {"sha": "aa7733194587da20ba4238a02da39f729f0445a0", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,8 +2,6 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`.\n \n-#![feature(async_await)]\n-\n async fn recursive_async_function() -> () { //~ ERROR\n     recursive_async_function().await;\n }"}, {"sha": "8781a9c444d0a5c50e97277614ffd3f06d0e9555", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/recursive-async-impl-trait-type.rs:7:40\n+  --> $DIR/recursive-async-impl-trait-type.rs:5:40\n    |\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ an `async fn` cannot invoke itself directly"}, {"sha": "37b30ffe6800f7f6c2de77b970b3e6ada1d474f1", "filename": "src/test/ui/async-await/suggest-missing-await-closure.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn take_u32(_x: u32) {}\n "}, {"sha": "18076a1516171cfa5346c45e9de63791bca7041e", "filename": "src/test/ui/async-await/suggest-missing-await-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn take_u32(_x: u32) {}\n "}, {"sha": "7c02a907ce7ad03649175f63ad5ef81411b6f149", "filename": "src/test/ui/async-await/suggest-missing-await.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await)]\n-\n fn take_u32(_x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "91abd44e65caf3294d9b70b99043cacf3ebe1a5d", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await)]\n-\n fn take_u32(_x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "ccca97ec204b46c5f241cba5711cfea4ae9e6955", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:15:14\n+  --> $DIR/suggest-missing-await.rs:13:14\n    |\n LL |     take_u32(x)\n    |              ^"}, {"sha": "d8ea87d2775bdf7a624c620310daa9989d607c58", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,7 +2,7 @@\n // Error message should pinpoint the type parameter T as needing to be bound\n // (rather than give a general error message)\n // edition:2018\n-#![feature(async_await)]\n+\n async fn bar<T>() -> () {}\n \n async fn foo() {"}, {"sha": "79d09d1817601ea601ae6a484cc6827e4d000630", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -7,10 +7,7 @@\n // edition:2018\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![allow(unused_assignments)]\n-#![allow(unused_variables)]\n #![feature(slice_patterns)]\n-#![feature(async_await)]\n \n use std::{\n     cell::{Cell, RefCell},"}, {"sha": "801aeb82aa266dfed97da4d9d23b22532988b8cf", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs?ref=4593f40b291e34fa84011a6513e52b3a80863a50", "patch": "@@ -1,9 +0,0 @@\n-// edition:2015\n-\n-async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n-                  //~^ ERROR async fn is unstable\n-\n-fn main() {\n-    let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`\n-    let _ = async || { true }; //~ ERROR cannot find value `async` in this scope\n-}"}, {"sha": "0157ed5534423199adfe93650e20dfe4c82661fe", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=4593f40b291e34fa84011a6513e52b3a80863a50", "patch": "@@ -1,31 +0,0 @@\n-error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:3:1\n-   |\n-LL | async fn foo() {}\n-   | ^^^^^\n-\n-error[E0422]: cannot find struct, variant or union type `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:7:13\n-   |\n-LL |     let _ = async {};\n-   |             ^^^^^ not found in this scope\n-\n-error[E0425]: cannot find value `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:8:13\n-   |\n-LL |     let _ = async || { true };\n-   |             ^^^^^ not found in this scope\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:3:1\n-   |\n-LL | async fn foo() {}\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0422, E0425, E0658, E0670.\n-For more information about an error, try `rustc --explain E0422`."}, {"sha": "78391c0e104cc3e26a441fb48491320524f2c2d3", "filename": "src/test/ui/feature-gates/feature-gate-async-await.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs?ref=4593f40b291e34fa84011a6513e52b3a80863a50", "patch": "@@ -1,18 +0,0 @@\n-// edition:2018\n-\n-struct S;\n-\n-impl S {\n-    async fn foo() {} //~ ERROR async fn is unstable\n-}\n-\n-trait T {\n-    async fn foo(); //~ ERROR trait fns cannot be declared `async`\n-    //~^ ERROR async fn is unstable\n-}\n-\n-async fn foo() {} //~ ERROR async fn is unstable\n-\n-fn main() {\n-    let _ = async {}; //~ ERROR async blocks are unstable\n-}"}, {"sha": "9f4a90157a49548006fa2342bdb912c7d6dd7490", "filename": "src/test/ui/feature-gates/feature-gate-async-await.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4593f40b291e34fa84011a6513e52b3a80863a50/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr?ref=4593f40b291e34fa84011a6513e52b3a80863a50", "patch": "@@ -1,45 +0,0 @@\n-error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/feature-gate-async-await.rs:10:5\n-   |\n-LL |     async fn foo();\n-   |     ^^^^^^^^^^^^^^^\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:6:5\n-   |\n-LL |     async fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:10:5\n-   |\n-LL |     async fn foo();\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:14:1\n-   |\n-LL | async fn foo() {}\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error[E0658]: async blocks are unstable\n-  --> $DIR/feature-gate-async-await.rs:17:13\n-   |\n-LL |     let _ = async {};\n-   |             ^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e3d19029348a5619b08064253f272d18c040178c", "filename": "src/test/ui/generator/issue-61442-stmt-expr-with-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,7 +4,7 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await, generators, generator_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "672e16b780d03729278f7e13a288f2c5f5e064fc", "filename": "src/test/ui/generator/issue-62506-two_awaits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -4,7 +4,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n use std::future::Future;\n \n pub trait T {"}, {"sha": "235c1f80ef6373da95bc638456f382be23312f04", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -2,7 +2,6 @@\n // ignore-tidy-linelength\n // edition:2018\n \n-#![feature(async_await)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n "}, {"sha": "2c4c61a0957f96525215fcc08a700fc957517a0f", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:6:12\n+  --> $DIR/bound-normalization-fail.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:29:32\n+  --> $DIR/bound-normalization-fail.rs:28:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -17,13 +17,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:45:41\n+  --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:45:41\n+  --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type"}, {"sha": "fff17667fdae16de7591398adacdf3adfb73bf21", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n #![feature(type_alias_impl_trait)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete"}, {"sha": "d048da7f60bebd3845983de2fa86e58bc26a2bee", "filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-pass.rs:6:12\n+  --> $DIR/bound-normalization-pass.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1ca2e3d9065106b3d0e67bbb980be9043fd0df3a", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n // ignore-tidy-linelength\n-#![feature(async_await, type_alias_impl_trait)]\n+\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "01371b4d5c61f96bfaa9a74db18d8f6487b7ad59", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `impl std::future::Future: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:12:5\n+  --> $DIR/issue-55872-2.rs:13:5\n    |\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n    |\n    = note: the return type of a function must have a statically known size\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:28\n+  --> $DIR/issue-55872-2.rs:15:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "7d75f254bfe75d44da3b6071ffcf7d62664dee66", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n "}, {"sha": "f67e45b01d27e606d63438ad39ef2ba726ec3638", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:3:12\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:2:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0282]: type annotations needed for `impl std::future::Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:14:9\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` the explicit type `impl std::future::Future`, with the type parameters specified"}, {"sha": "05f62f3d8cbc0aa4a4bda6647dff130335a26ed8", "filename": "src/test/ui/inference/cannot-infer-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n \n use std::io::Error;\n "}, {"sha": "bf31fb85cf6db5c5eab50fd634a36a740621e01e", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-async.rs:12:9\n+  --> $DIR/cannot-infer-async.rs:11:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` a type"}, {"sha": "f140546b048191a4ac76bc8e1cd0c76c71f56898", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -3,7 +3,7 @@\n // Exercise the unused_mut attribute in some positive and negative cases\n \n #![deny(unused_mut)]\n-#![feature(async_await, async_closure, param_attrs)]\n+#![feature(async_closure, param_attrs)]\n \n async fn baz_async(\n     mut a: i32,"}, {"sha": "06b818636f956b548e32f5eebb5770ef13b3272f", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_await, async_closure, param_attrs)]\n+#![feature(async_closure, param_attrs)]\n #![deny(unused_variables)]\n \n async fn foo_async("}, {"sha": "5ad6e23cf2a63ae8c50a97ccd75bdc816a03d1a1", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_await, async_closure, param_attrs)]\n+#![feature(async_closure, param_attrs)]\n #![deny(unused_variables)]\n \n extern \"C\" {"}, {"sha": "f3474bc1f9f8119a97d3dd8e36b1a1dcdf4d96a5", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::pin::Pin;\n use std::task::{Context, Poll};\n "}, {"sha": "a585b4fdbe608f974c673070d1eecd71e7ec2db9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:48\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`"}, {"sha": "0afe631f1e3fc03921e8539f2eee46ca69cc546f", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "2fb152475a1effdf8332d70448c18a5c13e4ecd8", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,17 +1,17 @@\n error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:16\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n    |                |\n    |                ...but this borrow...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:26\n+note: ...can't outlive the lifetime '_ as defined on the method body at 8:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "e53d91c360489c1f5e6ac7e627f70d23e1faae80", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:50\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          -                       ^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n@@ -16,7 +16,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          lifetime `'_` defined here\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:73\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:73\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -                                              ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n@@ -25,15 +25,15 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          lifetime `'_` defined here\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                                          ^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:62\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                  --              -                           ^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`"}, {"sha": "f42337d53406216a492778bf9691a8c4306b8b17", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "57ad026bdcf975d2cc7111d2d894d1bced6c0276", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          ----               ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:55\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:55\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -----                        ^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                  -----                   ^^^"}, {"sha": "9743c13909658b7fa8b4cc2645d1737b257423ba", "filename": "src/test/ui/self/elision/alias-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "fa5968de5acc22db778ab62e4570bc9ee25e9dd3", "filename": "src/test/ui/self/elision/assoc-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "cc5badaaa6ef6836852eeb1736d38004f12b7d84", "filename": "src/test/ui/self/elision/lt-alias-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "f060800e4da5214a0db9cfe3d7c018199a749a0f", "filename": "src/test/ui/self/elision/lt-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "998178dde1df18d8b05351da863c645a0ca8a830", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:15:42\n+  --> $DIR/lt-ref-self-async.rs:13:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:15:47\n+  --> $DIR/lt-ref-self-async.rs:13:47\n    |\n LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n    |  _______________________-_______________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:21:48\n+  --> $DIR/lt-ref-self-async.rs:19:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:21:53\n+  --> $DIR/lt-ref-self-async.rs:19:53\n    |\n LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |  _____________________________-_______________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:25:57\n+  --> $DIR/lt-ref-self-async.rs:23:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:25:62\n+  --> $DIR/lt-ref-self-async.rs:23:62\n    |\n LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+  --> $DIR/lt-ref-self-async.rs:27:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:29:62\n+  --> $DIR/lt-ref-self-async.rs:27:62\n    |\n LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:33:66\n+  --> $DIR/lt-ref-self-async.rs:31:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:33:71\n+  --> $DIR/lt-ref-self-async.rs:31:71\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:37:62\n+  --> $DIR/lt-ref-self-async.rs:35:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:37:67\n+  --> $DIR/lt-ref-self-async.rs:35:67\n    |\n LL |       async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |  _________________________________________-_________________________^"}, {"sha": "e3ca0c2e2dd9d6a33e4d84c7072c9cc575ff41d7", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "2bc64bdf1f7a2cee037e3ef27a17ee304ca5cf53", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:15:42\n+  --> $DIR/lt-ref-self-async.rs:13:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:21:48\n+  --> $DIR/lt-ref-self-async.rs:19:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:25:57\n+  --> $DIR/lt-ref-self-async.rs:23:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+  --> $DIR/lt-ref-self-async.rs:27:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:33:66\n+  --> $DIR/lt-ref-self-async.rs:31:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:37:62\n+  --> $DIR/lt-ref-self-async.rs:35:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ^^^^"}, {"sha": "42647b82ef8e73c7c8fac93128c14834ae276c5f", "filename": "src/test/ui/self/elision/lt-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "dc5a53b89d78622bd0e69f17e12484176f526237", "filename": "src/test/ui/self/elision/lt-struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "be073c6edbad55bd5ed25b97e7a2208827b4db37", "filename": "src/test/ui/self/elision/multiple-ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "4b02c2fd00c86fad81d11aad9dff88cb98f11be7", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "258e27b7cb3bc0fb3c27f81b984e7cfb60d75ed1", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "5f9ccf3bc7f2bbcaa543d4bc9e97c8fb3a9ed0c5", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "97bc80509dfea51634176f5865e3f8edd5075ef6", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:15:46\n+  --> $DIR/ref-mut-self-async.rs:13:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:15:51\n+  --> $DIR/ref-mut-self-async.rs:13:51\n    |\n LL |       async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |  _______________________-___________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:21:52\n+  --> $DIR/ref-mut-self-async.rs:19:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:21:57\n+  --> $DIR/ref-mut-self-async.rs:19:57\n    |\n LL |       async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |  _____________________________-___________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:25:61\n+  --> $DIR/ref-mut-self-async.rs:23:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:25:66\n+  --> $DIR/ref-mut-self-async.rs:23:66\n    |\n LL |       async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |  _____________________________________-____________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+  --> $DIR/ref-mut-self-async.rs:27:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:29:66\n+  --> $DIR/ref-mut-self-async.rs:27:66\n    |\n LL |       async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |  _____________________________________-____________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:33:70\n+  --> $DIR/ref-mut-self-async.rs:31:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:33:75\n+  --> $DIR/ref-mut-self-async.rs:31:75\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_____________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:37:70\n+  --> $DIR/ref-mut-self-async.rs:35:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:37:75\n+  --> $DIR/ref-mut-self-async.rs:35:75\n    |\n LL |       async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_____________________________^"}, {"sha": "2ca14800a7556ce689d97e95c924a3753fbf07e9", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "39a1b30ca53296151b465d4c0e164e56dc0a4aa9", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:15:46\n+  --> $DIR/ref-mut-self-async.rs:13:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:21:52\n+  --> $DIR/ref-mut-self-async.rs:19:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:25:61\n+  --> $DIR/ref-mut-self-async.rs:23:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+  --> $DIR/ref-mut-self-async.rs:27:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:33:70\n+  --> $DIR/ref-mut-self-async.rs:31:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:37:70\n+  --> $DIR/ref-mut-self-async.rs:35:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^"}, {"sha": "2905a022e5d6ee0352f10ceeeefb1728110ba6f9", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:15:56\n+  --> $DIR/ref-mut-struct-async.rs:13:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:15:61\n+  --> $DIR/ref-mut-struct-async.rs:13:61\n    |\n LL |       async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |  _______________________________-_____________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:19:65\n+  --> $DIR/ref-mut-struct-async.rs:17:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:19:70\n+  --> $DIR/ref-mut-struct-async.rs:17:70\n    |\n LL |       async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-______________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:23:65\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:23:70\n+  --> $DIR/ref-mut-struct-async.rs:21:70\n    |\n LL |       async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-______________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:27:74\n+  --> $DIR/ref-mut-struct-async.rs:25:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:27:79\n+  --> $DIR/ref-mut-struct-async.rs:25:79\n    |\n LL |       async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-_______________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:31:74\n+  --> $DIR/ref-mut-struct-async.rs:29:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:31:79\n+  --> $DIR/ref-mut-struct-async.rs:29:79\n    |\n LL |       async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-_______________________________^"}, {"sha": "a671116de25431241a3ff729a36e08a06af0323a", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "fe4a636ada66898a2d045305534e6099ea5e3d8b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:15:56\n+  --> $DIR/ref-mut-struct-async.rs:13:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:19:65\n+  --> $DIR/ref-mut-struct-async.rs:17:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:23:65\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:27:74\n+  --> $DIR/ref-mut-struct-async.rs:25:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:31:74\n+  --> $DIR/ref-mut-struct-async.rs:29:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ^^^^"}, {"sha": "0eee56654f7d19692e89ba40bdfd234ed26479b6", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:24:42\n+  --> $DIR/ref-self-async.rs:22:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:24:47\n+  --> $DIR/ref-self-async.rs:22:47\n    |\n LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n    |  _______________________-_______________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:30:48\n+  --> $DIR/ref-self-async.rs:28:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:30:53\n+  --> $DIR/ref-self-async.rs:28:53\n    |\n LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |  _____________________________-_______________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:34:57\n+  --> $DIR/ref-self-async.rs:32:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:34:62\n+  --> $DIR/ref-self-async.rs:32:62\n    |\n LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:38:57\n+  --> $DIR/ref-self-async.rs:36:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:38:62\n+  --> $DIR/ref-self-async.rs:36:62\n    |\n LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:42:66\n+  --> $DIR/ref-self-async.rs:40:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:42:71\n+  --> $DIR/ref-self-async.rs:40:71\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:46:66\n+  --> $DIR/ref-self-async.rs:44:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:46:71\n+  --> $DIR/ref-self-async.rs:44:71\n    |\n LL |       async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -119,15 +119,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:50:69\n+  --> $DIR/ref-self-async.rs:48:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                                     ^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:50:73\n+  --> $DIR/ref-self-async.rs:48:73\n    |\n LL |       async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |  ____________________________________________-____________________________^"}, {"sha": "06f3b127b216a90ee0bc85188e2e1a5d945a6033", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "2f9e2a01e347cee1030cfb1bbe2f15167041a684", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:24:42\n+  --> $DIR/ref-self-async.rs:22:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:30:48\n+  --> $DIR/ref-self-async.rs:28:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:34:57\n+  --> $DIR/ref-self-async.rs:32:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:38:57\n+  --> $DIR/ref-self-async.rs:36:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:42:66\n+  --> $DIR/ref-self-async.rs:40:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:46:66\n+  --> $DIR/ref-self-async.rs:44:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -53,7 +53,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:50:69\n+  --> $DIR/ref-self-async.rs:48:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ^^^"}, {"sha": "8508e42264b4a797514505ad824bd76311e37080", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:15:52\n+  --> $DIR/ref-struct-async.rs:13:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:15:57\n+  --> $DIR/ref-struct-async.rs:13:57\n    |\n LL |       async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |  _______________________________-_________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:19:61\n+  --> $DIR/ref-struct-async.rs:17:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:19:66\n+  --> $DIR/ref-struct-async.rs:17:66\n    |\n LL |       async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-__________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:23:61\n+  --> $DIR/ref-struct-async.rs:21:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:23:66\n+  --> $DIR/ref-struct-async.rs:21:66\n    |\n LL |       async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-__________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:27:70\n+  --> $DIR/ref-struct-async.rs:25:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:27:75\n+  --> $DIR/ref-struct-async.rs:25:75\n    |\n LL |       async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-___________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:31:66\n+  --> $DIR/ref-struct-async.rs:29:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:31:71\n+  --> $DIR/ref-struct-async.rs:29:71\n    |\n LL |       async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |  ___________________________________________-___________________________^"}, {"sha": "94eaeedc734ff403b4e70d5041e8b0b325d97cc5", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "222e27ebf0d97bd352d7a9814c5d87868516aaa2", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:15:52\n+  --> $DIR/ref-struct-async.rs:13:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:19:61\n+  --> $DIR/ref-struct-async.rs:17:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:23:61\n+  --> $DIR/ref-struct-async.rs:21:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:27:70\n+  --> $DIR/ref-struct-async.rs:25:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:31:66\n+  --> $DIR/ref-struct-async.rs:29:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ^^^^"}, {"sha": "e1379bfaf2e491faad3b29b14a2035e49c2fc755", "filename": "src/test/ui/self/elision/self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "4a38a2164c82a6181fe23fb375aae60b9328b88f", "filename": "src/test/ui/self/elision/struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "c3c6e56582d9f25af18404520bdb2dc113afc35e", "filename": "src/test/ui/self/self_lifetime-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7e7c2fd3dc5646067564da62533dc70540a460/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs?ref=3f7e7c2fd3dc5646067564da62533dc70540a460", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Foo<'a>(&'a ());\n impl<'a> Foo<'a> {\n     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }"}]}