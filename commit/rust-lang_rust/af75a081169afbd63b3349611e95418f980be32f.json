{"sha": "af75a081169afbd63b3349611e95418f980be32f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNzVhMDgxMTY5YWZiZDYzYjMzNDk2MTFlOTU0MThmOTgwYmUzMmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-22T11:58:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-22T11:58:11Z"}, "message": "Merge #6314\n\n6314: generate assist respect cfg attributes  r=matklad a=bnjjj\n\nclose #6312\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "6ad563f2ac83baba8eb14bee50e4e9d649bcac45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad563f2ac83baba8eb14bee50e4e9d649bcac45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af75a081169afbd63b3349611e95418f980be32f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkXPTCRBK7hj4Ov3rIwAAdHIIABiK8YbMAmaWantZUZRpMO3e\nWYXNaBkK+cCkB/JS1DTeTc0FqZRCBIMaVQSi6+UhQCZFl1Et/PS0RKILjYhZ4RIi\nR5LC5/kkbvPIxh8kI24IIKjJNXPrk3iTNaNGyh8yy/3gtDIqM2eaFAj4ZzY6kZzW\n+kv23w2I7+uJ8CXkJPeeAFQM48LP5yJxOyY1ZF/KRFArptQxOIfHj1J25QP0ROAQ\nZEcbSA/Hgp22Dn/ZOxV7v7vRvAH92yO05ZsX/JEH5n1avo7UqdAFzW6qJUlx9xbB\nGGQgwOkq58d+mayRDelGZjQfgcTZVIDr389gl7KZmWsTiDKhTl+ydeom8aVQ244=\n=7cyq\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ad563f2ac83baba8eb14bee50e4e9d649bcac45\nparent 9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030\nparent f1fda434853c8b68599eeca7ab4cfb822ab3da1d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603367891 +0000\ncommitter GitHub <noreply@github.com> 1603367891 +0000\n\nMerge #6314\n\n6314: generate assist respect cfg attributes  r=matklad a=bnjjj\n\nclose #6312\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af75a081169afbd63b3349611e95418f980be32f", "html_url": "https://github.com/rust-lang/rust/commit/af75a081169afbd63b3349611e95418f980be32f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af75a081169afbd63b3349611e95418f980be32f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030", "html_url": "https://github.com/rust-lang/rust/commit/9eb6cbb80b7d2ccf196745f8e53fc22ae0f73030"}, {"sha": "f1fda434853c8b68599eeca7ab4cfb822ab3da1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fda434853c8b68599eeca7ab4cfb822ab3da1d", "html_url": "https://github.com/rust-lang/rust/commit/f1fda434853c8b68599eeca7ab4cfb822ab3da1d"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "114974465e1063ac12e8d2ffea23164c10416ebd", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/af75a081169afbd63b3349611e95418f980be32f/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af75a081169afbd63b3349611e95418f980be32f/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=af75a081169afbd63b3349611e95418f980be32f", "patch": "@@ -1,6 +1,6 @@\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner};\n+use syntax::ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -27,6 +27,7 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n+\n     acc.add(\n         AssistId(\"generate_impl\", AssistKind::Generate),\n         format!(\"Generate impl for `{}`\", name),\n@@ -35,7 +36,15 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n             let type_params = nominal.generic_param_list();\n             let start_offset = nominal.syntax().text_range().end();\n             let mut buf = String::new();\n-            buf.push_str(\"\\n\\nimpl\");\n+            buf.push_str(\"\\n\\n\");\n+            nominal\n+                .attrs()\n+                .filter(|attr| {\n+                    attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false)\n+                })\n+                .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+\n+            buf.push_str(\"impl\");\n             if let Some(type_params) = &type_params {\n                 format_to!(buf, \"{}\", type_params.syntax());\n             }\n@@ -91,6 +100,35 @@ mod tests {\n             \"struct Foo<'a, T: Foo<'a>> {<|>}\",\n             \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n    $0\\n}\",\n         );\n+        check_assist(\n+            generate_impl,\n+            r#\"\n+            #[cfg(feature = \"foo\")]\n+            struct Foo<'a, T: Foo<'a>> {<|>}\"#,\n+            r#\"\n+            #[cfg(feature = \"foo\")]\n+            struct Foo<'a, T: Foo<'a>> {}\n+\n+            #[cfg(feature = \"foo\")]\n+            impl<'a, T: Foo<'a>> Foo<'a, T> {\n+                $0\n+            }\"#,\n+        );\n+\n+        check_assist(\n+            generate_impl,\n+            r#\"\n+            #[cfg(not(feature = \"foo\"))]\n+            struct Foo<'a, T: Foo<'a>> {<|>}\"#,\n+            r#\"\n+            #[cfg(not(feature = \"foo\"))]\n+            struct Foo<'a, T: Foo<'a>> {}\n+\n+            #[cfg(not(feature = \"foo\"))]\n+            impl<'a, T: Foo<'a>> Foo<'a, T> {\n+                $0\n+            }\"#,\n+        );\n     }\n \n     #[test]"}]}