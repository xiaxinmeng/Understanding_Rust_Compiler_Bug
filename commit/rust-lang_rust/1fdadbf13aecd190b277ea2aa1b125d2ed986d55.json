{"sha": "1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZGFkYmYxM2FlY2QxOTBiMjc3ZWEyYWExYjEyNWQyZWQ5ODZkNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-24T21:54:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-24T21:54:52Z"}, "message": "Auto merge of #82159 - BoxyUwU:uwu, r=varkor\n\nUse correct param_env in conservative_is_privately_uninhabited\n\ncc `@lcnr`\nr? `@varkor` since this is your FIXME that was removed ^^", "tree": {"sha": "aeafe7efa86c189ea34cda3ef8d91720d51cd24d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeafe7efa86c189ea34cda3ef8d91720d51cd24d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "html_url": "https://github.com/rust-lang/rust/commit/1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8486b64b0c87dabd045453b6c81500015d122d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8486b64b0c87dabd045453b6c81500015d122d6", "html_url": "https://github.com/rust-lang/rust/commit/a8486b64b0c87dabd045453b6c81500015d122d6"}, {"sha": "42cbfd63460a752ec5e57e88a180d7e3268521a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/42cbfd63460a752ec5e57e88a180d7e3268521a9", "html_url": "https://github.com/rust-lang/rust/commit/42cbfd63460a752ec5e57e88a180d7e3268521a9"}], "stats": {"total": 188, "additions": 131, "deletions": 57}, "files": [{"sha": "a1c45c0b35c7be0a1c2f32b222ee1333b172f564", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -1603,4 +1603,14 @@ rustc_queries! {\n     query normalize_opaque_types(key: &'tcx ty::List<ty::Predicate<'tcx>>) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n         desc { \"normalizing opaque types in {:?}\", key }\n     }\n+\n+    /// Checks whether a type is definitely uninhabited. This is\n+    /// conservative: for some types that are uninhabited we return `false`,\n+    /// but we only return `true` for types that are definitely uninhabited.\n+    /// `ty.conservative_is_privately_uninhabited` implies that any value of type `ty`\n+    /// will be `Abi::Uninhabited`. (Note that uninhabited types may have nonzero\n+    /// size, to account for partial initialisation. See #49298 for details.)\n+    query conservative_is_privately_uninhabited(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+        desc { \"conservatively checking if {:?} is privately uninhabited\", key }\n+    }\n }"}, {"sha": "725c144257c4cb1a005a10707ebe215caa7e12e8", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -232,7 +232,7 @@ fn layout_raw<'tcx>(\n             let layout = cx.layout_raw_uncached(ty);\n             // Type-level uninhabitedness should always imply ABI uninhabitedness.\n             if let Ok(layout) = layout {\n-                if ty.conservative_is_privately_uninhabited(tcx) {\n+                if tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {\n                     assert!(layout.abi.is_uninhabited());\n                 }\n             }\n@@ -584,11 +584,12 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 let size =\n                     element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow(ty))?;\n \n-                let abi = if count != 0 && ty.conservative_is_privately_uninhabited(tcx) {\n-                    Abi::Uninhabited\n-                } else {\n-                    Abi::Aggregate { sized: true }\n-                };\n+                let abi =\n+                    if count != 0 && tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {\n+                        Abi::Uninhabited\n+                    } else {\n+                        Abi::Aggregate { sized: true }\n+                    };\n \n                 let largest_niche = if count != 0 { element.largest_niche.clone() } else { None };\n "}, {"sha": "a7bcc198f02c99767fd9d70743c809635620273f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -1697,53 +1697,6 @@ impl<'tcx> TyS<'tcx> {\n         matches!(self.kind(), Never)\n     }\n \n-    /// Checks whether a type is definitely uninhabited. This is\n-    /// conservative: for some types that are uninhabited we return `false`,\n-    /// but we only return `true` for types that are definitely uninhabited.\n-    /// `ty.conservative_is_privately_uninhabited` implies that any value of type `ty`\n-    /// will be `Abi::Uninhabited`. (Note that uninhabited types may have nonzero\n-    /// size, to account for partial initialisation. See #49298 for details.)\n-    pub fn conservative_is_privately_uninhabited(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        // FIXME(varkor): we can make this less conversative by substituting concrete\n-        // type arguments.\n-        match self.kind() {\n-            ty::Never => true,\n-            ty::Adt(def, _) if def.is_union() => {\n-                // For now, `union`s are never considered uninhabited.\n-                false\n-            }\n-            ty::Adt(def, _) => {\n-                // Any ADT is uninhabited if either:\n-                // (a) It has no variants (i.e. an empty `enum`);\n-                // (b) Each of its variants (a single one in the case of a `struct`) has at least\n-                //     one uninhabited field.\n-                def.variants.iter().all(|var| {\n-                    var.fields.iter().any(|field| {\n-                        tcx.type_of(field.did).conservative_is_privately_uninhabited(tcx)\n-                    })\n-                })\n-            }\n-            ty::Tuple(..) => {\n-                self.tuple_fields().any(|ty| ty.conservative_is_privately_uninhabited(tcx))\n-            }\n-            ty::Array(ty, len) => {\n-                match len.try_eval_usize(tcx, ParamEnv::empty()) {\n-                    Some(0) | None => false,\n-                    // If the array is definitely non-empty, it's uninhabited if\n-                    // the type of its elements is uninhabited.\n-                    Some(1..) => ty.conservative_is_privately_uninhabited(tcx),\n-                }\n-            }\n-            ty::Ref(..) => {\n-                // References to uninitialised memory is valid for any type, including\n-                // uninhabited types, in unsafe code, so we treat all references as\n-                // inhabited.\n-                false\n-            }\n-            _ => false,\n-        }\n-    }\n-\n     #[inline]\n     pub fn is_primitive(&self) -> bool {\n         self.kind().is_primitive()"}, {"sha": "aa946fdafa912f2e15996e993cdc4f2b36cd6bd3", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -1734,7 +1734,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             None => {\n-                if !sig.output().conservative_is_privately_uninhabited(self.tcx()) {\n+                if !self\n+                    .tcx()\n+                    .conservative_is_privately_uninhabited(self.param_env.and(sig.output()))\n+                {\n                     span_mirbug!(self, term, \"call to converging function {:?} w/o dest\", sig);\n                 }\n             }"}, {"sha": "9f996e8452835260e16f48225256801b592b109d", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -1007,9 +1007,9 @@ fn insert_panic_block<'tcx>(\n     assert_block\n }\n \n-fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n+fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n     // Returning from a function with an uninhabited return type is undefined behavior.\n-    if body.return_ty().conservative_is_privately_uninhabited(tcx) {\n+    if tcx.conservative_is_privately_uninhabited(param_env.and(body.return_ty())) {\n         return false;\n     }\n \n@@ -1320,7 +1320,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // `storage_liveness` tells us which locals have live storage at suspension points\n         let (remap, layout, storage_liveness) = compute_layout(liveness_info, body);\n \n-        let can_return = can_return(tcx, body);\n+        let can_return = can_return(tcx, body, tcx.param_env(body.source.def_id()));\n \n         // Run the transformation which converts Places from Local to generator struct\n         // accesses for locals in `remap`."}, {"sha": "aa5d3388401ae7651283547e0da3d52108c6e0db", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -5,6 +5,8 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "29f1761b84d2b3e54b4bf5d4340535cf452ab0a4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -481,6 +481,63 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     fn_like.asyncness()\n }\n \n+/// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead.\n+#[instrument(level = \"debug\", skip(tcx))]\n+pub fn conservative_is_privately_uninhabited_raw<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env_and: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+) -> bool {\n+    let (param_env, ty) = param_env_and.into_parts();\n+    match ty.kind() {\n+        ty::Never => {\n+            debug!(\"ty::Never =>\");\n+            true\n+        }\n+        ty::Adt(def, _) if def.is_union() => {\n+            debug!(\"ty::Adt(def, _) if def.is_union() =>\");\n+            // For now, `union`s are never considered uninhabited.\n+            false\n+        }\n+        ty::Adt(def, substs) => {\n+            debug!(\"ty::Adt(def, _) if def.is_not_union() =>\");\n+            // Any ADT is uninhabited if either:\n+            // (a) It has no variants (i.e. an empty `enum`);\n+            // (b) Each of its variants (a single one in the case of a `struct`) has at least\n+            //     one uninhabited field.\n+            def.variants.iter().all(|var| {\n+                var.fields.iter().any(|field| {\n+                    let ty = tcx.type_of(field.did).subst(tcx, substs);\n+                    tcx.conservative_is_privately_uninhabited(param_env.and(ty))\n+                })\n+            })\n+        }\n+        ty::Tuple(..) => {\n+            debug!(\"ty::Tuple(..) =>\");\n+            ty.tuple_fields().any(|ty| tcx.conservative_is_privately_uninhabited(param_env.and(ty)))\n+        }\n+        ty::Array(ty, len) => {\n+            debug!(\"ty::Array(ty, len) =>\");\n+            match len.try_eval_usize(tcx, param_env) {\n+                Some(0) | None => false,\n+                // If the array is definitely non-empty, it's uninhabited if\n+                // the type of its elements is uninhabited.\n+                Some(1..) => tcx.conservative_is_privately_uninhabited(param_env.and(ty)),\n+            }\n+        }\n+        ty::Ref(..) => {\n+            debug!(\"ty::Ref(..) =>\");\n+            // References to uninitialised memory is valid for any type, including\n+            // uninhabited types, in unsafe code, so we treat all references as\n+            // inhabited.\n+            false\n+        }\n+        _ => {\n+            debug!(\"_ =>\");\n+            false\n+        }\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n@@ -498,6 +555,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n+        conservative_is_privately_uninhabited: conservative_is_privately_uninhabited_raw,\n         ..*providers\n     };\n }"}, {"sha": "d1bffae0d94cb7c145843c92c361f74912bbf819", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This tests that the `conservative_is_privately_uninhabited` fn doesn't cause\n+// ICEs by trying to evaluate `T::ASSOC` with an incorrect `ParamEnv`.\n+\n+trait Foo {\n+    const ASSOC: usize = 1;\n+}\n+\n+struct Iced<T: Foo>(T, [(); T::ASSOC])\n+where\n+    [(); T::ASSOC]: ;\n+\n+impl Foo for u32 {}\n+\n+fn foo<T: Foo>()\n+where\n+    [(); T::ASSOC]: ,\n+{\n+    let _iced: Iced<T> = return;\n+}\n+\n+fn main() {\n+    foo::<u32>();\n+}"}, {"sha": "96dbac1fbef4d0755e2d90701e87ed3e16c738d4", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdadbf13aecd190b277ea2aa1b125d2ed986d55/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs?ref=1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This tests that the `conservative_is_privately_uninhabited` fn doesn't cause\n+// ICEs by trying to evaluate `T::ASSOC` with an incorrect `ParamEnv`.\n+\n+trait Foo {\n+    const ASSOC: usize = 1;\n+}\n+\n+struct Iced<T: Foo>(T, [(); T::ASSOC])\n+where\n+    [(); T::ASSOC]: ;\n+\n+impl Foo for u32 {}\n+\n+fn main() {\n+    let _iced: Iced<u32> = return;\n+}"}]}