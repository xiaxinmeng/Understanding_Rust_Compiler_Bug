{"sha": "8ebca242bc6797647147b1c178f0620f867710ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmNhMjQyYmM2Nzk3NjQ3MTQ3YjFjMTc4ZjA2MjBmODY3NzEwYWM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T18:06:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T18:06:55Z"}, "message": "Rollup merge of #78710 - petrochenkov:macvisit, r=davidtwco\n\nrustc_ast: Do not panic by default when visiting macro calls\n\nPanicking by default made sense when we didn't have HIR or MIR and everything worked on AST, but now all AST visitors run early and majority of them have to deal with macro calls, often by ignoring them.\n\nThe second commit renames `visit_mac` to `visit_mac_call`, the corresponding structures were renamed earlier in https://github.com/rust-lang/rust/pull/69589.", "tree": {"sha": "a7b2dbfa2894ca7bd5048307adc8610b0f8c65a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b2dbfa2894ca7bd5048307adc8610b0f8c65a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebca242bc6797647147b1c178f0620f867710ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqYVACRBK7hj4Ov3rIwAAdHIIAAlPIvJUc407DVElS4atF3rv\n3TdWMyit12XzLCZEQ+KLrAbVlG6f9E/qEMEQSn7dANIH8aQ54eXo1rqqYqntW27a\nk3hRPI65qy8m9ObS9csqB/zzF+OCtNx734mXMjLK9Obl4zz5X0EUBHEiqvBCdobx\nZi78N6/sxoPAJSGRfpv0Hre2eXkU7ydXcRylbAkxgX7QurJYXt2MHlNYvvVCDZ49\nkcbMX1D067Jb27nIzi761DIZB+Y77zcJHFnsfpNc6Whk6WKv4MbivyOPkohldnGF\nSaP5VFantPs6p1UcKYqJ02CpNUmrD46boqsSqgsTj6hRtYEbO/5icOfmIAbKgjI=\n=M/tw\n-----END PGP SIGNATURE-----\n", "payload": "tree a7b2dbfa2894ca7bd5048307adc8610b0f8c65a0\nparent ee1fedf392518ede3ff9940d6ff83ff280b59000\nparent 90fafc8c8ff680fc631a44230d8352d7911e70f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604945215 +0100\ncommitter GitHub <noreply@github.com> 1604945215 +0100\n\nRollup merge of #78710 - petrochenkov:macvisit, r=davidtwco\n\nrustc_ast: Do not panic by default when visiting macro calls\n\nPanicking by default made sense when we didn't have HIR or MIR and everything worked on AST, but now all AST visitors run early and majority of them have to deal with macro calls, often by ignoring them.\n\nThe second commit renames `visit_mac` to `visit_mac_call`, the corresponding structures were renamed earlier in https://github.com/rust-lang/rust/pull/69589.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebca242bc6797647147b1c178f0620f867710ac", "html_url": "https://github.com/rust-lang/rust/commit/8ebca242bc6797647147b1c178f0620f867710ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebca242bc6797647147b1c178f0620f867710ac/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1fedf392518ede3ff9940d6ff83ff280b59000", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1fedf392518ede3ff9940d6ff83ff280b59000", "html_url": "https://github.com/rust-lang/rust/commit/ee1fedf392518ede3ff9940d6ff83ff280b59000"}, {"sha": "90fafc8c8ff680fc631a44230d8352d7911e70f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/90fafc8c8ff680fc631a44230d8352d7911e70f2", "html_url": "https://github.com/rust-lang/rust/commit/90fafc8c8ff680fc631a44230d8352d7911e70f2"}], "stats": {"total": 122, "additions": 29, "deletions": 93}, "files": [{"sha": "7b85d28568bd3fb1969e585d5b2f6a81eb31b2b2", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -210,11 +210,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_local(l, self);\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut MacCall) {\n-        panic!(\"visit_mac disabled by default\");\n-        // N.B., see note about macros above. If you really want a visitor that\n-        // works on macros, use this definition in your trait impl:\n-        //   mut_visit::noop_visit_mac(_mac, self);\n+    fn visit_mac_call(&mut self, mac: &mut MacCall) {\n+        noop_visit_mac(mac, self);\n     }\n \n     fn visit_macro_def(&mut self, def: &mut MacroDef) {\n@@ -494,7 +491,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_id(id);\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n-        TyKind::MacCall(mac) => vis.visit_mac(mac),\n+        TyKind::MacCall(mac) => vis.visit_mac_call(mac),\n     }\n     vis.visit_span(span);\n     visit_lazy_tts(tokens, vis);\n@@ -962,7 +959,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n         }\n-        ItemKind::MacCall(m) => vis.visit_mac(m),\n+        ItemKind::MacCall(m) => vis.visit_mac_call(m),\n         ItemKind::MacroDef(def) => vis.visit_macro_def(def),\n     }\n }\n@@ -991,7 +988,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        AssocItemKind::MacCall(mac) => visitor.visit_mac(mac),\n+        AssocItemKind::MacCall(mac) => visitor.visit_mac_call(mac),\n     }\n     visitor.visit_span(span);\n     visit_lazy_tts(tokens, visitor);\n@@ -1081,7 +1078,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        ForeignItemKind::MacCall(mac) => visitor.visit_mac(mac),\n+        ForeignItemKind::MacCall(mac) => visitor.visit_mac_call(mac),\n     }\n     visitor.visit_span(span);\n     visit_lazy_tts(tokens, visitor);\n@@ -1121,7 +1118,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n             visit_vec(elems, |elem| vis.visit_pat(elem))\n         }\n         PatKind::Paren(inner) => vis.visit_pat(inner),\n-        PatKind::MacCall(mac) => vis.visit_mac(mac),\n+        PatKind::MacCall(mac) => vis.visit_mac_call(mac),\n     }\n     vis.visit_span(span);\n     visit_lazy_tts(tokens, vis);\n@@ -1287,7 +1284,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             }\n             visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));\n         }\n-        ExprKind::MacCall(mac) => vis.visit_mac(mac),\n+        ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n         ExprKind::Struct(path, fields, expr) => {\n             vis.visit_path(path);\n             fields.flat_map_in_place(|field| vis.flat_map_field(field));\n@@ -1350,7 +1347,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n         StmtKind::Empty => smallvec![StmtKind::Empty],\n         StmtKind::MacCall(mut mac) => {\n             let MacCallStmt { mac: mac_, style: _, attrs } = mac.deref_mut();\n-            vis.visit_mac(mac_);\n+            vis.visit_mac_call(mac_);\n             visit_thin_attrs(attrs, vis);\n             smallvec![StmtKind::MacCall(mac)]\n         }"}, {"sha": "8751f09cfcbbe1bb785344c622de967263ff8ab3", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -176,13 +176,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &'ast MacCall) {\n-        panic!(\"visit_mac disabled by default\");\n-        // N.B., see note about macros above.\n-        // if you really want a visitor that\n-        // works on macros, use this\n-        // definition in your trait impl:\n-        // visit::walk_mac(self, _mac)\n+    fn visit_mac_call(&mut self, mac: &'ast MacCall) {\n+        walk_mac(self, mac)\n     }\n     fn visit_mac_def(&mut self, _mac: &'ast MacroDef, _id: NodeId) {\n         // Nothing to do\n@@ -346,7 +341,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        ItemKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        ItemKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n@@ -414,7 +409,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n-        TyKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        TyKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         TyKind::Never | TyKind::CVarArgs => {}\n     }\n }\n@@ -532,7 +527,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         PatKind::Tuple(ref elems) | PatKind::Slice(ref elems) | PatKind::Or(ref elems) => {\n             walk_list!(visitor, visit_pat, elems);\n         }\n-        PatKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        PatKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n     }\n }\n \n@@ -557,7 +552,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             walk_list!(visitor, visit_ty, ty);\n         }\n         ForeignItemKind::MacCall(mac) => {\n-            visitor.visit_mac(mac);\n+            visitor.visit_mac_call(mac);\n         }\n     }\n }\n@@ -662,7 +657,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             walk_list!(visitor, visit_ty, ty);\n         }\n         AssocItemKind::MacCall(mac) => {\n-            visitor.visit_mac(mac);\n+            visitor.visit_mac_call(mac);\n         }\n     }\n }\n@@ -692,7 +687,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n         StmtKind::Empty => {}\n         StmtKind::MacCall(ref mac) => {\n             let MacCallStmt { ref mac, style: _, ref attrs } = **mac;\n-            visitor.visit_mac(mac);\n+            visitor.visit_mac_call(mac);\n             for attr in attrs.iter() {\n                 visitor.visit_attribute(attr);\n             }\n@@ -823,7 +818,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::MacCall(ref mac) => visitor.visit_mac(mac),\n+        ExprKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::InlineAsm(ref ia) => {\n             for (op, _) in &ia.operands {"}, {"sha": "6efc78c88427ee9ac317d41e62d8317d06fe7f99", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -114,9 +114,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &MacCall) {\n+    fn visit_mac_call(&mut self, mac: &MacCall) {\n         self.count += 1;\n-        walk_mac(self, _mac)\n+        walk_mac(self, mac)\n     }\n     fn visit_path(&mut self, path: &Path, _id: NodeId) {\n         self.count += 1;"}, {"sha": "6cef26a13e6b00e3aa469a0fa999dbc3a81af925", "filename": "compiler/rustc_ast_passes/src/show_span.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast_passes%2Fsrc%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_ast_passes%2Fsrc%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fshow_span.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -54,10 +54,6 @@ impl<'a> Visitor<'a> for ShowSpanVisitor<'a> {\n         }\n         visit::walk_ty(self, t);\n     }\n-\n-    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n-        visit::walk_mac(self, mac);\n-    }\n }\n \n pub fn run(span_diagnostic: &rustc_errors::Handler, mode: &str, krate: &ast::Crate) {"}, {"sha": "0642edff6b67817084809fe89a9adcd0343a1ac8", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -358,7 +358,7 @@ fn find_type_parameters(\n             visit::walk_ty(self, ty)\n         }\n \n-        fn visit_mac(&mut self, mac: &ast::MacCall) {\n+        fn visit_mac_call(&mut self, mac: &ast::MacCall) {\n             self.cx.span_err(mac.span(), \"`derive` cannot be used on items with type macros\");\n         }\n     }"}, {"sha": "4e91436199a53f6faad6413ab6392c545961d7b6", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -344,10 +344,6 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         visit::walk_item(self, item);\n         self.in_root = prev_in_root;\n     }\n-\n-    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n-        visit::walk_mac(self, mac)\n-    }\n }\n \n // Creates a new module which looks like:"}, {"sha": "e68b626e22d9ef5ca676a641a6f2cfd872d2ec10", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -130,10 +130,6 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n         }\n         smallvec![P(item)]\n     }\n-\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Do nothing.\n-    }\n }\n \n // Beware, this is duplicated in librustc_passes/entry.rs (with\n@@ -201,10 +197,6 @@ impl<'a> MutVisitor for EntryPointCleaner<'a> {\n \n         smallvec![item]\n     }\n-\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Do nothing.\n-    }\n }\n \n /// Crawl over the crate, inserting test reexports and the test main function"}, {"sha": "a07dd8ede8bbae3439ab64b8d9a853a9bb81e281", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -547,11 +547,6 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n         noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Don't configure interpolated AST (cf. issue #34171).\n-        // Interpolated AST will get configured once the surrounding tokens are parsed.\n-    }\n-\n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n         self.configure_pat(pat);\n         noop_visit_pat(pat, self)"}, {"sha": "8c7a4f06838a249ae329f19e0ab3fa99c718e4c1", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -850,8 +850,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n                 visit::walk_item(self, item);\n             }\n-\n-            fn visit_mac(&mut self, _: &'ast ast::MacCall) {}\n         }\n \n         if !self.cx.ecfg.proc_macro_hygiene() {"}, {"sha": "dde65d998d81b2a3531a7f87a1ee71f06d387d88", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -5,7 +5,6 @@ use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::token::{self, NtTT, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n-use rustc_ast::MacCall;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{pluralize, PResult};\n@@ -27,10 +26,6 @@ impl MutVisitor for Marker {\n     fn visit_span(&mut self, span: &mut Span) {\n         *span = span.apply_mark(self.0, self.1)\n     }\n-\n-    fn visit_mac(&mut self, mac: &mut MacCall) {\n-        mut_visit::noop_visit_mac(mac, self)\n-    }\n }\n \n /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`)."}, {"sha": "be0300bad98bd1aa5f7274d001134a1f051fac17", "filename": "compiler/rustc_expand/src/mut_visit/tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -1,7 +1,7 @@\n use crate::tests::{matches_codepattern, string_to_crate};\n \n use rustc_ast as ast;\n-use rustc_ast::mut_visit::{self, MutVisitor};\n+use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast_pretty::pprust;\n use rustc_span::symbol::Ident;\n use rustc_span::with_default_session_globals;\n@@ -21,9 +21,6 @@ impl MutVisitor for ToZzIdentMutVisitor {\n     fn visit_ident(&mut self, ident: &mut Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }\n-    fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n-        mut_visit::noop_visit_mac(mac, self)\n-    }\n }\n \n // Maybe add to `expand.rs`."}, {"sha": "f0e5826f403fb9689ba32b1baa5d219d9aecde7b", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -385,8 +385,4 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             |item| !matches!(item.kind, ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs),\n         );\n     }\n-\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Do nothing.\n-    }\n }"}, {"sha": "d9ec6d51cdfa83d28a9dc71aa340beefd806433a", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -880,12 +880,6 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             })\n         }\n     }\n-\n-    // in general the pretty printer processes unexpanded code, so\n-    // we override the default `visit_mac` method which panics.\n-    fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n-        noop_visit_mac(mac, self)\n-    }\n }\n \n /// Returns a version string such as \"rustc 1.46.0 (04488afe3 2020-08-24)\""}, {"sha": "08c147ec3ac3f0a23d1775193fb10dfc7acfdf77", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -270,15 +270,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         self.check_id(id);\n     }\n \n-    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n-        // FIXME(#54110): So, this setup isn't really right. I think\n-        // that (a) the librustc_ast visitor ought to be doing this as\n-        // part of `walk_mac`, and (b) we should be calling\n-        // `visit_path`, *but* that would require a `NodeId`, and I\n-        // want to get #53686 fixed quickly. -nmatsakis\n-        ast_visit::walk_path(self, &mac.path);\n-\n+    fn visit_mac_call(&mut self, mac: &'a ast::MacCall) {\n         run_early_pass!(self, check_mac, mac);\n+        ast_visit::walk_mac(self, mac);\n     }\n }\n "}, {"sha": "ee9a6dca5ade985331bcb31ff83e00048851e5ab", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -1,6 +1,6 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n-use rustc_ast::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n+use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::{self as ast, AttrVec, Attribute, FieldPat, MacCall, Pat, PatKind, RangeEnd};\n@@ -570,10 +570,6 @@ impl<'a> Parser<'a> {\n     fn make_all_value_bindings_mutable(pat: &mut P<Pat>) -> bool {\n         struct AddMut(bool);\n         impl MutVisitor for AddMut {\n-            fn visit_mac(&mut self, mac: &mut MacCall) {\n-                noop_visit_mac(mac, self);\n-            }\n-\n             fn visit_pat(&mut self, pat: &mut P<Pat>) {\n                 if let PatKind::Ident(BindingMode::ByValue(m @ Mutability::Not), ..) = &mut pat.kind\n                 {"}, {"sha": "1d02c9aa6375dd5666e40eddf2d703c94c81176c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -336,8 +336,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_lifetime(self, lifetime)\n     }\n \n-    fn visit_mac(&mut self, mac: &'v ast::MacCall) {\n+    fn visit_mac_call(&mut self, mac: &'v ast::MacCall) {\n         self.record(\"MacCall\", Id::None, mac);\n+        ast_visit::walk_mac(self, mac)\n     }\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {"}, {"sha": "30f3781bf7743c5af43c1e324a7715ddf1726729", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -1,4 +1,4 @@\n-// Regression test; used to ICE with 'visit_mac disabled by default' due to a\n+// Regression test; used to ICE with 'visit_mac_call disabled by default' due to a\n // `MutVisitor` in `fn make_all_value_bindings_mutable` (`parse/parser/pat.rs`).\n \n macro_rules! mac1 {"}, {"sha": "6b175490cc8331f2d6cda2efe280079d0d957a9e", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ebca242bc6797647147b1c178f0620f867710ac/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebca242bc6797647147b1c178f0620f867710ac/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=8ebca242bc6797647147b1c178f0620f867710ac", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, MacCall, Pat, PatKind,\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -150,9 +150,6 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             _ => walk_pat(self, pat),\n         }\n     }\n-    fn visit_mac(&mut self, _mac: &MacCall) {\n-        // do not check macs\n-    }\n }\n \n #[must_use]\n@@ -357,9 +354,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, _: &Item) {\n         // do not recurse into inner items\n     }\n-    fn visit_mac(&mut self, _mac: &MacCall) {\n-        // do not check macs\n-    }\n }\n \n impl EarlyLintPass for NonExpressiveNames {"}]}