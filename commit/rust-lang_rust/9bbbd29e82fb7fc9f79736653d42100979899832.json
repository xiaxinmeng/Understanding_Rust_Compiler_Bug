{"sha": "9bbbd29e82fb7fc9f79736653d42100979899832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYmJkMjllODJmYjdmYzlmNzk3MzY2NTNkNDIxMDA5Nzk4OTk4MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T16:58:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T16:58:02Z"}, "message": "Auto merge of #42859 - eddyb:const-size-and-align-of, r=nikomatsakis\n\nImplement const fn {size,align}_of.\n\nFixes #34078.\n\nr? @nikomatsakis", "tree": {"sha": "8f0ddaea23d5ce961f8107ee2f256f0117ac27ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0ddaea23d5ce961f8107ee2f256f0117ac27ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bbbd29e82fb7fc9f79736653d42100979899832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbbd29e82fb7fc9f79736653d42100979899832", "html_url": "https://github.com/rust-lang/rust/commit/9bbbd29e82fb7fc9f79736653d42100979899832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bbbd29e82fb7fc9f79736653d42100979899832/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344f01cf1322d61bad109b503d0e6a1b55d6ed31", "url": "https://api.github.com/repos/rust-lang/rust/commits/344f01cf1322d61bad109b503d0e6a1b55d6ed31", "html_url": "https://github.com/rust-lang/rust/commit/344f01cf1322d61bad109b503d0e6a1b55d6ed31"}, {"sha": "148718b4f32b46a96e339be92102697ad58b170b", "url": "https://api.github.com/repos/rust-lang/rust/commits/148718b4f32b46a96e339be92102697ad58b170b", "html_url": "https://github.com/rust-lang/rust/commit/148718b4f32b46a96e339be92102697ad58b170b"}], "stats": {"total": 210, "additions": 195, "deletions": 15}, "files": [{"sha": "86e5afa4c337f32186c5641d636fa7ffee1b37ac", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -188,10 +188,30 @@ pub fn forget<T>(t: T) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n pub fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n \n+/// Returns the size of a type in bytes.\n+///\n+/// More specifically, this is the offset in bytes between successive\n+/// items of the same type, including alignment padding.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// assert_eq!(4, mem::size_of::<i32>());\n+/// ```\n+#[inline]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+pub const fn size_of<T>() -> usize {\n+    unsafe { intrinsics::size_of::<T>() }\n+}\n+\n /// Returns the size of the pointed-to value in bytes.\n ///\n /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n@@ -279,10 +299,33 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n pub fn align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }\n \n+/// Returns the [ABI]-required minimum alignment of a type.\n+///\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n+///\n+/// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n+///\n+/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// assert_eq!(4, mem::align_of::<i32>());\n+/// ```\n+#[inline]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+pub const fn align_of<T>() -> usize {\n+    unsafe { intrinsics::min_align_of::<T>() }\n+}\n+\n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number."}, {"sha": "2637afdea5bcf17b5d893217ea9104207e3e7a95", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -14,7 +14,7 @@ pub use rustc_const_math::ConstInt;\n use hir;\n use hir::def::Def;\n use hir::def_id::DefId;\n-use ty::TyCtxt;\n+use ty::{TyCtxt, layout};\n use ty::subst::Substs;\n use util::common::ErrorReported;\n use rustc_const_math::*;\n@@ -101,6 +101,7 @@ pub enum ErrKind<'tcx> {\n \n     IndexOpFeatureGated,\n     Math(ConstMathErr),\n+    LayoutError(layout::LayoutError<'tcx>),\n \n     ErroneousReferencedConstant(Box<ConstEvalErr<'tcx>>),\n \n@@ -164,6 +165,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             MiscCatchAll => simple!(\"unsupported constant expr\"),\n             IndexOpFeatureGated => simple!(\"the index operation on const values is unstable\"),\n             Math(ref err) => Simple(err.description().into_cow()),\n+            LayoutError(ref err) => Simple(err.to_string().into_cow()),\n \n             ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),\n "}, {"sha": "72fa858e4cba8cc8f8b4a0ff6739b008e0a709f5", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -25,6 +25,7 @@ use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::DefIdMap;\n \n+use syntax::abi::Abi;\n use syntax::ast;\n use rustc::hir::{self, Expr};\n use syntax_pos::Span;\n@@ -340,6 +341,28 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n               _ => signal!(e, TypeckError),\n           };\n \n+          if tcx.fn_sig(def_id).abi() == Abi::RustIntrinsic {\n+            let layout_of = |ty: Ty<'tcx>| {\n+                ty.layout(tcx, ty::ParamEnv::empty(traits::Reveal::All))\n+                    .map_err(|err| {\n+                        ConstEvalErr { span: e.span, kind: LayoutError(err) }\n+                    })\n+            };\n+            match &tcx.item_name(def_id).as_str()[..] {\n+                \"size_of\" => {\n+                    let size = layout_of(substs.type_at(0))?.size(tcx);\n+                    return Ok(Integral(Usize(ConstUsize::new(size.bytes(),\n+                        tcx.sess.target.uint_type).unwrap())));\n+                }\n+                \"min_align_of\" => {\n+                    let align = layout_of(substs.type_at(0))?.align(tcx);\n+                    return Ok(Integral(Usize(ConstUsize::new(align.abi(),\n+                        tcx.sess.target.uint_type).unwrap())));\n+                }\n+                _ => signal!(e, TypeckError)\n+            }\n+          }\n+\n           let body = if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n             if let Some(fn_like) = FnLikeNode::from_node(tcx.hir.get(node_id)) {\n                 if fn_like.constness() == hir::Constness::Const {"}, {"sha": "9bb0f07aa68ac0fbed57efa502c746e2e3d3f3cc", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -749,14 +749,27 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             self.visit_operand(func, location);\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n-            let (is_shuffle, is_const_fn) = match fn_ty.sty {\n-                ty::TyFnDef(def_id, _) => {\n-                    (self.tcx.fn_sig(def_id).abi() == Abi::PlatformIntrinsic &&\n-                     self.tcx.item_name(def_id).as_str().starts_with(\"simd_shuffle\"),\n-                     self.tcx.is_const_fn(def_id))\n+            let (mut is_shuffle, mut is_const_fn) = (false, false);\n+            if let ty::TyFnDef(def_id, _) = fn_ty.sty {\n+                match self.tcx.fn_sig(def_id).abi() {\n+                    Abi::RustIntrinsic |\n+                    Abi::PlatformIntrinsic => {\n+                        assert!(!self.tcx.is_const_fn(def_id));\n+                        match &self.tcx.item_name(def_id).as_str()[..] {\n+                            \"size_of\" | \"min_align_of\" => is_const_fn = true,\n+\n+                            name if name.starts_with(\"simd_shuffle\") => {\n+                                is_shuffle = true;\n+                            }\n+\n+                            _ => {}\n+                        }\n+                    }\n+                    _ => {\n+                        is_const_fn = self.tcx.is_const_fn(def_id);\n+                    }\n                 }\n-                _ => (false, false)\n-            };\n+            }\n \n             for (i, arg) in args.iter().enumerate() {\n                 self.nest(|this| {"}, {"sha": "468646c1ced8fbdb56736b6d07a68959d3f38877", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -29,7 +29,7 @@ use rustc_const_eval::ConstContext;\n use rustc::middle::const_val::ConstEvalErr;\n use rustc::middle::const_val::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll};\n use rustc::middle::const_val::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp, NonConstPath};\n-use rustc::middle::const_val::ErrKind::{TypeckError, Math};\n+use rustc::middle::const_val::ErrKind::{TypeckError, Math, LayoutError};\n use rustc_const_math::{ConstMathErr, Op};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n@@ -252,6 +252,9 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                 Err(ConstEvalErr { kind: Math(ConstMathErr::Overflow(Op::Shl)), .. }) |\n                 Err(ConstEvalErr { kind: IndexOpFeatureGated, .. }) => {}\n                 Err(ConstEvalErr { kind: TypeckError, .. }) => {}\n+                Err(ConstEvalErr {\n+                    kind: LayoutError(ty::layout::LayoutError::Unknown(_)), ..\n+                }) => {}\n                 Err(msg) => {\n                     self.tcx.sess.add_lint(CONST_ERR,\n                                            ex.id,"}, {"sha": "98e774a29877dd9808acf053ad435b9de0ba55b6", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -22,7 +22,8 @@ use rustc::ty::layout::{self, LayoutTyper};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::subst::{Kind, Substs, Subst};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use {abi, adt, base, machine};\n+use {adt, base, machine};\n+use abi::{self, Abi};\n use callee;\n use builder::Builder;\n use common::{self, CrateContext, const_get_elt, val_ty};\n@@ -339,17 +340,34 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                        func, fn_ty)\n                     };\n \n-                    let mut const_args = IndexVec::with_capacity(args.len());\n+                    let mut arg_vals = IndexVec::with_capacity(args.len());\n                     for arg in args {\n                         match self.const_operand(arg, span) {\n-                            Ok(arg) => { const_args.push(arg); },\n+                            Ok(arg) => { arg_vals.push(arg); },\n                             Err(err) => if failure.is_ok() { failure = Err(err); }\n                         }\n                     }\n                     if let Some((ref dest, target)) = *destination {\n-                        match MirConstContext::trans_def(self.ccx, def_id, substs, const_args) {\n-                            Ok(value) => self.store(dest, value, span),\n-                            Err(err) => if failure.is_ok() { failure = Err(err); }\n+                        if fn_ty.fn_sig(tcx).abi() == Abi::RustIntrinsic {\n+                            let value = match &tcx.item_name(def_id).as_str()[..] {\n+                                \"size_of\" => {\n+                                    let llval = C_uint(self.ccx,\n+                                        self.ccx.size_of(substs.type_at(0)));\n+                                    Const::new(llval, tcx.types.usize)\n+                                }\n+                                \"min_align_of\" => {\n+                                    let llval = C_uint(self.ccx,\n+                                        self.ccx.align_of(substs.type_at(0)));\n+                                    Const::new(llval, tcx.types.usize)\n+                                }\n+                                _ => span_bug!(span, \"{:?} in constant\", terminator.kind)\n+                            };\n+                            self.store(dest, value, span);\n+                        } else {\n+                            match MirConstContext::trans_def(self.ccx, def_id, substs, arg_vals) {\n+                                Ok(value) => self.store(dest, value, span),\n+                                Err(err) => if failure.is_ok() { failure = Err(err); }\n+                            }\n                         }\n                         target\n                     } else {"}, {"sha": "a58be33b1ae6c0be0fa1ab637bfafe6a713f7d85", "filename": "src/test/compile-fail/const-size_of-cycle.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+struct Foo {\n+    bytes: [u8; std::mem::size_of::<Foo>()]\n+    //~^ ERROR unsupported cyclic reference between types/traits detected\n+}\n+\n+fn main() {}"}, {"sha": "06fbe9bf4f63958372c055f193e81dd09fe87a97", "filename": "src/test/run-pass/const-size_of-align_of.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbbd29e82fb7fc9f79736653d42100979899832/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs?ref=9bbbd29e82fb7fc9f79736653d42100979899832", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+use std::mem;\n+\n+// Get around the limitations of CTFE in today's Rust.\n+const fn choice_u64(c: bool, a: u64, b: u64) -> u64 {\n+    (-(c as i64) as u64) & a | (-(!c as i64) as u64) & b\n+}\n+\n+const fn max_usize(a: usize, b: usize) -> usize {\n+    choice_u64(a > b, a as u64, b as u64) as usize\n+}\n+\n+const fn align_to(size: usize, align: usize) -> usize {\n+    (size + (align - 1)) & !(align - 1)\n+}\n+\n+const fn packed_union_size_of<A, B>() -> usize {\n+    max_usize(mem::size_of::<A>(), mem::size_of::<B>())\n+}\n+\n+const fn union_align_of<A, B>() -> usize {\n+    max_usize(mem::align_of::<A>(), mem::align_of::<B>())\n+}\n+\n+const fn union_size_of<A, B>() -> usize {\n+    align_to(packed_union_size_of::<A, B>(), union_align_of::<A, B>())\n+}\n+\n+macro_rules! fake_union {\n+    ($name:ident { $a:ty, $b:ty }) => (\n+        struct $name {\n+            _align: ([$a; 0], [$b; 0]),\n+            _bytes: [u8; union_size_of::<$a, $b>()]\n+        }\n+    )\n+}\n+\n+// Check that we can (poorly) emulate unions by\n+// calling size_of and align_of at compile-time.\n+fake_union!(U { u16, [u8; 3] });\n+\n+fn test(u: U) {\n+    assert_eq!(mem::size_of_val(&u._bytes), 4);\n+}\n+\n+fn main() {\n+    assert_eq!(mem::size_of::<U>(), 4);\n+    assert_eq!(mem::align_of::<U>(), 2);\n+}"}]}