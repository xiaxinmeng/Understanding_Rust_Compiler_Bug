{"sha": "a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTJkMzFlMGE4Y2Q4YzdkODU0OWRhZjQyMWE4Yjc5MWQxMzI1YTQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-14T22:36:36Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-22T00:18:21Z"}, "message": "Replace find_map with manual_find_map", "tree": {"sha": "ea651ca9054ce4a3ed323e4a79b34a4da9517062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea651ca9054ce4a3ed323e4a79b34a4da9517062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "html_url": "https://github.com/rust-lang/rust/commit/a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92bdc4dbbd777f6933f7990f87066147a629c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92bdc4dbbd777f6933f7990f87066147a629c8d", "html_url": "https://github.com/rust-lang/rust/commit/c92bdc4dbbd777f6933f7990f87066147a629c8d"}], "stats": {"total": 190, "additions": 141, "deletions": 49}, "files": [{"sha": "7f2de888d35f0f6604cc4bc769794c1171f3b449", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "patch": "@@ -2036,6 +2036,7 @@ Released 2018-09-13\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n+[`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or"}, {"sha": "b22ddfacf86afe57ccffa91de710e0986ac051a3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "patch": "@@ -746,6 +746,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_FILTER_MAP,\n+        &methods::MANUAL_FIND_MAP,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_COLLECT_RESULT_UNIT,\n         &methods::MAP_FLATTEN,\n@@ -1528,6 +1529,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_FILTER_MAP),\n+        LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n@@ -1826,6 +1828,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INSPECT_FOR_EACH),\n         LintId::of(&methods::MANUAL_FILTER_MAP),\n+        LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SKIP_WHILE_NEXT),"}, {"sha": "9d07858874676990a38343f824d1746221e9918f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "patch": "@@ -477,6 +477,32 @@ declare_clippy_lint! {\n     \"using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.find(_).map(_)` that can be written more simply\n+    /// as `find_map(_)`.\n+    ///\n+    /// **Why is this bad?** Redundant code in the `find` and `map` operations is poor style and\n+    /// less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+     /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// (0_i32..10)\n+    ///     .find(|n| n.checked_add(1).is_some())\n+    ///     .map(|n| n.checked_add(1).unwrap());\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// (0_i32..10).find_map(|n| n.checked_add(1));\n+    /// ```\n+    pub MANUAL_FIND_MAP,\n+    complexity,\n+    \"using `_.find(_).map(_)` in a way that can be written more simply as `find_map(_)`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.filter_map(_).next()`.\n     ///\n@@ -1501,6 +1527,7 @@ impl_lint_pass!(Methods => [\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n     MANUAL_FILTER_MAP,\n+    MANUAL_FIND_MAP,\n     FILTER_MAP_NEXT,\n     FLAT_MAP_IDENTITY,\n     FIND_MAP,\n@@ -1568,10 +1595,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"next\", \"skip_while\"] => lint_skip_while_next(cx, expr, arg_lists[1]),\n             [\"next\", \"iter\"] => lint_iter_next(cx, expr, arg_lists[1]),\n-            [\"map\", \"filter\"] => lint_filter_map(cx, expr),\n+            [\"map\", \"filter\"] => lint_filter_map(cx, expr, false),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1], self.msrv.as_ref()),\n-            [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"find\"] => lint_filter_map(cx, expr, true),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n@@ -3016,12 +3043,12 @@ fn lint_skip_while_next<'tcx>(\n     }\n }\n \n-/// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+/// lint use of `filter().map()` or `find().map()` for `Iterators`\n+fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_find: bool) {\n     if_chain! {\n         if let ExprKind::MethodCall(_, _, [map_recv, map_arg], map_span) = expr.kind;\n         if let ExprKind::MethodCall(_, _, [_, filter_arg], filter_span) = map_recv.kind;\n-        if match_trait_method(cx, expr, &paths::ITERATOR);\n+        if match_trait_method(cx, map_recv, &paths::ITERATOR);\n \n         // filter(|x| ...is_some())...\n         if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n@@ -3078,10 +3105,16 @@ fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n         then {\n             let span = filter_span.to(map_span);\n-            let msg = \"`filter(..).map(..)` can be simplified as `filter_map(..)`\";\n+            let (filter_name, lint) = if is_find {\n+                (\"find\", MANUAL_FIND_MAP)\n+            } else {\n+                (\"filter\", MANUAL_FILTER_MAP)\n+            };\n+            let msg = format!(\"`{}(..).map(..)` can be simplified as `{0}_map(..)`\", filter_name);\n             let to_opt = if is_result { \".ok()\" } else { \"\" };\n-            let sugg = format!(\"filter_map(|{}| {}{})\", map_param_ident, snippet(cx, map_arg.span, \"..\"), to_opt);\n-            span_lint_and_sugg(cx, MANUAL_FILTER_MAP, span, msg, \"try\", sugg, Applicability::MachineApplicable);\n+            let sugg = format!(\"{}_map(|{}| {}{})\", filter_name, map_param_ident,\n+                snippet(cx, map_arg.span, \"..\"), to_opt);\n+            span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n         }\n     }\n }\n@@ -3120,21 +3153,6 @@ fn lint_filter_map_next<'tcx>(\n     }\n }\n \n-/// lint use of `find().map()` for `Iterators`\n-fn lint_find_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _find_args: &'tcx [hir::Expr<'_>],\n-    map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().map()` is an Iterator\n-    if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n-        let msg = \"called `find(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n-        span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n-    }\n-}\n-\n /// lint use of `filter_map().map()` for `Iterators`\n fn lint_filter_map_map<'tcx>(\n     cx: &LateContext<'tcx>,"}, {"sha": "aea3cc62afcc41631213bbafca089acc6f9b72b5", "filename": "tests/ui/find_map.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdc4dbbd777f6933f7990f87066147a629c8d/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=c92bdc4dbbd777f6933f7990f87066147a629c8d", "patch": "@@ -1,26 +0,0 @@\n-error: called `find(..).map(..)` on an `Iterator`\n-  --> $DIR/find_map.rs:20:26\n-   |\n-LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::find-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n-\n-error: called `find(..).map(..)` on an `Iterator`\n-  --> $DIR/find_map.rs:23:29\n-   |\n-LL |       let _: Option<Flavor> = desserts_of_the_week\n-   |  _____________________________^\n-LL | |         .iter()\n-LL | |         .find(|dessert| match *dessert {\n-LL | |             Dessert::Cake(_) => true,\n-...  |\n-LL | |             _ => unreachable!(),\n-LL | |         });\n-   | |__________^\n-   |\n-   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "95e97c4fd1ff4e64941a6e02d406ee40ff48af16", "filename": "tests/ui/manual_find_map.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_find_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).find_map(|a| to_opt(a));\n+\n+    // ref pattern, expect()\n+    let _ = (0..).find_map(|a| to_opt(a));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).find_map(|a| to_res(a).ok());\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .find(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "cd3c82e3b25abbe7a7b0791bf44f5706d1c77e2c", "filename": "tests/ui/manual_find_map.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_find_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).find(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // ref pattern, expect()\n+    let _ = (0..).find(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .find(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "9e7f798df4573bcdda46f0b0e0b5dc3d45f4d908", "filename": "tests/ui/manual_find_map.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a752d31e0a8cd8c7d8549daf421a8b791d1325a4/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=a752d31e0a8cd8c7d8549daf421a8b791d1325a4", "patch": "@@ -0,0 +1,22 @@\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:8:19\n+   |\n+LL |     let _ = (0..).find(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_opt(a))`\n+   |\n+   = note: `-D clippy::manual-find-map` implied by `-D warnings`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:11:19\n+   |\n+LL |     let _ = (0..).find(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_opt(a))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:14:19\n+   |\n+LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n+\n+error: aborting due to 3 previous errors\n+"}]}