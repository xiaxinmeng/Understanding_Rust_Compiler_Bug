{"sha": "1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZGQ0ZGVkYzEzMWQ1Zjk4ZDgyZmVhZmU4MGQ5MmVkMWYzZjZkNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-10T18:47:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-10T18:47:03Z"}, "message": "auto merge of #17920 : thestinger/rust/vec, r=aturon\n\nIntroduce conversions between `Box<[T]>` and `Vec<T>` and use it to reimplement the `vec![]` macro for efficiency.", "tree": {"sha": "18aa940fca2ce459476c5cffb1eae46e4caf9363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18aa940fca2ce459476c5cffb1eae46e4caf9363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "html_url": "https://github.com/rust-lang/rust/commit/1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78a7676898d9f80ab540c6df5d4c9ce35bb50463", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a7676898d9f80ab540c6df5d4c9ce35bb50463", "html_url": "https://github.com/rust-lang/rust/commit/78a7676898d9f80ab540c6df5d4c9ce35bb50463"}, {"sha": "02d976a7f9ae838901b50b64109d90d54619fe4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d976a7f9ae838901b50b64109d90d54619fe4d", "html_url": "https://github.com/rust-lang/rust/commit/02d976a7f9ae838901b50b64109d90d54619fe4d"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "955a1a5068bcf903bc00e0fa73ce58a341c3fe5d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "patch": "@@ -87,6 +87,7 @@\n \n #![doc(primitive = \"slice\")]\n \n+use alloc::boxed::Box;\n use core::cmp;\n use core::mem::size_of;\n use core::mem;\n@@ -298,6 +299,23 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     fn into_vec(self) -> Vec<T> { self.to_vec() }\n }\n \n+#[experimental]\n+pub trait BoxedSlice<T> {\n+    /// Convert `self` into a vector without clones or allocation.\n+    fn into_vec(self) -> Vec<T>;\n+}\n+\n+impl<T> BoxedSlice<T> for Box<[T]> {\n+    #[experimental]\n+    fn into_vec(mut self) -> Vec<T> {\n+        unsafe {\n+            let xs = Vec::from_raw_parts(self.len(), self.len(), self.as_mut_ptr());\n+            mem::forget(self);\n+            xs\n+        }\n+    }\n+}\n+\n /// Extension methods for vectors containing `Clone` elements.\n pub trait ImmutableCloneableVector<T> {\n     /// Partitions the vector into two vectors `(a, b)`, where all\n@@ -2308,6 +2326,13 @@ mod tests {\n         let y: &mut [int] = [];\n         assert!(y.last_mut().is_none());\n     }\n+\n+    #[test]\n+    fn test_into_vec() {\n+        let xs = box [1u, 2, 3];\n+        let ys = xs.into_vec();\n+        assert_eq!(ys.as_slice(), [1u, 2, 3].as_slice());\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "a82856c013d647d7a600bbc4669b9b2320a3786b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "patch": "@@ -14,6 +14,7 @@\n \n use core::prelude::*;\n \n+use alloc::boxed::Box;\n use alloc::heap::{EMPTY, allocate, reallocate, deallocate};\n use core::cmp::max;\n use core::default::Default;\n@@ -757,6 +758,20 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Convert the vector into Box<[T]>.\n+    ///\n+    /// Note that this will drop any excess capacity. Calling this and converting back to a vector\n+    /// with `into_vec()` is equivalent to calling `shrink_to_fit()`.\n+    #[experimental]\n+    pub fn into_boxed_slice(mut self) -> Box<[T]> {\n+        self.shrink_to_fit();\n+        unsafe {\n+            let xs: Box<[T]> = mem::transmute(self.as_mut_slice());\n+            mem::forget(self);\n+            xs\n+        }\n+    }\n+\n     /// Deprecated, call `push` instead\n     #[inline]\n     #[deprecated = \"call .push() instead\"]\n@@ -1734,7 +1749,7 @@ impl<T> MutableSeq<T> for Vec<T> {\n             let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n             if old_size > size { fail!(\"capacity overflow\") }\n             unsafe {\n-                self.ptr = alloc_or_realloc(self.ptr, self.cap * mem::size_of::<T>(), size);\n+                self.ptr = alloc_or_realloc(self.ptr, old_size, size);\n             }\n             self.cap = max(self.cap, 2) * 2;\n         }\n@@ -1758,7 +1773,6 @@ impl<T> MutableSeq<T> for Vec<T> {\n             }\n         }\n     }\n-\n }\n \n /// An iterator that moves out of a vector.\n@@ -2632,6 +2646,13 @@ mod tests {\n         assert!(vec2 == vec!((), (), ()));\n     }\n \n+    #[test]\n+    fn test_into_boxed_slice() {\n+        let xs = vec![1u, 2, 3];\n+        let ys = xs.into_boxed_slice();\n+        assert_eq!(ys.as_slice(), [1u, 2, 3].as_slice());\n+    }\n+\n     #[bench]\n     fn bench_new(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "e2a850c58e4404e39919074fed73fb5a144dfedc", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "patch": "@@ -18,7 +18,6 @@\n //! listener (socket server) implements the `Listener` and `Acceptor` traits.\n \n use clone::Clone;\n-use collections::MutableSeq;\n use io::IoResult;\n use iter::Iterator;\n use slice::ImmutableSlice;"}, {"sha": "13adfeecf853610a72880c2e31da6e87911e41e0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "patch": "@@ -272,7 +272,9 @@ mod std {\n     // The test runner calls ::std::os::args() but really wants realstd\n     #[cfg(test)] pub use realstd::os as os;\n     // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n-    #[cfg(test)] pub use slice;\n+    //\n+    // It is also used in vec![]\n+    pub use slice;\n \n-    pub use collections; // vec!() uses MutableSeq\n+    pub use boxed; // used for vec![]\n }"}, {"sha": "1ad3d6eed942068bdb1758434ec19a37e2144749", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "patch": "@@ -323,16 +323,14 @@ macro_rules! try(\n \n /// Create a `std::vec::Vec` containing the arguments.\n #[macro_export]\n-macro_rules! vec(\n-    ($($e:expr),*) => ({\n-        // leading _ to allow empty construction without a warning.\n-        let mut _temp = ::std::vec::Vec::new();\n-        $(_temp.push($e);)*\n-        _temp\n+macro_rules! vec[\n+    ($($x:expr),*) => ({\n+        use std::slice::BoxedSlice;\n+        let xs: ::std::boxed::Box<[_]> = box [$($x),*];\n+        xs.into_vec()\n     });\n-    ($($e:expr),+,) => (vec!($($e),+))\n-)\n-\n+    ($($x:expr,)*) => (vec![$($x),*])\n+]\n \n /// A macro to select an event from a number of receivers.\n ///"}, {"sha": "db9f3114cda14b255dabaf4638fa51b1dd46fc44", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add4dedc131d5f98d82feafe80d92ed1f3f6d49/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "patch": "@@ -88,7 +88,7 @@\n #[doc(no_inline)] pub use slice::{MutableCloneableSlice, MutableOrdSlice};\n #[doc(no_inline)] pub use slice::{ImmutableSlice, MutableSlice};\n #[doc(no_inline)] pub use slice::{ImmutablePartialEqSlice, ImmutableOrdSlice};\n-#[doc(no_inline)] pub use slice::{AsSlice, VectorVector};\n+#[doc(no_inline)] pub use slice::{AsSlice, VectorVector, BoxedSlice};\n #[doc(no_inline)] pub use slice::MutableSliceAllocating;\n #[doc(no_inline)] pub use string::String;\n #[doc(no_inline)] pub use vec::Vec;"}]}