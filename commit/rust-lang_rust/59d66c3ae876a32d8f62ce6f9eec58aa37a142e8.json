{"sha": "59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDY2YzNhZTg3NmEzMmQ4ZjYyY2U2ZjllZWM1OGFhMzdhMTQyZTg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-02T01:49:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-02T01:49:15Z"}, "message": "Merge pull request #1453 from topecongiro/bug/empty-struct-with-comment\n\nHandle empty tuple struct def with comment properly", "tree": {"sha": "5a26427411f082f8885d54d4e75b34649ce35df6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a26427411f082f8885d54d4e75b34649ce35df6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "html_url": "https://github.com/rust-lang/rust/commit/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c68e5a8e37d20dd39a2792c6e1575bb64b62bf84", "url": "https://api.github.com/repos/rust-lang/rust/commits/c68e5a8e37d20dd39a2792c6e1575bb64b62bf84", "html_url": "https://github.com/rust-lang/rust/commit/c68e5a8e37d20dd39a2792c6e1575bb64b62bf84"}, {"sha": "93dae1a34d3e2d930b861fbf9f4818e3e0656ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/93dae1a34d3e2d930b861fbf9f4818e3e0656ae2", "html_url": "https://github.com/rust-lang/rust/commit/93dae1a34d3e2d930b861fbf9f4818e3e0656ae2"}], "stats": {"total": 128, "additions": 76, "deletions": 52}, "files": [{"sha": "8ea97b177e86013d9e9a2ad4b190af12b58c242b", "filename": "src/items.rs", "status": "modified", "additions": 74, "deletions": 50, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "patch": "@@ -908,7 +908,6 @@ fn format_struct_struct(context: &RewriteContext,\n     };\n     result.push_str(&generics_str);\n \n-    // FIXME(#919): properly format empty structs and their comments.\n     if fields.is_empty() {\n         let snippet = context.snippet(mk_sp(body_lo, span.hi - BytePos(1)));\n         if snippet.trim().is_empty() {\n@@ -995,9 +994,8 @@ fn format_tuple_struct(context: &RewriteContext,\n     let header_str = format_header(item_name, ident, vis);\n     result.push_str(&header_str);\n \n-    // FIXME(#919): don't lose comments on empty tuple structs.\n     let body_lo = if fields.is_empty() {\n-        span.hi\n+        context.codemap.span_after(span, \"(\")\n     } else {\n         fields[0].span.lo\n     };\n@@ -1027,58 +1025,84 @@ fn format_tuple_struct(context: &RewriteContext,\n         None => \"\".to_owned(),\n     };\n \n-    let (tactic, item_indent) = match context.config.fn_args_layout {\n-        IndentStyle::Visual => {\n-            // 1 = `(`\n-            (ListTactic::HorizontalVertical, offset.block_only() + result.len() + 1)\n-        }\n-        IndentStyle::Block => {\n-            (ListTactic::HorizontalVertical, offset.block_only().block_indent(&context.config))\n-        }\n-    };\n-    // 3 = `();`\n-    let item_budget = try_opt!(context\n-                                   .config\n-                                   .max_width\n-                                   .checked_sub(item_indent.width() + 3));\n-    let shape = Shape::legacy(item_budget, item_indent);\n-\n-    let items = itemize_list(context.codemap,\n-                             fields.iter(),\n-                             \")\",\n-                             |field| {\n-                                 // Include attributes and doc comments, if present\n-                                 if !field.attrs.is_empty() {\n-                                     field.attrs[0].span.lo\n-                                 } else {\n-                                     field.span.lo\n-                                 }\n-                             },\n-                             |field| field.ty.span.hi,\n-                             |field| field.rewrite(context, shape),\n-                             context.codemap.span_after(span, \"(\"),\n-                             span.hi);\n-    let body = try_opt!(list_helper(items, shape, context.config, tactic));\n-\n-    if context.config.fn_args_layout == IndentStyle::Visual || !body.contains('\\n') {\n+    if fields.is_empty() {\n         result.push('(');\n-        if context.config.spaces_within_parens && body.len() > 0 {\n-            result.push(' ');\n+        let snippet = context.snippet(mk_sp(body_lo, context.codemap.span_before(span, \")\")));\n+        if snippet.is_empty() {\n+            // `struct S ()`\n+        } else if snippet\n+                      .trim_right_matches(&[' ', '\\t'][..])\n+                      .ends_with('\\n') {\n+            result.push_str(&snippet.trim_right());\n+            result.push('\\n');\n+            result.push_str(&offset.to_string(context.config));\n+        } else {\n+            result.push_str(&snippet);\n         }\n+        result.push(')');\n+    } else {\n+        let (tactic, item_indent) = match context.config.fn_args_layout {\n+            IndentStyle::Visual => {\n+                // 1 = `(`\n+                (ListTactic::HorizontalVertical, offset.block_only() + result.len() + 1)\n+            }\n+            IndentStyle::Block => {\n+                (ListTactic::HorizontalVertical, offset.block_only().block_indent(&context.config))\n+            }\n+        };\n+        // 3 = `();`\n+        let item_budget = try_opt!(context\n+                                       .config\n+                                       .max_width\n+                                       .checked_sub(item_indent.width() + 3));\n+\n+        let items =\n+            itemize_list(context.codemap,\n+                         fields.iter(),\n+                         \")\",\n+                         |field| {\n+                             // Include attributes and doc comments, if present\n+                             if !field.attrs.is_empty() {\n+                                 field.attrs[0].span.lo\n+                             } else {\n+                                 field.span.lo\n+                             }\n+                         },\n+                         |field| field.ty.span.hi,\n+                         |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n+                         context.codemap.span_after(span, \"(\"),\n+                         span.hi);\n+        let body_budget = try_opt!(context\n+                                       .config\n+                                       .max_width\n+                                       .checked_sub(offset.block_only().width() + result.len() +\n+                                                    3));\n+        let body = try_opt!(list_helper(items,\n+                                        // TODO budget is wrong in block case\n+                                        Shape::legacy(body_budget, item_indent),\n+                                        context.config,\n+                                        tactic));\n+\n+        if context.config.fn_args_layout == IndentStyle::Visual || !body.contains('\\n') {\n+            result.push('(');\n+            if context.config.spaces_within_parens && body.len() > 0 {\n+                result.push(' ');\n+            }\n \n-        result.push_str(&body);\n+            result.push_str(&body);\n \n-        if context.config.spaces_within_parens && body.len() > 0 {\n-            result.push(' ');\n+            if context.config.spaces_within_parens && body.len() > 0 {\n+                result.push(' ');\n+            }\n+            result.push(')');\n+        } else {\n+            result.push_str(\"(\\n\");\n+            result.push_str(&item_indent.to_string(&context.config));\n+            result.push_str(&body);\n+            result.push('\\n');\n+            result.push_str(&offset.block_only().to_string(&context.config));\n+            result.push(')');\n         }\n-        result.push(')');\n-    } else {\n-        result.push_str(\"(\\n\");\n-        result.push_str(&item_indent.to_string(&context.config));\n-        result.push_str(&body);\n-        result.push('\\n');\n-        result.push_str(&offset.block_only().to_string(&context.config));\n-        result.push(')');\n     }\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&"}, {"sha": "28bb95e1a2de3441fe83d784bea1d1612ef72156", "filename": "tests/source/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "patch": "@@ -166,7 +166,7 @@ struct Foo {\n \n     }\n struct Foo { /* comment */ }\n-struct Foo();\n+struct Foo( /* comment */ );\n \n struct LongStruct {\n     a: A,"}, {"sha": "358172ae83835ff8ec67c5de94b72f4f3659dfd3", "filename": "tests/target/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d66c3ae876a32d8f62ce6f9eec58aa37a142e8/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=59d66c3ae876a32d8f62ce6f9eec58aa37a142e8", "patch": "@@ -170,7 +170,7 @@ struct Foo {\n     // trailing space ->\n }\n struct Foo { /* comment */ }\n-struct Foo();\n+struct Foo( /* comment */ );\n \n struct LongStruct {\n     a: A,"}]}