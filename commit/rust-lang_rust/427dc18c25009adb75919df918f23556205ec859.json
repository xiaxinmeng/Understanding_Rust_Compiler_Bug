{"sha": "427dc18c25009adb75919df918f23556205ec859", "node_id": "C_kwDOAAsO6NoAKDQyN2RjMThjMjUwMDlhZGI3NTkxOWRmOTE4ZjIzNTU2MjA1ZWM4NTk", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-04T09:10:42Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-04T09:10:42Z"}, "message": "tweak debug output and bless tests", "tree": {"sha": "fd5d916c1fc590dfcfa6659033909885d20deb56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5d916c1fc590dfcfa6659033909885d20deb56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/427dc18c25009adb75919df918f23556205ec859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/427dc18c25009adb75919df918f23556205ec859", "html_url": "https://github.com/rust-lang/rust/commit/427dc18c25009adb75919df918f23556205ec859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/427dc18c25009adb75919df918f23556205ec859/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "html_url": "https://github.com/rust-lang/rust/commit/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "96228338a4c22191d378e45b2897f99e402d92b5", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/427dc18c25009adb75919df918f23556205ec859/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427dc18c25009adb75919df918f23556205ec859/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=427dc18c25009adb75919df918f23556205ec859", "patch": "@@ -10,10 +10,9 @@ use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueHiddenType, Region, RegionVid};\n+use rustc_middle::ty::{self, OpaqueHiddenType, Region, RegionVid, TyCtxt};\n use rustc_span::symbol::sym;\n use std::env;\n-use std::fmt::Debug;\n use std::io;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -325,7 +324,7 @@ pub(super) fn dump_mir_results<'tcx>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n-    closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n+    closure_region_requirements: &Option<ClosureRegionRequirements<'tcx>>,\n ) {\n     if !dump_enabled(infcx.tcx, \"nll\", body.source.def_id()) {\n         return;\n@@ -340,9 +339,11 @@ pub(super) fn dump_mir_results<'tcx>(\n \n                 if let Some(closure_region_requirements) = closure_region_requirements {\n                     writeln!(out, \"| Free Region Constraints\")?;\n-                    for_each_region_constraint(closure_region_requirements, &mut |msg| {\n-                        writeln!(out, \"| {}\", msg)\n-                    })?;\n+                    for_each_region_constraint(\n+                        infcx.tcx,\n+                        closure_region_requirements,\n+                        &mut |msg| writeln!(out, \"| {}\", msg),\n+                    )?;\n                     writeln!(out, \"|\")?;\n                 }\n             }\n@@ -375,7 +376,7 @@ pub(super) fn dump_annotation<'tcx>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n-    closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n+    closure_region_requirements: &Option<ClosureRegionRequirements<'tcx>>,\n     opaque_type_values: &VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n@@ -405,7 +406,7 @@ pub(super) fn dump_annotation<'tcx>(\n \n         // Dump the region constraints we are imposing *between* those\n         // newly created variables.\n-        for_each_region_constraint(closure_region_requirements, &mut |msg| {\n+        for_each_region_constraint(tcx, closure_region_requirements, &mut |msg| {\n             err.note(msg);\n             Ok(())\n         })\n@@ -426,16 +427,19 @@ pub(super) fn dump_annotation<'tcx>(\n     errors.buffer_non_error_diag(err);\n }\n \n-fn for_each_region_constraint(\n-    closure_region_requirements: &ClosureRegionRequirements<'_>,\n+fn for_each_region_constraint<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    closure_region_requirements: &ClosureRegionRequirements<'tcx>,\n     with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n ) -> io::Result<()> {\n     for req in &closure_region_requirements.outlives_requirements {\n-        let subject: &dyn Debug = match &req.subject {\n-            ClosureOutlivesSubject::Region(subject) => subject,\n-            ClosureOutlivesSubject::Ty(ty) => ty,\n+        let subject = match req.subject {\n+            ClosureOutlivesSubject::Region(subject) => format!(\"{:?}\", subject),\n+            ClosureOutlivesSubject::Ty(ty) => {\n+                format!(\"{:?}\", ty.instantiate(tcx, |vid| tcx.mk_re_var(vid)))\n+            }\n         };\n-        with_msg(&format!(\"where {:?}: {:?}\", subject, req.outlived_free_region,))?;\n+        with_msg(&format!(\"where {}: {:?}\", subject, req.outlived_free_region,))?;\n     }\n     Ok(())\n }"}, {"sha": "11ada59c066393544e6ecffd2e370535a81e2aa9", "filename": "tests/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427dc18c25009adb75919df918f23556205ec859/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427dc18c25009adb75919df918f23556205ec859/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=427dc18c25009adb75919df918f23556205ec859", "patch": "@@ -110,7 +110,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReEarlyBound(1, 'b)>>::AssocType: '_#3r\n+   = note: where <T as Anything<'_#2r>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:62:1"}, {"sha": "47d4f2e46c62b623bc175eae3f865ed36ed55a20", "filename": "tests/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427dc18c25009adb75919df918f23556205ec859/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427dc18c25009adb75919df918f23556205ec859/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=427dc18c25009adb75919df918f23556205ec859", "patch": "@@ -86,7 +86,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReEarlyBound(1, 'b)>>::AssocType: '_#3r\n+   = note: where <T as Anything<'_#2r>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:52:1"}, {"sha": "530dd86819dc37fca35b9b9373a9a59bf0178fd4", "filename": "tests/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/427dc18c25009adb75919df918f23556205ec859/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427dc18c25009adb75919df918f23556205ec859/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=427dc18c25009adb75919df918f23556205ec859", "patch": "@@ -11,7 +11,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n    = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: '_#3r\n+   = note: where <T as Anything<'_#1r, '_#2r>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:34:1\n@@ -23,14 +23,14 @@ LL | |     T: Anything<'b, 'c>,\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n \n-error[E0309]: the associated type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: 'a`...\n-   = note: ...so that the type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` will meet its required lifetime bounds\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<'_#5r, '_#6r>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -44,7 +44,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n+   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:43:1\n@@ -57,14 +57,14 @@ LL | |     'a: 'a,\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n \n-error[E0309]: the associated type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: 'a`...\n-   = note: ...so that the type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` will meet its required lifetime bounds\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<'_#6r, '_#7r>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n@@ -78,7 +78,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n+   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:53:1\n@@ -103,7 +103,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n+   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n@@ -128,7 +128,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n+   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:74:1\n@@ -154,7 +154,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(0, 'b)>>::AssocType: '_#2r\n+   = note: where <T as Anything<'_#1r, '_#1r>>::AssocType: '_#2r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:83:1\n@@ -194,7 +194,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(1, 'b)>>::AssocType: '_#3r\n+   = note: where <T as Anything<'_#2r, '_#2r>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:92:1\n@@ -219,7 +219,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where <T as Anything<ReEarlyBound(0, 'a), ReEarlyBound(0, 'a)>>::AssocType: '_#2r\n+   = note: where <T as Anything<'_#1r, '_#1r>>::AssocType: '_#2r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:101:1"}]}