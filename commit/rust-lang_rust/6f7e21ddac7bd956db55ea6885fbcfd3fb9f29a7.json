{"sha": "6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmN2UyMWRkYWM3YmQ5NTZkYjU1ZWE2ODg1ZmJjZmQzZmI5ZjI5YTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-07T23:43:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-07T23:44:42Z"}, "message": "rustc: Truncate or zero-extend indexes appropriately. Un-XFAIL integral-indexing.rs.", "tree": {"sha": "34e82a1b4ac2e53d5fcfcafccbd17dd126c8e03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e82a1b4ac2e53d5fcfcafccbd17dd126c8e03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7", "html_url": "https://github.com/rust-lang/rust/commit/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3038e68bf1189cd9cb0fc81e57da2c23594b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3038e68bf1189cd9cb0fc81e57da2c23594b63", "html_url": "https://github.com/rust-lang/rust/commit/df3038e68bf1189cd9cb0fc81e57da2c23594b63"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "2a6e7b154a406fca801811f0ba264bc59ae2b034", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7", "patch": "@@ -456,7 +456,6 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         generic-recursive-tag.rs \\\n                         generic-tag-alt.rs \\\n                         generic-tag-values.rs \\\n-                        integral-indexing.rs \\\n                         iter-range.rs \\\n                         iter-ret.rs \\\n                         lazychan.rs \\"}, {"sha": "7ad96ba247d46c1789f601c77ca982a99553724e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6f7e21ddac7bd956db55ea6885fbcfd3fb9f29a7", "patch": "@@ -3209,10 +3209,23 @@ fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     auto v = lv.val;\n     auto bcx = ix.bcx;\n \n+    // Cast to an LLVM integer. Rust is less strict than LLVM in this regard.\n+    auto ix_val;\n+    auto ix_size = llsize_of_real(cx.fcx.ccx, val_ty(ix.val));\n+    auto int_size = llsize_of_real(cx.fcx.ccx, T_int());\n+    if (ix_size < int_size) {\n+        ix_val = bcx.build.ZExt(ix.val, T_int());\n+    } else if (ix_size > int_size) {\n+        ix_val = bcx.build.Trunc(ix.val, T_int());\n+    } else {\n+        ix_val = ix.val;\n+    }\n+\n     auto llunit_ty = node_type(cx.fcx.ccx, ann);\n     auto unit_sz = size_of(bcx, node_ann_type(cx.fcx.ccx, ann));\n     bcx = unit_sz.bcx;\n-    auto scaled_ix = bcx.build.Mul(ix.val, unit_sz.val);\n+\n+    auto scaled_ix = bcx.build.Mul(ix_val, unit_sz.val);\n \n     auto lim = bcx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_fill)));\n     lim = bcx.build.Load(lim);\n@@ -3229,7 +3242,7 @@ fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     fail_res.bcx.build.Br(next_cx.llbb);\n \n     auto body = next_cx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_data)));\n-    auto elt = next_cx.build.GEP(body, vec(C_int(0), ix.val));\n+    auto elt = next_cx.build.GEP(body, vec(C_int(0), ix_val));\n     ret lval_mem(next_cx, elt);\n }\n "}]}