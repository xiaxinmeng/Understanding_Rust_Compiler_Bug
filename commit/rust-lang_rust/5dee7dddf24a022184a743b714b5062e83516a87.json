{"sha": "5dee7dddf24a022184a743b714b5062e83516a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWU3ZGRkZjI0YTAyMjE4NGE3NDNiNzE0YjUwNjJlODM1MTZhODc=", "commit": {"author": {"name": "Philipp Gesang", "email": "phg@phi-gamma.net", "date": "2020-01-21T20:49:23Z"}, "committer": {"name": "Philipp Gesang", "email": "phg@phi-gamma.net", "date": "2020-01-21T17:49:18Z"}, "message": "Handle methods in try diagnostic\n\nThe diagnostic for diagnostic for methods and trait provided\nmethods would only show the empty string:\n\n    error[E0277]: the `?` operator can only be used in  that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n\nHandle the missing cases so it reads ``a method'' / ``an async\nmethod'' / ``a trait method'' respectively.\n\nSigned-off-by: Philipp Gesang <phg@phi-gamma.net>", "tree": {"sha": "7377458b2ecf27c42df7a4ba210ca37b839bea8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7377458b2ecf27c42df7a4ba210ca37b839bea8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dee7dddf24a022184a743b714b5062e83516a87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMVlAWeTE6+fgRVjnE2DsCzzD1m0FAl4nOcEACgkQE2DsCzzD\n1m3Rrw//YnoEqt+EF3jJkIBh7PWtdmhyVwjaF9IaXF6xLRlEfqV6QCHNmbEgs1kw\nrZDViNZYeHMl4AnFKUE4QWXuLzCkfFR/IEe6Kecu1OxFdySVTtA5JQTOrma5oYqj\n8mI1F0+MoiNVNTYWtJTm2+tyWXGBZbw0enLFFQkF06Og9otgcJYa5F/JV4KVFta5\nxq9zVnvggwGwBUyr4/YSU5WsvUxpoiIUYC3e3qIFFa3OvD8f2twkl6ws1lbTqT0n\nCzpD/o5T5iyrUB01HqCgztBPJFbzz7iD9LzrB80MfmcLZQUuBViEj7MQKJ0c9rOm\nDLGVJGqhcj1zTFXaR3PUa+A+neWAjxouB+Dn5vjXLmxJ4YRSz5mJvs7PovryAn1h\np/kBJf0b8Xy5Q4uYDcqxFzUGEcyFjVeeR7AsZrOuSFSQvRTP9QP8d2VnIYKUuNgh\nFNW5sNxA0cj12lkPeZEDN2Y9ZrdehPR7tnL8i8M08WXjLgtXF0rre2hMYEQX/uN3\n01x41u8domJs4NFDJjX00RDYxfkU4u3kgkiA9fsxBzJ7nCeAmxnkWBTrmyRX0Cv9\nVMgKkdL3j9yH72u7o3RFk9yHuujo9Ks+77+aI/2I2dxrupG5M4Z5RZf8HCh3eeFK\nk9J6w8VQOPcyomnbk2c35lfc/Y2gxBI8vuubKAsnXk/xw/L3qrk=\n=fqRU\n-----END PGP SIGNATURE-----", "payload": "tree 7377458b2ecf27c42df7a4ba210ca37b839bea8b\nparent ce361fb24f0896bf7d983549117cbe1f70f32dcf\nauthor Philipp Gesang <phg@phi-gamma.net> 1579639763 +0100\ncommitter Philipp Gesang <phg@phi-gamma.net> 1579628958 +0100\n\nHandle methods in try diagnostic\n\nThe diagnostic for diagnostic for methods and trait provided\nmethods would only show the empty string:\n\n    error[E0277]: the `?` operator can only be used in  that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n\nHandle the missing cases so it reads ``a method'' / ``an async\nmethod'' / ``a trait method'' respectively.\n\nSigned-off-by: Philipp Gesang <phg@phi-gamma.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dee7dddf24a022184a743b714b5062e83516a87", "html_url": "https://github.com/rust-lang/rust/commit/5dee7dddf24a022184a743b714b5062e83516a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dee7dddf24a022184a743b714b5062e83516a87/comments", "author": {"login": "phi-gamma", "id": 1437713, "node_id": "MDQ6VXNlcjE0Mzc3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1437713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phi-gamma", "html_url": "https://github.com/phi-gamma", "followers_url": "https://api.github.com/users/phi-gamma/followers", "following_url": "https://api.github.com/users/phi-gamma/following{/other_user}", "gists_url": "https://api.github.com/users/phi-gamma/gists{/gist_id}", "starred_url": "https://api.github.com/users/phi-gamma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phi-gamma/subscriptions", "organizations_url": "https://api.github.com/users/phi-gamma/orgs", "repos_url": "https://api.github.com/users/phi-gamma/repos", "events_url": "https://api.github.com/users/phi-gamma/events{/privacy}", "received_events_url": "https://api.github.com/users/phi-gamma/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phi-gamma", "id": 1437713, "node_id": "MDQ6VXNlcjE0Mzc3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1437713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phi-gamma", "html_url": "https://github.com/phi-gamma", "followers_url": "https://api.github.com/users/phi-gamma/followers", "following_url": "https://api.github.com/users/phi-gamma/following{/other_user}", "gists_url": "https://api.github.com/users/phi-gamma/gists{/gist_id}", "starred_url": "https://api.github.com/users/phi-gamma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phi-gamma/subscriptions", "organizations_url": "https://api.github.com/users/phi-gamma/orgs", "repos_url": "https://api.github.com/users/phi-gamma/repos", "events_url": "https://api.github.com/users/phi-gamma/events{/privacy}", "received_events_url": "https://api.github.com/users/phi-gamma/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce361fb24f0896bf7d983549117cbe1f70f32dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce361fb24f0896bf7d983549117cbe1f70f32dcf", "html_url": "https://github.com/rust-lang/rust/commit/ce361fb24f0896bf7d983549117cbe1f70f32dcf"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "8f55540cae38abd8128bb01d36041a609a6b9d8f", "filename": "src/librustc/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5dee7dddf24a022184a743b714b5062e83516a87/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dee7dddf24a022184a743b714b5062e83516a87/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=5dee7dddf24a022184a743b714b5062e83516a87", "patch": "@@ -67,6 +67,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"a function\"\n                 })\n             })\n+        } else if let hir::Node::TraitItem(hir::TraitItem {\n+            kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+            ..\n+        }) = &node\n+        {\n+            self.describe_generator(*body_id).or_else(|| Some(\"a trait method\"))\n+        } else if let hir::Node::ImplItem(hir::ImplItem {\n+            kind: hir::ImplItemKind::Method(sig, body_id),\n+            ..\n+        }) = &node\n+        {\n+            self.describe_generator(*body_id).or_else(|| {\n+                Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n+                    \"an async method\"\n+                } else {\n+                    \"a method\"\n+                })\n+            })\n         } else if let hir::Node::Expr(hir::Expr {\n             kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n             .."}]}