{"sha": "5a7fffee7150639ba1c68fe41c9365227929f299", "node_id": "C_kwDOAAsO6NoAKDVhN2ZmZmVlNzE1MDYzOWJhMWM2OGZlNDFjOTM2NTIyNzkyOWYyOTk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-08T21:12:54Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-25T15:15:04Z"}, "message": "rustc_metadata: use AtomicBool for privateness instead of Lock", "tree": {"sha": "461f24c3f0f87dc1d127644e44bfbf77d6d0e2c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/461f24c3f0f87dc1d127644e44bfbf77d6d0e2c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7fffee7150639ba1c68fe41c9365227929f299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7fffee7150639ba1c68fe41c9365227929f299", "html_url": "https://github.com/rust-lang/rust/commit/5a7fffee7150639ba1c68fe41c9365227929f299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7fffee7150639ba1c68fe41c9365227929f299/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47dc326d63c6ed9cc2cd7f99596b5f1e051906d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d47dc326d63c6ed9cc2cd7f99596b5f1e051906d", "html_url": "https://github.com/rust-lang/rust/commit/d47dc326d63c6ed9cc2cd7f99596b5f1e051906d"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "ae8423af1124c1d8876ae923754428f56395ccdc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a7fffee7150639ba1c68fe41c9365227929f299/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7fffee7150639ba1c68fe41c9365227929f299/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5a7fffee7150639ba1c68fe41c9365227929f299", "patch": "@@ -40,6 +40,7 @@ use proc_macro::bridge::client::ProcMacro;\n use std::iter::TrustedLen;\n use std::num::NonZeroUsize;\n use std::path::Path;\n+use std::sync::atomic::{AtomicBool, Ordering};\n use std::{io, iter, mem};\n \n pub(super) use cstore_impl::provide;\n@@ -114,7 +115,7 @@ pub(crate) struct CrateMetadata {\n     /// Whether or not this crate should be consider a private dependency.\n     /// Used by the 'exported_private_dependencies' lint, and for determining\n     /// whether to emit suggestions that reference this crate.\n-    private_dep: Lock<bool>,\n+    private_dep: AtomicBool,\n     /// The hash for the host proc macro. Used to support `-Z dual-proc-macro`.\n     host_hash: Option<Svh>,\n \n@@ -1619,7 +1620,7 @@ impl CrateMetadata {\n             dependencies,\n             dep_kind: Lock::new(dep_kind),\n             source: Lrc::new(source),\n-            private_dep: Lock::new(private_dep),\n+            private_dep: AtomicBool::new(private_dep),\n             host_hash,\n             extern_crate: Lock::new(None),\n             hygiene_context: Default::default(),\n@@ -1667,8 +1668,11 @@ impl CrateMetadata {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n \n-    pub(crate) fn update_private_dep(&self, f: impl FnOnce(bool) -> bool) {\n-        self.private_dep.with_lock(|private_dep| *private_dep = f(*private_dep))\n+    /// `f` must not perform any I/O or take any locks. It may be called more than once.\n+    pub(crate) fn update_private_dep(&self, mut f: impl FnMut(bool) -> bool) {\n+        self.private_dep\n+            .fetch_update(Ordering::Release, Ordering::Acquire, |private_dep| Some(f(private_dep)))\n+            .expect(\"fetch_update only returns Err if `f` returns None`, which it doesn't\");\n     }\n \n     pub(crate) fn required_panic_strategy(&self) -> Option<PanicStrategy> {"}, {"sha": "24fbc2f64b73a321db22fbdc3fae63310b008acd", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7fffee7150639ba1c68fe41c9365227929f299/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7fffee7150639ba1c68fe41c9365227929f299/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=5a7fffee7150639ba1c68fe41c9365227929f299", "patch": "@@ -286,8 +286,11 @@ provide! { tcx, def_id, other, cdata,\n \n     dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n     is_private_dep => {\n-        let r = *cdata.private_dep.lock();\n-        r\n+        // Parallel compiler needs to synchronize type checking and linting (which use this flag)\n+        // so that they happen strictly crate loading. Otherwise, the full list of available\n+        // impls aren't loaded yet.\n+        use std::sync::atomic::Ordering;\n+        cdata.private_dep.load(Ordering::Acquire)\n     }\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }"}]}