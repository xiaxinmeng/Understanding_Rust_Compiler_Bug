{"sha": "cd4de4cece143e8dbaeeff93492afcbb356d3051", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNGRlNGNlY2UxNDNlOGRiYWVlZmY5MzQ5MmFmY2JiMzU2ZDMwNTE=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-18T12:38:33Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T17:42:55Z"}, "message": "Suppress unknown cast errors in the presence of other errors.", "tree": {"sha": "84a7dded2acd2046eabaa197ff11687e8026c05c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84a7dded2acd2046eabaa197ff11687e8026c05c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4de4cece143e8dbaeeff93492afcbb356d3051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4de4cece143e8dbaeeff93492afcbb356d3051", "html_url": "https://github.com/rust-lang/rust/commit/cd4de4cece143e8dbaeeff93492afcbb356d3051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4de4cece143e8dbaeeff93492afcbb356d3051/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "html_url": "https://github.com/rust-lang/rust/commit/4c0ff95e6ecd861741e868cc729afe0339a4b8c7"}], "stats": {"total": 88, "additions": 35, "deletions": 53}, "files": [{"sha": "2978921fc6200ad01d2762632277f866ccc686aa", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -290,6 +290,9 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             }\n             CastError::UnknownCastPtrKind |\n             CastError::UnknownExprPtrKind => {\n+                if fcx.is_tainted_by_errors() {\n+                    return;\n+                }\n                 let unknown_cast_to = match e {\n                     CastError::UnknownCastPtrKind => true,\n                     CastError::UnknownExprPtrKind => false,"}, {"sha": "57e40ec19af7d187ab2d4d9a00a8263c3e343f5a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -2148,8 +2148,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) && fallback == Fallback::Full\n-                            => self.tcx.mk_diverging_default(),\n+            Neither if self.type_var_diverges(ty) => {\n+                match fallback {\n+                    Fallback::Full => self.tcx.mk_diverging_default(),\n+                    Fallback::Numeric => return,\n+                }\n+            }\n             Neither => return\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);"}, {"sha": "2e1d3c55a8f4db24a0e9be888d33eb78d128b19a", "filename": "src/test/compile-fail/derived-errors/issue-31997.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-31997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-31997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-31997.rs?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -20,9 +20,7 @@ fn closure<F, T>(x: F) -> Result<T, ()>\n }\n \n fn foo() -> Result<(), ()> {\n-    try!(closure(|| bar(0 as *mut _)));\n-    //~^ ERROR cannot find function `bar` in this scope\n-    //~^^ ERROR cannot cast to a pointer of an unknown kind\n+    try!(closure(|| bar(0 as *mut _))); //~ ERROR cannot find function `bar` in this scope\n     Ok(())\n }\n "}, {"sha": "1fe0b1ae2d2416349218b8d0a9d911453833d201", "filename": "src/test/ui/issue-45730.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fissue-45730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fissue-45730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.rs?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -11,9 +11,13 @@\n use std::fmt;\n fn main() {\n     let x: *const _ = 0 as _; //~ ERROR cannot cast\n+}\n \n+fn a() {\n     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n     let y: Option<*const fmt::Debug> = Some(x) as _;\n+}\n \n+fn c() {\n     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n }"}, {"sha": "13205eead436120fa5ca2da0872a4d888a47d303", "filename": "src/test/ui/issue-45730.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.stderr?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -9,19 +9,19 @@ error[E0641]: cannot cast to a pointer of an unknown kind\n    = note: The type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:15:23\n+  --> $DIR/issue-45730.rs:17:23\n    |\n-15 |     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n+17 |     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n    |                       ^^^^^--------\n    |                            |\n    |                            help: consider giving more type information\n    |\n    = note: The type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n-  --> $DIR/issue-45730.rs:18:13\n+  --> $DIR/issue-45730.rs:22:13\n    |\n-18 |     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n+22 |     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------\n    |                                            |\n    |                                            help: consider giving more type information"}, {"sha": "326b427b0fbe6c3a34da926b26d9c300a3f560e8", "filename": "src/test/ui/mismatched_types/issue-26480-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.stderr?ref=4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "patch": "@@ -1,11 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-26480-1.rs:27:19\n-   |\n-27 |                   $arr.len() * size_of($arr[0])); //~ ERROR mismatched types\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n-...\n-34 |     write!(hello);\n-   |     -------------- in this macro invocation\n-\n-error: aborting due to previous error\n-"}, {"sha": "7015e5909e9baba909da33ad25b3f496186da715", "filename": "src/test/ui/mismatched_types/issue-26480-2.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.rs?ref=4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-// compile-flags: --error-format=human\n-\n-macro_rules! cast {\n-    ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n-}\n-\n-fn main() {\n-    cast!(2);\n-}"}, {"sha": "3f6dcccdedb4f45a07ebecbfd45b0a62d6e6df2d", "filename": "src/test/ui/mismatched_types/issue-26480-2.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.stderr?ref=4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "patch": "@@ -1,13 +0,0 @@\n-error[E0605]: non-primitive cast: `i32` as `()`\n-  --> $DIR/issue-26480-2.rs:13:19\n-   |\n-13 |     ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n-   |                   ^^^^^^^^\n-...\n-17 |     cast!(2);\n-   |     --------- in this macro invocation\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n-\n-error: aborting due to previous error\n-"}, {"sha": "33c5e74fafa1f9886fd244ab40197e4217b6635f", "filename": "src/test/ui/mismatched_types/issue-26480.rs", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-// compile-flags: --error-format=human\n \n extern {\n     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n@@ -29,7 +28,12 @@ macro_rules! write {\n     }}\n }\n \n+macro_rules! cast {\n+    ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n+}\n+\n fn main() {\n     let hello = ['H', 'e', 'y'];\n     write!(hello);\n+    cast!(2);\n }", "previous_filename": "src/test/ui/mismatched_types/issue-26480-1.rs"}, {"sha": "5d25cb2f93c158c83d65d382692e18efadeb2d24", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd4de4cece143e8dbaeeff93492afcbb356d3051/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=cd4de4cece143e8dbaeeff93492afcbb356d3051", "patch": "@@ -7,5 +7,16 @@ error[E0308]: mismatched types\n 37 |     write!(hello);\n    |     -------------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0605]: non-primitive cast: `{integer}` as `()`\n+  --> $DIR/issue-26480.rs:32:19\n+   |\n+32 |     ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n+   |                   ^^^^^^^^\n+...\n+38 |     cast!(2);\n+   |     --------- in this macro invocation\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error: aborting due to 2 previous errors\n "}]}