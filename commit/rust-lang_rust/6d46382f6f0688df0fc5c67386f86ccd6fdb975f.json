{"sha": "6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "node_id": "C_kwDOAAsO6NoAKDZkNDYzODJmNmYwNjg4ZGYwZmM1YzY3Mzg2Zjg2Y2NkNmZkYjk3NWY", "commit": {"author": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2023-05-18T11:57:45Z"}, "committer": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2023-06-11T22:02:19Z"}, "message": "Private-in-public lints implementation", "tree": {"sha": "da222fe6ab404e953e1683070bdd60a700b5991c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da222fe6ab404e953e1683070bdd60a700b5991c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "html_url": "https://github.com/rust-lang/rust/commit/6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/comments", "author": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "html_url": "https://github.com/rust-lang/rust/commit/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d"}], "stats": {"total": 978, "additions": 893, "deletions": 85}, "files": [{"sha": "53ece08ac3d92e54fbc7ca7d5f6c0a4bc4e05a25", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -3372,7 +3372,9 @@ declare_lint_pass! {\n         OVERLAPPING_RANGE_ENDPOINTS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         POINTER_STRUCTURAL_MATCH,\n+        PRIVATE_BOUNDS,\n         PRIVATE_IN_PUBLIC,\n+        PRIVATE_INTERFACES,\n         PROC_MACRO_BACK_COMPAT,\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n@@ -3399,6 +3401,7 @@ declare_lint_pass! {\n         UNINHABITED_STATIC,\n         UNKNOWN_CRATE_TYPES,\n         UNKNOWN_LINTS,\n+        UNNAMEABLE_TYPES,\n         UNREACHABLE_CODE,\n         UNREACHABLE_PATTERNS,\n         UNSAFE_OP_IN_UNSAFE_FN,\n@@ -4251,3 +4254,95 @@ declare_lint! {\n     Warn,\n     \"\\\"invalid_parameter\\\" isn't a valid argument for `#[macro_export]`\",\n }\n+\n+declare_lint! {\n+    /// The `private_interfaces` lint detects types in a primary interface of an item,\n+    /// that are more private than the item itself. Primary interface of an item is all\n+    /// its interface except for bounds on generic parameters and where clauses.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # #![allow(unused)]\n+    /// # #![allow(private_in_public)]\n+    /// #![deny(private_interfaces)]\n+    /// struct SemiPriv;\n+    ///\n+    /// mod m1 {\n+    ///     struct Priv;\n+    ///     impl crate::SemiPriv {\n+    ///         pub fn f(_: Priv) {}\n+    ///     }\n+    /// }\n+    ///\n+    /// # fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Having something private in primary interface guarantees that\n+    /// the item will be unusable from outer modules due to type privacy.\n+    pub PRIVATE_INTERFACES,\n+    Allow,\n+    \"private type in primary interface of an item\",\n+}\n+\n+declare_lint! {\n+    /// The `private_bounds` lint detects types in a secondary interface of an item,\n+    /// that are more private than the item itself. Secondary interface of an item consists of\n+    /// bounds on generic parameters and where clauses, including supertraits for trait items.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # #![allow(private_in_public)]\n+    /// # #![allow(unused)]\n+    /// #![deny(private_bounds)]\n+    ///\n+    /// struct PrivTy;\n+    /// pub struct S\n+    ///     where PrivTy:\n+    /// {}\n+    /// # fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Having private types or traits in item bounds makes it less clear what interface\n+    /// the item actually provides.\n+    pub PRIVATE_BOUNDS,\n+    Allow,\n+    \"private type in secondary interface of an item\"\n+}\n+\n+declare_lint! {\n+    /// The `unnameable_types` lint detects types for which you can get objects of that type,\n+    /// but cannot name the type itself.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # #![allow(unused)]\n+    /// #![deny(unnameable_types)]\n+    /// mod m {\n+    ///     pub struct S;\n+    /// }\n+    ///\n+    /// pub fn get_voldemort() -> m::S { m::S }\n+    /// # fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// It is often expected that if you can obtain an object of type `T`, then\n+    /// you can name the type `T` as well, this lint attempts to enforce this rule.\n+    pub UNNAMEABLE_TYPES,\n+    Allow,\n+    \"effective visibility of a type is larger than the area in which it can be named\"\n+}"}, {"sha": "6f51981cf09ddbe4f2f5ab2368aaa32050359ff5", "filename": "compiler/rustc_privacy/messages.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_privacy%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_privacy%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fmessages.ftl?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -17,7 +17,14 @@ privacy_private_in_public_lint =\n         *[other] E0446\n     })\n \n+privacy_private_interface_or_bounds_lint = {$ty_kind} `{$ty_descr}` is more private than the item `{$item_descr}`\n+    .item_note = {$item_kind} `{$item_descr}` is reachable at visibility `{$item_vis_descr}`\n+    .ty_note = but {$ty_kind} `{$ty_descr}` is only usable at visibility `{$ty_vis_descr}`\n+\n privacy_report_effective_visibility = {$descr}\n \n+privacy_unnameable_types_lint = {$kind} `{$descr}` is reachable but cannot be named\n+    .label = reachable at visibility `{$reachable_vis}`, but can only be named at visibility `{$reexported_vis}`\n+\n privacy_unnamed_item_is_private = {$kind} is private\n     .label = private {$kind}"}, {"sha": "67689b5e7130426cfe7233eee7d9c32e7e470e08", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -98,3 +98,32 @@ pub struct PrivateInPublicLint<'a> {\n     pub kind: &'a str,\n     pub descr: DiagnosticArgFromDisplay<'a>,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(privacy_unnameable_types_lint)]\n+pub struct UnnameableTypesLint<'a> {\n+    #[label]\n+    pub span: Span,\n+    pub kind: &'a str,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n+    pub reachable_vis: &'a str,\n+    pub reexported_vis: &'a str,\n+}\n+\n+// Used for `private_interfaces` and `private_bounds` lints.\n+// They will replace private-in-public errors and compatibility lints in future.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html for more details.\n+#[derive(LintDiagnostic)]\n+#[diag(privacy_private_interface_or_bounds_lint)]\n+pub struct PrivateInterfacesOrBoundsLint<'a> {\n+    #[note(privacy_item_note)]\n+    pub item_span: Span,\n+    pub item_kind: &'a str,\n+    pub item_descr: DiagnosticArgFromDisplay<'a>,\n+    pub item_vis_descr: &'a str,\n+    #[note(privacy_ty_note)]\n+    pub ty_span: Span,\n+    pub ty_kind: &'a str,\n+    pub ty_descr: DiagnosticArgFromDisplay<'a>,\n+    pub ty_vis_descr: &'a str,\n+}"}, {"sha": "a51a1c9a8a436721e0d830f9d3ed7c1aa02b3add", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 221, "deletions": 49, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -22,7 +22,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{AssocItemKind, HirIdSet, ItemId, Node, PatKind};\n+use rustc_hir::{AssocItemKind, ForeignItemKind, HirIdSet, ItemId, Node, PatKind};\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::{EffectiveVisibilities, EffectiveVisibility, Level};\n@@ -42,8 +42,8 @@ use std::{fmt, mem};\n \n use errors::{\n     FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n-    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportEffectiveVisibility,\n-    UnnamedItemIsPrivate,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, PrivateInterfacesOrBoundsLint,\n+    ReportEffectiveVisibility, UnnameableTypesLint, UnnamedItemIsPrivate,\n };\n \n fluent_messages! { \"../messages.ftl\" }\n@@ -52,6 +52,17 @@ fluent_messages! { \"../messages.ftl\" }\n /// Generic infrastructure used to implement specific visitors below.\n ////////////////////////////////////////////////////////////////////////////////\n \n+struct LazyDefPathStr<'tcx> {\n+    def_id: DefId,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> fmt::Display for LazyDefPathStr<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.tcx.def_path_str(self.def_id))\n+    }\n+}\n+\n /// Implemented to visit all `DefId`s in a type.\n /// Visiting `DefId`s is useful because visibilities and reachabilities are attached to them.\n /// The idea is to visit \"all components of a type\", as documented in\n@@ -259,16 +270,6 @@ where\n                     &LazyDefPathStr { def_id: data.def_id, tcx },\n                 )?;\n \n-                struct LazyDefPathStr<'tcx> {\n-                    def_id: DefId,\n-                    tcx: TyCtxt<'tcx>,\n-                }\n-                impl<'tcx> fmt::Display for LazyDefPathStr<'tcx> {\n-                    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                        write!(f, \"{}\", self.tcx.def_path_str(self.def_id))\n-                    }\n-                }\n-\n                 // This will also visit substs if necessary, so we don't need to recurse.\n                 return if self.def_id_visitor.shallow() {\n                     ControlFlow::Continue(())\n@@ -409,8 +410,25 @@ impl VisibilityLike for ty::Visibility {\n     }\n }\n \n-impl VisibilityLike for EffectiveVisibility {\n-    const MAX: Self = EffectiveVisibility::from_vis(ty::Visibility::Public);\n+struct NonShallowEffectiveVis(EffectiveVisibility);\n+\n+impl VisibilityLike for NonShallowEffectiveVis {\n+    const MAX: Self = NonShallowEffectiveVis(EffectiveVisibility::from_vis(ty::Visibility::Public));\n+    const SHALLOW: bool = false;\n+\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n+        let find = FindMin {\n+            tcx: find.tcx,\n+            effective_visibilities: find.effective_visibilities,\n+            min: ShallowEffectiveVis(find.min.0),\n+        };\n+        NonShallowEffectiveVis(VisibilityLike::new_min(&find, def_id).0)\n+    }\n+}\n+\n+struct ShallowEffectiveVis(EffectiveVisibility);\n+impl VisibilityLike for ShallowEffectiveVis {\n+    const MAX: Self = ShallowEffectiveVis(EffectiveVisibility::from_vis(ty::Visibility::Public));\n     // Type inference is very smart sometimes.\n     // It can make an impl reachable even some components of its type or trait are unreachable.\n     // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`\n@@ -429,7 +447,7 @@ impl VisibilityLike for EffectiveVisibility {\n                 EffectiveVisibility::from_vis(private_vis)\n             });\n \n-        effective_vis.min(find.min, find.tcx)\n+        ShallowEffectiveVis(effective_vis.min(find.min.0, find.tcx))\n     }\n }\n \n@@ -767,11 +785,13 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             hir::ItemKind::Impl(ref impl_) => {\n-                let item_ev = EffectiveVisibility::of_impl(\n+                let item_ev = ShallowEffectiveVis::of_impl(\n                     item.owner_id.def_id,\n                     self.tcx,\n                     &self.effective_visibilities,\n-                );\n+                )\n+                .0;\n+\n                 self.update_eff_vis(item.owner_id.def_id, item_ev, None, Level::Direct);\n \n                 self.reach(item.owner_id.def_id, item_ev).generics().predicates().ty().trait_ref();\n@@ -912,25 +932,29 @@ pub struct TestReachabilityVisitor<'tcx, 'a> {\n     effective_visibilities: &'a EffectiveVisibilities,\n }\n \n+fn vis_to_string<'tcx>(def_id: LocalDefId, vis: ty::Visibility, tcx: TyCtxt<'tcx>) -> String {\n+    match vis {\n+        ty::Visibility::Restricted(restricted_id) => {\n+            if restricted_id.is_top_level_module() {\n+                \"pub(crate)\".to_string()\n+            } else if restricted_id == tcx.parent_module_from_def_id(def_id) {\n+                \"pub(self)\".to_string()\n+            } else {\n+                format!(\"pub({})\", tcx.item_name(restricted_id.to_def_id()))\n+            }\n+        }\n+        ty::Visibility::Public => \"pub\".to_string(),\n+    }\n+}\n+\n impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n     fn effective_visibility_diagnostic(&mut self, def_id: LocalDefId) {\n         if self.tcx.has_attr(def_id, sym::rustc_effective_visibility) {\n             let mut error_msg = String::new();\n             let span = self.tcx.def_span(def_id.to_def_id());\n             if let Some(effective_vis) = self.effective_visibilities.effective_vis(def_id) {\n                 for level in Level::all_levels() {\n-                    let vis_str = match effective_vis.at_level(level) {\n-                        ty::Visibility::Restricted(restricted_id) => {\n-                            if restricted_id.is_top_level_module() {\n-                                \"pub(crate)\".to_string()\n-                            } else if *restricted_id == self.tcx.parent_module_from_def_id(def_id) {\n-                                \"pub(self)\".to_string()\n-                            } else {\n-                                format!(\"pub({})\", self.tcx.item_name(restricted_id.to_def_id()))\n-                            }\n-                        }\n-                        ty::Visibility::Public => \"pub\".to_string(),\n-                    };\n+                    let vis_str = vis_to_string(def_id, *effective_vis.at_level(level), self.tcx);\n                     if level != Level::Direct {\n                         error_msg.push_str(\", \");\n                     }\n@@ -1745,12 +1769,15 @@ struct SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     item_def_id: LocalDefId,\n     /// The visitor checks that each component type is at least this visible.\n     required_visibility: ty::Visibility,\n+    required_effective_vis: Option<EffectiveVisibility>,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n+    in_primary_interface: bool,\n }\n \n impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn generics(&mut self) -> &mut Self {\n+        self.in_primary_interface = true;\n         for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {}\n@@ -1769,6 +1796,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     }\n \n     fn predicates(&mut self) -> &mut Self {\n+        self.in_primary_interface = false;\n         // N.B., we use `explicit_predicates_of` and not `predicates_of`\n         // because we don't want to report privacy errors due to where\n         // clauses that the compiler inferred. We only want to\n@@ -1780,6 +1808,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     }\n \n     fn bounds(&mut self) -> &mut Self {\n+        self.in_primary_interface = false;\n         self.visit_predicates(ty::GenericPredicates {\n             parent: None,\n             predicates: self.tcx.explicit_item_bounds(self.item_def_id).skip_binder(),\n@@ -1788,6 +1817,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     }\n \n     fn ty(&mut self) -> &mut Self {\n+        self.in_primary_interface = true;\n         self.visit(self.tcx.type_of(self.item_def_id).subst_identity());\n         self\n     }\n@@ -1811,8 +1841,10 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n         };\n \n         let vis = self.tcx.local_visibility(local_def_id);\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+        let span = self.tcx.def_span(self.item_def_id.to_def_id());\n+        let vis_span = self.tcx.def_span(def_id);\n         if !vis.is_at_least(self.required_visibility, self.tcx) {\n-            let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n             let vis_descr = match vis {\n                 ty::Visibility::Public => \"public\",\n                 ty::Visibility::Restricted(vis_def_id) => {\n@@ -1825,12 +1857,11 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     }\n                 }\n             };\n-            let span = self.tcx.def_span(self.item_def_id.to_def_id());\n+\n             if self.has_old_errors\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n-                let vis_span = self.tcx.def_span(def_id);\n                 if kind == \"trait\" {\n                     self.tcx.sess.emit_err(InPublicInterfaceTraits {\n                         span,\n@@ -1858,6 +1889,39 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n             }\n         }\n \n+        let Some(effective_vis) = self.required_effective_vis else {\n+            return false;\n+        };\n+\n+        // FIXME: `Level::Reachable` should be taken instead of `Level::Reexported`\n+        let reexported_at_vis = *effective_vis.at_level(Level::Reexported);\n+\n+        if !vis.is_at_least(reexported_at_vis, self.tcx) {\n+            let lint = if self.in_primary_interface {\n+                lint::builtin::PRIVATE_INTERFACES\n+            } else {\n+                lint::builtin::PRIVATE_BOUNDS\n+            };\n+            self.tcx.emit_lint(\n+                lint,\n+                hir_id,\n+                PrivateInterfacesOrBoundsLint {\n+                    item_span: span,\n+                    item_kind: self.tcx.def_descr(self.item_def_id.to_def_id()),\n+                    item_descr: (&LazyDefPathStr {\n+                        def_id: self.item_def_id.to_def_id(),\n+                        tcx: self.tcx,\n+                    })\n+                        .into(),\n+                    item_vis_descr: &vis_to_string(self.item_def_id, reexported_at_vis, self.tcx),\n+                    ty_span: vis_span,\n+                    ty_kind: kind,\n+                    ty_descr: descr.into(),\n+                    ty_vis_descr: &vis_to_string(local_def_id, vis, self.tcx),\n+                },\n+            );\n+        }\n+\n         false\n     }\n \n@@ -1891,25 +1955,55 @@ impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     }\n }\n \n-struct PrivateItemsInPublicInterfacesChecker<'tcx> {\n+struct PrivateItemsInPublicInterfacesChecker<'tcx, 'a> {\n     tcx: TyCtxt<'tcx>,\n     old_error_set_ancestry: HirIdSet,\n+    effective_visibilities: &'a EffectiveVisibilities,\n }\n \n-impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n+impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx, '_> {\n     fn check(\n         &self,\n         def_id: LocalDefId,\n         required_visibility: ty::Visibility,\n+        required_effective_vis: Option<EffectiveVisibility>,\n     ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         SearchInterfaceForPrivateItemsVisitor {\n             tcx: self.tcx,\n             item_def_id: def_id,\n             required_visibility,\n+            required_effective_vis,\n             has_old_errors: self\n                 .old_error_set_ancestry\n                 .contains(&self.tcx.hir().local_def_id_to_hir_id(def_id)),\n             in_assoc_ty: false,\n+            in_primary_interface: true,\n+        }\n+    }\n+\n+    fn check_unnameable(&self, def_id: LocalDefId, effective_vis: Option<EffectiveVisibility>) {\n+        let Some(effective_vis) = effective_vis else {\n+            return;\n+        };\n+\n+        let reexported_at_vis = effective_vis.at_level(Level::Reexported);\n+        let reachable_at_vis = effective_vis.at_level(Level::Reachable);\n+\n+        if reexported_at_vis != reachable_at_vis {\n+            let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+            let span = self.tcx.def_span(def_id.to_def_id());\n+            self.tcx.emit_spanned_lint(\n+                lint::builtin::UNNAMEABLE_TYPES,\n+                hir_id,\n+                span,\n+                UnnameableTypesLint {\n+                    span,\n+                    kind: self.tcx.def_descr(def_id.to_def_id()),\n+                    descr: (&LazyDefPathStr { def_id: def_id.to_def_id(), tcx: self.tcx }).into(),\n+                    reachable_vis: &vis_to_string(def_id, *reachable_at_vis, self.tcx),\n+                    reexported_vis: &vis_to_string(def_id, *reexported_at_vis, self.tcx),\n+                },\n+            );\n         }\n     }\n \n@@ -1918,64 +2012,92 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n         def_id: LocalDefId,\n         assoc_item_kind: AssocItemKind,\n         vis: ty::Visibility,\n+        effective_vis: Option<EffectiveVisibility>,\n     ) {\n-        let mut check = self.check(def_id, vis);\n+        let mut check = self.check(def_id, vis, effective_vis);\n \n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n             AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),\n             AssocItemKind::Type => (self.tcx.defaultness(def_id).has_value(), true),\n         };\n+\n+        if is_assoc_ty {\n+            self.check_unnameable(def_id, self.get(def_id));\n+        }\n+\n         check.in_assoc_ty = is_assoc_ty;\n         check.generics().predicates();\n         if check_ty {\n             check.ty();\n         }\n     }\n \n+    fn get(&self, def_id: LocalDefId) -> Option<EffectiveVisibility> {\n+        self.effective_visibilities.effective_vis(def_id).copied()\n+    }\n+\n     pub fn check_item(&mut self, id: ItemId) {\n         let tcx = self.tcx;\n         let def_id = id.owner_id.def_id;\n         let item_visibility = tcx.local_visibility(def_id);\n+        let effective_vis = self.get(def_id);\n         let def_kind = tcx.def_kind(def_id);\n \n         match def_kind {\n             DefKind::Const | DefKind::Static(_) | DefKind::Fn | DefKind::TyAlias => {\n-                self.check(def_id, item_visibility).generics().predicates().ty();\n+                if let DefKind::TyAlias = def_kind {\n+                    self.check_unnameable(def_id, effective_vis);\n+                }\n+                self.check(def_id, item_visibility, effective_vis).generics().predicates().ty();\n             }\n             DefKind::OpaqueTy => {\n                 // `ty()` for opaque types is the underlying type,\n                 // it's not a part of interface, so we skip it.\n-                self.check(def_id, item_visibility).generics().bounds();\n+                self.check(def_id, item_visibility, effective_vis).generics().bounds();\n             }\n             DefKind::Trait => {\n                 let item = tcx.hir().item(id);\n                 if let hir::ItemKind::Trait(.., trait_item_refs) = item.kind {\n-                    self.check(item.owner_id.def_id, item_visibility).generics().predicates();\n+                    self.check_unnameable(item.owner_id.def_id, effective_vis);\n+\n+                    self.check(item.owner_id.def_id, item_visibility, effective_vis)\n+                        .generics()\n+                        .predicates();\n \n                     for trait_item_ref in trait_item_refs {\n                         self.check_assoc_item(\n                             trait_item_ref.id.owner_id.def_id,\n                             trait_item_ref.kind,\n                             item_visibility,\n+                            effective_vis,\n                         );\n \n                         if let AssocItemKind::Type = trait_item_ref.kind {\n-                            self.check(trait_item_ref.id.owner_id.def_id, item_visibility).bounds();\n+                            self.check(\n+                                trait_item_ref.id.owner_id.def_id,\n+                                item_visibility,\n+                                effective_vis,\n+                            )\n+                            .bounds();\n                         }\n                     }\n                 }\n             }\n             DefKind::TraitAlias => {\n-                self.check(def_id, item_visibility).generics().predicates();\n+                self.check(def_id, item_visibility, effective_vis).generics().predicates();\n             }\n             DefKind::Enum => {\n                 let item = tcx.hir().item(id);\n                 if let hir::ItemKind::Enum(ref def, _) = item.kind {\n-                    self.check(item.owner_id.def_id, item_visibility).generics().predicates();\n+                    self.check_unnameable(item.owner_id.def_id, effective_vis);\n+\n+                    self.check(item.owner_id.def_id, item_visibility, effective_vis)\n+                        .generics()\n+                        .predicates();\n \n                     for variant in def.variants {\n                         for field in variant.data.fields() {\n-                            self.check(field.def_id, item_visibility).ty();\n+                            self.check(field.def_id, item_visibility, effective_vis).ty();\n                         }\n                     }\n                 }\n@@ -1985,8 +2107,16 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                 let item = tcx.hir().item(id);\n                 if let hir::ItemKind::ForeignMod { items, .. } = item.kind {\n                     for foreign_item in items {\n-                        let vis = tcx.local_visibility(foreign_item.id.owner_id.def_id);\n-                        self.check(foreign_item.id.owner_id.def_id, vis)\n+                        let foreign_item = tcx.hir().foreign_item(foreign_item.id);\n+\n+                        let ev = self.get(foreign_item.owner_id.def_id);\n+                        let vis = tcx.local_visibility(foreign_item.owner_id.def_id);\n+\n+                        if let ForeignItemKind::Type = foreign_item.kind {\n+                            self.check_unnameable(foreign_item.owner_id.def_id, ev);\n+                        }\n+\n+                        self.check(foreign_item.owner_id.def_id, vis, ev)\n                             .generics()\n                             .predicates()\n                             .ty();\n@@ -1999,11 +2129,21 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                 if let hir::ItemKind::Struct(ref struct_def, _)\n                 | hir::ItemKind::Union(ref struct_def, _) = item.kind\n                 {\n-                    self.check(item.owner_id.def_id, item_visibility).generics().predicates();\n+                    self.check_unnameable(item.owner_id.def_id, effective_vis);\n+                    self.check(item.owner_id.def_id, item_visibility, effective_vis)\n+                        .generics()\n+                        .predicates();\n \n                     for field in struct_def.fields() {\n                         let field_visibility = tcx.local_visibility(field.def_id);\n-                        self.check(field.def_id, min(item_visibility, field_visibility, tcx)).ty();\n+                        let field_ev = self.get(field.def_id);\n+\n+                        self.check(\n+                            field.def_id,\n+                            min(item_visibility, field_visibility, tcx),\n+                            field_ev,\n+                        )\n+                        .ty();\n                     }\n                 }\n             }\n@@ -2016,10 +2156,30 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                 if let hir::ItemKind::Impl(ref impl_) = item.kind {\n                     let impl_vis =\n                         ty::Visibility::of_impl(item.owner_id.def_id, tcx, &Default::default());\n+\n+                    // we are using the non-shallow version here, unlike when building the\n+                    // effective visisibilities table to avoid large number of false positives.\n+                    // For example:\n+                    //\n+                    // impl From<Priv> for Pub {\n+                    //     fn from(_: Priv) -> Pub {...}\n+                    // }\n+                    //\n+                    // lints shouldn't be emmited even `from` effective visibility\n+                    // is larger then `Priv` nominal visibility.\n+                    let impl_ev = Some(\n+                        NonShallowEffectiveVis::of_impl(\n+                            item.owner_id.def_id,\n+                            tcx,\n+                            self.effective_visibilities,\n+                        )\n+                        .0,\n+                    );\n+\n                     // check that private components do not appear in the generics or predicates of inherent impls\n                     // this check is intentionally NOT performed for impls of traits, per #90586\n                     if impl_.of_trait.is_none() {\n-                        self.check(item.owner_id.def_id, impl_vis).generics().predicates();\n+                        self.check(item.owner_id.def_id, impl_vis, impl_ev).generics().predicates();\n                     }\n                     for impl_item_ref in impl_.items {\n                         let impl_item_vis = if impl_.of_trait.is_none() {\n@@ -2031,10 +2191,18 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                         } else {\n                             impl_vis\n                         };\n+\n+                        let impl_item_ev = if impl_.of_trait.is_none() {\n+                            self.get(impl_item_ref.id.owner_id.def_id)\n+                        } else {\n+                            impl_ev\n+                        };\n+\n                         self.check_assoc_item(\n                             impl_item_ref.id.owner_id.def_id,\n                             impl_item_ref.kind,\n                             impl_item_vis,\n+                            impl_item_ev,\n                         );\n                     }\n                 }\n@@ -2186,7 +2354,11 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n     }\n \n     // Check for private types and traits in public interfaces.\n-    let mut checker = PrivateItemsInPublicInterfacesChecker { tcx, old_error_set_ancestry };\n+    let mut checker = PrivateItemsInPublicInterfacesChecker {\n+        tcx,\n+        old_error_set_ancestry,\n+        effective_visibilities,\n+    };\n \n     for id in tcx.hir().items() {\n         checker.check_item(id);"}, {"sha": "44a20a79ad625fd1265908603cc1a0fe51558523", "filename": "tests/ui/associated-inherent-types/private-in-public.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fassociated-inherent-types%2Fprivate-in-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fassociated-inherent-types%2Fprivate-in-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fprivate-in-public.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -3,6 +3,11 @@\n #![crate_type = \"lib\"]\n \n #![deny(private_in_public)]\n+#![warn(private_interfaces)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n \n pub type PubAlias0 = PubTy::PrivAssocTy;\n //~^ ERROR private associated type `PubTy::PrivAssocTy` in public interface (error E0446)"}, {"sha": "d40db83707bbb06dc61db2e07c9edd2fc453513d", "filename": "tests/ui/associated-inherent-types/private-in-public.stderr", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fassociated-inherent-types%2Fprivate-in-public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fassociated-inherent-types%2Fprivate-in-public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fprivate-in-public.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,5 +1,5 @@\n error: private associated type `PubTy::PrivAssocTy` in public interface (error E0446)\n-  --> $DIR/private-in-public.rs:7:1\n+  --> $DIR/private-in-public.rs:12:1\n    |\n LL | pub type PubAlias0 = PubTy::PrivAssocTy;\n    | ^^^^^^^^^^^^^^^^^^\n@@ -12,23 +12,67 @@ note: the lint level is defined here\n LL | #![deny(private_in_public)]\n    |         ^^^^^^^^^^^^^^^^^\n \n+warning: associated type `PubTy::PrivAssocTy` is more private than the item `PubAlias0`\n+   |\n+note: type alias `PubAlias0` is reachable at visibility `pub`\n+  --> $DIR/private-in-public.rs:12:1\n+   |\n+LL | pub type PubAlias0 = PubTy::PrivAssocTy;\n+   | ^^^^^^^^^^^^^^^^^^\n+note: but associated type `PubTy::PrivAssocTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/private-in-public.rs:24:5\n+   |\n+LL |     type PrivAssocTy = ();\n+   |     ^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/private-in-public.rs:6:9\n+   |\n+LL | #![warn(private_interfaces)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n error: private type `PrivTy` in public interface (error E0446)\n-  --> $DIR/private-in-public.rs:10:1\n+  --> $DIR/private-in-public.rs:15:1\n    |\n LL | pub type PubAlias1 = PrivTy::PubAssocTy;\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n+warning: type `PrivTy` is more private than the item `PubAlias1`\n+   |\n+note: type alias `PubAlias1` is reachable at visibility `pub`\n+  --> $DIR/private-in-public.rs:15:1\n+   |\n+LL | pub type PubAlias1 = PrivTy::PubAssocTy;\n+   | ^^^^^^^^^^^^^^^^^^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/private-in-public.rs:28:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+\n error: private type `PrivTy` in public interface (error E0446)\n-  --> $DIR/private-in-public.rs:13:1\n+  --> $DIR/private-in-public.rs:18:1\n    |\n LL | pub type PubAlias2 = PubTy::PubAssocTy<PrivTy>;\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n-error: aborting due to 3 previous errors\n+warning: type `PrivTy` is more private than the item `PubAlias2`\n+   |\n+note: type alias `PubAlias2` is reachable at visibility `pub`\n+  --> $DIR/private-in-public.rs:18:1\n+   |\n+LL | pub type PubAlias2 = PubTy::PubAssocTy<PrivTy>;\n+   | ^^^^^^^^^^^^^^^^^^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/private-in-public.rs:28:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors; 3 warnings emitted\n "}, {"sha": "96b769699ccd4a8078e34695709283922a8d26cf", "filename": "tests/ui/const-generics/generic_const_exprs/eval-privacy.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -2,6 +2,12 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n+#![warn(private_interfaces)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n+\n pub struct Const<const U: u8>;\n \n pub trait Trait {"}, {"sha": "465621619b4d44dcc1bb472d648775b90215c13c", "filename": "tests/ui/const-generics/generic_const_exprs/eval-privacy.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,12 +1,30 @@\n error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n-  --> $DIR/eval-privacy.rs:16:5\n+  --> $DIR/eval-privacy.rs:22:5\n    |\n LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n    |     ^^^^^^^^^^^^ can't leak private type\n ...\n LL | const fn my_const_fn(val: u8) -> u8 {\n    | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n \n-error: aborting due to previous error\n+warning: type `fn(u8) -> u8 {my_const_fn}` is more private than the item `<Const<U> as Trait>::AssocTy`\n+   |\n+note: associated type `<Const<U> as Trait>::AssocTy` is reachable at visibility `pub`\n+  --> $DIR/eval-privacy.rs:22:5\n+   |\n+LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n+   |     ^^^^^^^^^^^^\n+note: but type `fn(u8) -> u8 {my_const_fn}` is only usable at visibility `pub(crate)`\n+  --> $DIR/eval-privacy.rs:29:1\n+   |\n+LL | const fn my_const_fn(val: u8) -> u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/eval-privacy.rs:5:9\n+   |\n+LL | #![warn(private_interfaces)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "f5f35fb8a4d2d600758f8e3e2bb2e2c0801e9b2c", "filename": "tests/ui/error-codes/E0445.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Ferror-codes%2FE0445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Ferror-codes%2FE0445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0445.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,3 +1,10 @@\n+#[warn(private_bounds)]\n+#[warn(private_interfaces)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n+\n trait Foo {\n     fn dummy(&self) { }\n }"}, {"sha": "ac3637a821858c8fef87e5a00d3ab8349dda0524", "filename": "tests/ui/error-codes/E0445.stderr", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Ferror-codes%2FE0445.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Ferror-codes%2FE0445.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0445.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,30 +1,74 @@\n error[E0445]: private trait `Foo` in public interface\n-  --> $DIR/E0445.rs:5:1\n+  --> $DIR/E0445.rs:12:1\n    |\n LL | trait Foo {\n    | --------- `Foo` declared as private\n ...\n LL | pub trait Bar : Foo {}\n    | ^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n+warning: trait `Foo` is more private than the item `Bar`\n+   |\n+note: trait `Bar` is reachable at visibility `pub`\n+  --> $DIR/E0445.rs:12:1\n+   |\n+LL | pub trait Bar : Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^\n+note: but trait `Foo` is only usable at visibility `pub(crate)`\n+  --> $DIR/E0445.rs:8:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/E0445.rs:1:8\n+   |\n+LL | #[warn(private_bounds)]\n+   |        ^^^^^^^^^^^^^^\n+\n error[E0445]: private trait `Foo` in public interface\n-  --> $DIR/E0445.rs:7:1\n+  --> $DIR/E0445.rs:14:1\n    |\n LL | trait Foo {\n    | --------- `Foo` declared as private\n ...\n LL | pub struct Bar2<T: Foo>(pub T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n+warning: trait `Foo` is more private than the item `Bar2`\n+   |\n+note: struct `Bar2` is reachable at visibility `pub`\n+  --> $DIR/E0445.rs:14:1\n+   |\n+LL | pub struct Bar2<T: Foo>(pub T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: but trait `Foo` is only usable at visibility `pub(crate)`\n+  --> $DIR/E0445.rs:8:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^\n+\n error[E0445]: private trait `Foo` in public interface\n-  --> $DIR/E0445.rs:9:1\n+  --> $DIR/E0445.rs:16:1\n    |\n LL | trait Foo {\n    | --------- `Foo` declared as private\n ...\n LL | pub fn foo<T: Foo> (t: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n-error: aborting due to 3 previous errors\n+warning: trait `Foo` is more private than the item `foo`\n+   |\n+note: function `foo` is reachable at visibility `pub`\n+  --> $DIR/E0445.rs:16:1\n+   |\n+LL | pub fn foo<T: Foo> (t: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: but trait `Foo` is only usable at visibility `pub(crate)`\n+  --> $DIR/E0445.rs:8:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0445`."}, {"sha": "3686afc48af8dada14f94cb6d7765f51b487874e", "filename": "tests/ui/issues/issue-18389.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fissues%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fissues%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18389.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,3 +1,9 @@\n+#![warn(private_bounds)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n+\n use std::any::Any;\n use std::any::TypeId;\n "}, {"sha": "f9ebde48a4522fa2c8480400f213fe3e91c5849b", "filename": "tests/ui/issues/issue-18389.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fissues%2Fissue-18389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fissues%2Fissue-18389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18389.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,5 +1,5 @@\n error[E0445]: private trait `Private<<Self as Public>::P, <Self as Public>::R>` in public interface\n-  --> $DIR/issue-18389.rs:7:1\n+  --> $DIR/issue-18389.rs:13:1\n    |\n LL |   trait Private<P, R> {\n    |   ------------------- `Private<<Self as Public>::P, <Self as Public>::R>` declared as private\n@@ -11,6 +11,28 @@ LL | |     <Self as Public>::R\n LL | | > {\n    | |_^ can't leak private trait\n \n-error: aborting due to previous error\n+warning: trait `Private<<Self as Public>::P, <Self as Public>::R>` is more private than the item `Public`\n+   |\n+note: trait `Public` is reachable at visibility `pub`\n+  --> $DIR/issue-18389.rs:13:1\n+   |\n+LL | / pub trait Public: Private<\n+LL | |\n+LL | |     <Self as Public>::P,\n+LL | |     <Self as Public>::R\n+LL | | > {\n+   | |_^\n+note: but trait `Private<<Self as Public>::P, <Self as Public>::R>` is only usable at visibility `pub(crate)`\n+  --> $DIR/issue-18389.rs:10:1\n+   |\n+LL | trait Private<P, R> {\n+   | ^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/issue-18389.rs:1:9\n+   |\n+LL | #![warn(private_bounds)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0445`."}, {"sha": "a80c154146378182a931ddfb44b67ffeac5cfaf2", "filename": "tests/ui/privacy/private-in-public-non-principal.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,6 +1,12 @@\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n \n+#![deny(private_interfaces)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n+\n pub trait PubPrincipal {}\n auto trait PrivNonPrincipal {}\n "}, {"sha": "9fc12affe4bfb1760ed41aa1e817a7875c82fde5", "filename": "tests/ui/privacy/private-in-public-non-principal.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,5 +1,5 @@\n warning: private trait `PrivNonPrincipal` in public interface (error E0445)\n-  --> $DIR/private-in-public-non-principal.rs:7:1\n+  --> $DIR/private-in-public-non-principal.rs:13:1\n    |\n LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loop {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,17 +8,35 @@ LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal>\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n    = note: `#[warn(private_in_public)]` on by default\n \n+error: trait `PrivNonPrincipal` is more private than the item `leak_dyn_nonprincipal`\n+   |\n+note: function `leak_dyn_nonprincipal` is reachable at visibility `pub`\n+  --> $DIR/private-in-public-non-principal.rs:13:1\n+   |\n+LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loop {} }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: but trait `PrivNonPrincipal` is only usable at visibility `pub(crate)`\n+  --> $DIR/private-in-public-non-principal.rs:11:1\n+   |\n+LL | auto trait PrivNonPrincipal {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/private-in-public-non-principal.rs:4:9\n+   |\n+LL | #![deny(private_interfaces)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n error: missing documentation for an associated function\n-  --> $DIR/private-in-public-non-principal.rs:14:9\n+  --> $DIR/private-in-public-non-principal.rs:20:9\n    |\n LL |         pub fn check_doc_lint() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/private-in-public-non-principal.rs:11:8\n+  --> $DIR/private-in-public-non-principal.rs:17:8\n    |\n LL | #[deny(missing_docs)]\n    |        ^^^^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "b3eba53dd13d5e5821620b7a2552457587ea8eb9", "filename": "tests/ui/privacy/private-inferred-type-1.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-inferred-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-inferred-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-inferred-type-1.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -5,14 +5,24 @@ trait TyParam {\n     fn ty_param_secret(&self);\n }\n \n+trait Ref {\n+    fn ref_secret(self);\n+}\n+\n mod m {\n     struct Priv;\n \n     impl ::Arr0 for [Priv; 0] { fn arr0_secret(&self) {} }\n     impl ::TyParam for Option<Priv> { fn ty_param_secret(&self) {} }\n+    impl<'a> ::Ref for &'a Priv { fn ref_secret(self) {} }\n }\n \n+fn anyref<'a, T>() -> &'a T { panic!() }\n+\n fn main() {\n     [].arr0_secret(); //~ ERROR type `Priv` is private\n     None.ty_param_secret(); //~ ERROR type `Priv` is private\n+    Ref::ref_secret(anyref());\n+    //~^ ERROR type `Priv` is private\n+    //~| ERROR type `Priv` is private\n }"}, {"sha": "47c11d6ec760768d826c8f844360917b75c784e2", "filename": "tests/ui/privacy/private-inferred-type-1.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,14 +1,26 @@\n error: type `Priv` is private\n-  --> $DIR/private-inferred-type-1.rs:16:5\n+  --> $DIR/private-inferred-type-1.rs:23:5\n    |\n LL |     [].arr0_secret();\n    |     ^^^^^^^^^^^^^^^^ private type\n \n error: type `Priv` is private\n-  --> $DIR/private-inferred-type-1.rs:17:5\n+  --> $DIR/private-inferred-type-1.rs:24:5\n    |\n LL |     None.ty_param_secret();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ private type\n \n-error: aborting due to 2 previous errors\n+error: type `Priv` is private\n+  --> $DIR/private-inferred-type-1.rs:25:5\n+   |\n+LL |     Ref::ref_secret(anyref());\n+   |     ^^^^^^^^^^^^^^^ private type\n+\n+error: type `Priv` is private\n+  --> $DIR/private-inferred-type-1.rs:25:21\n+   |\n+LL |     Ref::ref_secret(anyref());\n+   |                     ^^^^^^^^ private type\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "8b53f372fc93797a51f912ae1b9aac0ed99a671e", "filename": "tests/ui/privacy/unnameable_types.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Funnameable_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Funnameable_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Funnameable_types.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -0,0 +1,30 @@\n+#![allow(unused)]\n+#![allow(private_in_public)]\n+#![deny(unnameable_types)]\n+\n+mod m {\n+    pub struct PubStruct(pub i32); //~ ERROR struct `PubStruct` is reachable but cannot be named\n+\n+    pub enum PubE { //~ ERROR enum `PubE` is reachable but cannot be named\n+        V(i32),\n+    }\n+\n+    pub trait PubTr { //~ ERROR trait `PubTr` is reachable but cannot be named\n+        const C : i32 = 0;\n+        type Alias; //~ ERROR associated type `PubTr::Alias` is reachable but cannot be named\n+        fn f() {}\n+    }\n+\n+    impl PubTr for PubStruct {\n+        type Alias = i32; //~ ERROR associated type `<PubStruct as PubTr>::Alias` is reachable but cannot be named\n+        fn f() {}\n+    }\n+}\n+\n+pub trait Voldemort<T> {}\n+\n+impl Voldemort<m::PubStruct> for i32 {}\n+impl Voldemort<m::PubE> for i32 {}\n+impl<T> Voldemort<T> for u32 where T: m::PubTr {}\n+\n+fn main() {}"}, {"sha": "25eb5c9434a8fea27a9e9024eacea3916206d2b0", "filename": "tests/ui/privacy/unnameable_types.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Funnameable_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Funnameable_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Funnameable_types.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -0,0 +1,38 @@\n+error: struct `PubStruct` is reachable but cannot be named\n+  --> $DIR/unnameable_types.rs:6:5\n+   |\n+LL |     pub struct PubStruct(pub i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^ reachable at visibility `pub`, but can only be named at visibility `pub(crate)`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unnameable_types.rs:3:9\n+   |\n+LL | #![deny(unnameable_types)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: enum `PubE` is reachable but cannot be named\n+  --> $DIR/unnameable_types.rs:8:5\n+   |\n+LL |     pub enum PubE {\n+   |     ^^^^^^^^^^^^^ reachable at visibility `pub`, but can only be named at visibility `pub(crate)`\n+\n+error: trait `PubTr` is reachable but cannot be named\n+  --> $DIR/unnameable_types.rs:12:5\n+   |\n+LL |     pub trait PubTr {\n+   |     ^^^^^^^^^^^^^^^ reachable at visibility `pub`, but can only be named at visibility `pub(crate)`\n+\n+error: associated type `PubTr::Alias` is reachable but cannot be named\n+  --> $DIR/unnameable_types.rs:14:9\n+   |\n+LL |         type Alias;\n+   |         ^^^^^^^^^^ reachable at visibility `pub`, but can only be named at visibility `pub(crate)`\n+\n+error: associated type `<PubStruct as PubTr>::Alias` is reachable but cannot be named\n+  --> $DIR/unnameable_types.rs:19:9\n+   |\n+LL |         type Alias = i32;\n+   |         ^^^^^^^^^^ reachable at visibility `pub`, but can only be named at visibility `pub(crate)`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "9899902dd884f59231136152247708f10f645b0e", "filename": "tests/ui/privacy/where-priv-type.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-priv-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-priv-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fwhere-priv-type.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -5,6 +5,12 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n+#![warn(private_bounds)]\n+#![warn(private_interfaces)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n \n struct PrivTy;\n trait PrivTr {}"}, {"sha": "2830fa6cd442cefd350e2cdc2342fee4cbf1f8d9", "filename": "tests/ui/privacy/where-priv-type.stderr", "status": "modified", "additions": 103, "deletions": 7, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-priv-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-priv-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fwhere-priv-type.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,5 +1,5 @@\n warning: private type `PrivTy` in public interface (error E0446)\n-  --> $DIR/where-priv-type.rs:19:1\n+  --> $DIR/where-priv-type.rs:25:1\n    |\n LL | pub struct S\n    | ^^^^^^^^^^^^\n@@ -8,17 +8,48 @@ LL | pub struct S\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n    = note: `#[warn(private_in_public)]` on by default\n \n+warning: type `PrivTy` is more private than the item `S`\n+   |\n+note: struct `S` is reachable at visibility `pub`\n+  --> $DIR/where-priv-type.rs:25:1\n+   |\n+LL | pub struct S\n+   | ^^^^^^^^^^^^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-priv-type.rs:15:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/where-priv-type.rs:8:9\n+   |\n+LL | #![warn(private_bounds)]\n+   |         ^^^^^^^^^^^^^^\n+\n warning: private type `PrivTy` in public interface (error E0446)\n-  --> $DIR/where-priv-type.rs:27:1\n+  --> $DIR/where-priv-type.rs:33:1\n    |\n LL | pub enum E\n    | ^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n+warning: type `PrivTy` is more private than the item `E`\n+   |\n+note: enum `E` is reachable at visibility `pub`\n+  --> $DIR/where-priv-type.rs:33:1\n+   |\n+LL | pub enum E\n+   | ^^^^^^^^^^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-priv-type.rs:15:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+\n warning: private type `PrivTy` in public interface (error E0446)\n-  --> $DIR/where-priv-type.rs:35:1\n+  --> $DIR/where-priv-type.rs:41:1\n    |\n LL | / pub fn f()\n LL | |\n@@ -30,17 +61,47 @@ LL | |     PrivTy:\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n+warning: type `PrivTy` is more private than the item `f`\n+   |\n+note: function `f` is reachable at visibility `pub`\n+  --> $DIR/where-priv-type.rs:41:1\n+   |\n+LL | / pub fn f()\n+LL | |\n+LL | |\n+LL | | where\n+LL | |     PrivTy:\n+   | |___________^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-priv-type.rs:15:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+\n error[E0446]: private type `PrivTy` in public interface\n-  --> $DIR/where-priv-type.rs:43:1\n+  --> $DIR/where-priv-type.rs:49:1\n    |\n LL | struct PrivTy;\n    | ------------- `PrivTy` declared as private\n ...\n LL | impl S\n    | ^^^^^^ can't leak private type\n \n+warning: type `PrivTy` is more private than the item `S`\n+   |\n+note: implementation `S` is reachable at visibility `pub`\n+  --> $DIR/where-priv-type.rs:49:1\n+   |\n+LL | impl S\n+   | ^^^^^^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-priv-type.rs:15:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+\n warning: private type `PrivTy` in public interface (error E0446)\n-  --> $DIR/where-priv-type.rs:48:5\n+  --> $DIR/where-priv-type.rs:54:5\n    |\n LL | /     pub fn f()\n LL | |\n@@ -52,15 +113,50 @@ LL | |         PrivTy:\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n+warning: type `PrivTy` is more private than the item `S::f`\n+   |\n+note: associated function `S::f` is reachable at visibility `pub`\n+  --> $DIR/where-priv-type.rs:54:5\n+   |\n+LL | /     pub fn f()\n+LL | |\n+LL | |\n+LL | |     where\n+LL | |         PrivTy:\n+   | |_______________^\n+note: but type `PrivTy` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-priv-type.rs:15:1\n+   |\n+LL | struct PrivTy;\n+   | ^^^^^^^^^^^^^\n+\n error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n-  --> $DIR/where-priv-type.rs:80:5\n+  --> $DIR/where-priv-type.rs:86:5\n    |\n LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n    |     ^^^^^^^^^^^^ can't leak private type\n ...\n LL | const fn my_const_fn(val: u8) -> u8 {\n    | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n \n-error: aborting due to 2 previous errors; 4 warnings emitted\n+warning: type `fn(u8) -> u8 {my_const_fn}` is more private than the item `<Const<U> as Trait>::AssocTy`\n+   |\n+note: associated type `<Const<U> as Trait>::AssocTy` is reachable at visibility `pub`\n+  --> $DIR/where-priv-type.rs:86:5\n+   |\n+LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n+   |     ^^^^^^^^^^^^\n+note: but type `fn(u8) -> u8 {my_const_fn}` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-priv-type.rs:93:1\n+   |\n+LL | const fn my_const_fn(val: u8) -> u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/where-priv-type.rs:9:9\n+   |\n+LL | #![warn(private_interfaces)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 10 warnings emitted\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "3aad893eae2bff5691a81fd437143709bfe6e8e4", "filename": "tests/ui/privacy/where-pub-type-impls-priv-trait.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -4,6 +4,11 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n+#![warn(private_bounds)]\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n \n struct PrivTy;\n trait PrivTr {}"}, {"sha": "413f7f781cd850e7ad8c7fc5ee9389eda59e94ed", "filename": "tests/ui/privacy/where-pub-type-impls-priv-trait.stderr", "status": "modified", "additions": 82, "deletions": 6, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fwhere-pub-type-impls-priv-trait.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,23 +1,54 @@\n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/where-pub-type-impls-priv-trait.rs:19:1\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:24:1\n    |\n LL | trait PrivTr {}\n    | ------------ `PrivTr` declared as private\n ...\n LL | pub struct S\n    | ^^^^^^^^^^^^ can't leak private trait\n \n+warning: trait `PrivTr` is more private than the item `S`\n+   |\n+note: struct `S` is reachable at visibility `pub`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:24:1\n+   |\n+LL | pub struct S\n+   | ^^^^^^^^^^^^\n+note: but trait `PrivTr` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:14:1\n+   |\n+LL | trait PrivTr {}\n+   | ^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:7:9\n+   |\n+LL | #![warn(private_bounds)]\n+   |         ^^^^^^^^^^^^^^\n+\n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/where-pub-type-impls-priv-trait.rs:26:1\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:31:1\n    |\n LL | trait PrivTr {}\n    | ------------ `PrivTr` declared as private\n ...\n LL | pub enum E\n    | ^^^^^^^^^^ can't leak private trait\n \n+warning: trait `PrivTr` is more private than the item `E`\n+   |\n+note: enum `E` is reachable at visibility `pub`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:31:1\n+   |\n+LL | pub enum E\n+   | ^^^^^^^^^^\n+note: but trait `PrivTr` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:14:1\n+   |\n+LL | trait PrivTr {}\n+   | ^^^^^^^^^^^^\n+\n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/where-pub-type-impls-priv-trait.rs:33:1\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:38:1\n    |\n LL |   trait PrivTr {}\n    |   ------------ `PrivTr` declared as private\n@@ -28,17 +59,46 @@ LL | | where\n LL | |     PubTy: PrivTr\n    | |_________________^ can't leak private trait\n \n+warning: trait `PrivTr` is more private than the item `f`\n+   |\n+note: function `f` is reachable at visibility `pub`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:38:1\n+   |\n+LL | / pub fn f()\n+LL | |\n+LL | | where\n+LL | |     PubTy: PrivTr\n+   | |_________________^\n+note: but trait `PrivTr` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:14:1\n+   |\n+LL | trait PrivTr {}\n+   | ^^^^^^^^^^^^\n+\n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/where-pub-type-impls-priv-trait.rs:40:1\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:45:1\n    |\n LL | trait PrivTr {}\n    | ------------ `PrivTr` declared as private\n ...\n LL | impl S\n    | ^^^^^^ can't leak private trait\n \n+warning: trait `PrivTr` is more private than the item `S`\n+   |\n+note: implementation `S` is reachable at visibility `pub`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:45:1\n+   |\n+LL | impl S\n+   | ^^^^^^\n+note: but trait `PrivTr` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:14:1\n+   |\n+LL | trait PrivTr {}\n+   | ^^^^^^^^^^^^\n+\n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/where-pub-type-impls-priv-trait.rs:45:5\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:50:5\n    |\n LL |   trait PrivTr {}\n    |   ------------ `PrivTr` declared as private\n@@ -49,6 +109,22 @@ LL | |     where\n LL | |         PubTy: PrivTr\n    | |_____________________^ can't leak private trait\n \n-error: aborting due to 5 previous errors\n+warning: trait `PrivTr` is more private than the item `S::f`\n+   |\n+note: associated function `S::f` is reachable at visibility `pub`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:50:5\n+   |\n+LL | /     pub fn f()\n+LL | |\n+LL | |     where\n+LL | |         PubTy: PrivTr\n+   | |_____________________^\n+note: but trait `PrivTr` is only usable at visibility `pub(crate)`\n+  --> $DIR/where-pub-type-impls-priv-trait.rs:14:1\n+   |\n+LL | trait PrivTr {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors; 5 warnings emitted\n \n For more information about this error, try `rustc --explain E0445`."}, {"sha": "9e4ba80a784a5ac9234f464174c6bc06b4f4cd62", "filename": "tests/ui/pub/issue-33174-restricted-type-in-public-interface.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.rs?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,15 +1,24 @@\n #![allow(non_camel_case_types)] // genus is always capitalized\n+#![warn(private_interfaces)]\n+//~^ NOTE the lint level is defined here\n+\n+// In this test both old and new private-in-public diagnostic were emitted.\n+// Old diagnostic will be deleted soon.\n+// See https://rust-lang.github.io/rfcs/2145-type-privacy.html.\n \n pub(crate) struct Snail;\n //~^ NOTE `Snail` declared as private\n+//~| NOTE but type `Snail` is only usable at visibility `pub(crate)`\n \n mod sea {\n     pub(super) struct Turtle;\n     //~^ NOTE `Turtle` declared as crate-private\n+    //~| NOTE but type `Turtle` is only usable at visibility `pub(crate)`\n }\n \n struct Tortoise;\n //~^ NOTE `Tortoise` declared as private\n+//~| NOTE but type `Tortoise` is only usable at visibility `pub(crate)`\n \n pub struct Shell<T> {\n     pub(crate) creature: T,\n@@ -18,11 +27,14 @@ pub struct Shell<T> {\n pub type Helix_pomatia = Shell<Snail>;\n //~^ ERROR private type `Snail` in public interface\n //~| NOTE can't leak private type\n+//~| NOTE type alias `Helix_pomatia` is reachable at visibility `pub`\n pub type Dermochelys_coriacea = Shell<sea::Turtle>;\n //~^ ERROR crate-private type `Turtle` in public interface\n //~| NOTE can't leak crate-private type\n+//~| NOTE type alias `Dermochelys_coriacea` is reachable at visibility `pub`\n pub type Testudo_graeca = Shell<Tortoise>;\n //~^ ERROR private type `Tortoise` in public interface\n //~| NOTE can't leak private type\n+//~| NOTE type alias `Testudo_graeca` is reachable at visibility `pub`\n \n fn main() {}"}, {"sha": "52f67d4cdd504b51d2e6bc12ce46307fab45076c", "filename": "tests/ui/pub/issue-33174-restricted-type-in-public-interface.stderr", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d46382f6f0688df0fc5c67386f86ccd6fdb975f/tests%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpub%2Fissue-33174-restricted-type-in-public-interface.stderr?ref=6d46382f6f0688df0fc5c67386f86ccd6fdb975f", "patch": "@@ -1,30 +1,74 @@\n error[E0446]: private type `Snail` in public interface\n-  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:18:1\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:27:1\n    |\n LL | pub(crate) struct Snail;\n    | ----------------------- `Snail` declared as private\n ...\n LL | pub type Helix_pomatia = Shell<Snail>;\n    | ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n+warning: type `Snail` is more private than the item `Helix_pomatia`\n+   |\n+note: type alias `Helix_pomatia` is reachable at visibility `pub`\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:27:1\n+   |\n+LL | pub type Helix_pomatia = Shell<Snail>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+note: but type `Snail` is only usable at visibility `pub(crate)`\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:9:1\n+   |\n+LL | pub(crate) struct Snail;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:2:9\n+   |\n+LL | #![warn(private_interfaces)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n error[E0446]: crate-private type `Turtle` in public interface\n-  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:21:1\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:31:1\n    |\n LL |     pub(super) struct Turtle;\n    |     ------------------------ `Turtle` declared as crate-private\n ...\n LL | pub type Dermochelys_coriacea = Shell<sea::Turtle>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak crate-private type\n \n+warning: type `Turtle` is more private than the item `Dermochelys_coriacea`\n+   |\n+note: type alias `Dermochelys_coriacea` is reachable at visibility `pub`\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:31:1\n+   |\n+LL | pub type Dermochelys_coriacea = Shell<sea::Turtle>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: but type `Turtle` is only usable at visibility `pub(crate)`\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:14:5\n+   |\n+LL |     pub(super) struct Turtle;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0446]: private type `Tortoise` in public interface\n-  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:24:1\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:35:1\n    |\n LL | struct Tortoise;\n    | --------------- `Tortoise` declared as private\n ...\n LL | pub type Testudo_graeca = Shell<Tortoise>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n-error: aborting due to 3 previous errors\n+warning: type `Tortoise` is more private than the item `Testudo_graeca`\n+   |\n+note: type alias `Testudo_graeca` is reachable at visibility `pub`\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:35:1\n+   |\n+LL | pub type Testudo_graeca = Shell<Tortoise>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: but type `Tortoise` is only usable at visibility `pub(crate)`\n+  --> $DIR/issue-33174-restricted-type-in-public-interface.rs:19:1\n+   |\n+LL | struct Tortoise;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0446`."}]}