{"sha": "a8ce543dc937043f2988a856c0c43339eadf8d69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Y2U1NDNkYzkzNzA0M2YyOTg4YTg1NmMwYzQzMzM5ZWFkZjhkNjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-04T20:35:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:35:06Z"}, "message": "Add std::os::get_exe_path\n\nNeed this to correctly determine sysroot in rustc", "tree": {"sha": "c901752717bf2627bc987a4698a5c47918410366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c901752717bf2627bc987a4698a5c47918410366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ce543dc937043f2988a856c0c43339eadf8d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce543dc937043f2988a856c0c43339eadf8d69", "html_url": "https://github.com/rust-lang/rust/commit/a8ce543dc937043f2988a856c0c43339eadf8d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce543dc937043f2988a856c0c43339eadf8d69/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0a4d34e141a7a6445457e27fe18d875fb57d9d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a4d34e141a7a6445457e27fe18d875fb57d9d5", "html_url": "https://github.com/rust-lang/rust/commit/a0a4d34e141a7a6445457e27fe18d875fb57d9d5"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "7e876ed760269f03a4f3aa7930dfdb5daa4037e2", "filename": "src/lib/ctypes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fctypes.rs?ref=a8ce543dc937043f2988a856c0c43339eadf8d69", "patch": "@@ -2,3 +2,4 @@\n type size_t = uint;\n type ssize_t = int;\n \n+type uint32_t = u32;"}, {"sha": "563d10092cb3f10259a78f9be1b2df6b92316644", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=a8ce543dc937043f2988a856c0c43339eadf8d69", "patch": "@@ -1,5 +1,3 @@\n-\n-\n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n native \"cdecl\" mod libc = \"\" {\n@@ -28,6 +26,8 @@ native \"cdecl\" mod libc = \"\" {\n     fn unsetenv(n: str::sbuf) -> int;\n     fn pipe(buf: *mutable int) -> int;\n     fn waitpid(pid: int, &status: int, options: int) -> int;\n+    fn readlink(path: str::sbuf, buf: str::sbuf,\n+                bufsize: ctypes::size_t) -> ctypes::ssize_t;\n }\n \n mod libc_constants {\n@@ -78,6 +78,21 @@ native \"rust\" mod rustrt {\n \n fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n \n+/// Returns the directory containing the running program\n+/// followed by a path separator\n+fn get_exe_path() -> option::t<fs::path> {\n+    let bufsize = 1023u;\n+    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize));\n+    ret str::as_buf(\"/proc/self/exe\", { |proc_self_buf|\n+        str::as_buf(path, { |path_buf|\n+            if libc::readlink(proc_self_buf, path_buf, bufsize) != -1 {\n+                option::some(fs::dirname(path) + fs::path_sep())\n+            } else {\n+                option::none\n+            }\n+        })\n+    });\n+}\n \n // Local Variables:\n // mode: rust;"}, {"sha": "aaf682b23baa2e9ef082e04777e970cafa14498d", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=a8ce543dc937043f2988a856c0c43339eadf8d69", "patch": "@@ -25,6 +25,8 @@ native \"cdecl\" mod libc = \"\" {\n     fn unsetenv(n: str::sbuf) -> int;\n     fn pipe(buf: *mutable int) -> int;\n     fn waitpid(pid: int, &status: int, options: int) -> int;\n+    fn _NSGetExecutablePath(buf: str::sbuf,\n+                            bufsize: *mutable ctypes::uint32_t) -> int;\n }\n \n mod libc_constants {\n@@ -75,6 +77,18 @@ native \"rust\" mod rustrt {\n \n fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n \n+fn get_exe_path() -> option::t<fs::path> {\n+    // FIXME: This doesn't handle the case where the buffer is too small\n+    let bufsize = 1023u32;\n+    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize as uint));\n+    ret str::as_buf(path, { |path_buf|\n+        if libc::_NSGetExecutablePath(path_buf, ptr::addr_of(bufsize)) == 0 {\n+            option::some(fs::dirname(path) + fs::path_sep())\n+        } else {\n+            option::none\n+        }\n+    });\n+}\n \n // Local Variables:\n // mode: rust;"}, {"sha": "560d9be8c8ee52a76c6d779d5a98a8835e20aa3a", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=a8ce543dc937043f2988a856c0c43339eadf8d69", "patch": "@@ -39,10 +39,17 @@ mod libc_constants {\n     }\n }\n \n+type DWORD = u32;\n+type HMODULE = uint;\n+type LPTSTR = str::sbuf;\n+\n native \"x86stdcall\" mod kernel32 {\n     fn GetEnvironmentVariableA(n: str::sbuf, v: str::sbuf, nsize: uint) ->\n        uint;\n     fn SetEnvironmentVariableA(n: str::sbuf, v: str::sbuf) -> int;\n+    fn GetModuleFileNameA(hModule: HMODULE,\n+                          lpFilename: LPTSTR,\n+                          nSize: DWORD) -> DWORD;\n }\n \n fn exec_suffix() -> str { ret \".exe\"; }\n@@ -81,6 +88,20 @@ fn waitpid(pid: int) -> int { ret rustrt::rust_process_wait(pid); }\n \n fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n \n+fn get_exe_path() -> option::t<fs::path> {\n+    // FIXME: This doesn't handle the case where the buffer is too small\n+    let bufsize = 1023u;\n+    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize));\n+    ret str::as_buf(path, { |path_buf|\n+        if kernel32::GetModuleFileNameA(0u, path_buf,\n+                                        bufsize as u32) != 0u32 {\n+            option::some(fs::dirname(path) + fs::path_sep())\n+        } else {\n+            option::none\n+        }\n+    });\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "2d17afddc95e8666d29cf3c5f3966315ae20ceb1", "filename": "src/test/stdtest/os.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Ftest%2Fstdtest%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce543dc937043f2988a856c0c43339eadf8d69/src%2Ftest%2Fstdtest%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fos.rs?ref=a8ce543dc937043f2988a856c0c43339eadf8d69", "patch": "@@ -28,6 +28,21 @@ fn test_getenv_big() {\n     assert (getenv(\"NAME3\") == option::some(s));\n }\n \n+#[test]\n+fn get_exe_path() {\n+    let path = std::os::get_exe_path();\n+    assert option::is_some(path);\n+    let path = option::get(path);\n+    log path;\n+\n+    // Hard to test this function\n+    if std::os::target_os() != \"win32\" {\n+        assert std::str::starts_with(path, std::fs::path_sep());\n+    } else {\n+        assert path[1] == ':' as u8;\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}]}