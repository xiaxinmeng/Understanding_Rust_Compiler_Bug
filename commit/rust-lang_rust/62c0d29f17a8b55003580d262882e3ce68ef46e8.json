{"sha": "62c0d29f17a8b55003580d262882e3ce68ef46e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYzBkMjlmMTdhOGI1NTAwMzU4MGQyNjI4ODJlM2NlNjhlZjQ2ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-04T21:53:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-04T21:53:32Z"}, "message": "Auto merge of #6292 - ebroto:rustup, r=ebroto\n\nRustup\n\nchangelog: none\n\nr? `@ghost`", "tree": {"sha": "a5f803d3f47c86a24ab2bb48f78243570ca68934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f803d3f47c86a24ab2bb48f78243570ca68934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62c0d29f17a8b55003580d262882e3ce68ef46e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62c0d29f17a8b55003580d262882e3ce68ef46e8", "html_url": "https://github.com/rust-lang/rust/commit/62c0d29f17a8b55003580d262882e3ce68ef46e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62c0d29f17a8b55003580d262882e3ce68ef46e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cf40cdcdff78e235eceeaea3419a5520877699", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cf40cdcdff78e235eceeaea3419a5520877699", "html_url": "https://github.com/rust-lang/rust/commit/c2cf40cdcdff78e235eceeaea3419a5520877699"}, {"sha": "f5166e81b1065983de15f883ae04a81d30f75edf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5166e81b1065983de15f883ae04a81d30f75edf", "html_url": "https://github.com/rust-lang/rust/commit/f5166e81b1065983de15f883ae04a81d30f75edf"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "0035ded9356cf53ba787f20a386ac9bee6162126", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62c0d29f17a8b55003580d262882e3ce68ef46e8/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c0d29f17a8b55003580d262882e3ce68ef46e8/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=62c0d29f17a8b55003580d262882e3ce68ef46e8", "patch": "@@ -7,8 +7,9 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, QPath, UnOp};\n use rustc_lint::LateContext;\n+use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n@@ -500,21 +501,21 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n }\n \n pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n-    use rustc_middle::mir::interpret::{ConstValue, Scalar};\n+    use rustc_middle::mir::interpret::ConstValue;\n     match result.val {\n-        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data: d, .. })) => {\n+        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(int))) => {\n             match result.ty.kind() {\n-                ty::Bool => Some(Constant::Bool(d == 1)),\n-                ty::Uint(_) | ty::Int(_) => Some(Constant::Int(d)),\n+                ty::Bool => Some(Constant::Bool(int == ScalarInt::TRUE)),\n+                ty::Uint(_) | ty::Int(_) => Some(Constant::Int(int.assert_bits(int.size()))),\n                 ty::Float(FloatTy::F32) => Some(Constant::F32(f32::from_bits(\n-                    d.try_into().expect(\"invalid f32 bit representation\"),\n+                    int.try_into().expect(\"invalid f32 bit representation\"),\n                 ))),\n                 ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(\n-                    d.try_into().expect(\"invalid f64 bit representation\"),\n+                    int.try_into().expect(\"invalid f64 bit representation\"),\n                 ))),\n                 ty::RawPtr(type_and_mut) => {\n                     if let ty::Uint(_) = type_and_mut.ty.kind() {\n-                        return Some(Constant::RawPtr(d));\n+                        return Some(Constant::RawPtr(int.assert_bits(int.size())));\n                     }\n                     None\n                 },"}]}