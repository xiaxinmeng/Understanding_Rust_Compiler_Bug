{"sha": "d1b027421edb0c559ed0840174b83dfa3bcab7ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYjAyNzQyMWVkYjBjNTU5ZWQwODQwMTc0YjgzZGZhM2JjYWI3Y2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-14T22:24:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-14T23:25:04Z"}, "message": "Turn deprecation lint `legacy_imports` into a hard error", "tree": {"sha": "9cba177270b4ff3d58b988778eee73e4daa25b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cba177270b4ff3d58b988778eee73e4daa25b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b027421edb0c559ed0840174b83dfa3bcab7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b027421edb0c559ed0840174b83dfa3bcab7ce", "html_url": "https://github.com/rust-lang/rust/commit/d1b027421edb0c559ed0840174b83dfa3bcab7ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b027421edb0c559ed0840174b83dfa3bcab7ce/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935a2f12b2a3ce44cbcbd0f7de1b388949cccca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/935a2f12b2a3ce44cbcbd0f7de1b388949cccca2", "html_url": "https://github.com/rust-lang/rust/commit/935a2f12b2a3ce44cbcbd0f7de1b388949cccca2"}], "stats": {"total": 195, "additions": 35, "deletions": 160}, "files": [{"sha": "3a85a40fd1fdb9af606df8414f8289b4330949ee", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -91,43 +91,6 @@ The legacy_directory_ownership warning is issued when\n The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n it into its own directory if appropriate.\n \n-## legacy-imports\n-\n-This lint detects names that resolve to ambiguous glob imports. Some example\n-code that triggers this lint:\n-\n-```rust,ignore\n-pub struct Foo;\n-\n-mod bar {\n-    struct Foo;\n-\n-    mod baz {\n-        use *;\n-        use bar::*;\n-        fn f(_: Foo) {}\n-    }\n-}\n-```\n-\n-This will produce:\n-\n-```text\n-error: `Foo` is ambiguous\n- --> src/main.rs:9:17\n-  |\n-7 |         use *;\n-  |             - `Foo` could refer to the name imported here\n-8 |         use bar::*;\n-  |             ------ `Foo` could also refer to the name imported here\n-9 |         fn f(_: Foo) {}\n-  |                 ^^^\n-  |\n-  = note: #[deny(legacy_imports)] on by default\n-  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n-```\n-\n \n ## missing-fragment-specifier\n "}, {"sha": "e3ccdf6872cfbc15e7f00b8e37e9264bd62ab3b5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -176,12 +176,6 @@ declare_lint! {\n      not named `mod.rs`\"\n }\n \n-declare_lint! {\n-    pub LEGACY_IMPORTS,\n-    Deny,\n-    \"detects names that resolve to ambiguous glob imports with RFC 1560\"\n-}\n-\n declare_lint! {\n     pub LEGACY_CONSTRUCTOR_VISIBILITY,\n     Deny,\n@@ -314,7 +308,6 @@ impl LintPass for HardwiredLints {\n             SAFE_PACKED_BORROWS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n             LEGACY_DIRECTORY_OWNERSHIP,\n-            LEGACY_IMPORTS,\n             LEGACY_CONSTRUCTOR_VISIBILITY,\n             MISSING_FRAGMENT_SPECIFIER,\n             PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,"}, {"sha": "ddcc1c1bf3ab48ee1cd1a6a43e5061578e62d46a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -224,11 +224,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n             edition: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LEGACY_IMPORTS),\n-            reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n-            edition: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n@@ -317,6 +312,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/36892\");\n     store.register_removed(\"extra_requirement_in_impl\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/37166\");\n+    store.register_removed(\"legacy_imports\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/38260\");\n     store.register_removed(\"coerce_never\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"resolve_trait_on_defaulted_unit\","}, {"sha": "51361133e944404edaeb21c6360c069eea359e4a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 44, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -1225,12 +1225,10 @@ enum NameBindingKind<'a> {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n         used: Cell<bool>,\n-        legacy_self_import: bool,\n     },\n     Ambiguity {\n         b1: &'a NameBinding<'a>,\n         b2: &'a NameBinding<'a>,\n-        legacy: bool,\n     }\n }\n \n@@ -1252,15 +1250,13 @@ struct AmbiguityError<'a> {\n     lexical: bool,\n     b1: &'a NameBinding<'a>,\n     b2: &'a NameBinding<'a>,\n-    legacy: bool,\n }\n \n impl<'a> NameBinding<'a> {\n     fn module(&self) -> Option<Module<'a>> {\n         match self.kind {\n             NameBindingKind::Module(module) => Some(module),\n             NameBindingKind::Import { binding, .. } => binding.module(),\n-            NameBindingKind::Ambiguity { legacy: true, b1, .. } => b1.module(),\n             _ => None,\n         }\n     }\n@@ -1270,7 +1266,6 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Def(def) => def,\n             NameBindingKind::Module(module) => module.def().unwrap(),\n             NameBindingKind::Import { binding, .. } => binding.def(),\n-            NameBindingKind::Ambiguity { legacy: true, b1, .. } => b1.def(),\n             NameBindingKind::Ambiguity { .. } => Def::Err,\n         }\n     }\n@@ -1853,27 +1848,20 @@ impl<'a> Resolver<'a> {\n     fn record_use(&mut self, ident: Ident, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n                   -> bool /* true if an error was reported */ {\n         match binding.kind {\n-            NameBindingKind::Import { directive, binding, ref used, legacy_self_import }\n+            NameBindingKind::Import { directive, binding, ref used }\n                     if !used.get() => {\n                 used.set(true);\n                 directive.used.set(true);\n-                if legacy_self_import {\n-                    self.warn_legacy_self_import(directive);\n-                    return false;\n-                }\n                 self.used_imports.insert((directive.id, ns));\n                 self.add_to_glob_map(directive.id, ident);\n                 self.record_use(ident, ns, binding, span)\n             }\n             NameBindingKind::Import { .. } => false,\n-            NameBindingKind::Ambiguity { b1, b2, legacy } => {\n+            NameBindingKind::Ambiguity { b1, b2 } => {\n                 self.ambiguity_errors.push(AmbiguityError {\n-                    span: span, name: ident.name, lexical: false, b1: b1, b2: b2, legacy,\n+                    span, name: ident.name, lexical: false, b1, b2,\n                 });\n-                if legacy {\n-                    self.record_use(ident, ns, b1, span);\n-                }\n-                !legacy\n+                true\n             }\n             _ => false\n         }\n@@ -4074,7 +4062,7 @@ impl<'a> Resolver<'a> {\n         self.report_proc_macro_import(krate);\n         let mut reported_spans = FxHashSet();\n \n-        for &AmbiguityError { span, name, b1, b2, lexical, legacy } in &self.ambiguity_errors {\n+        for &AmbiguityError { span, name, b1, b2, lexical } in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n             let participle = |binding: &NameBinding| {\n                 if binding.is_import() { \"imported\" } else { \"defined\" }\n@@ -4090,27 +4078,15 @@ impl<'a> Resolver<'a> {\n                 format!(\"macro-expanded {} do not shadow when used in a macro invocation path\",\n                         if b1.is_import() { \"imports\" } else { \"items\" })\n             };\n-            if legacy {\n-                let id = match b2.kind {\n-                    NameBindingKind::Import { directive, .. } => directive.id,\n-                    _ => unreachable!(),\n-                };\n-                let mut span = MultiSpan::from_span(span);\n-                span.push_span_label(b1.span, msg1);\n-                span.push_span_label(b2.span, msg2);\n-                let msg = format!(\"`{}` is ambiguous\", name);\n-                self.session.buffer_lint(lint::builtin::LEGACY_IMPORTS, id, span, &msg);\n-            } else {\n-                let mut err =\n-                    struct_span_err!(self.session, span, E0659, \"`{}` is ambiguous\", name);\n-                err.span_note(b1.span, &msg1);\n-                match b2.def() {\n-                    Def::Macro(..) if b2.span == DUMMY_SP =>\n-                        err.note(&format!(\"`{}` is also a builtin macro\", name)),\n-                    _ => err.span_note(b2.span, &msg2),\n-                };\n-                err.note(&note).emit();\n-            }\n+\n+            let mut err = struct_span_err!(self.session, span, E0659, \"`{}` is ambiguous\", name);\n+            err.span_note(b1.span, &msg1);\n+            match b2.def() {\n+                Def::Macro(..) if b2.span == DUMMY_SP =>\n+                    err.note(&format!(\"`{}` is also a builtin macro\", name)),\n+                _ => err.span_note(b2.span, &msg2),\n+            };\n+            err.note(&note).emit();\n         }\n \n         for &PrivacyError(span, name, binding) in &self.privacy_errors {\n@@ -4261,12 +4237,6 @@ impl<'a> Resolver<'a> {\n         self.name_already_seen.insert(name, span);\n     }\n \n-    fn warn_legacy_self_import(&self, directive: &'a ImportDirective<'a>) {\n-        let (id, span) = (directive.id, directive.span);\n-        let msg = \"`self` no longer imports values\";\n-        self.session.buffer_lint(lint::builtin::LEGACY_IMPORTS, id, span, msg);\n-    }\n-\n     fn check_proc_macro_attrs(&mut self, attrs: &[ast::Attribute]) {\n         if self.proc_macro_enabled { return; }\n "}, {"sha": "0a0e8bac9e2e9c22e074899db6076be737c99e92", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -528,7 +528,6 @@ impl<'a> Resolver<'a> {\n                                 b1: shadower,\n                                 b2: binding,\n                                 lexical: true,\n-                                legacy: false,\n                             });\n                             return potential_illegal_shadower;\n                         }"}, {"sha": "111b4e448c74db83554f93447d75f74a974cead9", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -179,7 +179,6 @@ impl<'a> Resolver<'a> {\n                             lexical: false,\n                             b1: binding,\n                             b2: shadowed_glob,\n-                            legacy: false,\n                         });\n                     }\n                 }\n@@ -351,7 +350,6 @@ impl<'a> Resolver<'a> {\n                 binding,\n                 directive,\n                 used: Cell::new(false),\n-                legacy_self_import: false,\n             },\n             span: directive.span,\n             vis,\n@@ -400,7 +398,7 @@ impl<'a> Resolver<'a> {\n     pub fn ambiguity(&self, b1: &'a NameBinding<'a>, b2: &'a NameBinding<'a>)\n                      -> &'a NameBinding<'a> {\n         self.arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Ambiguity { b1: b1, b2: b2, legacy: false },\n+            kind: NameBindingKind::Ambiguity { b1, b2 },\n             vis: if b1.vis.is_at_least(b2.vis, self) { b1.vis } else { b2.vis },\n             span: b1.span,\n             expansion: Mark::root(),\n@@ -687,7 +685,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                                 binding,\n                                 directive,\n                                 used: Cell::new(false),\n-                                legacy_self_import: false,\n                             },\n                             vis: directive.vis.get(),\n                             span: directive.span,\n@@ -747,7 +744,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         let mut all_ns_err = true;\n-        let mut legacy_self_import = None;\n         self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Ok(binding) = result[ns].get() {\n                 all_ns_err = false;\n@@ -756,30 +752,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         Some(this.dummy_binding);\n                 }\n             }\n-        } else if let Ok(binding) = this.resolve_ident_in_module(module,\n-                                                                 ident,\n-                                                                 ns,\n-                                                                 false,\n-                                                                 false,\n-                                                                 directive.span) {\n-            legacy_self_import = Some(directive);\n-            let binding = this.arenas.alloc_name_binding(NameBinding {\n-                kind: NameBindingKind::Import {\n-                    binding,\n-                    directive,\n-                    used: Cell::new(false),\n-                    legacy_self_import: true,\n-                },\n-                ..*binding\n-            });\n-            let _ = this.try_define(directive.parent, ident, ns, binding);\n         });\n \n         if all_ns_err {\n-            if let Some(directive) = legacy_self_import {\n-                self.warn_legacy_self_import(directive);\n-                return None;\n-            }\n             let mut all_ns_failed = true;\n             self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n                 match this.resolve_ident_in_module(module, ident, ns, false, true, span) {\n@@ -1026,23 +1001,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                             err.emit();\n                     }\n                 }\n-                NameBindingKind::Ambiguity { b1, b2, .. }\n-                        if b1.is_glob_import() && b2.is_glob_import() => {\n-                    let (orig_b1, orig_b2) = match (&b1.kind, &b2.kind) {\n-                        (&NameBindingKind::Import { binding: b1, .. },\n-                         &NameBindingKind::Import { binding: b2, .. }) => (b1, b2),\n-                        _ => continue,\n-                    };\n-                    let (b1, b2) = match (orig_b1.vis, orig_b2.vis) {\n-                        (ty::Visibility::Public, ty::Visibility::Public) => continue,\n-                        (ty::Visibility::Public, _) => (b1, b2),\n-                        (_, ty::Visibility::Public) => (b2, b1),\n-                        _ => continue,\n-                    };\n-                    resolution.binding = Some(self.arenas.alloc_name_binding(NameBinding {\n-                        kind: NameBindingKind::Ambiguity { b1: b1, b2: b2, legacy: true }, ..*b1\n-                    }));\n-                }\n                 _ => {}\n             }\n         }"}, {"sha": "1867bafa7e3d255286625a36848cf61f38a89bbc", "filename": "src/test/compile-fail/issue-38293.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -10,23 +10,17 @@\n \n // Test that `fn foo::bar::{self}` only imports `bar` in the type namespace.\n \n-#![allow(unused)]\n-\n mod foo {\n     pub fn f() { }\n }\n-use foo::f::{self};\n-//~^ ERROR `self` no longer imports values\n-//~| WARN hard error\n+use foo::f::{self}; //~ ERROR unresolved import `foo::f`\n \n mod bar {\n     pub fn baz() {}\n     pub mod baz {}\n }\n use bar::baz::{self};\n-//~^ ERROR `self` no longer imports values\n-//~| WARN hard error\n \n fn main() {\n-    baz();\n+    baz(); //~ ERROR expected function, found module `baz`\n }"}, {"sha": "5b62c5fcd3f31cfcfc6c2c1b8bfbc1cad80a2ab8", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused)]\n-\n pub struct Foo;\n \n mod bar {\n@@ -18,9 +16,7 @@ mod bar {\n     mod baz {\n         use *;\n         use bar::*;\n-        fn f(_: Foo) {}\n-        //~^ ERROR `Foo` is ambiguous\n-        //~| WARN hard error in a future release\n+        fn f(_: Foo) {} //~ ERROR `Foo` is ambiguous\n     }\n }\n "}, {"sha": "5a01680fc1921dcc4371215afa46986a4582c60c", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.stderr", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b027421edb0c559ed0840174b83dfa3bcab7ce/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr?ref=d1b027421edb0c559ed0840174b83dfa3bcab7ce", "patch": "@@ -1,16 +1,21 @@\n-error: `Foo` is ambiguous\n-  --> $DIR/rfc-1560-warning-cycle.rs:21:17\n+error[E0659]: `Foo` is ambiguous\n+  --> $DIR/rfc-1560-warning-cycle.rs:19:17\n    |\n-LL |         use *;\n-   |             - `Foo` could refer to the name imported here\n-LL |         use bar::*;\n-   |             ------ `Foo` could also refer to the name imported here\n-LL |         fn f(_: Foo) {}\n+LL |         fn f(_: Foo) {} //~ ERROR `Foo` is ambiguous\n    |                 ^^^\n    |\n-   = note: #[deny(legacy_imports)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n+note: `Foo` could refer to the name imported here\n+  --> $DIR/rfc-1560-warning-cycle.rs:17:13\n+   |\n+LL |         use *;\n+   |             ^\n+note: `Foo` could also refer to the name imported here\n+  --> $DIR/rfc-1560-warning-cycle.rs:18:13\n+   |\n+LL |         use bar::*;\n+   |             ^^^^^^\n+   = note: consider adding an explicit import of `Foo` to disambiguate\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0659`."}]}