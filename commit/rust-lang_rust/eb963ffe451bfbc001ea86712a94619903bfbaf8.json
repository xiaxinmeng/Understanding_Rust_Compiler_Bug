{"sha": "eb963ffe451bfbc001ea86712a94619903bfbaf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOTYzZmZlNDUxYmZiYzAwMWVhODY3MTJhOTQ2MTk5MDNiZmJhZjg=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-12T02:28:37Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-12T05:40:22Z"}, "message": "Fixes reported bugs in Rust Coverage\n\nFixes: #79569\n\nFixes: #79566\nFixes: #79565\n\nFor the first issue (#79569), I got hit a `debug_assert!()` before\nencountering the reported error message (because I have `debug = true`\nenabled in my config.toml).\n\nThe assertion showed me that some `SwitchInt`s can have more than one\ntarget pointing to the same `BasicBlock`.\n\nI had thought that was invalid, but since it seems to be possible, I'm\nallowing this now.\n\nI added a new test for this.\n\n----\n\nIn the last two cases above, both tests (intentionally) fail to compile,\nbut the `InstrumentCoverage` pass is invoked anyway.\n\nThe MIR starts with an `Unreachable` `BasicBlock`, which I hadn't\nencountered before. (I had assumed the `InstrumentCoverage` pass\nwould only be invoked with MIRs from successful compilations.)\n\nI don't have test infrastructure set up to test coverage on files that\nfail to compile, so I didn't add a new test.", "tree": {"sha": "6cd2fb6ebdb047cbaef18e7358995ed9410a8db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd2fb6ebdb047cbaef18e7358995ed9410a8db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb963ffe451bfbc001ea86712a94619903bfbaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb963ffe451bfbc001ea86712a94619903bfbaf8", "html_url": "https://github.com/rust-lang/rust/commit/eb963ffe451bfbc001ea86712a94619903bfbaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb963ffe451bfbc001ea86712a94619903bfbaf8/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "html_url": "https://github.com/rust-lang/rust/commit/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e"}], "stats": {"total": 571, "additions": 553, "deletions": 18}, "files": [{"sha": "b1a1bb957e79d68b8eab687e3f0f428dd3d0eae2", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -32,24 +32,28 @@ impl CoverageGraph {\n \n         // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n         // equivalents. Note that since the BasicCoverageBlock graph has been fully simplified, the\n-        // each predecessor of a BCB leader_bb should be in a unique BCB, and each successor of a\n-        // BCB last_bb should be in its own unique BCB. Therefore, collecting the BCBs using\n-        // `bb_to_bcb` should work without requiring a deduplication step.\n+        // each predecessor of a BCB leader_bb should be in a unique BCB. It is possible for a\n+        // `SwitchInt` to have multiple targets to the same destination `BasicBlock`, so\n+        // de-duplication is required. This is done without reordering the successors.\n \n+        let bcbs_len = bcbs.len();\n+        let mut seen = IndexVec::from_elem_n(false, bcbs_len);\n         let successors = IndexVec::from_fn_n(\n             |bcb| {\n+                for b in seen.iter_mut() {\n+                    *b = false;\n+                }\n                 let bcb_data = &bcbs[bcb];\n-                let bcb_successors =\n+                let mut bcb_successors = Vec::new();\n+                for successor in\n                     bcb_filtered_successors(&mir_body, &bcb_data.terminator(mir_body).kind)\n                         .filter_map(|&successor_bb| bb_to_bcb[successor_bb])\n-                        .collect::<Vec<_>>();\n-                debug_assert!({\n-                    let mut sorted = bcb_successors.clone();\n-                    sorted.sort_unstable();\n-                    let initial_len = sorted.len();\n-                    sorted.dedup();\n-                    sorted.len() == initial_len\n-                });\n+                {\n+                    if !seen[successor] {\n+                        seen[successor] = true;\n+                        bcb_successors.push(successor);\n+                    }\n+                }\n                 bcb_successors\n             },\n             bcbs.len(),"}, {"sha": "53f7c28ee35be1a70bacc174c469533b2482f7fb", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -78,6 +78,14 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n             return;\n         }\n \n+        match mir_body.basic_blocks()[mir::START_BLOCK].terminator().kind {\n+            TerminatorKind::Unreachable => {\n+                trace!(\"InstrumentCoverage skipped for unreachable `START_BLOCK`\");\n+                return;\n+            }\n+            _ => {}\n+        }\n+\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());\n         Instrumentor::new(&self.name(), tcx, mir_body).inject_counters();\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());"}, {"sha": "8559fc84aa937aa64892999bd8925d9d98001de6", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.match_or_pattern.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.match_or_pattern.json", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.match_or_pattern.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.match_or_pattern.json?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/match_or_pattern.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 37,\n+              \"covered\": 33,\n+              \"percent\": 89.1891891891892\n+            },\n+            \"regions\": {\n+              \"count\": 25,\n+              \"covered\": 17,\n+              \"notcovered\": 8,\n+              \"percent\": 68\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 37,\n+          \"covered\": 33,\n+          \"percent\": 89.1891891891892\n+        },\n+        \"regions\": {\n+          \"count\": 25,\n+          \"covered\": 17,\n+          \"notcovered\": 8,\n+          \"percent\": 68\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "a0fccb24f9980c8817a3dae05f56e6751170bc1f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.match_or_pattern.txt", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.match_or_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.match_or_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.match_or_pattern.txt?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -0,0 +1,50 @@\n+    1|       |#![feature(or_patterns)]\n+    2|       |\n+    3|      1|fn main() {\n+    4|      1|    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    5|      1|    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    6|      1|    // dependent conditions.\n+    7|      1|    let is_true = std::env::args().len() == 1;\n+    8|      1|\n+    9|      1|    let mut a: u8 = 0;\n+   10|      1|    let mut b: u8 = 0;\n+   11|      1|    if is_true {\n+   12|      1|        a = 2;\n+   13|      1|        b = 0;\n+   14|      1|    }\n+                   ^0\n+   15|      1|    match (a, b) {\n+   16|       |        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.\n+   17|       |        // This test confirms a fix for Issue #79569.\n+   18|      0|        (0 | 1, 2 | 3) => {}\n+   19|      1|        _ => {}\n+   20|       |    }\n+   21|      1|    if is_true {\n+   22|      1|        a = 0;\n+   23|      1|        b = 0;\n+   24|      1|    }\n+                   ^0\n+   25|      1|    match (a, b) {\n+   26|      0|        (0 | 1, 2 | 3) => {}\n+   27|      1|        _ => {}\n+   28|       |    }\n+   29|      1|    if is_true {\n+   30|      1|        a = 2;\n+   31|      1|        b = 2;\n+   32|      1|    }\n+                   ^0\n+   33|      1|    match (a, b) {\n+   34|      0|        (0 | 1, 2 | 3) => {}\n+   35|      1|        _ => {}\n+   36|       |    }\n+   37|      1|    if is_true {\n+   38|      1|        a = 0;\n+   39|      1|        b = 2;\n+   40|      1|    }\n+                   ^0\n+   41|      1|    match (a, b) {\n+   42|      1|        (0 | 1, 2 | 3) => {}\n+   43|      0|        _ => {}\n+   44|       |    }\n+   45|      1|}\n+"}, {"sha": "4df0bac8c866c92d990b7a5354c831aeaee8a2d7", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.async.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -28,11 +28,8 @@ Counter in file 0 79:14 -> 79:16, 0\n Counter in file 0 81:1 -> 81:2, 0\n Counter in file 0 91:25 -> 91:34, 0\n Counter in file 0 5:1 -> 5:25, #1\n-Counter in file 0 5:25 -> 6:14, #1\n-Counter in file 0 7:9 -> 7:10, #2\n-Counter in file 0 9:9 -> 9:10, (#1 - #2)\n-Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 21:1 -> 21:23, #1\n+Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 67:5 -> 67:23, #1\n Counter in file 0 38:1 -> 38:19, #1\n Counter in file 0 38:19 -> 42:12, #1\n@@ -46,14 +43,18 @@ Counter in file 0 44:27 -> 44:32, #8\n Counter in file 0 44:36 -> 44:38, (#6 + 0)\n Counter in file 0 45:14 -> 45:16, #7\n Counter in file 0 47:1 -> 47:2, (#5 + (#6 + #7))\n+Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 29:1 -> 29:22, #1\n Counter in file 0 93:1 -> 101:2, #1\n Counter in file 0 91:1 -> 91:25, #1\n+Counter in file 0 5:25 -> 6:14, #1\n+Counter in file 0 7:9 -> 7:10, #2\n+Counter in file 0 9:9 -> 9:10, (#1 - #2)\n+Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 51:5 -> 52:18, #1\n Counter in file 0 53:13 -> 53:14, #2\n Counter in file 0 63:13 -> 63:14, (#1 - #2)\n Counter in file 0 65:5 -> 65:6, (#2 + (#1 - #2))\n-Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 49:1 -> 68:12, #1\n Counter in file 0 69:9 -> 69:10, #2\n Counter in file 0 69:14 -> 69:27, (#1 + 0)\n@@ -70,7 +71,6 @@ Counter in file 0 87:14 -> 87:16, #3\n Counter in file 0 89:1 -> 89:2, (#3 + (#2 + (#1 - (#3 + #2))))\n Counter in file 0 17:1 -> 17:20, #1\n Counter in file 0 66:5 -> 66:23, #1\n-Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 117:17 -> 117:19, #1"}, {"sha": "fc12612ce7d7eb9027d2e8b7c98d6f5fe78b3f8e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.match_or_pattern.txt", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.match_or_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.match_or_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.match_or_pattern.txt?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -0,0 +1,98 @@\n+Counter in file 0 3:1 -> 11:15, #1\n+Counter in file 0 11:16 -> 14:6, #2\n+Counter in file 0 14:6 -> 14:7, (#1 - #2)\n+Counter in file 0 15:11 -> 15:17, (#2 + (#1 - #2))\n+Counter in file 0 18:27 -> 18:29, #5\n+Counter in file 0 19:14 -> 19:16, (#3 + #4)\n+Counter in file 0 21:8 -> 21:15, ((#3 + #4) + #5)\n+Counter in file 0 21:16 -> 24:6, #6\n+Counter in file 0 24:6 -> 24:7, (((#3 + #4) + #5) - #6)\n+Counter in file 0 25:11 -> 25:17, (#6 + (((#3 + #4) + #5) - #6))\n+Counter in file 0 26:27 -> 26:29, #9\n+Counter in file 0 27:14 -> 27:16, (#7 + #8)\n+Counter in file 0 29:8 -> 29:15, ((#7 + #8) + #9)\n+Counter in file 0 29:16 -> 32:6, #10\n+Counter in file 0 32:6 -> 32:7, (((#7 + #8) + #9) - #10)\n+Counter in file 0 33:11 -> 33:17, (#10 + (((#7 + #8) + #9) - #10))\n+Counter in file 0 34:27 -> 34:29, #13\n+Counter in file 0 35:14 -> 35:16, (#11 + #12)\n+Counter in file 0 37:8 -> 37:15, ((#11 + #12) + #13)\n+Counter in file 0 37:16 -> 40:6, #14\n+Counter in file 0 40:6 -> 40:7, (((#11 + #12) + #13) - #14)\n+Counter in file 0 41:11 -> 41:17, (#14 + (((#11 + #12) + #13) - #14))\n+Counter in file 0 42:27 -> 42:29, #17\n+Counter in file 0 43:14 -> 43:16, (#15 + #16)\n+Counter in file 0 45:1 -> 45:2, ((#15 + #16) + #17)\n+Emitting segments for file: ../coverage/match_or_pattern.rs\n+Combined regions:\n+  3:1 -> 11:15 (count=1)\n+  11:16 -> 14:6 (count=1)\n+  14:6 -> 14:7 (count=0)\n+  15:11 -> 15:17 (count=1)\n+  18:27 -> 18:29 (count=0)\n+  19:14 -> 19:16 (count=1)\n+  21:8 -> 21:15 (count=1)\n+  21:16 -> 24:6 (count=1)\n+  24:6 -> 24:7 (count=0)\n+  25:11 -> 25:17 (count=1)\n+  26:27 -> 26:29 (count=0)\n+  27:14 -> 27:16 (count=1)\n+  29:8 -> 29:15 (count=1)\n+  29:16 -> 32:6 (count=1)\n+  32:6 -> 32:7 (count=0)\n+  33:11 -> 33:17 (count=1)\n+  34:27 -> 34:29 (count=0)\n+  35:14 -> 35:16 (count=1)\n+  37:8 -> 37:15 (count=1)\n+  37:16 -> 40:6 (count=1)\n+  40:6 -> 40:7 (count=0)\n+  41:11 -> 41:17 (count=1)\n+  42:27 -> 42:29 (count=1)\n+  43:14 -> 43:16 (count=0)\n+  45:1 -> 45:2 (count=1)\n+Segment at 3:1 (count = 1), RegionEntry\n+Segment at 11:15 (count = 0), Skipped\n+Segment at 11:16 (count = 1), RegionEntry\n+Segment at 14:6 (count = 0), RegionEntry\n+Segment at 14:7 (count = 0), Skipped\n+Segment at 15:11 (count = 1), RegionEntry\n+Segment at 15:17 (count = 0), Skipped\n+Segment at 18:27 (count = 0), RegionEntry\n+Segment at 18:29 (count = 0), Skipped\n+Segment at 19:14 (count = 1), RegionEntry\n+Segment at 19:16 (count = 0), Skipped\n+Segment at 21:8 (count = 1), RegionEntry\n+Segment at 21:15 (count = 0), Skipped\n+Segment at 21:16 (count = 1), RegionEntry\n+Segment at 24:6 (count = 0), RegionEntry\n+Segment at 24:7 (count = 0), Skipped\n+Segment at 25:11 (count = 1), RegionEntry\n+Segment at 25:17 (count = 0), Skipped\n+Segment at 26:27 (count = 0), RegionEntry\n+Segment at 26:29 (count = 0), Skipped\n+Segment at 27:14 (count = 1), RegionEntry\n+Segment at 27:16 (count = 0), Skipped\n+Segment at 29:8 (count = 1), RegionEntry\n+Segment at 29:15 (count = 0), Skipped\n+Segment at 29:16 (count = 1), RegionEntry\n+Segment at 32:6 (count = 0), RegionEntry\n+Segment at 32:7 (count = 0), Skipped\n+Segment at 33:11 (count = 1), RegionEntry\n+Segment at 33:17 (count = 0), Skipped\n+Segment at 34:27 (count = 0), RegionEntry\n+Segment at 34:29 (count = 0), Skipped\n+Segment at 35:14 (count = 1), RegionEntry\n+Segment at 35:16 (count = 0), Skipped\n+Segment at 37:8 (count = 1), RegionEntry\n+Segment at 37:15 (count = 0), Skipped\n+Segment at 37:16 (count = 1), RegionEntry\n+Segment at 40:6 (count = 0), RegionEntry\n+Segment at 40:7 (count = 0), Skipped\n+Segment at 41:11 (count = 1), RegionEntry\n+Segment at 41:17 (count = 0), Skipped\n+Segment at 42:27 (count = 1), RegionEntry\n+Segment at 42:29 (count = 0), Skipped\n+Segment at 43:14 (count = 0), RegionEntry\n+Segment at 43:16 (count = 0), Skipped\n+Segment at 45:1 (count = 1), RegionEntry\n+Segment at 45:2 (count = 0), Skipped"}, {"sha": "133a85c83945ef8e9f9dd4c714f80971f8210631", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.match_or_pattern/match_or_pattern.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -0,0 +1,271 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.match_or_pattern/match_or_pattern.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>match_or_pattern.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let mut a: u8 = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let mut b: u8 = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\">        b = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5[0]: _7 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:12-15:13: @7[5]: _11 = _5\n+15:15-15:16: @7[7]: _12 = _6\n+15:11-15:17: @7[8]: _10 = (move _11, move _12)\n+15:11-15:17: @7[11]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@7\u298a</span>(a, b)<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // This test confirms a fix for Issue #79569.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:27-18:29: @11[0]: _9 = const ()\"><span class=\"annotation\">@10,11\u298a</span>{}<span class=\"annotation\">\u2989@10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:14-19:16: @8[0]: _9 = const ()\"><span class=\"annotation\">@8\u298a</span>{}<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:8-21:15: @12[4]: _14 = _1\n+21:8-21:15: @12[5]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@12\u298a</span>is_true<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\"><span class=\"annotation\">@13,15\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\">        a = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\">        b = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\">    }<span class=\"annotation\">\u2989@13,15</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @14[0]: _13 = const ()\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:12-25:13: @16[5]: _17 = _5\n+25:15-25:16: @16[7]: _18 = _6\n+25:11-25:17: @16[8]: _16 = (move _17, move _18)\n+25:11-25:17: @16[11]: FakeRead(ForMatchedPlace, _16)\"><span class=\"annotation\">@16\u298a</span>(a, b)<span class=\"annotation\">\u2989@16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:27-26:29: @20[0]: _15 = const ()\"><span class=\"annotation\">@19,20\u298a</span>{}<span class=\"annotation\">\u2989@19,20</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:14-27:16: @17[0]: _15 = const ()\"><span class=\"annotation\">@17\u298a</span>{}<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:8-29:15: @21[4]: _20 = _1\n+29:8-29:15: @21[5]: FakeRead(ForMatchedPlace, _20)\"><span class=\"annotation\">@21\u298a</span>is_true<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\"><span class=\"annotation\">@22,24\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\">        b = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\">    }<span class=\"annotation\">\u2989@22,24</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:6-32:6: @23[0]: _19 = const ()\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:12-33:13: @25[5]: _23 = _5\n+33:15-33:16: @25[7]: _24 = _6\n+33:11-33:17: @25[8]: _22 = (move _23, move _24)\n+33:11-33:17: @25[11]: FakeRead(ForMatchedPlace, _22)\"><span class=\"annotation\">@25\u298a</span>(a, b)<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:27-34:29: @29[0]: _21 = const ()\"><span class=\"annotation\">@28,29\u298a</span>{}<span class=\"annotation\">\u2989@28,29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:14-35:16: @26[0]: _21 = const ()\"><span class=\"annotation\">@26\u298a</span>{}<span class=\"annotation\">\u2989@26</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"37:8-37:15: @30[4]: _26 = _1\n+37:8-37:15: @30[5]: FakeRead(ForMatchedPlace, _26)\"><span class=\"annotation\">@30\u298a</span>is_true<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\"><span class=\"annotation\">@31,33\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\">        a = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\">        b = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\">    }<span class=\"annotation\">\u2989@31,33</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:6-40:6: @32[0]: _25 = const ()\"><span class=\"annotation\">@32\u298a</span>\u2038<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:12-41:13: @34[4]: _28 = _5\n+41:15-41:16: @34[6]: _29 = _6\n+41:11-41:17: @34[7]: _27 = (move _28, move _29)\n+41:11-41:17: @34[10]: FakeRead(ForMatchedPlace, _27)\"><span class=\"annotation\">@34\u298a</span>(a, b)<span class=\"annotation\">\u2989@34</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:27-42:29: @38[0]: _0 = const ()\"><span class=\"annotation\">@37,38\u298a</span>{}<span class=\"annotation\">\u2989@37,38</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:14-43:16: @35[0]: _0 = const ()\"><span class=\"annotation\">@35\u298a</span>{}<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:2-45:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4c6a8a9b7037c6897b81388467b39e209528926f", "filename": "src/test/run-make-fulldeps/coverage/match_or_pattern.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fmatch_or_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb963ffe451bfbc001ea86712a94619903bfbaf8/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fmatch_or_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fmatch_or_pattern.rs?ref=eb963ffe451bfbc001ea86712a94619903bfbaf8", "patch": "@@ -0,0 +1,45 @@\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    // dependent conditions.\n+    let is_true = std::env::args().len() == 1;\n+\n+    let mut a: u8 = 0;\n+    let mut b: u8 = 0;\n+    if is_true {\n+        a = 2;\n+        b = 0;\n+    }\n+    match (a, b) {\n+        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.\n+        // This test confirms a fix for Issue #79569.\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+    if is_true {\n+        a = 0;\n+        b = 0;\n+    }\n+    match (a, b) {\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+    if is_true {\n+        a = 2;\n+        b = 2;\n+    }\n+    match (a, b) {\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+    if is_true {\n+        a = 0;\n+        b = 2;\n+    }\n+    match (a, b) {\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+}"}]}