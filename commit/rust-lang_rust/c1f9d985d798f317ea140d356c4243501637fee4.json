{"sha": "c1f9d985d798f317ea140d356c4243501637fee4", "node_id": "C_kwDOAAsO6NoAKGMxZjlkOTg1ZDc5OGYzMTdlYTE0MGQzNTZjNDI0MzUwMTYzN2ZlZTQ", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-10-24T10:32:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-24T10:32:26Z"}, "message": "Rollup merge of #102271 - lopopolo:lopopolo/stabilize-duration-try-from-secs-float, r=dtolnay\n\nStabilize `duration_checked_float`\n\n## Stabilization Report\n\nThis stabilization report is for a stabilization of `duration_checked_float`, tracking issue: https://github.com/rust-lang/rust/issues/83400.\n\n### Implementation History\n\n- https://github.com/rust-lang/rust/pull/82179\n- https://github.com/rust-lang/rust/pull/90247\n- https://github.com/rust-lang/rust/pull/96051\n- Changed error type to `FromFloatSecsError` in https://github.com/rust-lang/rust/pull/90247\n- https://github.com/rust-lang/rust/pull/96051 changes the rounding mode to round-to-nearest instead of truncate.\n\n## API Summary\n\nThis stabilization report proposes the following API to be stabilized in `core`, along with their re-exports in `std`:\n\n```rust\n// core::time\n\nimpl Duration {\n    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError>;\n    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError>;\n}\n\n#[derive(Debug, Clone, PartialEq, Eq)]\npub struct TryFromFloatSecsError { ... }\n\nimpl core::fmt::Display for TryFromFloatSecsError { ... }\nimpl core::error::Error for TryFromFloatSecsError { ... }\n```\n\nThese functions are made const unstable under `duration_consts_float`, tracking issue #72440.\n\nThere is an open question in the tracking issue around what the error type should be called which I was hoping to resolve in the context of an FCP.\n\nIn this stabilization PR, I have altered the name of the error type to `TryFromFloatSecsError`. In my opinion, the error type shares the name of the method (adjusted to accommodate both types of floats), which is consistent with other error types in `core`, `alloc` and `std` like `TryReserveError` and `TryFromIntError`.\n\n## Experience Report\n\nCode such as this is ready to be converted to a checked API to ensure it is panic free:\n\n```rust\nimpl Time {\n    pub fn checked_add_f64(&self, seconds: f64) -> Result<Self, TimeError> {\n        // Fail safely during `f64` conversion to duration\n        if seconds.is_nan() || seconds.is_infinite() {\n            return Err(TzOutOfRangeError::new().into());\n        }\n\n        if seconds.is_sign_positive() {\n            self.checked_add(Duration::from_secs_f64(seconds))\n        } else {\n            self.checked_sub(Duration::from_secs_f64(-seconds))\n        }\n    }\n}\n```\n\nSee: https://github.com/artichoke/artichoke/issues/2194.\n\n`@rustbot` label +T-libs-api -T-libs\n\ncc `@mbartlett21`", "tree": {"sha": "b35dbc8227a78cf9ee9f5d937fd652894394d0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b35dbc8227a78cf9ee9f5d937fd652894394d0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f9d985d798f317ea140d356c4243501637fee4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVmm6CRBK7hj4Ov3rIwAAHx4IADOFExnehV+z1NAiRdrhybf7\nQeHNRTt+CXSFX7eXIKLKh1qn083w1jxy4ZnF8hYB3OMCiwj13KG9rJLPLQZ2jPrR\nKl6J4SAQPBxTpzNsMiXVEV0UZZdb8Fiu45QbvWgUKabjvJDNf9qgPLhTV9KL1ppf\nf6DldFC+Wwecf9itjDW3+IElLRg52nVKa6w8xAlMz4rfJO5HGkDtE1lf6oWktMrx\nLvvZPROzZzVmziFJjP1AgwJEGox92zbQoDzBM2jIqnI5Vo3c13836NVFUzz8Ivve\nzKvhOfJgwFKBq2NlSKndUtwAw5crArGPJSZSodToSLspTMnaFzEVmjHqHgV1cIE=\n=8dEJ\n-----END PGP SIGNATURE-----\n", "payload": "tree b35dbc8227a78cf9ee9f5d937fd652894394d0e8\nparent 779418deb49f3c1ed425314abe471f59bb284892\nparent 95040a70d7098b208aa31a7ec86f15d8bf4f0dc8\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1666607546 +0900\ncommitter GitHub <noreply@github.com> 1666607546 +0900\n\nRollup merge of #102271 - lopopolo:lopopolo/stabilize-duration-try-from-secs-float, r=dtolnay\n\nStabilize `duration_checked_float`\n\n## Stabilization Report\n\nThis stabilization report is for a stabilization of `duration_checked_float`, tracking issue: https://github.com/rust-lang/rust/issues/83400.\n\n### Implementation History\n\n- https://github.com/rust-lang/rust/pull/82179\n- https://github.com/rust-lang/rust/pull/90247\n- https://github.com/rust-lang/rust/pull/96051\n- Changed error type to `FromFloatSecsError` in https://github.com/rust-lang/rust/pull/90247\n- https://github.com/rust-lang/rust/pull/96051 changes the rounding mode to round-to-nearest instead of truncate.\n\n## API Summary\n\nThis stabilization report proposes the following API to be stabilized in `core`, along with their re-exports in `std`:\n\n```rust\n// core::time\n\nimpl Duration {\n    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError>;\n    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError>;\n}\n\n#[derive(Debug, Clone, PartialEq, Eq)]\npub struct TryFromFloatSecsError { ... }\n\nimpl core::fmt::Display for TryFromFloatSecsError { ... }\nimpl core::error::Error for TryFromFloatSecsError { ... }\n```\n\nThese functions are made const unstable under `duration_consts_float`, tracking issue #72440.\n\nThere is an open question in the tracking issue around what the error type should be called which I was hoping to resolve in the context of an FCP.\n\nIn this stabilization PR, I have altered the name of the error type to `TryFromFloatSecsError`. In my opinion, the error type shares the name of the method (adjusted to accommodate both types of floats), which is consistent with other error types in `core`, `alloc` and `std` like `TryReserveError` and `TryFromIntError`.\n\n## Experience Report\n\nCode such as this is ready to be converted to a checked API to ensure it is panic free:\n\n```rust\nimpl Time {\n    pub fn checked_add_f64(&self, seconds: f64) -> Result<Self, TimeError> {\n        // Fail safely during `f64` conversion to duration\n        if seconds.is_nan() || seconds.is_infinite() {\n            return Err(TzOutOfRangeError::new().into());\n        }\n\n        if seconds.is_sign_positive() {\n            self.checked_add(Duration::from_secs_f64(seconds))\n        } else {\n            self.checked_sub(Duration::from_secs_f64(-seconds))\n        }\n    }\n}\n```\n\nSee: https://github.com/artichoke/artichoke/issues/2194.\n\n`@rustbot` label +T-libs-api -T-libs\n\ncc `@mbartlett21`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f9d985d798f317ea140d356c4243501637fee4", "html_url": "https://github.com/rust-lang/rust/commit/c1f9d985d798f317ea140d356c4243501637fee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f9d985d798f317ea140d356c4243501637fee4/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779418deb49f3c1ed425314abe471f59bb284892", "url": "https://api.github.com/repos/rust-lang/rust/commits/779418deb49f3c1ed425314abe471f59bb284892", "html_url": "https://github.com/rust-lang/rust/commit/779418deb49f3c1ed425314abe471f59bb284892"}, {"sha": "95040a70d7098b208aa31a7ec86f15d8bf4f0dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/95040a70d7098b208aa31a7ec86f15d8bf4f0dc8", "html_url": "https://github.com/rust-lang/rust/commit/95040a70d7098b208aa31a7ec86f15d8bf4f0dc8"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "89053060fbbea1f0ecc940ec1bf7be1760f04372", "filename": "library/core/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=c1f9d985d798f317ea140d356c4243501637fee4", "patch": "@@ -493,8 +493,8 @@ impl Error for crate::char::ParseCharError {\n     }\n }\n \n-#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-impl Error for crate::time::FromFloatSecsError {}\n+#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl Error for crate::time::TryFromFloatSecsError {}\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl Error for crate::ffi::FromBytesWithNulError {"}, {"sha": "37c3611d0a908956b9b92f77094da68f6e3aaf25", "filename": "library/core/src/time.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=c1f9d985d798f317ea140d356c4243501637fee4", "patch": "@@ -1225,41 +1225,40 @@ impl fmt::Debug for Duration {\n /// # Example\n ///\n /// ```\n-/// #![feature(duration_checked_float)]\n /// use std::time::Duration;\n ///\n /// if let Err(e) = Duration::try_from_secs_f32(-1.0) {\n ///     println!(\"Failed conversion to Duration: {e}\");\n /// }\n /// ```\n #[derive(Debug, Clone, PartialEq, Eq)]\n-#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-pub struct FromFloatSecsError {\n-    kind: FromFloatSecsErrorKind,\n+#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+pub struct TryFromFloatSecsError {\n+    kind: TryFromFloatSecsErrorKind,\n }\n \n-impl FromFloatSecsError {\n+impl TryFromFloatSecsError {\n     const fn description(&self) -> &'static str {\n         match self.kind {\n-            FromFloatSecsErrorKind::Negative => {\n+            TryFromFloatSecsErrorKind::Negative => {\n                 \"can not convert float seconds to Duration: value is negative\"\n             }\n-            FromFloatSecsErrorKind::OverflowOrNan => {\n+            TryFromFloatSecsErrorKind::OverflowOrNan => {\n                 \"can not convert float seconds to Duration: value is either too big or NaN\"\n             }\n         }\n     }\n }\n \n-#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-impl fmt::Display for FromFloatSecsError {\n+#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl fmt::Display for TryFromFloatSecsError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.description().fmt(f)\n     }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-enum FromFloatSecsErrorKind {\n+enum TryFromFloatSecsErrorKind {\n     // Value is negative.\n     Negative,\n     // Value is either too big to be represented as `Duration` or `NaN`.\n@@ -1280,7 +1279,7 @@ macro_rules! try_from_secs {\n         const EXP_MASK: $bits_ty = (1 << $exp_bits) - 1;\n \n         if $secs < 0.0 {\n-            return Err(FromFloatSecsError { kind: FromFloatSecsErrorKind::Negative });\n+            return Err(TryFromFloatSecsError { kind: TryFromFloatSecsErrorKind::Negative });\n         }\n \n         let bits = $secs.to_bits();\n@@ -1339,7 +1338,7 @@ macro_rules! try_from_secs {\n             let secs = u64::from(mant) << (exp - $mant_bits);\n             (secs, 0)\n         } else {\n-            return Err(FromFloatSecsError { kind: FromFloatSecsErrorKind::OverflowOrNan });\n+            return Err(TryFromFloatSecsError { kind: TryFromFloatSecsErrorKind::OverflowOrNan });\n         };\n \n         Ok(Duration::new(secs, nanos))\n@@ -1355,8 +1354,6 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_checked_float)]\n-    ///\n     /// use std::time::Duration;\n     ///\n     /// let res = Duration::try_from_secs_f32(0.0);\n@@ -1404,9 +1401,10 @@ impl Duration {\n     /// let res = Duration::try_from_secs_f32(val);\n     /// assert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n     /// ```\n-    #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+    #[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     #[inline]\n-    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, FromFloatSecsError> {\n+    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError> {\n         try_from_secs!(\n             secs = secs,\n             mantissa_bits = 23,\n@@ -1425,8 +1423,6 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_checked_float)]\n-    ///\n     /// use std::time::Duration;\n     ///\n     /// let res = Duration::try_from_secs_f64(0.0);\n@@ -1482,9 +1478,10 @@ impl Duration {\n     /// let res = Duration::try_from_secs_f64(val);\n     /// assert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n     /// ```\n-    #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+    #[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     #[inline]\n-    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, FromFloatSecsError> {\n+    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError> {\n         try_from_secs!(\n             secs = secs,\n             mantissa_bits = 52,"}, {"sha": "3012a78b9c98eaa7bb8c341af1ecceee81eed834", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c1f9d985d798f317ea140d356c4243501637fee4", "patch": "@@ -103,7 +103,6 @@\n #![feature(provide_any)]\n #![feature(utf8_chunks)]\n #![feature(is_ascii_octdigit)]\n-#![feature(duration_checked_float)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "385585dada896fd6819a5365a27d1ced963fe6fc", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=c1f9d985d798f317ea140d356c4243501637fee4", "patch": "@@ -280,7 +280,6 @@\n #![feature(core_intrinsics)]\n #![feature(cstr_from_bytes_until_nul)]\n #![feature(cstr_internals)]\n-#![feature(duration_checked_float)]\n #![feature(duration_constants)]\n #![feature(error_generic_member_access)]\n #![feature(error_in_core)]"}, {"sha": "34e18b5fa8778ebb4750284d661f0ca226a40622", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f9d985d798f317ea140d356c4243501637fee4/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=c1f9d985d798f317ea140d356c4243501637fee4", "patch": "@@ -43,8 +43,8 @@ use crate::sys_common::{FromInner, IntoInner};\n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n \n-#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n-pub use core::time::FromFloatSecsError;\n+#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+pub use core::time::TryFromFloatSecsError;\n \n /// A measurement of a monotonically nondecreasing clock.\n /// Opaque and useful only with [`Duration`]."}]}