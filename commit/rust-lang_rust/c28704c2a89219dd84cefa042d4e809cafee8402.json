{"sha": "c28704c2a89219dd84cefa042d4e809cafee8402", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyODcwNGMyYTg5MjE5ZGQ4NGNlZmEwNDJkNGU4MDljYWZlZTg0MDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-30T06:51:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T06:51:36Z"}, "message": "Rollup merge of #59453 - estebank:recover-tuple-parse, r=petrochenkov\n\nRecover from parse error in tuple syntax", "tree": {"sha": "7fd79aa52e375195c4dcb3d59ef5c3346733579a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd79aa52e375195c4dcb3d59ef5c3346733579a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28704c2a89219dd84cefa042d4e809cafee8402", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnxH4CRBK7hj4Ov3rIwAAdHIIAIPIJcVR2rq+Qmb58xqgA9yw\nVu9WX6AAYR+Q3MNALnLkz8vkeLv5tGKOjQP8ezdmR8NF0Y83a5ZqkNZuUmsxk2xh\nz43KstvB15j89yoXWE73B8TbSv8L+fv2+JQDoZT4UDQEVvNu7SA0cZrcQroe68+2\ncock8TYiXwc5z7eluopBOwJAoJop7pcNPfYsZPJstHcK214xNcXirJE49Rng2CCu\njQvgRhw0tHYMy9rQ0Tk2OGGFwR0wMZhkAC/IqEIFO68L5U2/HvNj4VX+KkwXiNRj\n4kNj8b5a4Zwwe4y0+uF8Mi7ICryhHtsMtKDgfQrI8wWn8+g82vxdA5dZgVmOZws=\n=q6KZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fd79aa52e375195c4dcb3d59ef5c3346733579a\nparent d050a157a83d3957a2b0ca96c24a1f61809348a8\nparent 3592079765d4d76f19b3a9501de5f8cc47f11a04\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553928696 +0100\ncommitter GitHub <noreply@github.com> 1553928696 +0100\n\nRollup merge of #59453 - estebank:recover-tuple-parse, r=petrochenkov\n\nRecover from parse error in tuple syntax\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28704c2a89219dd84cefa042d4e809cafee8402", "html_url": "https://github.com/rust-lang/rust/commit/c28704c2a89219dd84cefa042d4e809cafee8402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28704c2a89219dd84cefa042d4e809cafee8402/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d050a157a83d3957a2b0ca96c24a1f61809348a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d050a157a83d3957a2b0ca96c24a1f61809348a8", "html_url": "https://github.com/rust-lang/rust/commit/d050a157a83d3957a2b0ca96c24a1f61809348a8"}, {"sha": "3592079765d4d76f19b3a9501de5f8cc47f11a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/3592079765d4d76f19b3a9501de5f8cc47f11a04", "html_url": "https://github.com/rust-lang/rust/commit/3592079765d4d76f19b3a9501de5f8cc47f11a04"}], "stats": {"total": 262, "additions": 228, "deletions": 34}, "files": [{"sha": "ae8e57d54de31c67443b3a8c50517f1cfa3b0254", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -2626,7 +2626,13 @@ impl<'a> Parser<'a> {\n                 let mut trailing_comma = false;\n                 let mut recovered = false;\n                 while self.token != token::CloseDelim(token::Paren) {\n-                    es.push(self.parse_expr()?);\n+                    es.push(match self.parse_expr() {\n+                        Ok(es) => es,\n+                        Err(err) => {\n+                            // recover from parse error in tuple list\n+                            return Ok(self.recover_seq_parse_error(token::Paren, lo, Err(err)));\n+                        }\n+                    });\n                     recovered = self.expect_one_of(\n                         &[],\n                         &[token::Comma, token::CloseDelim(token::Paren)],\n@@ -3237,36 +3243,54 @@ impl<'a> Parser<'a> {\n             }\n             if self.expr_is_complete(&e) { break; }\n             match self.token {\n-              // expr(...)\n-              token::OpenDelim(token::Paren) => {\n-                let es = self.parse_unspanned_seq(\n-                    &token::OpenDelim(token::Paren),\n-                    &token::CloseDelim(token::Paren),\n-                    SeqSep::trailing_allowed(token::Comma),\n-                    |p| Ok(p.parse_expr()?)\n-                )?;\n-                hi = self.prev_span;\n-\n-                let nd = self.mk_call(e, es);\n-                e = self.mk_expr(lo.to(hi), nd, ThinVec::new());\n-              }\n+                // expr(...)\n+                token::OpenDelim(token::Paren) => {\n+                    let seq = self.parse_unspanned_seq(\n+                        &token::OpenDelim(token::Paren),\n+                        &token::CloseDelim(token::Paren),\n+                        SeqSep::trailing_allowed(token::Comma),\n+                        |p| Ok(p.parse_expr()?)\n+                    ).map(|es| {\n+                        let nd = self.mk_call(e, es);\n+                        let hi = self.prev_span;\n+                        self.mk_expr(lo.to(hi), nd, ThinVec::new())\n+                    });\n+                    e = self.recover_seq_parse_error(token::Paren, lo, seq);\n+                }\n \n-              // expr[...]\n-              // Could be either an index expression or a slicing expression.\n-              token::OpenDelim(token::Bracket) => {\n-                self.bump();\n-                let ix = self.parse_expr()?;\n-                hi = self.span;\n-                self.expect(&token::CloseDelim(token::Bracket))?;\n-                let index = self.mk_index(e, ix);\n-                e = self.mk_expr(lo.to(hi), index, ThinVec::new())\n-              }\n-              _ => return Ok(e)\n+                // expr[...]\n+                // Could be either an index expression or a slicing expression.\n+                token::OpenDelim(token::Bracket) => {\n+                    self.bump();\n+                    let ix = self.parse_expr()?;\n+                    hi = self.span;\n+                    self.expect(&token::CloseDelim(token::Bracket))?;\n+                    let index = self.mk_index(e, ix);\n+                    e = self.mk_expr(lo.to(hi), index, ThinVec::new())\n+                }\n+                _ => return Ok(e)\n             }\n         }\n         return Ok(e);\n     }\n \n+    fn recover_seq_parse_error(\n+        &mut self,\n+        delim: token::DelimToken,\n+        lo: Span,\n+        result: PResult<'a, P<Expr>>,\n+    ) -> P<Expr> {\n+        match result {\n+            Ok(x) => x,\n+            Err(mut err) => {\n+                err.emit();\n+                // recover from parse error\n+                self.consume_block(delim);\n+                self.mk_expr(lo.to(self.prev_span), ExprKind::Err, ThinVec::new())\n+            }\n+        }\n+    }\n+\n     crate fn process_potential_macro_variable(&mut self) {\n         let (token, span) = match self.token {\n             token::Dollar if self.span.ctxt() != syntax_pos::hygiene::SyntaxContext::empty() &&\n@@ -4253,7 +4277,14 @@ impl<'a> Parser<'a> {\n     // Trailing commas are significant because (p) and (p,) are different patterns.\n     fn parse_parenthesized_pat_list(&mut self) -> PResult<'a, (Vec<P<Pat>>, Option<usize>, bool)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n-        let result = self.parse_pat_list()?;\n+        let result = match self.parse_pat_list() {\n+            Ok(result) => result,\n+            Err(mut err) => { // recover from parse error in tuple pattern list\n+                err.emit();\n+                self.consume_block(token::Paren);\n+                return Ok((vec![], Some(0), false));\n+            }\n+        };\n         self.expect(&token::CloseDelim(token::Paren))?;\n         Ok(result)\n     }"}, {"sha": "928d217441ef2f2685477c731520b9db497dd78b", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -1,4 +1,10 @@\n fn main () {\n-    let sr: Vec<(u32, _, _) = vec![]; //~ ERROR expected one of `,` or `>`, found `=`\n+    let sr: Vec<(u32, _, _) = vec![];\n+    //~^ ERROR expected one of `,` or `>`, found `=`\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR mismatched types\n+    //~| ERROR invalid left-hand side expression\n+    //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n+    //~^ ERROR no method named `iter` found for type `()` in the current scope\n }"}, {"sha": "51ea0c6a908947dd55ee08bdbde177c33d9c5af8", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -1,10 +1,47 @@\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/issue-34334.rs:2:23\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                       ^ expected expression\n+\n error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         --                  ^ expected one of `,` or `>` here\n-   |         |\n+   |         ---                 ^ expected one of `,` or `>` here\n+   |         | |\n+   |         | help: use `=` if you meant to assign\n    |         while parsing the type for `sr`\n \n-error: aborting due to previous error\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-34334.rs:2:13\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |             ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-34334.rs:2:31\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                               ^^^^^^ expected bool, found struct `std::vec::Vec`\n+   |\n+   = note: expected type `bool`\n+              found type `std::vec::Vec<_>`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/issue-34334.rs:2:13\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error[E0599]: no method named `iter` found for type `()` in the current scope\n+  --> $DIR/issue-34334.rs:8:36\n+   |\n+LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n+   |                                    ^^^^\n+\n+error: aborting due to 6 previous errors\n \n+Some errors occurred: E0070, E0308, E0423, E0599.\n+For more information about an error, try `rustc --explain E0070`."}, {"sha": "0e49b547f7d0f08d0ce0b51f6fdff8bf00ca435e", "filename": "src/test/ui/parser/pat-tuple-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-1.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    match 0 {\n+    match (0, 1) {\n         (, ..) => {} //~ ERROR expected pattern, found `,`\n     }\n }"}, {"sha": "d4f05a5eb523ee6053a2b4e3e7ff1d8b6bea8670", "filename": "src/test/ui/parser/pat-tuple-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    match 0 {\n+    match (0, 1) {\n         (pat ..) => {} //~ ERROR unexpected token: `)`\n     }\n }"}, {"sha": "35088fb3068824d10637e0bca92d49f4b2b2ad00", "filename": "src/test/ui/parser/recover-from-bad-variant.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -0,0 +1,14 @@\n+enum Enum {\n+    Foo { a: usize, b: usize },\n+    Bar(usize, usize),\n+}\n+\n+fn main() {\n+    let x = Enum::Foo(a: 3, b: 4);\n+    //~^ ERROR expected type, found `3`\n+    match x {\n+        Enum::Foo(a, b) => {}\n+        //~^ ERROR expected tuple struct/variant, found struct variant `Enum::Foo`\n+        Enum::Bar(a, b) => {}\n+    }\n+}"}, {"sha": "1eba6d7d52877fa80ff1dc22e06aad06e3794433", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -0,0 +1,23 @@\n+error: expected type, found `3`\n+  --> $DIR/recover-from-bad-variant.rs:7:26\n+   |\n+LL |     let x = Enum::Foo(a: 3, b: 4);\n+   |                          ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+note: this expression expects an ascribed type after the colon\n+  --> $DIR/recover-from-bad-variant.rs:7:23\n+   |\n+LL |     let x = Enum::Foo(a: 3, b: 4);\n+   |                       ^\n+   = help: this might be indicative of a syntax error elsewhere\n+\n+error[E0532]: expected tuple struct/variant, found struct variant `Enum::Foo`\n+  --> $DIR/recover-from-bad-variant.rs:10:9\n+   |\n+LL |         Enum::Foo(a, b) => {}\n+   |         ^^^^^^^^^ did you mean `Enum::Foo { /* fields */ }`?\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "488e8db6b878979e11f42b7c1866f4ae838875d8", "filename": "src/test/ui/parser/recover-tuple-pat.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let x = (1, 2, 3, 4);\n+    match x {\n+        (1, .., 4) => {}\n+        (1, .=., 4) => { let _: usize = \"\"; }\n+        //~^ ERROR expected pattern, found `.`\n+        //~| ERROR mismatched types\n+        (.=., 4) => {}\n+        //~^ ERROR expected pattern, found `.`\n+        (1, 2, 3, 4) => {}\n+    }\n+}"}, {"sha": "5919aa72355acd43ddea3cdcc5e90f10c1191d6c", "filename": "src/test/ui/parser/recover-tuple-pat.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.stderr?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -0,0 +1,24 @@\n+error: expected pattern, found `.`\n+  --> $DIR/recover-tuple-pat.rs:5:13\n+   |\n+LL |         (1, .=., 4) => { let _: usize = \"\"; }\n+   |             ^ expected pattern\n+\n+error: expected pattern, found `.`\n+  --> $DIR/recover-tuple-pat.rs:8:10\n+   |\n+LL |         (.=., 4) => {}\n+   |          ^ expected pattern\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-tuple-pat.rs:5:41\n+   |\n+LL |         (1, .=., 4) => { let _: usize = \"\"; }\n+   |                                         ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "59e2695dec6dcfcd406b78ee0b95795d0645ff1f", "filename": "src/test/ui/parser/recover-tuple.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    // no complaints about the tuple not matching the expected type\n+    let x: (usize, usize, usize) = (3, .=.);\n+    //~^ ERROR expected expression, found `.`\n+    // verify that the parser recovers:\n+    let y: usize = \"\"; //~ ERROR mismatched types\n+    // no complaints about the type\n+    foo(x);\n+}\n+\n+fn foo(_: (usize, usize, usize)) {}"}, {"sha": "4252fc1fd1e1b6cd7c9229a9c2e4defb60619404", "filename": "src/test/ui/parser/recover-tuple.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -0,0 +1,18 @@\n+error: expected expression, found `.`\n+  --> $DIR/recover-tuple.rs:3:40\n+   |\n+LL |     let x: (usize, usize, usize) = (3, .=.);\n+   |                                        ^ expected expression\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-tuple.rs:6:20\n+   |\n+LL |     let y: usize = \"\";\n+   |                    ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "43f6497f7e71cfa2b7c59e8e81aacadd2431e31d", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -6,7 +6,10 @@ fn f<'a, T: Trait + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not s\n \n fn check<'a>() {\n     let _: Box<Trait + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n-    let _: Box<('a) + Trait>; //~ ERROR expected type, found `'a`\n+    let _: Box<('a) + Trait>;\n+    //~^ ERROR expected type, found `'a`\n+    //~| ERROR expected `:`, found `)`\n+    //~| ERROR chained comparison operators require parentheses\n }\n \n fn main() {}"}, {"sha": "a31b7aea8fee6f9d0117aece4e62e45dfa6e2462", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28704c2a89219dd84cefa042d4e809cafee8402/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=c28704c2a89219dd84cefa042d4e809cafee8402", "patch": "@@ -10,6 +10,21 @@ error: parenthesized lifetime bounds are not supported\n LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n+error: expected `:`, found `)`\n+  --> $DIR/trait-object-lifetime-parens.rs:9:19\n+   |\n+LL |     let _: Box<('a) + Trait>;\n+   |                   ^ expected `:`\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/trait-object-lifetime-parens.rs:9:15\n+   |\n+LL |     let _: Box<('a) + Trait>;\n+   |               ^^^^^^^^^^^^^^^\n+   |\n+   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n+   = help: or use `(...)` if you meant to specify fn arguments\n+\n error: expected type, found `'a`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n@@ -18,5 +33,5 @@ LL |     let _: Box<('a) + Trait>;\n    |         |\n    |         while parsing the type for `_`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}]}