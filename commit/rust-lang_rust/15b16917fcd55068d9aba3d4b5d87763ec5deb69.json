{"sha": "15b16917fcd55068d9aba3d4b5d87763ec5deb69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YjE2OTE3ZmNkNTUwNjhkOWFiYTNkNGI1ZDg3NzYzZWM1ZGViNjk=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-01T10:10:02Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-03T07:16:35Z"}, "message": "Add TypeAliasRender", "tree": {"sha": "bef2eebbcdfcd660d5eacb14a99c2ff0704c35ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef2eebbcdfcd660d5eacb14a99c2ff0704c35ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b16917fcd55068d9aba3d4b5d87763ec5deb69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b16917fcd55068d9aba3d4b5d87763ec5deb69", "html_url": "https://github.com/rust-lang/rust/commit/15b16917fcd55068d9aba3d4b5d87763ec5deb69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b16917fcd55068d9aba3d4b5d87763ec5deb69/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944ccf60758305a1b15224defe622cfca6939aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/944ccf60758305a1b15224defe622cfca6939aaa", "html_url": "https://github.com/rust-lang/rust/commit/944ccf60758305a1b15224defe622cfca6939aaa"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "434366b1206dc4afb3ae37626599ec139bb81ce5", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=15b16917fcd55068d9aba3d4b5d87763ec5deb69", "patch": "@@ -14,13 +14,12 @@ pub(crate) mod macro_in_item_position;\n pub(crate) mod trait_impl;\n pub(crate) mod mod_;\n \n-use hir::{HasAttrs, HasSource, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n-use syntax::{ast::NameOwner, display::*};\n+use hir::{HasAttrs, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n use test_utils::mark;\n \n use crate::{\n     item::Builder,\n-    render::{ConstRender, EnumVariantRender, FunctionRender, MacroRender},\n+    render::{ConstRender, EnumVariantRender, FunctionRender, MacroRender, TypeAliasRender},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, CompletionScore,\n     RootDatabase,\n };\n@@ -216,19 +215,9 @@ impl Completions {\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        let type_def = type_alias.source(ctx.db).value;\n-        let name = match type_def.name() {\n-            Some(name) => name,\n-            _ => return,\n-        };\n-        let detail = type_label(&type_def);\n-\n-        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n-            .kind(CompletionItemKind::TypeAlias)\n-            .set_documentation(type_alias.docs(ctx.db))\n-            .set_deprecated(is_deprecated(type_alias, ctx.db))\n-            .detail(detail)\n-            .add_to(self);\n+        if let Some(item) = TypeAliasRender::new(ctx.into(), type_alias).render() {\n+            self.add(item)\n+        }\n     }\n \n     pub(crate) fn add_qualified_enum_variant("}, {"sha": "3a14357f36d10dab90bc35f6c649182abf1c8ddb", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=15b16917fcd55068d9aba3d4b5d87763ec5deb69", "patch": "@@ -6,6 +6,7 @@ mod function;\n mod builder_ext;\n mod enum_variant;\n mod const_;\n+mod type_alias;\n \n use hir::{Documentation, HasAttrs};\n use ide_db::RootDatabase;\n@@ -15,7 +16,7 @@ use crate::{config::SnippetCap, CompletionContext};\n \n pub(crate) use crate::render::{\n     const_::ConstRender, enum_variant::EnumVariantRender, function::FunctionRender,\n-    macro_::MacroRender,\n+    macro_::MacroRender, type_alias::TypeAliasRender,\n };\n \n #[derive(Debug)]"}, {"sha": "829eb574d0f9fa7d6c94341f2b9703087a0ee5cb", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=15b16917fcd55068d9aba3d4b5d87763ec5deb69", "patch": "@@ -37,8 +37,7 @@ impl<'a> ConstRender<'a> {\n     }\n \n     fn name(&self) -> Option<String> {\n-        let ast_node = self.const_.source(self.ctx.db()).value;\n-        ast_node.name().map(|name| name.text().to_string())\n+        self.ast_node.name().map(|name| name.text().to_string())\n     }\n \n     fn detail(&self) -> String {"}, {"sha": "378aa8c6752e4909929d75356df64d615d561df8", "filename": "crates/completion/src/render/type_alias.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b16917fcd55068d9aba3d4b5d87763ec5deb69/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=15b16917fcd55068d9aba3d4b5d87763ec5deb69", "patch": "@@ -0,0 +1,46 @@\n+use hir::HasSource;\n+use syntax::{\n+    ast::{NameOwner, TypeAlias},\n+    display::type_label,\n+};\n+\n+use crate::{\n+    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    render::RenderContext,\n+};\n+\n+#[derive(Debug)]\n+pub(crate) struct TypeAliasRender<'a> {\n+    ctx: RenderContext<'a>,\n+    type_alias: hir::TypeAlias,\n+    ast_node: TypeAlias,\n+}\n+\n+impl<'a> TypeAliasRender<'a> {\n+    pub(crate) fn new(ctx: RenderContext<'a>, type_alias: hir::TypeAlias) -> TypeAliasRender<'a> {\n+        let ast_node = type_alias.source(ctx.db()).value;\n+        TypeAliasRender { ctx, type_alias, ast_node }\n+    }\n+\n+    pub(crate) fn render(self) -> Option<CompletionItem> {\n+        let name = self.name()?;\n+        let detail = self.detail();\n+\n+        let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n+            .kind(CompletionItemKind::TypeAlias)\n+            .set_documentation(self.ctx.docs(self.type_alias))\n+            .set_deprecated(self.ctx.is_deprecated(self.type_alias))\n+            .detail(detail)\n+            .build();\n+\n+        Some(item)\n+    }\n+\n+    fn name(&self) -> Option<String> {\n+        self.ast_node.name().map(|name| name.text().to_string())\n+    }\n+\n+    fn detail(&self) -> String {\n+        type_label(&self.ast_node)\n+    }\n+}"}]}