{"sha": "8009c97a556f9696487fe8fe525a85f20e2e416a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMDljOTdhNTU2Zjk2OTY0ODdmZThmZTUyNWE4NWYyMGUyZTQxNmE=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-09-19T14:21:29Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-09-19T14:58:49Z"}, "message": "lexer: report problematic chars verbatim or as escape sequence\n\n... instead of giving their numeric codepoint, following the lead of\nfdaae34. So the error message for, say, '\\_' mentions _ instead of 95,\nand '\\\u25cf' now mentions \\u25cf.", "tree": {"sha": "2ef83298c3ccc6d2edf47b2d2713952dde7ba859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef83298c3ccc6d2edf47b2d2713952dde7ba859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8009c97a556f9696487fe8fe525a85f20e2e416a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8009c97a556f9696487fe8fe525a85f20e2e416a", "html_url": "https://github.com/rust-lang/rust/commit/8009c97a556f9696487fe8fe525a85f20e2e416a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8009c97a556f9696487fe8fe525a85f20e2e416a/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101917795898b602340d96a6c0f7815d108af1af", "url": "https://api.github.com/repos/rust-lang/rust/commits/101917795898b602340d96a6c0f7815d108af1af", "html_url": "https://github.com/rust-lang/rust/commit/101917795898b602340d96a6c0f7815d108af1af"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "9e5e81c436f9fb7b55cc40333eb242617d3a3eda", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8009c97a556f9696487fe8fe525a85f20e2e416a/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8009c97a556f9696487fe8fe525a85f20e2e416a/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=8009c97a556f9696487fe8fe525a85f20e2e416a", "patch": "@@ -159,6 +159,20 @@ fn fatal_span(rdr: @mut StringReader,\n     rdr.fatal(m);\n }\n \n+// report a lexical error spanning [`from_pos`, `to_pos`), appending an\n+// escaped character to the error message\n+fn fatal_span_char(rdr: @mut StringReader,\n+                   from_pos: BytePos,\n+                   to_pos: BytePos,\n+                   m: ~str,\n+                   c: char)\n+                -> ! {\n+    let mut m = m;\n+    m.push_str(\": \");\n+    char::escape_default(c, |c| m.push_char(c));\n+    fatal_span(rdr, from_pos, to_pos, m);\n+}\n+\n // EFFECT: advance peek_tok and peek_span to refer to the next token.\n // EFFECT: update the interner, maybe.\n fn string_advance_token(r: @mut StringReader) {\n@@ -553,9 +567,8 @@ fn scan_numeric_escape(rdr: @mut StringReader, n_hex_digits: uint) -> char {\n     while i != 0u {\n         let n = rdr.curr;\n         if !is_hex_digit(n) {\n-            fatal_span(rdr, rdr.last_pos, rdr.pos,\n-                       fmt!(\"illegal numeric character escape: %d\",\n-                            n as int));\n+            fatal_span_char(rdr, rdr.last_pos, rdr.pos,\n+                            ~\"illegal numeric character escape\", n);\n         }\n         bump(rdr);\n         accum_int *= 16;\n@@ -565,7 +578,7 @@ fn scan_numeric_escape(rdr: @mut StringReader, n_hex_digits: uint) -> char {\n     match char::from_u32(accum_int as u32) {\n         Some(x) => x,\n         None => fatal_span(rdr, start_bpos, rdr.last_pos,\n-                           fmt!(\"illegal numeric character escape\"))\n+                           ~\"illegal numeric character escape\")\n     }\n }\n \n@@ -735,8 +748,8 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n               'u' => { c2 = scan_numeric_escape(rdr, 4u); }\n               'U' => { c2 = scan_numeric_escape(rdr, 8u); }\n               c2 => {\n-                fatal_span(rdr, escaped_pos, rdr.last_pos,\n-                          fmt!(\"unknown character escape: %d\", c2 as int));\n+                fatal_span_char(rdr, escaped_pos, rdr.last_pos,\n+                                ~\"unknown character escape\", c2);\n               }\n             }\n         }\n@@ -790,8 +803,8 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n                     accum_str.push_char(scan_numeric_escape(rdr, 8u));\n                   }\n                   c2 => {\n-                    fatal_span(rdr, escaped_pos, rdr.last_pos,\n-                               fmt!(\"unknown string escape: %d\", c2 as int));\n+                    fatal_span_char(rdr, escaped_pos, rdr.last_pos,\n+                                    ~\"unknown string escape\", c2);\n                   }\n                 }\n               }\n@@ -827,10 +840,8 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n       '^' => { return binop(rdr, token::CARET); }\n       '%' => { return binop(rdr, token::PERCENT); }\n       c => {\n-          let mut cs = ~\"\";\n-          char::escape_default(c, |c| cs.push_char(c));\n-          fatal_span(rdr, rdr.last_pos, rdr.pos,\n-                     fmt!(\"unknown start of token: %s\", cs));\n+          fatal_span_char(rdr, rdr.last_pos, rdr.pos,\n+                          ~\"unknown start of token\", c);\n       }\n     }\n }"}]}