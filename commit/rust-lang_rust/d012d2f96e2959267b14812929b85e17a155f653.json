{"sha": "d012d2f96e2959267b14812929b85e17a155f653", "node_id": "C_kwDOAAsO6NoAKGQwMTJkMmY5NmUyOTU5MjY3YjE0ODEyOTI5Yjg1ZTE3YTE1NWY2NTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T23:41:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T23:41:53Z"}, "message": "Auto merge of #109399 - petrochenkov:rendersort, r=GuillaumeGomez\n\nrustdoc: Optimize impl sorting during rendering\n\nThis should fix the perf regression on [bitmaps-3.1.0](https://github.com/rust-lang/rustc-perf/tree/master/collector/compile-benchmarks/bitmaps-3.1.0) from https://github.com/rust-lang/rust/pull/107765.\n\nThe bitmaps crate has a lot of impls:\n```rust\nimpl Bits for BitsImpl<1> { ... }\nimpl Bits for BitsImpl<2> { ... }\n// ...\nimpl Bits for BitsImpl<1023> { ... }\nimpl Bits for BitsImpl<1024> { ... }\n```\nand the logic in `fn print_item` sorts them in natural order.\n\nBefore https://github.com/rust-lang/rust/pull/107765 the impls came in source order, which happened to be already sorted in the necessary way.\nSo the comparison function was called fewer times.\n\nAfter https://github.com/rust-lang/rust/pull/107765 the impls came in \"stable\" order (based on def path hash).\nSo the comparison function was called more times to sort them.\n\nThe comparison function was terribly inefficient, so it caused a large perf regression.\nThis PR attempts to make it more efficient by using cached keys during sorting.", "tree": {"sha": "a123c8a9b399c03551422672c1356346722dc6ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a123c8a9b399c03551422672c1356346722dc6ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d012d2f96e2959267b14812929b85e17a155f653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d012d2f96e2959267b14812929b85e17a155f653", "html_url": "https://github.com/rust-lang/rust/commit/d012d2f96e2959267b14812929b85e17a155f653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d012d2f96e2959267b14812929b85e17a155f653/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be3c2bda6b683f87b24714ba595e8b04faef54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3c2bda6b683f87b24714ba595e8b04faef54c", "html_url": "https://github.com/rust-lang/rust/commit/8be3c2bda6b683f87b24714ba595e8b04faef54c"}, {"sha": "4d55affc12da448e4a99bf538ccfd66e7ffae5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d55affc12da448e4a99bf538ccfd66e7ffae5cb", "html_url": "https://github.com/rust-lang/rust/commit/4d55affc12da448e4a99bf538ccfd66e7ffae5cb"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "579b5a9c7231bc48bff17703017596e6741b14ba", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d012d2f96e2959267b14812929b85e17a155f653/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d012d2f96e2959267b14812929b85e17a155f653/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=d012d2f96e2959267b14812929b85e17a155f653", "patch": "@@ -880,8 +880,8 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n         let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n             local.iter().partition(|i| i.inner_impl().kind.is_auto());\n \n-        synthetic.sort_by(|a, b| compare_impl(a, b, cx));\n-        concrete.sort_by(|a, b| compare_impl(a, b, cx));\n+        synthetic.sort_by_cached_key(|i| ImplString::new(i, cx));\n+        concrete.sort_by_cached_key(|i| ImplString::new(i, cx));\n \n         if !foreign.is_empty() {\n             write_small_section_header(w, \"foreign-impls\", \"Implementations on Foreign Types\", \"\");\n@@ -1597,12 +1597,25 @@ where\n     w.write_str(\"</code></pre>\");\n }\n \n-fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl, cx: &Context<'_>) -> Ordering {\n-    let lhss = format!(\"{}\", lhs.inner_impl().print(false, cx));\n-    let rhss = format!(\"{}\", rhs.inner_impl().print(false, cx));\n+#[derive(PartialEq, Eq)]\n+struct ImplString(String);\n \n-    // lhs and rhs are formatted as HTML, which may be unnecessary\n-    compare_names(&lhss, &rhss)\n+impl ImplString {\n+    fn new(i: &Impl, cx: &Context<'_>) -> ImplString {\n+        ImplString(format!(\"{}\", i.inner_impl().print(false, cx)))\n+    }\n+}\n+\n+impl PartialOrd for ImplString {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(Ord::cmp(self, other))\n+    }\n+}\n+\n+impl Ord for ImplString {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        compare_names(&self.0, &other.0)\n+    }\n }\n \n fn render_implementor("}]}