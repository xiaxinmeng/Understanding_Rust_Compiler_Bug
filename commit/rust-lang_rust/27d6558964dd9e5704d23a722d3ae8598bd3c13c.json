{"sha": "27d6558964dd9e5704d23a722d3ae8598bd3c13c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZDY1NTg5NjRkZDllNTcwNGQyM2E3MjJkM2FlODU5OGJkM2MxM2M=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-02T16:44:33Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-02T21:55:16Z"}, "message": "Remove empty list imports", "tree": {"sha": "9df2ff5c6e7db8e1a1859b4ab7ca31c87e594c43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df2ff5c6e7db8e1a1859b4ab7ca31c87e594c43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d6558964dd9e5704d23a722d3ae8598bd3c13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d6558964dd9e5704d23a722d3ae8598bd3c13c", "html_url": "https://github.com/rust-lang/rust/commit/27d6558964dd9e5704d23a722d3ae8598bd3c13c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d6558964dd9e5704d23a722d3ae8598bd3c13c/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b601ea2bc7a2d69eb064ddfe6a337285b34cf9f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b601ea2bc7a2d69eb064ddfe6a337285b34cf9f6", "html_url": "https://github.com/rust-lang/rust/commit/b601ea2bc7a2d69eb064ddfe6a337285b34cf9f6"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "586caa76b640a8c857ed3fdd9ecef7532a8e07bc", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/27d6558964dd9e5704d23a722d3ae8598bd3c13c/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d6558964dd9e5704d23a722d3ae8598bd3c13c/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=27d6558964dd9e5704d23a722d3ae8598bd3c13c", "patch": "@@ -15,8 +15,6 @@ use syntax::ast;\n use syntax::parse::token;\n use syntax::print::pprust;\n \n-\n-// TODO remove empty lists (if they're even possible)\n // TODO (some day) remove unused imports, expand globs, compress many single imports into a list import\n \n fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem, vis: &str) -> String {\n@@ -40,22 +38,25 @@ fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem, vis: &str)\n \n impl<'a> FmtVisitor<'a> {\n     // Basically just pretty prints a multi-item import.\n+    // Returns None when the import can be removed.\n     pub fn rewrite_use_list(&mut self,\n                             block_indent: usize,\n                             one_line_budget: usize, // excluding indentation\n                             multi_line_budget: usize,\n                             path: &ast::Path,\n                             path_list: &[ast::PathListItem],\n-                            visibility: ast::Visibility) -> String {\n+                            visibility: ast::Visibility) -> Option<String> {\n         let path_str = pprust::path_to_string(path);\n \n         let vis = match visibility {\n             ast::Public => \"pub \",\n             _ => \"\"\n         };\n \n-        if path_list.len() == 1 {\n-            return rewrite_single_use_list(path_str, path_list[0], vis);\n+        match path_list.len() {\n+            0 => return None,\n+            1 => return Some(rewrite_single_use_list(path_str, path_list[0], vis)),\n+            _ => ()\n         }\n \n         // 2 = ::\n@@ -110,10 +111,10 @@ impl<'a> FmtVisitor<'a> {\n                 ast::PathListItem_::PathListMod{ .. } => None,\n             }\n         })).collect();\n-        if path_str.len() == 0 {\n+        Some(if path_str.len() == 0 {\n             format!(\"{}use {{{}}};\", vis, write_list(&items, &fmt))\n         } else {\n             format!(\"{}use {}::{{{}}};\", vis, path_str, write_list(&items, &fmt))\n-        }\n+        })\n     }\n }"}, {"sha": "630638e7bda60b9f3913eab809dc515c6b3b4c05", "filename": "src/visitor.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/27d6558964dd9e5704d23a722d3ae8598bd3c13c/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d6558964dd9e5704d23a722d3ae8598bd3c13c/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=27d6558964dd9e5704d23a722d3ae8598bd3c13c", "patch": "@@ -152,19 +152,30 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         match item.node {\n             ast::Item_::ItemUse(ref vp) => {\n-                self.format_missing_with_indent(item.span.lo);\n                 match vp.node {\n                     ast::ViewPath_::ViewPathList(ref path, ref path_list) => {\n                         let block_indent = self.block_indent;\n                         let one_line_budget = config!(max_width) - block_indent;\n                         let multi_line_budget = config!(ideal_width) - block_indent;\n-                        let new_str = self.rewrite_use_list(block_indent,\n-                                                            one_line_budget,\n-                                                            multi_line_budget,\n-                                                            path,\n-                                                            path_list,\n-                                                            item.vis);\n-                        self.changes.push_str_span(item.span, &new_str);\n+                        let formatted = self.rewrite_use_list(block_indent,\n+                                                              one_line_budget,\n+                                                              multi_line_budget,\n+                                                              path,\n+                                                              path_list,\n+                                                              item.vis);\n+\n+                        if let Some(new_str) = formatted {\n+                            self.format_missing_with_indent(item.span.lo);\n+                            self.changes.push_str_span(item.span, &new_str);\n+                        } else {\n+                            // Format up to last newline\n+                            let span = codemap::mk_sp(self.last_pos, item.span.lo);\n+                            let span_end = match self.snippet(span).rfind('\\n') {\n+                                Some(offset) => self.last_pos + BytePos(offset as u32),\n+                                None => item.span.lo\n+                            };\n+                            self.format_missing(span_end);\n+                        }\n                         self.last_pos = item.span.hi;\n                     }\n                     ast::ViewPath_::ViewPathGlob(_) => {"}]}