{"sha": "94d04e684cb8807b7dd33abc1765456c9f86a330", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDA0ZTY4NGNiODgwN2I3ZGQzM2FiYzE3NjU0NTZjOWY4NmEzMzA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-27T00:08:22Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-29T12:49:01Z"}, "message": "fix inference fallout", "tree": {"sha": "97bb5182961c7f71e99cc8f80fd4a28fd3af786d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97bb5182961c7f71e99cc8f80fd4a28fd3af786d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d04e684cb8807b7dd33abc1765456c9f86a330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d04e684cb8807b7dd33abc1765456c9f86a330", "html_url": "https://github.com/rust-lang/rust/commit/94d04e684cb8807b7dd33abc1765456c9f86a330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d04e684cb8807b7dd33abc1765456c9f86a330/comments", "author": null, "committer": null, "parents": [{"sha": "efc97a51ffc798247e36156cf8e2d175bf509018", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc97a51ffc798247e36156cf8e2d175bf509018", "html_url": "https://github.com/rust-lang/rust/commit/efc97a51ffc798247e36156cf8e2d175bf509018"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "c627574057969d93a479d779b19bf1d2d37d0ce4", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -66,7 +66,7 @@\n //! };\n //!\n //! // Simple primality tests below our max bound\n-//! let print_primes = 20;\n+//! let print_primes = 20u;\n //! print!(\"The primes below {} are: \", print_primes);\n //! for x in 0..print_primes {\n //!     if primes.contains(&x) {\n@@ -2283,7 +2283,7 @@ mod tests {\n \n         assert_eq!(bitv.iter().collect::<Vec<bool>>(), bools);\n \n-        let long = (0..10000).map(|i| i % 2 == 0).collect::<Vec<_>>();\n+        let long = (0i32..10000).map(|i| i % 2 == 0).collect::<Vec<_>>();\n         let bitv: Bitv = long.iter().map(|n| *n).collect();\n         assert_eq!(bitv.iter().collect::<Vec<bool>>(), long)\n     }"}, {"sha": "2e2ae11128504d7cc7092e0c8fc528dd154bd5c2", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -2126,7 +2126,7 @@ mod tests {\n             for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in 6..9 {\n+            for i in 6i..9 {\n                 d.push_front(i);\n             }\n \n@@ -2140,7 +2140,7 @@ mod tests {\n             for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in 6..9 {\n+            for i in 6i..9 {\n                 d.push_front(i);\n             }\n \n@@ -2190,7 +2190,7 @@ mod tests {\n             for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in 6..9 {\n+            for i in 6i..9 {\n                 d.push_front(i);\n             }\n \n@@ -2204,7 +2204,7 @@ mod tests {\n             for i in 0i..5 {\n                 d.push_back(i);\n             }\n-            for i in 6..9 {\n+            for i in 6i..9 {\n                 d.push_front(i);\n             }\n "}, {"sha": "740d5759d9a9621b37470ee0b8320e638fa6e686", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -1526,7 +1526,7 @@ mod tests {\n     #[test]\n     fn test_from_fn() {\n         // Test on-stack from_fn.\n-        let mut v = (0..3).map(square).collect::<Vec<_>>();\n+        let mut v = (0u..3).map(square).collect::<Vec<_>>();\n         {\n             let v = v.as_slice();\n             assert_eq!(v.len(), 3u);\n@@ -1536,7 +1536,7 @@ mod tests {\n         }\n \n         // Test on-heap from_fn.\n-        v = (0..5).map(square).collect::<Vec<_>>();\n+        v = (0u..5).map(square).collect::<Vec<_>>();\n         {\n             let v = v.as_slice();\n             assert_eq!(v.len(), 5u);\n@@ -2908,7 +2908,7 @@ mod bench {\n \n     #[bench]\n     fn starts_with_same_vector(b: &mut Bencher) {\n-        let vec: Vec<uint> = (0..100).collect();\n+        let vec: Vec<uint> = (0u..100).collect();\n         b.iter(|| {\n             vec.starts_with(vec.as_slice())\n         })\n@@ -2924,8 +2924,8 @@ mod bench {\n \n     #[bench]\n     fn starts_with_diff_one_element_at_end(b: &mut Bencher) {\n-        let vec: Vec<uint> = (0..100).collect();\n-        let mut match_vec: Vec<uint> = (0..99).collect();\n+        let vec: Vec<uint> = (0u..100).collect();\n+        let mut match_vec: Vec<uint> = (0u..99).collect();\n         match_vec.push(0);\n         b.iter(|| {\n             vec.starts_with(match_vec.as_slice())\n@@ -2934,7 +2934,7 @@ mod bench {\n \n     #[bench]\n     fn ends_with_same_vector(b: &mut Bencher) {\n-        let vec: Vec<uint> = (0..100).collect();\n+        let vec: Vec<uint> = (0u..100).collect();\n         b.iter(|| {\n             vec.ends_with(vec.as_slice())\n         })\n@@ -2950,8 +2950,8 @@ mod bench {\n \n     #[bench]\n     fn ends_with_diff_one_element_at_beginning(b: &mut Bencher) {\n-        let vec: Vec<uint> = (0..100).collect();\n-        let mut match_vec: Vec<uint> = (0..100).collect();\n+        let vec: Vec<uint> = (0u..100).collect();\n+        let mut match_vec: Vec<uint> = (0u..100).collect();\n         match_vec.as_mut_slice()[0] = 200;\n         b.iter(|| {\n             vec.starts_with(match_vec.as_slice())\n@@ -2960,7 +2960,7 @@ mod bench {\n \n     #[bench]\n     fn contains_last_element(b: &mut Bencher) {\n-        let vec: Vec<uint> = (0..100).collect();\n+        let vec: Vec<uint> = (0u..100).collect();\n         b.iter(|| {\n             vec.contains(&99u)\n         })"}, {"sha": "da35eef63470c28e67d08655835b5e1a2a0ca9c6", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -1184,7 +1184,7 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_A_aligned(b: &mut Bencher) {\n-        let data = (0..4*100).map(|i| {\n+        let data = (0i32..4*100).map(|i| {\n             match i % 2 {\n               0 => 0x80u8,\n               _ => i as u8,\n@@ -1202,7 +1202,7 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_A_unaligned(b: &mut Bencher) {\n-        let data = (0..4*100+1).map(|i| {\n+        let data = (0i32..4*100+1).map(|i| {\n             match i % 2 {\n               1 => 0x80u8,\n               _ => i as u8\n@@ -1220,7 +1220,7 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_D_aligned(b: &mut Bencher) {\n-        let data = (0..4*100).map(|i| {\n+        let data = (0i32..4*100).map(|i| {\n             match i % 4 {\n               0 => 0x10u8,\n               3 => i as u8,\n@@ -1239,7 +1239,7 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_D_unaligned(b: &mut Bencher) {\n-        let data = (0..4*100+1).map(|i| {\n+        let data = (0i32..4*100+1).map(|i| {\n             match i % 4 {\n               1 => 0x10u8,\n               0 => i as u8,"}, {"sha": "a291ec16a62440183b0b7385f831dc794ec4e480", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -2094,18 +2094,18 @@ mod test_map {\n         m.insert(0u, 0u);\n         m.remove(&0);\n         assert!(m.capacity() >= m.len());\n-        for i in 0..128 {\n+        for i in 0us..128 {\n             m.insert(i, i);\n         }\n         m.reserve(256);\n \n         let usable_cap = m.capacity();\n-        for i in 128..128+256 {\n+        for i in 128us..128+256 {\n             m.insert(i, i);\n             assert_eq!(m.capacity(), usable_cap);\n         }\n \n-        for i in 100..128+256 {\n+        for i in 100us..128+256 {\n             assert_eq!(m.remove(&i), Some(i));\n         }\n         m.shrink_to_fit();\n@@ -2114,7 +2114,7 @@ mod test_map {\n         assert!(!m.is_empty());\n         assert!(m.capacity() >= m.len());\n \n-        for i in 0..100 {\n+        for i in 0us..100 {\n             assert_eq!(m.remove(&i), Some(i));\n         }\n         m.shrink_to_fit();"}, {"sha": "2b15e50c6fac3e275311af79835598385f297588", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -1198,7 +1198,7 @@ mod test_set {\n \n     #[test]\n     fn test_drain() {\n-        let mut s: HashSet<int> = (1..100).collect();\n+        let mut s: HashSet<int> = (1is..100).collect();\n \n         // try this a bunch of times to make sure we don't screw up internal state.\n         for _ in 0i..20 {\n@@ -1217,7 +1217,7 @@ mod test_set {\n             for _ in s.iter() { panic!(\"s should be empty!\"); }\n \n             // reset to try again.\n-            s.extend(1..100);\n+            s.extend(1is..100);\n         }\n     }\n }"}, {"sha": "237acbd7b65b74fc89ab26175db27ede8b66fa1d", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -939,7 +939,7 @@ mod bench {\n     #[bench]\n     pub fn sum_many_f64(b: &mut Bencher) {\n         let nums = [-1e30f64, 1e60, 1e30, 1.0, -1e60];\n-        let v = (0..500).map(|i| nums[i%5]).collect::<Vec<_>>();\n+        let v = (0us..500).map(|i| nums[i%5]).collect::<Vec<_>>();\n \n         b.iter(|| {\n             v.sum();"}, {"sha": "7dfde2f6badfea654b24f8df7ce98c0311bff981", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -11,5 +11,5 @@\n use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64; 3] = [1, 2, 3];\n-    assert_eq!(6, (0..3).map(|i| x[i]).sum());\n+    assert_eq!(6, (0us..3).map(|i| x[i]).sum());\n }"}, {"sha": "e18dbf2dd87b0abab60c8311db8686fcbe12b501", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d04e684cb8807b7dd33abc1765456c9f86a330/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=94d04e684cb8807b7dd33abc1765456c9f86a330", "patch": "@@ -21,7 +21,7 @@ impl methods for () {\n // the position of this function is significant! - if it comes before methods\n // then it works, if it comes after it then it doesn't!\n fn to_bools(bitv: Storage) -> Vec<bool> {\n-    (0..8).map(|i| {\n+    (0us..8).map(|i| {\n         let w = i / 64;\n         let b = i % 64;\n         let x = 1u64 & (bitv.storage[w] >> b);"}]}