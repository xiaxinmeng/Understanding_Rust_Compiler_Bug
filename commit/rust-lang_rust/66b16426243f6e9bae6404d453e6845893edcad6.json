{"sha": "66b16426243f6e9bae6404d453e6845893edcad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjE2NDI2MjQzZjZlOWJhZTY0MDRkNDUzZTY4NDU4OTNlZGNhZDY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T15:10:46Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T15:11:25Z"}, "message": "Add recover_missing_comment_in_span() and rewrite_missing_comment()", "tree": {"sha": "17ea9b370fb8d80c3a49f695c295f9b7f8471189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ea9b370fb8d80c3a49f695c295f9b7f8471189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b16426243f6e9bae6404d453e6845893edcad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b16426243f6e9bae6404d453e6845893edcad6", "html_url": "https://github.com/rust-lang/rust/commit/66b16426243f6e9bae6404d453e6845893edcad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b16426243f6e9bae6404d453e6845893edcad6/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa364ad066f863fbba4948619210a932475963c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa364ad066f863fbba4948619210a932475963c7", "html_url": "https://github.com/rust-lang/rust/commit/fa364ad066f863fbba4948619210a932475963c7"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "bb7ce14dcddd998cb8c04b8f7e6cf9733dd5fe6a", "filename": "src/comment.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/66b16426243f6e9bae6404d453e6845893edcad6/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b16426243f6e9bae6404d453e6845893edcad6/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=66b16426243f6e9bae6404d453e6845893edcad6", "patch": "@@ -365,6 +365,50 @@ fn rewrite_comment_inner(\n     Some(result)\n }\n \n+/// Given the span, rewrite the missing comment inside it if available.\n+/// Note that the given span must only include comments (or leading/trailing whitespaces).\n+pub fn rewrite_missing_comment(\n+    span: Span,\n+    shape: Shape,\n+    context: &RewriteContext,\n+) -> Option<String> {\n+    let missing_snippet = context.snippet(span);\n+    let trimmed_snippet = missing_snippet.trim();\n+    if !trimmed_snippet.is_empty() {\n+        rewrite_comment(trimmed_snippet, false, shape, context.config)\n+    } else {\n+        Some(String::new())\n+    }\n+}\n+\n+/// Recover the missing comments in the specified span, if available.\n+/// The layout of the comments will be preserved as long as it does not break the code\n+/// and its total width does not exceed the max width.\n+pub fn recover_missing_comment_in_span(\n+    span: Span,\n+    shape: Shape,\n+    context: &RewriteContext,\n+    used_width: usize,\n+) -> Option<String> {\n+    let missing_comment = try_opt!(rewrite_missing_comment(span, shape, context));\n+    if missing_comment.is_empty() {\n+        Some(String::new())\n+    } else {\n+        let missing_snippet = context.snippet(span);\n+        let pos = missing_snippet.chars().position(|c| c == '/').unwrap_or(0);\n+        // 1 = ` `\n+        let total_width = missing_comment.len() + used_width + 1;\n+        let force_new_line_before_comment =\n+            missing_snippet[..pos].contains('\\n') || total_width > context.config.max_width();\n+        let sep = if force_new_line_before_comment {\n+            format!(\"\\n{}\", shape.indent.to_string(context.config))\n+        } else {\n+            String::from(\" \")\n+        };\n+        Some(format!(\"{}{}\", sep, missing_comment))\n+    }\n+}\n+\n /// Trims whitespace and aligns to indent, but otherwise does not change comments.\n fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<String> {\n     let lines: Vec<&str> = orig.lines()"}]}