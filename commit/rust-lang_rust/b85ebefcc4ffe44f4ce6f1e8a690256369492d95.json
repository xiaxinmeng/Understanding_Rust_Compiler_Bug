{"sha": "b85ebefcc4ffe44f4ce6f1e8a690256369492d95", "node_id": "C_kwDOAAsO6NoAKGI4NWViZWZjYzRmZmU0NGY0Y2U2ZjFlOGE2OTAyNTYzNjk0OTJkOTU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-16T14:24:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-16T14:24:41Z"}, "message": "Re-use the type op instead of calling the implied_outlives_bounds query directly", "tree": {"sha": "b0b0acd7ebafe71795429bfc34e1426418a25b74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b0acd7ebafe71795429bfc34e1426418a25b74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85ebefcc4ffe44f4ce6f1e8a690256369492d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85ebefcc4ffe44f4ce6f1e8a690256369492d95", "html_url": "https://github.com/rust-lang/rust/commit/b85ebefcc4ffe44f4ce6f1e8a690256369492d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85ebefcc4ffe44f4ce6f1e8a690256369492d95/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14da30e3e68999021a42bab470865b044409fb68", "url": "https://api.github.com/repos/rust-lang/rust/commits/14da30e3e68999021a42bab470865b044409fb68", "html_url": "https://github.com/rust-lang/rust/commit/14da30e3e68999021a42bab470865b044409fb68"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "3bf697e7682694f0089a00e993edba6b62646a88", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b85ebefcc4ffe44f4ce6f1e8a690256369492d95/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85ebefcc4ffe44f4ce6f1e8a690256369492d95/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=b85ebefcc4ffe44f4ce6f1e8a690256369492d95", "patch": "@@ -1,9 +1,8 @@\n use rustc_hir as hir;\n-use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n-use rustc_trait_selection::infer::canonical::OriginalQueryValues;\n use rustc_trait_selection::infer::InferCtxt;\n+use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::NoSolution;\n use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n \n@@ -41,18 +40,18 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     /// - `ty`, the type that we are supposed to assume is WF.\n     /// - `span`, a span to use when normalizing, hopefully not important,\n     ///   might be useful if a `bug!` occurs.\n+    #[instrument(level = \"debug\", skip(self, param_env, body_id, span))]\n     fn implied_outlives_bounds(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n         ty: Ty<'tcx>,\n         span: Span,\n     ) -> Vec<OutlivesBound<'tcx>> {\n-        debug!(\"implied_outlives_bounds(ty = {:?})\", ty);\n-\n-        let mut orig_values = OriginalQueryValues::default();\n-        let key = self.canonicalize_query(param_env.and(ty), &mut orig_values);\n-        let result = match self.tcx.implied_outlives_bounds(key) {\n+        let result = param_env\n+            .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n+            .fully_perform(self);\n+        let result = match result {\n             Ok(r) => r,\n             Err(NoSolution) => {\n                 self.tcx.sess.delay_span_bug(\n@@ -62,32 +61,34 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n                 return vec![];\n             }\n         };\n-        assert!(result.value.is_proven());\n \n-        let result = self.instantiate_query_response_and_region_obligations(\n-            &ObligationCause::misc(span, body_id),\n-            param_env,\n-            &orig_values,\n-            result,\n-        );\n-        debug!(\"implied_outlives_bounds for {:?}: {:#?}\", ty, result);\n-        let Ok(result) = result else {\n-            self.tcx.sess.delay_span_bug(span, \"implied_outlives_bounds failed to instantiate\");\n-            return vec![];\n-        };\n+        let TypeOpOutput { output, constraints, .. } = result;\n \n-        // Instantiation may have produced new inference variables and constraints on those\n-        // variables. Process these constraints.\n-        let mut fulfill_cx = FulfillmentContext::new();\n-        fulfill_cx.register_predicate_obligations(self, result.obligations);\n-        let errors = fulfill_cx.select_all_or_error(self);\n-        if !errors.is_empty() {\n-            self.tcx.sess.delay_span_bug(\n-                span,\n-                \"implied_outlives_bounds failed to solve obligations from instantiation\",\n-            );\n-        }\n+        if let Some(constraints) = constraints {\n+            // Instantiation may have produced new inference variables and constraints on those\n+            // variables. Process these constraints.\n+            let mut fulfill_cx = FulfillmentContext::new();\n+            let cause = ObligationCause::misc(span, body_id);\n+            for &constraint in &constraints.outlives {\n+                let obligation = self.query_outlives_constraint_to_obligation(\n+                    constraint,\n+                    cause.clone(),\n+                    param_env,\n+                );\n+                fulfill_cx.register_predicate_obligation(self, obligation);\n+            }\n+            if !constraints.member_constraints.is_empty() {\n+                span_bug!(span, \"{:#?}\", constraints.member_constraints);\n+            }\n+            let errors = fulfill_cx.select_all_or_error(self);\n+            if !errors.is_empty() {\n+                self.tcx.sess.delay_span_bug(\n+                    span,\n+                    \"implied_outlives_bounds failed to solve obligations from instantiation\",\n+                );\n+            }\n+        };\n \n-        result.value\n+        output\n     }\n }"}]}