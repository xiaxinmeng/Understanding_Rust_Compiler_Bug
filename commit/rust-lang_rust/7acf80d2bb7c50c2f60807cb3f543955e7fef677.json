{"sha": "7acf80d2bb7c50c2f60807cb3f543955e7fef677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhY2Y4MGQyYmI3YzUwYzJmNjA4MDdjYjNmNTQzOTU1ZTdmZWY2Nzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-02T09:44:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-02T09:57:08Z"}, "message": "rustup; fix tests for new MIR optimization", "tree": {"sha": "3a649bf256e9978f3d8d23fdcba611d87ee480b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a649bf256e9978f3d8d23fdcba611d87ee480b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7acf80d2bb7c50c2f60807cb3f543955e7fef677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7acf80d2bb7c50c2f60807cb3f543955e7fef677", "html_url": "https://github.com/rust-lang/rust/commit/7acf80d2bb7c50c2f60807cb3f543955e7fef677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7acf80d2bb7c50c2f60807cb3f543955e7fef677/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46a08b72ef98a28a1e5bf205b13c8c54f891497b", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a08b72ef98a28a1e5bf205b13c8c54f891497b", "html_url": "https://github.com/rust-lang/rust/commit/46a08b72ef98a28a1e5bf205b13c8c54f891497b"}], "stats": {"total": 132, "additions": 15, "deletions": 117}, "files": [{"sha": "65644e75d97703cb168fefddff3589753d2d58f9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7acf80d2bb7c50c2f60807cb3f543955e7fef677/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/7acf80d2bb7c50c2f60807cb3f543955e7fef677/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=7acf80d2bb7c50c2f60807cb3f543955e7fef677", "patch": "@@ -1 +1 @@\n-d2731d8e9338d8fe844e19d3fbb39617753e65f4\n+09db05762b283bed62d4f92729cfee4646519833"}, {"sha": "281aff8631468c5809df369c23b938cd8e8de7a2", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=7acf80d2bb7c50c2f60807cb3f543955e7fef677", "patch": "@@ -1,5 +1,6 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n+// compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0\n+// With optimizations (in particular #78360), the span becomes much worse, so we disable them.\n \n use std::thread::{spawn, sleep};\n use std::ptr::null_mut;\n@@ -27,9 +28,6 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -38,6 +36,8 @@ pub fn main() {\n \n                 sleep(Duration::from_millis(200));\n \n+                // Now `stack_var` gets deallocated.\n+\n             } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n         });\n "}, {"sha": "44950a34db2f855ba29e39f0b8dc1cb31c3a7165", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack_drop.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs?ref=46a08b72ef98a28a1e5bf205b13c8c54f891497b", "patch": "@@ -1,52 +0,0 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::thread::{spawn, sleep};\n-use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n-use std::time::Duration;\n-\n-#[derive(Copy, Clone)]\n-struct EvilSend<T>(pub T);\n-\n-unsafe impl<T> Send for EvilSend<T> {}\n-unsafe impl<T> Sync for EvilSend<T> {}\n-\n-pub fn main() {\n-    // Shared atomic pointer\n-    let pointer = AtomicPtr::new(null_mut::<usize>());\n-    let ptr = EvilSend(&pointer as *const AtomicPtr<usize>);\n-\n-    // Note: this is scheduler-dependent\n-    // the operations need to occur in\n-    // order, otherwise the allocation is\n-    // not visible to the other-thread to\n-    // detect the race:\n-    //  1. stack-allocate\n-    //  2. read\n-    //  3. stack-deallocate\n-    unsafe {\n-        let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n-            let pointer = &*ptr.0;\n-\n-            let mut stack_var = 0usize;\n-\n-            pointer.store(&mut stack_var as *mut _, Ordering::Release);\n-\n-            sleep(Duration::from_millis(200));\n-\n-            drop(stack_var);\n-        });  //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n-\n-        let j2 = spawn(move || {\n-            let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Acquire)\n-        });\n-\n-        j1.join().unwrap();\n-        j2.join().unwrap();\n-    }\n-}"}, {"sha": "55aaa0c1635a515b48812a4a1463e93393c9279c", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=7acf80d2bb7c50c2f60807cb3f543955e7fef677", "patch": "@@ -1,5 +1,6 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n+// compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0\n+// With optimizations (in particular #78360), the span becomes much worse, so we disable them.\n \n use std::thread::{spawn, sleep};\n use std::ptr::null_mut;\n@@ -27,9 +28,6 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -38,6 +36,8 @@ pub fn main() {\n \n                 sleep(Duration::from_millis(200));\n \n+                // Now `stack_var` gets deallocated.\n+\n             } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2)\n         });\n "}, {"sha": "1d239e9eb74d02f69d06bb1af8fdaa965c8bda9f", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack_drop.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs?ref=46a08b72ef98a28a1e5bf205b13c8c54f891497b", "patch": "@@ -1,53 +0,0 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::thread::{spawn, sleep};\n-use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n-use std::time::Duration;\n-\n-#[derive(Copy, Clone)]\n-struct EvilSend<T>(pub T);\n-\n-unsafe impl<T> Send for EvilSend<T> {}\n-unsafe impl<T> Sync for EvilSend<T> {}\n-\n-pub fn main() {\n-    // Shared atomic pointer\n-    let pointer = AtomicPtr::new(null_mut::<usize>());\n-    let ptr = EvilSend(&pointer as *const AtomicPtr<usize>);\n-\n-    // Note: this is scheduler-dependent\n-    // the operations need to occur in\n-    // order, otherwise the allocation is\n-    // not visible to the other-thread to\n-    // detect the race:\n-    //  1. stack-allocate\n-    //  2. read\n-    //  3. stack-deallocate\n-    unsafe {\n-        let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n-            let pointer = &*ptr.0;\n-\n-            let mut stack_var = 0usize;\n-\n-            pointer.store(&mut stack_var as *mut _, Ordering::Release);\n-            \n-            sleep(Duration::from_millis(200));\n-\n-            // Note: Implicit read for drop(_) races with write, would detect race with deallocate after.\n-            drop(stack_var); //~ ERROR Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2)\n-        });\n-\n-        let j2 = spawn(move || {\n-            let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Acquire) = 3;\n-        });\n-\n-        j1.join().unwrap();\n-        j2.join().unwrap();\n-    }\n-}"}, {"sha": "da45d062d03b836f62ab348e5424b1a627e55977", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs?ref=7acf80d2bb7c50c2f60807cb3f543955e7fef677", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: No libc on Windows\n+// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -8,6 +9,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n+        libc::pthread_rwlock_wrlock(rw.get());\n     }\n }", "previous_filename": "tests/compile-fail/sync/libc_pthread_rwlock_read_write_deadlock.rs"}, {"sha": "ee2e57a9ab375e6d6ee9f8ac28b92b98ee86b5ee", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=7acf80d2bb7c50c2f60807cb3f543955e7fef677", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: No libc on Windows\n+// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -8,6 +9,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_rdlock(rw.get()); //~ ERROR: deadlock\n+        libc::pthread_rwlock_rdlock(rw.get());\n     }\n }"}, {"sha": "f0404f202e561b2a96da12cd82e0f87a0757205b", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acf80d2bb7c50c2f60807cb3f543955e7fef677/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=7acf80d2bb7c50c2f60807cb3f543955e7fef677", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: No libc on Windows\n+// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -8,6 +9,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n+        libc::pthread_rwlock_wrlock(rw.get());\n     }\n }"}]}