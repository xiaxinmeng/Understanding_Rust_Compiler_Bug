{"sha": "355419d4044704d13a902641d86ad5501af8714d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTQxOWQ0MDQ0NzA0ZDEzYTkwMjY0MWQ4NmFkNTUwMWFmODcxNGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-08T11:22:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-08T11:22:49Z"}, "message": "use slightly more idiomatic api for cfg", "tree": {"sha": "f5803e2159d56145f83e4d08170f4e475a75ebb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5803e2159d56145f83e4d08170f4e475a75ebb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/355419d4044704d13a902641d86ad5501af8714d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/355419d4044704d13a902641d86ad5501af8714d", "html_url": "https://github.com/rust-lang/rust/commit/355419d4044704d13a902641d86ad5501af8714d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/355419d4044704d13a902641d86ad5501af8714d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93199002af05f3a3dfd274fe10633372f2471b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/93199002af05f3a3dfd274fe10633372f2471b73", "html_url": "https://github.com/rust-lang/rust/commit/93199002af05f3a3dfd274fe10633372f2471b73"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "602beb4394180ba72c45d8c9baeb898a1a6f233f", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -43,8 +43,12 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n     );\n \n     // FIXME: cfg options?\n-    let default_cfg_options =\n-        get_rustc_cfg_options().atom(\"test\".into()).atom(\"debug_assertion\".into());\n+    let default_cfg_options = {\n+        let mut opts = get_rustc_cfg_options();\n+        opts.insert_atom(\"test\".into());\n+        opts.insert_atom(\"debug_assertion\".into());\n+        opts\n+    };\n \n     let (crate_graph, _crate_names) =\n         ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {"}, {"sha": "1bee3eb995e8086ca9f00921a5c7837fdd683082", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -36,26 +36,20 @@ impl CfgOptions {\n         self.check(&parse_cfg(attr))\n     }\n \n-    pub fn atom(mut self, name: SmolStr) -> CfgOptions {\n-        self.atoms.insert(name);\n-        self\n+    pub fn insert_atom(&mut self, key: SmolStr) {\n+        self.atoms.insert(key);\n     }\n \n-    pub fn key_value(mut self, key: SmolStr, value: SmolStr) -> CfgOptions {\n-        self.key_values.insert((key, value));\n-        self\n+    pub fn remove_atom(&mut self, name: &str) {\n+        self.atoms.remove(name);\n     }\n \n-    /// Shortcut to set features\n-    pub fn features(mut self, iter: impl IntoIterator<Item = SmolStr>) -> CfgOptions {\n-        for feat in iter {\n-            self = self.key_value(\"feature\".into(), feat);\n-        }\n-        self\n+    pub fn insert_key_value(&mut self, key: SmolStr, value: SmolStr) {\n+        self.key_values.insert((key, value));\n     }\n \n-    pub fn remove_atom(mut self, name: &SmolStr) -> CfgOptions {\n-        self.atoms.remove(name);\n-        self\n+    /// Shortcut to set features\n+    pub fn insert_features(&mut self, iter: impl IntoIterator<Item = SmolStr>) {\n+        iter.into_iter().for_each(|feat| self.insert_key_value(\"feature\".into(), feat));\n     }\n }"}, {"sha": "208c2f16f04e3a17db4f97ca98606255775e3196", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -561,12 +561,14 @@ fn cfg_test() {\n         \"#,\n         crate_graph! {\n             \"main\": (\"/main.rs\", [\"std\"]),\n-            \"std\": (\"/lib.rs\", [], CfgOptions::default()\n-                .atom(\"test\".into())\n-                .key_value(\"feature\".into(), \"foo\".into())\n-                .key_value(\"feature\".into(), \"bar\".into())\n-                .key_value(\"opt\".into(), \"42\".into())\n-            ),\n+            \"std\": (\"/lib.rs\", [], {\n+                let mut opts = CfgOptions::default();\n+                opts.insert_atom(\"test\".into());\n+                opts.insert_key_value(\"feature\".into(), \"foo\".into());\n+                opts.insert_key_value(\"feature\".into(), \"bar\".into());\n+                opts.insert_key_value(\"opt\".into(), \"42\".into());\n+                opts\n+            }),\n         },\n     );\n "}, {"sha": "b16b4825814a80e136f842b32f793f310ce28e9f", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -62,7 +62,11 @@ impl S {\n \"#,\n     );\n     db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"foo\"], CfgOptions::default().atom(\"test\".into())),\n+        \"main\": (\"/main.rs\", [\"foo\"], {\n+            let mut opts = CfgOptions::default();\n+            opts.insert_atom(\"test\".into());\n+            opts\n+        }),\n         \"foo\": (\"/foo.rs\", []),\n     });\n     assert_eq!(\"(i32, {unknown}, i32, {unknown})\", type_at_pos(&db, pos));"}, {"sha": "2d92fe1c502cac7b1148971d34c8b9fd8fd0471c", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -325,7 +325,8 @@ impl Analysis {\n         let file_id = FileId(0);\n         // FIXME: cfg options\n         // Default to enable test for single file.\n-        let cfg_options = CfgOptions::default().atom(\"test\".into());\n+        let mut cfg_options = CfgOptions::default();\n+        cfg_options.insert_atom(\"test\".into());\n         crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);"}, {"sha": "0eb684de5d41f4121cde7546eae1adb5318edff1", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -98,8 +98,12 @@ impl WorldState {\n         }\n \n         // FIXME: Read default cfgs from config\n-        let default_cfg_options =\n-            get_rustc_cfg_options().atom(\"test\".into()).atom(\"debug_assertion\".into());\n+        let default_cfg_options = {\n+            let mut opts = get_rustc_cfg_options();\n+            opts.insert_atom(\"test\".into());\n+            opts.insert_atom(\"debug_assertion\".into());\n+            opts\n+        };\n \n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();"}, {"sha": "a4d117e34f57845974715f6c4337620a789e7378", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355419d4044704d13a902641d86ad5501af8714d/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=355419d4044704d13a902641d86ad5501af8714d", "patch": "@@ -134,13 +134,16 @@ impl ProjectWorkspace {\n                             json_project::Edition::Edition2015 => Edition::Edition2015,\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n                         };\n-                        let mut cfg_options = default_cfg_options.clone();\n-                        for name in &krate.atom_cfgs {\n-                            cfg_options = cfg_options.atom(name.into());\n-                        }\n-                        for (key, value) in &krate.key_value_cfgs {\n-                            cfg_options = cfg_options.key_value(key.into(), value.into());\n-                        }\n+                        let cfg_options = {\n+                            let mut opts = default_cfg_options.clone();\n+                            for name in &krate.atom_cfgs {\n+                                opts.insert_atom(name.into());\n+                            }\n+                            for (key, value) in &krate.key_value_cfgs {\n+                                opts.insert_key_value(key.into(), value.into());\n+                            }\n+                            opts\n+                        };\n                         crates.insert(\n                             crate_id,\n                             crate_graph.add_crate_root(file_id, edition, cfg_options),\n@@ -171,7 +174,12 @@ impl ProjectWorkspace {\n                 for krate in sysroot.crates() {\n                     if let Some(file_id) = load(krate.root(&sysroot)) {\n                         // Crates from sysroot have `cfg(test)` disabled\n-                        let cfg_options = default_cfg_options.clone().remove_atom(&\"test\".into());\n+                        let cfg_options = {\n+                            let mut opts = default_cfg_options.clone();\n+                            opts.remove_atom(\"test\");\n+                            opts\n+                        };\n+\n                         let crate_id =\n                             crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n                         sysroot_crates.insert(krate, crate_id);\n@@ -202,9 +210,11 @@ impl ProjectWorkspace {\n                         let root = tgt.root(&cargo);\n                         if let Some(file_id) = load(root) {\n                             let edition = pkg.edition(&cargo);\n-                            let cfg_options = default_cfg_options\n-                                .clone()\n-                                .features(pkg.features(&cargo).iter().map(Into::into));\n+                            let cfg_options = {\n+                                let mut opts = default_cfg_options.clone();\n+                                opts.insert_features(pkg.features(&cargo).iter().map(Into::into));\n+                                opts\n+                            };\n                             let crate_id =\n                                 crate_graph.add_crate_root(file_id, edition, cfg_options);\n                             names.insert(crate_id, pkg.name(&cargo).to_string());\n@@ -321,11 +331,11 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n         Ok(rustc_cfgs) => {\n             for line in rustc_cfgs.lines() {\n                 match line.find('=') {\n-                    None => cfg_options = cfg_options.atom(line.into()),\n+                    None => cfg_options.insert_atom(line.into()),\n                     Some(pos) => {\n                         let key = &line[..pos];\n                         let value = line[pos + 1..].trim_matches('\"');\n-                        cfg_options = cfg_options.key_value(key.into(), value.into());\n+                        cfg_options.insert_key_value(key.into(), value.into());\n                     }\n                 }\n             }"}]}