{"sha": "5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5", "node_id": "C_kwDOAAsO6NoAKDVhZGFhNzExZDQ0ZDM2ZTNhYjZlZDQyY2M0ZjhlNjhiYjFhODY1ZTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-11T14:43:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-11T14:43:14Z"}, "message": "Rollup merge of #108708 - noamtashma:issue-108706-fix, r=m-ou-se\n\nPrevent overflow through Arc::downgrade\n\nFixes #108706", "tree": {"sha": "35c27e04eb3634808ae01f6e7b6ab637179344f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35c27e04eb3634808ae01f6e7b6ab637179344f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDJOCCRBK7hj4Ov3rIwAA0RUIAFNs7llqMJsC1UdpK2Zd9q/m\nW7u+ZmEdAsCvrKadB+166IQFUqlRpeIJnNL7yNGMU9lZc+j32GrXf1fjeQTfDBY3\n0aqnLetJ/SaDWTLn8KuX6xDtsBEh6Hn/M8hZsX/XBHICIQ50RGW1Fau3xajUpXnP\nDQHF0x3C6EN/0/6DWzm4DY8c+63bY8Nz4rKXDJqzUybA8wn1M2WWGItp1FmLxgfA\nU1afUr8c6WmXmPSjCMJrYjYwijOmkHNfcCvi4XMdKqv+2q1bIUXfDNEAvNJn6Ort\nBZxtMxU7YQ6DrlTClO55KLhSIVNOs7/6tivZwfiMqc66tR2RPO16+Ws2zv4mwu8=\n=APHW\n-----END PGP SIGNATURE-----\n", "payload": "tree 35c27e04eb3634808ae01f6e7b6ab637179344f1\nparent 1909d933d50799b7ba13fa28b953f400dd18ca61\nparent 620544e0ba73bd27d8e73cbae4c0e5eea69100cc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678545794 +0100\ncommitter GitHub <noreply@github.com> 1678545794 +0100\n\nRollup merge of #108708 - noamtashma:issue-108706-fix, r=m-ou-se\n\nPrevent overflow through Arc::downgrade\n\nFixes #108706\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5", "html_url": "https://github.com/rust-lang/rust/commit/5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1909d933d50799b7ba13fa28b953f400dd18ca61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1909d933d50799b7ba13fa28b953f400dd18ca61", "html_url": "https://github.com/rust-lang/rust/commit/1909d933d50799b7ba13fa28b953f400dd18ca61"}, {"sha": "620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/620544e0ba73bd27d8e73cbae4c0e5eea69100cc", "html_url": "https://github.com/rust-lang/rust/commit/620544e0ba73bd27d8e73cbae4c0e5eea69100cc"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "f37573c6f27f4aa91f93683183ae0579a2bdcc7d", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=5adaa711d44d36e3ab6ed42cc4f8e68bb1a865e5", "patch": "@@ -51,8 +51,16 @@ mod tests;\n ///\n /// Going above this limit will abort your program (although not\n /// necessarily) at _exactly_ `MAX_REFCOUNT + 1` references.\n+/// Trying to go above it might call a `panic` (if not actually going above it).\n+///\n+/// This is a global invariant, and also applies when using a compare-exchange loop.\n+///\n+/// See comment in `Arc::clone`.\n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n \n+/// The error in case either counter reaches above `MAX_REFCOUNT`, and we can `panic` safely.\n+const INTERNAL_OVERFLOW_ERROR: &str = \"Arc counter overflow\";\n+\n #[cfg(not(sanitize = \"thread\"))]\n macro_rules! acquire {\n     ($x:expr) => {\n@@ -1104,6 +1112,9 @@ impl<T: ?Sized> Arc<T> {\n                 continue;\n             }\n \n+            // We can't allow the refcount to increase much past `MAX_REFCOUNT`.\n+            assert!(cur <= MAX_REFCOUNT, \"{}\", INTERNAL_OVERFLOW_ERROR);\n+\n             // NOTE: this code currently ignores the possibility of overflow\n             // into usize::MAX; in general both Rc and Arc need to be adjusted\n             // to deal with overflow.\n@@ -1519,6 +1530,11 @@ impl<T: ?Sized> Clone for Arc<T> {\n         // the worst already happened and we actually do overflow the `usize` counter. However, that\n         // requires the counter to grow from `isize::MAX` to `usize::MAX` between the increment\n         // above and the `abort` below, which seems exceedingly unlikely.\n+        //\n+        // This is a global invariant, and also applies when using a compare-exchange loop to increment\n+        // counters in other methods.\n+        // Otherwise, the counter could be brought to an almost-overflow using a compare-exchange loop,\n+        // and then overflow using a few `fetch_add`s.\n         if old_size > MAX_REFCOUNT {\n             abort();\n         }\n@@ -2180,9 +2196,7 @@ impl<T: ?Sized> Weak<T> {\n                     return None;\n                 }\n                 // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n-                if n > MAX_REFCOUNT {\n-                    abort();\n-                }\n+                assert!(n <= MAX_REFCOUNT, \"{}\", INTERNAL_OVERFLOW_ERROR);\n                 Some(n + 1)\n             })\n             .ok()"}]}