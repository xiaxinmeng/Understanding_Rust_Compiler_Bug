{"sha": "560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MGEyZjRmYWY0ODI4YmE1ZjQ4ZmUyYmQ3NzA5MjY1YzJmNTM1NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-31T07:53:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-31T07:53:57Z"}, "message": "Auto merge of #45752 - estebank:highlight-primary, r=nikomatsakis\n\nHighlight code on diagnostics when underlined\n\nHighlight the label's span with the respective color:\n\n<img width=\"692\" alt=\"\" src=\"https://user-images.githubusercontent.com/1606434/32411026-a1842482-c18d-11e7-9933-6510eefbad19.png\">\n\nFix #42112.", "tree": {"sha": "14d4693f6908a4f3f7ece6cf63c00cff4d540a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d4693f6908a4f3f7ece6cf63c00cff4d540a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "html_url": "https://github.com/rust-lang/rust/commit/560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f2674ea47f4f3cf5d90d0428bf8b8025d7f8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f2674ea47f4f3cf5d90d0428bf8b8025d7f8d8", "html_url": "https://github.com/rust-lang/rust/commit/b8f2674ea47f4f3cf5d90d0428bf8b8025d7f8d8"}, {"sha": "08287c1e26c6faa18c145a8a794fdd25408217a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08287c1e26c6faa18c145a8a794fdd25408217a4", "html_url": "https://github.com/rust-lang/rust/commit/08287c1e26c6faa18c145a8a794fdd25408217a4"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "b526819e3ce70f5bc00943634e7528f7d751da1f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -904,10 +904,13 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n-            Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), false))\n+            Box::new(EmitterWriter::stderr(color_config,\n+                                           Some(codemap.clone()),\n+                                           false,\n+                                           sopts.debugging_opts.teach))\n         }\n         (config::ErrorOutputType::HumanReadable(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false))\n+            Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false, false))\n         }\n         (config::ErrorOutputType::Json(pretty), None) => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(), pretty))\n@@ -916,10 +919,10 @@ pub fn build_session_with_codemap(sopts: config::Options,\n             Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(), pretty))\n         }\n         (config::ErrorOutputType::Short(color_config), None) => {\n-            Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true))\n+            Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false))\n         }\n         (config::ErrorOutputType::Short(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(dst, Some(codemap.clone()), true))\n+            Box::new(EmitterWriter::new(dst, Some(codemap.clone()), true, false))\n         }\n     };\n \n@@ -1095,11 +1098,11 @@ pub enum IncrCompSession {\n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, false))\n+            Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n         config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n         config::ErrorOutputType::Short(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, true))\n+            Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n     let handler = errors::Handler::with_emitter(true, false, emitter);\n@@ -1110,11 +1113,11 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, false))\n+            Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n         config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n         config::ErrorOutputType::Short(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, true))\n+            Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n     let handler = errors::Handler::with_emitter(true, false, emitter);"}, {"sha": "ada96aaf85cd330d87e17f977cf85188d2056273", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -167,7 +167,8 @@ pub fn run<F>(run_compiler: F) -> isize\n                     let emitter =\n                         errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                None,\n-                                                               true);\n+                                                               true,\n+                                                               false);\n                     let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n                     handler.emit(&MultiSpan::new(),\n                                  \"aborting due to previous error(s)\",\n@@ -1434,6 +1435,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n             let emitter =\n                 Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                 None,\n+                                                                false,\n                                                                 false));\n             let handler = errors::Handler::with_emitter(true, false, emitter);\n "}, {"sha": "a59f68a64421d7c4da48b34526aa63fd26d63f6e", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -106,6 +106,7 @@ pub struct EmitterWriter {\n     dst: Destination,\n     cm: Option<Rc<CodeMapper>>,\n     short_message: bool,\n+    teach: bool,\n }\n \n struct FileWithAnnotatedLines {\n@@ -117,32 +118,37 @@ struct FileWithAnnotatedLines {\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n                   code_map: Option<Rc<CodeMapper>>,\n-                  short_message: bool)\n+                  short_message: bool,\n+                  teach: bool)\n                   -> EmitterWriter {\n         if color_config.use_color() {\n             let dst = Destination::from_stderr();\n             EmitterWriter {\n                 dst,\n                 cm: code_map,\n-                short_message: short_message,\n+                short_message,\n+                teach,\n             }\n         } else {\n             EmitterWriter {\n                 dst: Raw(Box::new(io::stderr())),\n                 cm: code_map,\n-                short_message: short_message,\n+                short_message,\n+                teach,\n             }\n         }\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                code_map: Option<Rc<CodeMapper>>,\n-               short_message: bool)\n+               short_message: bool,\n+               teach: bool)\n                -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst),\n             cm: code_map,\n-            short_message: short_message,\n+            short_message,\n+            teach,\n         }\n     }\n \n@@ -551,7 +557,14 @@ impl EmitterWriter {\n                                code_offset + annotation.start_col,\n                                style);\n                 }\n-                _ => (),\n+                _ if self.teach => {\n+                    buffer.set_style_range(line_offset,\n+                                           code_offset + annotation.start_col,\n+                                           code_offset + annotation.end_col,\n+                                           style,\n+                                           annotation.is_primary);\n+                }\n+                _ => {}\n             }\n         }\n "}, {"sha": "47eb04621a126935fef64637f90f98a271a59899", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -297,7 +297,7 @@ impl Handler {\n                                       cm: Option<Rc<CodeMapper>>,\n                                       flags: HandlerFlags)\n                                       -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false));\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false));\n         Handler::with_emitter_and_flags(emitter, flags)\n     }\n "}, {"sha": "2c736ec22c3b3fd76b97e47dafe1848b3ebd6fac", "filename": "src/librustc_errors/styled_buffer.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_errors%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustc_errors%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fstyled_buffer.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -144,4 +144,25 @@ impl StyledBuffer {\n     pub fn num_lines(&self) -> usize {\n         self.text.len()\n     }\n+\n+    pub fn set_style_range(&mut self,\n+                           line: usize,\n+                           col_start: usize,\n+                           col_end: usize,\n+                           style: Style,\n+                           overwrite: bool) {\n+        for col in col_start..col_end {\n+            self.set_style(line, col, style, overwrite);\n+        }\n+    }\n+\n+    pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n+        if let Some(ref mut line) = self.styles.get_mut(line) {\n+            if let Some(s) = line.get_mut(col) {\n+                if *s == Style::NoStyle || *s == Style::Quotation || overwrite {\n+                    *s = style;\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "087d88419bc84dbef204b1dc5085b8a4242c9b5e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -238,6 +238,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     ));\n     let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                       Some(codemap.clone()),\n+                                                      false,\n                                                       false);\n     let old = io::set_panic(Some(box Sink(data.clone())));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));"}, {"sha": "7635ec26b289b347cec9f39ff140cf49fbcf2bb7", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -188,7 +188,7 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false).emit(db);\n+        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false, false).emit(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n "}, {"sha": "0fd069b76aadc6db18963786525c78f71ab94f06", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -1745,6 +1745,7 @@ mod tests {\n     fn mk_sess(cm: Rc<CodeMap>) -> ParseSess {\n         let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n                                                           Some(cm.clone()),\n+                                                          false,\n                                                           false);\n         ParseSess {\n             span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),"}, {"sha": "3b4bba24d779b6d0176fdc8c3e8f5b9461e83aa8", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560a2f4faf4828ba5f48fe2bd7709265c2f5354d/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "patch": "@@ -62,6 +62,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n \n     let emitter = EmitterWriter::new(Box::new(Shared { data: output.clone() }),\n                                      Some(code_map.clone()),\n+                                     false,\n                                      false);\n     let handler = Handler::with_emitter(true, false, Box::new(emitter));\n     handler.span_err(msp, \"foo\");"}]}