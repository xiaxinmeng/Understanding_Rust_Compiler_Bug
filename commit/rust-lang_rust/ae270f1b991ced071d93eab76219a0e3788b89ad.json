{"sha": "ae270f1b991ced071d93eab76219a0e3788b89ad", "node_id": "C_kwDOAAsO6NoAKGFlMjcwZjFiOTkxY2VkMDcxZDkzZWFiNzYyMTlhMGUzNzg4Yjg5YWQ", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-06T18:11:55Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-07T17:08:43Z"}, "message": "Update scrape-examples help, fix documentation typos", "tree": {"sha": "d689a93026df9080014925682e33f735d8789dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d689a93026df9080014925682e33f735d8789dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae270f1b991ced071d93eab76219a0e3788b89ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae270f1b991ced071d93eab76219a0e3788b89ad", "html_url": "https://github.com/rust-lang/rust/commit/ae270f1b991ced071d93eab76219a0e3788b89ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae270f1b991ced071d93eab76219a0e3788b89ad/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212d03dadca627e55273294404bcc6312aa65969", "url": "https://api.github.com/repos/rust-lang/rust/commits/212d03dadca627e55273294404bcc6312aa65969", "html_url": "https://github.com/rust-lang/rust/commit/212d03dadca627e55273294404bcc6312aa65969"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "36d15ec3b8640cde9642b080ffe1db218dc848a7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae270f1b991ced071d93eab76219a0e3788b89ad/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae270f1b991ced071d93eab76219a0e3788b89ad/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ae270f1b991ced071d93eab76219a0e3788b89ad", "patch": "@@ -2957,14 +2957,15 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n \n     // The call locations are output in sequence, so that sequence needs to be determined.\n     // Ideally the most \"relevant\" examples would be shown first, but there's no general algorithm\n-    // for determining relevance. We instead make a proxy for relevance with the following heuristics:\n+    // for determining relevance. We instead proxy relevance with the following heuristics:\n     //   1. Code written to be an example is better than code not written to be an example, e.g.\n-    //      a snippet from examples/foo.rs is better than src/lib.rs. We don't know the Cargo directory\n-    //      structure in Rustdoc, so we proxy this by prioriting code that comes from a --crate-type bin.\n-    //   2. Smaller examples are better than large examples. So we prioritize snippets that have the\n-    //      smallest line span for their enclosing item.\n-    //   3. Finally we sort by the displayed file name, which is arbitrary but prevents the ordering\n-    //      of examples from randomly changing between Rustdoc invocations.\n+    //      a snippet from examples/foo.rs is better than src/lib.rs. We don't know the Cargo\n+    //      directory structure in Rustdoc, so we proxy this by prioritizing code that comes from\n+    //      a --crate-type bin.\n+    //   2. Smaller examples are better than large examples. So we prioritize snippets that have\n+    //      the smallest number of lines in their enclosing item.\n+    //   3. Finally we sort by the displayed file name, which is arbitrary but prevents the\n+    //      ordering of examples from randomly changing between Rustdoc invocations.\n     let ordered_locations = {\n         fn sort_criterion<'a>(\n             (_, call_data): &(&PathBuf, &'a CallData),"}, {"sha": "002d19ec9b67dae6c0b3724e6b46aac4213f9766", "filename": "src/librustdoc/html/static/scrape-examples-help.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae270f1b991ced071d93eab76219a0e3788b89ad/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fscrape-examples-help.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae270f1b991ced071d93eab76219a0e3788b89ad/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fscrape-examples-help.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fscrape-examples-help.md?ref=ae270f1b991ced071d93eab76219a0e3788b89ad", "patch": "@@ -1,4 +1,4 @@\n-Rustdoc will automatically scrape examples of documented items from the `examples/` directory of a project. These examples will be included within the generated documentation for that item. For example, if your library contains a public function:\n+Rustdoc will automatically scrape examples of documented items from a project's source code. These examples will be included within the generated documentation for that item. For example, if your library contains a public function:\n \n ```rust\n // src/lib.rs\n@@ -16,6 +16,7 @@ fn main() {\n \n Then this code snippet will be included in the documentation for `a_func`.\n \n+\n ## How to read scraped examples\n \n Scraped examples are shown as blocks of code from a given file. The relevant item will be highlighted. If the file is larger than a couple lines, only a small window will be shown which you can expand by clicking &varr; in the top-right. If a file contains multiple instances of an item, you can use the &pr; and &sc; buttons to toggle through each instance.\n@@ -25,7 +26,7 @@ If there is more than one file that contains examples, then you should click \"Mo\n \n ## How Rustdoc scrapes examples\n \n-When you run `cargo doc`, Rustdoc will analyze all the crates that match Cargo's `--examples` filter for instances of items that occur in the crates being documented. Then Rustdoc will include the source code of these instances in the generated documentation.\n+When you run `cargo doc -Zunstable-options -Zrustdoc-scrape-examples`, Rustdoc will analyze all the documented crates for uses of documented items. Then Rustdoc will include the source code of these instances in the generated documentation.\n \n Rustdoc has a few techniques to ensure this doesn't overwhelm documentation readers, and that it doesn't blow up the page size:\n "}]}