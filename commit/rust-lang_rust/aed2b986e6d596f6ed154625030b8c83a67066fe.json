{"sha": "aed2b986e6d596f6ed154625030b8c83a67066fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDJiOTg2ZTZkNTk2ZjZlZDE1NDYyNTAzMGI4YzgzYTY3MDY2ZmU=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-05T13:39:09Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-05T13:39:09Z"}, "message": "Renamed to `implicit_return`.\nCovered all other kinds besides `ExprKind::Lit`.\nAdded check for replacing `break` with `return`.", "tree": {"sha": "de0cf3499dae2dabf3f36f0883cdd9897ddc96e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0cf3499dae2dabf3f36f0883cdd9897ddc96e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed2b986e6d596f6ed154625030b8c83a67066fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed2b986e6d596f6ed154625030b8c83a67066fe", "html_url": "https://github.com/rust-lang/rust/commit/aed2b986e6d596f6ed154625030b8c83a67066fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed2b986e6d596f6ed154625030b8c83a67066fe/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19db2f1a325d5030c05d6b3a64cab165c7e15d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/19db2f1a325d5030c05d6b3a64cab165c7e15d09", "html_url": "https://github.com/rust-lang/rust/commit/19db2f1a325d5030c05d6b3a64cab165c7e15d09"}], "stats": {"total": 275, "additions": 154, "deletions": 121}, "files": [{"sha": "e691ec9412f056ccd72a78a8d995ea1e6a54ccf5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed2b986e6d596f6ed154625030b8c83a67066fe/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/aed2b986e6d596f6ed154625030b8c83a67066fe/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=aed2b986e6d596f6ed154625030b8c83a67066fe", "patch": "@@ -706,6 +706,7 @@ All notable changes to this project will be documented in this file.\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n+[`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n@@ -756,7 +757,6 @@ All notable changes to this project will be documented in this file.\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n-[`missing_returns`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_returns\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`module_inception`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_inception"}, {"sha": "de783aabefee566b1b09334daabba0266a5f1b30", "filename": "clippy_lints/src/implicit_return.rs", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/aed2b986e6d596f6ed154625030b8c83a67066fe/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed2b986e6d596f6ed154625030b8c83a67066fe/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=aed2b986e6d596f6ed154625030b8c83a67066fe", "patch": "@@ -0,0 +1,131 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use crate::rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::{ast::NodeId, source_map::Span};\n+use crate::utils::{snippet_opt, span_lint_and_then};\n+\n+/// **What it does:** Checks for missing return statements at the end of a block.\n+///\n+/// **Why is this bad?** Actually omitting the return keyword is idiomatic Rust code. Programmers\n+/// coming from other languages might prefer the expressiveness of `return`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(x: usize) {\n+///     x\n+/// }\n+/// ```\n+/// add return\n+/// ```rust\n+/// fn foo(x: usize) {\n+///     return x;\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub IMPLICIT_RETURN,\n+    restriction,\n+    \"use a return statement like `return expr` instead of an expression\"\n+}\n+\n+pub struct Pass;\n+\n+impl Pass {\n+    fn expr_match(cx: &LateContext<'_, '_>, expr: &rustc::hir::Expr) {\n+        match &expr.node {\n+            ExprKind::Block(block, ..) => {\n+                if let Some(expr) = &block.expr {\n+                    Self::expr_match(cx, expr);\n+                }\n+                // only needed in the case of `break` with `;` at the end\n+                else if let Some(stmt) = block.stmts.last() {\n+                    if let rustc::hir::StmtKind::Semi(expr, ..) = &stmt.node {\n+                        Self::expr_match(cx, expr);\n+                    }\n+                }\n+            },\n+            // use `return` instead of `break`\n+            ExprKind::Break(.., break_expr) => {\n+                if let Some(break_expr) = break_expr {\n+                    span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n+                        if let Some(snippet) = snippet_opt(cx, break_expr.span) {\n+                            db.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"change `break` to `return` as shown\",\n+                                format!(\"return {}\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    });\n+                }\n+            },\n+            ExprKind::If(.., if_expr, else_expr) => {\n+                Self::expr_match(cx, if_expr);\n+\n+                if let Some(else_expr) = else_expr {\n+                    Self::expr_match(cx, else_expr);\n+                }\n+            },\n+            ExprKind::Match(_, arms, ..) => {\n+                for arm in arms {\n+                    Self::expr_match(cx, &arm.body);\n+                }\n+            },\n+            // loops could be using `break` instead of `return`\n+            ExprKind::Loop(block, ..) => {\n+                if let Some(expr) = &block.expr {\n+                    Self::expr_match(cx, expr);\n+                }\n+            },\n+            // skip if it already has a return statement\n+            ExprKind::Ret(..) => (),\n+            // everything else is missing `return`\n+            _ => span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n+                if let Some(snippet) = snippet_opt(cx, expr.span) {\n+                    db.span_suggestion_with_applicability(\n+                        expr.span,\n+                        \"add `return` as shown\",\n+                        format!(\"return {}\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }),\n+        }\n+    }\n+}\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IMPLICIT_RETURN)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        _: FnKind<'tcx>,\n+        _: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        _: Span,\n+        _: NodeId,\n+    ) {\n+        let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n+        let mir = cx.tcx.optimized_mir(def_id);\n+\n+        if !mir.return_ty().is_unit() {\n+            Self::expr_match(cx, &body.value);\n+        }\n+    }\n+}"}, {"sha": "ee41c632077c4869fdadee7b74df6cee1aa5a4ee", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aed2b986e6d596f6ed154625030b8c83a67066fe/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed2b986e6d596f6ed154625030b8c83a67066fe/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=aed2b986e6d596f6ed154625030b8c83a67066fe", "patch": "@@ -126,6 +126,7 @@ pub mod functions;\n pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_not_else;\n+pub mod implicit_return;\n pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n@@ -152,7 +153,6 @@ pub mod misc;\n pub mod misc_early;\n pub mod missing_doc;\n pub mod missing_inline;\n-pub mod missing_returns;\n pub mod multiple_crate_versions;\n pub mod mut_mut;\n pub mod mut_reference;\n@@ -372,7 +372,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box unicode::Unicode);\n     reg.register_late_lint_pass(box strings::StringAdd);\n     reg.register_early_lint_pass(box returns::ReturnPass);\n-    reg.register_late_lint_pass(box missing_returns::Pass);\n+    reg.register_late_lint_pass(box implicit_return::Pass);\n     reg.register_late_lint_pass(box methods::Pass);\n     reg.register_late_lint_pass(box map_clone::Pass);\n     reg.register_late_lint_pass(box shadow::Pass);\n@@ -487,6 +487,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        implicit_return::IMPLICIT_RETURN,\n         indexing_slicing::INDEXING_SLICING,\n         inherent_impl::MULTIPLE_INHERENT_IMPL,\n         literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n@@ -498,7 +499,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         misc::FLOAT_CMP_CONST,\n         missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n-        missing_returns::MISSING_RETURNS,\n         panic_unimplemented::UNIMPLEMENTED,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,"}, {"sha": "71dc71d563b3a64d5321755fb4f61c615a4b26a8", "filename": "clippy_lints/src/missing_returns.rs", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/19db2f1a325d5030c05d6b3a64cab165c7e15d09/clippy_lints%2Fsrc%2Fmissing_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19db2f1a325d5030c05d6b3a64cab165c7e15d09/clippy_lints%2Fsrc%2Fmissing_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_returns.rs?ref=19db2f1a325d5030c05d6b3a64cab165c7e15d09", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use crate::rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::{ast::NodeId, source_map::Span};\n-use crate::utils::{snippet_opt, span_lint_and_then};\n-\n-/// **What it does:** Checks for missing return statements at the end of a block.\n-///\n-/// **Why is this bad?** Actually omitting the return keyword is idiomatic Rust code. Programmers\n-/// coming from other languages might prefer the expressiveness of `return`.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// fn foo(x: usize) {\n-///     x\n-/// }\n-/// ```\n-/// add return\n-/// ```rust\n-/// fn foo(x: usize) {\n-///     return x;\n-/// }\n-/// ```\n-declare_clippy_lint! {\n-    pub MISSING_RETURNS,\n-    restriction,\n-    \"use a return statement like `return expr` instead of an expression\"\n-}\n-\n-pub struct Pass;\n-\n-impl Pass {\n-    fn show_suggestion(cx: &LateContext<'_, '_>, span: syntax_pos::Span) {\n-        span_lint_and_then(cx, MISSING_RETURNS, span, \"missing return statement\", |db| {\n-            if let Some(snippet) = snippet_opt(cx, span) {\n-                db.span_suggestion_with_applicability(\n-                    span,\n-                    \"add `return` as shown\",\n-                    format!(\"return {}\", snippet),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        });\n-    }\n-\n-    fn expr_match(cx: &LateContext<'_, '_>, kind: &ExprKind) {\n-        match kind {\n-            ExprKind::Block(ref block, ..) => {\n-                if let Some(ref expr) = block.expr {\n-                    Self::expr_match(cx, &expr.node);\n-                }\n-            },\n-            ExprKind::If(.., if_expr, else_expr) => {\n-                Self::expr_match(cx, &if_expr.node);\n-\n-                if let Some(else_expr) = else_expr {\n-                    Self::expr_match(cx, &else_expr.node);\n-                }\n-            },\n-            ExprKind::Match(_, arms, ..) => {\n-                for arm in arms {\n-                    Self::expr_match(cx, &arm.body.node);\n-                }\n-            },\n-            ExprKind::Lit(lit) => Self::show_suggestion(cx, lit.span),\n-            _ => (),\n-        }\n-    }\n-}\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MISSING_RETURNS)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_fn(\n-        &mut self,\n-        cx: &LateContext<'a, 'tcx>,\n-        _: FnKind<'tcx>,\n-        _: &'tcx FnDecl,\n-        body: &'tcx Body,\n-        _: Span,\n-        _: NodeId,\n-    ) {\n-        let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n-        let mir = cx.tcx.optimized_mir(def_id);\n-\n-        if !mir.return_ty().is_unit() {\n-            Self::expr_match(cx, &body.value.node);\n-        }\n-    }\n-}"}, {"sha": "73cf2908833cd71cbf2c7656b96a916239d527c6", "filename": "tests/ui/implicit_return.rs", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aed2b986e6d596f6ed154625030b8c83a67066fe/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed2b986e6d596f6ed154625030b8c83a67066fe/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=aed2b986e6d596f6ed154625030b8c83a67066fe", "patch": "@@ -11,7 +11,7 @@\n \n \n \n-#![warn(clippy::missing_returns)]\n+#![warn(clippy::implicit_return)]\n \n fn test_end_of_fn() -> bool {\n     if true {\n@@ -40,6 +40,13 @@ fn test_match(x: bool) -> bool {\n     }\n }\n \n+#[allow(clippy::never_loop)]\n+fn test_loop() -> bool {\n+    loop {\n+        break true;\n+    }\n+}\n+\n fn test_closure() {\n     let _ = || {\n         true\n@@ -51,5 +58,6 @@ fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_if_block();\n     let _ = test_match(true);\n+    let _ = test_loop();\n     test_closure();\n }", "previous_filename": "tests/ui/missing_returns.rs"}, {"sha": "bba8d942e27dfa6ed1ff66c9b3fd22da361d3024", "filename": "tests/ui/implicit_return.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aed2b986e6d596f6ed154625030b8c83a67066fe/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aed2b986e6d596f6ed154625030b8c83a67066fe/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=aed2b986e6d596f6ed154625030b8c83a67066fe", "patch": "@@ -1,45 +1,45 @@\n error: missing return statement\n-  --> $DIR/missing_returns.rs:21:5\n+  --> $DIR/implicit_return.rs:21:5\n    |\n 21 |     true\n    |     ^^^^ help: add `return` as shown: `return true`\n    |\n-   = note: `-D clippy::missing-returns` implied by `-D warnings`\n+   = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n error: missing return statement\n-  --> $DIR/missing_returns.rs:27:9\n+  --> $DIR/implicit_return.rs:27:9\n    |\n 27 |         true\n    |         ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/missing_returns.rs:29:9\n+  --> $DIR/implicit_return.rs:29:9\n    |\n 29 |         false\n    |         ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/missing_returns.rs:36:17\n+  --> $DIR/implicit_return.rs:36:17\n    |\n 36 |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/missing_returns.rs:38:13\n+  --> $DIR/implicit_return.rs:38:13\n    |\n 38 |             true\n    |             ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/missing_returns.rs:45:9\n+  --> $DIR/implicit_return.rs:52:9\n    |\n-45 |         true\n+52 |         true\n    |         ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/missing_returns.rs:47:16\n+  --> $DIR/implicit_return.rs:54:16\n    |\n-47 |     let _ = || true;\n+54 |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: aborting due to 7 previous errors", "previous_filename": "tests/ui/missing_returns.stderr"}]}