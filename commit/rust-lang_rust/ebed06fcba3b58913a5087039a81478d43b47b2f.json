{"sha": "ebed06fcba3b58913a5087039a81478d43b47b2f", "node_id": "C_kwDOAAsO6NoAKGViZWQwNmZjYmEzYjU4OTEzYTUwODcwMzlhODE0NzhkNDNiNDdiMmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-13T15:53:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-13T15:53:14Z"}, "message": "Auto merge of #94704 - Kobzol:llvm-pgo-update-suite, r=Mark-Simulacrum\n\nGather LLVM PGO profiles from `rustc-perf` suite on real-world crates\n\nThis PR expands the benchmark suite used to gather LLVM PGO profiles in CI from `libcore` to several real-world crates. I hand-picked a few crates, but the list is up for debate.\n\nPrevious results that we got from running `syn,cargo,serde` looked pretty [good](https://perf.rust-lang.org/compare.html?start=2631aeef823a9e16d31f999d3f07001e5fcc4b3d&end=abf097afa10dde1aa3d8a1d422724a46aab79bf3).\n\nRunning `libcore` + `rustc-perf` with some number of crates is repeated now (and for BOLT it will also be needed), so maybe we can extract it to a bash function?\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "70578c15e3d88ad334267de182cbe872c08b421f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70578c15e3d88ad334267de182cbe872c08b421f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebed06fcba3b58913a5087039a81478d43b47b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebed06fcba3b58913a5087039a81478d43b47b2f", "html_url": "https://github.com/rust-lang/rust/commit/ebed06fcba3b58913a5087039a81478d43b47b2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebed06fcba3b58913a5087039a81478d43b47b2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2763cc4cfa761a1d42cc01c7603ba6a98c09ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2763cc4cfa761a1d42cc01c7603ba6a98c09ecd", "html_url": "https://github.com/rust-lang/rust/commit/b2763cc4cfa761a1d42cc01c7603ba6a98c09ecd"}, {"sha": "e90e88306efc3fc1f94e0cbb9c16ec1589797c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90e88306efc3fc1f94e0cbb9c16ec1589797c40", "html_url": "https://github.com/rust-lang/rust/commit/e90e88306efc3fc1f94e0cbb9c16ec1589797c40"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "88a03c05d9fe26dced4b098f05f58c0a69fcd040", "filename": "src/ci/pgo.sh", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ebed06fcba3b58913a5087039a81478d43b47b2f/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ebed06fcba3b58913a5087039a81478d43b47b2f/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=ebed06fcba3b58913a5087039a81478d43b47b2f", "patch": "@@ -2,6 +2,40 @@\n \n set -euxo pipefail\n \n+# Compile several crates to gather execution PGO profiles.\n+# Arg0 => builds (Debug, Opt)\n+# Arg1 => runs (Full, IncrFull, All)\n+# Arg2 => crates (syn, cargo, ...)\n+gather_profiles () {\n+  cd /checkout/obj\n+\n+  # Compile libcore, both in opt-level=0 and opt-level=3\n+  RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n+      --edition=2021 --crate-type=lib ../library/core/src/lib.rs\n+  RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n+      --edition=2021 --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n+\n+  cd rustc-perf\n+\n+  # Run rustc-perf benchmarks\n+  # Benchmark using profile_local with eprintln, which essentially just means\n+  # don't actually benchmark -- just make sure we run rustc a bunch of times.\n+  RUST_LOG=collector=debug \\\n+  RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n+  RUSTC_BOOTSTRAP=1 \\\n+  /checkout/obj/build/$PGO_HOST/stage0/bin/cargo run -p collector --bin collector -- \\\n+          profile_local \\\n+          eprintln \\\n+          /checkout/obj/build/$PGO_HOST/stage2/bin/rustc \\\n+          Test \\\n+          --builds $1 \\\n+          --cargo /checkout/obj/build/$PGO_HOST/stage0/bin/cargo \\\n+          --runs $2 \\\n+          --include $3\n+\n+  cd /checkout/obj\n+}\n+\n rm -rf /tmp/rustc-pgo\n \n # We collect LLVM profiling information and rustc profiling information in\n@@ -19,6 +53,19 @@ RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n     --edition=2021 --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n \n+# Compile rustc perf\n+cp -r /tmp/rustc-perf ./\n+chown -R $(whoami): ./rustc-perf\n+cd rustc-perf\n+\n+# Build the collector ahead of time, which is needed to make sure the rustc-fake\n+# binary used by the collector is present.\n+RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n+RUSTC_BOOTSTRAP=1 \\\n+/checkout/obj/build/$PGO_HOST/stage0/bin/cargo build -p collector\n+\n+gather_profiles \"Debug,Opt\" \"Full\" \"syn,cargo,serde,ripgrep,regex,clap-rs,hyper-2\"\n+\n # Merge the profile data we gathered for LLVM\n # Note that this uses the profdata from the clang we used to build LLVM,\n # which likely has a different version than our in-tree clang.\n@@ -36,38 +83,8 @@ python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n     --stage 2 library/std \\\n     --rust-profile-generate=/tmp/rustc-pgo\n \n-# Profile libcore compilation in opt-level=0 and opt-level=3\n-RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n-    --edition=2021 --crate-type=lib ../library/core/src/lib.rs\n-RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc \\\n-    --edition=2021 --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n-\n-cp -r /tmp/rustc-perf ./\n-chown -R $(whoami): ./rustc-perf\n-cd rustc-perf\n-\n-# Build the collector ahead of time, which is needed to make sure the rustc-fake\n-# binary used by the collector is present.\n-RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n-RUSTC_BOOTSTRAP=1 \\\n-/checkout/obj/build/$PGO_HOST/stage0/bin/cargo build -p collector\n-\n-# benchmark using profile_local with eprintln, which essentially just means\n-# don't actually benchmark -- just make sure we run rustc a bunch of times.\n-RUST_LOG=collector=debug \\\n-RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n-RUSTC_BOOTSTRAP=1 \\\n-/checkout/obj/build/$PGO_HOST/stage0/bin/cargo run -p collector --bin collector -- \\\n-        profile_local \\\n-        eprintln \\\n-        /checkout/obj/build/$PGO_HOST/stage2/bin/rustc \\\n-        Test \\\n-        --builds Check,Debug,Opt \\\n-        --cargo /checkout/obj/build/$PGO_HOST/stage0/bin/cargo \\\n-        --runs All \\\n-        --include externs,ctfe-stress-4,inflate,cargo,token-stream-stress,match-stress-enum\n-\n-cd /checkout/obj\n+gather_profiles \"Check,Debug,Opt\" \"All\" \\\n+  \"externs,ctfe-stress-4,inflate,cargo,token-stream-stress,match-stress-enum\"\n \n # Merge the profile data we gathered\n ./build/$PGO_HOST/llvm/bin/llvm-profdata \\"}]}