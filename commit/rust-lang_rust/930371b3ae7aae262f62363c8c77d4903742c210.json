{"sha": "930371b3ae7aae262f62363c8c77d4903742c210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDM3MWIzYWU3YWFlMjYyZjYyMzYzYzhjNzdkNDkwMzc0MmMyMTA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T17:59:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T17:59:57Z"}, "message": "Rollup merge of #80169 - frewsxcv:frewsxcv-docs-fix, r=jyn514\n\nRecommend panic::resume_unwind instead of panicking.\n\nFixes https://github.com/rust-lang/rust/issues/79950.", "tree": {"sha": "d692abae57d731f58a277486c10e6aae7af4ce11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d692abae57d731f58a277486c10e6aae7af4ce11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/930371b3ae7aae262f62363c8c77d4903742c210", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIaeCRBK7hj4Ov3rIwAAdHIIAHsy2VwkYT6an+LaUgr+qRaX\n+bhuBZXFUcybueB0MaRhZtTkNk+fnGzHq5/LzseXQAc0I0wMgcFenLsFgn7mTOTp\nuFFNUMTtYg0NtfaciY8Maln2ig/bCgewmnKt8URbZu6d6DZuYObzz6jiqM/sZNtW\nDjieAV3pmLUfciUhdu174p7avEsxI+0XpkvV8J5+J4vLf4qekLUkZxp9and2HbG8\nZvey/vD/XEDUV7vV/AQrhLgam7e/mCf/wu8iaTWcFTeFewbX8TVfehhgck6rdJbS\nI5B3cgLa4+svQdAdczSnSbyvJFg4UfoxoAMHGCYsg6AJtZUJ678tmIgSTJ4FDfE=\n=cZjL\n-----END PGP SIGNATURE-----\n", "payload": "tree d692abae57d731f58a277486c10e6aae7af4ce11\nparent d3b31065e36df802e63be282f0b5148cc8b1a68a\nparent 3ea744e2ac975456d14805100755d2e39a565e46\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647197 +0000\ncommitter GitHub <noreply@github.com> 1610647197 +0000\n\nRollup merge of #80169 - frewsxcv:frewsxcv-docs-fix, r=jyn514\n\nRecommend panic::resume_unwind instead of panicking.\n\nFixes https://github.com/rust-lang/rust/issues/79950.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/930371b3ae7aae262f62363c8c77d4903742c210", "html_url": "https://github.com/rust-lang/rust/commit/930371b3ae7aae262f62363c8c77d4903742c210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/930371b3ae7aae262f62363c8c77d4903742c210/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b31065e36df802e63be282f0b5148cc8b1a68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b31065e36df802e63be282f0b5148cc8b1a68a", "html_url": "https://github.com/rust-lang/rust/commit/d3b31065e36df802e63be282f0b5148cc8b1a68a"}, {"sha": "3ea744e2ac975456d14805100755d2e39a565e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea744e2ac975456d14805100755d2e39a565e46", "html_url": "https://github.com/rust-lang/rust/commit/3ea744e2ac975456d14805100755d2e39a565e46"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "0d004a516f5944207bf7f38aaee9681ca0c3e929", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/930371b3ae7aae262f62363c8c77d4903742c210/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930371b3ae7aae262f62363c8c77d4903742c210/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=930371b3ae7aae262f62363c8c77d4903742c210", "patch": "@@ -1186,32 +1186,37 @@ impl fmt::Debug for Thread {\n /// the [`Error`](crate::error::Error) trait.\n ///\n /// Thus, a sensible way to handle a thread panic is to either:\n-/// 1. `unwrap` the `Result<T>`, propagating the panic\n+///\n+/// 1. propagate the panic with [`std::panic::resume_unwind`]\n /// 2. or in case the thread is intended to be a subsystem boundary\n /// that is supposed to isolate system-level failures,\n-/// match on the `Err` variant and handle the panic in an appropriate way.\n+/// match on the `Err` variant and handle the panic in an appropriate way\n ///\n /// A thread that completes without panicking is considered to exit successfully.\n ///\n /// # Examples\n ///\n+/// Matching on the result of a joined thread:\n+///\n /// ```no_run\n-/// use std::thread;\n-/// use std::fs;\n+/// use std::{fs, thread, panic};\n ///\n /// fn copy_in_thread() -> thread::Result<()> {\n-///     thread::spawn(move || { fs::copy(\"foo.txt\", \"bar.txt\").unwrap(); }).join()\n+///     thread::spawn(|| {\n+///         fs::copy(\"foo.txt\", \"bar.txt\").unwrap();\n+///     }).join()\n /// }\n ///\n /// fn main() {\n ///     match copy_in_thread() {\n-///         Ok(_) => println!(\"this is fine\"),\n-///         Err(_) => println!(\"thread panicked\"),\n+///         Ok(_) => println!(\"copy succeeded\"),\n+///         Err(e) => panic::resume_unwind(e),\n ///     }\n /// }\n /// ```\n ///\n /// [`Result`]: crate::result::Result\n+/// [`std::panic::resume_unwind`]: crate::panic::resume_unwind\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n "}]}