{"sha": "430f738392dae75954bfa0059025dd18dadeff7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMGY3MzgzOTJkYWU3NTk1NGJmYTAwNTkwMjVkZDE4ZGFkZWZmN2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-14T17:23:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-14T17:23:29Z"}, "message": "Update Cranelift for basic blocks", "tree": {"sha": "d2ab1d816b329b7186bcb58cc14056f8faf73dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ab1d816b329b7186bcb58cc14056f8faf73dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430f738392dae75954bfa0059025dd18dadeff7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430f738392dae75954bfa0059025dd18dadeff7d", "html_url": "https://github.com/rust-lang/rust/commit/430f738392dae75954bfa0059025dd18dadeff7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430f738392dae75954bfa0059025dd18dadeff7d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b2ffab6ae4026f8d9a8b552e075fdc81002ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b2ffab6ae4026f8d9a8b552e075fdc81002ec7", "html_url": "https://github.com/rust-lang/rust/commit/b5b2ffab6ae4026f8d9a8b552e075fdc81002ec7"}], "stats": {"total": 308, "additions": 154, "deletions": 154}, "files": [{"sha": "efe7f3792d34ebec43c846af4e1d1cded834132c", "filename": "Cargo.lock", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -32,22 +32,22 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-entity 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-entity 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cranelift-bforest 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-codegen-meta 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-codegen-shared 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-entity 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-bforest 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen-meta 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen-shared 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-entity 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"gimli 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -57,74 +57,74 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-codegen-shared 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-entity 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen-shared 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-entity 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-entity 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-entity 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thiserror 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"raw-cpuid 7.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-module 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-module 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"object 0.17.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-simplejit\"\n-version = \"0.56.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#c73c3e8441efcb6324f18a22679e43e4bbd174cc\"\n+version = \"0.58.0\"\n+source = \"git+https://github.com/bytecodealliance/cranelift/#280fd1e13b5cdad9d9d308b78bb94b0476f2d9f0\"\n dependencies = [\n- \"cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-module 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-native 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-module 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-native 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"region 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -282,11 +282,11 @@ version = \"0.1.0\"\n dependencies = [\n  \"ar 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-frontend 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-module 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-object 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-simplejit 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-frontend 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-module 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-object 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-simplejit 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"gimli 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indexmap 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libloading 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -407,16 +407,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \"checksum cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n \"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum cranelift-bforest 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-codegen 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-codegen-meta 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-codegen-shared 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-entity 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-frontend 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-module 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-native 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-object 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n-\"checksum cranelift-simplejit 0.56.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-bforest 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-codegen 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-codegen-meta 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-codegen-shared 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-entity 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-frontend 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-module 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-native 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-object 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n+\"checksum cranelift-simplejit 0.58.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n \"checksum errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2a071601ed01b988f896ab14b95e67335d1eeb50190932a1320f7fe3cadc84e\"\n \"checksum errno-dragonfly 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14ca354e36190500e1e1fb267c647932382b54053c50b14970856c0b00a35067\""}, {"sha": "568165bc61d85ead27cf327196466bb978721cd1", "filename": "src/abi/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -288,13 +288,13 @@ fn local_place<'tcx>(\n     fx.local_map[&local]\n }\n \n-pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb: Ebb) {\n+pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_block: Block) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n \n     #[cfg(debug_assertions)]\n     self::comments::add_args_header_comment(fx);\n \n-    self::returning::codegen_return_param(fx, &ssa_analyzed, start_ebb);\n+    self::returning::codegen_return_param(fx, &ssa_analyzed, start_block);\n \n     // None means pass_mode == NoPass\n     enum ArgKind<'tcx> {\n@@ -322,13 +322,13 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n \n                 let mut params = Vec::new();\n                 for (i, arg_ty) in tupled_arg_tys.types().enumerate() {\n-                    let param = cvalue_for_param(fx, start_ebb, Some(local), Some(i), arg_ty);\n+                    let param = cvalue_for_param(fx, start_block, Some(local), Some(i), arg_ty);\n                     params.push(param);\n                 }\n \n                 (local, ArgKind::Spread(params), arg_ty)\n             } else {\n-                let param = cvalue_for_param(fx, start_ebb, Some(local), None, arg_ty);\n+                let param = cvalue_for_param(fx, start_block, Some(local), None, arg_ty);\n                 (local, ArgKind::Normal(param), arg_ty)\n             }\n         })\n@@ -337,10 +337,10 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n     assert!(fx.caller_location.is_none());\n     if fx.instance.def.requires_caller_location(fx.tcx) {\n         // Store caller location for `#[track_caller]`.\n-        fx.caller_location = Some(cvalue_for_param(fx, start_ebb, None, None, fx.tcx.caller_location_ty()).unwrap());\n+        fx.caller_location = Some(cvalue_for_param(fx, start_block, None, None, fx.tcx.caller_location_ty()).unwrap());\n     }\n \n-    fx.bcx.switch_to_block(start_ebb);\n+    fx.bcx.switch_to_block(start_block);\n     fx.bcx.ins().nop();\n \n     #[cfg(debug_assertions)]\n@@ -416,7 +416,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n \n     fx.bcx\n         .ins()\n-        .jump(*fx.ebb_map.get(START_BLOCK).unwrap(), &[]);\n+        .jump(*fx.block_map.get(START_BLOCK).unwrap(), &[]);\n }\n \n pub fn codegen_terminator_call<'tcx>(\n@@ -458,8 +458,8 @@ pub fn codegen_terminator_call<'tcx>(\n             InstanceDef::DropGlue(_, None) => {\n                 // empty drop glue - a nop.\n                 let (_, dest) = destination.expect(\"Non terminating drop_in_place_real???\");\n-                let ret_ebb = fx.get_ebb(dest);\n-                fx.bcx.ins().jump(ret_ebb, &[]);\n+                let ret_block = fx.get_block(dest);\n+                fx.bcx.ins().jump(ret_block, &[]);\n                 return;\n             }\n             _ => {}\n@@ -498,8 +498,8 @@ pub fn codegen_terminator_call<'tcx>(\n     );\n \n     if let Some((_, dest)) = destination {\n-        let ret_ebb = fx.get_ebb(dest);\n-        fx.bcx.ins().jump(ret_ebb, &[]);\n+        let ret_block = fx.get_block(dest);\n+        fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n         trap_unreachable(fx, \"[corruption] Diverging function returned\");\n     }\n@@ -513,7 +513,7 @@ fn codegen_call_inner<'tcx>(\n     args: Vec<CValue<'tcx>>,\n     ret_place: Option<CPlace<'tcx>>,\n ) {\n-    // FIXME mark the current ebb as cold when calling a `#[cold]` function.\n+    // FIXME mark the current block as cold when calling a `#[cold]` function.\n     let fn_sig = fx\n         .tcx\n         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));"}, {"sha": "3c19787ef9252840441ea38273a5710f5b80baa8", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -129,7 +129,7 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n \n pub(super) fn cvalue_for_param<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    start_ebb: Ebb,\n+    start_block: Block,\n     local: Option<mir::Local>,\n     local_field: Option<usize>,\n     arg_ty: Ty<'tcx>,\n@@ -142,29 +142,29 @@ pub(super) fn cvalue_for_param<'tcx>(\n     }\n \n     let clif_types = pass_mode.get_param_ty(fx.tcx);\n-    let ebb_params = clif_types.map(|t| fx.bcx.append_ebb_param(start_ebb, t));\n+    let block_params = clif_types.map(|t| fx.bcx.append_block_param(start_block, t));\n \n     #[cfg(debug_assertions)]\n     crate::abi::comments::add_arg_comment(\n         fx,\n         \"arg\",\n         local,\n         local_field,\n-        ebb_params,\n+        block_params,\n         pass_mode,\n         arg_ty,\n     );\n \n     match pass_mode {\n         PassMode::NoPass => unreachable!(),\n-        PassMode::ByVal(_) => Some(CValue::by_val(ebb_params.assert_single(), layout)),\n+        PassMode::ByVal(_) => Some(CValue::by_val(block_params.assert_single(), layout)),\n         PassMode::ByValPair(_, _) => {\n-            let (a, b) = ebb_params.assert_pair();\n+            let (a, b) = block_params.assert_pair();\n             Some(CValue::by_val_pair(a, b, layout))\n         }\n-        PassMode::ByRef { sized: true } => Some(CValue::by_ref(Pointer::new(ebb_params.assert_single()), layout)),\n+        PassMode::ByRef { sized: true } => Some(CValue::by_ref(Pointer::new(block_params.assert_single()), layout)),\n         PassMode::ByRef { sized: false } => {\n-            let (ptr, meta) = ebb_params.assert_pair();\n+            let (ptr, meta) = block_params.assert_pair();\n             Some(CValue::by_ref_unsized(Pointer::new(ptr), meta, layout))\n         }\n     }"}, {"sha": "b4dd04002cf8fad5d61aeae4c3764b5c3af8e794", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -16,7 +16,7 @@ pub fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyLayout<'tcx\n pub(super) fn codegen_return_param(\n     fx: &mut FunctionCx<impl Backend>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n-    start_ebb: Ebb,\n+    start_block: Block,\n ) {\n     let ret_layout = return_layout(fx);\n     let ret_pass_mode = get_pass_mode(fx.tcx, ret_layout);\n@@ -34,7 +34,7 @@ pub(super) fn codegen_return_param(\n             Empty\n         }\n         PassMode::ByRef { sized: true } => {\n-            let ret_param = fx.bcx.append_ebb_param(start_ebb, fx.pointer_type);\n+            let ret_param = fx.bcx.append_block_param(start_block, fx.pointer_type);\n             fx.local_map\n                 .insert(RETURN_PLACE, CPlace::for_ptr(Pointer::new(ret_param), ret_layout));\n "}, {"sha": "8405096f32b4274c650eb5bc0da48d349c3619fa", "filename": "src/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -78,11 +78,11 @@ fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKin\n             let mut func_ctx = FunctionBuilderContext::new();\n             let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n \n-            let ebb = bcx.create_ebb();\n-            bcx.switch_to_block(ebb);\n+            let block = bcx.create_block();\n+            bcx.switch_to_block(block);\n             let args = arg_tys\n                 .into_iter()\n-                .map(|ty| bcx.append_ebb_param(ebb, ty))\n+                .map(|ty| bcx.append_block_param(block, ty))\n                 .collect::<Vec<Value>>();\n \n             let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);"}, {"sha": "644a66bb31a9923c4bec199283b310e4dc29fa05", "filename": "src/base.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -29,9 +29,9 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx = FunctionBuilder::new(&mut context.func, &mut func_ctx);\n \n-    // Predefine ebb's\n-    let start_ebb = bcx.create_ebb();\n-    let ebb_map: IndexVec<BasicBlock, Ebb> = (0..mir.basic_blocks().len()).map(|_| bcx.create_ebb()).collect();\n+    // Predefine block's\n+    let start_block = bcx.create_block();\n+    let block_map: IndexVec<BasicBlock, Block> = (0..mir.basic_blocks().len()).map(|_| bcx.create_block()).collect();\n \n     // Make FunctionCx\n     let pointer_type = cx.module.target_config().pointer_type();\n@@ -46,10 +46,10 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         mir,\n \n         bcx,\n-        ebb_map,\n+        block_map,\n         local_map: HashMap::new(),\n         caller_location: None, // set by `codegen_fn_prelude`\n-        cold_ebbs: EntitySet::new(),\n+        cold_blocks: EntitySet::new(),\n \n         clif_comments,\n         constants_cx: &mut cx.constants_cx,\n@@ -58,13 +58,13 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     };\n \n     if fx.mir.args_iter().any(|arg| fx.layout_of(fx.monomorphize(&fx.mir.local_decls[arg].ty)).abi.is_uninhabited()) {\n-        let entry_block = fx.bcx.create_ebb();\n-        fx.bcx.append_ebb_params_for_function_params(entry_block);\n+        let entry_block = fx.bcx.create_block();\n+        fx.bcx.append_block_params_for_function_params(entry_block);\n         fx.bcx.switch_to_block(entry_block);\n         crate::trap::trap_unreachable(&mut fx, \"function has uninhabited argument\");\n     } else {\n         tcx.sess.time(\"codegen clif ir\", || {\n-            tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(&mut fx, start_ebb));\n+            tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(&mut fx, start_block));\n             codegen_fn_content(&mut fx);\n         });\n     }\n@@ -74,7 +74,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut clif_comments = fx.clif_comments;\n     let source_info_set = fx.source_info_set;\n     let local_map = fx.local_map;\n-    let cold_ebbs = fx.cold_ebbs;\n+    let cold_blocks = fx.cold_blocks;\n \n     #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(cx.tcx, \"unopt\", instance, &context.func, &clif_comments, None);\n@@ -84,7 +84,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     // Perform rust specific optimizations\n     tcx.sess.time(\"optimize clif ir\", || {\n-        crate::optimize::optimize_function(tcx, instance, context, &cold_ebbs, &mut clif_comments);\n+        crate::optimize::optimize_function(tcx, instance, context, &cold_blocks, &mut clif_comments);\n     });\n \n     // Define function\n@@ -142,22 +142,22 @@ pub fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func\n \n fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n-        let ebb = fx.get_ebb(bb);\n-        fx.bcx.switch_to_block(ebb);\n+        let block = fx.get_block(bb);\n+        fx.bcx.switch_to_block(block);\n \n         if bb_data.is_cleanup {\n             // Unwinding after panicking is not supported\n             continue;\n \n             // FIXME once unwinding is supported uncomment next lines\n-            // // Unwinding is unlikely to happen, so mark cleanup ebb's as cold.\n-            // fx.cold_ebbs.insert(ebb);\n+            // // Unwinding is unlikely to happen, so mark cleanup block's as cold.\n+            // fx.cold_blocks.insert(block);\n         }\n \n         fx.bcx.ins().nop();\n         for stmt in &bb_data.statements {\n             fx.set_debug_loc(stmt.source_info);\n-            trans_stmt(fx, ebb, stmt);\n+            trans_stmt(fx, block, stmt);\n         }\n \n         #[cfg(debug_assertions)]\n@@ -168,16 +168,16 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 .kind\n                 .fmt_head(&mut terminator_head)\n                 .unwrap();\n-            let inst = fx.bcx.func.layout.last_inst(ebb).unwrap();\n+            let inst = fx.bcx.func.layout.last_inst(block).unwrap();\n             fx.add_comment(inst, terminator_head);\n         }\n \n         fx.set_debug_loc(bb_data.terminator().source_info);\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n-                let ebb = fx.get_ebb(*target);\n-                fx.bcx.ins().jump(ebb, &[]);\n+                let block = fx.get_block(*target);\n+                fx.bcx.ins().jump(block, &[]);\n             }\n             TerminatorKind::Return => {\n                 crate::abi::codegen_return(fx);\n@@ -191,16 +191,16 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n             } => {\n                 if !fx.tcx.sess.overflow_checks() {\n                     if let mir::AssertKind::OverflowNeg = *msg {\n-                        let target = fx.get_ebb(*target);\n+                        let target = fx.get_block(*target);\n                         fx.bcx.ins().jump(target, &[]);\n                         continue;\n                     }\n                 }\n                 let cond = trans_operand(fx, cond).load_scalar(fx);\n \n-                let target = fx.get_ebb(*target);\n-                let failure = fx.bcx.create_ebb();\n-                fx.cold_ebbs.insert(failure);\n+                let target = fx.get_block(*target);\n+                let failure = fx.bcx.create_block();\n+                fx.cold_blocks.insert(failure);\n \n                 if *expected {\n                     fx.bcx.ins().brz(cond, failure, &[]);\n@@ -229,11 +229,11 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 let discr = trans_operand(fx, discr).load_scalar(fx);\n                 let mut switch = ::cranelift_frontend::Switch::new();\n                 for (i, value) in values.iter().enumerate() {\n-                    let ebb = fx.get_ebb(targets[i]);\n-                    switch.set_entry(*value as u64, ebb);\n+                    let block = fx.get_block(targets[i]);\n+                    switch.set_entry(*value as u64, block);\n                 }\n-                let otherwise_ebb = fx.get_ebb(targets[targets.len() - 1]);\n-                switch.emit(&mut fx.bcx, discr, otherwise_ebb);\n+                let otherwise_block = fx.get_block(targets[targets.len() - 1]);\n+                switch.emit(&mut fx.bcx, discr, otherwise_block);\n             }\n             TerminatorKind::Call {\n                 func,\n@@ -271,8 +271,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 let drop_place = trans_place(fx, location);\n                 crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n \n-                let target_ebb = fx.get_ebb(*target);\n-                fx.bcx.ins().jump(target_ebb, &[]);\n+                let target_block = fx.get_block(*target);\n+                fx.bcx.ins().jump(target_block, &[]);\n             }\n         };\n     }\n@@ -283,7 +283,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n \n fn trans_stmt<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    cur_ebb: Ebb,\n+    cur_block: Block,\n     stmt: &Statement<'tcx>,\n ) {\n     let _print_guard = PrintOnPanic(|| format!(\"stmt {:?}\", stmt));\n@@ -294,7 +294,7 @@ fn trans_stmt<'tcx>(\n     match &stmt.kind {\n         StatementKind::StorageLive(..) | StatementKind::StorageDead(..) => {} // Those are not very useful\n         _ => {\n-            let inst = fx.bcx.func.layout.last_inst(cur_ebb).unwrap();\n+            let inst = fx.bcx.func.layout.last_inst(cur_block).unwrap();\n             fx.add_comment(inst, format!(\"{:?}\", stmt));\n         }\n     }"}, {"sha": "374ad0acee53eeab1ea897301993d047127b05c3", "filename": "src/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -264,14 +264,14 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub mir: &'tcx Body<'tcx>,\n \n     pub bcx: FunctionBuilder<'clif>,\n-    pub ebb_map: IndexVec<BasicBlock, Ebb>,\n+    pub block_map: IndexVec<BasicBlock, Block>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n \n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n     pub caller_location: Option<CValue<'tcx>>,\n \n     /// See [crate::optimize::code_layout] for more information.\n-    pub cold_ebbs: EntitySet<Ebb>,\n+    pub cold_blocks: EntitySet<Block>,\n \n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants_cx: &'clif mut crate::constant::ConstantCx,\n@@ -325,7 +325,7 @@ impl<'tcx, B: Backend + 'static> HasTargetSpec for FunctionCx<'_, 'tcx, B> {\n impl<'tcx, B: Backend> BackendTypes for FunctionCx<'_, 'tcx, B> {\n     type Value = Value;\n     type Function = Value;\n-    type BasicBlock = Ebb;\n+    type BasicBlock = Block;\n     type Type = Type;\n     type Funclet = !;\n     type DIScope = !;\n@@ -348,8 +348,8 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         clif_type_from_ty(self.tcx, ty)\n     }\n \n-    pub fn get_ebb(&self, bb: BasicBlock) -> Ebb {\n-        *self.ebb_map.get(bb).unwrap()\n+    pub fn get_block(&self, bb: BasicBlock) -> Block {\n+        *self.block_map.get(bb).unwrap()\n     }\n \n     pub fn get_local_place(&mut self, local: Local) -> CPlace<'tcx> {"}, {"sha": "7a3ac0991c41242de08fb0ef9159688a3da14036", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -118,8 +118,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n         let encinfo = isa.encoding_info();\n         let func = &context.func;\n-        let mut ebbs = func.layout.ebbs().collect::<Vec<_>>();\n-        ebbs.sort_by_key(|ebb| func.offsets[*ebb]); // Ensure inst offsets always increase\n+        let mut blocks = func.layout.blocks().collect::<Vec<_>>();\n+        blocks.sort_by_key(|block| func.offsets[*block]); // Ensure inst offsets always increase\n \n         let line_strings = &mut self.debug_context.dwarf.line_strings;\n         let mut last_file = None;\n@@ -147,8 +147,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         };\n \n         let mut end = 0;\n-        for ebb in ebbs {\n-            for (offset, inst, size) in func.inst_offsets(ebb, &encinfo) {\n+        for block in blocks {\n+            for (offset, inst, size) in func.inst_offsets(block, &encinfo) {\n                 let srcloc = func.srclocs[inst];\n                 line_program.row().address_offset = offset as u64;\n                 if !srcloc.is_default() {"}, {"sha": "b30f3b8f8dbd48d50844ebcd04a952833e7acd04", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -97,8 +97,8 @@ pub fn codegen_llvm_intrinsic_call<'tcx>(\n     }\n \n     if let Some((_, dest)) = destination {\n-        let ret_ebb = fx.get_ebb(dest);\n-        fx.bcx.ins().jump(ret_ebb, &[]);\n+        let ret_block = fx.get_block(dest);\n+        fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n         trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n     }"}, {"sha": "d23d28dccd2bf17ab4aa93c2fe1b3061ac542a53", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -87,8 +87,8 @@ macro call_intrinsic_match {\n                         $ret.write_cvalue($fx, res);\n \n                         if let Some((_, dest)) = $destination {\n-                            let ret_ebb = $fx.get_ebb(dest);\n-                            $fx.bcx.ins().jump(ret_ebb, &[]);\n+                            let ret_block = $fx.get_block(dest);\n+                            $fx.bcx.ins().jump(ret_block, &[]);\n                             return;\n                         } else {\n                             unreachable!();\n@@ -369,8 +369,8 @@ pub fn codegen_intrinsic_call<'tcx>(\n \n     if intrinsic.starts_with(\"simd_\") {\n         self::simd::codegen_simd_intrinsic_call(fx, instance, args, ret, span);\n-        let ret_ebb = fx.get_ebb(destination.expect(\"SIMD intrinsics don't diverge\").1);\n-        fx.bcx.ins().jump(ret_ebb, &[]);\n+        let ret_block = fx.get_block(destination.expect(\"SIMD intrinsics don't diverge\").1);\n+        fx.bcx.ins().jump(ret_block, &[]);\n         return;\n     }\n \n@@ -992,8 +992,8 @@ pub fn codegen_intrinsic_call<'tcx>(\n     }\n \n     if let Some((_, dest)) = destination {\n-        let ret_ebb = fx.get_ebb(dest);\n-        fx.bcx.ins().jump(ret_ebb, &[]);\n+        let ret_block = fx.get_block(dest);\n+        fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n         trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n     }"}, {"sha": "21fca3c89f69a88f7c8a7380d84fe9b368ba298d", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -98,7 +98,7 @@ mod prelude {\n \n     pub use cranelift_codegen::Context;\n     pub use cranelift_codegen::entity::EntitySet;\n-    pub use cranelift_codegen::ir::{AbiParam, Ebb, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n+    pub use cranelift_codegen::ir::{AbiParam, Block, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n     pub use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n     pub use cranelift_codegen::ir::function::Function;\n     pub use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};"}, {"sha": "fc3f9734874e64fab215d5dc5918d0ae90a1e1c2", "filename": "src/main_shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -62,10 +62,10 @@ pub fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Back\n             let mut func_ctx = FunctionBuilderContext::new();\n             let mut bcx: FunctionBuilder = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n \n-            let ebb = bcx.create_ebb();\n-            bcx.switch_to_block(ebb);\n-            let arg_argc = bcx.append_ebb_param(ebb, m.target_config().pointer_type());\n-            let arg_argv = bcx.append_ebb_param(ebb, m.target_config().pointer_type());\n+            let block = bcx.create_block();\n+            bcx.switch_to_block(block);\n+            let arg_argc = bcx.append_block_param(block, m.target_config().pointer_type());\n+            let arg_argv = bcx.append_block_param(block, m.target_config().pointer_type());\n \n             crate::atomic_shim::init_global_lock(m, &mut bcx);\n "}, {"sha": "7e910fe08beb2df42e8916f18cdefceeb80fa07b", "filename": "src/optimize/code_layout.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Foptimize%2Fcode_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Foptimize%2Fcode_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fcode_layout.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -10,25 +10,25 @@\n \n use crate::prelude::*;\n \n-pub(super) fn optimize_function(ctx: &mut Context, cold_ebbs: &EntitySet<Ebb>) {\n-    // FIXME Move the ebb in place instead of remove and append once\n+pub(super) fn optimize_function(ctx: &mut Context, cold_blocks: &EntitySet<Block>) {\n+    // FIXME Move the block in place instead of remove and append once\n     // bytecodealliance/cranelift#1339 is implemented.\n \n-    let mut ebb_insts = HashMap::new();\n-    for ebb in cold_ebbs.keys().filter(|&ebb| cold_ebbs.contains(ebb)) {\n-        let insts = ctx.func.layout.ebb_insts(ebb).collect::<Vec<_>>();\n+    let mut block_insts = HashMap::new();\n+    for block in cold_blocks.keys().filter(|&block| cold_blocks.contains(block)) {\n+        let insts = ctx.func.layout.block_insts(block).collect::<Vec<_>>();\n         for &inst in &insts {\n             ctx.func.layout.remove_inst(inst);\n         }\n-        ebb_insts.insert(ebb, insts);\n-        ctx.func.layout.remove_ebb(ebb);\n+        block_insts.insert(block, insts);\n+        ctx.func.layout.remove_block(block);\n     }\n \n     // And then append them at the back again.\n-    for ebb in cold_ebbs.keys().filter(|&ebb| cold_ebbs.contains(ebb)) {\n-        ctx.func.layout.append_ebb(ebb);\n-        for inst in ebb_insts.remove(&ebb).unwrap() {\n-            ctx.func.layout.append_inst(inst, ebb);\n+    for block in cold_blocks.keys().filter(|&block| cold_blocks.contains(block)) {\n+        ctx.func.layout.append_block(block);\n+        for inst in block_insts.remove(&block).unwrap() {\n+            ctx.func.layout.append_inst(inst, block);\n         }\n     }\n }"}, {"sha": "23c14a57c56ad0581d14ab70aec6adf4daa2cb8d", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -7,11 +7,11 @@ pub fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     ctx: &mut Context,\n-    cold_ebbs: &EntitySet<Ebb>,\n+    cold_blocks: &EntitySet<Block>,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     // The code_layout optimization is very cheap.\n-    self::code_layout::optimize_function(ctx, cold_ebbs);\n+    self::code_layout::optimize_function(ctx, cold_blocks);\n \n     if tcx.sess.opts.optimize == rustc_session::config::OptLevel::No {\n         return; // FIXME classify optimizations over opt levels"}, {"sha": "acce3a6465b7779899168b6b1b4d07a03c563122", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -116,7 +116,7 @@ impl<'a> OptimizeContext<'a> {\n         let mut stack_slot_usage_map = BTreeMap::<OrdStackSlot, StackSlotUsage>::new();\n \n         let mut cursor = FuncCursor::new(&mut ctx.func);\n-        while let Some(_ebb) = cursor.next_ebb() {\n+        while let Some(_block) = cursor.next_block() {\n             while let Some(inst) = cursor.next_inst() {\n                 match cursor.func.dfg[inst] {\n                     InstructionData::StackLoad {\n@@ -249,7 +249,7 @@ pub(super) fn optimize_function<T: std::fmt::Debug>(\n fn combine_stack_addr_with_load_store(func: &mut Function) {\n     // Turn load and store into stack_load and stack_store when possible.\n     let mut cursor = FuncCursor::new(func);\n-    while let Some(_ebb) = cursor.next_ebb() {\n+    while let Some(_block) = cursor.next_block() {\n         while let Some(inst) = cursor.next_inst() {\n             match cursor.func.dfg[inst] {\n                 InstructionData::Load { opcode: Opcode::Load, arg: addr, flags: _, offset } => {\n@@ -284,7 +284,7 @@ fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext) {\n     let mut stack_addr_load_insts_users = HashMap::<Inst, HashSet<Inst>>::new();\n \n     let mut cursor = FuncCursor::new(&mut opt_ctx.ctx.func);\n-    while let Some(_ebb) = cursor.next_ebb() {\n+    while let Some(_block) = cursor.next_block() {\n         while let Some(inst) = cursor.next_inst() {\n             for &arg in cursor.func.dfg.inst_args(inst) {\n                 if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {"}, {"sha": "e619be41cb18d31e969fb7ea4d9fb2def56b1981", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -38,14 +38,14 @@ use crate::prelude::*;\n ///     sig1 = (i64, i64, i64) system_v\n ///     fn0 = colocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n ///\n-/// ebb0(v0: i64, v1: i64, v2: i64):\n+/// block0(v0: i64, v1: i64, v2: i64):\n ///     v3 = stack_addr.i64 ss0\n ///     v4 = stack_addr.i64 ss1\n ///     store v2, v4\n ///     v5 = stack_addr.i64 ss2\n-///     jump ebb1\n+///     jump block1\n ///\n-/// ebb1:\n+/// block1:\n ///     nop\n /// ; _3 = &mut _1\n /// ; _4 = _2\n@@ -55,9 +55,9 @@ use crate::prelude::*;\n /// ; _0 = const mini_core::FnMut::call_mut(move _3, move _4)\n ///     v7 = load.i64 v5\n ///     call fn0(v0, v3, v7)\n-///     jump ebb2\n+///     jump block2\n ///\n-/// ebb2:\n+/// block2:\n ///     nop\n /// ;\n /// ; return\n@@ -136,15 +136,15 @@ impl FuncWriter for &'_ CommentWriter {\n         }\n     }\n \n-    fn write_ebb_header(\n+    fn write_block_header(\n         &mut self,\n         w: &mut dyn fmt::Write,\n         func: &Function,\n         isa: Option<&dyn isa::TargetIsa>,\n-        ebb: Ebb,\n+        block: Block,\n         indent: usize,\n     ) -> fmt::Result {\n-        PlainWriter.write_ebb_header(w, func, isa, ebb, indent)\n+        PlainWriter.write_block_header(w, func, isa, block, indent)\n     }\n \n     fn write_instruction("}, {"sha": "cc194e1c91eac7bec48f4779144e3b94ad329408", "filename": "src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f738392dae75954bfa0059025dd18dadeff7d/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=430f738392dae75954bfa0059025dd18dadeff7d", "patch": "@@ -382,12 +382,12 @@ impl<'tcx> CPlace<'tcx> {\n         #[cfg(debug_assertions)]\n         {\n             use cranelift_codegen::cursor::{Cursor, CursorPosition};\n-            let cur_ebb = match fx.bcx.cursor().position() {\n-                CursorPosition::After(ebb) => ebb,\n+            let cur_block = match fx.bcx.cursor().position() {\n+                CursorPosition::After(block) => block,\n                 _ => unreachable!(),\n             };\n             fx.add_comment(\n-                fx.bcx.func.layout.last_inst(cur_ebb).unwrap(),\n+                fx.bcx.func.layout.last_inst(cur_block).unwrap(),\n                 format!(\"write_cvalue: {:?} <- {:?}\",self, from),\n             );\n         }"}]}