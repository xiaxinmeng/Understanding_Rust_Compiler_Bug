{"sha": "2a97aadacf2907b82bd57d0dafe8aa4f7e904153", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTdhYWRhY2YyOTA3YjgyYmQ1N2QwZGFmZThhYTRmN2U5MDQxNTM=", "commit": {"author": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-02T21:09:41Z"}, "committer": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-02T21:09:41Z"}, "message": "More initial work", "tree": {"sha": "0a8eb5d229a036faac2c5b01db17d091ff2588e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8eb5d229a036faac2c5b01db17d091ff2588e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a97aadacf2907b82bd57d0dafe8aa4f7e904153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a97aadacf2907b82bd57d0dafe8aa4f7e904153", "html_url": "https://github.com/rust-lang/rust/commit/2a97aadacf2907b82bd57d0dafe8aa4f7e904153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a97aadacf2907b82bd57d0dafe8aa4f7e904153/comments", "author": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e3be6ae49a914b616503e83a203dbc7a9ef905a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3be6ae49a914b616503e83a203dbc7a9ef905a", "html_url": "https://github.com/rust-lang/rust/commit/9e3be6ae49a914b616503e83a203dbc7a9ef905a"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "07991082872cef5f7a956052b743fc39717d5c55", "filename": "clippy_lints/src/is_unit_expr.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2a97aadacf2907b82bd57d0dafe8aa4f7e904153/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a97aadacf2907b82bd57d0dafe8aa4f7e904153/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fis_unit_expr.rs?ref=2a97aadacf2907b82bd57d0dafe8aa4f7e904153", "patch": "@@ -35,19 +35,55 @@ impl LintPass for UnitExpr {\n impl EarlyLintPass for UnitExpr {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Assign(ref left, ref right) = expr.node {\n-            unimplemented!();\n-        }\n-        if let ExprKind::MethodCall(ref path, ref args) = expr.node {\n-            unimplemented!();\n-        }\n-        if let ExprKind::Call(ref path, ref args) = expr.node{\n-            unimplemented!();\n+            if is_unit_expr(right){\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNIT_EXPR,\n+                    right.span,\n+                    \"trailing semicolons can be tricky\",\n+                    \"remove the last semicolon\",\n+                    \"TODO\".to_owned()\n+                )\n+            }\n         }\n+        // if let ExprKind::MethodCall(ref path, ref args) = expr.node {\n+        //     unimplemented!();\n+        // }\n+        // if let ExprKind::Call(ref path, ref args) = expr.node{\n+        //     unimplemented!();\n+        // }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, stmt: &Stmt) {\n-        if let StmtKind::Local(ref data) = stmt.node{\n-            unimplemented!();\n-        }\n+        if let StmtKind::Local(ref local) = stmt.node{\n+            if local.pat.node == PatKind::Wild {return;}\n+            if let Some(ref expr) = local.init{\n+                if is_unit_expr(expr){\n+                    span_lint_and_sugg(\n+                        cx,\n+                        UNIT_EXPR,\n+                        local.span,\n+                        \"trailing semicolons can be tricky\",\n+                        \"remove the last semicolon\",\n+                        \"TODO\".to_owned()\n+                    )\n+                }\n+            }        \n+            }\n     }\n }\n+\n+fn is_unit_expr(expr: &Expr)->bool{\n+    match expr.node{\n+         ExprKind::Block(ref next) => {\n+            let ref final_stmt = &next.stmts[next.stmts.len()-1];\n+            if let StmtKind::Expr(_) = final_stmt.node{\n+                return false;\n+            }\n+            else{\n+                return true;\n+            }\n+        },\n+        _ => return false,\n+    }\n+}\n\\ No newline at end of file"}]}