{"sha": "b085113cbe77b558624bbd2acb098956f5d6f266", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODUxMTNjYmU3N2I1NTg2MjRiYmQyYWNiMDk4OTU2ZjVkNmYyNjY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-20T02:42:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-20T04:05:19Z"}, "message": "Trigger an internal error if we skip formatting due to a lost comment", "tree": {"sha": "c2e147e9b43e3fa526f6facf833c9090fed642b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2e147e9b43e3fa526f6facf833c9090fed642b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b085113cbe77b558624bbd2acb098956f5d6f266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b085113cbe77b558624bbd2acb098956f5d6f266", "html_url": "https://github.com/rust-lang/rust/commit/b085113cbe77b558624bbd2acb098956f5d6f266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b085113cbe77b558624bbd2acb098956f5d6f266/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6899471497614d73f8bc13ac074d7624b4554091", "url": "https://api.github.com/repos/rust-lang/rust/commits/6899471497614d73f8bc13ac074d7624b4554091", "html_url": "https://github.com/rust-lang/rust/commit/6899471497614d73f8bc13ac074d7624b4554091"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "3d55f6560e3e3a6ab9f5b58a5ef41504a071b916", "filename": "src/comment.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b085113cbe77b558624bbd2acb098956f5d6f266/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b085113cbe77b558624bbd2acb098956f5d6f266/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b085113cbe77b558624bbd2acb098956f5d6f266", "patch": "@@ -20,6 +20,7 @@ use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n use utils::{count_newlines, first_line_width, last_line_width};\n+use {ErrorKind, FormattingError};\n \n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n@@ -1124,7 +1125,17 @@ pub fn recover_comment_removed(\n ) -> Option<String> {\n     let snippet = context.snippet(span);\n     if snippet != new && changed_comment_content(snippet, &new) {\n-        // We missed some comments. Keep the original text.\n+        // We missed some comments. Warn and keep the original text.\n+        if context.config.error_on_unformatted() {\n+            context.report.append(\n+                context.codemap.span_to_filename(span).into(),\n+                vec![FormattingError::from_span(\n+                    &span,\n+                    &context.codemap,\n+                    ErrorKind::LostComment,\n+                )],\n+            );\n+        }\n         Some(snippet.to_owned())\n     } else {\n         Some(new)"}, {"sha": "820134c2085d4e6efaf50ddfefbf03282d4a2f47", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b085113cbe77b558624bbd2acb098956f5d6f266/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b085113cbe77b558624bbd2acb098956f5d6f266/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b085113cbe77b558624bbd2acb098956f5d6f266", "patch": "@@ -140,8 +140,20 @@ pub enum ErrorKind {\n     ParseError,\n     /// The user mandated a version and the current version of Rustfmt does not\n     /// satisfy that requirement.\n-    #[fail(display = \"Version mismatch\")]\n+    #[fail(display = \"version mismatch\")]\n     VersionMismatch,\n+    /// If we had formatted the given node, then we would have lost a comment.\n+    #[fail(display = \"not formatted because a comment would be lost\")]\n+    LostComment,\n+}\n+\n+impl ErrorKind {\n+    fn is_comment(&self) -> bool {\n+        match self {\n+            ErrorKind::LostComment => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl From<io::Error> for ErrorKind {\n@@ -162,8 +174,8 @@ impl FormattingError {\n     fn from_span(span: &Span, codemap: &CodeMap, kind: ErrorKind) -> FormattingError {\n         FormattingError {\n             line: codemap.lookup_char_pos(span.lo()).line,\n+            is_comment: kind.is_comment(),\n             kind,\n-            is_comment: false,\n             is_string: false,\n             line_buffer: codemap\n                 .span_to_lines(*span)\n@@ -181,7 +193,8 @@ impl FormattingError {\n             ErrorKind::LineOverflow(..)\n             | ErrorKind::TrailingWhitespace\n             | ErrorKind::IoError(_)\n-            | ErrorKind::ParseError => \"internal error:\",\n+            | ErrorKind::ParseError\n+            | ErrorKind::LostComment => \"internal error:\",\n             ErrorKind::LicenseCheck | ErrorKind::BadAttr | ErrorKind::VersionMismatch => \"error:\",\n             ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n         }\n@@ -200,7 +213,10 @@ impl FormattingError {\n     fn format_len(&self) -> (usize, usize) {\n         match self.kind {\n             ErrorKind::LineOverflow(found, max) => (max, found - max),\n-            ErrorKind::TrailingWhitespace | ErrorKind::DeprecatedAttr | ErrorKind::BadAttr => {\n+            ErrorKind::TrailingWhitespace\n+            | ErrorKind::DeprecatedAttr\n+            | ErrorKind::BadAttr\n+            | ErrorKind::LostComment => {\n                 let trailing_ws_start = self\n                     .line_buffer\n                     .rfind(|c: char| !c.is_whitespace())\n@@ -501,15 +517,15 @@ fn should_report_error(\n     is_string: bool,\n     error_kind: &ErrorKind,\n ) -> bool {\n-    let allow_error_report = if char_kind.is_comment() || is_string {\n+    let allow_error_report = if char_kind.is_comment() || is_string || error_kind.is_comment() {\n         config.error_on_unformatted()\n     } else {\n         true\n     };\n \n     match error_kind {\n         ErrorKind::LineOverflow(..) => config.error_on_line_overflow() && allow_error_report,\n-        ErrorKind::TrailingWhitespace => allow_error_report,\n+        ErrorKind::TrailingWhitespace | ErrorKind::LostComment => allow_error_report,\n         _ => true,\n     }\n }"}]}