{"sha": "7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNmNkMmIyMWUyNDBkM2IwNzViMzBkNTk4ZTY2MWIwMzhmZTZmYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-29T02:06:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-29T02:06:48Z"}, "message": "auto merge of #5608 : erickt/rust/incoming, r=catamorphism\n\n@nikomatsakis pointed out that `fn read_option<T>(&self, f: &fn() -> T) -> Option<T>` should have this syntax so it can work with custom option types: `fn read_option<T>(&self, f: &fn(bool) -> T) -> T`.\r\n\r\nAlso, this also includes some `#[inline(always)]` on the memory functions in `src/libcore/unstable/lang.rs` to reduce one level of indirection when allocating memory.", "tree": {"sha": "3542b2ed3564cb795e567c74857bfaa696525e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3542b2ed3564cb795e567c74857bfaa696525e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "html_url": "https://github.com/rust-lang/rust/commit/7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f81459211d0cf2738ed02f5c7fe24f56c8032960", "url": "https://api.github.com/repos/rust-lang/rust/commits/f81459211d0cf2738ed02f5c7fe24f56c8032960", "html_url": "https://github.com/rust-lang/rust/commit/f81459211d0cf2738ed02f5c7fe24f56c8032960"}, {"sha": "aa779c1240afd0f5e46897b6ddfa55126471bf19", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa779c1240afd0f5e46897b6ddfa55126471bf19", "html_url": "https://github.com/rust-lang/rust/commit/aa779c1240afd0f5e46897b6ddfa55126471bf19"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "ff96029bc0e31b887a2f256c27f88c802dd8d0bc", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "patch": "@@ -64,6 +64,7 @@ pub unsafe fn fail_borrowed() {\n \n // FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n #[lang=\"exchange_malloc\"]\n+#[inline(always)]\n pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     transmute(exchange_alloc::malloc(transmute(td), transmute(size)))\n }\n@@ -72,11 +73,13 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[lang=\"exchange_free\"]\n+#[inline(always)]\n pub unsafe fn exchange_free(ptr: *c_char) {\n     exchange_alloc::free(transmute(ptr))\n }\n \n #[lang=\"malloc\"]\n+#[inline(always)]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     return rustrt::rust_upcall_malloc(td, size);\n }\n@@ -85,6 +88,7 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[lang=\"free\"]\n+#[inline(always)]\n pub unsafe fn local_free(ptr: *c_char) {\n     rustrt::rust_upcall_free(ptr);\n }\n@@ -117,6 +121,7 @@ pub unsafe fn check_not_borrowed(a: *u8) {\n }\n \n #[lang=\"strdup_uniq\"]\n+#[inline(always)]\n pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n     str::raw::from_buf_len(ptr, len)\n }"}, {"sha": "331bede5b7af37775d8db77ee9900722c8880224", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "patch": "@@ -411,13 +411,13 @@ pub mod reader {\n         }\n \n         #[cfg(stage0)]\n-        fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+        fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {\n                 do self.read_enum_variant |idx| {\n                     match idx {\n-                        0 => None,\n-                        1 => Some(f()),\n+                        0 => f(false),\n+                        1 => f(true),\n                         _ => fail!(),\n                     }\n                 }\n@@ -427,13 +427,13 @@ pub mod reader {\n         #[cfg(stage1)]\n         #[cfg(stage2)]\n         #[cfg(stage3)]\n-        fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+        fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {\n                 do self.read_enum_variant([\"None\", \"Some\"]) |idx| {\n                     match idx {\n-                        0 => None,\n-                        1 => Some(f()),\n+                        0 => f(false),\n+                        1 => f(true),\n                         _ => fail!(),\n                     }\n                 }"}, {"sha": "4b0e313330d24b22e9649c437c6124263fec21bb", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "patch": "@@ -980,10 +980,10 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         }\n     }\n \n-    fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+    fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n         match *self.peek() {\n-            Null => { self.pop(); None }\n-            _ => Some(f()),\n+            Null => { self.pop(); f(false) }\n+            _ => f(true),\n         }\n     }\n }"}, {"sha": "3c9ad0d77d1e01a64cc0f88c7ff4dfffc9a5c72d", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6cd2b21e240d3b075b30d598e661b038fe6fbe/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=7a6cd2b21e240d3b075b30d598e661b038fe6fbe", "patch": "@@ -118,7 +118,7 @@ pub trait Decoder {\n     fn read_tup_elt<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n     // Specialized types:\n-    fn read_option<T>(&self, f: &fn() -> T) -> Option<T>;\n+    fn read_option<T>(&self, f: &fn(bool) -> T) -> T;\n }\n \n pub trait Encodable<S:Encoder> {\n@@ -395,7 +395,13 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n     fn decode(d: &D) -> Option<T> {\n-        d.read_option(|| Decodable::decode(d))\n+        do d.read_option |b| {\n+            if b {\n+                Some(Decodable::decode(d))\n+            } else {\n+                None\n+            }\n+        }\n     }\n }\n "}]}