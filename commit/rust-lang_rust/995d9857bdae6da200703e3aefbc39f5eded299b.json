{"sha": "995d9857bdae6da200703e3aefbc39f5eded299b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NWQ5ODU3YmRhZTZkYTIwMDcwM2UzYWVmYmMzOWY1ZWRlZDI5OWI=", "commit": {"author": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-07T18:02:27Z"}, "committer": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-08T07:24:49Z"}, "message": "Fix cross-compilation to macOS", "tree": {"sha": "12df61d1595dba23983a4f7cd365ed10842032d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12df61d1595dba23983a4f7cd365ed10842032d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995d9857bdae6da200703e3aefbc39f5eded299b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995d9857bdae6da200703e3aefbc39f5eded299b", "html_url": "https://github.com/rust-lang/rust/commit/995d9857bdae6da200703e3aefbc39f5eded299b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995d9857bdae6da200703e3aefbc39f5eded299b/comments", "author": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc763eed59295d0907a2780d66d4adf6f41a644", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc763eed59295d0907a2780d66d4adf6f41a644", "html_url": "https://github.com/rust-lang/rust/commit/6dc763eed59295d0907a2780d66d4adf6f41a644"}], "stats": {"total": 112, "additions": 62, "deletions": 50}, "files": [{"sha": "a8d6290aa433bc969113f3011bac26dd9405b532", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=995d9857bdae6da200703e3aefbc39f5eded299b", "patch": "@@ -1,4 +1,4 @@\n-use std::{env, io, path::Path, process::Command};\n+use std::{env, path::Path};\n \n use crate::spec::{LinkArgs, TargetOptions};\n \n@@ -52,43 +52,60 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-pub fn sysroot(sdk: &str) -> Result<String, String> {\n-    let actual_sdk_path = sdk_path(sdk)?;\n+#[cfg(target_os = \"macos\")]\n+pub fn sysroot(sdk: &str) -> Result<Option<String>, String> {\n     // Like Clang, allow the `SDKROOT` environment variable used by Xcode to define the sysroot.\n     if let Some(sdk_root) = env::var(\"SDKROOT\").ok() {\n+        let actual_sdk_path = sdk_path(sdk)?;\n         let sdk_root_p = Path::new(&sdk_root);\n         // Ignore `SDKROOT` if it's not a valid path.\n         if !sdk_root_p.is_absolute() || sdk_root_p == Path::new(\"/\") || !sdk_root_p.exists() {\n-            return Ok(actual_sdk_path);\n+            return Ok(Some(actual_sdk_path));\n         }\n         // Ignore `SDKROOT` if it's clearly set for the wrong platform, which may occur when we're\n         // compiling a custom build script while targeting iOS for example.\n-        return Ok(match sdk {\n+        return Ok(Some(match sdk {\n             \"iphoneos\" if sdk_root.contains(\"iPhoneSimulator.platform\")\n                 || sdk_root.contains(\"MacOSX.platform\") => actual_sdk_path,\n             \"iphonesimulator\" if sdk_root.contains(\"iPhoneOS.platform\")\n                 || sdk_root.contains(\"MacOSX.platform\") => actual_sdk_path,\n             \"macosx\" | \"macosx10.15\" if sdk_root.contains(\"iPhoneOS.platform\")\n                 || sdk_root.contains(\"iPhoneSimulator.platform\") => actual_sdk_path,\n             _ => sdk_root,\n-        })\n+        }))\n     }\n-    Ok(actual_sdk_path)\n+    Ok(None)\n }\n \n+// `xcrun` is only available on macOS.\n+#[cfg(not(target_os = \"macos\"))]\n+pub fn sysroot(_sdk: &str) -> Result<Option<String>, String> {\n+    if let Some(sdk_root) = env::var(\"SDKROOT\").ok() {\n+        let sdk_root_p = Path::new(&sdk_root);\n+        // Use `SDKROOT` only if it's a valid path.\n+        if sdk_root_p.is_absolute() && sdk_root_p != Path::new(\"/\") && sdk_root_p.exists() {\n+            return Ok(Some(sdk_root));\n+        }\n+    }\n+    Ok(None)\n+}\n+\n+#[cfg(target_os = \"macos\")]\n fn sdk_path(sdk_name: &str) -> Result<String, String> {\n-    let res =\n-        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n-            |output| {\n-                if output.status.success() {\n-                    Ok(String::from_utf8(output.stdout).unwrap())\n-                } else {\n-                    let error = String::from_utf8(output.stderr);\n-                    let error = format!(\"process exit with error: {}\", error.unwrap());\n-                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n-                }\n-            },\n-        );\n+    let res = std::process::Command::new(\"xcrun\")\n+        .arg(\"--show-sdk-path\")\n+        .arg(\"-sdk\")\n+        .arg(sdk_name)\n+        .output()\n+        .and_then(|output| {\n+            if output.status.success() {\n+                Ok(String::from_utf8(output.stdout).unwrap())\n+            } else {\n+                let error = String::from_utf8(output.stderr);\n+                let error = format!(\"process exit with error: {}\", error.unwrap());\n+                Err(std::io::Error::new(std::io::ErrorKind::Other, &error[..]))\n+            }\n+        });\n     match res {\n         Ok(output) => Ok(output.trim().to_string()),\n         Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),"}, {"sha": "801736944f4f80d1ce44541e1ce181126eaedc59", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=995d9857bdae6da200703e3aefbc39f5eded299b", "patch": "@@ -35,16 +35,19 @@ fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n \n     let arch_name = arch.to_string();\n \n-    let sdk_root = super::apple_base::sysroot(sdk_name)?;\n-\n     let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Gcc,\n-                vec![\"-arch\".to_string(),\n-                     arch_name.to_string(),\n-                     \"-isysroot\".to_string(),\n-                     sdk_root.clone(),\n-                     \"-Wl,-syslibroot\".to_string(),\n-                     sdk_root]);\n+    args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), arch_name.to_string()]);\n+    if let Some(sdk_root) = super::apple_base::sysroot(sdk_name)? {\n+        args.insert(\n+            LinkerFlavor::Gcc,\n+            vec![\n+                \"-isysroot\".to_string(),\n+                sdk_root.clone(),\n+                \"-Wl,-syslibroot\".to_string(),\n+                sdk_root\n+            ],\n+        );\n+    }\n \n     Ok(args)\n }"}, {"sha": "b08ed56025208161dc21efcd04c8648ca792f93d", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=995d9857bdae6da200703e3aefbc39f5eded299b", "patch": "@@ -1,20 +1,16 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let sysroot = super::apple_base::sysroot(\"macosx\")?;\n     let mut base = super::apple_base::opts();\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-m32\".to_string(),\n-            \"-isysroot\".to_string(),\n-            sysroot.clone(),\n-            \"-Wl,-syslibroot\".to_string(),\n-            sysroot,\n-        ],\n-    );\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    if let Some(sysroot) = super::apple_base::sysroot(\"macosx\")? {\n+        base.pre_link_args.insert(\n+            LinkerFlavor::Gcc,\n+            vec![\"-isysroot\".to_string(), sysroot.clone(), \"-Wl,-syslibroot\".to_string(), sysroot],\n+        );\n+    }\n     base.stack_probes = true;\n     base.eliminate_frame_pointer = false;\n "}, {"sha": "f299c27e7e1efb5269facbe266b387bb1455b862", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995d9857bdae6da200703e3aefbc39f5eded299b/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=995d9857bdae6da200703e3aefbc39f5eded299b", "patch": "@@ -1,21 +1,17 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let sysroot = super::apple_base::sysroot(\"macosx\")?;\n     let mut base = super::apple_base::opts();\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n-    base.pre_link_args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-m64\".to_string(),\n-            \"-isysroot\".to_string(),\n-            sysroot.clone(),\n-            \"-Wl,-syslibroot\".to_string(),\n-            sysroot,\n-        ],\n-    );\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    if let Some(sysroot) = super::apple_base::sysroot(\"macosx\")? {\n+        base.pre_link_args.insert(\n+            LinkerFlavor::Gcc,\n+            vec![\"-isysroot\".to_string(), sysroot.clone(), \"-Wl,-syslibroot\".to_string(), sysroot],\n+        );\n+    }\n     base.stack_probes = true;\n \n     // Clang automatically chooses a more specific target based on"}]}