{"sha": "d419a5fdaebb36dbf3c600f624c964d9ea651661", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MTlhNWZkYWViYjM2ZGJmM2M2MDBmNjI0Yzk2NGQ5ZWE2NTE2NjE=", "commit": {"author": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-12-01T12:39:01Z"}, "committer": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-12-06T15:59:35Z"}, "message": "Fix pointing at arg when cause is outside of call", "tree": {"sha": "1ef0c83e647f8a004537e4cddb9439ee22ed0e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef0c83e647f8a004537e4cddb9439ee22ed0e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d419a5fdaebb36dbf3c600f624c964d9ea651661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d419a5fdaebb36dbf3c600f624c964d9ea651661", "html_url": "https://github.com/rust-lang/rust/commit/d419a5fdaebb36dbf3c600f624c964d9ea651661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d419a5fdaebb36dbf3c600f624c964d9ea651661/comments", "author": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0", "html_url": "https://github.com/rust-lang/rust/commit/d0126e8ed3cc0d6fcb9dd44c36a46f9ce65010a0"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "5e644df99beeba4a4421b918ec3547e4d244daa0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d419a5fdaebb36dbf3c600f624c964d9ea651661/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d419a5fdaebb36dbf3c600f624c964d9ea651661/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d419a5fdaebb36dbf3c600f624c964d9ea651661", "patch": "@@ -3880,36 +3880,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_sp: Span,\n         args: &'tcx [hir::Expr],\n     ) {\n-        if !call_sp.desugaring_kind().is_some() {\n-            // We *do not* do this for desugared call spans to keep good diagnostics when involving\n-            // the `?` operator.\n-            for error in errors {\n-                if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n-                    // Collect the argument position for all arguments that could have caused this\n-                    // `FulfillmentError`.\n-                    let mut referenced_in = final_arg_types.iter()\n-                        .map(|(i, checked_ty, _)| (i, checked_ty))\n-                        .chain(final_arg_types.iter().map(|(i, _, coerced_ty)| (i, coerced_ty)))\n-                        .flat_map(|(i, ty)| {\n-                            let ty = self.resolve_vars_if_possible(ty);\n-                            // We walk the argument type because the argument's type could have\n-                            // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                            ty.walk()\n-                                .filter(|&ty| ty == predicate.skip_binder().self_ty())\n-                                .map(move |_| *i)\n-                        })\n-                        .collect::<Vec<_>>();\n+        // We *do not* do this for desugared call spans to keep good diagnostics when involving\n+        // the `?` operator.\n+        if call_sp.desugaring_kind().is_some() {\n+            return\n+        }\n+\n+        for error in errors {\n+            // Only if the cause is somewhere inside the expression we want try to point at arg.\n+            // Otherwise, it means that the cause is somewhere else and we should not change\n+            // anything because we can break the correct span.\n+            if !call_sp.contains(error.obligation.cause.span) {\n+                continue\n+            }\n+\n+            if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                // Collect the argument position for all arguments that could have caused this\n+                // `FulfillmentError`.\n+                let mut referenced_in = final_arg_types.iter()\n+                    .map(|(i, checked_ty, _)| (i, checked_ty))\n+                    .chain(final_arg_types.iter().map(|(i, _, coerced_ty)| (i, coerced_ty)))\n+                    .flat_map(|(i, ty)| {\n+                        let ty = self.resolve_vars_if_possible(ty);\n+                        // We walk the argument type because the argument's type could have\n+                        // been `Option<T>`, but the `FulfillmentError` references `T`.\n+                        ty.walk()\n+                            .filter(|&ty| ty == predicate.skip_binder().self_ty())\n+                            .map(move |_| *i)\n+                    })\n+                    .collect::<Vec<_>>();\n \n-                    // Both checked and coerced types could have matched, thus we need to remove\n-                    // duplicates.\n-                    referenced_in.dedup();\n+                // Both checked and coerced types could have matched, thus we need to remove\n+                // duplicates.\n+                referenced_in.dedup();\n \n-                    if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n-                        // We make sure that only *one* argument matches the obligation failure\n-                        // and we assign the obligation's span to its expression's.\n-                        error.obligation.cause.span = args[ref_in].span;\n-                        error.points_at_arg_span = true;\n-                    }\n+                if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n+                    // We make sure that only *one* argument matches the obligation failure\n+                    // and we assign the obligation's span to its expression's.\n+                    error.obligation.cause.span = args[ref_in].span;\n+                    error.points_at_arg_span = true;\n                 }\n             }\n         }"}, {"sha": "a452e6384a3d4dca84ce0c3e8758bef259de4f45", "filename": "src/test/ui/issues/issue-66923.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d419a5fdaebb36dbf3c600f624c964d9ea651661/src%2Ftest%2Fui%2Fissues%2Fissue-66923.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d419a5fdaebb36dbf3c600f624c964d9ea651661/src%2Ftest%2Fui%2Fissues%2Fissue-66923.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923.rs?ref=d419a5fdaebb36dbf3c600f624c964d9ea651661", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let v = vec![1_f64, 2.2_f64];\n+    let mut fft: Vec<Vec<f64>> = vec![];\n+\n+    let x1: &[f64] = &v;\n+    let x2: Vec<f64> = x1.into_iter().collect();\n+    //~^ ERROR a collection of type\n+    fft.push(x2);\n+\n+    let x3 = x1.into_iter().collect::<Vec<f64>>();\n+    //~^ ERROR a collection of type\n+    fft.push(x3);\n+}"}, {"sha": "a2eec7caee5079c49cb9b84e6038214ca8bae943", "filename": "src/test/ui/issues/issue-66923.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d419a5fdaebb36dbf3c600f624c964d9ea651661/src%2Ftest%2Fui%2Fissues%2Fissue-66923.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d419a5fdaebb36dbf3c600f624c964d9ea651661/src%2Ftest%2Fui%2Fissues%2Fissue-66923.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923.stderr?ref=d419a5fdaebb36dbf3c600f624c964d9ea651661", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: a collection of type `std::vec::Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n+  --> $DIR/issue-66923.rs:6:39\n+   |\n+LL |     let x2: Vec<f64> = x1.into_iter().collect();\n+   |                                       ^^^^^^^ a collection of type `std::vec::Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |\n+   = help: the trait `std::iter::FromIterator<&f64>` is not implemented for `std::vec::Vec<f64>`\n+\n+error[E0277]: a collection of type `std::vec::Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n+  --> $DIR/issue-66923.rs:10:29\n+   |\n+LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n+   |                             ^^^^^^^ a collection of type `std::vec::Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |\n+   = help: the trait `std::iter::FromIterator<&f64>` is not implemented for `std::vec::Vec<f64>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}