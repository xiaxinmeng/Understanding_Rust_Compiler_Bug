{"sha": "63799ba549ac985915236c736819fe0bbc12013a", "node_id": "C_kwDOAAsO6NoAKDYzNzk5YmE1NDlhYzk4NTkxNTIzNmM3MzY4MTlmZTBiYmMxMjAxM2E", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-17T10:43:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-17T10:43:31Z"}, "message": "Rollup merge of #112707 - GuillaumeGomez:back-in-history-fix, r=notriddle\n\n[rustdoc] Fix invalid handling of \"going back in history\" when \"go to only search result\" setting is enabled\n\nYou can test the fix [here](https://rustdoc.crud.net/imperio/back-in-history-fix/lib2/index.html). Enable \"Directly go to item in search if there is only one result\", then search for `HasALongTraitWithParams` and finally go back to previous page. It should be back on the `index.html` page.\n\nThe reason for this bug is that the JS state is cached as is, so when we go back to the page, it resumes where it was left, somewhat (very weird), meaning the search is run again etc. The best way to handle this is to force the JS re-execution in this case so that it doesn't try to resume from where it left and then lead us back to the current page.\n\nr? ``@notriddle``", "tree": {"sha": "12ba469b15bf80c94e7fca4138904248cf0354fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ba469b15bf80c94e7fca4138904248cf0354fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63799ba549ac985915236c736819fe0bbc12013a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjY5TCRBK7hj4Ov3rIwAAGyEIACgH77tA31KXoTOlqHg5qNvP\nX5cAdpKmMGFL3Q58eLV2tMTfeaeKmlRxZM537NiX3f29emtcrcFBEtIl8LXWbCql\nIadz2cMXu+YaR3LcEr6n5+Bc/fXD8QnYXbd0LrFEeI4X3P6ZwDF0GkKFMMGbrukV\nQEcgf+ZXckoh/4oRq8W4Umim5EYgxguGMdDIoVZjPPp0Zyp9dDdrIPrpJrzmSpW4\ndJicVcKjFTBu5I0g4I00XQenXziiKWDUJyuPPVej6cZXOUwL1K7S5nu2dIxavk1g\nOrmllI2CXZ6atLxwbgTuN85yhDhlsNLUfzZwo87LvyZSsAFR9rvXgSXjkkQ/OQ4=\n=RqWt\n-----END PGP SIGNATURE-----\n", "payload": "tree 12ba469b15bf80c94e7fca4138904248cf0354fc\nparent 7051c84326d1da173835b543f60f81c08f42ac52\nparent ea55d25465f8dffc8283c0260f8dfa42076ba847\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686998611 +0200\ncommitter GitHub <noreply@github.com> 1686998611 +0200\n\nRollup merge of #112707 - GuillaumeGomez:back-in-history-fix, r=notriddle\n\n[rustdoc] Fix invalid handling of \"going back in history\" when \"go to only search result\" setting is enabled\n\nYou can test the fix [here](https://rustdoc.crud.net/imperio/back-in-history-fix/lib2/index.html). Enable \"Directly go to item in search if there is only one result\", then search for `HasALongTraitWithParams` and finally go back to previous page. It should be back on the `index.html` page.\n\nThe reason for this bug is that the JS state is cached as is, so when we go back to the page, it resumes where it was left, somewhat (very weird), meaning the search is run again etc. The best way to handle this is to force the JS re-execution in this case so that it doesn't try to resume from where it left and then lead us back to the current page.\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63799ba549ac985915236c736819fe0bbc12013a", "html_url": "https://github.com/rust-lang/rust/commit/63799ba549ac985915236c736819fe0bbc12013a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63799ba549ac985915236c736819fe0bbc12013a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7051c84326d1da173835b543f60f81c08f42ac52", "url": "https://api.github.com/repos/rust-lang/rust/commits/7051c84326d1da173835b543f60f81c08f42ac52", "html_url": "https://github.com/rust-lang/rust/commit/7051c84326d1da173835b543f60f81c08f42ac52"}, {"sha": "ea55d25465f8dffc8283c0260f8dfa42076ba847", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea55d25465f8dffc8283c0260f8dfa42076ba847", "html_url": "https://github.com/rust-lang/rust/commit/ea55d25465f8dffc8283c0260f8dfa42076ba847"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "f5296abaee661114ec2b0d27c5de00eb52cd8f28", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63799ba549ac985915236c736819fe0bbc12013a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/63799ba549ac985915236c736819fe0bbc12013a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=63799ba549ac985915236c736819fe0bbc12013a", "patch": "@@ -277,14 +277,18 @@ function preLoadCss(cssUrl) {\n             searchState.mouseMovedAfterSearch = false;\n             document.title = searchState.title;\n         },\n-        hideResults: () => {\n-            switchDisplayedElement(null);\n+        removeQueryParameters: () => {\n+            // We change the document title.\n             document.title = searchState.titleBeforeSearch;\n-            // We also remove the query parameter from the URL.\n             if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, \"\", getNakedUrl() + window.location.hash);\n             }\n         },\n+        hideResults: () => {\n+            switchDisplayedElement(null);\n+            // We also remove the query parameter from the URL.\n+            searchState.removeQueryParameters();\n+        },\n         getQueryStringParams: () => {\n             const params = {};\n             window.location.search.substring(1).split(\"&\")."}, {"sha": "3059dac820723e9813c2e957f73f79c0a90fb7a7", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/63799ba549ac985915236c736819fe0bbc12013a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/63799ba549ac985915236c736819fe0bbc12013a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=63799ba549ac985915236c736819fe0bbc12013a", "patch": "@@ -2071,6 +2071,20 @@ function initSearch(rawSearchIndex) {\n         if (go_to_first || (results.others.length === 1\n             && getSettingValue(\"go-to-only-result\") === \"true\")\n         ) {\n+            // Needed to force re-execution of JS when coming back to a page. Let's take this\n+            // scenario as example:\n+            //\n+            // 1. You have the \"Directly go to item in search if there is only one result\" option\n+            //    enabled.\n+            // 2. You make a search which results only one result, leading you automatically to\n+            //    this result.\n+            // 3. You go back to previous page.\n+            //\n+            // Now, without the call below, the JS will not be re-executed and the previous state\n+            // will be used, starting search again since the search input is not empty, leading you\n+            // back to the previous page again.\n+            window.onunload = () => {};\n+            searchState.removeQueryParameters();\n             const elem = document.createElement(\"a\");\n             elem.href = results.others[0].href;\n             removeClass(elem, \"active\");\n@@ -2185,6 +2199,18 @@ function initSearch(rawSearchIndex) {\n         printTab(currentTab);\n     }\n \n+    function updateSearchHistory(url) {\n+        if (!browserSupportsHistoryApi()) {\n+            return;\n+        }\n+        const params = searchState.getQueryStringParams();\n+        if (!history.state && !params.search) {\n+            history.pushState(null, \"\", url);\n+        } else {\n+            history.replaceState(null, \"\", url);\n+        }\n+    }\n+\n     /**\n      * Perform a search based on the current state of the search input element\n      * and display the results.\n@@ -2195,7 +2221,6 @@ function initSearch(rawSearchIndex) {\n         if (e) {\n             e.preventDefault();\n         }\n-\n         const query = parseQuery(searchState.input.value.trim());\n         let filterCrates = getFilterCrates();\n \n@@ -2221,15 +2246,7 @@ function initSearch(rawSearchIndex) {\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n-        if (browserSupportsHistoryApi()) {\n-            const newURL = buildUrl(query.original, filterCrates);\n-\n-            if (!history.state && !params.search) {\n-                history.pushState(null, \"\", newURL);\n-            } else {\n-                history.replaceState(null, \"\", newURL);\n-            }\n-        }\n+        updateSearchHistory(buildUrl(query.original, filterCrates));\n \n         showResults(\n             execQuery(query, searchWords, filterCrates, window.currentCrate),\n@@ -2695,13 +2712,8 @@ function initSearch(rawSearchIndex) {\n     function updateCrate(ev) {\n         if (ev.target.value === \"all crates\") {\n             // If we don't remove it from the URL, it'll be picked up again by the search.\n-            const params = searchState.getQueryStringParams();\n             const query = searchState.input.value.trim();\n-            if (!history.state && !params.search) {\n-                history.pushState(null, \"\", buildUrl(query, null));\n-            } else {\n-                history.replaceState(null, \"\", buildUrl(query, null));\n-            }\n+            updateSearchHistory(buildUrl(query, null));\n         }\n         // In case you \"cut\" the entry from the search input, then change the crate filter\n         // before paste back the previous search, you get the old search results without"}, {"sha": "45e0b349051eea721963b00906d3b23814fe3e39", "filename": "tests/rustdoc-gui/setting-go-to-only-result.goml", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63799ba549ac985915236c736819fe0bbc12013a/tests%2Frustdoc-gui%2Fsetting-go-to-only-result.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63799ba549ac985915236c736819fe0bbc12013a/tests%2Frustdoc-gui%2Fsetting-go-to-only-result.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsetting-go-to-only-result.goml?ref=63799ba549ac985915236c736819fe0bbc12013a", "patch": "@@ -34,7 +34,14 @@ go-to: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n // We enter it into the search.\n write: (\".search-input\", \"HasALongTraitWithParams\")\n wait-for-document-property: {\"title\": \"HasALongTraitWithParams in lib2 - Rust\"}\n-assert-document-property: ({\"URL\": \"/lib2/struct.HasALongTraitWithParams.html\"}, ENDS_WITH)\n+assert-window-property: ({\"location\": \"/lib2/struct.HasALongTraitWithParams.html\"}, ENDS_WITH)\n+\n+// Regression test for <https://github.com/rust-lang/rust/issues/112676>.\n+// If \"go-to-only-result\" is enabled and you go back to history, it should not lead you back to the\n+// page result again automatically.\n+history-go-back:\n+wait-for-document-property: {\"title\": \"lib2 - Rust\"}\n+assert-window-property: ({\"location\": \"/lib2/index.html\"}, ENDS_WITH)\n \n // We try again to see if it goes to the only result\n go-to: \"file://\" + |DOC_PATH| + \"/lib2/index.html?search=HasALongTraitWithParams\""}]}