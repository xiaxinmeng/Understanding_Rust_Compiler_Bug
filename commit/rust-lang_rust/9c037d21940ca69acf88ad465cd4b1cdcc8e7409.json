{"sha": "9c037d21940ca69acf88ad465cd4b1cdcc8e7409", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDM3ZDIxOTQwY2E2OWFjZjg4YWQ0NjVjZDRiMWNkY2M4ZTc0MDk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-06T10:50:47Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-06T14:12:47Z"}, "message": "Revert \"rustc: Add a workaround for a segfault with --time-passes (issue #1005).\"\n\nThis reverts commit 100e0264b2a2e4e7d8f27b4ed25af8cb7b4a8c3c.", "tree": {"sha": "6aa1be05ccf97fd3b24a09eafaaa8f75dee39c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aa1be05ccf97fd3b24a09eafaaa8f75dee39c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c037d21940ca69acf88ad465cd4b1cdcc8e7409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c037d21940ca69acf88ad465cd4b1cdcc8e7409", "html_url": "https://github.com/rust-lang/rust/commit/9c037d21940ca69acf88ad465cd4b1cdcc8e7409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c037d21940ca69acf88ad465cd4b1cdcc8e7409/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee017add442a3b0a05559f7bcd2ef4d4fb0e38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee017add442a3b0a05559f7bcd2ef4d4fb0e38f", "html_url": "https://github.com/rust-lang/rust/commit/8ee017add442a3b0a05559f7bcd2ef4d4fb0e38f"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "46865d10fa2a298209db84575a3a523f99c225f7", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9c037d21940ca69acf88ad465cd4b1cdcc8e7409/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c037d21940ca69acf88ad465cd4b1cdcc8e7409/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9c037d21940ca69acf88ad465cd4b1cdcc8e7409", "patch": "@@ -98,19 +98,6 @@ fn time<@T>(do_it: bool, what: str, thunk: fn() -> T) -> T {\n     ret rv;\n }\n \n-// FIXME (issue #1005): Needed to work around a segfault. If |time| is used\n-// instead, we crash.\n-fn time_unit(do_it: bool, what: str, thunk: fn()) {\n-    if !do_it { ret thunk(); }\n-    let start = std::time::precise_time_s();\n-    let rv = thunk();\n-    let end = std::time::precise_time_s();\n-    log_err #fmt[\"time: %s took %s s\", what,\n-                 common::float_to_str(end - start, 3u)];\n-    ret rv;\n-}\n-\n-\n fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n                  output: str) {\n     let time_passes = sess.get_opts().time_passes;\n@@ -132,38 +119,36 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     let ast_map =\n         time(time_passes, \"ast indexing\",\n              bind middle::ast_map::map_crate(*crate));\n-    time_unit(time_passes, \"external crate/lib resolution\",\n-              bind creader::read_crates(sess, *crate));\n+    time(time_passes, \"external crate/lib resolution\",\n+         bind creader::read_crates(sess, *crate));\n     let {def_map: def_map, ext_map: ext_map} =\n         time(time_passes, \"resolution\",\n              bind resolve::resolve_crate(sess, ast_map, crate));\n     let freevars =\n         time(time_passes, \"freevar finding\",\n              bind freevars::annotate_freevars(def_map, crate));\n     let ty_cx = ty::mk_ctxt(sess, def_map, ext_map, ast_map, freevars);\n-    time_unit(time_passes, \"typechecking\", bind\n-        typeck::check_crate(ty_cx, crate));\n-    time_unit(time_passes, \"alt checking\",\n+    time(time_passes, \"typechecking\", bind typeck::check_crate(ty_cx, crate));\n+    time(time_passes, \"alt checking\",\n          bind middle::check_alt::check_crate(ty_cx, crate));\n     if sess.get_opts().run_typestate {\n-        time_unit(time_passes, \"typestate checking\",\n-                  bind middle::tstate::ck::check_crate(ty_cx, crate));\n+        time(time_passes, \"typestate checking\",\n+             bind middle::tstate::ck::check_crate(ty_cx, crate));\n     }\n     let mut_map =\n         time(time_passes, \"mutability checking\",\n              bind middle::mut::check_crate(ty_cx, crate));\n     let copy_map =\n         time(time_passes, \"alias checking\",\n              bind middle::alias::check_crate(ty_cx, crate));\n-    time_unit(time_passes, \"kind checking\",\n-           bind kind::check_crate(ty_cx, crate));\n+    time(time_passes, \"kind checking\", bind kind::check_crate(ty_cx, crate));\n     if sess.get_opts().no_trans { ret; }\n     let llmod =\n         time(time_passes, \"translation\",\n              bind trans::trans_crate(sess, crate, ty_cx, output, ast_map,\n                                      mut_map, copy_map));\n-    time_unit(time_passes, \"LLVM passes\",\n-              bind link::write::run_passes(sess, llmod, output));\n+    time(time_passes, \"LLVM passes\",\n+         bind link::write::run_passes(sess, llmod, output));\n }\n \n fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,"}]}