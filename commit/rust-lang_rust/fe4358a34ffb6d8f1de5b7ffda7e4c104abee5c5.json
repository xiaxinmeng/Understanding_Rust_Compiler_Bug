{"sha": "fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNDM1OGEzNGZmYjZkOGYxZGU1YjdmZmRhN2U0YzEwNGFiZWU1YzU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:46Z"}, "message": "Rollup merge of #52825 - RalfJung:codegen, r=alexcrichton\n\nMake sure #47772 does not regress\n\nMostly to make my life in https://github.com/rust-lang/rust/pull/52206 harder.^^\n\nOr should I just add that test there?", "tree": {"sha": "a2ee9ddd0610916e77a48687b22e4fcb3e40645e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ee9ddd0610916e77a48687b22e4fcb3e40645e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWt+CRBK7hj4Ov3rIwAAdHIIAHCmwCdfziPw+qL9/jqPRRv4\nWy+2IHU4fc4JqTFyk+b9fru0TdoPT4dxhoe+HcWo0I4yyPMZp+wv9wdUpOzW5gse\nVqdB3jfOJ03KY9pJj3q8YvMfyRH1RoJXmGzy31r95b3H43WcDmF1pHqXvF2m2OwZ\nK/O1h0sHPZsIZjGavQBxsiQVx2XyFQU5fqDh3CzqpMQCx0eKlvuudx0vZwQ0YKv4\nrOWo1rezQp2HqscldxBFrBjacobHbMuRxj1RsnsisAXAQXDdnYo6mPUYnpIlXzwo\nNNuJnVUu3I1d1tW7EddJkzHTSqrtljUMYj7VKTc+r1aqH7RLp+Vt0DHgI01uzvo=\n=WejA\n-----END PGP SIGNATURE-----\n", "payload": "tree a2ee9ddd0610916e77a48687b22e4fcb3e40645e\nparent 61b9a516d3c0495596b21fae10eab0f82c4c7f7f\nparent fb7d8a12db2a561c7dcc2534714243793446c7c4\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111166 +0200\ncommitter GitHub <noreply@github.com> 1533111166 +0200\n\nRollup merge of #52825 - RalfJung:codegen, r=alexcrichton\n\nMake sure #47772 does not regress\n\nMostly to make my life in https://github.com/rust-lang/rust/pull/52206 harder.^^\n\nOr should I just add that test there?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5", "html_url": "https://github.com/rust-lang/rust/commit/fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b9a516d3c0495596b21fae10eab0f82c4c7f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b9a516d3c0495596b21fae10eab0f82c4c7f7f", "html_url": "https://github.com/rust-lang/rust/commit/61b9a516d3c0495596b21fae10eab0f82c4c7f7f"}, {"sha": "fb7d8a12db2a561c7dcc2534714243793446c7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7d8a12db2a561c7dcc2534714243793446c7c4", "html_url": "https://github.com/rust-lang/rust/commit/fb7d8a12db2a561c7dcc2534714243793446c7c4"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "a6c846d7dab51862a185e42b53543bee84f4d6ec", "filename": "src/test/codegen/slice-position-bounds-check.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5/src%2Ftest%2Fcodegen%2Fslice-position-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5/src%2Ftest%2Fcodegen%2Fslice-position-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-position-bounds-check.rs?ref=fe4358a34ffb6d8f1de5b7ffda7e4c104abee5c5", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-system-llvm\n+// compile-flags: -O -C panic=abort\n+#![crate_type = \"lib\"]\n+\n+fn search<T: Ord + Eq>(arr: &mut [T], a: &T) -> Result<usize, ()> {\n+    match arr.iter().position(|x| x == a) {\n+        Some(p) => {\n+            Ok(p)\n+        },\n+        None => Err(()),\n+    }\n+}\n+\n+// CHECK-LABEL: @position_no_bounds_check\n+#[no_mangle]\n+pub fn position_no_bounds_check(y: &mut [u32], x: &u32, z: &u32) -> bool {\n+    // This contains \"call assume\" so we cannot just rule out all calls\n+    // CHECK-NOT: panic_bounds_check\n+    if let Ok(p) = search(y, x) {\n+      y[p] == *z\n+    } else {\n+      false\n+    }\n+}\n+\n+// just to make sure that panicking really emits \"panic_bounds_check\" somewhere in the IR\n+// CHECK-LABEL: @test_check\n+#[no_mangle]\n+pub fn test_check(y: &[i32]) -> i32 {\n+    // CHECK: panic_bounds_check\n+    y[12]\n+}"}]}