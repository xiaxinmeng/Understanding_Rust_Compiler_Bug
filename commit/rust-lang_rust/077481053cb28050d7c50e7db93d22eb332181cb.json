{"sha": "077481053cb28050d7c50e7db93d22eb332181cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NzQ4MTA1M2NiMjgwNTBkN2M1MGU3ZGI5M2QyMmViMzMyMTgxY2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-08T13:36:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-18T13:06:39Z"}, "message": "refactoring and bugfix", "tree": {"sha": "0a6efd33732c77d0e34086581ec7cca798a396d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6efd33732c77d0e34086581ec7cca798a396d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077481053cb28050d7c50e7db93d22eb332181cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077481053cb28050d7c50e7db93d22eb332181cb", "html_url": "https://github.com/rust-lang/rust/commit/077481053cb28050d7c50e7db93d22eb332181cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077481053cb28050d7c50e7db93d22eb332181cb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463897fd399482bd99fa80871269139f13d740c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/463897fd399482bd99fa80871269139f13d740c8", "html_url": "https://github.com/rust-lang/rust/commit/463897fd399482bd99fa80871269139f13d740c8"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "57dedbdb39e76a7c3c17c930debc7d443c40193f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077481053cb28050d7c50e7db93d22eb332181cb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/077481053cb28050d7c50e7db93d22eb332181cb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=077481053cb28050d7c50e7db93d22eb332181cb", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 136 lints included in this crate:\n+There are 138 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}, {"sha": "f8f2c4fb9a6e5bbd232cf83f7377fd59c444ee37", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/077481053cb28050d7c50e7db93d22eb332181cb/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077481053cb28050d7c50e7db93d22eb332181cb/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=077481053cb28050d7c50e7db93d22eb332181cb", "patch": "@@ -76,13 +76,23 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n         }\n         let count = interned_name.chars().count();\n         if count < 3 {\n-            if count == 1 {\n-                let c = interned_name.chars().next().expect(\"already checked\");\n-                // make sure we ignore shadowing\n-                if !self.0.single_char_names.contains(&c) {\n-                    self.0.single_char_names.push(c);\n-                }\n+            if count != 1 {\n+                return;\n+            }\n+            let c = interned_name.chars().next().expect(\"already checked\");\n+            // make sure we ignore shadowing\n+            if self.0.single_char_names.contains(&c) {\n+                return;\n+            }\n+            self.0.single_char_names.push(c);\n+            if self.0.single_char_names.len() < self.0.lint.max_single_char_names {\n+                return;\n             }\n+            span_lint(self.0.cx,\n+                      MANY_SINGLE_CHAR_NAMES,\n+                      span,\n+                      &format!(\"{}th binding whose name is just one char\",\n+                               self.0.single_char_names.len()));\n             return;\n         }\n         for &allow in WHITELIST {\n@@ -157,39 +167,33 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n }\n \n impl<'a, 'b> SimilarNamesLocalVisitor<'a, 'b> {\n-    fn check_single_char_count(&self, span: Span) {\n-        if self.single_char_names.len() < self.lint.max_single_char_names {\n-            return;\n-        }\n-        span_lint(self.cx,\n-                  MANY_SINGLE_CHAR_NAMES,\n-                  span,\n-                  &format!(\"scope contains {} bindings whose name are just one char\",\n-                           self.single_char_names.len()));\n+    /// ensure scoping rules work\n+    fn apply<F: for<'c> Fn(&'c mut Self)>(&mut self, f: F) {\n+        let n = self.names.len();\n+        let single_char_count = self.single_char_names.len();\n+        f(self);\n+        self.names.truncate(n);\n+        self.single_char_names.truncate(single_char_count);\n     }\n }\n \n impl<'v, 'a, 'b> visit::Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n     fn visit_local(&mut self, local: &'v Local) {\n-        SimilarNamesNameVisitor(self).visit_local(local)\n+        if let Some(ref init) = local.init {\n+            self.apply(|this| visit::walk_expr(this, &**init));\n+        }\n+        // add the pattern after the expression because the bindings aren't available yet in the init expression\n+        SimilarNamesNameVisitor(self).visit_pat(&*local.pat);\n     }\n     fn visit_block(&mut self, blk: &'v Block) {\n-        // ensure scoping rules work\n-        let n = self.names.len();\n-        let single_char_count = self.single_char_names.len();\n-        visit::walk_block(self, blk);\n-        self.names.truncate(n);\n-        self.check_single_char_count(blk.span);\n-        self.single_char_names.truncate(single_char_count);\n+        self.apply(|this| visit::walk_block(this, blk));\n     }\n     fn visit_arm(&mut self, arm: &'v Arm) {\n-        let n = self.names.len();\n-        let single_char_count = self.single_char_names.len();\n-        // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n-        SimilarNamesNameVisitor(self).visit_pat(&arm.pats[0]);\n-        self.names.truncate(n);\n-        self.check_single_char_count(arm.body.span);\n-        self.single_char_names.truncate(single_char_count);\n+        self.apply(|this| {\n+            // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n+            SimilarNamesNameVisitor(this).visit_pat(&arm.pats[0]);\n+            this.apply(|this| visit::walk_expr(this, &arm.body));\n+        });\n     }\n     fn visit_item(&mut self, _: &'v Item) {\n         // do nothing"}, {"sha": "2e3c60cf66a0d1e7f867c58342690f39f8ef19d3", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/077481053cb28050d7c50e7db93d22eb332181cb/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077481053cb28050d7c50e7db93d22eb332181cb/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=077481053cb28050d7c50e7db93d22eb332181cb", "patch": "@@ -34,8 +34,40 @@ fn main() {\n     let cake: i32; //~ NOTE: existing binding defined here\n     let cakes: i32;\n     let coke: i32; //~ ERROR: name is too similar\n+\n+    match 5 {\n+        cheese @ 1 => {},\n+        rabbit => panic!(),\n+    }\n+    let cheese: i32;\n+    match (42, 43) {\n+        (cheese1, 1) => {},\n+        (cheese2, 2) => panic!(),\n+        _ => println!(\"\"),\n+    }\n }\n \n+#[derive(Clone, Debug)]\n+enum MaybeInst {\n+    Split,\n+    Split1(usize),\n+    Split2(usize),\n+}\n+\n+struct InstSplit {\n+    uiae: usize,\n+}\n+\n+impl MaybeInst {\n+    fn fill(&mut self) {\n+        let filled = match *self {\n+            MaybeInst::Split1(goto1) => panic!(1),\n+            MaybeInst::Split2(goto2) => panic!(2),\n+            _ => unimplemented!(),\n+        };\n+        unimplemented!()\n+    }\n+}\n \n fn bla() {\n     let a: i32;\n@@ -45,16 +77,16 @@ fn bla() {\n             let cdefg: i32;\n             let blar: i32;\n         }\n-        { //~ ERROR: scope contains 5 bindings whose name are just one char\n-            let e: i32;\n+        {\n+            let e: i32; //~ ERROR: 5th binding whose name is just one char\n         }\n-        { //~ ERROR: scope contains 6 bindings whose name are just one char\n-            let e: i32;\n-            let f: i32;\n+        {\n+            let e: i32; //~ ERROR: 5th binding whose name is just one char\n+            let f: i32; //~ ERROR: 6th binding whose name is just one char\n         }\n         match 5 {\n             1 => println!(\"\"),\n-            e => panic!(), //~ ERROR: scope contains 5 bindings whose name are just one char\n+            e => panic!(), //~ ERROR: 5th binding whose name is just one char\n         }\n         match 5 {\n             1 => println!(\"\"),"}, {"sha": "24310eb81dae057e88f909f11748f67b3a79d970", "filename": "tests/compile-fail/overflow_check_conditional.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077481053cb28050d7c50e7db93d22eb332181cb/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077481053cb28050d7c50e7db93d22eb332181cb/tests%2Fcompile-fail%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflow_check_conditional.rs?ref=077481053cb28050d7c50e7db93d22eb332181cb", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![allow(many_single_char_names)]\n #![deny(overflow_check_conditional)]\n \n fn main() {"}]}