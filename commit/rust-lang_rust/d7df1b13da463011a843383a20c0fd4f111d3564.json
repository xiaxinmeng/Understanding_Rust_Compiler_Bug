{"sha": "d7df1b13da463011a843383a20c0fd4f111d3564", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGYxYjEzZGE0NjMwMTFhODQzMzgzYTIwYzBmZDRmMTExZDM1NjQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-16T21:37:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-16T21:37:27Z"}, "message": "Rollup merge of #87958 - m-ou-se:closure-migration-multispan-suggestions, r=estebank\n\nClosure migration multispan suggestions\n\nThis changes the `rust_2021_incompatible_closure_captures` lint to only suggest inserting the parts that need to be inserted, instead of suggesting to replace the entire closure by an almost identical closure with one statement added.\n\nBefore:\n```\n[...]\nhelp: add a dummy let to cause `a` to be fully captured\n   |\n5  ~     let _ = || {\n6  +         let _ = &a;\n7  +         dbg!(a.0);\n8  +         println!(\"1\");\n9  +         println!(\"2\");\n10 +         println!(\"3\");\n ...\n   |\n\n[...]\nhelp: add a dummy let to cause `b` to be fully captured\n   |\n14 |     let _ = || { let _ = &b; dbg!(b.0); };\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n[...]\nhelp: add a dummy let to cause `c` to be fully captured\n   |\n16 |     let _ = || { let _ = &c; dbg!(c.0) };\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nAfter:\n```\n[...]\nhelp: add a dummy let to cause `a` to be fully captured\n   |\n5  ~     let _ = || {\n6  +         let _ = &a;\n   |\n\n[...]\nhelp: add a dummy let to cause `b` to be fully captured\n   |\n14 |     let _ = || { let _ = &b; dbg!(b.0); };\n   |                  +++++++++++\n\n[...]\nhelp: add a dummy let to cause `c` to be fully captured\n   |\n16 |     let _ = || { let _ = &c; dbg!(c.0) };\n   |                +++++++++++++           +\n```", "tree": {"sha": "156ccd5f33670e0bd8a411a52bdf964f0fe5c586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156ccd5f33670e0bd8a411a52bdf964f0fe5c586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7df1b13da463011a843383a20c0fd4f111d3564", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhGtqXCRBK7hj4Ov3rIwAAJyYIADDc7zJIu3cPU0n8EDP6q6Sp\n3BxLXGIN+Gs8Lx9Nxzl2NxY5WoCANCH09wFjKZWATOuT/newB0JfElROPPapAeW6\nfWI+mZXs59pxlw3Qaa8oolRZgTzoCosk7CfKsrqqVRSMTsvTW/zfMq5DkkLqA/Pj\nsZReMbvw8ViBERtwt7vYEyXDmtNyJJRYp/zgLF0Aem7/LrZTCpJ1FSkEcMs6n+hV\nW87ydX0CzSlzTHUplVNHTAzFRdui/13PzkxuJaEDOqjcIcfStWscqKVSWV4HcOH8\nNKI3hk5Re/CKtZCD6d/47n8NvIZI/sFIu/mLcGOe4KmyKIuUZIsaY3Q10F1kEkI=\n=C8vX\n-----END PGP SIGNATURE-----\n", "payload": "tree 156ccd5f33670e0bd8a411a52bdf964f0fe5c586\nparent 84ca374bcb758d50a9c9a6e22eaa212f0d34abf9\nparent 64310977e6e890563d9dfd6d9b2d6d6442ffd281\nauthor Mara Bos <m-ou.se@m-ou.se> 1629149847 +0200\ncommitter GitHub <noreply@github.com> 1629149847 +0200\n\nRollup merge of #87958 - m-ou-se:closure-migration-multispan-suggestions, r=estebank\n\nClosure migration multispan suggestions\n\nThis changes the `rust_2021_incompatible_closure_captures` lint to only suggest inserting the parts that need to be inserted, instead of suggesting to replace the entire closure by an almost identical closure with one statement added.\n\nBefore:\n```\n[...]\nhelp: add a dummy let to cause `a` to be fully captured\n   |\n5  ~     let _ = || {\n6  +         let _ = &a;\n7  +         dbg!(a.0);\n8  +         println!(\"1\");\n9  +         println!(\"2\");\n10 +         println!(\"3\");\n ...\n   |\n\n[...]\nhelp: add a dummy let to cause `b` to be fully captured\n   |\n14 |     let _ = || { let _ = &b; dbg!(b.0); };\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n[...]\nhelp: add a dummy let to cause `c` to be fully captured\n   |\n16 |     let _ = || { let _ = &c; dbg!(c.0) };\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nAfter:\n```\n[...]\nhelp: add a dummy let to cause `a` to be fully captured\n   |\n5  ~     let _ = || {\n6  +         let _ = &a;\n   |\n\n[...]\nhelp: add a dummy let to cause `b` to be fully captured\n   |\n14 |     let _ = || { let _ = &b; dbg!(b.0); };\n   |                  +++++++++++\n\n[...]\nhelp: add a dummy let to cause `c` to be fully captured\n   |\n16 |     let _ = || { let _ = &c; dbg!(c.0) };\n   |                +++++++++++++           +\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7df1b13da463011a843383a20c0fd4f111d3564", "html_url": "https://github.com/rust-lang/rust/commit/d7df1b13da463011a843383a20c0fd4f111d3564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7df1b13da463011a843383a20c0fd4f111d3564/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ca374bcb758d50a9c9a6e22eaa212f0d34abf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ca374bcb758d50a9c9a6e22eaa212f0d34abf9", "html_url": "https://github.com/rust-lang/rust/commit/84ca374bcb758d50a9c9a6e22eaa212f0d34abf9"}, {"sha": "64310977e6e890563d9dfd6d9b2d6d6442ffd281", "url": "https://api.github.com/repos/rust-lang/rust/commits/64310977e6e890563d9dfd6d9b2d6d6442ffd281", "html_url": "https://github.com/rust-lang/rust/commit/64310977e6e890563d9dfd6d9b2d6d6442ffd281"}], "stats": {"total": 286, "additions": 97, "deletions": 189}, "files": [{"sha": "f4da3d3c8704ea2f863992ee600e341f8d3c01dd", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -47,7 +47,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span, Symbol, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n@@ -645,6 +645,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n \n+                    let diagnostic_msg = format!(\n+                        \"add a dummy let to cause {} to be fully captured\",\n+                        migrated_variables_concat\n+                    );\n+\n                     let mut closure_body_span = self.tcx.hir().span(body_id.hir_id);\n \n                     // If the body was entirely expanded from a macro\n@@ -655,43 +660,54 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         closure_body_span = closure_body_span.parent().unwrap_or(DUMMY_SP);\n                     }\n \n-                    let (span, sugg, app) =\n-                        match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n-                            Ok(s) => {\n-                                let trimmed = s.trim_start();\n-                                let mut lines = trimmed.lines();\n-                                let line1 = lines.next().unwrap_or_default();\n-\n-                                // If the closure contains a block then replace the opening brace\n-                                // with \"{ let _ = (..); \"\n-                                let sugg = if line1.trim_end() == \"{\" {\n-                                    // This is a multi-line closure with just a `{` on the first line,\n-                                    // so we put the `let` on its own line.\n-                                    // We take the indentation from the next non-empty line.\n-                                    let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n-                                    let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n-                                    format!(\"{{\\n{}{};{}\", indent, migration_string, &trimmed[line1.len()..])\n-                                } else if line1.starts_with('{') {\n-                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..].trim_start())\n-                                } else {\n-                                    format!(\"{{ {}; {} }}\", migration_string, s)\n-                                };\n-                                (closure_body_span, sugg, Applicability::MachineApplicable)\n-                            }\n-                            Err(_) => (closure_span, migration_string.clone(), Applicability::HasPlaceholders),\n-                        };\n-\n-                    let diagnostic_msg = format!(\n-                        \"add a dummy let to cause {} to be fully captured\",\n-                        migrated_variables_concat\n-                    );\n+                    if let Ok(s) = self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n+                        let mut lines = s.lines();\n+                        let line1 = lines.next().unwrap_or_default();\n+\n+                        if line1.trim_end() == \"{\" {\n+                            // This is a multi-line closure with just a `{` on the first line,\n+                            // so we put the `let` on its own line.\n+                            // We take the indentation from the next non-empty line.\n+                            let line2 = lines.filter(|line| !line.is_empty()).next().unwrap_or_default();\n+                            let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n+                            diagnostics_builder.span_suggestion(\n+                                closure_body_span.with_lo(closure_body_span.lo() + BytePos::from_usize(line1.len())).shrink_to_lo(),\n+                                &diagnostic_msg,\n+                                format!(\"\\n{}{};\", indent, migration_string),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if line1.starts_with('{') {\n+                            // This is a closure with its body wrapped in\n+                            // braces, but with more than just the opening\n+                            // brace on the first line. We put the `let`\n+                            // directly after the `{`.\n+                            diagnostics_builder.span_suggestion(\n+                                closure_body_span.with_lo(closure_body_span.lo() + BytePos(1)).shrink_to_lo(),\n+                                &diagnostic_msg,\n+                                format!(\" {};\", migration_string),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            // This is a closure without braces around the body.\n+                            // We add braces to add the `let` before the body.\n+                            diagnostics_builder.multipart_suggestion(\n+                                &diagnostic_msg,\n+                                vec![\n+                                    (closure_body_span.shrink_to_lo(), format!(\"{{ {}; \", migration_string)),\n+                                    (closure_body_span.shrink_to_hi(), \" }\".to_string()),\n+                                ],\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n+                    } else {\n+                        diagnostics_builder.span_suggestion(\n+                            closure_span,\n+                            &diagnostic_msg,\n+                            migration_string,\n+                            Applicability::HasPlaceholders\n+                        );\n+                    }\n \n-                    diagnostics_builder.span_suggestion(\n-                        span,\n-                        &diagnostic_msg,\n-                        sugg,\n-                        app,\n-                    );\n                     diagnostics_builder.emit();\n                 },\n             );"}, {"sha": "98396abb6ff66d6f11cd3c5a3d3a331e01709899", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -16,11 +16,11 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL +\n-LL +\n-LL +\n-LL +\n-LL +         *fptr.0 = 20;\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         *fptr.0 = 20;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n@@ -36,11 +36,11 @@ LL |         *fptr.0.0 = 20;\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {\n-LL +\n-LL +\n-LL +\n-LL +\n-LL +         *fptr.0.0 = 20;\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         *fptr.0.0 = 20;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n@@ -60,11 +60,7 @@ help: add a dummy let to cause `f` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7989a8fa5ccae1957c7972867e45ac6c54183a6b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -30,11 +30,7 @@ help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1, &t2);\n-LL +\n-LL +\n-LL +\n-LL + \n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:41:13\n@@ -59,11 +55,7 @@ help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1);\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:62:13\n@@ -82,11 +74,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:83:13\n@@ -105,11 +93,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:104:13\n@@ -128,11 +112,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:122:13\n@@ -156,11 +136,7 @@ help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL ~     let c = move || {\n LL +         let _ = (&t1, &t);\n-LL +\n-LL +\n-LL +\n-LL +         println!(\"{} {}\", t1.1, t.1);\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:142:13\n@@ -179,11 +155,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "961834aca194d4b2daef9f515bae695f76a66fc7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -20,11 +20,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop_attr_migrations.rs:57:13\n@@ -43,11 +39,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = move || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.1;\n- ...\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d1f959dfc520e2fe8f5f5e2965c2ff4670f26c1a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -18,7 +18,7 @@ LL | #![deny(rust_2021_incompatible_closure_captures)]\n help: add a dummy let to cause `a` to be fully captured\n    |\n LL |     let _ = || { let _ = &a; dbg!(a.0) };\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                +++++++++++++           +\n \n error: aborting due to previous error\n "}, {"sha": "3589a6150d064b8e74731e0be1b8161eb45a7415", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -20,11 +20,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/migrations_rustfix.rs:33:13\n@@ -41,7 +37,7 @@ LL | }\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; t.0 };\n-   |                ~~~~~~~~~~~~~~~~~~~\n+   |                +++++++++++++     +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "10816b7bc3adf9346df3414fd7ed2105e6b6a621", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -17,11 +17,7 @@ help: add a dummy let to cause `f` to be fully captured\n    |\n LL ~     let result = panic::catch_unwind(move || {\n LL +         let _ = &f;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8bee950c13eca0273b93632434119816ad03661c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -23,11 +23,7 @@ help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&f1, &f2);\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n   --> $DIR/multi_diagnostics.rs:42:13\n@@ -43,11 +39,7 @@ help: add a dummy let to cause `f1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f1;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n   --> $DIR/multi_diagnostics.rs:67:13\n@@ -69,11 +61,7 @@ help: add a dummy let to cause `f1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f1;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n   --> $DIR/multi_diagnostics.rs:86:13\n@@ -98,11 +86,7 @@ help: add a dummy let to cause `f1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &f1;\n-LL +\n-LL +\n-LL +\n-LL +\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n   --> $DIR/multi_diagnostics.rs:119:19\n@@ -123,11 +107,11 @@ LL |         *fptr2.0 = 20;\n help: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n-LL +\n-LL +\n-LL +\n-LL +\n-LL +\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |\n  ...\n \n error: aborting due to 5 previous errors"}, {"sha": "aa9b8672a0ffbdc6c6d36a89500323b7f19feb61", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -20,11 +20,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/precise.rs:45:13\n@@ -53,11 +49,7 @@ help: add a dummy let to cause `u` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &u;\n-LL +\n-LL +\n-LL +\n-LL +         let _x = u.0.0;\n- ...\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9170eba3f17665f3855d65e8c389f1c5516996e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7df1b13da463011a843383a20c0fd4f111d3564/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=d7df1b13da463011a843383a20c0fd4f111d3564", "patch": "@@ -30,11 +30,7 @@ help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1, &t2);\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:50:13\n@@ -59,11 +55,7 @@ help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = (&t, &t1);\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:71:13\n@@ -82,11 +74,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:91:13\n@@ -105,11 +93,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:109:13\n@@ -128,11 +112,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:125:13\n@@ -151,11 +131,7 @@ help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {\n LL +         let _ = &t;\n-LL +\n-LL +\n-LL +\n-LL +         let _t = t.1;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:143:13\n@@ -179,11 +155,7 @@ help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL ~     let c = move || {\n LL +         let _ = (&t1, &t);\n-LL +\n-LL +\n-LL +\n-LL +         println!(\"{:?} {:?}\", t1.1, t.1);\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:163:21\n@@ -202,11 +174,7 @@ help: add a dummy let to cause `tuple` to be fully captured\n    |\n LL ~             let c = || {\n LL +                 let _ = &tuple;\n-LL +\n-LL +\n-LL +\n-LL +                 tuple.0;\n- ...\n+   |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:181:17\n@@ -225,11 +193,7 @@ help: add a dummy let to cause `tuple` to be fully captured\n    |\n LL ~         let c = || {\n LL +             let _ = &tuple;\n-LL +\n-LL +\n-LL +\n-LL +             tuple.0;\n- ...\n+   |\n \n error: aborting due to 9 previous errors\n "}]}