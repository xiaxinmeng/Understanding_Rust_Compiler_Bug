{"sha": "b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NmMwZmM0OTc0OWFmZmMwZmM5NTNlOGNkYzEzNmY1YWZmNWMxYjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T20:50:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T23:00:35Z"}, "message": "address nits from dotdash", "tree": {"sha": "6b39a3206d8393f48327dc9474189854c588a748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b39a3206d8393f48327dc9474189854c588a748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "html_url": "https://github.com/rust-lang/rust/commit/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9f4be9df863e529b09f195f013710e676fb5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9f4be9df863e529b09f195f013710e676fb5c1", "html_url": "https://github.com/rust-lang/rust/commit/9c9f4be9df863e529b09f195f013710e676fb5c1"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "f5fa897bca63122c0b768a6b39819c408f12061e", "filename": "src/librustc_trans/trans/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fanalyze.rs?ref=b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "patch": "@@ -30,7 +30,7 @@ pub fn lvalue_temps<'bcx,'tcx>(bcx: Block<'bcx,'tcx>,\n         if\n             ty.is_scalar() ||\n             ty.is_unique() ||\n-            ty.is_region_ptr() ||\n+            (ty.is_region_ptr() && !common::type_is_fat_ptr(bcx.tcx(), ty)) ||\n             ty.is_simd()\n         {\n             // These sorts of types are immediates that we can store\n@@ -42,7 +42,7 @@ pub fn lvalue_temps<'bcx,'tcx>(bcx: Block<'bcx,'tcx>,\n             // for newtypes, but we currently force some types\n             // (e.g. structs) into an alloca unconditionally, just so\n             // that we don't have to deal with having two pathways\n-            // (gep vs getvalue etc).\n+            // (gep vs extractvalue etc).\n             analyzer.mark_as_lvalue(index);\n         }\n     }"}, {"sha": "3b018cc132184b54ccac287a770c65a5e402d533", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "patch": "@@ -55,6 +55,9 @@ pub struct MirContext<'bcx, 'tcx:'bcx> {\n     ///     - nor should it appear in an lvalue path like `tmp.a`\n     /// - the operand must be defined by an rvalue that can generate immediate\n     ///   values\n+    ///\n+    /// Avoiding allocs can also be important for certain intrinsics,\n+    /// notably `expect`.\n     temps: Vec<TempRef<'tcx>>,\n \n     /// The arguments to the function; as args are lvalues, these are"}, {"sha": "94cc7857a14f0a94ddff73d91641f13a5cb16eb9", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46c0fc49749affc0fc953e8cdc136f5aff5c1b3/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=b46c0fc49749affc0fc953e8cdc136f5aff5c1b3", "patch": "@@ -20,6 +20,7 @@ use trans::build;\n use trans::common::{self, Block, Result};\n use trans::debuginfo::DebugLoc;\n use trans::declare;\n+use trans::expr;\n use trans::machine;\n use trans::type_::Type;\n use trans::type_of;\n@@ -55,6 +56,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::Rvalue::Aggregate(_, ref operands) => {\n                 for (i, operand) in operands.iter().enumerate() {\n+                    // Note: perhaps this should be StructGep, but\n+                    // note that in some cases the values here will\n+                    // not be structs but arrays.\n                     let lldest_i = build::GEPi(bcx, lldest, &[0, i]);\n                     self.trans_operand_into(bcx, lldest_i, operand);\n                 }\n@@ -70,8 +74,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let llbase1 = build::GEPi(bcx, llbase, &[from_start]);\n                 let adj = common::C_uint(ccx, from_start + from_end);\n                 let lllen1 = build::Sub(bcx, lllen, adj, DebugLoc::None);\n-                build::Store(bcx, llbase1, build::GEPi(bcx, lldest, &[0, abi::FAT_PTR_ADDR]));\n-                build::Store(bcx, lllen1, build::GEPi(bcx, lldest, &[0, abi::FAT_PTR_EXTRA]));\n+                let lladdrdest = expr::get_dataptr(bcx, lldest);\n+                build::Store(bcx, llbase1, lladdrdest);\n+                let llmetadest = expr::get_meta(bcx, lldest);\n+                build::Store(bcx, lllen1, llmetadest);\n                 bcx\n             }\n "}]}