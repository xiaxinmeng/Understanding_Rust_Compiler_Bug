{"sha": "1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZmIzMjE0NzdkODVmYjNjOTVhMGJlMmEwY2Q4OWMwNGRmZjBkOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T20:44:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T20:44:04Z"}, "message": "Auto merge of #51257 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #49546 (Stabilize short error format)\n - #51123 (Update build instructions)\n - #51146 (typeck: Do not pass the field check on field error)\n - #51193 (Fixes some style issues in rustdoc \"implementations on Foreign types\")\n - #51213 (fs: copy: Use File::set_permissions instead of fs::set_permissions)\n - #51227 (mod.rs isn't beautiful)\n - #51240 (Two minor parsing tweaks)\n\nFailed merges:", "tree": {"sha": "2bf9c53f13bfbcc7549f2e2a2e2ab7ca92ca59e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf9c53f13bfbcc7549f2e2a2e2ab7ca92ca59e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "html_url": "https://github.com/rust-lang/rust/commit/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1", "html_url": "https://github.com/rust-lang/rust/commit/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1"}, {"sha": "7552c2ea6485a173a3c8241afc82e8fefe061885", "url": "https://api.github.com/repos/rust-lang/rust/commits/7552c2ea6485a173a3c8241afc82e8fefe061885", "html_url": "https://github.com/rust-lang/rust/commit/7552c2ea6485a173a3c8241afc82e8fefe061885"}], "stats": {"total": 175, "additions": 133, "deletions": 42}, "files": [{"sha": "04816762f14cb1d14a8d52314a2a921f8026bd10", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -38,6 +38,7 @@ Read [\"Installation\"] from [The Book].\n 3. Build and install:\n \n     ```sh\n+    $ git submodule update --init --recursive --progress\n     $ ./x.py build && sudo ./x.py install\n     ```\n "}, {"sha": "59bcf1383f47a27580a05cd6c9fa8f4bd15f0c84", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -60,10 +60,10 @@ use fmt::{self, Write};\n use iter::FusedIterator;\n \n // UTF-8 ranges and tags for encoding characters\n-const TAG_CONT: u8    = 0b1000_0000;\n-const TAG_TWO_B: u8   = 0b1100_0000;\n-const TAG_THREE_B: u8 = 0b1110_0000;\n-const TAG_FOUR_B: u8  = 0b1111_0000;\n+const TAG_CONT: u8     = 0b1000_0000;\n+const TAG_TWO_B: u8    = 0b1100_0000;\n+const TAG_THREE_B: u8  = 0b1110_0000;\n+const TAG_FOUR_B: u8   = 0b1111_0000;\n const MAX_ONE_B: u32   =     0x80;\n const MAX_TWO_B: u32   =    0x800;\n const MAX_THREE_B: u32 =  0x10000;"}, {"sha": "cc8e8c7c31c20301392a2d8da9622f2f387c5c1f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -1799,19 +1799,7 @@ pub fn build_session_options_and_crate_config(\n             Some(\"human\") => ErrorOutputType::HumanReadable(color),\n             Some(\"json\") => ErrorOutputType::Json(false),\n             Some(\"pretty-json\") => ErrorOutputType::Json(true),\n-            Some(\"short\") => {\n-                if nightly_options::is_unstable_enabled(matches) {\n-                    ErrorOutputType::Short(color)\n-                } else {\n-                    early_error(\n-                        ErrorOutputType::default(),\n-                        &format!(\n-                            \"the `-Z unstable-options` flag must also be passed to \\\n-                             enable the short error message option\"\n-                        ),\n-                    );\n-                }\n-            }\n+            Some(\"short\") => ErrorOutputType::Short(color),\n             None => ErrorOutputType::HumanReadable(color),\n \n             Some(arg) => early_error("}, {"sha": "f65acf08c86d8f3ad109829c5b264a4c4fe5efa6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -1047,7 +1047,7 @@ impl EmitterWriter {\n                     }\n                 } else {\n                     buffer.prepend(0,\n-                                   &format!(\"{}:{}:{} - \",\n+                                   &format!(\"{}:{}:{}: \",\n                                             loc.file.name,\n                                             cm.doctest_offset_line(loc.line),\n                                             loc.col.0 + 1),"}, {"sha": "c260655bd3e83a366a1d0b2957bf8356e9e5407a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -721,8 +721,11 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         self.demand_eqtype(pat.span, expected, pat_ty);\n \n         // Type check subpatterns.\n-        self.check_struct_pat_fields(pat_ty, pat.id, pat.span, variant, fields, etc, def_bm);\n-        pat_ty\n+        if self.check_struct_pat_fields(pat_ty, pat.id, pat.span, variant, fields, etc, def_bm) {\n+            pat_ty\n+        } else {\n+            self.tcx.types.err\n+        }\n     }\n \n     fn check_pat_path(&self,\n@@ -847,7 +850,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                                variant: &'tcx ty::VariantDef,\n                                fields: &'gcx [Spanned<hir::FieldPat>],\n                                etc: bool,\n-                               def_bm: ty::BindingMode) {\n+                               def_bm: ty::BindingMode) -> bool {\n         let tcx = self.tcx;\n \n         let (substs, adt) = match adt_ty.sty {\n@@ -865,6 +868,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n         // Keep track of which fields have already appeared in the pattern.\n         let mut used_fields = FxHashMap();\n+        let mut no_field_errors = true;\n \n         let mut inexistent_fields = vec![];\n         // Typecheck each field.\n@@ -880,6 +884,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                                     format!(\"multiple uses of `{}` in pattern\", field.ident))\n                         .span_label(*occupied.get(), format!(\"first use of `{}`\", field.ident))\n                         .emit();\n+                    no_field_errors = false;\n                     tcx.types.err\n                 }\n                 Vacant(vacant) => {\n@@ -892,6 +897,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                         })\n                         .unwrap_or_else(|| {\n                             inexistent_fields.push((span, field.ident));\n+                            no_field_errors = false;\n                             tcx.types.err\n                         })\n                 }\n@@ -990,5 +996,6 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 diag.emit();\n             }\n         }\n+        no_field_errors\n     }\n }"}, {"sha": "bb9a7e472324882059ad14b805efbdd37c0bfb1d", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -1979,7 +1979,7 @@\n         onEach(e.getElementsByClassName('associatedconstant'), func);\n     });\n \n-    function createToggle(otherMessage) {\n+    function createToggle(otherMessage, extraClass) {\n         var span = document.createElement('span');\n         span.className = 'toggle-label';\n         span.style.display = 'none';\n@@ -1995,6 +1995,9 @@\n \n         var wrapper = document.createElement('div');\n         wrapper.className = 'toggle-wrapper';\n+        if (extraClass) {\n+            wrapper.className += ' ' + extraClass;\n+        }\n         wrapper.appendChild(mainToggle);\n         return wrapper;\n     }\n@@ -2023,10 +2026,13 @@\n         }\n         if (e.parentNode.id === \"main\") {\n             var otherMessage;\n+            var extraClass;\n             if (hasClass(e, \"type-decl\")) {\n                 otherMessage = '&nbsp;Show&nbsp;declaration';\n+            } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n+                extraClass = \"marg-left\";\n             }\n-            e.parentNode.insertBefore(createToggle(otherMessage), e);\n+            e.parentNode.insertBefore(createToggle(otherMessage, extraClass), e);\n             if (otherMessage && getCurrentValue('rustdoc-item-declarations') !== \"false\") {\n                 collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n             }"}, {"sha": "83abf35c85484babb7e44ced2ceaf9af236f56f5", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -474,11 +474,30 @@ h4 > code, h3 > code, .invisible > code {\n \tmargin-bottom: 15px;\n }\n \n+.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n+\tmargin-left: 20px;\n+}\n .content .impl-items .docblock, .content .impl-items .stability {\n \tmargin-bottom: .6em;\n }\n-.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n+.content .docblock > .impl-items {\n \tmargin-left: 20px;\n+\tmargin-top: -34px;\n+}\n+.content .docblock > .impl-items > h4 {\n+\tborder-bottom: 0;\n+}\n+.content .docblock >.impl-items .table-display {\n+\tmargin: 0;\n+}\n+.content .docblock >.impl-items table td {\n+\tpadding: 0;\n+}\n+.toggle-wrapper.marg-left > .collapse-toggle {\n+\tleft: -24px;\n+}\n+.content .docblock > .impl-items .table-display, .impl-items table td {\n+\tborder: none;\n }\n \n .content .stability code {\n@@ -542,7 +561,7 @@ a {\n \tcontent: '\\2002\\00a7\\2002';\n }\n \n-.docblock a:hover, .docblock-short a:hover, .stability a {\n+.docblock a:not(.srclink):hover, .docblock-short a:not(.srclink):hover, .stability a {\n \ttext-decoration: underline;\n }\n "}, {"sha": "765ef0cd415b79b21bebcb4af6a4d1a0f8eeec5b", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -33,7 +33,7 @@ h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.t\n \tbackground: rgba(0, 0, 0, 0);\n }\n \n-.docblock code, .docblock-short code {\n+.docblock p > code, .docblock-short p > code {\n \tbackground-color: #2A2A2A;\n }\n pre {\n@@ -163,7 +163,7 @@ a {\n \tcolor: #ddd;\n }\n \n-.docblock a, .docblock-short a, .stability a {\n+.docblock a:not(.srclink), .docblock-short a:not(.srclink), .stability a {\n \tcolor: #D2991D;\n }\n "}, {"sha": "5971dc43deda423dbd00fc5a882ffc945a6798a6", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -35,7 +35,7 @@ h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.t\n \tbackground: rgba(0, 0, 0, 0);\n }\n \n-.docblock code, .docblock-short code {\n+.docblock p > code, .docblock-short p > code {\n \tbackground-color: #F5F5F5;\n }\n pre {\n@@ -163,7 +163,7 @@ a {\n \tcolor: #000;\n }\n \n-.docblock a, .docblock-short a, .stability a {\n+.docblock a:not(.srclink), .docblock-short a:not(.srclink), .stability a {\n \tcolor: #3873AD;\n }\n "}, {"sha": "c4092dcd3889d40004c2a30284c57400dee4bd28", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -817,7 +817,7 @@ pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n-    use fs::{File, set_permissions};\n+    use fs::File;\n     if !from.is_file() {\n         return Err(Error::new(ErrorKind::InvalidInput,\n                               \"the source path is not an existing regular file\"))\n@@ -828,14 +828,14 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     let perm = reader.metadata()?.permissions();\n \n     let ret = io::copy(&mut reader, &mut writer)?;\n-    set_permissions(to, perm)?;\n+    writer.set_permissions(perm)?;\n     Ok(ret)\n }\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     use cmp;\n-    use fs::{File, set_permissions};\n+    use fs::File;\n     use sync::atomic::{AtomicBool, Ordering};\n \n     // Kernel prior to 4.5 don't have copy_file_range\n@@ -907,14 +907,14 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n                         // Try again with fallback method\n                         assert_eq!(written, 0);\n                         let ret = io::copy(&mut reader, &mut writer)?;\n-                        set_permissions(to, perm)?;\n+                        writer.set_permissions(perm)?;\n                         return Ok(ret)\n                     },\n                     _ => return Err(err),\n                 }\n             }\n         }\n     }\n-    set_permissions(to, perm)?;\n+    writer.set_permissions(perm)?;\n     Ok(written)\n }"}, {"sha": "04e180cd0538fc9577d0493136201fa6a1ba53d2", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -516,6 +516,7 @@ impl<'a> StringReader<'a> {\n             return None;\n         }\n         let start = self.pos;\n+        self.bump();\n         while ident_continue(self.ch) {\n             self.bump();\n         }\n@@ -1155,6 +1156,7 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 let start = self.pos;\n+                self.bump();\n                 while ident_continue(self.ch) {\n                     self.bump();\n                 }\n@@ -1300,11 +1302,7 @@ impl<'a> StringReader<'a> {\n                     }\n                     '-' => {\n                         self.bump();\n-                        match self.ch.unwrap_or('\\x00') {\n-                            _ => {\n-                                Ok(token::LArrow)\n-                            }\n-                        }\n+                        Ok(token::LArrow)\n                     }\n                     _ => {\n                         Ok(token::Lt)"}, {"sha": "c8f106687ae1cb4d8b517a2fc46d80a1515d8994", "filename": "src/test/ui/issue-51102.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fissue-51102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fissue-51102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51102.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum SimpleEnum {\n+    NoState,\n+}\n+\n+struct SimpleStruct {\n+    no_state_here: u64,\n+}\n+\n+fn main() {\n+    let _ = |simple| {\n+        match simple {\n+            SimpleStruct {\n+                state: 0,\n+                //~^ struct `SimpleStruct` does not have a field named `state` [E0026]\n+                ..\n+            } => (),\n+        }\n+    };\n+\n+    let _ = |simple| {\n+        match simple {\n+            SimpleStruct {\n+                no_state_here: 0,\n+                no_state_here: 1\n+                //~^ ERROR field `no_state_here` bound multiple times in the pattern [E0025]\n+            } => (),\n+        }\n+    };\n+\n+    let _ = |simple| {\n+        match simple {\n+            SimpleEnum::NoState {\n+                state: 0\n+                //~^ ERROR variant `SimpleEnum::NoState` does not have a field named `state` [E0026]\n+            } => (),\n+        }\n+    };\n+}"}, {"sha": "a4bd0fb914fee7ba825f972ed73a7cf20a767dfe", "filename": "src/test/ui/issue-51102.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fissue-51102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fissue-51102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51102.stderr?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -0,0 +1,24 @@\n+error[E0026]: struct `SimpleStruct` does not have a field named `state`\n+  --> $DIR/issue-51102.rs:23:17\n+   |\n+LL |                 state: 0,\n+   |                 ^^^^^^^^ struct `SimpleStruct` does not have this field\n+\n+error[E0025]: field `no_state_here` bound multiple times in the pattern\n+  --> $DIR/issue-51102.rs:34:17\n+   |\n+LL |                 no_state_here: 0,\n+   |                 ---------------- first use of `no_state_here`\n+LL |                 no_state_here: 1\n+   |                 ^^^^^^^^^^^^^^^^ multiple uses of `no_state_here` in pattern\n+\n+error[E0026]: variant `SimpleEnum::NoState` does not have a field named `state`\n+  --> $DIR/issue-51102.rs:43:17\n+   |\n+LL |                 state: 0\n+   |                 ^^^^^^^^ variant `SimpleEnum::NoState` does not have this field\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0025, E0026.\n+For more information about an error, try `rustc --explain E0025`."}, {"sha": "3e6802c51c3a695bff14dcacdd25178d38cf42f5", "filename": "src/test/ui/short-error-format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fshort-error-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fshort-error-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshort-error-format.rs?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --error-format=short -Zunstable-options\n+// compile-flags: --error-format=short\n \n fn foo(_: u32) {}\n "}, {"sha": "f7461b837bdc14bd354f420f261aeb90cce48e3c", "filename": "src/test/ui/short-error-format.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fshort-error-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d/src%2Ftest%2Fui%2Fshort-error-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshort-error-format.stderr?ref=1ffb321477d85fb3c95a0be2a0cd89c04dff0d8d", "patch": "@@ -1,3 +1,3 @@\n-$DIR/short-error-format.rs:16:9 - error[E0308]: mismatched types\n-$DIR/short-error-format.rs:18:7 - error[E0599]: no method named `salut` found for type `u32` in the current scope\n+$DIR/short-error-format.rs:16:9: error[E0308]: mismatched types\n+$DIR/short-error-format.rs:18:7: error[E0599]: no method named `salut` found for type `u32` in the current scope\n error: aborting due to 2 previous errors"}]}