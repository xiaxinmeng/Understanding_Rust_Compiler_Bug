{"sha": "c0c57910490c34517bd8405cd55bf4696cc2fddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzU3OTEwNDkwYzM0NTE3YmQ4NDA1Y2Q1NWJmNDY5NmNjMmZkZGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-11T13:11:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Add feature gate tests.", "tree": {"sha": "327d8816d4befb456b24a48a9413493ee54e998d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/327d8816d4befb456b24a48a9413493ee54e998d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c57910490c34517bd8405cd55bf4696cc2fddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c57910490c34517bd8405cd55bf4696cc2fddd", "html_url": "https://github.com/rust-lang/rust/commit/c0c57910490c34517bd8405cd55bf4696cc2fddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c57910490c34517bd8405cd55bf4696cc2fddd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357b49992c5a468b2d737e77e1ef343a2744a689", "url": "https://api.github.com/repos/rust-lang/rust/commits/357b49992c5a468b2d737e77e1ef343a2744a689", "html_url": "https://github.com/rust-lang/rust/commit/357b49992c5a468b2d737e77e1ef343a2744a689"}], "stats": {"total": 380, "additions": 380, "deletions": 0}, "files": [{"sha": "cf4a44a9ce773b33232f9fccbcaf038dd4360962", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c0c57910490c34517bd8405cd55bf4696cc2fddd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c57910490c34517bd8405cd55bf4696cc2fddd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=c0c57910490c34517bd8405cd55bf4696cc2fddd", "patch": "@@ -0,0 +1,101 @@\n+// gate-test-let_chains\n+\n+// Here we test feature gating for \u00b4let_chains`.\n+// See `disallowed-positions.rs` for the grammar\n+// defining the language for gated allowed positions.\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+use std::ops::Range;\n+\n+fn _if() {\n+    if let 0 = 1 {} // Stable!\n+\n+    if (let 0 = 1) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions only supported in `if`\n+\n+    if (((let 0 = 1))) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if true && let 0 = 1 {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if let 0 = 1 && true {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if (let 0 = 1) && true {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if true && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if (let 0 = 1) && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+\n+    if let Range { start: _, end: _ } = (true..true) && false {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+}\n+\n+fn _while() {\n+    if let 0 = 1 {} // Stable!\n+\n+    while (let 0 = 1) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while (((let 0 = 1))) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while true && let 0 = 1 {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while let 0 = 1 && true {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while (let 0 = 1) && true {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while true && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while (let 0 = 1) && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+    //~| ERROR `let` expressions in this position are experimental [E0658]\n+\n+    while let Range { start: _, end: _ } = (true..true) && false {}\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+}\n+\n+fn _macros() {\n+    macro_rules! noop_expr { ($e:expr) => {}; }\n+    noop_expr!((let 0 = 1));\n+\n+    macro_rules! use_expr {\n+        ($e:expr) => {\n+            if $e {}\n+            while $e {}\n+        }\n+    }\n+    use_expr!(let 0 = 1 && 0 == 0);\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    use_expr!((let 0 = 1));\n+    //~^ ERROR `let` expressions in this position are experimental [E0658]\n+    use_expr!(let 0 = 1);\n+}\n+\n+fn main() {}"}, {"sha": "f641429a6bbb958a8da2c28e3d52dd29c1980419", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/c0c57910490c34517bd8405cd55bf4696cc2fddd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c57910490c34517bd8405cd55bf4696cc2fddd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=c0c57910490c34517bd8405cd55bf4696cc2fddd", "patch": "@@ -0,0 +1,279 @@\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:14:9\n+   |\n+LL |     if (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:18:11\n+   |\n+LL |     if (((let 0 = 1))) {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:21:16\n+   |\n+LL |     if true && let 0 = 1 {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:24:8\n+   |\n+LL |     if let 0 = 1 && true {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:27:9\n+   |\n+LL |     if (let 0 = 1) && true {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:30:17\n+   |\n+LL |     if true && (let 0 = 1) {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:33:9\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:33:24\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:37:8\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:37:21\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                     ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:37:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:37:48\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:37:61\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                             ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:44:8\n+   |\n+LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:51:12\n+   |\n+LL |     while (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:54:14\n+   |\n+LL |     while (((let 0 = 1))) {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:57:19\n+   |\n+LL |     while true && let 0 = 1 {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:60:11\n+   |\n+LL |     while let 0 = 1 && true {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:63:12\n+   |\n+LL |     while (let 0 = 1) && true {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:66:20\n+   |\n+LL |     while true && (let 0 = 1) {}\n+   |                    ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:69:12\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:69:27\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |                           ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:73:11\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:73:24\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:73:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:73:51\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                   ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:73:64\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                                ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:80:11\n+   |\n+LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:94:15\n+   |\n+LL |     use_expr!(let 0 = 1 && 0 == 0);\n+   |               ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:96:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = help: add #![feature(let_chains)] to the crate attributes to enable\n+\n+error: `let` expressions only supported in `if`\n+  --> $DIR/feature-gate.rs:14:9\n+   |\n+LL |     if (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+\n+error: aborting due to 31 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}