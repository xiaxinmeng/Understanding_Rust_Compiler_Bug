{"sha": "b4247d45a555ccdf567e5b70f929d35198841951", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MjQ3ZDQ1YTU1NWNjZGY1NjdlNWI3MGY5MjlkMzUxOTg4NDE5NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-26T09:59:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-26T09:59:43Z"}, "message": "Auto merge of #51041 - alexcrichton:better-unwind, r=nikomatsakis\n\nstd: Ensure OOM is classified as `nounwind`\n\nOOM can't unwind today, and historically it's been optimized as if it can't\nunwind. This accidentally regressed with recent changes to the OOM handler, so\nthis commit adds in a codegen test to assert that everything gets optimized away\nafter the OOM function is approrpiately classified as nounwind\n\nCloses #50925", "tree": {"sha": "a78b6e853a3606889ee348fd43d65b685d593f28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78b6e853a3606889ee348fd43d65b685d593f28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4247d45a555ccdf567e5b70f929d35198841951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4247d45a555ccdf567e5b70f929d35198841951", "html_url": "https://github.com/rust-lang/rust/commit/b4247d45a555ccdf567e5b70f929d35198841951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4247d45a555ccdf567e5b70f929d35198841951/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444a9c3f1afad7585e7a65a05dbea8025a67b675", "url": "https://api.github.com/repos/rust-lang/rust/commits/444a9c3f1afad7585e7a65a05dbea8025a67b675", "html_url": "https://github.com/rust-lang/rust/commit/444a9c3f1afad7585e7a65a05dbea8025a67b675"}, {"sha": "f67453729c19b435686c94936d8145051e7f1284", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67453729c19b435686c94936d8145051e7f1284", "html_url": "https://github.com/rust-lang/rust/commit/f67453729c19b435686c94936d8145051e7f1284"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "4ae8fc649ddbf201b0b63f235adee73a9459300e", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4247d45a555ccdf567e5b70f929d35198841951/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4247d45a555ccdf567e5b70f929d35198841951/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=b4247d45a555ccdf567e5b70f929d35198841951", "patch": "@@ -133,6 +133,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n     }\n }\n \n+#[rustc_allocator_nounwind]\n pub fn oom() -> ! {\n     extern {\n         #[lang = \"oom\"]"}, {"sha": "d6806e7afd306ef2ede905df3a5d6725f803b71f", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b4247d45a555ccdf567e5b70f929d35198841951/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4247d45a555ccdf567e5b70f929d35198841951/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=b4247d45a555ccdf567e5b70f929d35198841951", "patch": "@@ -20,7 +20,9 @@ use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_target::spec::PanicStrategy;\n \n+use attributes;\n use llvm::{self, Attribute, ValueRef};\n use llvm::AttributePlace::Function;\n use llvm_util;\n@@ -135,11 +137,28 @@ pub fn from_fn_attrs(cx: &CodegenCx, llfn: ValueRef, id: DefId) {\n         Attribute::NoAlias.apply_llfn(\n             llvm::AttributePlace::ReturnValue, llfn);\n     }\n-    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n-        unwind(llfn, true);\n-    }\n-    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n-        unwind(llfn, false);\n+\n+    let can_unwind = if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n+        Some(true)\n+    } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n+        Some(false)\n+\n+    // Perhaps questionable, but we assume that anything defined\n+    // *in Rust code* may unwind. Foreign items like `extern \"C\" {\n+    // fn foo(); }` are assumed not to unwind **unless** they have\n+    // a `#[unwind]` attribute.\n+    } else if !cx.tcx.is_foreign_item(id) {\n+        Some(true)\n+    } else {\n+        None\n+    };\n+\n+    match can_unwind {\n+        Some(false) => attributes::unwind(llfn, false),\n+        Some(true) if cx.tcx.sess.panic_strategy() == PanicStrategy::Unwind => {\n+            attributes::unwind(llfn, true);\n+        }\n+        Some(true) | None => {}\n     }\n \n     let features = llvm_target_features(cx.tcx.sess)"}, {"sha": "2c01bd42cc77a4dee0b5d6dd7cdeb4151b1db5b6", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4247d45a555ccdf567e5b70f929d35198841951/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4247d45a555ccdf567e5b70f929d35198841951/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=b4247d45a555ccdf567e5b70f929d35198841951", "patch": "@@ -26,7 +26,6 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::subst::Substs;\n-use rustc_target::spec::PanicStrategy;\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes.\n@@ -102,16 +101,6 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         let instance_def_id = instance.def_id();\n \n-        // Perhaps questionable, but we assume that anything defined\n-        // *in Rust code* may unwind. Foreign items like `extern \"C\" {\n-        // fn foo(); }` are assumed not to unwind **unless** they have\n-        // a `#[unwind]` attribute.\n-        if tcx.sess.panic_strategy() == PanicStrategy::Unwind {\n-            if !tcx.is_foreign_item(instance_def_id) {\n-                attributes::unwind(llfn, true);\n-            }\n-        }\n-\n         // Apply an appropriate linkage/visibility value to our item that we\n         // just declared.\n         //"}, {"sha": "efb384d0afbce3358a4dd780f5af65af3fd55132", "filename": "src/test/codegen/vec-iter-collect-len.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4247d45a555ccdf567e5b70f929d35198841951/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4247d45a555ccdf567e5b70f929d35198841951/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs?ref=b4247d45a555ccdf567e5b70f929d35198841951", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-system-llvm\n+// compile-flags: -O\n+#![crate_type=\"lib\"]\n+\n+#[no_mangle]\n+pub fn get_len() -> usize {\n+    // CHECK-LABEL: @get_len\n+    // CHECK-NOT: call\n+    // CHECK-NOT: invoke\n+    [1, 2, 3].iter().collect::<Vec<_>>().len()\n+}"}]}