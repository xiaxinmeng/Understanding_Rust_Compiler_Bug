{"sha": "40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2JjODliNmZjOGMxZDBjNjE2ODliOWIwNTA3ZDUzNGE1NzZkOWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-28T22:36:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T19:38:44Z"}, "message": "rustdoc: Move resource docs into the item tag", "tree": {"sha": "1cd9d366439422e303e5684f68aabb70da264ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd9d366439422e303e5684f68aabb70da264ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "html_url": "https://github.com/rust-lang/rust/commit/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd8a14065fee0eaaa9393c4b333e9b9075fd367", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd8a14065fee0eaaa9393c4b333e9b9075fd367", "html_url": "https://github.com/rust-lang/rust/commit/bfd8a14065fee0eaaa9393c4b333e9b9075fd367"}], "stats": {"total": 152, "additions": 77, "deletions": 75}, "files": [{"sha": "9b13c1e7fcd326060960fd27f8637686e7f39e35", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -344,7 +344,7 @@ fn fold_res_should_extract_docs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_res(fold, doc.topmod.resources[0]);\n+    let doc = fold_res(fold, doc.topmod.resources()[0]);\n     assert doc.brief == some(\"a\");\n     assert doc.desc == some(\"b\");\n }\n@@ -356,7 +356,7 @@ fn fold_res_should_extract_arg_docs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_res(fold, doc.topmod.resources[0]);\n+    let doc = fold_res(fold, doc.topmod.resources()[0]);\n     assert doc.args[0].name == \"a\";\n     assert doc.args[0].desc == some(\"b\");\n }\n\\ No newline at end of file"}, {"sha": "23c7eb92bf1fb2e01827f09df9e645bef25bd1f8", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -136,7 +136,7 @@ fn should_execute_op_on_resource_brief() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n-    assert doc.topmod.resources[0].brief == some(\"a\");\n+    assert doc.topmod.resources()[0].brief == some(\"a\");\n }\n \n #[test]\n@@ -146,7 +146,7 @@ fn should_execute_op_on_resource_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n-    assert doc.topmod.resources[0].desc == some(\"a\");\n+    assert doc.topmod.resources()[0].desc == some(\"a\");\n }\n \n #[test]\n@@ -156,5 +156,5 @@ fn should_execute_op_on_resource_args() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n-    assert doc.topmod.resources[0].args[0].desc == some(\"a\");\n+    assert doc.topmod.resources()[0].args[0].desc == some(\"a\");\n }\n\\ No newline at end of file"}, {"sha": "82c1e8b27ce3cfa827d58ca474a06bc41a767fa1", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -134,8 +134,8 @@ fn should_promote_resource_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert doc.topmod.resources[0].brief == some(\"desc\");\n-    assert doc.topmod.resources[0].desc == none;\n+    assert doc.topmod.resources()[0].brief == some(\"desc\");\n+    assert doc.topmod.resources()[0].desc == none;\n }\n \n fn modify("}, {"sha": "9e3698116f2544770edf1bb64dcb0f12b5e19b71", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -24,8 +24,7 @@ type moddoc = ~{\n     mods: modlist,\n     fns: fnlist,\n     consts: constlist,\n-    enums: enumlist,\n-    resources: reslist\n+    enums: enumlist\n };\n \n type constdoc = ~{\n@@ -86,4 +85,14 @@ enum modlist = [moddoc];\n enum constlist = [constdoc];\n enum fnlist = [fndoc];\n enum enumlist = [enumdoc];\n-enum reslist = [resdoc];\n+\n+impl util for moddoc {\n+    fn resources() -> [resdoc] {\n+        vec::filter_map(self.items) {|itemtag|\n+            alt itemtag {\n+              restag(resdoc) { some(resdoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "82e862da6c3f1bc43a2305080385c42924e4b73f", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -43,7 +43,18 @@ fn moddoc_from_mod(\n         path: [],\n         brief: none,\n         desc: none,\n-        items: [],\n+        items: vec::filter_map(module.items) {|item|\n+            alt item.node {\n+              ast::item_res(decl, _, _, _, _) {\n+                some(doc::restag(\n+                    resdoc_from_resource(decl, item.ident, item.id)\n+                ))\n+              }\n+              _ {\n+                none\n+              }\n+            }\n+        },\n         mods: doc::modlist(\n             vec::filter_map(module.items) {|item|\n                 alt item.node {\n@@ -88,17 +99,6 @@ fn moddoc_from_mod(\n                     none\n                   }\n                 }\n-            }),\n-        resources: doc::reslist(\n-            vec::filter_map(module.items) {|item|\n-                alt item.node {\n-                  ast::item_res(decl, _, _, _, _) {\n-                    some(resdoc_from_resource(decl, item.ident, item.id))\n-                  }\n-                  _ {\n-                    none\n-                  }\n-                }\n             })\n     }\n }\n@@ -232,16 +232,16 @@ fn should_extract_resources() {\n     let source = \"resource r(b: bool) { }\";\n     let ast = parse::from_str(source);\n     let doc = extract(ast, \"\");\n-    assert doc.topmod.resources[0].id != 0;\n-    assert doc.topmod.resources[0].name == \"r\";\n+    assert doc.topmod.resources()[0].id != 0;\n+    assert doc.topmod.resources()[0].name == \"r\";\n }\n \n #[test]\n fn should_extract_resource_args() {\n     let source = \"resource r(b: bool) { }\";\n     let ast = parse::from_str(source);\n     let doc = extract(ast, \"\");\n-    assert doc.topmod.resources[0].args[0].name == \"b\";\n+    assert doc.topmod.resources()[0].args[0].name == \"b\";\n }\n \n #[cfg(test)]"}, {"sha": "1d2e992b800361fe1cbad45d16cceb79fc63f76a", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -26,8 +26,6 @@ type fold_constlist<T> = fn~(\n     fold: fold<T>, list: doc::constlist) -> doc::constlist;\n type fold_enumlist<T> = fn~(\n     fold: fold<T>, list: doc::enumlist) -> doc::enumlist;\n-type fold_reslist<T> = fn~(\n-    fold: fold<T>, list: doc::reslist) -> doc::reslist;\n \n type t<T> = {\n     ctxt: T,\n@@ -41,7 +39,6 @@ type t<T> = {\n     fold_fnlist: fold_fnlist<T>,\n     fold_constlist: fold_constlist<T>,\n     fold_enumlist: fold_enumlist<T>,\n-    fold_reslist: fold_reslist<T>\n };\n \n \n@@ -58,8 +55,7 @@ fn mk_fold<T:copy>(\n     fold_modlist: fold_modlist<T>,\n     fold_fnlist: fold_fnlist<T>,\n     fold_constlist: fold_constlist<T>,\n-    fold_enumlist: fold_enumlist<T>,\n-    fold_reslist: fold_reslist<T>\n+    fold_enumlist: fold_enumlist<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n@@ -72,8 +68,7 @@ fn mk_fold<T:copy>(\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n         fold_constlist: fold_constlist,\n-        fold_enumlist: fold_enumlist,\n-        fold_reslist: fold_reslist\n+        fold_enumlist: fold_enumlist\n     })\n }\n \n@@ -89,8 +84,7 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_modlist(f, d)},\n         {|f, d| default_seq_fold_fnlist(f, d)},\n         {|f, d| default_seq_fold_constlist(f, d)},\n-        {|f, d| default_seq_fold_enumlist(f, d)},\n-        {|f, d| default_seq_fold_reslist(f, d)}\n+        {|f, d| default_seq_fold_enumlist(f, d)}\n     )\n }\n \n@@ -108,11 +102,17 @@ fn default_seq_fold_mod<T>(\n     doc: doc::moddoc\n ) -> doc::moddoc {\n     ~{\n+        items: vec::map(doc.items) {|itemtag|\n+            alt itemtag {\n+              doc::restag(resdoc) {\n+                doc::restag(fold.fold_res(fold, resdoc))\n+              }\n+            }\n+        },\n         mods: fold.fold_modlist(fold, doc.mods),\n         fns: fold.fold_fnlist(fold, doc.fns),\n         consts: fold.fold_constlist(fold, doc.consts),\n-        enums: fold.fold_enumlist(fold, doc.enums),\n-        resources: fold.fold_reslist(fold, doc.resources)\n+        enums: fold.fold_enumlist(fold, doc.enums)\n         with *doc\n     }\n }\n@@ -181,15 +181,6 @@ fn default_seq_fold_enumlist<T>(\n     })\n }\n \n-fn default_seq_fold_reslist<T>(\n-    fold: fold<T>,\n-    list: doc::reslist\n-) -> doc::reslist {\n-    doc::reslist(vec::map(*list) {|doc|\n-        fold.fold_res(fold, doc)\n-    })\n-}\n-\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "2777a3ff1964095b9f1e315af25002a1b188ff7c", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -93,13 +93,15 @@ fn write_mod_contents(\n         write_fn(ctxt, fndoc);\n     }\n \n-    for resdoc in *doc.resources {\n-        write_res(ctxt, resdoc);\n-    }\n-\n     for moddoc in *doc.mods {\n         write_mod(ctxt, moddoc);\n     }\n+\n+    for itemtag in doc.items {\n+        alt itemtag {\n+          doc::restag(resdoc) { write_res(ctxt, resdoc) }\n+        }\n+    }\n }\n \n #[test]"}, {"sha": "a41419629863a8a07e1516292e147a0cc5b09fc9", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -26,8 +26,7 @@ fn run(\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n         fold_constlist: fold_constlist,\n-        fold_enumlist: fold_enumlist,\n-        fold_reslist: fold_reslist\n+        fold_enumlist: fold_enumlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -37,7 +36,22 @@ fn fold_mod(\n     fold: fold::fold<ctxt>,\n     doc: doc::moddoc\n ) -> doc::moddoc {\n-    let doc = fold::default_seq_fold_mod(fold, doc);\n+    let doc = ~{\n+        items: vec::filter_map(doc.items) {|itemtag|\n+            alt itemtag {\n+              doc::restag(resdoc) {\n+                let doc = fold.fold_res(fold, resdoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::restag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n+              _ { some(itemtag) }\n+            }\n+        }\n+        with *fold::default_seq_fold_mod(fold, doc)\n+    };\n     fold.ctxt.have_docs =\n         doc.brief != none\n         || doc.desc != none\n@@ -301,27 +315,13 @@ fn fold_res(fold: fold::fold<ctxt>, doc: doc::resdoc) -> doc::resdoc {\n     ret doc;\n }\n \n-fn fold_reslist(\n-    fold: fold::fold<ctxt>,\n-    list: doc::reslist\n-) -> doc::reslist {\n-    doc::reslist(vec::filter_map(*list) {|doc|\n-        let doc = fold.fold_res(fold, doc);\n-        if fold.ctxt.have_docs {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    })\n-}\n-\n #[test]\n fn should_elide_undocumented_resources() {\n     let source = \"resource r(a: bool) { }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::is_empty(*doc.topmod.resources);\n+    assert vec::is_empty(doc.topmod.resources());\n }\n \n #[test]\n@@ -332,7 +332,7 @@ fn should_elide_undocumented_resource_args() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_empty(doc.topmod.resources[0].args);\n+    assert vec::is_empty(doc.topmod.resources()[0].args);\n }\n \n #[test]\n@@ -343,5 +343,5 @@ fn should_not_elide_resources_with_documented_args() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_not_empty(*doc.topmod.resources);\n+    assert vec::is_not_empty(doc.topmod.resources());\n }"}, {"sha": "1c258858e83767d62d2b8ec8fc857fad3f3cdb27", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -2,6 +2,8 @@\n  * Copyright 2011 Google Inc.\n  */\n \n+import doc::util;\n+\n #[doc = \"A single operation on the document model\"]\n type pass = fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc;\n \n@@ -53,8 +55,7 @@ fn test_run_passes() {\n                 mods: doc::modlist([]),\n                 fns: doc::fnlist([]),\n                 consts: doc::constlist([]),\n-                enums: doc::enumlist([]),\n-                resources: doc::reslist([])\n+                enums: doc::enumlist([])\n             }\n         }\n     }\n@@ -73,8 +74,7 @@ fn test_run_passes() {\n                 mods: doc::modlist([]),\n                 fns: doc::fnlist([]),\n                 consts: doc::constlist([]),\n-                enums: doc::enumlist([]),\n-                resources: doc::reslist([])\n+                enums: doc::enumlist([])\n             }\n         }\n     }"}, {"sha": "e223944b9fb3985ecfa5fae932a3cf6b9ffc6e5d", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "patch": "@@ -254,7 +254,7 @@ fn should_add_resource_sigs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.resources[0].sig == some(\"resource r(b: bool)\");\n+    assert doc.topmod.resources()[0].sig == some(\"resource r(b: bool)\");\n }\n \n #[test]\n@@ -263,5 +263,5 @@ fn should_add_resource_arg_tys() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.resources[0].args[0].ty == some(\"bool\");\n+    assert doc.topmod.resources()[0].args[0].ty == some(\"bool\");\n }\n\\ No newline at end of file"}]}