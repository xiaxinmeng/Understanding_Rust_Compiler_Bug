{"sha": "71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "node_id": "C_kwDOAAsO6NoAKDcxYTljYjliN2ViYzFhNGQ1NmY4ZDgzN2VhOGI0YjY5NmZhZTllODk", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-24T17:16:50Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate \"unused unsafe\" lint", "tree": {"sha": "28ad14ac77d5b873aa64e6a8372ef72ad9923595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ad14ac77d5b873aa64e6a8372ef72ad9923595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "html_url": "https://github.com/rust-lang/rust/commit/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "64f3e4f195265a13648e5e201669ebb265bae421", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f3e4f195265a13648e5e201669ebb265bae421", "html_url": "https://github.com/rust-lang/rust/commit/64f3e4f195265a13648e5e201669ebb265bae421"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "9dab6f8e88320ddd0bc9909e99acf09a5f5c6da7", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "patch": "@@ -169,3 +169,9 @@ mir_build_call_to_fn_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n     call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe function or block\n     .note = can only be called if the required target features are available\n     .label = call to function with `#[target_feature]`\n+\n+mir_build_unused_unsafe = unnecessary `unsafe` block\n+    .label = unnecessary `unsafe` block\n+\n+mir_build_unused_unsafe_enclosing_block_label = because it's nested under this `unsafe` block\n+mir_build_unused_unsafe_enclosing_fn_label = because it's nested under this `unsafe` fn"}, {"sha": "99e96ff77ced9bff4c0ab710e1db1fafc01ebb66", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "patch": "@@ -45,7 +45,9 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             self.warn_unused_unsafe(\n                 hir_id,\n                 block_span,\n-                Some((self.tcx.sess.source_map().guess_head_span(enclosing_span), \"block\")),\n+                Some(UnusedUnsafeEnclosing::Block {\n+                    span: self.tcx.sess.source_map().guess_head_span(enclosing_span),\n+                }),\n             );\n             f(self);\n         } else {\n@@ -59,7 +61,9 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                     hir_id,\n                     span,\n                     if self.unsafe_op_in_unsafe_fn_allowed() {\n-                        self.body_unsafety.unsafe_fn_sig_span().map(|span| (span, \"fn\"))\n+                        self.body_unsafety\n+                            .unsafe_fn_sig_span()\n+                            .map(|span| UnusedUnsafeEnclosing::Function { span })\n                     } else {\n                         None\n                     },\n@@ -95,17 +99,15 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         block_span: Span,\n-        enclosing_unsafe: Option<(Span, &'static str)>,\n+        enclosing_unsafe: Option<UnusedUnsafeEnclosing>,\n     ) {\n         let block_span = self.tcx.sess.source_map().guess_head_span(block_span);\n-        let msg = \"unnecessary `unsafe` block\";\n-        self.tcx.struct_span_lint_hir(UNUSED_UNSAFE, hir_id, block_span, msg, |lint| {\n-            lint.span_label(block_span, msg);\n-            if let Some((span, kind)) = enclosing_unsafe {\n-                lint.span_label(span, format!(\"because it's nested under this `unsafe` {}\", kind));\n-            }\n-            lint\n-        });\n+        self.tcx.emit_spanned_lint(\n+            UNUSED_UNSAFE,\n+            hir_id,\n+            block_span,\n+            UnusedUnsafe { span: block_span, enclosing: enclosing_unsafe },\n+        );\n     }\n \n     /// Whether the `unsafe_op_in_unsafe_fn` lint is `allow`ed at the current HIR node."}, {"sha": "a3e87151226676d1cc12335b91a2006d3fe86cc5", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=71a9cb9b7ebc1a4d56f8d837ea8b4b696fae9e89", "patch": "@@ -1,4 +1,4 @@\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic};\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::Span;\n \n #[derive(LintDiagnostic)]\n@@ -313,3 +313,26 @@ pub struct CallToFunctionWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n     pub span: Span,\n     pub function: &'a str,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::unused_unsafe)]\n+pub struct UnusedUnsafe {\n+    #[label]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub enclosing: Option<UnusedUnsafeEnclosing>,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum UnusedUnsafeEnclosing {\n+    #[label(mir_build::unused_unsafe_enclosing_block_label)]\n+    Block {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(mir_build::unused_unsafe_enclosing_fn_label)]\n+    Function {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}"}]}