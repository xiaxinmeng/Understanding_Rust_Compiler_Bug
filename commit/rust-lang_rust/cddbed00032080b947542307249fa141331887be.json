{"sha": "cddbed00032080b947542307249fa141331887be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZGJlZDAwMDMyMDgwYjk0NzU0MjMwNzI0OWZhMTQxMzMxODg3YmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-27T01:26:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-27T01:26:18Z"}, "message": "Rollup merge of #71589 - RalfJung:unique-no-shr, r=SimonSapin\n\nremove Unique::from for shared pointer types\n\nr? @SimonSapin", "tree": {"sha": "6dc0d7cfdd4110013c077875d31a9a9fb7da9cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc0d7cfdd4110013c077875d31a9a9fb7da9cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cddbed00032080b947542307249fa141331887be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepjS7CRBK7hj4Ov3rIwAAdHIIAEmhqquuJgAjNjIKB1XAKGJ2\nxJLGXuxaz4mkVrdeCAruGMtDWsTpPhA08ko2zWppixlAQF2qyuASXZhUoymmDtaC\nss9WW81/IOvqYyUlzMGq9sOvRS1zBiovE4xZjluYGV7ZFyJvqkMdDISZWCq0uXHn\neu2hxOKD+sXxSEip1CFKHJtu04eScisN71aBFjynvWRWV7PTPt5OdIW979mEJaql\n4erB9ndHm4RnxALkkbVmdbk1ZtgSenJMq/i2iZeoL/Y5Ax8Cd30cpFQin+xOfkHi\nyLhcj5JmziacmCZNfN7ZsWq3u2hUcdDYk+iyOizPusqma+HuwcA1S4nAx9CDA4g=\n=EZ75\n-----END PGP SIGNATURE-----\n", "payload": "tree 6dc0d7cfdd4110013c077875d31a9a9fb7da9cc7\nparent ac62dcef0500c8e68b5f292d72d76865969ea2b1\nparent 7aebdb639ade703a2a9f55a83df21a79fbbd9f69\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587950778 +0200\ncommitter GitHub <noreply@github.com> 1587950778 +0200\n\nRollup merge of #71589 - RalfJung:unique-no-shr, r=SimonSapin\n\nremove Unique::from for shared pointer types\n\nr? @SimonSapin\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cddbed00032080b947542307249fa141331887be", "html_url": "https://github.com/rust-lang/rust/commit/cddbed00032080b947542307249fa141331887be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cddbed00032080b947542307249fa141331887be/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac62dcef0500c8e68b5f292d72d76865969ea2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac62dcef0500c8e68b5f292d72d76865969ea2b1", "html_url": "https://github.com/rust-lang/rust/commit/ac62dcef0500c8e68b5f292d72d76865969ea2b1"}, {"sha": "7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "html_url": "https://github.com/rust-lang/rust/commit/7aebdb639ade703a2a9f55a83df21a79fbbd9f69"}], "stats": {"total": 23, "additions": 3, "deletions": 20}, "files": [{"sha": "5569c293e2f6605e50ba1e0f7250188b19d4337a", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cddbed00032080b947542307249fa141331887be/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddbed00032080b947542307249fa141331887be/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=cddbed00032080b947542307249fa141331887be", "patch": "@@ -131,7 +131,7 @@ impl<K, V> BoxedNode<K, V> {\n     }\n \n     unsafe fn from_ptr(ptr: NonNull<LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::from(ptr) }\n+        BoxedNode { ptr: Unique::new_unchecked(ptr.as_ptr()) }\n     }\n \n     fn as_ptr(&self) -> NonNull<LeafNode<K, V>> {"}, {"sha": "ca165b61e26a7da30b2c3e210992a2d8412e4d9a", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cddbed00032080b947542307249fa141331887be/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddbed00032080b947542307249fa141331887be/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=cddbed00032080b947542307249fa141331887be", "patch": "@@ -151,7 +151,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n \n             let memory = alloc.alloc(layout, init).unwrap_or_else(|_| handle_alloc_error(layout));\n             Self {\n-                ptr: memory.ptr.cast().into(),\n+                ptr: unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) },\n                 cap: Self::capacity_from_bytes(memory.size),\n                 alloc,\n             }\n@@ -469,7 +469,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     }\n \n     fn set_memory(&mut self, memory: MemoryBlock) {\n-        self.ptr = memory.ptr.cast().into();\n+        self.ptr = unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) };\n         self.cap = Self::capacity_from_bytes(memory.size);\n     }\n "}, {"sha": "d93dc1f32623187bb8ffe2fd8c51e171091526e1", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cddbed00032080b947542307249fa141331887be/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddbed00032080b947542307249fa141331887be/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=cddbed00032080b947542307249fa141331887be", "patch": "@@ -3,7 +3,6 @@ use crate::fmt;\n use crate::marker::{PhantomData, Unsize};\n use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n-use crate::ptr::NonNull;\n \n // ignore-tidy-undocumented-unsafe\n \n@@ -171,19 +170,3 @@ impl<T: ?Sized> From<&mut T> for Unique<T> {\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n-\n-#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<&T> for Unique<T> {\n-    #[inline]\n-    fn from(reference: &T) -> Self {\n-        unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n-    }\n-}\n-\n-#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<NonNull<T>> for Unique<T> {\n-    #[inline]\n-    fn from(p: NonNull<T>) -> Self {\n-        unsafe { Unique::new_unchecked(p.as_ptr()) }\n-    }\n-}"}]}