{"sha": "747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0N2NjNzQ5NDMwZDY2YmQyZmNhOGU4MWZkOGExYzk5NGUzNmRjZjE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-04T16:09:39Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:14Z"}, "message": "Conversions between Result<*mut u8, AllocErr>> and *mut Void", "tree": {"sha": "ba50ae6ca9a8e021439f2c643a0fc785d42c58c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba50ae6ca9a8e021439f2c643a0fc785d42c58c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "html_url": "https://github.com/rust-lang/rust/commit/747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/747cc749430d66bd2fca8e81fd8a1c994e36dcf1/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c957e99b305ecee113442a7ce0edd6b565200ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c957e99b305ecee113442a7ce0edd6b565200ca9", "html_url": "https://github.com/rust-lang/rust/commit/c957e99b305ecee113442a7ce0edd6b565200ca9"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "6ffbd029281c426a6601f527f8f8d3ba76e05bac", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/747cc749430d66bd2fca8e81fd8a1c994e36dcf1/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747cc749430d66bd2fca8e81fd8a1c994e36dcf1/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "patch": "@@ -139,22 +139,12 @@ macro_rules! alloc_methods_based_on_global_alloc {\n     () => {\n         #[inline]\n         unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            let ptr = GlobalAlloc::alloc(*self, layout);\n-            if !ptr.is_null() {\n-                Ok(ptr as *mut u8)\n-            } else {\n-                Err(AllocErr)\n-            }\n+            GlobalAlloc::alloc(*self, layout).into()\n         }\n \n         #[inline]\n         unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            let ptr = GlobalAlloc::alloc_zeroed(*self, layout);\n-            if !ptr.is_null() {\n-                Ok(ptr as *mut u8)\n-            } else {\n-                Err(AllocErr)\n-            }\n+            GlobalAlloc::alloc_zeroed(*self, layout).into()\n         }\n \n         #[inline]\n@@ -167,12 +157,7 @@ macro_rules! alloc_methods_based_on_global_alloc {\n                           ptr: *mut u8,\n                           old_layout: Layout,\n                           new_size: usize) -> Result<*mut u8, AllocErr> {\n-            let ptr = GlobalAlloc::realloc(*self, ptr as *mut Void, old_layout, new_size);\n-            if !ptr.is_null() {\n-                Ok(ptr as *mut u8)\n-            } else {\n-                Err(AllocErr)\n-            }\n+            GlobalAlloc::realloc(*self, ptr as *mut Void, old_layout, new_size).into()\n         }\n     }\n }"}, {"sha": "cfa7df06a40e17e9e62089cdaa6f57a518798eee", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/747cc749430d66bd2fca8e81fd8a1c994e36dcf1/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747cc749430d66bd2fca8e81fd8a1c994e36dcf1/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "patch": "@@ -41,6 +41,27 @@ impl Void {\n     }\n }\n \n+/// Convert from a return value of GlobalAlloc::alloc to that of Alloc::alloc\n+impl From<*mut Void> for Result<*mut u8, AllocErr> {\n+    fn from(ptr: *mut Void) -> Self {\n+        if !ptr.is_null() {\n+            Ok(ptr as *mut u8)\n+        } else {\n+            Err(AllocErr)\n+        }\n+    }\n+}\n+\n+/// Convert from a return value of Alloc::alloc to that of GlobalAlloc::alloc\n+impl From<Result<*mut u8, AllocErr>> for *mut Void {\n+    fn from(result: Result<*mut u8, AllocErr>) -> Self {\n+        match result {\n+            Ok(ptr) => ptr as *mut Void,\n+            Err(_) => Void::null_mut(),\n+        }\n+    }\n+}\n+\n /// Represents the combination of a starting address and\n /// a total capacity of the returned block.\n #[derive(Debug)]"}]}