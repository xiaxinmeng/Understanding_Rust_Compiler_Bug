{"sha": "5ce9b046696846099de8f052818aae5c18d3cfe3", "node_id": "C_kwDOAAsO6NoAKDVjZTliMDQ2Njk2ODQ2MDk5ZGU4ZjA1MjgxOGFhZTVjMThkM2NmZTM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-18T09:59:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-18T09:59:10Z"}, "message": "Merge #10551\n\n10551: Pull in new lsp-types for VS compat r=lnicola a=lnicola\n\nCC #8729\r\n\r\nDepends on https://github.com/gluon-lang/lsp-types/pull/218\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "3e522e3f46fb1fd5644133013d420635c5b02cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e522e3f46fb1fd5644133013d420635c5b02cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce9b046696846099de8f052818aae5c18d3cfe3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbUVuCRBK7hj4Ov3rIwAAx3wIAIt+Xg17oUddCwvAHSNNnsG3\n/y6mw/JvUca+cu4Wg/NtZ42IuTKMQe7oA7nzcnlLahc5V1Q9tkGuiy/frzjP279e\n1XvkeJpdkmypNsnaxZBYx5OGTCX8zdN00nU/6Dfk0X+nPO4J8IYswg/7SUl6gsR+\n2lBmbZRvT5UYaAnCnJjzCFthON4vqeqjBPJ8gFGWExNExrv66nSkRAeBrXeTRR2n\nf72urwSe0G5Ve2H2k8ApJIK/YMo5xQJDKcDJ5yeIcAj58kdaiV5zwvaRc+KKUTWE\nRLpxhfFQLy+JXSTwAFvN5tHs1HyDHBieo0i1+x9XitvsPP3zvYL8tgfFZjIoc14=\n=iE7q\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e522e3f46fb1fd5644133013d420635c5b02cda\nparent 91cbda43c2af82b9377eff70a21f59ade18cd23c\nparent 29d281e523bf894e2cacf48be70e76f2b07c1868\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634551150 +0000\ncommitter GitHub <noreply@github.com> 1634551150 +0000\n\nMerge #10551\n\n10551: Pull in new lsp-types for VS compat r=lnicola a=lnicola\n\nCC #8729\r\n\r\nDepends on https://github.com/gluon-lang/lsp-types/pull/218\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce9b046696846099de8f052818aae5c18d3cfe3", "html_url": "https://github.com/rust-lang/rust/commit/5ce9b046696846099de8f052818aae5c18d3cfe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce9b046696846099de8f052818aae5c18d3cfe3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91cbda43c2af82b9377eff70a21f59ade18cd23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91cbda43c2af82b9377eff70a21f59ade18cd23c", "html_url": "https://github.com/rust-lang/rust/commit/91cbda43c2af82b9377eff70a21f59ade18cd23c"}, {"sha": "29d281e523bf894e2cacf48be70e76f2b07c1868", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d281e523bf894e2cacf48be70e76f2b07c1868", "html_url": "https://github.com/rust-lang/rust/commit/29d281e523bf894e2cacf48be70e76f2b07c1868"}], "stats": {"total": 249, "additions": 150, "deletions": 99}, "files": [{"sha": "d673f72cf8f94927649589d12f4cc1f387905c4d", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -865,9 +865,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.90.1\"\n+version = \"0.91.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f3734ab1d7d157fc0c45110e06b587c31cd82bea2ccfd6b563cbff0aaeeb1d3\"\n+checksum = \"be7801b458592d0998af808d97f6a85a6057af3aaf2a2a5c3c677702bbeb4ed7\"\n dependencies = [\n  \"bitflags\",\n  \"serde\","}, {"sha": "2d3d00fd9841b462428ad7809d535dc2396511a4", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -22,7 +22,7 @@ crossbeam-channel = \"0.5.0\"\n dissimilar = \"1.0.2\"\n itertools = \"0.10.0\"\n jod-thread = \"0.1.0\"\n-lsp-types = { version = \"0.90.1\", features = [\"proposed\"] }\n+lsp-types = { version = \"0.91\", features = [\"proposed\"] }\n parking_lot = \"0.11.0\"\n xflags = \"0.2.1\"\n oorandom = \"11.1.2\"\n@@ -34,7 +34,12 @@ rayon = \"1.5\"\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n lsp-server = \"0.5.1\"\n tracing = \"0.1\"\n-tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\", \"fmt\", \"tracing-log\"] }\n+tracing-subscriber = { version = \"0.2\", default-features = false, features = [\n+    \"env-filter\",\n+    \"registry\",\n+    \"fmt\",\n+    \"tracing-log\",\n+] }\n tracing-log = \"0.1.2\"\n tracing-tree = { version = \"0.1.10\" }\n always-assert = \"0.1\""}, {"sha": "648f6aeebe7ac3da35750ddc5b5edc59b4fca3cd", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -20,7 +20,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n-            change: Some(TextDocumentSyncKind::Incremental),\n+            change: Some(TextDocumentSyncKind::INCREMENTAL),\n             will_save: None,\n             will_save_wait_until: None,\n             save: Some(SaveOptions::default().into()),"}, {"sha": "a9c0edcf9fbc9f78a4fa341e53bdc64340de2bba", "filename": "crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Warning,\n+                DiagnosticSeverity(\n+                    2,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -140,7 +142,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -231,7 +235,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "fd69097d057ceb70440544bd517b1dd887123892", "filename": "crates/rust-analyzer/src/diagnostics/test_data/handles_macro_location.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Error,\n+                DiagnosticSeverity(\n+                    1,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "1c25a3ed69636504ec2881141268e516f57af7bb", "filename": "crates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: None,\n             code_description: None,\n@@ -90,7 +92,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: None,\n             code_description: None,\n@@ -157,7 +161,9 @@\n                 },\n             },\n             severity: Some(\n-                Error,\n+                DiagnosticSeverity(\n+                    1,\n+                ),\n             ),\n             code: None,\n             code_description: None,"}, {"sha": "653fb0130d120a0e019ea6432ae0ac271286c094", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_incompatible_type_for_trait.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Error,\n+                DiagnosticSeverity(\n+                    1,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "f37e416b7b7ccfff21ab8f35885d2b060c701210", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_mismatched_type.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_mismatched_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_mismatched_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_mismatched_type.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Error,\n+                DiagnosticSeverity(\n+                    1,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "df73efe5f872647211694f4fc003f6dd99cfa899", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Warning,\n+                DiagnosticSeverity(\n+                    2,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -67,7 +69,9 @@\n             ),\n             tags: Some(\n                 [\n-                    Unnecessary,\n+                    DiagnosticTag(\n+                        1,\n+                    ),\n                 ],\n             ),\n             data: None,\n@@ -98,7 +102,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "ad22a34d6731d4f1335346472336917587c5eb54", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -67,7 +69,9 @@\n             ),\n             tags: Some(\n                 [\n-                    Unnecessary,\n+                    DiagnosticTag(\n+                        1,\n+                    ),\n                 ],\n             ),\n             data: None,\n@@ -98,7 +102,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "1072d8a17700612f64e138ef138495c4b52de268", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Information,\n+                DiagnosticSeverity(\n+                    3,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -67,7 +69,9 @@\n             ),\n             tags: Some(\n                 [\n-                    Unnecessary,\n+                    DiagnosticTag(\n+                        1,\n+                    ),\n                 ],\n             ),\n             data: None,\n@@ -98,7 +102,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "3e043666aab6c4a57025c6621b114e03a378e0ec", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_wrong_number_of_parameters.txt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Error,\n+                DiagnosticSeverity(\n+                    1,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -114,7 +116,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "67e442d73d7a1895c19c2cac8679a622ef0fcec8", "filename": "crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -23,7 +23,9 @@\n                 },\n             },\n             severity: Some(\n-                Warning,\n+                DiagnosticSeverity(\n+                    2,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -140,7 +142,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String(\n@@ -231,7 +235,9 @@\n                 },\n             },\n             severity: Some(\n-                Hint,\n+                DiagnosticSeverity(\n+                    4,\n+                ),\n             ),\n             code: Some(\n                 String("}, {"sha": "b9b8f3a1b1b4428b55a25861f9d2900d06aaee95", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -18,19 +18,19 @@ fn diagnostic_severity(\n     code: Option<flycheck::DiagnosticCode>,\n ) -> Option<lsp_types::DiagnosticSeverity> {\n     let res = match level {\n-        DiagnosticLevel::Ice => lsp_types::DiagnosticSeverity::Error,\n-        DiagnosticLevel::Error => lsp_types::DiagnosticSeverity::Error,\n+        DiagnosticLevel::Ice => lsp_types::DiagnosticSeverity::ERROR,\n+        DiagnosticLevel::Error => lsp_types::DiagnosticSeverity::ERROR,\n         DiagnosticLevel::Warning => match &code {\n             Some(code) if config.warnings_as_hint.contains(&code.code) => {\n-                lsp_types::DiagnosticSeverity::Hint\n+                lsp_types::DiagnosticSeverity::HINT\n             }\n             Some(code) if config.warnings_as_info.contains(&code.code) => {\n-                lsp_types::DiagnosticSeverity::Information\n+                lsp_types::DiagnosticSeverity::INFORMATION\n             }\n-            _ => lsp_types::DiagnosticSeverity::Warning,\n+            _ => lsp_types::DiagnosticSeverity::WARNING,\n         },\n-        DiagnosticLevel::Note => lsp_types::DiagnosticSeverity::Information,\n-        DiagnosticLevel::Help => lsp_types::DiagnosticSeverity::Hint,\n+        DiagnosticLevel::Note => lsp_types::DiagnosticSeverity::INFORMATION,\n+        DiagnosticLevel::Help => lsp_types::DiagnosticSeverity::HINT,\n         _ => return None,\n     };\n     Some(res)\n@@ -268,11 +268,11 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 | \"unused_macros\"\n                 | \"unused_variables\"\n         ) {\n-            tags.push(lsp_types::DiagnosticTag::Unnecessary);\n+            tags.push(lsp_types::DiagnosticTag::UNNECESSARY);\n         }\n \n         if matches!(code, \"deprecated\") {\n-            tags.push(lsp_types::DiagnosticTag::Deprecated);\n+            tags.push(lsp_types::DiagnosticTag::DEPRECATED);\n         }\n     }\n \n@@ -337,7 +337,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 let diagnostic = lsp_types::Diagnostic {\n                     range: secondary_location.range,\n                     // downgrade to hint if we're pointing at the macro\n-                    severity: Some(lsp_types::DiagnosticSeverity::Hint),\n+                    severity: Some(lsp_types::DiagnosticSeverity::HINT),\n                     code: code.clone().map(lsp_types::NumberOrString::String),\n                     code_description: code_description.clone(),\n                     source: Some(source.clone()),\n@@ -398,7 +398,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     fixes: sub.suggested_fix.iter().cloned().collect(),\n                     diagnostic: lsp_types::Diagnostic {\n                         range: sub.related.location.range,\n-                        severity: Some(lsp_types::DiagnosticSeverity::Hint),\n+                        severity: Some(lsp_types::DiagnosticSeverity::HINT),\n                         code: code.clone().map(lsp_types::NumberOrString::String),\n                         code_description: code_description.clone(),\n                         source: Some(source.clone()),"}, {"sha": "ab656d478968fb3bc171b0ab92bfea7b43ef13ea", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -311,7 +311,7 @@ pub(crate) fn handle_document_symbol(\n     for symbol in snap.analysis.file_structure(file_id)? {\n         let mut tags = Vec::new();\n         if symbol.deprecated {\n-            tags.push(SymbolTag::Deprecated)\n+            tags.push(SymbolTag::DEPRECATED)\n         };\n \n         #[allow(deprecated)]\n@@ -368,7 +368,7 @@ pub(crate) fn handle_document_symbol(\n \n         #[allow(deprecated)]\n         if let Some(true) = symbol.deprecated {\n-            tags.push(SymbolTag::Deprecated)\n+            tags.push(SymbolTag::DEPRECATED)\n         }\n \n         #[allow(deprecated)]\n@@ -464,7 +464,7 @@ pub(crate) fn handle_workspace_symbol(\n                 kind: nav\n                     .kind\n                     .map(to_proto::symbol_kind)\n-                    .unwrap_or(lsp_types::SymbolKind::Variable),\n+                    .unwrap_or(lsp_types::SymbolKind::VARIABLE),\n                 tags: None,\n                 location: to_proto::location_from_nav(snap, nav)?,\n                 container_name,\n@@ -1294,7 +1294,7 @@ pub(crate) fn publish_diagnostics(\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,\n             related_information: None,\n-            tags: if d.unused { Some(vec![DiagnosticTag::Unnecessary]) } else { None },\n+            tags: if d.unused { Some(vec![DiagnosticTag::UNNECESSARY]) } else { None },\n             data: None,\n         })\n         .collect();"}, {"sha": "194d03032202cd492b158da5ff836c60d811fe7f", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -62,7 +62,7 @@ impl GlobalState {\n         let from_source_build = env!(\"REV\").contains(\"dev\");\n         let profiling_enabled = std::env::var(\"RA_PROFILE\").is_ok();\n         if from_source_build || profiling_enabled {\n-            self.show_message(lsp_types::MessageType::Error, message)\n+            self.show_message(lsp_types::MessageType::ERROR, message)\n         }\n     }\n "}, {"sha": "9f08ad5ebfcbab1acdac309e71f69947c961dd3c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -112,7 +112,7 @@ impl GlobalState {\n             && self.config.notifications().cargo_toml_not_found\n         {\n             self.show_message(\n-                lsp_types::MessageType::Error,\n+                lsp_types::MessageType::ERROR,\n                 \"rust-analyzer failed to discover workspace\".to_string(),\n             );\n         };\n@@ -395,7 +395,7 @@ impl GlobalState {\n                                 flycheck::Progress::DidFinish(result) => {\n                                     if let Err(err) = result {\n                                         self.show_message(\n-                                            lsp_types::MessageType::Error,\n+                                            lsp_types::MessageType::ERROR,\n                                             format!(\"cargo check failed: {}\", err),\n                                         );\n                                     }\n@@ -509,7 +509,7 @@ impl GlobalState {\n             self.last_reported_status = Some(status.clone());\n \n             if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message) {\n-                self.show_message(lsp_types::MessageType::Error, message.clone());\n+                self.show_message(lsp_types::MessageType::ERROR, message.clone());\n             }\n \n             if self.config.server_status_notification() {"}, {"sha": "b17711d6a64524b788db1ed18399139c3d5cca1a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b046696846099de8f052818aae5c18d3cfe3/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=5ce9b046696846099de8f052818aae5c18d3cfe3", "patch": "@@ -45,48 +45,48 @@ pub(crate) fn range(line_index: &LineIndex, range: TextRange) -> lsp_types::Rang\n \n pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n     match symbol_kind {\n-        SymbolKind::Function => lsp_types::SymbolKind::Function,\n-        SymbolKind::Struct => lsp_types::SymbolKind::Struct,\n-        SymbolKind::Enum => lsp_types::SymbolKind::Enum,\n-        SymbolKind::Variant => lsp_types::SymbolKind::EnumMember,\n-        SymbolKind::Trait => lsp_types::SymbolKind::Interface,\n-        SymbolKind::Macro => lsp_types::SymbolKind::Function,\n-        SymbolKind::Module => lsp_types::SymbolKind::Module,\n-        SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TypeParameter,\n-        SymbolKind::Field => lsp_types::SymbolKind::Field,\n-        SymbolKind::Static => lsp_types::SymbolKind::Constant,\n-        SymbolKind::Const => lsp_types::SymbolKind::Constant,\n-        SymbolKind::ConstParam => lsp_types::SymbolKind::Constant,\n-        SymbolKind::Impl => lsp_types::SymbolKind::Object,\n+        SymbolKind::Function => lsp_types::SymbolKind::FUNCTION,\n+        SymbolKind::Struct => lsp_types::SymbolKind::STRUCT,\n+        SymbolKind::Enum => lsp_types::SymbolKind::ENUM,\n+        SymbolKind::Variant => lsp_types::SymbolKind::ENUM_MEMBER,\n+        SymbolKind::Trait => lsp_types::SymbolKind::INTERFACE,\n+        SymbolKind::Macro => lsp_types::SymbolKind::FUNCTION,\n+        SymbolKind::Module => lsp_types::SymbolKind::MODULE,\n+        SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TYPE_PARAMETER,\n+        SymbolKind::Field => lsp_types::SymbolKind::FIELD,\n+        SymbolKind::Static => lsp_types::SymbolKind::CONSTANT,\n+        SymbolKind::Const => lsp_types::SymbolKind::CONSTANT,\n+        SymbolKind::ConstParam => lsp_types::SymbolKind::CONSTANT,\n+        SymbolKind::Impl => lsp_types::SymbolKind::OBJECT,\n         SymbolKind::Local\n         | SymbolKind::SelfParam\n         | SymbolKind::LifetimeParam\n         | SymbolKind::ValueParam\n-        | SymbolKind::Label => lsp_types::SymbolKind::Variable,\n-        SymbolKind::Union => lsp_types::SymbolKind::Struct,\n+        | SymbolKind::Label => lsp_types::SymbolKind::VARIABLE,\n+        SymbolKind::Union => lsp_types::SymbolKind::STRUCT,\n     }\n }\n \n pub(crate) fn structure_node_kind(kind: StructureNodeKind) -> lsp_types::SymbolKind {\n     match kind {\n         StructureNodeKind::SymbolKind(symbol) => symbol_kind(symbol),\n-        StructureNodeKind::Region => lsp_types::SymbolKind::Namespace,\n+        StructureNodeKind::Region => lsp_types::SymbolKind::NAMESPACE,\n     }\n }\n \n pub(crate) fn document_highlight_kind(\n     category: ReferenceCategory,\n ) -> lsp_types::DocumentHighlightKind {\n     match category {\n-        ReferenceCategory::Read => lsp_types::DocumentHighlightKind::Read,\n-        ReferenceCategory::Write => lsp_types::DocumentHighlightKind::Write,\n+        ReferenceCategory::Read => lsp_types::DocumentHighlightKind::READ,\n+        ReferenceCategory::Write => lsp_types::DocumentHighlightKind::WRITE,\n     }\n }\n \n pub(crate) fn diagnostic_severity(severity: Severity) -> lsp_types::DiagnosticSeverity {\n     match severity {\n-        Severity::Error => lsp_types::DiagnosticSeverity::Error,\n-        Severity::WeakWarning => lsp_types::DiagnosticSeverity::Hint,\n+        Severity::Error => lsp_types::DiagnosticSeverity::ERROR,\n+        Severity::WeakWarning => lsp_types::DiagnosticSeverity::HINT,\n     }\n }\n \n@@ -100,34 +100,34 @@ pub(crate) fn completion_item_kind(\n     completion_item_kind: CompletionItemKind,\n ) -> lsp_types::CompletionItemKind {\n     match completion_item_kind {\n-        CompletionItemKind::Attribute => lsp_types::CompletionItemKind::EnumMember,\n-        CompletionItemKind::Binding => lsp_types::CompletionItemKind::Variable,\n-        CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::Struct,\n-        CompletionItemKind::Keyword => lsp_types::CompletionItemKind::Keyword,\n-        CompletionItemKind::Method => lsp_types::CompletionItemKind::Method,\n-        CompletionItemKind::Snippet => lsp_types::CompletionItemKind::Snippet,\n-        CompletionItemKind::UnresolvedReference => lsp_types::CompletionItemKind::Reference,\n+        CompletionItemKind::Attribute => lsp_types::CompletionItemKind::ENUM_MEMBER,\n+        CompletionItemKind::Binding => lsp_types::CompletionItemKind::VARIABLE,\n+        CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::STRUCT,\n+        CompletionItemKind::Keyword => lsp_types::CompletionItemKind::KEYWORD,\n+        CompletionItemKind::Method => lsp_types::CompletionItemKind::METHOD,\n+        CompletionItemKind::Snippet => lsp_types::CompletionItemKind::SNIPPET,\n+        CompletionItemKind::UnresolvedReference => lsp_types::CompletionItemKind::REFERENCE,\n         CompletionItemKind::SymbolKind(symbol) => match symbol {\n-            SymbolKind::Const => lsp_types::CompletionItemKind::Constant,\n-            SymbolKind::ConstParam => lsp_types::CompletionItemKind::TypeParameter,\n-            SymbolKind::Enum => lsp_types::CompletionItemKind::Enum,\n-            SymbolKind::Field => lsp_types::CompletionItemKind::Field,\n-            SymbolKind::Function => lsp_types::CompletionItemKind::Function,\n-            SymbolKind::Impl => lsp_types::CompletionItemKind::Text,\n-            SymbolKind::Label => lsp_types::CompletionItemKind::Variable,\n-            SymbolKind::LifetimeParam => lsp_types::CompletionItemKind::TypeParameter,\n-            SymbolKind::Local => lsp_types::CompletionItemKind::Variable,\n-            SymbolKind::Macro => lsp_types::CompletionItemKind::Method,\n-            SymbolKind::Module => lsp_types::CompletionItemKind::Module,\n-            SymbolKind::SelfParam => lsp_types::CompletionItemKind::Value,\n-            SymbolKind::Static => lsp_types::CompletionItemKind::Value,\n-            SymbolKind::Struct => lsp_types::CompletionItemKind::Struct,\n-            SymbolKind::Trait => lsp_types::CompletionItemKind::Interface,\n-            SymbolKind::TypeAlias => lsp_types::CompletionItemKind::Struct,\n-            SymbolKind::TypeParam => lsp_types::CompletionItemKind::TypeParameter,\n-            SymbolKind::Union => lsp_types::CompletionItemKind::Struct,\n-            SymbolKind::ValueParam => lsp_types::CompletionItemKind::Value,\n-            SymbolKind::Variant => lsp_types::CompletionItemKind::EnumMember,\n+            SymbolKind::Const => lsp_types::CompletionItemKind::CONSTANT,\n+            SymbolKind::ConstParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n+            SymbolKind::Enum => lsp_types::CompletionItemKind::ENUM,\n+            SymbolKind::Field => lsp_types::CompletionItemKind::FIELD,\n+            SymbolKind::Function => lsp_types::CompletionItemKind::FUNCTION,\n+            SymbolKind::Impl => lsp_types::CompletionItemKind::TEXT,\n+            SymbolKind::Label => lsp_types::CompletionItemKind::VARIABLE,\n+            SymbolKind::LifetimeParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n+            SymbolKind::Local => lsp_types::CompletionItemKind::VARIABLE,\n+            SymbolKind::Macro => lsp_types::CompletionItemKind::METHOD,\n+            SymbolKind::Module => lsp_types::CompletionItemKind::MODULE,\n+            SymbolKind::SelfParam => lsp_types::CompletionItemKind::VALUE,\n+            SymbolKind::Static => lsp_types::CompletionItemKind::VALUE,\n+            SymbolKind::Struct => lsp_types::CompletionItemKind::STRUCT,\n+            SymbolKind::Trait => lsp_types::CompletionItemKind::INTERFACE,\n+            SymbolKind::TypeAlias => lsp_types::CompletionItemKind::STRUCT,\n+            SymbolKind::TypeParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n+            SymbolKind::Union => lsp_types::CompletionItemKind::STRUCT,\n+            SymbolKind::ValueParam => lsp_types::CompletionItemKind::VALUE,\n+            SymbolKind::Variant => lsp_types::CompletionItemKind::ENUM_MEMBER,\n         },\n     }\n }\n@@ -165,7 +165,7 @@ pub(crate) fn snippet_text_edit(\n ) -> lsp_ext::SnippetTextEdit {\n     let text_edit = text_edit(line_index, indel);\n     let insert_text_format =\n-        if is_snippet { Some(lsp_types::InsertTextFormat::Snippet) } else { None };\n+        if is_snippet { Some(lsp_types::InsertTextFormat::SNIPPET) } else { None };\n     lsp_ext::SnippetTextEdit {\n         range: text_edit.range,\n         new_text: text_edit.new_text,\n@@ -259,15 +259,15 @@ fn completion_item(\n     set_score(&mut lsp_item, max_relevance, item.relevance());\n \n     if item.deprecated() {\n-        lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n+        lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::DEPRECATED])\n     }\n \n     if item.trigger_call_info() && config.client_commands().trigger_parameter_hints {\n         lsp_item.command = Some(command::trigger_parameter_hints());\n     }\n \n     if item.is_snippet() {\n-        lsp_item.insert_text_format = Some(lsp_types::InsertTextFormat::Snippet);\n+        lsp_item.insert_text_format = Some(lsp_types::InsertTextFormat::SNIPPET);\n     }\n     if config.completion().enable_imports_on_the_fly {\n         if let imports @ [_, ..] = item.imports_to_add() {\n@@ -786,7 +786,7 @@ pub(crate) fn snippet_text_document_ops(\n                 let text_edit = lsp_ext::SnippetTextEdit {\n                     range: lsp_types::Range::default(),\n                     new_text: initial_contents,\n-                    insert_text_format: Some(lsp_types::InsertTextFormat::PlainText),\n+                    insert_text_format: Some(lsp_types::InsertTextFormat::PLAIN_TEXT),\n                     annotation_id: None,\n                 };\n                 let edit_file =\n@@ -908,7 +908,7 @@ pub(crate) fn call_hierarchy_item(\n ) -> Result<lsp_types::CallHierarchyItem> {\n     let name = target.name.to_string();\n     let detail = target.description.clone();\n-    let kind = target.kind.map(symbol_kind).unwrap_or(lsp_types::SymbolKind::Function);\n+    let kind = target.kind.map(symbol_kind).unwrap_or(lsp_types::SymbolKind::FUNCTION);\n     let (uri, range, selection_range) = location_info(snap, target)?;\n     Ok(lsp_types::CallHierarchyItem {\n         name,"}]}