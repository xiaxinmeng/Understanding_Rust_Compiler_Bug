{"sha": "10560067905331adc158b5613fa8460a3122be1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNTYwMDY3OTA1MzMxYWRjMTU4YjU2MTNmYTg0NjBhMzEyMmJlMWY=", "commit": {"author": {"name": "Pavel Sountsov", "email": "siege@google.com", "date": "2015-11-19T06:34:14Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2015-11-19T06:34:14Z"}, "message": "Properly follow the brace styles.", "tree": {"sha": "ffec25756d8335f242d78a82672c8734c31c7d7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffec25756d8335f242d78a82672c8734c31c7d7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10560067905331adc158b5613fa8460a3122be1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10560067905331adc158b5613fa8460a3122be1f", "html_url": "https://github.com/rust-lang/rust/commit/10560067905331adc158b5613fa8460a3122be1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10560067905331adc158b5613fa8460a3122be1f/comments", "author": {"login": "SiegeLordEx", "id": 43966695, "node_id": "MDQ6VXNlcjQzOTY2Njk1", "avatar_url": "https://avatars.githubusercontent.com/u/43966695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLordEx", "html_url": "https://github.com/SiegeLordEx", "followers_url": "https://api.github.com/users/SiegeLordEx/followers", "following_url": "https://api.github.com/users/SiegeLordEx/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLordEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLordEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLordEx/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLordEx/orgs", "repos_url": "https://api.github.com/users/SiegeLordEx/repos", "events_url": "https://api.github.com/users/SiegeLordEx/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLordEx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96a69b708dd2dae12d87ea36c545003009c9416", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96a69b708dd2dae12d87ea36c545003009c9416", "html_url": "https://github.com/rust-lang/rust/commit/a96a69b708dd2dae12d87ea36c545003009c9416"}], "stats": {"total": 118, "additions": 94, "deletions": 24}, "files": [{"sha": "5595b41607b5fcbfe79901f690b988e21a220fed", "filename": "src/items.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "patch": "@@ -634,18 +634,13 @@ impl<'a> FmtVisitor<'a> {\n         let header_str = self.format_header(\"enum \", ident, vis);\n         self.buffer.push_str(&header_str);\n \n-        let separator = if self.config.item_brace_style == BraceStyle::AlwaysNextLine &&\n-                           !enum_def.variants.is_empty() {\n-            format!(\"\\n{}\", self.block_indent.to_string(self.config))\n-        } else {\n-            \" \".to_owned()\n-        };\n         let enum_snippet = self.snippet(span);\n         let body_start = span.lo + BytePos(enum_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n         let generics_str = self.format_generics(generics,\n                                                 \"{\",\n-                                                &separator,\n                                                 \"{\",\n+                                                self.config.item_brace_style,\n+                                                enum_def.variants.is_empty(),\n                                                 self.block_indent,\n                                                 self.block_indent.block_indent(self.config),\n                                                 mk_sp(span.lo, body_start))\n@@ -820,24 +815,23 @@ impl<'a> FmtVisitor<'a> {\n \n         let body_lo = span_after(span, \"{\", self.codemap);\n \n-        let separator = if self.config.item_brace_style == BraceStyle::AlwaysNextLine &&\n-                           !fields.is_empty() {\n-            format!(\"\\n{}\", self.block_indent.to_string(self.config))\n-        } else {\n-            \" \".to_owned()\n-        };\n-\n         let generics_str = match generics {\n             Some(g) => {\n                 try_opt!(self.format_generics(g,\n                                               \"{\",\n-                                              &separator,\n                                               \"{\",\n+                                              self.config.item_brace_style,\n+                                              fields.is_empty(),\n                                               offset,\n                                               offset + header_str.len(),\n                                               mk_sp(span.lo, body_lo)))\n             }\n-            None => format!(\"{}{{\", separator),\n+            None => if self.config.item_brace_style == BraceStyle::AlwaysNextLine &&\n+                       !fields.is_empty() {\n+                format!(\"\\n{}{{\", self.block_indent.to_string(self.config))\n+            } else {\n+                \" {\".to_owned()\n+            },\n         };\n         result.push_str(&generics_str);\n \n@@ -969,8 +963,9 @@ impl<'a> FmtVisitor<'a> {\n     fn format_generics(&self,\n                        generics: &ast::Generics,\n                        opener: &str,\n-                       separator: &str,\n                        terminator: &str,\n+                       brace_style: BraceStyle,\n+                       force_same_line_brace: bool,\n                        offset: Indent,\n                        generics_offset: Indent,\n                        span: Span)\n@@ -985,11 +980,22 @@ impl<'a> FmtVisitor<'a> {\n                                                                       terminator,\n                                                                       Some(span.hi)));\n             result.push_str(&where_clause_str);\n-            result.push('\\n');\n-            result.push_str(&self.block_indent.to_string(self.config));\n+            if !force_same_line_brace &&\n+               (brace_style == BraceStyle::SameLineWhere ||\n+                brace_style == BraceStyle::AlwaysNextLine) {\n+                result.push('\\n');\n+                result.push_str(&self.block_indent.to_string(self.config));\n+            } else {\n+                result.push(' ');\n+            }\n             result.push_str(opener);\n         } else {\n-            result.push_str(separator);\n+            if !force_same_line_brace && brace_style == BraceStyle::AlwaysNextLine {\n+                result.push('\\n');\n+                result.push_str(&self.block_indent.to_string(self.config));\n+            } else {\n+                result.push(' ');\n+            }\n             result.push_str(opener);\n         }\n "}, {"sha": "96a628349eaa89541805b1c589ca0a11dac3b787", "filename": "tests/source/item-brace-style-always-next-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/tests%2Fsource%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/tests%2Fsource%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitem-brace-style-always-next-line.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "previous_filename": "tests/source/item-brace-style-next-line.rs"}, {"sha": "636a584ff68afa9280b38af1c99cc93ad6007cdd", "filename": "tests/source/item-brace-style-prefer-same-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/tests%2Fsource%2Fitem-brace-style-prefer-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/tests%2Fsource%2Fitem-brace-style-prefer-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitem-brace-style-prefer-same-line.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "previous_filename": "tests/source/item-brace-style-same-line.rs"}, {"sha": "7b2a95d3245d5a250930458a712afd3374e73083", "filename": "tests/source/item-brace-style-same-line-where.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/tests%2Fsource%2Fitem-brace-style-same-line-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/tests%2Fsource%2Fitem-brace-style-same-line-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitem-brace-style-same-line-where.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "patch": "@@ -0,0 +1,31 @@\n+// rustfmt-item_brace_style: SameLineWhere\n+\n+mod M {\n+    enum A\n+    {\n+        A,\n+    }\n+\n+    struct B\n+    {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T> where T: Copy {\n+        A,\n+    }\n+\n+    struct B<T> where T: Copy {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C<T> where T: Copy {}\n+\n+    struct D<T> where T: Copy {}\n+}"}, {"sha": "48dcebc0263e112b12a5cae16b47bb6a0fc8ad93", "filename": "tests/target/item-brace-style-always-next-line.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "patch": "@@ -30,10 +30,8 @@ mod M {\n \n     // For empty enums and structs, the brace remains on the same line.\n     enum C<T>\n-        where T: Copy\n-    {}\n+        where T: Copy {}\n \n     struct D<T>\n-        where T: Copy\n-    {}\n+        where T: Copy {}\n }", "previous_filename": "tests/target/item-brace-style-next-line.rs"}, {"sha": "b38bd2e1a19149e9153f8e02626f5e4f18008f02", "filename": "tests/target/item-brace-style-prefer-same-line.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "previous_filename": "tests/target/item-brace-style-same-line.rs"}, {"sha": "cdcd813fda4aa6dd22ba0b4d9b048d217d3d8da5", "filename": "tests/target/item-brace-style-same-line-where.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/10560067905331adc158b5613fa8460a3122be1f/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10560067905331adc158b5613fa8460a3122be1f/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs?ref=10560067905331adc158b5613fa8460a3122be1f", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-item_brace_style: SameLineWhere\n+\n+mod M {\n+    enum A {\n+        A,\n+    }\n+\n+    struct B {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T>\n+        where T: Copy\n+    {\n+        A,\n+    }\n+\n+    struct B<T>\n+        where T: Copy\n+    {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C<T>\n+        where T: Copy {}\n+\n+    struct D<T>\n+        where T: Copy {}\n+}"}]}