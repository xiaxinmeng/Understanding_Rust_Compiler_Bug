{"sha": "23b040962ff299feeef1f967bc2d5ba92b01c2bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjA0MDk2MmZmMjk5ZmVlZWYxZjk2N2JjMmQ1YmE5MmIwMWMyYmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T19:13:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T19:43:06Z"}, "message": "fold curly blocks", "tree": {"sha": "bad7cb6bc8614a8c1ef19b90925dfcb5a8c57284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad7cb6bc8614a8c1ef19b90925dfcb5a8c57284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b040962ff299feeef1f967bc2d5ba92b01c2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b040962ff299feeef1f967bc2d5ba92b01c2bc", "html_url": "https://github.com/rust-lang/rust/commit/23b040962ff299feeef1f967bc2d5ba92b01c2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b040962ff299feeef1f967bc2d5ba92b01c2bc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7e8a175e6067e4956a23cfd0c1baf003678734", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7e8a175e6067e4956a23cfd0c1baf003678734", "html_url": "https://github.com/rust-lang/rust/commit/8d7e8a175e6067e4956a23cfd0c1baf003678734"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "da542ecf08a05ab25582663c8b5589ffccb3b8b9", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/23b040962ff299feeef1f967bc2d5ba92b01c2bc/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b040962ff299feeef1f967bc2d5ba92b01c2bc/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=23b040962ff299feeef1f967bc2d5ba92b01c2bc", "patch": "@@ -10,6 +10,7 @@ use ra_syntax::{\n pub enum FoldKind {\n     Comment,\n     Imports,\n+    Block,\n }\n \n #[derive(Debug)]\n@@ -62,6 +63,8 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n         USE_ITEM => Some(FoldKind::Imports),\n+        NAMED_FIELD_DEF_LIST | FIELD_PAT_LIST | ITEM_LIST | EXTERN_ITEM_LIST | USE_TREE_LIST\n+        | BLOCK | ENUM_VARIANT_LIST => Some(FoldKind::Block),\n         _ => None,\n     }\n }\n@@ -205,7 +208,7 @@ mod tests {\n \n // But this is not\n \n-fn main() {\n+fn main() <fold>{\n     <fold>// We should\n     // also\n     // fold\n@@ -214,10 +217,11 @@ fn main() {\n     //! because it has another flavor</fold>\n     <fold>/* As does this\n     multiline comment */</fold>\n-}\"#;\n+}</fold>\"#;\n \n         let fold_kinds = &[\n             FoldKind::Comment,\n+            FoldKind::Block,\n             FoldKind::Comment,\n             FoldKind::Comment,\n             FoldKind::Comment,\n@@ -228,16 +232,16 @@ fn main() {\n     #[test]\n     fn test_fold_imports() {\n         let text = r#\"\n-<fold>use std::{\n+<fold>use std::<fold>{\n     str,\n     vec,\n     io as iop\n-};</fold>\n+}</fold>;</fold>\n \n-fn main() {\n-}\"#;\n+fn main() <fold>{\n+}</fold>\"#;\n \n-        let folds = &[FoldKind::Imports];\n+        let folds = &[FoldKind::Imports, FoldKind::Block, FoldKind::Block];\n         do_check(text, folds);\n     }\n \n@@ -255,10 +259,10 @@ use std::collections::HashMap;\n // Some random comment\n use std::collections::VecDeque;\n \n-fn main() {\n-}\"#;\n+fn main() <fold>{\n+}</fold>\"#;\n \n-        let folds = &[FoldKind::Imports, FoldKind::Imports];\n+        let folds = &[FoldKind::Imports, FoldKind::Imports, FoldKind::Block];\n         do_check(text, folds);\n     }\n \n@@ -272,16 +276,22 @@ use std::io as iop;</fold>\n <fold>use std::mem;\n use std::f64;</fold>\n \n-<fold>use std::collections::{\n+<fold>use std::collections::<fold>{\n     HashMap,\n     VecDeque,\n-};</fold>\n+}</fold>;</fold>\n // Some random comment\n \n-fn main() {\n-}\"#;\n+fn main() <fold>{\n+}</fold>\"#;\n \n-        let folds = &[FoldKind::Imports, FoldKind::Imports, FoldKind::Imports];\n+        let folds = &[\n+            FoldKind::Imports,\n+            FoldKind::Imports,\n+            FoldKind::Imports,\n+            FoldKind::Block,\n+            FoldKind::Block,\n+        ];\n         do_check(text, folds);\n     }\n "}, {"sha": "801966304cf535fc69a0903cd20a37cce9ddfee0", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23b040962ff299feeef1f967bc2d5ba92b01c2bc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b040962ff299feeef1f967bc2d5ba92b01c2bc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=23b040962ff299feeef1f967bc2d5ba92b01c2bc", "patch": "@@ -446,16 +446,17 @@ pub fn handle_folding_range(\n             .into_iter()\n             .map(|fold| {\n                 let kind = match fold.kind {\n-                    FoldKind::Comment => FoldingRangeKind::Comment,\n-                    FoldKind::Imports => FoldingRangeKind::Imports,\n+                    FoldKind::Comment => Some(FoldingRangeKind::Comment),\n+                    FoldKind::Imports => Some(FoldingRangeKind::Imports),\n+                    FoldKind::Block => None,\n                 };\n                 let range = fold.range.conv_with(&line_index);\n                 FoldingRange {\n                     start_line: range.start.line,\n                     start_character: Some(range.start.character),\n                     end_line: range.end.line,\n                     end_character: Some(range.start.character),\n-                    kind: Some(kind),\n+                    kind,\n                 }\n             })\n             .collect(),"}, {"sha": "1ae800d7cc8f66af0207e0ee7ded96112a1ff5da", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23b040962ff299feeef1f967bc2d5ba92b01c2bc/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b040962ff299feeef1f967bc2d5ba92b01c2bc/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=23b040962ff299feeef1f967bc2d5ba92b01c2bc", "patch": "@@ -98,6 +98,7 @@ pub fn extract_ranges(mut text: &str, tag: &str) -> (Vec<TextRange>, String) {\n         }\n     }\n     assert!(stack.is_empty(), \"unmatched <{}>\", tag);\n+    ranges.sort_by_key(|r| (r.start(), r.end()));\n     (ranges, res)\n }\n "}]}