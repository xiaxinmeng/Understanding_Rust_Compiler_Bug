{"sha": "3a5567bad45fbde0962263f484ebc76f750920e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTU2N2JhZDQ1ZmJkZTA5NjIyNjNmNDg0ZWJjNzZmNzUwOTIwZTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-28T11:06:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-25T09:07:42Z"}, "message": "Address PR comments", "tree": {"sha": "4afc9e8d848f6276feff88183fce38f0e1455146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4afc9e8d848f6276feff88183fce38f0e1455146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5567bad45fbde0962263f484ebc76f750920e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlj/Ed4ACgkQpp+NIls6\n19lkTQ//dFr+Q30IJWdo9zYus96salsuXcVxQsFPWSvCmkLw2qCxIQOgsKoGZp7z\n5y/Zn3jISfxD2vYM4QLlwG10l5J50qs+TSchPn/Kpa/NiWEJjxtZyz3Sb1J8IPd8\nI+Y9niJNjCQPYNoWPjtylmj44r2kdO0hR/iIYy6TngR4FxwA2ilnr7ydRwr1g1Sm\n6WrtriVzGDwTEuuI79335CAxGRZZeGpD4fepfDFMGKfk7IO+RWH7v+i9Ycb/e6Nt\n/aBr5x8HlKBP3sIGcDwirepZg+177eq5fXCvvDUQzNDJ7CDiIdtYuYN9/p4U5Ppe\n4bMOB8SJjU15aUpiuCcn8elJfUZjNC3nsuTiDRqQ+dRQHwh4uv+9QLComyWDSrJw\nk89Tt1BRolEha4fWtdue8jjGQn6sqr9QbHWnPYvRYzQFtG08rdScvXg2YS4hV1G4\nsWV0k+1+YIQgxL5tzP3MvjEeKN0CcDBlinXe2tSKi0Q664L23hH5+J2KHyJwz8lg\nfRtGpmszZfnQRqAGT/DVZCCNOgY7XrZeJXrwnV3d2hC9WL6IGgFB1wvDJQkoAslY\nMNQC2MTir8yKfIU6QYLB549hBJKzt1esEGFmMspHT2CuYwBlYHDLPBABouUgSTe8\nf0OFO1pqQFiAwrEC9dOGTSzU1yBHbPLi7hmM/fiI2CvkTFPohlM=\n=1o0p\n-----END PGP SIGNATURE-----", "payload": "tree 4afc9e8d848f6276feff88183fce38f0e1455146\nparent ca701d7aeb6cd16a6c1fe94230918535e9e3164d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1490699161 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1493111262 +0200\n\nAddress PR comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5567bad45fbde0962263f484ebc76f750920e4", "html_url": "https://github.com/rust-lang/rust/commit/3a5567bad45fbde0962263f484ebc76f750920e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5567bad45fbde0962263f484ebc76f750920e4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca701d7aeb6cd16a6c1fe94230918535e9e3164d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca701d7aeb6cd16a6c1fe94230918535e9e3164d", "html_url": "https://github.com/rust-lang/rust/commit/ca701d7aeb6cd16a6c1fe94230918535e9e3164d"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "085424ef7e676a299d8a593b0e3d804fa1b7abc6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=3a5567bad45fbde0962263f484ebc76f750920e4", "patch": "@@ -37,7 +37,9 @@ impl Emitter for EmitterWriter {\n \n         if let Some(sugg) = db.suggestion.clone() {\n             assert_eq!(sugg.msp.primary_spans().len(), sugg.substitutes.len());\n-            if sugg.substitutes.len() == 1 {\n+            if sugg.substitutes.len() == 1 && // don't display multispans as labels\n+               sugg.msg.split_whitespace().count() < 10 && // don't display long messages as labels\n+               sugg.substitutes[0].find('\\n').is_none() { // don't display multiline suggestions as labels\n                 let msg = format!(\"{} `{}`\", sugg.msg, sugg.substitutes[0]);\n                 primary_span.push_span_label(sugg.msp.primary_spans()[0], msg);\n             } else {"}, {"sha": "7d17cee98799a586871ded85a2b715bd6e825d03", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=3a5567bad45fbde0962263f484ebc76f750920e4", "patch": "@@ -197,7 +197,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // error types are considered \"builtin\"\n                 if !lhs_ty.references_error() {\n                     if let IsAssign::Yes = is_assign {\n-                        struct_span_err!(self.tcx.sess, lhs_expr.span, E0368,\n+                        struct_span_err!(self.tcx.sess, expr.span, E0368,\n                                          \"binary assignment operation `{}=` \\\n                                           cannot be applied to type `{}`\",\n                                          op.node.as_str(),\n@@ -207,7 +207,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         op.node.as_str(), lhs_ty))\n                             .emit();\n                     } else {\n-                        let mut err = struct_span_err!(self.tcx.sess, lhs_expr.span, E0369,\n+                        let mut err = struct_span_err!(self.tcx.sess, expr.span, E0369,\n                             \"binary operation `{}` cannot be applied to type `{}`\",\n                             op.node.as_str(),\n                             lhs_ty);\n@@ -244,7 +244,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                         if let Some(missing_trait) = missing_trait {\n                             if missing_trait == \"std::ops::Add\" &&\n-                                self.check_str_addition(lhs_expr, lhs_ty,\n+                                self.check_str_addition(expr, lhs_expr, lhs_ty,\n                                                          rhs_expr, rhs_ty_var, &mut err) {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n@@ -266,6 +266,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn check_str_addition(&self,\n+                          expr: &'gcx hir::Expr,\n                           lhs_expr: &'gcx hir::Expr,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_expr: &'gcx hir::Expr,\n@@ -277,7 +278,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let TyRef(_, l_ty) = lhs_ty.sty {\n             if let TyRef(_, r_ty) = rhs_ty.sty {\n                 if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {\n-                    err.note(\"`+` can't be used to concatenate two `&str` strings\");\n+                    err.span_label(expr.span,\n+                        &\"`+` can't be used to concatenate two `&str` strings\");\n                     let codemap = self.tcx.sess.codemap();\n                     let suggestion =\n                         match codemap.span_to_snippet(lhs_expr.span) {\n@@ -289,7 +291,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   from a string reference. String concatenation \\\n                                   appends the string on the right to the string \\\n                                   on the left and may require reallocation. This \\\n-                                  requires ownership of the string on the left:\"), suggestion);\n+                                  requires ownership of the string on the left.\"), suggestion);\n                     is_string_addition = true;\n                 }\n "}, {"sha": "54637269bc02c58ddf6c271bc681e06f3f7cb247", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=3a5567bad45fbde0962263f484ebc76f750920e4", "patch": "@@ -3181,6 +3181,13 @@ x << 2; // ok!\n \n It is also possible to overload most operators for your own type by\n implementing traits from `std::ops`.\n+\n+String concatenation appends the string on the right to the string on the\n+left and may require reallocation. This requires ownership of the string\n+on the left. If something should be added to a string literal, move the\n+literal to the heap by allocating it with `to_owned()` like in \n+`\"Your text\".to_owned()`.\n+\n \"##,\n \n E0370: r##\""}, {"sha": "e1fe8f1b2eb3fa5b5ba4572f3f61f7f4ba51167e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3a5567bad45fbde0962263f484ebc76f750920e4", "patch": "@@ -5160,9 +5160,7 @@ impl<'a> Parser<'a> {\n `pub(in path::to::module)`: visible only on the specified path\"##;\n                 let path = self.parse_path(PathStyle::Mod)?;\n                 let path_span = self.prev_span;\n-                let help_msg = format!(\"to make this visible only to module `{}`, add `in` before \\\n-                                       the path:\",\n-                                       path);\n+                let help_msg = format!(\"make this visible only to module `{}` with `in`:\", path);\n                 self.expect(&token::CloseDelim(token::Paren))?;  // `)`\n                 let mut err = self.span_fatal_help(path_span, &msg, &suggestion);\n                 err.span_suggestion(path_span, &help_msg, format!(\"in {}\", path));"}, {"sha": "760df5b5da016b2a19d1ed13b6ef6df132b0b26e", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=3a5567bad45fbde0962263f484ebc76f750920e4", "patch": "@@ -2,7 +2,7 @@ error: incorrect visibility restriction\n   --> $DIR/pub-restricted.rs:15:6\n    |\n 15 | pub (a) fn afn() {}\n-   |      ^ to make this visible only to module `a`, add `in` before the path: `in a`\n+   |      ^ make this visible only to module `a` with `in`: `in a`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate\n@@ -13,7 +13,7 @@ error: incorrect visibility restriction\n   --> $DIR/pub-restricted.rs:16:6\n    |\n 16 | pub (b) fn bfn() {}\n-   |      ^ to make this visible only to module `b`, add `in` before the path: `in b`\n+   |      ^ make this visible only to module `b` with `in`: `in b`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate\n@@ -24,7 +24,7 @@ error: incorrect visibility restriction\n   --> $DIR/pub-restricted.rs:32:14\n    |\n 32 |         pub (a) invalid: usize,\n-   |              ^ to make this visible only to module `a`, add `in` before the path: `in a`\n+   |              ^ make this visible only to module `a` with `in`: `in a`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate\n@@ -35,7 +35,7 @@ error: incorrect visibility restriction\n   --> $DIR/pub-restricted.rs:41:6\n    |\n 41 | pub (xyz) fn xyz() {}\n-   |      ^^^ to make this visible only to module `xyz`, add `in` before the path: `in xyz`\n+   |      ^^^ make this visible only to module `xyz` with `in`: `in xyz`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate"}, {"sha": "cd3a41b037c7996e8fa529e8fc805b9bca3e4c61", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a5567bad45fbde0962263f484ebc76f750920e4/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=3a5567bad45fbde0962263f484ebc76f750920e4", "patch": "@@ -2,15 +2,16 @@ error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n   --> $DIR/issue-39018.rs:12:13\n    |\n 12 |     let x = \"Hello \" + \"World!\";\n-   |             ^^^^^^^^ `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left: `\"Hello \".to_owned()`\n+   |             ^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n    |\n-   = note: `+` can't be used to concatenate two `&str` strings\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n+   |     let x = \"Hello \".to_owned() + \"World!\";\n \n error[E0369]: binary operation `+` cannot be applied to type `World`\n   --> $DIR/issue-39018.rs:17:13\n    |\n 17 |     let y = World::Hello + World::Goodbye;\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n "}]}