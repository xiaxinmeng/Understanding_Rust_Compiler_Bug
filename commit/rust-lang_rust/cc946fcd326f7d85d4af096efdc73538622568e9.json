{"sha": "cc946fcd326f7d85d4af096efdc73538622568e9", "node_id": "C_kwDOAAsO6NoAKGNjOTQ2ZmNkMzI2ZjdkODVkNGFmMDk2ZWZkYzczNTM4NjIyNTY4ZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-18T20:23:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-18T20:23:26Z"}, "message": "Auto merge of #91019 - JohnTitor:rollup-q95ra7r, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #90386 (Add `-Zassert-incr-state` to assert state of incremental cache)\n - #90438 (Clean up mess for --show-coverage documentation)\n - #90480 (Mention `Vec::remove` in `Vec::swap_remove`'s docs)\n - #90607 (Make slice->str conversion and related functions `const`)\n - #90750 (rustdoc: Replace where-bounded Clean impl with simple function)\n - #90895 (require full validity when determining the discriminant of a value)\n - #90989 (Avoid suggesting literal formatting that turns into member access)\n - #91002 (rustc: Remove `#[rustc_synthetic]`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a23aec459469e926ba5133134d0f9864c1f9bb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a23aec459469e926ba5133134d0f9864c1f9bb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc946fcd326f7d85d4af096efdc73538622568e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc946fcd326f7d85d4af096efdc73538622568e9", "html_url": "https://github.com/rust-lang/rust/commit/cc946fcd326f7d85d4af096efdc73538622568e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc946fcd326f7d85d4af096efdc73538622568e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f580acc0ce233d5c4d1f9680d354fded88b824", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f580acc0ce233d5c4d1f9680d354fded88b824", "html_url": "https://github.com/rust-lang/rust/commit/b6f580acc0ce233d5c4d1f9680d354fded88b824"}, {"sha": "08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c1639fd933d56d1b5e386eea887f5bbf3e93f1", "html_url": "https://github.com/rust-lang/rust/commit/08c1639fd933d56d1b5e386eea887f5bbf3e93f1"}], "stats": {"total": 561, "additions": 310, "deletions": 251}, "files": [{"sha": "fef6e87bfdb39b42e9f80c0807722eb98260a154", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1338,10 +1338,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             pure_wrt_drop: false,\n                             bounds: hir_bounds,\n                             span: self.lower_span(span),\n-                            kind: hir::GenericParamKind::Type {\n-                                default: None,\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                            },\n+                            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n                         });\n \n                         hir::TyKind::Path(hir::QPath::Resolved(\n@@ -1954,12 +1951,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     default: default.as_ref().map(|x| {\n                         self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n                     }),\n-                    synthetic: param\n-                        .attrs\n-                        .iter()\n-                        .filter(|attr| attr.has_name(sym::rustc_synthetic))\n-                        .map(|_| hir::SyntheticTyParamKind::FromAttr)\n-                        .next(),\n+                    synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)"}, {"sha": "5e7bbc0113271bdc248421ce01b8b271169b6971", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -265,6 +265,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             sym::discriminant_value => {\n                 let place = self.deref_operand(&args[0])?;\n+                if M::enforce_validity(self) {\n+                    // This is 'using' the value, so make sure the validity invariant is satisfied.\n+                    // (Also see https://github.com/rust-lang/rust/pull/89764.)\n+                    self.validate_operand(&place.into())?;\n+                }\n+\n                 let discr_val = self.read_discriminant(&place.into())?.0;\n                 self.write_scalar(discr_val, dest)?;\n             }"}, {"sha": "2759a7d9d268f75d752fa79aef435b64f588389d", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -304,6 +304,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Discriminant(place) => {\n                 let op = self.eval_place_to_op(place, None)?;\n+                if M::enforce_validity(self) {\n+                    // This is 'using' the value, so make sure the validity invariant is satisfied.\n+                    // (Also see https://github.com/rust-lang/rust/pull/89764.)\n+                    self.validate_operand(&op)?;\n+                }\n+\n                 let discr_val = self.read_discriminant(&op)?.0;\n                 self.write_scalar(discr_val, &dest)?;\n             }"}, {"sha": "74a637fde33fc7a4d6124f444167ea25d6f8ff76", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -601,7 +601,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         TEST, rustc_expected_cgu_reuse, Normal,\n         template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n     ),\n-    rustc_attr!(TEST, rustc_synthetic, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_symbol_name, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_def_path, Normal, template!(Word)),"}, {"sha": "a4db57bfc1120e4e69a0e2ab61dbe3406f3ee813", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -504,7 +504,7 @@ pub enum GenericParamKind<'hir> {\n     },\n     Type {\n         default: Option<&'hir Ty<'hir>>,\n-        synthetic: Option<SyntheticTyParamKind>,\n+        synthetic: bool,\n     },\n     Const {\n         ty: &'hir Ty<'hir>,\n@@ -577,16 +577,6 @@ impl Generics<'hir> {\n     }\n }\n \n-/// Synthetic type parameters are converted to another form during lowering; this allows\n-/// us to track the original form they had, and is useful for error messages.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]\n-#[derive(HashStable_Generic)]\n-pub enum SyntheticTyParamKind {\n-    ImplTrait,\n-    // Created by the `#[rustc_synthetic]` attribute.\n-    FromAttr,\n-}\n-\n /// A where-clause in a definition.\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereClause<'hir> {"}, {"sha": "9c6e2aeb50a761a4299a5222ea8050f6539cc79a", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::OnDiskCache;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable;\n+use rustc_session::config::IncrementalStateAssertion;\n use rustc_session::Session;\n use std::path::Path;\n \n@@ -16,6 +17,7 @@ use super::work_product;\n \n type WorkProductMap = FxHashMap<WorkProductId, WorkProduct>;\n \n+#[derive(Debug)]\n pub enum LoadResult<T> {\n     Ok { data: T },\n     DataOutOfDate,\n@@ -24,6 +26,26 @@ pub enum LoadResult<T> {\n \n impl<T: Default> LoadResult<T> {\n     pub fn open(self, sess: &Session) -> T {\n+        // Check for errors when using `-Zassert-incremental-state`\n+        match (sess.opts.assert_incr_state, &self) {\n+            (Some(IncrementalStateAssertion::NotLoaded), LoadResult::Ok { .. }) => {\n+                sess.fatal(\n+                    \"We asserted that the incremental cache should not be loaded, \\\n+                         but it was loaded.\",\n+                );\n+            }\n+            (\n+                Some(IncrementalStateAssertion::Loaded),\n+                LoadResult::Error { .. } | LoadResult::DataOutOfDate,\n+            ) => {\n+                sess.fatal(\n+                    \"We asserted that an existing incremental cache directory should \\\n+                         be successfully loaded, but it was not.\",\n+                );\n+            }\n+            _ => {}\n+        };\n+\n         match self {\n             LoadResult::Error { message } => {\n                 sess.warn(&message);\n@@ -33,7 +55,7 @@ impl<T: Default> LoadResult<T> {\n                 if let Err(err) = delete_all_session_dir_contents(sess) {\n                     sess.err(&format!(\n                         \"Failed to delete invalidated or incompatible \\\n-                                      incremental compilation session directory contents `{}`: {}.\",\n+                         incremental compilation session directory contents `{}`: {}.\",\n                         dep_graph_path(sess).display(),\n                         err\n                     ));"}, {"sha": "6b5c79a2d5dcd18b6fc7f82e3b903ecf37acb7d7", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -636,6 +636,7 @@ fn test_debugging_options_tracking_hash() {\n \n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n     // This list is in alphabetical order.\n+    untracked!(assert_incr_state, Some(String::from(\"loaded\")));\n     untracked!(ast_json, true);\n     untracked!(ast_json_noexpand, true);\n     untracked!(borrowck, String::from(\"other\"));"}, {"sha": "f53f1871508d7d22da0be0eaedcf7220a8c8617d", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -3,7 +3,6 @@ use crate::ty;\n use crate::ty::subst::{Subst, SubstsRef};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -13,14 +12,8 @@ use super::{EarlyBoundRegion, InstantiatedPredicates, ParamConst, ParamTy, Predi\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum GenericParamDefKind {\n     Lifetime,\n-    Type {\n-        has_default: bool,\n-        object_lifetime_default: ObjectLifetimeDefault,\n-        synthetic: Option<hir::SyntheticTyParamKind>,\n-    },\n-    Const {\n-        has_default: bool,\n-    },\n+    Type { has_default: bool, object_lifetime_default: ObjectLifetimeDefault, synthetic: bool },\n+    Const { has_default: bool },\n }\n \n impl GenericParamDefKind {\n@@ -202,15 +195,7 @@ impl<'tcx> Generics {\n     /// Returns `true` if `params` has `impl Trait`.\n     pub fn has_impl_trait(&'tcx self) -> bool {\n         self.params.iter().any(|param| {\n-            matches!(\n-                param.kind,\n-                ty::GenericParamDefKind::Type {\n-                    synthetic: Some(\n-                        hir::SyntheticTyParamKind::ImplTrait | hir::SyntheticTyParamKind::FromAttr,\n-                    ),\n-                    ..\n-                }\n-            )\n+            matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n         })\n     }\n }"}, {"sha": "d506931b516e73d3f6d72c234021ed433861a8bf", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1810,12 +1810,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     let (span, sugg) = if let Some(param) = generics.params.iter().find(|p| {\n                         !matches!(\n                             p.kind,\n-                            hir::GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            } | hir::GenericParamKind::Lifetime {\n-                                kind: hir::LifetimeParamKind::Elided,\n-                            }\n+                            hir::GenericParamKind::Type { synthetic: true, .. }\n+                                | hir::GenericParamKind::Lifetime {\n+                                    kind: hir::LifetimeParamKind::Elided,\n+                                }\n                         )\n                     }) {\n                         (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n@@ -2042,12 +2040,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         if let Some(param) = generics.params.iter().find(|p| {\n                             !matches!(\n                                 p.kind,\n-                                hir::GenericParamKind::Type {\n-                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                    ..\n-                                } | hir::GenericParamKind::Lifetime {\n-                                    kind: hir::LifetimeParamKind::Elided\n-                                }\n+                                hir::GenericParamKind::Type { synthetic: true, .. }\n+                                    | hir::GenericParamKind::Lifetime {\n+                                        kind: hir::LifetimeParamKind::Elided\n+                                    }\n                             )\n                         }) {\n                             (param.span.shrink_to_lo(), \"'a, \".to_string())"}, {"sha": "3f0a6b0e2f6a0be93f2541aafd49079e775642be", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -165,6 +165,18 @@ pub enum LinkerPluginLto {\n     Disabled,\n }\n \n+/// Used with `-Z assert-incr-state`.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum IncrementalStateAssertion {\n+    /// Found and loaded an existing session directory.\n+    ///\n+    /// Note that this says nothing about whether any particular query\n+    /// will be found to be red or green.\n+    Loaded,\n+    /// Did not load an existing session directory.\n+    NotLoaded,\n+}\n+\n impl LinkerPluginLto {\n     pub fn enabled(&self) -> bool {\n         match *self {\n@@ -704,6 +716,7 @@ pub fn host_triple() -> &'static str {\n impl Default for Options {\n     fn default() -> Options {\n         Options {\n+            assert_incr_state: None,\n             crate_types: Vec::new(),\n             optimize: OptLevel::No,\n             debuginfo: DebugInfo::None,\n@@ -1626,6 +1639,21 @@ fn select_debuginfo(\n     }\n }\n \n+crate fn parse_assert_incr_state(\n+    opt_assertion: &Option<String>,\n+    error_format: ErrorOutputType,\n+) -> Option<IncrementalStateAssertion> {\n+    match opt_assertion {\n+        Some(s) if s.as_str() == \"loaded\" => Some(IncrementalStateAssertion::Loaded),\n+        Some(s) if s.as_str() == \"not-loaded\" => Some(IncrementalStateAssertion::NotLoaded),\n+        Some(s) => early_error(\n+            error_format,\n+            &format!(\"unexpected incremental state assertion value: {}\", s),\n+        ),\n+        None => None,\n+    }\n+}\n+\n fn parse_native_lib_kind(\n     matches: &getopts::Matches,\n     kind: &str,\n@@ -2015,6 +2043,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let incremental = cg.incremental.as_ref().map(PathBuf::from);\n \n+    let assert_incr_state =\n+        parse_assert_incr_state(&debugging_opts.assert_incr_state, error_format);\n+\n     if debugging_opts.profile && incremental.is_some() {\n         early_error(\n             error_format,\n@@ -2179,6 +2210,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     };\n \n     Options {\n+        assert_incr_state,\n         crate_types,\n         optimize: opt_level,\n         debuginfo,"}, {"sha": "2c217e40abaa5de80a70571ad524e24cb9436863", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -4,7 +4,6 @@ use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n-\n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n \n@@ -150,6 +149,7 @@ top_level_options!(\n         /// If `Some`, enable incremental compilation, using the given\n         /// directory to store intermediate results.\n         incremental: Option<PathBuf> [UNTRACKED],\n+        assert_incr_state: Option<IncrementalStateAssertion> [UNTRACKED],\n \n         debugging_opts: DebuggingOptions [SUBSTRUCT],\n         prints: Vec<PrintRequest> [UNTRACKED],\n@@ -1046,6 +1046,9 @@ options! {\n         \"make cfg(version) treat the current version as incomplete (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n+    assert_incr_state: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"assert that the incremental cache is in given state: \\\n+         either `loaded` or `not-loaded`.\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt (default: no)\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "9992b1f31fefc90f2c8d57c435703c69ddb58930", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1148,7 +1148,6 @@ symbols! {\n         rustc_std_internal_symbol,\n         rustc_strict_coherence,\n         rustc_symbol_name,\n-        rustc_synthetic,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n         rustc_trivial_field_reads,"}, {"sha": "1ff31ff04a2b6702a76aba325b3fdf3215abedd1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -290,9 +290,10 @@ fn suggest_restriction(\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n         let (sp, suggestion) = match (\n-            generics.params.iter().find(|p| {\n-                !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), .. })\n-            }),\n+            generics\n+                .params\n+                .iter()\n+                .find(|p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: true, .. })),\n             super_traits,\n         ) {\n             (_, None) => predicate_constraint("}, {"sha": "e8bd038fed7a5b1ddf8cebbcaab388178266d5cf", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -464,16 +464,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .params\n                 .iter()\n                 .filter(|param| {\n-                    matches!(\n-                        param.kind,\n-                        ty::GenericParamDefKind::Type {\n-                            synthetic: Some(\n-                                hir::SyntheticTyParamKind::ImplTrait\n-                                    | hir::SyntheticTyParamKind::FromAttr\n-                            ),\n-                            ..\n-                        }\n-                    )\n+                    matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n                 })\n                 .count()\n         } else {"}, {"sha": "ef7c70960151d56fd72f3b3017ef98cccea09256", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -607,10 +607,7 @@ fn compare_number_of_generics<'tcx>(\n                         .params\n                         .iter()\n                         .filter_map(|p| match p.kind {\n-                            GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            } => Some(p.span),\n+                            GenericParamKind::Type { synthetic: true, .. } => Some(p.span),\n                             _ => None,\n                         })\n                         .collect();\n@@ -627,10 +624,7 @@ fn compare_number_of_generics<'tcx>(\n                 .params\n                 .iter()\n                 .filter_map(|p| match p.kind {\n-                    GenericParamKind::Type {\n-                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                        ..\n-                    } => Some(p.span),\n+                    GenericParamKind::Type { synthetic: true, .. } => Some(p.span),\n                     _ => None,\n                 })\n                 .collect();\n@@ -823,7 +817,7 @@ fn compare_synthetic_generics<'tcx>(\n             match (impl_synthetic, trait_synthetic) {\n                 // The case where the impl method uses `impl Trait` but the trait method uses\n                 // explicit generics\n-                (Some(hir::SyntheticTyParamKind::ImplTrait), None) => {\n+                (true, false) => {\n                     err.span_label(impl_span, \"expected generic parameter, found `impl Trait`\");\n                     (|| {\n                         // try taking the name from the trait impl\n@@ -864,7 +858,7 @@ fn compare_synthetic_generics<'tcx>(\n                 }\n                 // The case where the trait method uses `impl Trait`, but the impl method uses\n                 // explicit generics.\n-                (None, Some(hir::SyntheticTyParamKind::ImplTrait)) => {\n+                (false, true) => {\n                     err.span_label(impl_span, \"expected `impl Trait`, found generic parameter\");\n                     (|| {\n                         let impl_m = impl_m.def_id.as_local()?;"}, {"sha": "c9fa0fd72fc50cce251f16072821e7a7f61ba806", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -2025,7 +2025,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n         let generics = self.tcx.generics_of(self.body_id.owner.to_def_id());\n         let generic_param = generics.type_param(&param, self.tcx);\n-        if let ty::GenericParamDefKind::Type { synthetic: Some(..), .. } = generic_param.kind {\n+        if let ty::GenericParamDefKind::Type { synthetic: true, .. } = generic_param.kind {\n             return;\n         }\n         let param_def_id = generic_param.def_id;"}, {"sha": "6411c062feaf6429f3639bd45b11f914a9a5a2c2", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -317,14 +317,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     .span_to_snippet(lit.span)\n                                     .unwrap_or_else(|_| \"<numeric literal>\".to_owned());\n \n+                                // If this is a floating point literal that ends with '.',\n+                                // get rid of it to stop this from becoming a member access.\n+                                let snippet = snippet.strip_suffix('.').unwrap_or(&snippet);\n+\n                                 err.span_suggestion(\n                                     lit.span,\n                                     &format!(\n                                         \"you must specify a concrete type for this numeric value, \\\n                                          like `{}`\",\n                                         concrete_type\n                                     ),\n-                                    format!(\"{}_{}\", snippet, concrete_type),\n+                                    format!(\"{snippet}_{concrete_type}\"),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }\n@@ -1490,7 +1494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Node::GenericParam(param) => {\n                             let mut impl_trait = false;\n                             let has_bounds =\n-                                if let hir::GenericParamKind::Type { synthetic: Some(_), .. } =\n+                                if let hir::GenericParamKind::Type { synthetic: true, .. } =\n                                     &param.kind\n                                 {\n                                     // We've found `fn foo(x: impl Trait)` instead of"}, {"sha": "209690ec5fc9af7f34544a7dfc99eaafd7768583", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1543,7 +1543,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n                             object_lifetime_default: rl::Set1::Empty,\n-                            synthetic: None,\n+                            synthetic: false,\n                         },\n                     });\n \n@@ -1673,7 +1673,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             kind: ty::GenericParamDefKind::Type {\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n-                synthetic: None,\n+                synthetic: false,\n             },\n         }));\n     }\n@@ -1690,7 +1690,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 kind: ty::GenericParamDefKind::Type {\n                     has_default: false,\n                     object_lifetime_default: rl::Set1::Empty,\n-                    synthetic: None,\n+                    synthetic: false,\n                 },\n             });\n         }"}, {"sha": "85759917765fa6e3d91afa9fd468956c83afdc70", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1272,6 +1272,9 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// The removed element is replaced by the last element of the vector.\n     ///\n     /// This does not preserve ordering, but is *O*(1).\n+    /// If you need to preserve the element order, use [`remove`] instead.\n+    ///\n+    /// [`remove`]: Vec::remove\n     ///\n     /// # Panics\n     ///\n@@ -1368,7 +1371,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// shifting all elements after it to the left.\n     ///\n     /// Note: Because this shifts over the remaining elements, it has a\n-    /// worst-case performance of O(n). If you don't need the order of elements\n+    /// worst-case performance of *O*(*n*). If you don't need the order of elements\n     /// to be preserved, use [`swap_remove`] instead.\n     ///\n     /// [`swap_remove`]: Vec::swap_remove"}, {"sha": "68e48348b076e18e5489c3f9560b6fdcbe070931", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -25,6 +25,7 @@\n #![feature(const_btree_new)]\n #![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n+#![feature(const_str_from_utf8)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "1b741f174fb12f605b01984196f60d85a3c7e132", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1,3 +1,4 @@\n+use std::assert_matches::assert_matches;\n use std::borrow::Cow;\n use std::cmp::Ordering::{Equal, Greater, Less};\n use std::str::{from_utf8, from_utf8_unchecked};\n@@ -883,6 +884,33 @@ fn test_is_utf8() {\n     assert!(from_utf8(&[0xF4, 0x8F, 0xBF, 0xBF]).is_ok());\n }\n \n+#[test]\n+fn test_const_is_utf8() {\n+    const _: () = {\n+        // deny overlong encodings\n+        assert!(from_utf8(&[0xc0, 0x80]).is_err());\n+        assert!(from_utf8(&[0xc0, 0xae]).is_err());\n+        assert!(from_utf8(&[0xe0, 0x80, 0x80]).is_err());\n+        assert!(from_utf8(&[0xe0, 0x80, 0xaf]).is_err());\n+        assert!(from_utf8(&[0xe0, 0x81, 0x81]).is_err());\n+        assert!(from_utf8(&[0xf0, 0x82, 0x82, 0xac]).is_err());\n+        assert!(from_utf8(&[0xf4, 0x90, 0x80, 0x80]).is_err());\n+\n+        // deny surrogates\n+        assert!(from_utf8(&[0xED, 0xA0, 0x80]).is_err());\n+        assert!(from_utf8(&[0xED, 0xBF, 0xBF]).is_err());\n+\n+        assert!(from_utf8(&[0xC2, 0x80]).is_ok());\n+        assert!(from_utf8(&[0xDF, 0xBF]).is_ok());\n+        assert!(from_utf8(&[0xE0, 0xA0, 0x80]).is_ok());\n+        assert!(from_utf8(&[0xED, 0x9F, 0xBF]).is_ok());\n+        assert!(from_utf8(&[0xEE, 0x80, 0x80]).is_ok());\n+        assert!(from_utf8(&[0xEF, 0xBF, 0xBF]).is_ok());\n+        assert!(from_utf8(&[0xF0, 0x90, 0x80, 0x80]).is_ok());\n+        assert!(from_utf8(&[0xF4, 0x8F, 0xBF, 0xBF]).is_ok());\n+    };\n+}\n+\n #[test]\n fn from_utf8_mostly_ascii() {\n     // deny invalid bytes embedded in long stretches of ascii\n@@ -895,13 +923,43 @@ fn from_utf8_mostly_ascii() {\n     }\n }\n \n+#[test]\n+fn const_from_utf8_mostly_ascii() {\n+    const _: () = {\n+        // deny invalid bytes embedded in long stretches of ascii\n+        let mut i = 32;\n+        while i < 64 {\n+            let mut data = [0; 128];\n+            data[i] = 0xC0;\n+            assert!(from_utf8(&data).is_err());\n+            data[i] = 0xC2;\n+            assert!(from_utf8(&data).is_err());\n+\n+            i = i + 1;\n+        }\n+    };\n+}\n+\n #[test]\n fn from_utf8_error() {\n     macro_rules! test {\n-        ($input: expr, $expected_valid_up_to: expr, $expected_error_len: expr) => {\n+        ($input: expr, $expected_valid_up_to:pat, $expected_error_len:pat) => {\n             let error = from_utf8($input).unwrap_err();\n-            assert_eq!(error.valid_up_to(), $expected_valid_up_to);\n-            assert_eq!(error.error_len(), $expected_error_len);\n+            assert_matches!(error.valid_up_to(), $expected_valid_up_to);\n+            assert_matches!(error.error_len(), $expected_error_len);\n+\n+            const _: () = {\n+                match from_utf8($input) {\n+                    Err(error) => {\n+                        let valid_up_to = error.valid_up_to();\n+                        let error_len = error.error_len();\n+\n+                        assert!(matches!(valid_up_to, $expected_valid_up_to));\n+                        assert!(matches!(error_len, $expected_error_len));\n+                    }\n+                    Ok(_) => unreachable!(),\n+                }\n+            };\n         };\n     }\n     test!(b\"A\\xC3\\xA9 \\xFF \", 4, Some(1));"}, {"sha": "3b0872378c6e9f41f45806312464e0b149a8b938", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -97,6 +97,7 @@\n #![allow(explicit_outlives_requirements)]\n //\n // Library features for const fns:\n+#![feature(const_align_offset)]\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n@@ -130,6 +131,7 @@\n #![feature(const_size_of_val)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n+#![feature(const_str_from_utf8_unchecked_mut)]\n #![feature(const_swap)]\n #![feature(const_trait_impl)]\n #![feature(const_type_id)]\n@@ -138,6 +140,7 @@\n #![feature(duration_consts_2)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n+#![feature(str_internals)]\n #![feature(variant_count)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]"}, {"sha": "ef26cbfb640bfea89ee4aa8ea0e566b4578ffea9", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -82,10 +82,16 @@ use super::Utf8Error;\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n-    run_utf8_validation(v)?;\n-    // SAFETY: Just ran validation.\n-    Ok(unsafe { from_utf8_unchecked(v) })\n+#[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n+pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n+    // This should use `?` again, once it's `const`\n+    match run_utf8_validation(v) {\n+        Ok(_) => {\n+            // SAFETY: validation succeeded.\n+            Ok(unsafe { from_utf8_unchecked(v) })\n+        }\n+        Err(err) => Err(err),\n+    }\n }\n \n /// Converts a mutable slice of bytes to a mutable string slice.\n@@ -119,10 +125,16 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n /// See the docs for [`Utf8Error`] for more details on the kinds of\n /// errors that can be returned.\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n-pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n-    run_utf8_validation(v)?;\n-    // SAFETY: Just ran validation.\n-    Ok(unsafe { from_utf8_unchecked_mut(v) })\n+#[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n+pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n+    // This should use `?` again, once it's `const`\n+    match run_utf8_validation(v) {\n+        Ok(_) => {\n+            // SAFETY: validation succeeded.\n+            Ok(unsafe { from_utf8_unchecked_mut(v) })\n+        }\n+        Err(err) => Err(err),\n+    }\n }\n \n /// Converts a slice of bytes to a string slice without checking\n@@ -184,7 +196,8 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[inline]\n #[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n-pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n+#[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked_mut\", issue = \"91005\")]\n+pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`\n     // are valid UTF-8, thus the cast to `*mut str` is safe.\n     // Also, the pointer dereference is safe because that pointer"}, {"sha": "a127dd57eee0e22d972cd656560d8a8673169162", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -72,9 +72,10 @@ impl Utf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n+    #[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n     #[must_use]\n     #[inline]\n-    pub fn valid_up_to(&self) -> usize {\n+    pub const fn valid_up_to(&self) -> usize {\n         self.valid_up_to\n     }\n \n@@ -94,10 +95,15 @@ impl Utf8Error {\n     ///\n     /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n     #[must_use]\n     #[inline]\n-    pub fn error_len(&self) -> Option<usize> {\n-        self.error_len.map(|len| len as usize)\n+    pub const fn error_len(&self) -> Option<usize> {\n+        // This should become `map` again, once it's `const`\n+        match self.error_len {\n+            Some(len) => Some(len as usize),\n+            None => None,\n+        }\n     }\n }\n "}, {"sha": "e362d5c05c1b475b834dccfcf1768c8025de592a", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -8,25 +8,25 @@ use super::Utf8Error;\n /// The first byte is special, only want bottom 5 bits for width 2, 4 bits\n /// for width 3, and 3 bits for width 4.\n #[inline]\n-fn utf8_first_byte(byte: u8, width: u32) -> u32 {\n+const fn utf8_first_byte(byte: u8, width: u32) -> u32 {\n     (byte & (0x7F >> width)) as u32\n }\n \n /// Returns the value of `ch` updated with continuation byte `byte`.\n #[inline]\n-fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {\n+const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {\n     (ch << 6) | (byte & CONT_MASK) as u32\n }\n \n /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the\n /// bits `10`).\n #[inline]\n-pub(super) fn utf8_is_cont_byte(byte: u8) -> bool {\n+pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {\n     (byte as i8) < -64\n }\n \n #[inline]\n-fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n+const fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n     match opt {\n         Some(&byte) => byte,\n         None => 0,\n@@ -105,14 +105,15 @@ const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n \n /// Returns `true` if any byte in the word `x` is nonascii (>= 128).\n #[inline]\n-fn contains_nonascii(x: usize) -> bool {\n+const fn contains_nonascii(x: usize) -> bool {\n     (x & NONASCII_MASK) != 0\n }\n \n /// Walks through `v` checking that it's a valid UTF-8 sequence,\n /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.\n #[inline(always)]\n-pub(super) fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n+#[rustc_const_unstable(feature = \"str_internals\", issue = \"none\")]\n+pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n     let mut index = 0;\n     let len = v.len();\n \n@@ -142,7 +143,7 @@ pub(super) fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n \n         let first = v[index];\n         if first >= 128 {\n-            let w = UTF8_CHAR_WIDTH[first as usize];\n+            let w = utf8_char_width(first);\n             // 2-byte encoding is for codepoints  \\u{0080} to  \\u{07ff}\n             //        first  C2 80        last DF BF\n             // 3-byte encoding is for codepoints  \\u{0800} to  \\u{ffff}\n@@ -230,7 +231,7 @@ pub(super) fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n }\n \n // https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8; 256] = [\n+const UTF8_CHAR_WIDTH: &[u8; 256] = &[\n     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n     1, // 0x1F\n     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n@@ -253,7 +254,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n #[must_use]\n #[inline]\n-pub fn utf8_char_width(b: u8) -> usize {\n+pub const fn utf8_char_width(b: u8) -> usize {\n     UTF8_CHAR_WIDTH[b as usize] as usize\n }\n "}, {"sha": "16532215c6f334603321432241821e37d2ec2b00", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 33, "deletions": 40, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -348,6 +348,18 @@ Using this flag looks like this:\n $ rustdoc src/lib.rs -Z unstable-options --show-coverage\n ```\n \n+It generates something like this:\n+\n+```bash\n++-------------------------------------+------------+------------+------------+------------+\n+| File                                | Documented | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+\n+| lib.rs                              |          4 |     100.0% |          1 |      25.0% |\n++-------------------------------------+------------+------------+------------+------------+\n+| Total                               |          4 |     100.0% |          1 |      25.0% |\n++-------------------------------------+------------+------------+------------+------------+\n+```\n+\n If you want to determine how many items in your crate are documented, pass this flag to rustdoc.\n When it receives this flag, it will count the public items in your crate that have documentation,\n and print out the counts and a percentage instead of generating docs.\n@@ -367,17 +379,25 @@ Some methodology notes about what rustdoc counts in this metric:\n Public items that are not documented can be seen with the built-in `missing_docs` lint. Private\n items that are not documented can be seen with Clippy's `missing_docs_in_private_items` lint.\n \n-### `-w`/`--output-format`: output format\n+Calculating code examples follows these rules:\n \n-When using\n-[`--show-coverage`](https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html#--show-coverage-get-statistics-about-code-documentation-coverage),\n-passing `--output-format json` will display the coverage information in JSON format. For example,\n-here is the JSON for a file with one documented item and one undocumented item:\n+1. These items aren't accounted by default:\n+  * struct/union field\n+  * enum variant\n+  * constant\n+  * static\n+  * typedef\n+2. If one of the previously listed items has a code example, then it'll be counted.\n+\n+#### JSON output\n+\n+When using `--output-format json` with this option, it will display the coverage information in\n+JSON format. For example, here is the JSON for a file with one documented item and one\n+undocumented item:\n \n ```rust\n /// This item has documentation\n pub fn foo() {}\n-\n pub fn no_documentation() {}\n ```\n \n@@ -387,10 +407,16 @@ pub fn no_documentation() {}\n \n Note that the third item is the crate root, which in this case is undocumented.\n \n-When not using `--show-coverage`, `--output-format json` emits documentation in the experimental\n+### `-w`/`--output-format`: output format\n+\n+`--output-format json` emits documentation in the experimental\n [JSON format](https://github.com/rust-lang/rfcs/pull/2963). `--output-format html` has no effect,\n and is also accepted on stable toolchains.\n \n+It can also be used with `--show-coverage`. Take a look at its\n+[documentation](#--show-coverage-get-statistics-about-code-documentation-coverage) for more\n+information.\n+\n ### `--enable-per-target-ignores`: allow `ignore-foo` style filters for doctests\n \n Using this flag looks like this:\n@@ -441,39 +467,6 @@ $ rustdoc src/lib.rs -Z unstable-options --runtool valgrind\n \n Another use case would be to run a test inside an emulator, or through a Virtual Machine.\n \n-### `--show-coverage`: get statistics about code documentation coverage\n-\n-This option allows you to get a nice overview over your code documentation coverage, including both\n-doc-comments and code examples in the doc-comments. Example:\n-\n-```bash\n-$ rustdoc src/lib.rs -Z unstable-options --show-coverage\n-+-------------------------------------+------------+------------+------------+------------+\n-| File                                | Documented | Percentage |   Examples | Percentage |\n-+-------------------------------------+------------+------------+------------+------------+\n-| lib.rs                              |          4 |     100.0% |          1 |      25.0% |\n-+-------------------------------------+------------+------------+------------+------------+\n-| Total                               |          4 |     100.0% |          1 |      25.0% |\n-+-------------------------------------+------------+------------+------------+------------+\n-```\n-\n-You can also use this option with the `--output-format` one:\n-\n-```bash\n-$ rustdoc src/lib.rs -Z unstable-options --show-coverage --output-format json\n-{\"lib.rs\":{\"total\":4,\"with_docs\":4,\"total_examples\":4,\"with_examples\":1}}\n-```\n-\n-Calculating code examples follows these rules:\n-\n-1. These items aren't accounted by default:\n-  * struct/union field\n-  * enum variant\n-  * constant\n-  * static\n-  * typedef\n-2. If one of the previously listed items has a code example, then it'll be counted.\n-\n ### `--with-examples`: include examples of uses of items as documentation\n \n This option, combined with `--scrape-examples-target-crate` and"}, {"sha": "8f21fc5ba7f0e5970d39d8dd32d9bbf1e003850e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -229,6 +229,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let asyncness = cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n+        // NOTE: generics need to be cleaned before the decl!\n         ((cx.tcx.generics_of(did), predicates).clean(cx), (did, sig).clean(cx))\n     });\n     clean::Function {"}, {"sha": "959dc5453374d74d50ae8fdfd5ab6fd048f35a4a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -109,7 +109,10 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n                 };\n \n                 GenericBound::TraitBound(\n-                    PolyTrait { trait_: (trait_ref, &*bindings).clean(cx), generic_params: vec![] },\n+                    PolyTrait {\n+                        trait_: (trait_ref, &bindings[..]).clean(cx),\n+                        generic_params: vec![],\n+                    },\n                     hir::TraitBoundModifier::None,\n                 )\n             }\n@@ -456,9 +459,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n         // scans them first.\n         fn is_impl_trait(param: &hir::GenericParam<'_>) -> bool {\n             match param.kind {\n-                hir::GenericParamKind::Type { synthetic, .. } => {\n-                    synthetic == Some(hir::SyntheticTyParamKind::ImplTrait)\n-                }\n+                hir::GenericParamKind::Type { synthetic, .. } => synthetic,\n                 _ => false,\n             }\n         }\n@@ -557,7 +558,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                         assert_eq!(param.index, 0);\n                         return None;\n                     }\n-                    if synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n+                    if synthetic {\n                         impl_trait.insert(param.index.into(), vec![]);\n                         return None;\n                     }\n@@ -761,8 +762,13 @@ fn clean_fn_or_proc_macro(\n \n impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Function {\n-        let (generics, decl) =\n-            enter_impl_trait(cx, |cx| (self.1.clean(cx), (&*self.0.decl, self.2).clean(cx)));\n+        let (generics, decl) = enter_impl_trait(cx, |cx| {\n+            // NOTE: generics must be cleaned before args\n+            let generics = self.1.clean(cx);\n+            let args = (self.0.decl.inputs, self.2).clean(cx);\n+            let decl = clean_fn_decl_with_args(cx, self.0.decl, args);\n+            (generics, decl)\n+        });\n         Function { decl, generics, header: self.0.header }\n     }\n }\n@@ -804,17 +810,12 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n     }\n }\n \n-impl<'a, A: Copy> Clean<FnDecl> for (&'a hir::FnDecl<'a>, A)\n-where\n-    (&'a [hir::Ty<'a>], A): Clean<Arguments>,\n-{\n-    fn clean(&self, cx: &mut DocContext<'_>) -> FnDecl {\n-        FnDecl {\n-            inputs: (self.0.inputs, self.1).clean(cx),\n-            output: self.0.output.clean(cx),\n-            c_variadic: self.0.c_variadic,\n-        }\n-    }\n+fn clean_fn_decl_with_args(\n+    cx: &mut DocContext<'_>,\n+    decl: &hir::FnDecl<'_>,\n+    args: Arguments,\n+) -> FnDecl {\n+    FnDecl { inputs: args, output: decl.output.clean(cx), c_variadic: decl.c_variadic }\n }\n \n impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n@@ -894,7 +895,11 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                        (self.generics.clean(cx), (sig.decl, names).clean(cx))\n+                        // NOTE: generics must be cleaned before args\n+                        let generics = self.generics.clean(cx);\n+                        let args = (sig.decl.inputs, names).clean(cx);\n+                        let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n+                        (generics, decl)\n                     });\n                     let mut t = Function { header: sig.header, decl, generics };\n                     if t.header.constness == hir::Constness::Const\n@@ -1727,8 +1732,10 @@ impl Clean<PathSegment> for hir::PathSegment<'_> {\n impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n+            // NOTE: generics must be cleaned before args\n             let generic_params = self.generic_params.iter().map(|x| x.clean(cx)).collect();\n-            let decl = (self.decl, self.param_names).clean(cx);\n+            let args = (self.decl.inputs, self.param_names).clean(cx);\n+            let decl = clean_fn_decl_with_args(cx, self.decl, args);\n             (generic_params, decl)\n         });\n         BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n@@ -2029,8 +2036,13 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n             let kind = match item.kind {\n                 hir::ForeignItemKind::Fn(decl, names, ref generics) => {\n                     let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());\n-                    let (generics, decl) =\n-                        enter_impl_trait(cx, |cx| (generics.clean(cx), (decl, names).clean(cx)));\n+                    let (generics, decl) = enter_impl_trait(cx, |cx| {\n+                        // NOTE: generics must be cleaned before args\n+                        let generics = generics.clean(cx);\n+                        let args = (decl.inputs, names).clean(cx);\n+                        let decl = clean_fn_decl_with_args(cx, decl, args);\n+                        (generics, decl)\n+                    });\n                     ForeignFunctionItem(Function {\n                         decl,\n                         generics,"}, {"sha": "fb08ced205d8640837885f19304deaece9c8af1d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1238,20 +1238,9 @@ impl WherePredicate {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericParamDefKind {\n-    Lifetime {\n-        outlives: Vec<Lifetime>,\n-    },\n-    Type {\n-        did: DefId,\n-        bounds: Vec<GenericBound>,\n-        default: Option<Box<Type>>,\n-        synthetic: Option<hir::SyntheticTyParamKind>,\n-    },\n-    Const {\n-        did: DefId,\n-        ty: Box<Type>,\n-        default: Option<Box<String>>,\n-    },\n+    Lifetime { outlives: Vec<Lifetime> },\n+    Type { did: DefId, bounds: Vec<GenericBound>, default: Option<Box<Type>>, synthetic: bool },\n+    Const { did: DefId, ty: Box<Type>, default: Option<Box<String>> },\n }\n \n impl GenericParamDefKind {\n@@ -1285,7 +1274,7 @@ impl GenericParamDef {\n     crate fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n             GenericParamDefKind::Lifetime { .. } | GenericParamDefKind::Const { .. } => false,\n-            GenericParamDefKind::Type { ref synthetic, .. } => synthetic.is_some(),\n+            GenericParamDefKind::Type { synthetic, .. } => synthetic,\n         }\n     }\n "}, {"sha": "1e7d823050c3dbb4e3f7ce313ef39c3504866a8e", "filename": "src/test/incremental/link_order/auxiliary/my_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Flink_order%2Fauxiliary%2Fmy_lib.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -1,3 +1,3 @@\n // no-prefer-dynamic\n-//[cfail1] compile-flags: -lbar -lfoo --crate-type lib\n-//[cfail2] compile-flags: -lfoo -lbar --crate-type lib\n+//[cfail1] compile-flags: -lbar -lfoo --crate-type lib -Zassert-incr-state=not-loaded\n+//[cfail2] compile-flags: -lfoo -lbar --crate-type lib -Zassert-incr-state=not-loaded"}, {"sha": "a7c79e9d751e0e8af468e20ced0b543882f3e018", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -3,6 +3,7 @@\n \n // revisions:rpass1 cfail2\n // compile-flags: -Z query-dep-graph\n+// [cfail2] compile-flags: -Z query-dep-graph -Z assert-incr-state=loaded\n \n #![feature(rustc_attrs)]\n "}, {"sha": "83590dbf7ace7511523965bca7b011c64a6ca294", "filename": "src/test/ui/suggestions/issue-90974.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90974.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(\"{}\", (3.).recip()); //~ERROR\n+}"}, {"sha": "e1fb479a3a7a0a0e2ef26f48bf32a976d3f11b68", "filename": "src/test/ui/suggestions/issue-90974.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90974.stderr?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -0,0 +1,14 @@\n+error[E0689]: can't call method `recip` on ambiguous numeric type `{float}`\n+  --> $DIR/issue-90974.rs:2:25\n+   |\n+LL |     println!(\"{}\", (3.).recip());\n+   |                         ^^^^^\n+   |\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+LL |     println!(\"{}\", (3_f32).recip());\n+   |                     ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0689`."}, {"sha": "e14697f5c3e97d01a0e7fc16c952c5031d15c4f0", "filename": "src/test/ui/synthetic-param.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Ftest%2Fui%2Fsynthetic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Ftest%2Fui%2Fsynthetic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1,28 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-fn func<#[rustc_synthetic] T>(_: T) {}\n-\n-struct Foo;\n-\n-impl Foo {\n-    pub fn func<#[rustc_synthetic] T>(_: T) {}\n-}\n-\n-struct Bar<S> {\n-    t: S\n-}\n-\n-impl<S> Bar<S> {\n-    pub fn func<#[rustc_synthetic] T>(_: T) {}\n-}\n-\n-fn main() {\n-    func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n-    func(42); // Ok\n-\n-    Foo::func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n-    Foo::func(42); // Ok\n-\n-    Bar::<i8>::func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n-    Bar::<i8>::func(42); // Ok\n-}"}, {"sha": "5cb9ad31fbfcc0a2ac95366084206839702fa26d", "filename": "src/test/ui/synthetic-param.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.stderr?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1,30 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/synthetic-param.rs:20:12\n-   |\n-LL |     func::<u8>(42);\n-   |            ^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/synthetic-param.rs:23:17\n-   |\n-LL |     Foo::func::<u8>(42);\n-   |                 ^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/synthetic-param.rs:26:23\n-   |\n-LL |     Bar::<i8>::func::<u8>(42);\n-   |                       ^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "63ad65b8afd9f6ffda92e75f326825448cb1df36", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc946fcd326f7d85d4af096efdc73538622568e9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=cc946fcd326f7d85d4af096efdc73538622568e9", "patch": "@@ -3,10 +3,8 @@ use clippy_utils::source::snippet;\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{\n-    self as hir, GenericArg, GenericBounds, GenericParamKind, HirId, Lifetime, MutTy, Mutability, Node, QPath,\n-    SyntheticTyParamKind, TyKind,\n-};\n+use rustc_hir::{self as hir, GenericArg, GenericBounds, GenericParamKind};\n+use rustc_hir::{HirId, Lifetime, MutTy, Mutability, Node, QPath, TyKind};\n use rustc_lint::LateContext;\n \n use super::BORROWED_BOX;\n@@ -105,7 +103,7 @@ fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id:\n         if let Some(did) = cx.qpath_res(qpath, id).opt_def_id();\n         if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n-        if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n+        if synthetic;\n         then {\n             Some(generic_param.bounds)\n         } else {"}]}