{"sha": "336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "node_id": "C_kwDOAAsO6NoAKDMzNmJiMGFmZWExMDJhMGU0ZWM3ZjU2YzM2NGM3Y2QwZDJhY2I5MDI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:50:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:50:17Z"}, "message": "Rename run_lto_pass_manager to optimize_fat and remove thin parameter", "tree": {"sha": "8b28b32641c0b180ac645a7a36600c0e233104f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b28b32641c0b180ac645a7a36600c0e233104f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "html_url": "https://github.com/rust-lang/rust/commit/336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d4862fdd131b6f79dc0a31857f888d26bcdb27", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d4862fdd131b6f79dc0a31857f888d26bcdb27", "html_url": "https://github.com/rust-lang/rust/commit/76d4862fdd131b6f79dc0a31857f888d26bcdb27"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "2b960582879cb6ccb14be18619848dc5f377ad64", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "patch": "@@ -229,6 +229,11 @@ impl WriteBackendMethods for GccCodegenBackend {\n         Ok(())\n     }\n \n+    fn optimize_fat(_cgcx: &CodegenContext<Self>, _module: &ModuleCodegen<Self::Module>, _config: &ModuleConfig) -> Result<(), FatalError> {\n+        // TODO(antoyo)\n+        Ok(())\n+    }\n+\n     unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: &mut ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         unimplemented!();\n     }\n@@ -245,11 +250,6 @@ impl WriteBackendMethods for GccCodegenBackend {\n         unimplemented!();\n     }\n \n-    fn run_lto_pass_manager(_cgcx: &CodegenContext<Self>, _module: &ModuleCodegen<Self::Module>, _config: &ModuleConfig, _thin: bool) -> Result<(), FatalError> {\n-        // TODO(antoyo)\n-        Ok(())\n-    }\n-\n     fn run_link(cgcx: &CodegenContext<Self>, diag_handler: &Handler, modules: Vec<ModuleCodegen<Self::Module>>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         back::write::link(cgcx, diag_handler, modules)\n     }"}, {"sha": "3fa906f497d112c907fa13e44019feb0cbf35c68", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "patch": "@@ -210,6 +210,14 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     ) -> Result<(), FatalError> {\n         back::write::optimize(cgcx, diag_handler, module, config)\n     }\n+    fn optimize_fat(\n+        cgcx: &CodegenContext<Self>,\n+        module: &ModuleCodegen<Self::Module>,\n+        config: &ModuleConfig,\n+    ) -> Result<(), FatalError> {\n+        let diag_handler = cgcx.create_diag_handler();\n+        back::lto::run_pass_manager(cgcx, &diag_handler, module, config, false)\n+    }\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n         thin: &mut ThinModule<Self>,\n@@ -230,15 +238,6 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     fn serialize_module(module: ModuleCodegen<Self::Module>) -> (String, Self::ModuleBuffer) {\n         (module.name, back::lto::ModuleBuffer::new(module.module_llvm.llmod()))\n     }\n-    fn run_lto_pass_manager(\n-        cgcx: &CodegenContext<Self>,\n-        module: &ModuleCodegen<Self::Module>,\n-        config: &ModuleConfig,\n-        thin: bool,\n-    ) -> Result<(), FatalError> {\n-        let diag_handler = cgcx.create_diag_handler();\n-        back::lto::run_pass_manager(cgcx, &diag_handler, module, config, thin)\n-    }\n }\n \n unsafe impl Send for LlvmCodegenBackend {} // Llvm is on a per-thread basis"}, {"sha": "4914de20b05b6540e2b928996779f18e872d976f", "filename": "compiler/rustc_codegen_ssa/src/traits/write.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336bb0afea102a0e4ec7f56c364c7cd0d2acb902/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs?ref=336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "patch": "@@ -41,6 +41,11 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n         module: &ModuleCodegen<Self::Module>,\n         config: &ModuleConfig,\n     ) -> Result<(), FatalError>;\n+    fn optimize_fat(\n+        cgcx: &CodegenContext<Self>,\n+        llmod: &ModuleCodegen<Self::Module>,\n+        config: &ModuleConfig,\n+    ) -> Result<(), FatalError>;\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n         thin: &mut ThinModule<Self>,\n@@ -53,12 +58,6 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n     ) -> Result<CompiledModule, FatalError>;\n     fn prepare_thin(module: ModuleCodegen<Self::Module>) -> (String, Self::ThinBuffer);\n     fn serialize_module(module: ModuleCodegen<Self::Module>) -> (String, Self::ModuleBuffer);\n-    fn run_lto_pass_manager(\n-        cgcx: &CodegenContext<Self>,\n-        llmod: &ModuleCodegen<Self::Module>,\n-        config: &ModuleConfig,\n-        thin: bool,\n-    ) -> Result<(), FatalError>;\n }\n \n pub trait ThinBufferMethods: Send + Sync {"}]}