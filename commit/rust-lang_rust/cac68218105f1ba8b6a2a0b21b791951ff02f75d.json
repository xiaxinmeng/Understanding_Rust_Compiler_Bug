{"sha": "cac68218105f1ba8b6a2a0b21b791951ff02f75d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzY4MjE4MTA1ZjFiYThiNmEyYTBiMjFiNzkxOTUxZmYwMmY3NWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T20:59:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T20:59:36Z"}, "message": "Auto merge of #65907 - Centril:rollup-9i8ev23, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #65563 (Add long error explanation for E0587)\n - #65640 (Use heuristics to recover parsing of missing `;`)\n - #65643 (Correct handling of type flags with `ConstValue::Placeholder`)\n - #65825 (rustc: use IndexVec<DefIndex, T> instead of Vec<T>.)\n - #65858 (suggest `const_in_array_repeat_expression` flag)\n - #65877 (doc: introduce `once` in `iter::chain` document)\n - #65887 (doc: mention `get(_mut)` in Vec)\n - #65891 (self-profiling: Record something more useful for crate metadata generation event.)\n - #65893 (Output previous stable  error messaging when using stable build.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6900e4f7b28de2ececaa397b27b438c1b251a52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6900e4f7b28de2ececaa397b27b438c1b251a52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac68218105f1ba8b6a2a0b21b791951ff02f75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac68218105f1ba8b6a2a0b21b791951ff02f75d", "html_url": "https://github.com/rust-lang/rust/commit/cac68218105f1ba8b6a2a0b21b791951ff02f75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac68218105f1ba8b6a2a0b21b791951ff02f75d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "html_url": "https://github.com/rust-lang/rust/commit/b497e18995d6b6992f97512c6b86b5cb3f2f34f5"}, {"sha": "30431a33ead3cef1988266e3cb99d35607f7e3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/30431a33ead3cef1988266e3cb99d35607f7e3bb", "html_url": "https://github.com/rust-lang/rust/commit/30431a33ead3cef1988266e3cb99d35607f7e3bb"}], "stats": {"total": 557, "additions": 342, "deletions": 215}, "files": [{"sha": "5b53a6a2899581c72aacd751ce12a29fd298dd82", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -154,8 +154,8 @@ use crate::raw_vec::RawVec;\n /// println!(\"{}\", v[6]); // it will panic!\n /// ```\n ///\n-/// In conclusion: always check if the index you want to get really exists\n-/// before doing it.\n+/// Use [`get`] and [`get_mut`] if you want to check whether the index is in\n+/// the `Vec`.\n ///\n /// # Slicing\n ///\n@@ -277,6 +277,8 @@ use crate::raw_vec::RawVec;\n /// The order has changed in the past and may change again.\n ///\n /// [`vec!`]: ../../std/macro.vec.html\n+/// [`get`]: ../../std/vec/struct.Vec.html#method.get\n+/// [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut\n /// [`Index`]: ../../std/ops/trait.Index.html\n /// [`String`]: ../../std/string/struct.String.html\n /// [`&str`]: ../../std/primitive.str.html"}, {"sha": "7ffc8b3729cb490c1e149b97d5b98bc971df1ef9", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -384,6 +384,9 @@ pub trait Iterator {\n     ///\n     /// In other words, it links two iterators together, in a chain. \ud83d\udd17\n     ///\n+    /// [`once`] is commonly used to adapt a single value into a chain of\n+    /// other kinds of iteration.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -408,9 +411,6 @@ pub trait Iterator {\n     /// [`Iterator`] itself. For example, slices (`&[T]`) implement\n     /// [`IntoIterator`], and so can be passed to `chain()` directly:\n     ///\n-    /// [`IntoIterator`]: trait.IntoIterator.html\n-    /// [`Iterator`]: trait.Iterator.html\n-    ///\n     /// ```\n     /// let s1 = &[1, 2, 3];\n     /// let s2 = &[4, 5, 6];\n@@ -425,6 +425,21 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), Some(&6));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n+    ///\n+    /// If you work with Windows API, you may wish to convert [`OsStr`] to `Vec<u16>`:\n+    ///\n+    /// ```\n+    /// #[cfg(windows)]\n+    /// fn os_str_to_utf16(s: &std::ffi::OsStr) -> Vec<u16> {\n+    ///     use std::os::windows::ffi::OsStrExt;\n+    ///     s.encode_wide().chain(std::iter::once(0)).collect()\n+    /// }\n+    /// ```\n+    ///\n+    /// [`once`]: fn.once.html\n+    /// [`Iterator`]: trait.Iterator.html\n+    /// [`IntoIterator`]: trait.IntoIterator.html\n+    /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter> where"}, {"sha": "73db762a64bda22d905ddb23135b1bedef35b723", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -235,11 +235,20 @@ impl LoweringContext<'_> {\n     /// ```\n     fn lower_expr_let(&mut self, span: Span, pat: &Pat, scrutinee: &Expr) -> hir::ExprKind {\n         // If we got here, the `let` expression is not allowed.\n-        self.sess\n-            .struct_span_err(span, \"`let` expressions are not supported here\")\n-            .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n-            .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n-            .emit();\n+\n+        if self.sess.opts.unstable_features.is_nightly_build() {\n+            self.sess\n+                .struct_span_err(span, \"`let` expressions are not supported here\")\n+                .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n+                .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n+                .emit();\n+        }\n+        else {\n+            self.sess\n+                .struct_span_err(span, \"expected expression, found statement (`let`)\")\n+                .note(\"variable declaration using `let` is a statement\")\n+                .emit();\n+        }\n \n         // For better recovery, we emit:\n         // ```"}, {"sha": "b0fa844c81881a01710696d6f1594ec4f1fdabdb", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let mut collector = NodeCollector {\n             krate,\n             source_map: sess.source_map(),\n-            map: vec![None; definitions.def_index_count()],\n+            map: IndexVec::from_elem_n(IndexVec::new(), definitions.def_index_count()),\n             parent_node: hir::CRATE_HIR_ID,\n             current_signature_dep_index: root_mod_sig_dep_index,\n             current_full_dep_index: root_mod_full_dep_index,\n@@ -227,12 +227,8 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n         debug!(\"hir_map: {:?} => {:?}\", id, entry);\n-        let local_map = &mut self.map[id.owner.index()];\n+        let local_map = &mut self.map[id.owner];\n         let i = id.local_id.as_u32() as usize;\n-        if local_map.is_none() {\n-            *local_map = Some(IndexVec::with_capacity(i + 1));\n-        }\n-        let local_map = local_map.as_mut().unwrap();\n         let len = local_map.len();\n         if i >= len {\n             local_map.extend(repeat(None).take(i - len + 1));"}, {"sha": "be8d82173e481e87a19e4252ec85c78e0ec05421", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -27,8 +27,8 @@ use syntax_pos::{Span, DUMMY_SP};\n /// There is one `DefPathTable` for each crate.\n #[derive(Clone, Default, RustcDecodable, RustcEncodable)]\n pub struct DefPathTable {\n-    index_to_key: Vec<DefKey>,\n-    def_path_hashes: Vec<DefPathHash>,\n+    index_to_key: IndexVec<DefIndex, DefKey>,\n+    def_path_hashes: IndexVec<DefIndex, DefPathHash>,\n }\n \n impl DefPathTable {\n@@ -53,14 +53,14 @@ impl DefPathTable {\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.index()]\n+        self.index_to_key[index]\n     }\n \n     #[inline(always)]\n     pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n-        let ret = self.def_path_hashes[index.index()];\n-        debug!(\"def_path_hash({:?}) = {:?}\", index, ret);\n-        return ret\n+        let hash = self.def_path_hashes[index];\n+        debug!(\"def_path_hash({:?}) = {:?}\", index, hash);\n+        hash\n     }\n \n     pub fn add_def_path_hashes_to(&self,\n@@ -92,7 +92,7 @@ impl DefPathTable {\n pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n-    def_index_to_node: Vec<ast::NodeId>,\n+    def_index_to_node: IndexVec<DefIndex, ast::NodeId>,\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     /// If `ExpnId` is an ID of some macro expansion,\n     /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n@@ -375,7 +375,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n-            let node_id = self.def_index_to_node[def_id.index.index()];\n+            let node_id = self.def_index_to_node[def_id.index];\n             if node_id != ast::DUMMY_NODE_ID {\n                 return Some(node_id);\n             }\n@@ -404,7 +404,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> hir::HirId {\n-        let node_id = self.def_index_to_node[def_index.index()];\n+        let node_id = self.def_index_to_node[def_index];\n         self.node_to_hir_id[node_id]\n     }\n "}, {"sha": "acadd77cc36c08872c87ffdd2a63dc4aaa5912eb", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -156,9 +156,9 @@ impl Forest {\n \n /// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n /// but it is implemented as 2 layers of arrays.\n-/// - first we have `A = Vec<Option<B>>` mapping a `DefIndex`'s index to an inner value\n+/// - first we have `A = IndexVec<DefIndex, B>` mapping `DefIndex`s to an inner value\n /// - which is `B = IndexVec<ItemLocalId, Option<Entry<'hir>>` which gives you the `Entry`.\n-pub(super) type HirEntryMap<'hir> = Vec<Option<IndexVec<ItemLocalId, Option<Entry<'hir>>>>>;\n+pub(super) type HirEntryMap<'hir> = IndexVec<DefIndex, IndexVec<ItemLocalId, Option<Entry<'hir>>>>;\n \n /// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n #[derive(Clone)]\n@@ -222,8 +222,8 @@ impl<'map> Iterator for ParentHirIterator<'map> {\n impl<'hir> Map<'hir> {\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n-        let local_map = self.map.get(id.owner.index())?;\n-        local_map.as_ref()?.get(id.local_id)?.as_ref()\n+        let local_map = self.map.get(id.owner)?;\n+        local_map.get(id.local_id)?.as_ref()\n     }\n \n     /// Registers a read in the dependency graph of the AST node with\n@@ -1031,14 +1031,12 @@ impl<'hir> Map<'hir> {\n         // see the comment on `HirEntryMap`.\n         // Iterate over all the indices and return a reference to\n         // local maps and their index given that they exist.\n-        self.map.iter().enumerate().filter_map(|(i, local_map)| {\n-            local_map.as_ref().map(|m| (i, m))\n-        }).flat_map(move |(array_index, local_map)| {\n+        self.map.iter_enumerated().flat_map(move |(owner, local_map)| {\n             // Iterate over each valid entry in the local map.\n             local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n                 // Reconstruct the `HirId` based on the 3 indices we used to find it.\n                 HirId {\n-                    owner: DefIndex::from(array_index),\n+                    owner,\n                     local_id: i,\n                 }\n             }))"}, {"sha": "b55c0f29a70ec0fb6b509f2e95601bc830b6a260", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -2112,9 +2112,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.note(&format!(\"required by cast to type `{}`\",\n                                   self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec => {\n+            ObligationCauseCode::RepeatVec(suggest_const_in_array_repeat_expression) => {\n                 err.note(\"the `Copy` trait is required because the \\\n                           repeated element will be copied\");\n+                if suggest_const_in_array_repeat_expression {\n+                    err.note(\"this array initializer can be evaluated at compile-time, for more \\\n+                              information, see issue \\\n+                              https://github.com/rust-lang/rust/issues/49147\");\n+                    if tcx.sess.opts.unstable_features.is_nightly_build() {\n+                        err.help(\"add `#![feature(const_in_array_repeat_expression)]` to the \\\n+                                  crate attributes to enable\");\n+                    }\n+                }\n             }\n             ObligationCauseCode::VariableType(_) => {\n                 err.note(\"all local variables must have a statically known size\");"}, {"sha": "b8275299562ce59164c1ef99e5714e90a28a2202", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -206,8 +206,9 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be Sized\n     SizedYieldType,\n-    /// [T,..n] --> T must be Copy\n-    RepeatVec,\n+    /// [T,..n] --> T must be Copy. If `true`, suggest `const_in_array_repeat_expression` feature\n+    /// flag.\n+    RepeatVec(bool),\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized { adt_kind: AdtKind, last: bool },"}, {"sha": "109e884f8bd164f6d372f8edbeff7aa4a76cb30c", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -494,7 +494,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::SizedArgumentType => Some(super::SizedArgumentType),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n-            super::RepeatVec => Some(super::RepeatVec),\n+            super::RepeatVec(suggest_flag) => Some(super::RepeatVec(suggest_flag)),\n             super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n             super::ConstSized => Some(super::ConstSized),\n             super::ConstPatternStructural => Some(super::ConstPatternStructural),"}, {"sha": "bdf9b2d7f3f27f435046f9abae4b34f15089c4d7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1408,6 +1408,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn encode_metadata(self)-> EncodedMetadata {\n+        let _prof_timer = self.prof.generic_activity(\"generate_crate_metadata\");\n         self.cstore.encode_metadata(self)\n     }\n "}, {"sha": "d4b7f37b120e76e722cc4f119b8565ede87f17ad", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -114,6 +114,7 @@ impl FlagComputation {\n             }\n \n             &ty::Placeholder(..) => {\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_flags(TypeFlags::HAS_TY_PLACEHOLDER);\n             }\n \n@@ -123,8 +124,7 @@ impl FlagComputation {\n                 match infer {\n                     ty::FreshTy(_) |\n                     ty::FreshIntTy(_) |\n-                    ty::FreshFloatTy(_) => {\n-                    }\n+                    ty::FreshFloatTy(_) => {}\n \n                     ty::TyVar(_) |\n                     ty::IntVar(_) |\n@@ -245,14 +245,16 @@ impl FlagComputation {\n             }\n             ConstValue::Bound(debruijn, _) => self.add_binder(debruijn),\n             ConstValue::Param(_) => {\n-                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_PARAMS);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_PARAMS);\n             }\n             ConstValue::Placeholder(_) => {\n-                self.add_flags(TypeFlags::HAS_FREE_REGIONS | TypeFlags::HAS_CT_PLACEHOLDER);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_CT_PLACEHOLDER);\n             }\n-            ConstValue::Scalar(_) => { }\n-            ConstValue::Slice { data: _, start: _, end: _ } => { }\n-            ConstValue::ByRef { alloc: _, offset: _ } => { }\n+            ConstValue::Scalar(_) => {}\n+            ConstValue::Slice { .. } => {}\n+            ConstValue::ByRef { .. } => {}\n         }\n     }\n "}, {"sha": "ee4ec7fb41eacca1833eec68e4168726fc0235e0", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -574,8 +574,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     if need_metadata_module {\n         // Codegen the encoded metadata.\n-        let _prof_timer = tcx.prof.generic_activity(\"codegen_crate_metadata\");\n-\n         let metadata_cgu_name = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                                 &[\"crate\"],\n                                                                 Some(\"metadata\")).as_str()"}, {"sha": "9f2f174553f036da634e5041c592f650ba3f91c0", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -16,6 +16,7 @@ use crate::borrow_check::nll::type_check::free_region_relations::{\n };\n use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n use crate::borrow_check::nll::ToRegionVid;\n+use crate::transform::promote_consts::should_suggest_const_in_array_repeat_expressions_attribute;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n@@ -1983,12 +1984,19 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     let span = body.source_info(location).span;\n                     let ty = operand.ty(body, tcx);\n                     if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                        // To determine if `const_in_array_repeat_expression` feature gate should\n+                        // be mentioned, need to check if the rvalue is promotable.\n+                        let should_suggest =\n+                            should_suggest_const_in_array_repeat_expressions_attribute(\n+                                tcx, self.mir_def_id, body, operand);\n+                        debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n+\n                         self.infcx.report_selection_error(\n                             &traits::Obligation::new(\n                                 ObligationCause::new(\n                                     span,\n                                     self.tcx().hir().def_index_to_hir_id(self.mir_def_id.index),\n-                                    traits::ObligationCauseCode::RepeatVec,\n+                                    traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                 ),\n                                 self.param_env,\n                                 ty::Predicate::Trait(ty::Binder::bind(ty::TraitPredicate {"}, {"sha": "8def717f1580a3699f069e367689c944449eade0", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1110,3 +1110,28 @@ pub fn promote_candidates<'tcx>(\n \n     promotions\n }\n+\n+/// This function returns `true` if the `const_in_array_repeat_expression` feature attribute should\n+/// be suggested. This function is probably quite expensive, it shouldn't be run in the happy path.\n+/// Feature attribute should be suggested if `operand` can be promoted and the feature is not\n+/// enabled.\n+crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    mir_def_id: DefId,\n+    body: &Body<'tcx>,\n+    operand: &Operand<'tcx>,\n+) -> bool {\n+    let mut rpo = traversal::reverse_postorder(body);\n+    let (temps, _) = collect_temps_and_candidates(tcx, body, &mut rpo);\n+    let validator = Validator {\n+        item: Item::new(tcx, mir_def_id, body),\n+        temps: &temps,\n+        explicit: false,\n+    };\n+\n+    let should_promote = validator.validate_operand(operand).is_ok();\n+    let feature_flag = tcx.features().const_in_array_repeat_expressions;\n+    debug!(\"should_suggest_const_in_array_repeat_expressions_flag: mir_def_id={:?} \\\n+            should_promote={:?} feature_flag={:?}\", mir_def_id, should_promote, feature_flag);\n+    should_promote && !feature_flag\n+}"}, {"sha": "3702dd9ad493fb3df20685c10d22e8addca7b8bb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -878,13 +878,11 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n             },\n             ValueSource::Rvalue(&Rvalue::Repeat(ref operand, _)) => {\n-                let candidate = Candidate::Repeat(location);\n-                let not_promotable = IsNotImplicitlyPromotable::in_operand(self, operand) ||\n-                                     IsNotPromotable::in_operand(self, operand);\n-                debug!(\"assign: self.def_id={:?} operand={:?}\", self.def_id, operand);\n-                if !not_promotable && self.tcx.features().const_in_array_repeat_expressions {\n-                    debug!(\"assign: candidate={:?}\", candidate);\n-                    self.promotion_candidates.push(candidate);\n+                debug!(\"assign: self.cx.mode={:?} self.def_id={:?} location={:?} operand={:?}\",\n+                       self.cx.mode, self.def_id, location, operand);\n+                if self.should_promote_repeat_expression(operand) &&\n+                        self.tcx.features().const_in_array_repeat_expressions {\n+                    self.promotion_candidates.push(Candidate::Repeat(location));\n                 }\n             },\n             _ => {},\n@@ -1149,6 +1147,15 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         candidates\n     }\n+\n+    /// Returns `true` if the operand of a repeat expression is promotable.\n+    fn should_promote_repeat_expression(&self, operand: &Operand<'tcx>) -> bool {\n+        let not_promotable = IsNotImplicitlyPromotable::in_operand(self, operand) ||\n+                             IsNotPromotable::in_operand(self, operand);\n+        debug!(\"should_promote_repeat_expression: operand={:?} not_promotable={:?}\",\n+               operand, not_promotable);\n+        !not_promotable\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {"}, {"sha": "248b687c31cdf9d94f4f8c9edd9637cdc676f8f7", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -3891,6 +3891,25 @@ details.\n [issue #33685]: https://github.com/rust-lang/rust/issues/33685\n \"##,\n \n+E0587: r##\"\n+A type has both `packed` and `align` representation hints.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0587\n+#[repr(packed, align(8))] // error!\n+struct Umbrella(i32);\n+```\n+\n+You cannot use `packed` and `align` hints on a same type. If you want to pack a\n+type to a given size, you should provide a size to packed:\n+\n+```\n+#[repr(packed)] // ok!\n+struct Umbrella(i32);\n+```\n+\"##,\n+\n E0588: r##\"\n A type with `packed` representation hint has a field with `align`\n representation hint.\n@@ -5098,7 +5117,6 @@ struct B<const X: A>; // ok!\n //  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n //  E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n-    E0587, // type has conflicting packed and align representation hints\n //  E0611, // merged into E0616\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)"}, {"sha": "ab2b4519cb72a13f5cc577801867040ce310d883", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 82, "deletions": 68, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -6,7 +6,7 @@ use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n-use crate::parse::token::{self, TokenKind};\n+use crate::parse::token::{self, TokenKind, token_can_begin_expr};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::{kw, sym};\n@@ -274,23 +274,23 @@ impl<'a> Parser<'a> {\n         expected.sort_by_cached_key(|x| x.to_string());\n         expected.dedup();\n         let expect = tokens_to_string(&expected[..]);\n-        let actual = self.this_token_to_string();\n+        let actual = self.this_token_descr();\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n             let short_expect = if expected.len() > 6 {\n                 format!(\"{} possible tokens\", expected.len())\n             } else {\n                 expect.clone()\n             };\n-            (format!(\"expected one of {}, found `{}`\", expect, actual),\n+            (format!(\"expected one of {}, found {}\", expect, actual),\n                 (self.sess.source_map().next_point(self.prev_span),\n                 format!(\"expected one of {} here\", short_expect)))\n         } else if expected.is_empty() {\n-            (format!(\"unexpected token: `{}`\", actual),\n+            (format!(\"unexpected token: {}\", actual),\n                 (self.prev_span, \"unexpected token after this\".to_string()))\n         } else {\n-            (format!(\"expected {}, found `{}`\", expect, actual),\n+            (format!(\"expected {}, found {}\", expect, actual),\n                 (self.sess.source_map().next_point(self.prev_span),\n-                format!(\"expected {} here\", expect)))\n+                format!(\"expected {}\", expect)))\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n         let mut err = self.fatal(&msg_exp);\n@@ -326,58 +326,28 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let is_semi_suggestable = expected.iter().any(|t| match t {\n-            TokenType::Token(token::Semi) => true, // We expect a `;` here.\n-            _ => false,\n-        }) && ( // A `;` would be expected before the current keyword.\n-            self.token.is_keyword(kw::Break) ||\n-            self.token.is_keyword(kw::Continue) ||\n-            self.token.is_keyword(kw::For) ||\n-            self.token.is_keyword(kw::If) ||\n-            self.token.is_keyword(kw::Let) ||\n-            self.token.is_keyword(kw::Loop) ||\n-            self.token.is_keyword(kw::Match) ||\n-            self.token.is_keyword(kw::Return) ||\n-            self.token.is_keyword(kw::While)\n-        );\n         let sm = self.sess.source_map();\n-        match (sm.lookup_line(self.token.span.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line != b.line && is_semi_suggestable => {\n-                // The spans are in different lines, expected `;` and found `let` or `return`.\n-                // High likelihood that it is only a missing `;`.\n-                err.span_suggestion_short(\n-                    label_sp,\n-                    \"a semicolon may be missing here\",\n-                    \";\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-                err.emit();\n-                return Ok(true);\n-            }\n-            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                // When the spans are in the same line, it means that the only content between\n-                // them is whitespace, point at the found token in that case:\n-                //\n-                // X |     () => { syntax error };\n-                //   |                    ^^^^^ expected one of 8 possible tokens here\n-                //\n-                // instead of having:\n-                //\n-                // X |     () => { syntax error };\n-                //   |                   -^^^^^ unexpected token\n-                //   |                   |\n-                //   |                   expected one of 8 possible tokens here\n-                err.span_label(self.token.span, label_exp);\n-            }\n-            _ if self.prev_span == syntax_pos::DUMMY_SP => {\n-                // Account for macro context where the previous span might not be\n-                // available to avoid incorrect output (#54841).\n-                err.span_label(self.token.span, \"unexpected token\");\n-            }\n-            _ => {\n-                err.span_label(sp, label_exp);\n-                err.span_label(self.token.span, \"unexpected token\");\n-            }\n+        if self.prev_span == DUMMY_SP {\n+            // Account for macro context where the previous span might not be\n+            // available to avoid incorrect output (#54841).\n+            err.span_label(self.token.span, label_exp);\n+        } else if !sm.is_multiline(self.token.span.shrink_to_hi().until(sp.shrink_to_lo())) {\n+            // When the spans are in the same line, it means that the only content between\n+            // them is whitespace, point at the found token in that case:\n+            //\n+            // X |     () => { syntax error };\n+            //   |                    ^^^^^ expected one of 8 possible tokens here\n+            //\n+            // instead of having:\n+            //\n+            // X |     () => { syntax error };\n+            //   |                   -^^^^^ unexpected token\n+            //   |                   |\n+            //   |                   expected one of 8 possible tokens here\n+            err.span_label(self.token.span, label_exp);\n+        } else {\n+            err.span_label(sp, label_exp);\n+            err.span_label(self.token.span, \"unexpected token\");\n         }\n         self.maybe_annotate_with_ascription(&mut err, false);\n         Err(err)\n@@ -902,20 +872,64 @@ impl<'a> Parser<'a> {\n             }\n         }\n         let sm = self.sess.source_map();\n-        match (sm.lookup_line(prev_sp.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                // When the spans are in the same line, it means that the only content\n-                // between them is whitespace, point only at the found token.\n-                err.span_label(sp, label_exp);\n-            }\n-            _ => {\n-                err.span_label(prev_sp, label_exp);\n-                err.span_label(sp, \"unexpected token\");\n-            }\n+        if !sm.is_multiline(prev_sp.until(sp)) {\n+            // When the spans are in the same line, it means that the only content\n+            // between them is whitespace, point only at the found token.\n+            err.span_label(sp, label_exp);\n+        } else {\n+            err.span_label(prev_sp, label_exp);\n+            err.span_label(sp, \"unexpected token\");\n         }\n         Err(err)\n     }\n \n+    pub(super) fn expect_semi(&mut self) -> PResult<'a, ()> {\n+        if self.eat(&token::Semi) {\n+            return Ok(());\n+        }\n+        let sm = self.sess.source_map();\n+        let msg = format!(\"expected `;`, found `{}`\", self.this_token_descr());\n+        let appl = Applicability::MachineApplicable;\n+        if self.token.span == DUMMY_SP || self.prev_span == DUMMY_SP {\n+            // Likely inside a macro, can't provide meaninful suggestions.\n+            return self.expect(&token::Semi).map(|_| ());\n+        } else if !sm.is_multiline(self.prev_span.until(self.token.span)) {\n+            // The current token is in the same line as the prior token, not recoverable.\n+        } else if self.look_ahead(1, |t| t == &token::CloseDelim(token::Brace)\n+            || token_can_begin_expr(t) && t.kind != token::Colon\n+        ) && [token::Comma, token::Colon].contains(&self.token.kind) {\n+            // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n+            // either `,` or `:`, and the next token could either start a new statement or is a\n+            // block close. For example:\n+            //\n+            //   let x = 32:\n+            //   let y = 42;\n+            self.bump();\n+            let sp = self.prev_span;\n+            self.struct_span_err(sp, &msg)\n+                .span_suggestion(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                .emit();\n+            return Ok(())\n+        } else if self.look_ahead(0, |t| t == &token::CloseDelim(token::Brace) || (\n+                token_can_begin_expr(t)\n+                && t != &token::Semi\n+                && t != &token::Pound // Avoid triggering with too many trailing `#` in raw string.\n+        )) {\n+            // Missing semicolon typo. This is triggered if the next token could either start a\n+            // new statement or is a block close. For example:\n+            //\n+            //   let x = 32\n+            //   let y = 42;\n+            let sp = self.prev_span.shrink_to_hi();\n+            self.struct_span_err(sp, &msg)\n+                .span_label(self.token.span, \"unexpected token\")\n+                .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n+                .emit();\n+            return Ok(())\n+        }\n+        self.expect(&token::Semi).map(|_| ()) // Error unconditionally\n+    }\n+\n     pub(super) fn parse_semi_or_incorrect_foreign_fn_body(\n         &mut self,\n         ident: &Ident,\n@@ -943,7 +957,7 @@ impl<'a> Parser<'a> {\n                 Err(mut err) => {\n                     err.cancel();\n                     mem::replace(self, parser_snapshot);\n-                    self.expect(&token::Semi)?;\n+                    self.expect_semi()?;\n                 }\n             }\n         } else {"}, {"sha": "fe1253361903349215f9fbb5e1f5b3f30e4eff2d", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -98,7 +98,7 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(kw::Use) {\n             // USE ITEM\n             let item_ = ItemKind::Use(P(self.parse_use_tree()?));\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n \n             let span = lo.to(self.prev_span);\n             let item = self.mk_item(span, Ident::invalid(), item_, vis, attrs);\n@@ -526,7 +526,7 @@ impl<'a> Parser<'a> {\n             // eat a matched-delimiter token tree:\n             let (delim, tts) = self.expect_delimited_token_tree()?;\n             if delim != MacDelimiter::Brace {\n-                self.expect(&token::Semi)?;\n+                self.expect_semi()?;\n             }\n \n             Ok(Some(Mac {\n@@ -776,7 +776,7 @@ impl<'a> Parser<'a> {\n         let typ = self.parse_ty()?;\n         self.expect(&token::Eq)?;\n         let expr = self.parse_expr()?;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((name, ImplItemKind::Const(typ, expr), Generics::default()))\n     }\n \n@@ -813,7 +813,7 @@ impl<'a> Parser<'a> {\n \n             let bounds = self.parse_generic_bounds(None)?;\n             tps.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n \n             let whole_span = lo.to(self.prev_span);\n             if is_auto == IsAuto::Yes {\n@@ -927,7 +927,7 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((ident, TraitItemKind::Const(ty, default), Generics::default()))\n     }\n \n@@ -951,7 +951,7 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n \n         Ok((ident, TraitItemKind::Type(bounds, default), generics))\n     }\n@@ -1054,7 +1054,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (orig_name, None)\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n \n         let span = lo.to(self.prev_span);\n         Ok(self.mk_item(span, item_name, ItemKind::ExternCrate(orig_name), visibility, attrs))\n@@ -1217,7 +1217,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok(ForeignItem {\n             ident,\n             attrs,\n@@ -1235,7 +1235,7 @@ impl<'a> Parser<'a> {\n \n         let ident = self.parse_ident()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n@@ -1282,7 +1282,7 @@ impl<'a> Parser<'a> {\n \n         self.expect(&token::Eq)?;\n         let e = self.parse_expr()?;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         let item = match m {\n             Some(m) => ItemKind::Static(ty, m, e),\n             None => ItemKind::Const(ty, e),\n@@ -1344,7 +1344,7 @@ impl<'a> Parser<'a> {\n             let ty = self.parse_ty()?;\n             AliasKind::Weak(ty)\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((ident, alias, tps))\n     }\n \n@@ -1468,7 +1468,7 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let body = VariantData::Tuple(self.parse_tuple_struct_body()?, DUMMY_NODE_ID);\n             generics.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n             body\n         } else {\n             let token_str = self.this_token_descr();"}, {"sha": "4f51fefe66fbabdb10d0ad44597431cb975188e8", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -432,6 +432,7 @@ impl<'a> Parser<'a> {\n             None => return Ok(None),\n         };\n \n+        let mut eat_semi = true;\n         match stmt.kind {\n             StmtKind::Expr(ref expr) if self.token != token::Eof => {\n                 // expression without semicolon\n@@ -453,13 +454,14 @@ impl<'a> Parser<'a> {\n                 if macro_legacy_warnings && self.token != token::Semi {\n                     self.warn_missing_semicolon();\n                 } else {\n-                    self.expect_one_of(&[], &[token::Semi])?;\n+                    self.expect_semi()?;\n+                    eat_semi = false;\n                 }\n             }\n             _ => {}\n         }\n \n-        if self.eat(&token::Semi) {\n+        if eat_semi && self.eat(&token::Semi) {\n             stmt = stmt.add_trailing_semicolon();\n         }\n         stmt.span = stmt.span.to(self.prev_span);"}, {"sha": "03e77b199cc3bacd754cbc24aafce912b149a84e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -143,34 +143,35 @@ impl Lit {\n \n pub(crate) fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n+    token_can_begin_expr(&ident_token)\n+}\n \n+pub(crate) fn token_can_begin_expr(ident_token: &Token) -> bool {\n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n-    [\n-        kw::Async,\n-\n-        // FIXME: remove when `await!(..)` syntax is removed\n-        // https://github.com/rust-lang/rust/issues/60610\n-        kw::Await,\n-\n-        kw::Do,\n-        kw::Box,\n-        kw::Break,\n-        kw::Continue,\n-        kw::False,\n-        kw::For,\n-        kw::If,\n-        kw::Let,\n-        kw::Loop,\n-        kw::Match,\n-        kw::Move,\n-        kw::Return,\n-        kw::True,\n-        kw::Unsafe,\n-        kw::While,\n-        kw::Yield,\n-        kw::Static,\n-    ].contains(&name)\n+    match ident_token.kind {\n+        TokenKind::Ident(ident, _) => [\n+            kw::Async,\n+            kw::Do,\n+            kw::Box,\n+            kw::Break,\n+            kw::Continue,\n+            kw::False,\n+            kw::For,\n+            kw::If,\n+            kw::Let,\n+            kw::Loop,\n+            kw::Match,\n+            kw::Move,\n+            kw::Return,\n+            kw::True,\n+            kw::Unsafe,\n+            kw::While,\n+            kw::Yield,\n+            kw::Static,\n+        ].contains(&ident),\n+        _=> false,\n+    }\n }\n \n fn ident_can_begin_type(name: ast::Name, span: Span, is_raw: bool) -> bool {"}, {"sha": "44f02d1a7b19b79e10e4001ea777e115409cda7b", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -3,4 +3,4 @@\n // compile-flags: --crate-type lib\n \n pub async const fn x() {}\n-//~^ ERROR expected one of `fn` or `unsafe`, found `const`\n+//~^ ERROR expected one of `fn` or `unsafe`, found keyword `const`"}, {"sha": "f89d1810ba44920d86f30d86e7d0d130799fd006", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `fn` or `unsafe`, found `const`\n+error: expected one of `fn` or `unsafe`, found keyword `const`\n   --> $DIR/no-async-const.rs:5:11\n    |\n LL | pub async const fn x() {}"}, {"sha": "1ac1bdffda9476615be71d2c28f92504e19985f5", "filename": "src/test/ui/async-await/no-unsafe-async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -4,8 +4,8 @@ struct S;\n \n impl S {\n     #[cfg(FALSE)]\n-    unsafe async fn g() {} //~ ERROR expected one of `extern` or `fn`, found `async`\n+    unsafe async fn g() {} //~ ERROR expected one of `extern` or `fn`, found keyword `async`\n }\n \n #[cfg(FALSE)]\n-unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found `async`\n+unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found keyword `async`"}, {"sha": "79d9f1befd66ac83cc2a4ad9586df7eec64cae4d", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,10 +1,10 @@\n-error: expected one of `extern` or `fn`, found `async`\n+error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:7:12\n    |\n LL |     unsafe async fn g() {}\n    |            ^^^^^ expected one of `extern` or `fn` here\n \n-error: expected one of `extern`, `fn`, or `{`, found `async`\n+error: expected one of `extern`, `fn`, or `{`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8\n    |\n LL | unsafe async fn f() {}"}, {"sha": "8974d9f48c1e3076d759d036ae102e13bc568a35", "filename": "src/test/ui/can-begin-expr-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fcan-begin-expr-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fcan-begin-expr-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcan-begin-expr-check.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n         return break as ();\n     }\n \n-    return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `enum`\n+    return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n }"}, {"sha": "0e03e9915fca2dbf6e2049bbe7284f300a0ac73f", "filename": "src/test/ui/can-begin-expr-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `enum`\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `enum`\n   --> $DIR/can-begin-expr-check.rs:19:12\n    |\n LL |     return enum;"}, {"sha": "414c15f93bc18731ad9769d4a55bcee68220c02e", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -66,4 +66,5 @@ LL | | }\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0566`.\n+Some errors have detailed explanations: E0566, E0587.\n+For more information about an error, try `rustc --explain E0566`."}, {"sha": "c3c554d7d27f9938f3e7101e871c79d7f1ed18e4", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -3,9 +3,16 @@\n \n struct Bar;\n \n+// This function would compile with the feature gate, and tests that it is suggested.\n fn foo() {\n     let arr: [Option<String>; 2] = [None::<String>; 2];\n     //~^ ERROR the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied [E0277]\n }\n \n+// This function would not compile with the feature gate, and tests that it is not suggested.\n+fn bar() {\n+    let arr: [Option<String>; 2] = [Some(\"foo\".to_string()); 2];\n+    //~^ ERROR the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied [E0277]\n+}\n+\n fn main() {}"}, {"sha": "cd9242de88f25f369d75226754548a8ef54a9a66", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,13 +1,25 @@\n error[E0277]: the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied\n-  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:7:36\n+  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:8:36\n    |\n LL |     let arr: [Option<String>; 2] = [None::<String>; 2];\n    |                                    ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<std::string::String>`\n    |\n    = help: the following implementations were found:\n              <std::option::Option<T> as std::marker::Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: this array initializer can be evaluated at compile-time, for more information, see issue https://github.com/rust-lang/rust/issues/49147\n+   = help: add `#![feature(const_in_array_repeat_expression)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied\n+  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:14:36\n+   |\n+LL |     let arr: [Option<String>; 2] = [Some(\"foo\".to_string()); 2];\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<std::string::String>`\n+   |\n+   = help: the following implementations were found:\n+             <std::option::Option<T> as std::marker::Copy>\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4f7ed5cc6fdd819f53bc2a0a0479d09fd0e51962", "filename": "src/test/ui/issues/issue-43196.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fissues%2Fissue-43196.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fissues%2Fissue-43196.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43196.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -2,7 +2,7 @@ error: expected `|`, found `}`\n   --> $DIR/issue-43196.rs:3:1\n    |\n LL |     |\n-   |      - expected `|` here\n+   |      - expected `|`\n LL | }\n    | ^ unexpected token\n "}, {"sha": "48c2f556f1dd9f0754d47fdc8817c4ccf9669b00", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -2,7 +2,7 @@ error: expected `fn`, found `::`\n   --> $DIR/keyword-extern-as-identifier-type.rs:1:16\n    |\n LL | type A = extern::foo::bar;\n-   |                ^^ expected `fn` here\n+   |                ^^ expected `fn`\n \n error: aborting due to previous error\n "}, {"sha": "287d579c76d5f51b42d6c743dbfcded370171c92", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found `let`\n+error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found keyword `let`\n   --> $DIR/issue-54441.rs:3:9\n    |\n LL |         let\n-   |         ^^^ unexpected token\n+   |         ^^^ expected one of `crate`, `fn`, `pub`, `static`, or `type` here\n ...\n LL |     m!();\n    |     ----- in this macro invocation"}, {"sha": "8843fd303ec0c654be09dd7613bcecd99fa570a3", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found `pub`\n+error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found keyword `pub`\n   --> $DIR/default.rs:22:13\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }"}, {"sha": "675adb88d20847452150b1d255129b2ef440341a", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `(`, `fn`, `static`, or `type`, found `pub`\n+error: expected one of `(`, `fn`, `static`, or `type`, found keyword `pub`\n   --> $DIR/duplicate-visibility.rs:3:9\n    |\n LL |     pub pub fn foo();"}, {"sha": "907de0d8f91d84ddf81d7f08403a60fde4eff194", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n // Verifies that the expected token errors for `extern crate` are\n // raised\n \n-extern \"C\" mod foo; //~ERROR expected one of `fn` or `{`, found `mod`\n+extern \"C\" mod foo; //~ERROR expected one of `fn` or `{`, found keyword `mod`"}, {"sha": "691f4cddff29197ef9b002e7f1a2711652e3d716", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `fn` or `{`, found `mod`\n+error: expected one of `fn` or `{`, found keyword `mod`\n   --> $DIR/extern-expected-fn-or-brace.rs:4:12\n    |\n LL | extern \"C\" mod foo;"}, {"sha": "e929fa53620f66884b44e51a229eb9830b4e31a9", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -26,7 +26,7 @@ error: expected `impl`, found `FAIL`\n   --> $DIR/impl-parsing.rs:11:16\n    |\n LL | default unsafe FAIL\n-   |                ^^^^ expected `impl` here\n+   |                ^^^^ expected `impl`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "beb94c8042d5fe37c0291fcd881e149743a2c892", "filename": "src/test/ui/parser/issue-15980.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -11,7 +11,7 @@ fn main(){\n         }\n         //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n         _ => {}\n-        //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found `_`\n+        //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n         //~| NOTE unexpected token\n     }\n }"}, {"sha": "26f75d45fa241dda1ae8c3c46cc65ffa5bb8eae4", "filename": "src/test/ui/parser/issue-15980.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -12,7 +12,7 @@ help: you can escape reserved keywords to use them as identifiers\n LL |             r#return\n    |\n \n-error: expected one of `.`, `=>`, `?`, or an operator, found `_`\n+error: expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n   --> $DIR/issue-15980.rs:13:9\n    |\n LL |         }"}, {"sha": "90221039b4148cdde1778b1b34ced8a79c56aa24", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,5 +1,5 @@\n trait T {\n-    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found `unsafe`\n+    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found keyword `unsafe`\n }\n \n fn main() {}"}, {"sha": "41ec4f3ced4e907581792ebd506491db3a1cdfa2", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,8 +1,8 @@\n-error: expected `fn`, found `unsafe`\n+error: expected `fn`, found keyword `unsafe`\n   --> $DIR/issue-19398.rs:2:19\n    |\n LL |     extern \"Rust\" unsafe fn foo();\n-   |                   ^^^^^^ expected `fn` here\n+   |                   ^^^^^^ expected `fn`\n \n error: aborting due to previous error\n "}, {"sha": "6a8b67fefa780fb7d6a65ebd960974bc024c59d9", "filename": "src/test/ui/parser/issue-3036.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -2,5 +2,5 @@\n \n fn main()\n {\n-    let x = 3\n-} //~ ERROR: expected one of `.`, `;`, `?`, or an operator, found `}`\n+    let x = 3 //~ ERROR: expected `;`\n+}"}, {"sha": "b6557163d4520b14558eb369d65286e4bf138205", "filename": "src/test/ui/parser/issue-3036.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,10 +1,10 @@\n-error: expected one of `.`, `;`, `?`, or an operator, found `}`\n-  --> $DIR/issue-3036.rs:6:1\n+error: expected `;`, found ``}``\n+  --> $DIR/issue-3036.rs:5:14\n    |\n LL |     let x = 3\n-   |              - expected one of `.`, `;`, `?`, or an operator here\n+   |              ^ help: add `;` here\n LL | }\n-   | ^ unexpected token\n+   | - unexpected token\n \n error: aborting due to previous error\n "}, {"sha": "a953e23a710fa9dc22e8e2feb8bc43e4f6b1deeb", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, fo\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ unexpected token\n+   |                   ^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe` here\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "bf9cbcdab2e89b58f2348eaed9894c6286e61c30", "filename": "src/test/ui/parser/raw/raw-literal-keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,5 +1,5 @@\n fn test_if() {\n-    r#if true { } //~ ERROR found `true`\n+    r#if true { } //~ ERROR found keyword `true`\n }\n \n fn test_struct() {"}, {"sha": "4cea605be6f5e1adc8b28232339e9284cf5f65e0", "filename": "src/test/ui/parser/raw/raw-literal-keywords.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `true`\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `true`\n   --> $DIR/raw-literal-keywords.rs:2:10\n    |\n LL |     r#if true { }"}, {"sha": "779e1646344787b680be00576c3e9d588791201d", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let vec = vec![1, 2, 3];\n \n     for ( elem in vec ) {\n-        //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found `in`\n+        //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n         //~| ERROR unexpected closing `)`\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }"}, {"sha": "1a1f395ee213eb0ad6c58ad0b239ed84ffc0a6e1", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `)`, `,`, `@`, or `|`, found `in`\n+error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:16\n    |\n LL |     for ( elem in vec ) {"}, {"sha": "f47d5e6805f88708d5d1574f0d304df5451388ec", "filename": "src/test/ui/parser/recover-missing-semi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,13 +1,13 @@\n fn main() {\n     let _: usize = ()\n     //~^ ERROR mismatched types\n+    //~| ERROR expected `;`\n     let _ = 3;\n-    //~^ ERROR expected one of\n }\n \n fn foo() -> usize {\n     let _: usize = ()\n     //~^ ERROR mismatched types\n+    //~| ERROR expected `;`\n     return 3;\n-    //~^ ERROR expected one of\n }"}, {"sha": "c40918ee2bd5fa710c691bb71825d08ec598929c", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,20 +1,20 @@\n-error: expected one of `.`, `;`, `?`, or an operator, found `let`\n-  --> $DIR/recover-missing-semi.rs:4:5\n+error: expected `;`, found `keyword `let``\n+  --> $DIR/recover-missing-semi.rs:2:22\n    |\n LL |     let _: usize = ()\n-   |                      - help: a semicolon may be missing here\n-LL |\n+   |                      ^ help: add `;` here\n+...\n LL |     let _ = 3;\n-   |     ^^^\n+   |     --- unexpected token\n \n-error: expected one of `.`, `;`, `?`, or an operator, found `return`\n-  --> $DIR/recover-missing-semi.rs:11:5\n+error: expected `;`, found `keyword `return``\n+  --> $DIR/recover-missing-semi.rs:9:22\n    |\n LL |     let _: usize = ()\n-   |                      - help: a semicolon may be missing here\n-LL |\n+   |                      ^ help: add `;` here\n+...\n LL |     return 3;\n-   |     ^^^^^^\n+   |     ------ unexpected token\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:2:20"}, {"sha": "af148e697118cc24e65f9e128a944d4d80d0079b", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `static`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `static`\n   --> $DIR/removed-syntax-static-fn.rs:4:5\n    |\n LL | impl S {"}, {"sha": "f9a9d071a3d1b5c5263242d9cfd538d94da41b25", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1 +1,2 @@\n-type mut_box = Box<mut isize>; //~ ERROR expected one of `>`, const, lifetime, or type, found `mut`\n+type mut_box = Box<mut isize>;\n+//~^ ERROR expected one of `>`, const, lifetime, or type, found keyword `mut`"}, {"sha": "9c47e3db67dd30d5997da1ceba412cc87c86aeb0", "filename": "src/test/ui/parser/removed-syntax-uniq-mut-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-uniq-mut-ty.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -1,4 +1,4 @@\n-error: expected one of `>`, const, lifetime, or type, found `mut`\n+error: expected one of `>`, const, lifetime, or type, found keyword `mut`\n   --> $DIR/removed-syntax-uniq-mut-ty.rs:1:20\n    |\n LL | type mut_box = Box<mut isize>;"}, {"sha": "7b0d128f06f8a7c4151c5c364111a524506c17ed", "filename": "src/test/ui/parser/underscore_item_not_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -25,6 +25,6 @@ use _ as g; //~ ERROR expected identifier, found reserved identifier `_`\n trait _ {} //~ ERROR expected identifier, found reserved identifier `_`\n trait _ = Copy; //~ ERROR expected identifier, found reserved identifier `_`\n macro_rules! _ { () => {} } //~ ERROR expected identifier, found reserved identifier `_`\n-union _ { f: u8 } //~ ERROR expected one of `!` or `::`, found `_`\n+union _ { f: u8 } //~ ERROR expected one of `!` or `::`, found reserved identifier `_`\n \n fn main() {}"}, {"sha": "8814aa3527153d2b337acc591bed40fcc72d14b0", "filename": "src/test/ui/parser/underscore_item_not_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cac68218105f1ba8b6a2a0b21b791951ff02f75d/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr?ref=cac68218105f1ba8b6a2a0b21b791951ff02f75d", "patch": "@@ -82,7 +82,7 @@ error: expected identifier, found reserved identifier `_`\n LL | macro_rules! _ { () => {} }\n    |              ^ expected identifier, found reserved identifier\n \n-error: expected one of `!` or `::`, found `_`\n+error: expected one of `!` or `::`, found reserved identifier `_`\n   --> $DIR/underscore_item_not_const.rs:28:7\n    |\n LL | union _ { f: u8 }"}]}