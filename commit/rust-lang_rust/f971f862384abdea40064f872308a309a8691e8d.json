{"sha": "f971f862384abdea40064f872308a309a8691e8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzFmODYyMzg0YWJkZWE0MDA2NGY4NzIzMDhhMzA5YTg2OTFlOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-04T09:02:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-04T09:02:43Z"}, "message": "Auto merge of #27507 - eefriedman:link-section, r=alexcrichton\n\nFixes #27467.", "tree": {"sha": "b070e3adfd61921532b0106a0defc860fb12a33a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b070e3adfd61921532b0106a0defc860fb12a33a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f971f862384abdea40064f872308a309a8691e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f971f862384abdea40064f872308a309a8691e8d", "html_url": "https://github.com/rust-lang/rust/commit/f971f862384abdea40064f872308a309a8691e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f971f862384abdea40064f872308a309a8691e8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7789df11c59432ddec4fca88339735eed23ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7789df11c59432ddec4fca88339735eed23ec1", "html_url": "https://github.com/rust-lang/rust/commit/7a7789df11c59432ddec4fca88339735eed23ec1"}, {"sha": "c40703f9b30723b7fdafdeae87c69ffea5eaca4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40703f9b30723b7fdafdeae87c69ffea5eaca4c", "html_url": "https://github.com/rust-lang/rust/commit/c40703f9b30723b7fdafdeae87c69ffea5eaca4c"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "907fe34215fd2d02a186a110d8ff5ff404c6a5ef", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f971f862384abdea40064f872308a309a8691e8d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f971f862384abdea40064f872308a309a8691e8d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f971f862384abdea40064f872308a309a8691e8d", "patch": "@@ -2032,6 +2032,23 @@ pub fn update_linkage(ccx: &CrateContext,\n     }\n }\n \n+fn set_global_section(ccx: &CrateContext, llval: ValueRef, i: &ast::Item) {\n+    match attr::first_attr_value_str_by_name(&i.attrs,\n+                                             \"link_section\") {\n+        Some(sect) => {\n+            if contains_null(&sect) {\n+                ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\",\n+                                            &sect));\n+            }\n+            unsafe {\n+                let buf = CString::new(sect.as_bytes()).unwrap();\n+                llvm::LLVMSetSection(llval, buf.as_ptr());\n+            }\n+        },\n+        None => ()\n+    }\n+}\n+\n pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     let _icx = push_ctxt(\"trans_item\");\n \n@@ -2054,6 +2071,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n                 } else {\n                     trans_fn(ccx, &**decl, &**body, llfn, empty_substs, item.id, &item.attrs);\n                 }\n+                set_global_section(ccx, llfn, item);\n                 update_linkage(ccx, llfn, Some(item.id),\n                                if is_origin { OriginalTranslation } else { InlinedCopy });\n \n@@ -2103,6 +2121,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n           v.visit_expr(&**expr);\n \n           let g = consts::trans_static(ccx, m, expr, item.id, &item.attrs);\n+          set_global_section(ccx, g, item);\n           update_linkage(ccx, g, Some(item.id), OriginalTranslation);\n       },\n       ast::ItemForeignMod(ref foreign_mod) => {\n@@ -2387,21 +2406,6 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                 _ => ccx.sess().bug(\"get_item_val: weird result in table\")\n             };\n \n-            match attr::first_attr_value_str_by_name(&i.attrs,\n-                                                     \"link_section\") {\n-                Some(sect) => {\n-                    if contains_null(&sect) {\n-                        ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\",\n-                                                 &sect));\n-                    }\n-                    unsafe {\n-                        let buf = CString::new(sect.as_bytes()).unwrap();\n-                        llvm::LLVMSetSection(v, buf.as_ptr());\n-                    }\n-                },\n-                None => ()\n-            }\n-\n             v\n         }\n "}, {"sha": "99b43552b0de4ed8325162742e94cf1f40bde6e1", "filename": "src/test/codegen/link_section.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f971f862384abdea40064f872308a309a8691e8d/src%2Ftest%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f971f862384abdea40064f872308a309a8691e8d/src%2Ftest%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink_section.rs?ref=f971f862384abdea40064f872308a309a8691e8d", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+// CHECK: @VAR1 = constant i32 1, section \".test_one\"\n+#[no_mangle]\n+#[link_section = \".test_one\"]\n+pub static VAR1: u32 = 1;\n+\n+pub enum E {\n+    A(u32),\n+    B(f32)\n+}\n+\n+// CHECK: @VAR2 = constant {{.*}} { i32 0, i32 666, {{.*}} }, section \".test_two\"\n+#[no_mangle]\n+#[link_section = \".test_two\"]\n+pub static VAR2: E = E::A(666);\n+\n+// CHECK: @VAR3 = constant {{.*}} { i32 1, float 1.000000e+00, {{.*}} }, section \".test_three\"\n+#[no_mangle]\n+#[link_section = \".test_three\"]\n+pub static VAR3: E = E::B(1.);\n+\n+// CHECK: define void @fn1() {{.*}} section \".test_four\" {\n+#[no_mangle]\n+#[link_section = \".test_four\"]\n+pub fn fn1() {}"}]}