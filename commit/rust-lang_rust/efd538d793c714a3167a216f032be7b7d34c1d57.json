{"sha": "efd538d793c714a3167a216f032be7b7d34c1d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDUzOGQ3OTNjNzE0YTMxNjdhMjE2ZjAzMmJlN2I3ZDM0YzFkNTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-20T21:31:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-20T21:31:29Z"}, "message": "Remove high-order bits from attributes", "tree": {"sha": "4b6a58c1922de2a7aba018375f365752baa5cd80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6a58c1922de2a7aba018375f365752baa5cd80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd538d793c714a3167a216f032be7b7d34c1d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd538d793c714a3167a216f032be7b7d34c1d57", "html_url": "https://github.com/rust-lang/rust/commit/efd538d793c714a3167a216f032be7b7d34c1d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd538d793c714a3167a216f032be7b7d34c1d57/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b5d39f2a204e5ec6cd6205440e4cdc763162814", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5d39f2a204e5ec6cd6205440e4cdc763162814", "html_url": "https://github.com/rust-lang/rust/commit/0b5d39f2a204e5ec6cd6205440e4cdc763162814"}], "stats": {"total": 138, "additions": 98, "deletions": 40}, "files": [{"sha": "045840059ad770925b52c82c195d451b07f37073", "filename": "src/parser/event_parser/grammar/attributes.rs", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs?ref=efd538d793c714a3167a216f032be7b7d34c1d57", "patch": "@@ -1,60 +1,84 @@\n use super::*;\n \n-#[derive(PartialEq, Eq)]\n-enum AttrKind {\n-    Inner, Outer\n-}\n-\n pub(super) fn inner_attributes(p: &mut Parser) {\n-    repeat(p, |p| attribute(p, AttrKind::Inner))\n+    while p.at([POUND, EXCL]) {\n+        attribute(p, true)\n+    }\n }\n \n pub(super) fn outer_attributes(p: &mut Parser) {\n-    repeat(p, |p| attribute(p, AttrKind::Outer))\n+    while p.at(POUND) {\n+        attribute(p, false)\n+    }\n }\n \n \n-fn attribute(p: &mut Parser, kind: AttrKind) -> bool {\n-    if p.at(POUND) {\n-        if kind == AttrKind::Inner && p.raw_lookahead(1) != EXCL {\n-            return false;\n-        }\n-        let attr = p.start();\n+fn attribute(p: &mut Parser, inner: bool){\n+    let attr = p.start();\n+    assert!(p.at(POUND));\n+    p.bump();\n+\n+    if inner {\n+        assert!(p.at(EXCL));\n         p.bump();\n-        if kind == AttrKind::Inner {\n-            p.bump();\n-        }\n-        p.expect(L_BRACK) && meta_item(p) && p.expect(R_BRACK);\n-        attr.complete(p, ATTR);\n-        true\n-    } else {\n-        false\n     }\n+\n+    if p.expect(L_BRACK) {\n+        meta_item(p);\n+        p.expect(R_BRACK);\n+    }\n+    attr.complete(p, ATTR);\n }\n \n-fn meta_item(p: &mut Parser) -> bool {\n+fn meta_item(p: &mut Parser) {\n     if p.at(IDENT) {\n         let meta_item = p.start();\n         p.bump();\n-        if p.eat(EQ) {\n-            if !expressions::literal(p) {\n-                p.error()\n-                    .message(\"expected literal\")\n-                    .emit();\n+        match p.current() {\n+            EQ => {\n+                p.bump();\n+                if !expressions::literal(p) {\n+                    p.error()\n+                        .message(\"expected literal\")\n+                        .emit();\n+                }\n             }\n-        } else if p.eat(L_PAREN) {\n-            comma_list(p, R_PAREN, meta_item_inner);\n-            p.expect(R_PAREN);\n+            L_PAREN => meta_item_arg_list(p),\n+            _ => (),\n         }\n         meta_item.complete(p, META_ITEM);\n-        true\n     } else {\n-        false\n+        p.error()\n+            .message(\"expected attribute value\")\n+            .emit()\n     }\n-\n }\n \n-fn meta_item_inner(p: &mut Parser) -> bool {\n-    meta_item(p) || expressions::literal(p)\n-}\n+fn meta_item_arg_list(p: &mut Parser) {\n+    assert!(p.at(L_PAREN));\n+    p.bump();\n+    loop {\n+        match p.current() {\n+            EOF | R_PAREN => break,\n+            IDENT => meta_item(p),\n+            c => if !expressions::literal(p) {\n+                let message = \"expected attribute\";\n \n+                if items::ITEM_FIRST.contains(c) {\n+                    p.error().message(message).emit();\n+                    return;\n+                }\n+\n+                let err = p.start();\n+                p.error().message(message).emit();\n+                p.bump();\n+                err.complete(p, ERROR);\n+                continue\n+            }\n+        }\n+        if !p.at(R_PAREN) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(R_PAREN);\n+}"}, {"sha": "12b6d06c73f56de85e0459d5e27a380201e0f0ab", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=efd538d793c714a3167a216f032be7b7d34c1d57", "patch": "@@ -7,6 +7,16 @@ pub(super) fn mod_contents(p: &mut Parser) {\n     }\n }\n \n+pub(super) const ITEM_FIRST: TokenSet = token_set![\n+    EXTERN_KW,\n+    MOD_KW,\n+    USE_KW,\n+    STRUCT_KW,\n+    FN_KW,\n+    PUB_KW,\n+    POUND,\n+];\n+\n fn item(p: &mut Parser) {\n     let item = p.start();\n     attributes::outer_attributes(p);"}, {"sha": "32e4db698e62d42fa940649a98a92a8367c5a9f6", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=efd538d793c714a3167a216f032be7b7d34c1d57", "patch": "@@ -1,4 +1,4 @@\n-use super::parser::Parser;\n+use super::parser::{Parser, TokenSet};\n use {SyntaxKind};\n use tree::EOF;\n use syntax_kinds::*;\n@@ -80,8 +80,8 @@ fn comma_list<F: Fn(&mut Parser) -> bool>(p: &mut Parser, end: SyntaxKind, f: F)\n \n \n impl<'p> Parser<'p> {\n-    fn at(&self, kind: SyntaxKind) -> bool {\n-        self.current() == kind\n+    fn at<L: Lookahead>(&self, l: L) -> bool {\n+        l.is_ahead(self)\n     }\n \n     pub(crate) fn expect(&mut self, kind: SyntaxKind) -> bool {"}, {"sha": "b9ffded9ddf8dc0393e40fd1b99f73fea4098c8d", "filename": "src/parser/event_parser/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fmod.rs?ref=efd538d793c714a3167a216f032be7b7d34c1d57", "patch": "@@ -1,7 +1,8 @@\n use {Token, SyntaxKind};\n \n-mod grammar;\n+#[macro_use]\n mod parser;\n+mod grammar;\n \n #[derive(Debug)]\n pub(crate) enum Event {"}, {"sha": "2cbe370be4f4b1670ee67895fa2d69ebd77d2b2f", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd538d793c714a3167a216f032be7b7d34c1d57/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=efd538d793c714a3167a216f032be7b7d34c1d57", "patch": "@@ -67,6 +67,29 @@ impl CompleteMarker {\n     }\n }\n \n+pub(crate) struct TokenSet {\n+    pub tokens: &'static [SyntaxKind]\n+}\n+\n+impl TokenSet {\n+    pub fn contains(&self, kind: SyntaxKind) -> bool {\n+        self.tokens.contains(&kind)\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! token_set {\n+    ($($t:ident),*) => {\n+        TokenSet {\n+            tokens: &[$($t),*],\n+        }\n+    };\n+\n+    ($($t:ident),* ,) => {\n+        token_set!($($t),*)\n+    };\n+}\n+\n \n pub(crate) struct Parser<'t> {\n     #[allow(unused)]"}]}