{"sha": "97519bd2023398c32fa7f966dd9f5356aa6008e9", "node_id": "C_kwDOAAsO6NoAKDk3NTE5YmQyMDIzMzk4YzMyZmE3Zjk2NmRkOWY1MzU2YWE2MDA4ZTk", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-09T02:59:05Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-09T10:40:10Z"}, "message": "Grammar fix in the compile_error documentation", "tree": {"sha": "917bff882826db3852d60fbbd80414bc205ebba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/917bff882826db3852d60fbbd80414bc205ebba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97519bd2023398c32fa7f966dd9f5356aa6008e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97519bd2023398c32fa7f966dd9f5356aa6008e9", "html_url": "https://github.com/rust-lang/rust/commit/97519bd2023398c32fa7f966dd9f5356aa6008e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97519bd2023398c32fa7f966dd9f5356aa6008e9/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401", "html_url": "https://github.com/rust-lang/rust/commit/fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "673a39c298f7d2f6ae4f14ff7b32a0650e1f535c", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97519bd2023398c32fa7f966dd9f5356aa6008e9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97519bd2023398c32fa7f966dd9f5356aa6008e9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=97519bd2023398c32fa7f966dd9f5356aa6008e9", "patch": "@@ -795,7 +795,7 @@ pub(crate) mod builtin {\n     ///\n     /// Two such examples are macros and `#[cfg]` environments.\n     ///\n-    /// Emit better compiler error if a macro is passed invalid values. Without the final branch,\n+    /// Emit a better compiler error if a macro is passed invalid values. Without the final branch,\n     /// the compiler would still emit an error, but the error's message would not mention the two\n     /// valid values.\n     ///\n@@ -812,7 +812,7 @@ pub(crate) mod builtin {\n     /// // ^ will fail at compile time with message \"This macro only accepts `foo` or `bar`\"\n     /// ```\n     ///\n-    /// Emit compiler error if one of a number of features isn't available.\n+    /// Emit a compiler error if one of a number of features isn't available.\n     ///\n     /// ```compile_fail\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]"}]}