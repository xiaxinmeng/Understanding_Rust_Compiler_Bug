{"sha": "c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWUyNDkyNjVjNWRhMjA3YmEwZDhhMmY4YmU5NWU1ODgxN2UxZGM=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-01-04T19:34:03Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-01-11T01:42:47Z"}, "message": "Add transpose conversions for Option and Result\n\nThese impls are useful when working with combinator\nmethods that expect an option or a result, but you\nhave a Result<Option<T>, E> instead of an Option<Result<T, E>>\nor vice versa.", "tree": {"sha": "c56ad0103df2c2fafe1eaaef4f7f53286d897f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56ad0103df2c2fafe1eaaef4f7f53286d897f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "html_url": "https://github.com/rust-lang/rust/commit/c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7a609e635b728eba65d471c985ab462dc4cfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7a609e635b728eba65d471c985ab462dc4cfc7", "html_url": "https://github.com/rust-lang/rust/commit/8e7a609e635b728eba65d471c985ab462dc4cfc7"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "76cea58703847fe3819e0df74abcbc87079829f2", "filename": "src/libcore/option.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "patch": "@@ -884,6 +884,35 @@ impl<T: Default> Option<T> {\n     }\n }\n \n+impl<T, E> Option<Result<T, E>> {\n+    /// Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n+    ///\n+    /// `None` will be mapped to `Ok(None)`.\n+    /// `Some(Ok(_))` and `Some(Err(_))` will be mapped to `Ok(Some(_))` and `Err(_)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(transpose_result)]\n+    ///\n+    /// #[derive(Debug, Eq, PartialEq)]\n+    /// struct SomeErr;\n+    ///\n+    /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));\n+    /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));\n+    /// assert_eq!(x, y.transpose());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"transpose_result\", issue = \"47338\")]\n+    pub fn transpose(self) -> Result<Option<T>, E> {\n+        match self {\n+            Some(Ok(x)) => Ok(Some(x)),\n+            Some(Err(e)) => Err(e),\n+            None => Ok(None),\n+        }\n+    }\n+}\n+\n // This is a separate function to reduce the code size of .expect() itself.\n #[inline(never)]\n #[cold]"}, {"sha": "3801db94e15d53242fc71986782f8ee161554079", "filename": "src/libcore/result.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "patch": "@@ -909,6 +909,35 @@ impl<T: Default, E> Result<T, E> {\n     }\n }\n \n+impl<T, E> Result<Option<T>, E> {\n+    /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n+    ///\n+    /// `Ok(None)` will be mapped to `None`.\n+    /// `Ok(Some(_))` and `Err(_)` will be mapped to `Some(Ok(_))` and `Some(Err(_))`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(transpose_result)]\n+    ///\n+    /// #[derive(Debug, Eq, PartialEq)]\n+    /// struct SomeErr;\n+    ///\n+    /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));\n+    /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));\n+    /// assert_eq!(x.transpose(), y);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"transpose_result\", issue = \"47338\")]\n+    pub fn transpose(self) -> Option<Result<T, E>> {\n+        match self {\n+            Ok(Some(x)) => Some(Ok(x)),\n+            Ok(None) => None,\n+            Err(e) => Some(Err(e)),\n+        }\n+    }\n+}\n+\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]"}, {"sha": "0f6da002dda3759ce4c1db8a9e799534d6c87428", "filename": "src/test/run-pass/result-opt-conversions.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/src%2Ftest%2Frun-pass%2Fresult-opt-conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae249265c5da207ba0d8a2f8be95e58817e1dc/src%2Ftest%2Frun-pass%2Fresult-opt-conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresult-opt-conversions.rs?ref=c9ae249265c5da207ba0d8a2f8be95e58817e1dc", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(transpose_result)]\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+struct BadNumErr;\n+\n+fn try_num(x: i32) -> Result<i32, BadNumErr> {\n+    if x <= 5 {\n+        Ok(x + 1)\n+    } else {\n+        Err(BadNumErr)\n+    }\n+}\n+\n+type ResOpt = Result<Option<i32>, BadNumErr>;\n+type OptRes = Option<Result<i32, BadNumErr>>;\n+\n+fn main() {\n+    let mut x: ResOpt = Ok(Some(5));\n+    let mut y: OptRes = Some(Ok(5));\n+    assert_eq!(x, y.transpose());\n+    assert_eq!(x.transpose(), y);\n+\n+    x = Ok(None);\n+    y = None;\n+    assert_eq!(x, y.transpose());\n+    assert_eq!(x.transpose(), y);\n+\n+    x = Err(BadNumErr);\n+    y = Some(Err(BadNumErr));\n+    assert_eq!(x, y.transpose());\n+    assert_eq!(x.transpose(), y);\n+\n+    let res: Result<Vec<i32>, BadNumErr> =\n+        (0..10)\n+            .map(|x| {\n+                let y = try_num(x)?;\n+                Ok(if y % 2 == 0 {\n+                    Some(y - 1)\n+                } else {\n+                    None\n+                })\n+            })\n+            .filter_map(Result::transpose)\n+            .collect();\n+\n+    assert_eq!(res, Err(BadNumErr))\n+}"}]}