{"sha": "c2e849c0221bbaf1106884cd776e375168a95323", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTg0OWMwMjIxYmJhZjExMDY4ODRjZDc3NmUzNzUxNjhhOTUzMjM=", "commit": {"author": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-01-29T06:24:19Z"}, "committer": {"name": "Henry Boisdequin", "email": "65845077+henryboisdequin@users.noreply.github.com", "date": "2021-02-03T04:48:08Z"}, "message": "added a suggestion to create a `const` item if the `fn` in the array repeat expression is a `const fn`", "tree": {"sha": "2817749464cf18a0471f6333e0457576889aa433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2817749464cf18a0471f6333e0457576889aa433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e849c0221bbaf1106884cd776e375168a95323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e849c0221bbaf1106884cd776e375168a95323", "html_url": "https://github.com/rust-lang/rust/commit/c2e849c0221bbaf1106884cd776e375168a95323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e849c0221bbaf1106884cd776e375168a95323/comments", "author": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "henryboisdequin", "id": 65845077, "node_id": "MDQ6VXNlcjY1ODQ1MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/65845077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryboisdequin", "html_url": "https://github.com/henryboisdequin", "followers_url": "https://api.github.com/users/henryboisdequin/followers", "following_url": "https://api.github.com/users/henryboisdequin/following{/other_user}", "gists_url": "https://api.github.com/users/henryboisdequin/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryboisdequin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryboisdequin/subscriptions", "organizations_url": "https://api.github.com/users/henryboisdequin/orgs", "repos_url": "https://api.github.com/users/henryboisdequin/repos", "events_url": "https://api.github.com/users/henryboisdequin/events{/privacy}", "received_events_url": "https://api.github.com/users/henryboisdequin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "368275062fb655c1f36e0398f88b15379a1f3c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/368275062fb655c1f36e0398f88b15379a1f3c93", "html_url": "https://github.com/rust-lang/rust/commit/368275062fb655c1f36e0398f88b15379a1f3c93"}], "stats": {"total": 91, "additions": 87, "deletions": 4}, "files": [{"sha": "f34ee22860259e1953a2b5437f556c934db113cc", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -228,7 +228,10 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[T, ..n]` implies that `T` must be `Copy`.\n-    RepeatVec,\n+    /// If the function in the array repeat expression is a `const fn`,\n+    /// display a help message suggesting to move the function call to a\n+    /// new `const` item while saying that `T` doesn't implement `Copy`.\n+    RepeatVec(bool),\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {"}, {"sha": "44fa19707174366de369ef6962931c429d99f482", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -43,6 +43,9 @@ use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations}\n use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::ResultsCursor;\n+use crate::transform::{\n+    check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n+};\n \n use crate::borrow_check::{\n     borrow_set::BorrowSet,\n@@ -1988,18 +1991,24 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Copy(..) | Operand::Constant(..) => {\n                             // These are always okay: direct use of a const, or a value that can evidently be copied.\n                         }\n-                        Operand::Move(_) => {\n+                        Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let span = body.source_info(location).span;\n                             let ty = operand.ty(body, tcx);\n                             if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                                let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n+                                let is_const_fn =\n+                                    is_const_fn_in_array_repeat_expression(&ccx, &place, &body);\n+\n+                                debug!(\"check_rvalue: is_const_fn={:?}\", is_const_fn);\n+\n                                 let def_id = body.source.def_id().expect_local();\n                                 self.infcx.report_selection_error(\n                                     &traits::Obligation::new(\n                                         ObligationCause::new(\n                                             span,\n                                             self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                            traits::ObligationCauseCode::RepeatVec,\n+                                            traits::ObligationCauseCode::RepeatVec(is_const_fn),\n                                         ),\n                                         self.param_env,\n                                         ty::Binder::bind(ty::TraitRef::new("}, {"sha": "1d4438d80c95ae9c7d806b2273f3a439885a4f02", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -1231,3 +1231,38 @@ pub fn promote_candidates<'tcx>(\n \n     promotions\n }\n+\n+/// This function returns `true` if the function being called in the array\n+/// repeat expression is a `const` function.\n+crate fn is_const_fn_in_array_repeat_expression<'tcx>(\n+    ccx: &ConstCx<'_, 'tcx>,\n+    place: &Place<'tcx>,\n+    body: &Body<'tcx>,\n+) -> bool {\n+    match place.as_local() {\n+        // rule out cases such as: `let my_var = some_fn(); [my_var; N]`\n+        Some(local) if body.local_decls[local].is_user_variable() => return false,\n+        None => return false,\n+        _ => {}\n+    }\n+\n+    for block in body.basic_blocks() {\n+        if let Some(Terminator { kind: TerminatorKind::Call { func, destination, .. }, .. }) =\n+            &block.terminator\n+        {\n+            if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n+                if let ty::FnDef(def_id, _) = *ty.kind() {\n+                    if let Some((destination_place, _)) = destination {\n+                        if destination_place == place {\n+                            if is_const_fn(ccx.tcx, def_id) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "859e2fb7162f1427b06e4b8c09ddac60ff4148a6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -1881,10 +1881,26 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec => {\n+            ObligationCauseCode::RepeatVec(is_const_fn) => {\n                 err.note(\n                     \"the `Copy` trait is required because the repeated element will be copied\",\n                 );\n+                if is_const_fn && !self.tcx.sess.is_nightly_build() {\n+                    err.help(\n+                        \"consider creating a new `const` item and initializing with the result \\\n+                        of the function call to be used in the repeat position, like \\\n+                        `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\",\n+                    );\n+                } else if self.tcx.sess.is_nightly_build() && is_const_fn {\n+                    err.help(\n+                        \"create an inline `const` block, see PR \\\n+                        #2920 <https://github.com/rust-lang/rfcs/pull/2920> \\\n+                        for more information\",\n+                    );\n+                } else {\n+                    // Don't suggest anything to the user as suggesting the user to make the function `const`\n+                    // could lead them down the wrong path.\n+                }\n             }\n             ObligationCauseCode::VariableType(hir_id) => {\n                 let parent_node = self.tcx.hir().get_parent_node(hir_id);"}, {"sha": "661f279e6bef647418467bc0c1e270f6a88b4a64", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -7,6 +7,7 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    = help: the following implementations were found:\n              <Option<T> as Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error\n "}, {"sha": "edf29015200756c31c82cad275d6d5b7fbc1a601", "filename": "src/test/ui/consts/const-fn-in-vec.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    // should hint to create an inline const block\n+    // as all tests are on \"nightly\"\n+    let strings: [String; 5] = [String::new(); 5];\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied\n+    println!(\"{:?}\", strings);\n+}"}, {"sha": "c477605842d31dfb8eeb3c4d4f25d349365fc07b", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2e849c0221bbaf1106884cd776e375168a95323/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2e849c0221bbaf1106884cd776e375168a95323/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=c2e849c0221bbaf1106884cd776e375168a95323", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/const-fn-in-vec.rs:4:32\n+   |\n+LL |     let strings: [String; 5] = [String::new(); 5];\n+   |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}