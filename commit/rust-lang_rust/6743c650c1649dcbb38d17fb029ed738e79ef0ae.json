{"sha": "6743c650c1649dcbb38d17fb029ed738e79ef0ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDNjNjUwYzE2NDlkY2JiMzhkMTdmYjAyOWVkNzM4ZTc5ZWYwYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-26T19:41:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-26T19:41:33Z"}, "message": "auto merge of #11777 : alexcrichton/rust/issue-11522, r=pnkfelix\n\nSee #11522, but the idea is for private structs to have private fields by default, whereas public structs will continue to have public fields by default.", "tree": {"sha": "9b4bb81d4a7f82a08ede485f30a6eee9487e361c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b4bb81d4a7f82a08ede485f30a6eee9487e361c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6743c650c1649dcbb38d17fb029ed738e79ef0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6743c650c1649dcbb38d17fb029ed738e79ef0ae", "html_url": "https://github.com/rust-lang/rust/commit/6743c650c1649dcbb38d17fb029ed738e79ef0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6743c650c1649dcbb38d17fb029ed738e79ef0ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838b5a4cc072057f31453cdd1b50345f92e1a772", "url": "https://api.github.com/repos/rust-lang/rust/commits/838b5a4cc072057f31453cdd1b50345f92e1a772", "html_url": "https://github.com/rust-lang/rust/commit/838b5a4cc072057f31453cdd1b50345f92e1a772"}, {"sha": "4d6836f418e35de76ca072092372cbd55b01867a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6836f418e35de76ca072092372cbd55b01867a", "html_url": "https://github.com/rust-lang/rust/commit/4d6836f418e35de76ca072092372cbd55b01867a"}], "stats": {"total": 270, "additions": 187, "deletions": 83}, "files": [{"sha": "a586cfcf0d76356e834a4438e50114f74c57c0d4", "filename": "doc/guide-container.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/doc%2Fguide-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/doc%2Fguide-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-container.md?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -90,7 +90,7 @@ Reaching the end of the iterator is signalled by returning `None` instead of\n # fn main() {}\n /// A stream of N zeroes\n struct ZeroStream {\n-    priv remaining: uint\n+    remaining: uint\n }\n \n impl ZeroStream {\n@@ -305,7 +305,7 @@ The `ZeroStream` from earlier can provide an exact lower and upper bound:\n # fn main() {}\n /// A stream of N zeroes\n struct ZeroStream {\n-    priv remaining: uint\n+    remaining: uint\n }\n \n impl ZeroStream {"}, {"sha": "f914fa1ac0936a699ec18a2b870217c7a610ac6d", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -148,7 +148,7 @@ impl<T:Freeze + Send> Clone for Arc<T> {\n  ****************************************************************************/\n \n #[doc(hidden)]\n-struct MutexArcInner<T> { priv lock: Mutex, priv failed: bool, priv data: T }\n+struct MutexArcInner<T> { lock: Mutex, failed: bool, data: T }\n \n /// An Arc with mutable data protected by a blocking mutex.\n #[no_freeze]\n@@ -312,7 +312,7 @@ impl PoisonOnFail {\n  ****************************************************************************/\n \n #[doc(hidden)]\n-struct RWArcInner<T> { priv lock: RWLock, priv failed: bool, priv data: T }\n+struct RWArcInner<T> { lock: RWLock, failed: bool, data: T }\n /**\n  * A dual-mode Arc protected by a reader-writer lock. The data can be accessed\n  * mutably or immutably, and immutably-accessing tasks may run concurrently."}, {"sha": "320797889422c982bce87d4d3882c0fcb78c54b7", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -38,12 +38,12 @@ pub struct DList<T> {\n }\n \n type Link<T> = Option<~Node<T>>;\n-struct Rawlink<T> { priv p: *mut T }\n+struct Rawlink<T> { p: *mut T }\n \n struct Node<T> {\n-    priv next: Link<T>,\n-    priv prev: Rawlink<Node<T>>,\n-    priv value: T,\n+    next: Link<T>,\n+    prev: Rawlink<Node<T>>,\n+    value: T,\n }\n \n /// Double-ended DList iterator"}, {"sha": "f602db2e54d0aae760d5c7beec5777313f71645f", "filename": "src/libextra/lru_cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flru_cache.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -43,13 +43,13 @@ use std::to_bytes::Cb;\n use std::ptr;\n use std::cast;\n \n-struct KeyRef<K> { priv k: *K }\n+struct KeyRef<K> { k: *K }\n \n struct LruEntry<K, V> {\n-    priv key: Option<K>,\n-    priv value: Option<V>,\n-    priv next: *mut LruEntry<K, V>,\n-    priv prev: *mut LruEntry<K, V>,\n+    key: Option<K>,\n+    value: Option<V>,\n+    next: *mut LruEntry<K, V>,\n+    prev: *mut LruEntry<K, V>,\n }\n \n /// An LRU Cache."}, {"sha": "9aefb6eaf7641627f0a398ea49b418b7cd930526", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -709,8 +709,8 @@ pub struct Barrier {\n \n // The inner state of a double barrier\n struct BarrierState {\n-    priv count: uint,\n-    priv generation_id: uint,\n+    count: uint,\n+    generation_id: uint,\n }\n \n impl Barrier {"}, {"sha": "052a6ad898fd63ce55e8d234e1beee492153c135", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 66, "deletions": 32, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -15,6 +15,7 @@\n use std::hashmap::{HashSet, HashMap};\n use std::util;\n \n+use metadata::csearch;\n use middle::resolve;\n use middle::ty;\n use middle::typeck::{method_map, method_origin, method_param};\n@@ -123,22 +124,7 @@ impl Visitor<()> for ParentVisitor {\n         // While we have the id of the struct definition, go ahead and parent\n         // all the fields.\n         for field in s.fields.iter() {\n-            let vis = match field.node.kind {\n-                ast::NamedField(_, vis) => vis,\n-                ast::UnnamedField => continue\n-            };\n-\n-            // Private fields are scoped to this module, so parent them directly\n-            // to the module instead of the struct. This is similar to the case\n-            // of private enum variants.\n-            if vis == ast::Private {\n-                self.parents.insert(field.node.id, self.curparent);\n-\n-            // Otherwise public fields are scoped to the visibility of the\n-            // struct itself\n-            } else {\n-                self.parents.insert(field.node.id, n);\n-            }\n+            self.parents.insert(field.node.id, self.curparent);\n         }\n         visit::walk_struct_def(self, s, i, g, n, ())\n     }\n@@ -558,12 +544,48 @@ impl<'a> PrivacyVisitor<'a> {\n \n     // Checks that a field is in scope.\n     // FIXME #6993: change type (and name) from Ident to Name\n-    fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) {\n+    fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident,\n+                   enum_id: Option<ast::DefId>) {\n         let fields = ty::lookup_struct_fields(self.tcx, id);\n+        let struct_vis = if is_local(id) {\n+            match self.tcx.items.get(id.node) {\n+                ast_map::NodeItem(ref it, _) => it.vis,\n+                ast_map::NodeVariant(ref v, ref it, _) => {\n+                    if v.node.vis == ast::Inherited {it.vis} else {v.node.vis}\n+                }\n+                _ => {\n+                    self.tcx.sess.span_bug(span,\n+                                           format!(\"not an item or variant def\"));\n+                }\n+            }\n+        } else {\n+            let cstore = self.tcx.sess.cstore;\n+            match enum_id {\n+                Some(enum_id) => {\n+                    let v = csearch::get_enum_variants(self.tcx, enum_id);\n+                    match v.iter().find(|v| v.id == id) {\n+                        Some(variant) => {\n+                            if variant.vis == ast::Inherited {\n+                                csearch::get_item_visibility(cstore, enum_id)\n+                            } else {\n+                                variant.vis\n+                            }\n+                        }\n+                        None => {\n+                            self.tcx.sess.span_bug(span, \"no xcrate variant\");\n+                        }\n+                    }\n+                }\n+                None => csearch::get_item_visibility(cstore, id)\n+            }\n+        };\n+\n         for field in fields.iter() {\n             if field.name != ident.name { continue; }\n-            // public fields are public everywhere\n-            if field.vis != ast::Private { break }\n+            // public structs have public fields by default, and private structs\n+            // have private fields by default.\n+            if struct_vis == ast::Public && field.vis != ast::Private { break }\n+            if struct_vis != ast::Public && field.vis == ast::Public { break }\n             if !is_local(field.id) ||\n                !self.private_accessible(field.id.node) {\n                 self.tcx.sess.span_err(span, format!(\"field `{}` is private\",\n@@ -661,7 +683,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                 let t = ty::type_autoderef(ty::expr_ty(self.tcx, base));\n                 match ty::get(t).sty {\n                     ty::ty_struct(id, _) => {\n-                        self.check_field(expr.span, id, ident);\n+                        self.check_field(expr.span, id, ident, None);\n                     }\n                     _ => {}\n                 }\n@@ -690,16 +712,18 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                 match ty::get(ty::expr_ty(self.tcx, expr)).sty {\n                     ty::ty_struct(id, _) => {\n                         for field in (*fields).iter() {\n-                            self.check_field(expr.span, id, field.ident.node);\n+                            self.check_field(expr.span, id, field.ident.node,\n+                                             None);\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         let def_map = self.tcx.def_map.borrow();\n                         match def_map.get().get_copy(&expr.id) {\n-                            ast::DefVariant(_, variant_id, _) => {\n+                            ast::DefVariant(enum_id, variant_id, _) => {\n                                 for field in fields.iter() {\n                                     self.check_field(expr.span, variant_id,\n-                                                     field.ident.node);\n+                                                     field.ident.node,\n+                                                     Some(enum_id));\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(expr.span,\n@@ -763,16 +787,17 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                 match ty::get(ty::pat_ty(self.tcx, pattern)).sty {\n                     ty::ty_struct(id, _) => {\n                         for field in fields.iter() {\n-                            self.check_field(pattern.span, id, field.ident);\n+                            self.check_field(pattern.span, id, field.ident,\n+                                             None);\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         let def_map = self.tcx.def_map.borrow();\n                         match def_map.get().find(&pattern.id) {\n-                            Some(&ast::DefVariant(_, variant_id, _)) => {\n+                            Some(&ast::DefVariant(enum_id, variant_id, _)) => {\n                                 for field in fields.iter() {\n                                     self.check_field(pattern.span, variant_id,\n-                                                     field.ident);\n+                                                     field.ident, Some(enum_id));\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(pattern.span,\n@@ -888,15 +913,22 @@ impl SanePrivacyVisitor {\n                 }\n             }\n         };\n-        let check_struct = |def: &@ast::StructDef| {\n+        let check_struct = |def: &@ast::StructDef,\n+                            vis: ast::Visibility,\n+                            parent_vis: Option<ast::Visibility>| {\n+            let public_def = match vis {\n+                ast::Public => true,\n+                ast::Inherited | ast::Private => parent_vis == Some(ast::Public),\n+            };\n             for f in def.fields.iter() {\n                match f.node.kind {\n-                    ast::NamedField(_, ast::Public) => {\n+                    ast::NamedField(_, ast::Public) if public_def => {\n                         tcx.sess.span_err(f.span, \"unnecessary `pub` \\\n                                                    visibility\");\n                     }\n-                    ast::NamedField(_, ast::Private) => {\n-                        // Fields should really be private by default...\n+                    ast::NamedField(_, ast::Private) if !public_def => {\n+                        tcx.sess.span_err(f.span, \"unnecessary `priv` \\\n+                                                   visibility\");\n                     }\n                     ast::NamedField(..) | ast::UnnamedField => {}\n                 }\n@@ -951,13 +983,15 @@ impl SanePrivacyVisitor {\n                     }\n \n                     match v.node.kind {\n-                        ast::StructVariantKind(ref s) => check_struct(s),\n+                        ast::StructVariantKind(ref s) => {\n+                            check_struct(s, v.node.vis, Some(item.vis));\n+                        }\n                         ast::TupleVariantKind(..) => {}\n                     }\n                 }\n             }\n \n-            ast::ItemStruct(ref def, _) => check_struct(def),\n+            ast::ItemStruct(ref def, _) => check_struct(def, item.vis, None),\n \n             ast::ItemTrait(_, _, ref methods) => {\n                 for m in methods.iter() {"}, {"sha": "ba9cc153531fee7873a799802463ef22f33cccb1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -257,7 +257,7 @@ pub type ctxt = @ctxt_;\n /// The data structure to keep track of all the information that typechecker\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n-struct ctxt_ {\n+pub struct ctxt_ {\n     diag: @syntax::diagnostic::SpanHandler,\n     interner: RefCell<HashMap<intern_key, ~t_box_>>,\n     next_id: Cell<uint>,"}, {"sha": "ab7c62ccf16abe3c8da0e7992155ffde410d1576", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -109,8 +109,8 @@ trait FixedBuffer {\n \n /// A FixedBuffer of 64 bytes useful for implementing Sha256 which has a 64 byte blocksize.\n struct FixedBuffer64 {\n-    priv buffer: [u8, ..64],\n-    priv buffer_idx: uint,\n+    buffer: [u8, ..64],\n+    buffer_idx: uint,\n }\n \n impl FixedBuffer64 {"}, {"sha": "02c6294f236e38fd3b1422058632a4dda494586d", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -78,8 +78,8 @@ fn prefixes(p: &Path) -> Prefixes {\n }\n \n struct Prefixes {\n-    priv components: ~[~str],\n-    priv remaining: ~[~str]\n+    components: ~[~str],\n+    remaining: ~[~str]\n }\n \n impl Iterator<(Path, Path)> for Prefixes {"}, {"sha": "d6061088469d1f0ec839d83f9402b30d2fd72275", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -126,7 +126,7 @@ pub trait HomingIO {\n /// task back to its appropriate home (if applicable). The field is used to\n /// assert that we are where we think we are.\n struct HomingMissile {\n-    priv io_home: uint,\n+    io_home: uint,\n }\n \n impl HomingMissile {"}, {"sha": "57ea205134a7a699ddfe9a97579b081ed0e3222b", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -95,7 +95,7 @@ pub struct Handle<'port, T> {\n     priv port: &'port mut Port<T>,\n }\n \n-struct Packets { priv cur: *mut Packet }\n+struct Packets { cur: *mut Packet }\n \n impl Select {\n     /// Creates a new selection structure. This set is initially empty and"}, {"sha": "7d36d3da561359ec1e58b6acdda4f4ed0aadbe17", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -122,7 +122,7 @@ struct PathSegmentAndBoundSet {\n }\n \n /// A path paired with optional type bounds.\n-struct PathAndBounds {\n+pub struct PathAndBounds {\n     path: ast::Path,\n     bounds: Option<OptVec<TyParamBound>>,\n }"}, {"sha": "28437c4585d84ef2ec444ba6a3b2692fe614e172", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -13,7 +13,7 @@\n // part of issue-6919.rs\n \n struct C<'a> {\n-    k: 'a ||,\n+    pub k: 'a ||,\n }\n \n fn no_op() { }"}, {"sha": "497d50a2390325833de7c048d9db58baa2b88fb7", "filename": "src/test/auxiliary/struct-field-privacy.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A {\n+    a: int,\n+    pub b: int,\n+}\n+\n+pub struct B {\n+    a: int,\n+    priv b: int,\n+}"}, {"sha": "c06f338f0186ad3349e985991577f0f419f4270d", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -18,8 +18,8 @@ fn iterate<'a, T>(x: T, f: 'a |&T| -> T) -> Iterate<'a, T> {\n     Iterate {f: f, next: x}\n }\n struct Iterate<'a, T> {\n-    priv f: 'a |&T| -> T,\n-    priv next: T\n+    f: 'a |&T| -> T,\n+    next: T\n }\n impl<'a, T> Iterator<T> for Iterate<'a, T> {\n     fn next(&mut self) -> Option<T> {\n@@ -35,7 +35,7 @@ enum List<'a, T> {\n     Cons(T, &'a List<'a, T>)\n }\n struct ListIterator<'a, T> {\n-    priv cur: &'a List<'a, T>\n+    cur: &'a List<'a, T>\n }\n impl<'a, T> List<'a, T> {\n     fn iter(&'a self) -> ListIterator<'a, T> {"}, {"sha": "9d640647fe08b9c1b8cd03dff8c9a5abbebf80e1", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -20,7 +20,7 @@\n \n struct Foo {\n     a: int,\n-    priv b: int,\n+    b: int,\n }\n \n pub struct PubFoo { //~ ERROR: missing documentation\n@@ -99,7 +99,7 @@ mod a {\n enum Baz {\n     BazA {\n         a: int,\n-        priv b: int\n+        b: int\n     },\n     BarB\n }"}, {"sha": "377c745acf3215df50425b091abcc429bbad6de6", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv meows : uint,\n+  meows : uint,\n \n   how_hungry : int,\n }"}, {"sha": "4d77d1824ab825b25b51c2d9cd1593bc4c10bf03", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv meows : uint,\n+  meows : uint,\n   how_hungry : int,\n }\n "}, {"sha": "f31690047854f5017c59f2c689d186dff0142572", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:struct-field-privacy.rs\n+\n+extern mod xc = \"struct-field-privacy\";\n+\n+struct A {\n+    a: int,\n+}\n+\n+mod inner {\n+    struct A {\n+        a: int,\n+        pub b: int,\n+        priv c: int, //~ ERROR: unnecessary `priv` visibility\n+    }\n+    pub struct B {\n+        a: int,\n+        priv b: int,\n+        pub c: int, //~ ERROR: unnecessary `pub` visibility\n+    }\n+}\n+\n+fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n+    //~^ ERROR: type `A` is private\n+    //~^^ ERROR: struct `A` is private\n+\n+    a.a;\n+    b.a; //~ ERROR: field `a` is private\n+    b.b;\n+    b.c; //~ ERROR: field `c` is private\n+    c.a;\n+    c.b; //~ ERROR: field `b` is private\n+    c.c;\n+\n+    d.a; //~ ERROR: field `a` is private\n+    d.b;\n+\n+    e.a;\n+    e.b; //~ ERROR: field `b` is private\n+}\n+\n+fn main() {}"}, {"sha": "5a4dd42f49d3d892942f81b25e495c893a973e73", "filename": "src/test/compile-fail/useless-priv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A { pub i: int }         //~ ERROR: unnecessary `pub`\n-struct B { priv i: int }        // don't warn b/c B can still be returned\n+struct A { pub i: int }\n+struct B { priv i: int }        //~ ERROR: unnecessary `priv`\n pub enum C { pub Variant }      //~ ERROR: unnecessary `pub`\n enum D { priv Variant2 }        //~ ERROR: unnecessary `priv`\n "}, {"sha": "10b0ac375a95d79732b7d6a1b6499819fd32ead5", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -15,7 +15,7 @@ trait noisy {\n }\n \n struct dog {\n-  priv barks: uint,\n+  barks: uint,\n \n   volume: int,\n }\n@@ -50,7 +50,7 @@ fn dog() -> dog {\n \n #[deriving(Clone)]\n struct cat {\n-  priv meows: uint,\n+  meows: uint,\n \n   how_hungry: int,\n   name: ~str,"}, {"sha": "56b61dc5691df6b20d71839896ce0fa21635526b", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -15,7 +15,7 @@ trait noisy {\n }\n \n struct cat {\n-  priv meows: uint,\n+  meows: uint,\n   how_hungry: int,\n   name: ~str,\n }"}, {"sha": "e8b35c9882f9c49454834ae79a4fba86e00c0da1", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -27,7 +27,7 @@ impl cmp::Eq for cat_type {\n // ok: T should be in scope when resolving the trait ref for map\n struct cat<T> {\n     // Yes, you can have negative meows\n-    priv meows : int,\n+    meows : int,\n \n     how_hungry : int,\n     name : T,"}, {"sha": "4c492eecd9562232c5327ad3f9481f4132a5fcaa", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -14,7 +14,7 @@ extern mod cci_class_trait;\n use cci_class_trait::animals::noisy;\n \n struct cat {\n-  priv meows: uint,\n+  meows: uint,\n \n   how_hungry : int,\n   name : ~str,"}, {"sha": "6d5b9a9329e6158d89d474106721902a9dac64bb", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -16,7 +16,7 @@ trait noisy {\n \n #[deriving(Clone)]\n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n     name : ~str,"}, {"sha": "25a2009bb9a6c3c957834485e1782d0b9d12341f", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv meows : uint,\n+  meows : uint,\n \n   how_hungry : int,\n }"}, {"sha": "f4d3a115ef1367e75e235dce1eee805b7815b3e5", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n struct cat<U> {\n-    priv info : ~[U],\n-    priv meows : uint,\n+    info : ~[U],\n+    meows : uint,\n \n     how_hungry : int,\n }"}, {"sha": "3e9765f0b2b248f19ea9838554420586ecc29da1", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-fast\n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n     name : ~str,"}, {"sha": "9d4e73da81304fee635ac2775ec4469995e78fc2", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat<U> {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n }"}, {"sha": "6f21afff12000c1166e07699ae7afd4a81080c9d", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n }"}, {"sha": "496efc2172e4896c455403611ed92a6a1d6d238c", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n }"}, {"sha": "f65bf329823c2c9fe3a7420a61aabc22c0572f7d", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n     name : ~str,"}, {"sha": "db1032a71375ca1de7e93456e80d7ce07a76ca52", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -47,8 +47,8 @@ struct Rect {\n struct AsciiArt {\n     width: uint,\n     height: uint,\n-    priv fill: char,\n-    priv lines: ~[~[char]],\n+    fill: char,\n+    lines: ~[~[char]],\n \n     // This struct can be quite large so we'll disable copying: developers need\n     // to either pass these structs around via references or move them."}, {"sha": "93872bebec98bdca6906923611c9ffea548c1072", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n }"}, {"sha": "b64ca955cde6d3d60b2052d6ff28b7cd31851739", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6743c650c1649dcbb38d17fb029ed738e79ef0ae/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=6743c650c1649dcbb38d17fb029ed738e79ef0ae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-    priv meows : uint,\n+    meows : uint,\n \n     how_hungry : int,\n }"}]}