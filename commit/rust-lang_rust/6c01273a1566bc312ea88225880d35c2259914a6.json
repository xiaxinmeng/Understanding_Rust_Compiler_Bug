{"sha": "6c01273a1566bc312ea88225880d35c2259914a6", "node_id": "C_kwDOAAsO6NoAKDZjMDEyNzNhMTU2NmJjMzEyZWE4ODIyNTg4MGQzNWMyMjU5OTE0YTY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-04-13T23:11:28Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:55Z"}, "message": "Plumb dyn trait representation through ty::Dynamic", "tree": {"sha": "30cbf9416c7479ee6cc8f06fb1f7d71d1d296a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30cbf9416c7479ee6cc8f06fb1f7d71d1d296a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c01273a1566bc312ea88225880d35c2259914a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c01273a1566bc312ea88225880d35c2259914a6", "html_url": "https://github.com/rust-lang/rust/commit/6c01273a1566bc312ea88225880d35c2259914a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c01273a1566bc312ea88225880d35c2259914a6/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff35e59c698df379806add4c9f2c1d8d3fe55ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff35e59c698df379806add4c9f2c1d8d3fe55ca", "html_url": "https://github.com/rust-lang/rust/commit/eff35e59c698df379806add4c9f2c1d8d3fe55ca"}], "stats": {"total": 167, "additions": 110, "deletions": 57}, "files": [{"sha": "f6b9ddf2eeac7bb60a4dd6d8fb8a52025ee80f4d", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> VirtualIndex {\n fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n     for arg in ty.peel_refs().walk() {\n         if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Dynamic(data, _) = ty.kind() {\n+            if let ty::Dynamic(data, _, _) = ty.kind() {\n                 return data.principal().expect(\"expected principal trait object\");\n             }\n         }"}, {"sha": "3af48c3ed1a15dfdf6225c819c98b203eec289cf", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -312,7 +312,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let new_vptr = self.get_vtable_ptr(ty, data_b.principal())?;\n                 self.write_immediate(Immediate::new_dyn_trait(old_data, new_vptr, self), dest)\n             }\n-            (_, &ty::Dynamic(ref data, _)) => {\n+            (_, &ty::Dynamic(ref data, _, _repr)) => {\n                 // Initial cast from sized to dyn trait\n                 let vtable = self.get_vtable_ptr(src_pointee_ty, data.principal())?;\n                 let ptr = self.read_scalar(src)?;"}, {"sha": "8637d6a7767e4d14199d1aea8225d5d750c547f8", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             | ty::Ref(_, _, _)\n             | ty::FnDef(_, _)\n             | ty::FnPtr(_)\n-            | ty::Dynamic(_, _)\n+            | ty::Dynamic(_, _, _)\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)"}, {"sha": "7e4c5fcb031b0bdf8473c0a2f4e8294a261de4a1", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::FnPtr(_)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Dynamic(_, _) => self.pretty_print_type(ty),\n+            | ty::Dynamic(_, _, _) => self.pretty_print_type(ty),\n \n             // Placeholders (all printed as `_` to uniformize them).\n             ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error(_) => {"}, {"sha": "ae56bea6f862d7fab55b40bb34f10f9c0999ea05", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -544,7 +544,7 @@ pub struct TraitObjectVisitor(pub FxHashSet<DefId>);\n impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n-            ty::Dynamic(preds, re) if re.is_static() => {\n+            ty::Dynamic(preds, re, _) if re.is_static() => {\n                 if let Some(def_id) = preds.principal_def_id() {\n                     self.0.insert(def_id);\n                 }"}, {"sha": "3d426ecbfcb0538a663491077f40e578a80758ee", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -222,7 +222,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     }\n                     has_emitted\n                 }\n-                ty::Dynamic(binder, _) => {\n+                ty::Dynamic(binder, _, _) => {\n                     let mut has_emitted = false;\n                     for predicate in binder.iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) ="}, {"sha": "1b6b97dc229535966b87364fa8ce7ed8dbaa7078", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -63,7 +63,9 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n-use rustc_type_ir::{InternAs, InternIteratorElement, Interner, TypeFlags};\n+use rustc_type_ir::{\n+    InternAs, InternIteratorElement, Interner, TraitObjectRepresentation, TypeFlags,\n+};\n \n use std::any::Any;\n use std::borrow::Borrow;\n@@ -2545,8 +2547,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n         reg: ty::Region<'tcx>,\n+        repr: TraitObjectRepresentation,\n     ) -> Ty<'tcx> {\n-        self.mk_ty(Dynamic(obj, reg))\n+        self.mk_ty(Dynamic(obj, reg, repr))\n     }\n \n     #[inline]"}, {"sha": "855917fb8286932fb6514f4002a6924a2c38b5dc", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -467,7 +467,7 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 }\n             }\n \n-            Dynamic(dty, _) => {\n+            Dynamic(dty, _, _) => {\n                 for pred in *dty {\n                     match pred.skip_binder() {\n                         ExistentialPredicate::Trait(_) | ExistentialPredicate::Projection(_) => {"}, {"sha": "98b8a7386fe6a936de8c5ed1a6925584da54c146", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -171,7 +171,7 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n \n-            &ty::Dynamic(obj, r) => {\n+            &ty::Dynamic(obj, r, _) => {\n                 for predicate in obj.iter() {\n                     self.bound_computation(predicate, |computation, predicate| match predicate {\n                         ty::ExistentialPredicate::Trait(tr) => computation.add_substs(tr.substs),"}, {"sha": "b9b46518fa23bbe78aaf00040b8e59b8d9489f50", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -2464,7 +2464,8 @@ where\n \n                     match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n                         ty::Slice(_) | ty::Str => TyMaybeWithLayout::Ty(tcx.types.usize),\n-                        ty::Dynamic(_, _) => {\n+                        // FIXME(eholk): Do the right thing with trait object representation\n+                        ty::Dynamic(_, _, _repr) => {\n                             TyMaybeWithLayout::Ty(tcx.mk_imm_ref(\n                                 tcx.lifetimes.re_static,\n                                 tcx.mk_array(tcx.types.usize, 3),"}, {"sha": "839f3ffff245c9d3d1007421d9b8ce58d65aaadd", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -16,6 +16,7 @@ use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n+use rustc_type_ir::TraitObjectRepresentation;\n \n use std::cell::Cell;\n use std::char;\n@@ -619,12 +620,16 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Adt(def, substs) => {\n                 p!(print_def_path(def.did(), substs));\n             }\n-            ty::Dynamic(data, r) => {\n+            ty::Dynamic(data, r, repr) => {\n                 let print_r = self.should_print_region(r);\n                 if print_r {\n                     p!(\"(\");\n                 }\n-                p!(\"dyn \", print(data));\n+                match repr {\n+                    TraitObjectRepresentation::Unsized => p!(\"dyn \"),\n+                    TraitObjectRepresentation::Sized => p!(\"dyn* \"),\n+                }\n+                p!(print(data));\n                 if print_r {\n                     p!(\" + \", print(r), \")\");\n                 }"}, {"sha": "5b3750b8b4da0a6e5c10af3bea0dbdd06ffd5268", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -441,7 +441,9 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n \n         (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),\n \n-        (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {\n+        (&ty::Dynamic(a_obj, a_region, a_repr), &ty::Dynamic(b_obj, b_region, b_repr))\n+            if a_repr == b_repr =>\n+        {\n             let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {\n                 relation.relate_with_variance(\n                     ty::Contravariant,\n@@ -450,7 +452,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n                     b_region,\n                 )\n             })?;\n-            Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))\n+            Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound, a_repr))\n         }\n \n         (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))"}, {"sha": "323aa6599b8d50324e37b3d07d07c97ed5fe2537", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -1014,9 +1014,11 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             ty::Array(typ, sz) => ty::Array(typ.try_fold_with(folder)?, sz.try_fold_with(folder)?),\n             ty::Slice(typ) => ty::Slice(typ.try_fold_with(folder)?),\n             ty::Adt(tid, substs) => ty::Adt(tid, substs.try_fold_with(folder)?),\n-            ty::Dynamic(trait_ty, region) => {\n-                ty::Dynamic(trait_ty.try_fold_with(folder)?, region.try_fold_with(folder)?)\n-            }\n+            ty::Dynamic(trait_ty, region, representation) => ty::Dynamic(\n+                trait_ty.try_fold_with(folder)?,\n+                region.try_fold_with(folder)?,\n+                representation,\n+            ),\n             ty::Tuple(ts) => ty::Tuple(ts.try_fold_with(folder)?),\n             ty::FnDef(def_id, substs) => ty::FnDef(def_id, substs.try_fold_with(folder)?),\n             ty::FnPtr(f) => ty::FnPtr(f.try_fold_with(folder)?),\n@@ -1060,7 +1062,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             }\n             ty::Slice(typ) => typ.visit_with(visitor),\n             ty::Adt(_, substs) => substs.visit_with(visitor),\n-            ty::Dynamic(ref trait_ty, ref reg) => {\n+            ty::Dynamic(ref trait_ty, ref reg, _) => {\n                 trait_ty.visit_with(visitor)?;\n                 reg.visit_with(visitor)\n             }"}, {"sha": "a3e11bbf056b358d9c8f0e502e2e1b3f544eaef9", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -152,7 +152,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             ty::Projection(data) => {\n                 stack.extend(data.substs.iter().rev());\n             }\n-            ty::Dynamic(obj, lt) => {\n+            ty::Dynamic(obj, lt, _) => {\n                 stack.push(lt.into());\n                 stack.extend(obj.iter().rev().flat_map(|predicate| {\n                     let (substs, opt_ty) = match predicate.skip_binder() {"}, {"sha": "7621ba571fd47e1c9c71a5c7a8ca7beaa60c6a87", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -627,7 +627,7 @@ fn encode_ty<'tcx>(\n         }\n \n         // Trait types\n-        ty::Dynamic(predicates, region) => {\n+        ty::Dynamic(predicates, region, _repr) => {\n             // u3dynI<element-type1[..element-typeN]>E, where <element-type> is <predicate>, as\n             // vendor extended type.\n             let mut s = String::from(\"u3dynI\");"}, {"sha": "cedc87f5e2bba7f6e1ebf48b55edff6d56073202", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -479,7 +479,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 })?;\n             }\n \n-            ty::Dynamic(predicates, r) => {\n+            ty::Dynamic(predicates, r, _repr) => {\n                 self.push(\"D\");\n                 self = self.print_dyn_existential(predicates)?;\n                 self = r.print(self)?;"}, {"sha": "e11a42201443dbcd623880ef1e129fbbccb4a301", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            if let ty::Dynamic(traits, _) = self_ty.kind() {\n+            if let ty::Dynamic(traits, _, _) = self_ty.kind() {\n                 for t in traits.iter() {\n                     if let ty::ExistentialPredicate::Trait(trait_ref) = t.skip_binder() {\n                         flags.push((sym::_Self, Some(self.tcx.def_path_str(trait_ref.def_id))))"}, {"sha": "e1d548323bf4a217d77f3dfbc65910c7f350235b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -1067,7 +1067,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         object_ty: Ty<'tcx>,\n     ) {\n-        let ty::Dynamic(predicates, _) = object_ty.kind() else { return; };\n+        let ty::Dynamic(predicates, _, _) = object_ty.kind() else { return; };\n         let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n \n         for predicate in predicates.iter() {\n@@ -1365,7 +1365,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let trait_pred = self.resolve_vars_if_possible(trait_pred);\n         let ty = trait_pred.skip_binder().self_ty();\n         let is_object_safe = match ty.kind() {\n-            ty::Dynamic(predicates, _) => {\n+            ty::Dynamic(predicates, _, _) => {\n                 // If the `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n                 predicates\n                     .principal_def_id()\n@@ -1425,7 +1425,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut spans_and_needs_box = vec![];\n \n         match liberated_sig.output().kind() {\n-            ty::Dynamic(predicates, _) => {\n+            ty::Dynamic(predicates, _, _) => {\n                 let cause = ObligationCause::misc(ret_ty.span, fn_hir_id);\n                 let param_env = ty::ParamEnv::empty();\n "}, {"sha": "f31dde044f9d1b48604d0edde078f7539092e295", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -21,6 +21,7 @@ use rustc_middle::ty::abstract_const::{walk_abstract_const, AbstractConst};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{\n     self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    TraitObjectRepresentation,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -600,7 +601,8 @@ fn object_ty_for_trait<'tcx>(\n     let existential_predicates = tcx\n         .mk_poly_existential_predicates(iter::once(trait_predicate).chain(projection_predicates));\n \n-    let object_ty = tcx.mk_dynamic(existential_predicates, lifetime);\n+    let object_ty =\n+        tcx.mk_dynamic(existential_predicates, lifetime, TraitObjectRepresentation::Unsized);\n \n     debug!(\"object_ty_for_trait: object_ty=`{}`\", object_ty);\n "}, {"sha": "158b00e275e6760571df70f9d3dc9b22d1aeb5a2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -784,7 +784,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let upcast_trait_ref;\n         match (source.kind(), target.kind()) {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n-            (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n+            (&ty::Dynamic(ref data_a, r_a, repr_a), &ty::Dynamic(ref data_b, r_b, repr_b))\n+                if repr_a == repr_b =>\n+            {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n@@ -810,7 +812,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_b);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n@@ -888,7 +890,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut nested = vec![];\n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (auto traits and lifetime subtyping).\n-            (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n+            (&ty::Dynamic(ref data_a, r_a, repr_a), &ty::Dynamic(ref data_b, r_b, repr_b))\n+                if repr_a == repr_b =>\n+            {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let iter = data_a\n@@ -907,7 +911,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_b);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n@@ -934,7 +938,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // `T` -> `Trait`\n-            (_, &ty::Dynamic(ref data, r)) => {\n+            (_, &ty::Dynamic(ref data, r, _repr)) => {\n                 let mut object_dids = data.auto_traits().chain(data.principal_def_id());\n                 if let Some(did) = object_dids.find(|did| !tcx.is_object_safe(*did)) {\n                     return Err(TraitNotObjectSafe(did));"}, {"sha": "f95e217da3073997267fd9d936e41c7c8ee5b0b4", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -639,7 +639,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                     }\n                 }\n \n-                ty::Dynamic(data, r) => {\n+                ty::Dynamic(data, r, _) => {\n                     // WfObject\n                     //\n                     // Here, we defer WF checking due to higher-ranked"}, {"sha": "86da6d7bbd1e274e6c220d83f32e4f4baea5af20", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -326,7 +326,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     )),\n                 })\n             }\n-            ty::Dynamic(predicates, region) => chalk_ir::TyKind::Dyn(chalk_ir::DynTy {\n+            ty::Dynamic(predicates, region, _repr) => chalk_ir::TyKind::Dyn(chalk_ir::DynTy {\n                 bounds: predicates.lower_into(interner),\n                 lifetime: region.lower_into(interner),\n             }),"}, {"sha": "9266e4e3f6efba1fc5bea551e4d2612277e828ff", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -389,7 +389,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n \n     let self_ty = trait_ref.self_ty();\n     let self_ty_matches = match self_ty.kind() {\n-        ty::Dynamic(ref data, re) if re.is_static() => data.principal().is_none(),\n+        ty::Dynamic(ref data, re, _) if re.is_static() => data.principal().is_none(),\n         _ => false,\n     };\n "}, {"sha": "b57f32de8ce5c3a47d06ba4b5388601560849e71", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -18,6 +18,27 @@ use self::TyKind::*;\n use rustc_data_structures::stable_hasher::HashStable;\n use rustc_serialize::{Decodable, Decoder, Encodable};\n \n+/// Specifies how a trait object is represented.\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+pub enum TraitObjectRepresentation {\n+    /// An unsized `dyn Trait` object\n+    Unsized,\n+    /// A sized `dyn* Trait` object\n+    Sized,\n+}\n+\n+// Manually implemented because deriving HashStable requires rustc_query_system, which would\n+// create a cyclic dependency.\n+impl<CTX> HashStable<CTX> for TraitObjectRepresentation {\n+    fn hash_stable(\n+        &self,\n+        hcx: &mut CTX,\n+        hasher: &mut rustc_data_structures::stable_hasher::StableHasher,\n+    ) {\n+        std::mem::discriminant(self).hash_stable(hcx, hasher);\n+    }\n+}\n+\n /// Defines the kinds of types used by the type system.\n ///\n /// Types written by the user start out as `hir::TyKind` and get\n@@ -95,7 +116,7 @@ pub enum TyKind<I: Interner> {\n     FnPtr(I::PolyFnSig),\n \n     /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.\n-    Dynamic(I::ListBinderExistentialPredicate, I::Region),\n+    Dynamic(I::ListBinderExistentialPredicate, I::Region, TraitObjectRepresentation),\n \n     /// The anonymous type of a closure. Used to represent the type of `|a| a`.\n     ///\n@@ -218,7 +239,7 @@ const fn tykind_discriminant<I: Interner>(value: &TyKind<I>) -> usize {\n         Ref(_, _, _) => 11,\n         FnDef(_, _) => 12,\n         FnPtr(_) => 13,\n-        Dynamic(_, _) => 14,\n+        Dynamic(..) => 14,\n         Closure(_, _) => 15,\n         Generator(_, _, _) => 16,\n         GeneratorWitness(_) => 17,\n@@ -252,7 +273,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n             FnDef(d, s) => FnDef(d.clone(), s.clone()),\n             FnPtr(s) => FnPtr(s.clone()),\n-            Dynamic(p, r) => Dynamic(p.clone(), r.clone()),\n+            Dynamic(p, r, repr) => Dynamic(p.clone(), r.clone(), repr.clone()),\n             Closure(d, s) => Closure(d.clone(), s.clone()),\n             Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n             GeneratorWitness(g) => GeneratorWitness(g.clone()),\n@@ -297,9 +318,10 @@ impl<I: Interner> PartialEq for TyKind<I> {\n                     __self_0 == __arg_1_0 && __self_1 == __arg_1_1\n                 }\n                 (&FnPtr(ref __self_0), &FnPtr(ref __arg_1_0)) => __self_0 == __arg_1_0,\n-                (&Dynamic(ref __self_0, ref __self_1), &Dynamic(ref __arg_1_0, ref __arg_1_1)) => {\n-                    __self_0 == __arg_1_0 && __self_1 == __arg_1_1\n-                }\n+                (\n+                    &Dynamic(ref __self_0, ref __self_1, ref self_repr),\n+                    &Dynamic(ref __arg_1_0, ref __arg_1_1, ref arg_repr),\n+                ) => __self_0 == __arg_1_0 && __self_1 == __arg_1_1 && self_repr == arg_repr,\n                 (&Closure(ref __self_0, ref __self_1), &Closure(ref __arg_1_0, ref __arg_1_1)) => {\n                     __self_0 == __arg_1_0 && __self_1 == __arg_1_1\n                 }\n@@ -384,12 +406,16 @@ impl<I: Interner> Ord for TyKind<I> {\n                     }\n                 }\n                 (&FnPtr(ref __self_0), &FnPtr(ref __arg_1_0)) => Ord::cmp(__self_0, __arg_1_0),\n-                (&Dynamic(ref __self_0, ref __self_1), &Dynamic(ref __arg_1_0, ref __arg_1_1)) => {\n-                    match Ord::cmp(__self_0, __arg_1_0) {\n-                        Ordering::Equal => Ord::cmp(__self_1, __arg_1_1),\n+                (\n+                    &Dynamic(ref __self_0, ref __self_1, ref self_repr),\n+                    &Dynamic(ref __arg_1_0, ref __arg_1_1, ref arg_repr),\n+                ) => match Ord::cmp(__self_0, __arg_1_0) {\n+                    Ordering::Equal => match Ord::cmp(__self_1, __arg_1_1) {\n+                        Ordering::Equal => Ord::cmp(self_repr, arg_repr),\n                         cmp => cmp,\n-                    }\n-                }\n+                    },\n+                    cmp => cmp,\n+                },\n                 (&Closure(ref __self_0, ref __self_1), &Closure(ref __arg_1_0, ref __arg_1_1)) => {\n                     match Ord::cmp(__self_0, __arg_1_0) {\n                         Ordering::Equal => Ord::cmp(__self_1, __arg_1_1),\n@@ -492,10 +518,11 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n                 hash::Hash::hash(&tykind_discriminant(self), state);\n                 hash::Hash::hash(__self_0, state)\n             }\n-            (&Dynamic(ref __self_0, ref __self_1),) => {\n+            (&Dynamic(ref __self_0, ref __self_1, ref repr),) => {\n                 hash::Hash::hash(&tykind_discriminant(self), state);\n                 hash::Hash::hash(__self_0, state);\n-                hash::Hash::hash(__self_1, state)\n+                hash::Hash::hash(__self_1, state);\n+                hash::Hash::hash(repr, state)\n             }\n             (&Closure(ref __self_0, ref __self_1),) => {\n                 hash::Hash::hash(&tykind_discriminant(self), state);\n@@ -570,7 +597,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n             Ref(f0, f1, f2) => Formatter::debug_tuple_field3_finish(f, \"Ref\", f0, f1, f2),\n             FnDef(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"FnDef\", f0, f1),\n             FnPtr(f0) => Formatter::debug_tuple_field1_finish(f, \"FnPtr\", f0),\n-            Dynamic(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Dynamic\", f0, f1),\n+            Dynamic(f0, f1, f2) => Formatter::debug_tuple_field3_finish(f, \"Dynamic\", f0, f1, f2),\n             Closure(f0, f1) => Formatter::debug_tuple_field2_finish(f, \"Closure\", f0, f1),\n             Generator(f0, f1, f2) => {\n                 Formatter::debug_tuple_field3_finish(f, \"Generator\", f0, f1, f2)\n@@ -659,9 +686,10 @@ where\n             FnPtr(polyfnsig) => e.emit_enum_variant(disc, |e| {\n                 polyfnsig.encode(e);\n             }),\n-            Dynamic(l, r) => e.emit_enum_variant(disc, |e| {\n+            Dynamic(l, r, repr) => e.emit_enum_variant(disc, |e| {\n                 l.encode(e);\n                 r.encode(e);\n+                repr.encode(e);\n             }),\n             Closure(def_id, substs) => e.emit_enum_variant(disc, |e| {\n                 def_id.encode(e);\n@@ -748,7 +776,7 @@ where\n             11 => Ref(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n             12 => FnDef(Decodable::decode(d), Decodable::decode(d)),\n             13 => FnPtr(Decodable::decode(d)),\n-            14 => Dynamic(Decodable::decode(d), Decodable::decode(d)),\n+            14 => Dynamic(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n             15 => Closure(Decodable::decode(d), Decodable::decode(d)),\n             16 => Generator(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n             17 => GeneratorWitness(Decodable::decode(d)),\n@@ -845,9 +873,10 @@ where\n             FnPtr(polyfnsig) => {\n                 polyfnsig.hash_stable(__hcx, __hasher);\n             }\n-            Dynamic(l, r) => {\n+            Dynamic(l, r, repr) => {\n                 l.hash_stable(__hcx, __hasher);\n                 r.hash_stable(__hcx, __hasher);\n+                repr.hash_stable(__hcx, __hasher);\n             }\n             Closure(def_id, substs) => {\n                 def_id.hash_stable(__hcx, __hasher);"}, {"sha": "586ede3d90cd0f3f92565391536104371892cc9e", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -31,6 +31,7 @@ use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{\n     self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n };\n+use rustc_middle::ty::{TraitObjectRepresentation};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -1572,7 +1573,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n         debug!(\"region_bound: {:?}\", region_bound);\n \n-        let ty = tcx.mk_dynamic(existential_predicates, region_bound);\n+        let ty = tcx.mk_dynamic(\n+            existential_predicates,\n+            region_bound,\n+            TraitObjectRepresentation::Unsized, // FIXME: check whether the source syntax was dyn or dyn*\n+        );\n         debug!(\"trait_object_type: {:?}\", ty);\n         ty\n     }"}, {"sha": "7ab6d9e2bab12acebd9a92a4274d5a9a0a68f452", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -527,7 +527,7 @@ fn check_must_not_suspend_ty<'tcx>(\n             }\n             has_emitted\n         }\n-        ty::Dynamic(binder, _) => {\n+        ty::Dynamic(binder, _, _) => {\n             let mut has_emitted = false;\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {"}, {"sha": "2d459b2cc0e32b19ba78c722d803d76b9f934c83", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -537,7 +537,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 bound_spans.push((self.tcx.def_span(def.did()), msg))\n                             }\n                             // Point at the trait object that couldn't satisfy the bound.\n-                            ty::Dynamic(preds, _) => {\n+                            ty::Dynamic(preds, _, _) => {\n                                 for pred in preds.iter() {\n                                     match pred.skip_binder() {\n                                         ty::ExistentialPredicate::Trait(tr) => bound_spans"}, {"sha": "eaf0310d57aeca595c744cf9ee437a31610091c1", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_invariant_substs(current, substs, variance);\n             }\n \n-            ty::Dynamic(data, r) => {\n+            ty::Dynamic(data, r, _) => {\n                 // The type `Foo<T+'a>` is contravariant w/r/t `'a`:\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(current, r, contra);"}, {"sha": "c8875c272bb08cb20d8d3c330d248a5d0fd832e6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c01273a1566bc312ea88225880d35c2259914a6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c01273a1566bc312ea88225880d35c2259914a6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6c01273a1566bc312ea88225880d35c2259914a6", "patch": "@@ -1600,7 +1600,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let path = external_path(cx, did, false, ThinVec::new(), InternalSubsts::empty());\n             Type::Path { path }\n         }\n-        ty::Dynamic(obj, ref reg) => {\n+        ty::Dynamic(obj, ref reg, _) => {\n             // HACK: pick the first `did` as the `did` of the trait object. Someone\n             // might want to implement \"native\" support for marker-trait-only\n             // trait objects."}]}