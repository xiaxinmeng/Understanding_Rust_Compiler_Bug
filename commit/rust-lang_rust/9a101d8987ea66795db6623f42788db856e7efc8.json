{"sha": "9a101d8987ea66795db6623f42788db856e7efc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTAxZDg5ODdlYTY2Nzk1ZGI2NjIzZjQyNzg4ZGI4NTZlN2VmYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-03T11:04:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-03T11:04:01Z"}, "message": "Auto merge of #38059 - arielb1:no-mere-overflow, r=nikomatsakis\n\nevaluate obligations in LIFO order during closure projection\n\nThis is an annoying gotcha with the projection cache's handling of\nnested obligations.\n\nNested projection obligations enter the issue in this case:\n```\nDEBUG:rustc::traits::project: AssociatedTypeNormalizer: depth=3\nnormalized\n<std::iter::Map<std::ops::Range<i32>,\n[closure@not-a-recursion-error.rs:5:30: 5:53]> as\nstd::iter::IntoIterator>::Item to _#7t with 12 add'l obligations\n```\n\nHere the normalization result is the result of the nested impl\n`<[closure@not-a-recursion-error.rs:5:30: 5:53] as FnMut(i32)>::Output`,\nwhich is an additional obligation that is a part of \"add'l obligations\".\n\nBy itself, this is proper behaviour - the additional obligation is\nreturned, and the RFC 447 rules ensure that it is processed before the\noutput `#_7t` is used in any way.\n\nHowever, the projection cache breaks this - it caches the\n`<std::iter::Map<std::ops::Range<i32>,[closure@not-a-recursion-error.rs:5:30:\n5:53]> as std::iter::IntoIterator>::Item = #_7t` resolution. Now\neverybody else that attempts to look up the projection will just get\n`#_7t` *without* any additional obligations. This obviously causes all\nsorts of trouble (here a spurious `EvaluatedToAmbig` results in\nspecializations not being discarded\n[here](https://github.com/rust-lang/rust/blob/9ca50bd4d50b55456e88a8c3ad8fcc9798f57522/src/librustc/traits/select.rs#L1705)).\n\nThe compiler works even with this projection cache gotcha because in most\ncases during \"one-pass evaluation\". we tend to process obligations in LIFO\norder - after an obligation is added to the cache, we process its nested\nobligations before we do anything else (and if we have a cycle, we handle\nit specifically) - which makes sure the inference variables are resolved\nbefore they are used.\n\nThat \"LIFO\" order That was not done when projecting out of a closure, so\nlet's just fix that for the time being.\n\nFixes #38033.\n\nBeta-nominating because regression.\n\nr? @nikomatsakis", "tree": {"sha": "3242f4eba300273a0137b0219e301811d15f7e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3242f4eba300273a0137b0219e301811d15f7e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a101d8987ea66795db6623f42788db856e7efc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a101d8987ea66795db6623f42788db856e7efc8", "html_url": "https://github.com/rust-lang/rust/commit/9a101d8987ea66795db6623f42788db856e7efc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a101d8987ea66795db6623f42788db856e7efc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "url": "https://api.github.com/repos/rust-lang/rust/commits/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "html_url": "https://github.com/rust-lang/rust/commit/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37"}, {"sha": "5c0eb6ecb7ed5a91275582eb245299fd00e74ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0eb6ecb7ed5a91275582eb245299fd00e74ca2", "html_url": "https://github.com/rust-lang/rust/commit/5c0eb6ecb7ed5a91275582eb245299fd00e74ca2"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "173f2a0299d6cdf941715ad74062b22d7c8e9cff", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a101d8987ea66795db6623f42788db856e7efc8/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a101d8987ea66795db6623f42788db856e7efc8/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=9a101d8987ea66795db6623f42788db856e7efc8", "patch": "@@ -1215,8 +1215,8 @@ fn confirm_closure_candidate<'cx, 'gcx, 'tcx>(\n                                obligation,\n                                &closure_type.sig,\n                                util::TupleArgumentsFlag::No)\n-        .with_addl_obligations(obligations)\n         .with_addl_obligations(vtable.nested)\n+        .with_addl_obligations(obligations)\n }\n \n fn confirm_callable_candidate<'cx, 'gcx, 'tcx>("}, {"sha": "50549dc8b23803edb6a4e640a11cb99fd0518f77", "filename": "src/test/run-pass/issue-38033.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9a101d8987ea66795db6623f42788db856e7efc8/src%2Ftest%2Frun-pass%2Fissue-38033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a101d8987ea66795db6623f42788db856e7efc8/src%2Ftest%2Frun-pass%2Fissue-38033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38033.rs?ref=9a101d8987ea66795db6623f42788db856e7efc8", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker;\n+use std::mem;\n+\n+fn main() {\n+    let workers = (0..0).map(|_| result::<u32, ()>());\n+    drop(join_all(workers).poll());\n+}\n+\n+trait Future {\n+    type Item;\n+    type Error;\n+\n+    fn poll(&mut self) -> Result<Self::Item, Self::Error>;\n+}\n+\n+trait IntoFuture {\n+    type Future: Future<Item=Self::Item, Error=Self::Error>;\n+    type Item;\n+    type Error;\n+\n+    fn into_future(self) -> Self::Future;\n+}\n+\n+impl<F: Future> IntoFuture for F {\n+    type Future = F;\n+    type Item = F::Item;\n+    type Error = F::Error;\n+\n+    fn into_future(self) -> F {\n+        self\n+    }\n+}\n+\n+struct FutureResult<T, E> {\n+    _inner: marker::PhantomData<(T, E)>,\n+}\n+\n+fn result<T, E>() -> FutureResult<T, E> {\n+    loop {}\n+}\n+\n+impl<T, E> Future for FutureResult<T, E> {\n+    type Item = T;\n+    type Error = E;\n+\n+    fn poll(&mut self) -> Result<T, E> {\n+        loop {}\n+    }\n+}\n+\n+struct JoinAll<I>\n+    where I: IntoIterator,\n+          I::Item: IntoFuture,\n+{\n+    elems: Vec<<I::Item as IntoFuture>::Item>,\n+}\n+\n+fn join_all<I>(_: I) -> JoinAll<I>\n+    where I: IntoIterator,\n+          I::Item: IntoFuture,\n+{\n+    JoinAll { elems: vec![] }\n+}\n+\n+impl<I> Future for JoinAll<I>\n+    where I: IntoIterator,\n+          I::Item: IntoFuture,\n+{\n+    type Item = Vec<<I::Item as IntoFuture>::Item>;\n+    type Error = <I::Item as IntoFuture>::Error;\n+\n+    fn poll(&mut self) -> Result<Self::Item, Self::Error> {\n+        let elems = mem::replace(&mut self.elems, Vec::new());\n+        Ok(elems.into_iter().map(|e| {\n+            e\n+        }).collect::<Vec<_>>())\n+    }\n+}"}]}