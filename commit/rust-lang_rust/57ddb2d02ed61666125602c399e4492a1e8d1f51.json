{"sha": "57ddb2d02ed61666125602c399e4492a1e8d1f51", "node_id": "C_kwDOAAsO6NoAKDU3ZGRiMmQwMmVkNjE2NjYxMjU2MDJjMzk5ZTQ0OTJhMWU4ZDFmNTE", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-07-05T07:03:06Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-08-26T20:13:33Z"}, "message": "Creating uninitialized integers is UB", "tree": {"sha": "0497f170d1cac38931eaf27ac8d9c8fd7ca6bc6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0497f170d1cac38931eaf27ac8d9c8fd7ca6bc6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ddb2d02ed61666125602c399e4492a1e8d1f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ddb2d02ed61666125602c399e4492a1e8d1f51", "html_url": "https://github.com/rust-lang/rust/commit/57ddb2d02ed61666125602c399e4492a1e8d1f51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ddb2d02ed61666125602c399e4492a1e8d1f51/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e567bcd4f32d413770d464192a2ed6ee636883b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e567bcd4f32d413770d464192a2ed6ee636883b", "html_url": "https://github.com/rust-lang/rust/commit/3e567bcd4f32d413770d464192a2ed6ee636883b"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "2490c07679dd0f60940898a1d806c1ef08714a81", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57ddb2d02ed61666125602c399e4492a1e8d1f51/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ddb2d02ed61666125602c399e4492a1e8d1f51/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=57ddb2d02ed61666125602c399e4492a1e8d1f51", "patch": "@@ -54,9 +54,6 @@ use crate::slice;\n /// // The equivalent code with `MaybeUninit<i32>`:\n /// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n-/// (Notice that the rules around uninitialized integers are not finalized yet, but\n-/// until they are, it is advisable to avoid them.)\n-///\n /// On top of that, remember that most types have additional invariants beyond merely\n /// being considered initialized at the type level. For example, a `1`-initialized [`Vec<T>`]\n /// is considered initialized (under the current implementation; this does not constitute"}, {"sha": "20be406c0e5ac9fea61d82de5d6124ab3a7074e4", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57ddb2d02ed61666125602c399e4492a1e8d1f51/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ddb2d02ed61666125602c399e4492a1e8d1f51/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=57ddb2d02ed61666125602c399e4492a1e8d1f51", "patch": "@@ -665,14 +665,9 @@ pub unsafe fn zeroed<T>() -> T {\n /// correctly: it has the same effect as [`MaybeUninit::uninit().assume_init()`][uninit].\n /// As the [`assume_init` documentation][assume_init] explains,\n /// [the Rust compiler assumes][inv] that values are properly initialized.\n-/// As a consequence, calling e.g. `mem::uninitialized::<bool>()` causes immediate\n-/// undefined behavior for returning a `bool` that is not definitely either `true`\n-/// or `false`. Worse, truly uninitialized memory like what gets returned here\n-/// is special in that the compiler knows that it does not have a fixed value.\n-/// This makes it undefined behavior to have uninitialized data in a variable even\n-/// if that variable has an integer type.\n-/// (Notice that the rules around uninitialized integers are not finalized yet, but\n-/// until they are, it is advisable to avoid them.)\n+///\n+/// Therefore, it is immediate undefined behavior to call this function on nearly all types,\n+/// including integer types and arrays of integer types, and even if the result is unused.\n ///\n /// [uninit]: MaybeUninit::uninit\n /// [assume_init]: MaybeUninit::assume_init"}]}