{"sha": "a835af174cbfb2e480365c948071fc71fa319590", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzVhZjE3NGNiZmIyZTQ4MDM2NWM5NDgwNzFmYzcxZmEzMTk1OTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-25T17:42:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-25T17:42:28Z"}, "message": "Rollup merge of #76932 - fusion-engineering-forks:condvar-promise, r=sfackler\n\nRelax promises about condition variable.\n\nFor quite a while now, there have been plans to at some point use parking_lot or some other more efficient implementation of mutexes and condition variables. Right now, Mutex and CondVar both Box the 'real' mutex/condvar inside, to give it a stable address. This was done because implementations like pthread and Windows critical sections may not be moved. More efficient implementations based on futexes, WaitOnAddress, Windows SRW locks, parking_lot, etc. may be moved (while not borrowed), so wouldn't need boxing.\n\nHowever, not boxing them (which would be great goal to achieve), breaks a promise std currently makes about CondVar. CondVar promises to panic when used with different mutexes, to ensure consistent behaviour on all platforms. To this check, a mutex is considered 'the same' if the address of the 'real mutex' in the Box is the same. This address doesn't change when moving a `std::mutex::Mutex` object, effectively giving it an identity that survives moves of the Mutex object. If we ever switch to a non-boxed version, they no longer carry such an identity, and this check can no longer be made.\n\nFour options:\n1. Always box mutexes.\n2. Add a `MutexId` similar to `ThreadId`. Making mutexes bigger, and making it hard to ever have a `const fn new` for them.\n3. Making the requirement of CondVar stricter: panic if the Mutex object itself moved.\n4. Making the promise of CondVar weaker: don't promise to panic.\n\n1, 2, and 3 seem like bad options. This PR updates the documentation for 4.", "tree": {"sha": "3bf5267c1eace765a5673c5e205e17126d55c948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf5267c1eace765a5673c5e205e17126d55c948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a835af174cbfb2e480365c948071fc71fa319590", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbiwECRBK7hj4Ov3rIwAAdHIIADscFrzb/sEiN4CF3cFf/co5\nOzqIzGxEcNPQhctAe4B+jD5jehinWJurfmxwY5FWM3eZMd1ozizn+wiy5Kq6du72\nFYlUid5LE5dwgwd6F9Q5D3Uf0JZ8T530iMEoQRwHcA7RrqLqhCQcdRIjIbfLJu+5\nVBITGQ79n6ejUmzjT9+x9PMFmGYiDcNwK2BTm0m40m81/jLzUblUHVVP0zQiOrgQ\nerP1WKXoak85wh8Z66z2mvb6ivTrxlDww52wzPc/jaW6ug81EjNAI3Uvd+5I8vOG\n2Qxb2XvWKNHlRw1Gl2oNsn7rdAUDSRD+zi+FB7CT4WfrReFcE08o+Nxtn2GA6Ag=\n=pXIC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bf5267c1eace765a5673c5e205e17126d55c948\nparent 5b9e8864032a3bfefa6f69c33fd99e0383a414af\nparent 26d6081f1d1a2005be87bbe47f6fcda270cfd016\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601055748 +0200\ncommitter GitHub <noreply@github.com> 1601055748 +0200\n\nRollup merge of #76932 - fusion-engineering-forks:condvar-promise, r=sfackler\n\nRelax promises about condition variable.\n\nFor quite a while now, there have been plans to at some point use parking_lot or some other more efficient implementation of mutexes and condition variables. Right now, Mutex and CondVar both Box the 'real' mutex/condvar inside, to give it a stable address. This was done because implementations like pthread and Windows critical sections may not be moved. More efficient implementations based on futexes, WaitOnAddress, Windows SRW locks, parking_lot, etc. may be moved (while not borrowed), so wouldn't need boxing.\n\nHowever, not boxing them (which would be great goal to achieve), breaks a promise std currently makes about CondVar. CondVar promises to panic when used with different mutexes, to ensure consistent behaviour on all platforms. To this check, a mutex is considered 'the same' if the address of the 'real mutex' in the Box is the same. This address doesn't change when moving a `std::mutex::Mutex` object, effectively giving it an identity that survives moves of the Mutex object. If we ever switch to a non-boxed version, they no longer carry such an identity, and this check can no longer be made.\n\nFour options:\n1. Always box mutexes.\n2. Add a `MutexId` similar to `ThreadId`. Making mutexes bigger, and making it hard to ever have a `const fn new` for them.\n3. Making the requirement of CondVar stricter: panic if the Mutex object itself moved.\n4. Making the promise of CondVar weaker: don't promise to panic.\n\n1, 2, and 3 seem like bad options. This PR updates the documentation for 4.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a835af174cbfb2e480365c948071fc71fa319590", "html_url": "https://github.com/rust-lang/rust/commit/a835af174cbfb2e480365c948071fc71fa319590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a835af174cbfb2e480365c948071fc71fa319590/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9e8864032a3bfefa6f69c33fd99e0383a414af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9e8864032a3bfefa6f69c33fd99e0383a414af", "html_url": "https://github.com/rust-lang/rust/commit/5b9e8864032a3bfefa6f69c33fd99e0383a414af"}, {"sha": "26d6081f1d1a2005be87bbe47f6fcda270cfd016", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d6081f1d1a2005be87bbe47f6fcda270cfd016", "html_url": "https://github.com/rust-lang/rust/commit/26d6081f1d1a2005be87bbe47f6fcda270cfd016"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "7e2155dae6fce6ebe2610f012f7c877107ecf398", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a835af174cbfb2e480365c948071fc71fa319590/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a835af174cbfb2e480365c948071fc71fa319590/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=a835af174cbfb2e480365c948071fc71fa319590", "patch": "@@ -78,13 +78,9 @@ impl WaitTimeoutResult {\n /// and a mutex. The predicate is always verified inside of the mutex before\n /// determining that a thread must block.\n ///\n-/// Functions in this module will block the current **thread** of execution and\n-/// are bindings to system-provided condition variables where possible. Note\n-/// that this module places one additional restriction over the system condition\n-/// variables: each condvar can be used with precisely one mutex at runtime. Any\n-/// attempt to use multiple mutexes on the same condition variable will result\n-/// in a runtime panic. If this is not desired, then the unsafe primitives in\n-/// `sys` do not have this restriction but may result in undefined behavior.\n+/// Functions in this module will block the current **thread** of execution.\n+/// Note that any attempt to use multiple mutexes on the same condition\n+/// variable may result in a runtime panic.\n ///\n /// # Examples\n ///\n@@ -159,10 +155,8 @@ impl Condvar {\n     ///\n     /// # Panics\n     ///\n-    /// This function will [`panic!`] if it is used with more than one mutex\n-    /// over time. Each condition variable is dynamically bound to exactly one\n-    /// mutex to ensure defined behavior across platforms. If this functionality\n-    /// is not desired, then unsafe primitives in `sys` are provided.\n+    /// This function may [`panic!`] if it is used with more than one mutex\n+    /// over time.\n     ///\n     /// [`notify_one`]: Self::notify_one\n     /// [`notify_all`]: Self::notify_all"}]}