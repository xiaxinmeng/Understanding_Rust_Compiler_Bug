{"sha": "d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YzZkZmU2ZDYwMjhkYWNjMGRjNTlmNTA5YTgyM2FhZDJkMmNkZjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-16T21:18:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-19T22:19:15Z"}, "message": "Handle resume args in `RequiresStorage` analysis", "tree": {"sha": "496cf1af152cb8e12eb7b577c5114345904c6193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496cf1af152cb8e12eb7b577c5114345904c6193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6", "html_url": "https://github.com/rust-lang/rust/commit/d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3723fc1e45381ed8957b60967c8f7af5ab93e796", "url": "https://api.github.com/repos/rust-lang/rust/commits/3723fc1e45381ed8957b60967c8f7af5ab93e796", "html_url": "https://github.com/rust-lang/rust/commit/3723fc1e45381ed8957b60967c8f7af5ab93e796"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "659b66823c2a0d1bfa7c8b487dc3755761c06dd4", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=d4c6dfe6d6028dacc0dc59f509a823aad2d2cdf6", "patch": "@@ -152,23 +152,58 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         // If a place is borrowed in a terminator, it needs storage for that terminator.\n         self.borrowed_locals.borrow().analysis().terminator_effect(sets, terminator, loc);\n \n-        if let TerminatorKind::Call { destination: Some((place, _)), .. } = terminator.kind {\n-            sets.gen(place.local);\n+        match &terminator.kind {\n+            TerminatorKind::Call { destination: Some((Place { local, .. }, _)), .. }\n+            | TerminatorKind::Yield { resume_arg: Place { local, .. }, .. } => {\n+                sets.gen(*local);\n+            }\n+\n+            // Nothing to do for these. Match exhaustively so this fails to compile when new\n+            // variants are added.\n+            TerminatorKind::Call { destination: None, .. }\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::Drop { .. }\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable => {}\n         }\n     }\n \n     fn terminator_effect(&self, sets: &mut GenKillSet<Local>, loc: Location) {\n-        // For call terminators the destination requires storage for the call\n-        // and after the call returns successfully, but not after a panic.\n-        // Since `propagate_call_unwind` doesn't exist, we have to kill the\n-        // destination here, and then gen it again in `propagate_call_return`.\n-        if let TerminatorKind::Call { destination: Some((ref place, _)), .. } =\n-            self.body[loc.block].terminator().kind\n-        {\n-            if let Some(local) = place.as_local() {\n-                sets.kill(local);\n+        match &self.body[loc.block].terminator().kind {\n+            // For call terminators the destination requires storage for the call\n+            // and after the call returns successfully, but not after a panic.\n+            // Since `propagate_call_unwind` doesn't exist, we have to kill the\n+            // destination here, and then gen it again in `propagate_call_return`.\n+            TerminatorKind::Call { destination: Some((Place { local, .. }, _)), .. } => {\n+                sets.kill(*local);\n             }\n+\n+            // Nothing to do for these. Match exhaustively so this fails to compile when new\n+            // variants are added.\n+            TerminatorKind::Call { destination: None, .. }\n+            | TerminatorKind::Yield { .. }\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::Drop { .. }\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable => {}\n         }\n+\n         self.check_for_move(sets, loc);\n     }\n "}]}