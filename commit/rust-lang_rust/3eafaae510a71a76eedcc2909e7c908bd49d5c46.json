{"sha": "3eafaae510a71a76eedcc2909e7c908bd49d5c46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYWZhYWU1MTBhNzFhNzZlZWRjYzI5MDllN2M5MDhiZDQ5ZDVjNDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-30T00:05:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "syntax: Make def-site span mandatory in ExpnInfo/MacroBacktrace/DiagnosticSpanMacroExpansion\n\nWe have to deal with dummy spans anyway\n\nRemove def-site span from expander interfaces.\nIt's not used by the expansion infra, only by specific expanders, which can keep it themselves if they want it.", "tree": {"sha": "b89b90b3deee39b7d8483a15cbf967d8954c27f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89b90b3deee39b7d8483a15cbf967d8954c27f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eafaae510a71a76eedcc2909e7c908bd49d5c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eafaae510a71a76eedcc2909e7c908bd49d5c46", "html_url": "https://github.com/rust-lang/rust/commit/3eafaae510a71a76eedcc2909e7c908bd49d5c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eafaae510a71a76eedcc2909e7c908bd49d5c46/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a138e9d625bf83c45d3835b12d7689b730dc4e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a138e9d625bf83c45d3835b12d7689b730dc4e9a", "html_url": "https://github.com/rust-lang/rust/commit/a138e9d625bf83c45d3835b12d7689b730dc4e9a"}], "stats": {"total": 138, "additions": 61, "deletions": 77}, "files": [{"sha": "c44fd30be850a991af358c45de4d1a8124969347", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -877,7 +877,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> Span {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo {\n-            def_site: Some(span),\n+            def_site: span,\n             allow_internal_unstable,\n             ..ExpnInfo::default(ExpnKind::Desugaring(reason), span, self.sess.edition())\n         });"}, {"sha": "9876d6c1fa59b2943a69f9821bc5011b72fa9e6f", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -888,13 +888,11 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n         ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n         ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::MacroBang(..) => {\n-            let def_site = match info.def_site {\n-                Some(span) => span,\n-                // no span for the def_site means it's an external macro\n-                None => return true,\n-            };\n-\n-            match sess.source_map().span_to_snippet(def_site) {\n+            if info.def_site.is_dummy() {\n+                // dummy span for the def_site means it's an external macro\n+                return true;\n+            }\n+            match sess.source_map().span_to_snippet(info.def_site) {\n                 Ok(code) => !code.starts_with(\"macro_rules\"),\n                 // no snippet = external macro or compiler-builtin expansion\n                 Err(_) => true,"}, {"sha": "a7dfbd688c14e037a12af4d201325930f7a9b2a6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -61,12 +61,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // We want to ignore desugarings here: spans are equivalent even\n             // if one is the result of a desugaring and the other is not.\n             let mut span = error.obligation.cause.span;\n-            if let Some(ExpnInfo {\n-                kind: ExpnKind::Desugaring(_),\n-                def_site: Some(def_span),\n-                ..\n-            }) = span.ctxt().outer_expn_info() {\n-                span = def_span;\n+            if let Some(ExpnInfo { kind: ExpnKind::Desugaring(_), def_site, .. })\n+                    = span.ctxt().outer_expn_info() {\n+                span = def_site;\n             }\n \n             error_map.entry(span).or_default().push("}, {"sha": "361b5cd9357125731da3fa9c75b42713ad511054", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -723,39 +723,37 @@ impl EmitterWriter {\n                 for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n                     // Only show macro locations that are local\n                     // and display them like a span_note\n-                    if let Some(def_site) = trace.def_site_span {\n-                        if def_site.is_dummy() {\n-                            continue;\n-                        }\n-                        if always_backtrace {\n-                            new_labels.push((def_site,\n-                                             format!(\"in this expansion of `{}`{}\",\n-                                                     trace.macro_decl_name,\n-                                                     if backtrace_len > 2 {\n-                                                         // if backtrace_len == 1 it'll be pointed\n-                                                         // at by \"in this macro invocation\"\n-                                                         format!(\" (#{})\", i + 1)\n-                                                     } else {\n-                                                         String::new()\n-                                                     })));\n-                        }\n-                        // Check to make sure we're not in any <*macros>\n-                        if !sm.span_to_filename(def_site).is_macros() &&\n-                           !trace.macro_decl_name.starts_with(\"desugaring of \") &&\n-                           !trace.macro_decl_name.starts_with(\"#[\") ||\n-                           always_backtrace {\n-                            new_labels.push((trace.call_site,\n-                                             format!(\"in this macro invocation{}\",\n-                                                     if backtrace_len > 2 && always_backtrace {\n-                                                         // only specify order when the macro\n-                                                         // backtrace is multiple levels deep\n-                                                         format!(\" (#{})\", i + 1)\n-                                                     } else {\n-                                                         String::new()\n-                                                     })));\n-                            if !always_backtrace {\n-                                break;\n-                            }\n+                    if trace.def_site_span.is_dummy() {\n+                        continue;\n+                    }\n+                    if always_backtrace {\n+                        new_labels.push((trace.def_site_span,\n+                                            format!(\"in this expansion of `{}`{}\",\n+                                                    trace.macro_decl_name,\n+                                                    if backtrace_len > 2 {\n+                                                        // if backtrace_len == 1 it'll be pointed\n+                                                        // at by \"in this macro invocation\"\n+                                                        format!(\" (#{})\", i + 1)\n+                                                    } else {\n+                                                        String::new()\n+                                                    })));\n+                    }\n+                    // Check to make sure we're not in any <*macros>\n+                    if !sm.span_to_filename(trace.def_site_span).is_macros() &&\n+                        !trace.macro_decl_name.starts_with(\"desugaring of \") &&\n+                        !trace.macro_decl_name.starts_with(\"#[\") ||\n+                        always_backtrace {\n+                        new_labels.push((trace.call_site,\n+                                            format!(\"in this macro invocation{}\",\n+                                                    if backtrace_len > 2 && always_backtrace {\n+                                                        // only specify order when the macro\n+                                                        // backtrace is multiple levels deep\n+                                                        format!(\" (#{})\", i + 1)\n+                                                    } else {\n+                                                        String::new()\n+                                                    })));\n+                        if !always_backtrace {\n+                            break;\n                         }\n                     }\n                 }"}, {"sha": "aeaee1887b95b5b2192c6f5cafce8883a49216b7", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -841,7 +841,6 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callsite = span.source_callsite();\n         let callsite_span = self.span_from_span(callsite);\n         let callee = span.source_callee()?;\n-        let callee_span = callee.def_site?;\n \n         // Ignore attribute macros, their spans are usually mangled\n         if let ExpnKind::MacroAttribute(_) = callee.kind {\n@@ -855,7 +854,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             .sess\n             .imported_macro_spans\n             .borrow()\n-            .get(&callee_span)\n+            .get(&callee.def_site)\n         {\n             let &(ref mac_name, mac_span) = mac;\n             let mac_span = self.span_from_span(mac_span);\n@@ -866,7 +865,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             });\n         }\n \n-        let callee_span = self.span_from_span(callee_span);\n+        let callee_span = self.span_from_span(callee.def_site);\n         Some(MacroRef {\n             span: callsite_span,\n             qualname: callee.kind.descr().to_string(), // FIXME: generate the real qualname"}, {"sha": "2f8d6f00ba79262487b411c1e248f1932d2c49d1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -219,7 +219,6 @@ pub trait TTMacroExpander {\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n         input: TokenStream,\n-        def_span: Option<Span>,\n     ) -> Box<dyn MacResult+'cx>;\n }\n \n@@ -236,7 +235,6 @@ impl<F> TTMacroExpander for F\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n         input: TokenStream,\n-        _def_span: Option<Span>,\n     ) -> Box<dyn MacResult+'cx> {\n         struct AvoidInterpolatedIdents;\n \n@@ -654,7 +652,7 @@ impl SyntaxExtension {\n         ExpnInfo {\n             call_site,\n             kind: self.expn_kind(Symbol::intern(descr)),\n-            def_site: Some(self.span),\n+            def_site: self.span,\n             default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),\n             allow_internal_unsafe: self.allow_internal_unsafe,"}, {"sha": "06ff2bc655cf5ea5d9a2a2471e50b3d41e073990", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -673,7 +673,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 result\n             }\n             SyntaxExtensionKind::LegacyBang(expander) => {\n-                let tok_result = expander.expand(self.cx, span, mac.node.stream(), Some(ext.span));\n+                let tok_result = expander.expand(self.cx, span, mac.node.stream());\n                 kind.make_from(tok_result)\n             }\n "}, {"sha": "5c6438a7ef5343e0e8ff91cbb51ea8b926ffd1cf", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -88,6 +88,7 @@ impl<'a> ParserAnyMacro<'a> {\n \n struct MacroRulesMacroExpander {\n     name: ast::Ident,\n+    span: Span,\n     lhses: Vec<quoted::TokenTree>,\n     rhses: Vec<quoted::TokenTree>,\n     valid: bool,\n@@ -99,12 +100,11 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n         cx: &'cx mut ExtCtxt<'_>,\n         sp: Span,\n         input: TokenStream,\n-        def_span: Option<Span>,\n     ) -> Box<dyn MacResult + 'cx> {\n         if !self.valid {\n             return DummyResult::any(sp);\n         }\n-        generic_extension(cx, sp, def_span, self.name, input, &self.lhses, &self.rhses)\n+        generic_extension(cx, sp, self.span, self.name, input, &self.lhses, &self.rhses)\n     }\n }\n \n@@ -117,7 +117,7 @@ fn trace_macros_note(cx: &mut ExtCtxt<'_>, sp: Span, message: String) {\n fn generic_extension<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    def_span: Option<Span>,\n+    def_span: Span,\n     name: ast::Ident,\n     arg: TokenStream,\n     lhses: &[quoted::TokenTree],\n@@ -199,10 +199,8 @@ fn generic_extension<'cx>(\n     let span = token.span.substitute_dummy(sp);\n     let mut err = cx.struct_span_err(span, &parse_failure_msg(&token));\n     err.span_label(span, label);\n-    if let Some(sp) = def_span {\n-        if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n-            err.span_label(cx.source_map().def_span(sp), \"when calling this macro\");\n-        }\n+    if !def_span.is_dummy() && cx.source_map().span_to_filename(def_span).is_real() {\n+        err.span_label(cx.source_map().def_span(def_span), \"when calling this macro\");\n     }\n \n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n@@ -377,7 +375,7 @@ pub fn compile(\n     }\n \n     let expander: Box<_> =\n-        Box::new(MacroRulesMacroExpander { name: def.ident, lhses, rhses, valid });\n+        Box::new(MacroRulesMacroExpander { name: def.ident, span: def.span, lhses, rhses, valid });\n \n     let (default_transparency, transparency_error) =\n         attr::find_transparency(&def.attrs, body.legacy);"}, {"sha": "ec0222d90eb7a2430cc71fdd284b6f0f88806f0e", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -170,7 +170,7 @@ struct DiagnosticSpanMacroExpansion {\n     macro_decl_name: String,\n \n     /// span where macro was defined (if known)\n-    def_site_span: Option<DiagnosticSpan>,\n+    def_site_span: DiagnosticSpan,\n }\n \n #[derive(RustcEncodable)]\n@@ -300,14 +300,13 @@ impl DiagnosticSpan {\n                                      None,\n                                      backtrace,\n                                      je);\n-            let def_site_span = bt.def_site_span.map(|sp| {\n-                Self::from_span_full(sp,\n+            let def_site_span =\n+                Self::from_span_full(bt.def_site_span,\n                                      false,\n                                      None,\n                                      None,\n                                      vec![].into_iter(),\n-                                     je)\n-            });\n+                                     je);\n             Box::new(DiagnosticSpanMacroExpansion {\n                 span: call_site,\n                 macro_decl_name: bt.macro_decl_name,"}, {"sha": "63b692ccdcb933e469284021ede52636d37ad0c6", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -26,7 +26,7 @@\n // trigger runtime aborts. (Fortunately these are obvious and easy to fix.)\n \n use crate::GLOBALS;\n-use crate::Span;\n+use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n use crate::symbol::{kw, Symbol};\n \n@@ -632,11 +632,9 @@ pub struct ExpnInfo {\n \n     // --- The part specific to the macro/desugaring definition.\n     // --- FIXME: Share it between expansions with the same definition.\n-    /// The span of the macro definition itself. The macro may not\n-    /// have a sensible definition span (e.g., something defined\n-    /// completely inside libsyntax) in which case this is None.\n+    /// The span of the macro definition (possibly dummy).\n     /// This span serves only informational purpose and is not used for resolution.\n-    pub def_site: Option<Span>,\n+    pub def_site: Span,\n     /// Transparency used by `apply_mark` for mark with this expansion info by default.\n     pub default_transparency: Transparency,\n     /// List of #[unstable]/feature-gated features that the macro is allowed to use\n@@ -659,7 +657,7 @@ impl ExpnInfo {\n         ExpnInfo {\n             call_site,\n             kind,\n-            def_site: None,\n+            def_site: DUMMY_SP,\n             default_transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,"}, {"sha": "1369fca3b4a5e002cc15b75aa1ad489b3a541ed7", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -1363,8 +1363,8 @@ pub struct MacroBacktrace {\n     /// name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")\n     pub macro_decl_name: String,\n \n-    /// span where macro was defined (if known)\n-    pub def_site_span: Option<Span>,\n+    /// span where macro was defined (possibly dummy)\n+    pub def_site_span: Span,\n }\n \n // _____________________________________________________________________________"}, {"sha": "36cee82893a06066e2440f0eddad40eb8f5fdef6", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin-args.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eafaae510a71a76eedcc2909e7c908bd49d5c46/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs?ref=3eafaae510a71a76eedcc2909e7c908bd49d5c46", "patch": "@@ -28,8 +28,7 @@ impl TTMacroExpander for Expander {\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    sp: Span,\n-                   _: TokenStream,\n-                   _: Option<Span>) -> Box<dyn MacResult+'cx> {\n+                   _: TokenStream) -> Box<dyn MacResult+'cx> {\n         let args = self.args.iter().map(|i| pprust::meta_list_item_to_string(i))\n             .collect::<Vec<_>>().join(\", \");\n         MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))"}]}