{"sha": "9b312737c063a679c38c97ceb484a3a13a96ee75", "node_id": "C_kwDOAAsO6NoAKDliMzEyNzM3YzA2M2E2NzljMzhjOTdjZWI0ODRhM2ExM2E5NmVlNzU", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2022-12-12T11:07:44Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2022-12-14T06:52:13Z"}, "message": "Don't perform invalid checks in `codegen_attrs`\n\nSome attributes are only valid on function items. When checking these\nattributes, codegen_attrs previously sometimes called `fn_sig` on the\nitem they were attached to without first ensuring that the item was a\nfunction. This led to an ICE (#105594), since `fn_sig` can\nonly be called on functions.\n\nAfter this change, we skip calling `fn_sig` if the item the attribute is\nattached to must be a function but invalidly isn't, because `check_attr`\nwill reject such cases without codegen_attrs's intervention.", "tree": {"sha": "d65b231dfd76b0ac7a12bc1fea9284f61e7e9568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d65b231dfd76b0ac7a12bc1fea9284f61e7e9568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b312737c063a679c38c97ceb484a3a13a96ee75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b312737c063a679c38c97ceb484a3a13a96ee75", "html_url": "https://github.com/rust-lang/rust/commit/9b312737c063a679c38c97ceb484a3a13a96ee75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b312737c063a679c38c97ceb484a3a13a96ee75/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918d0ac38e8c3bcf4fb5ee2241fb14979c73c312", "url": "https://api.github.com/repos/rust-lang/rust/commits/918d0ac38e8c3bcf4fb5ee2241fb14979c73c312", "html_url": "https://github.com/rust-lang/rust/commit/918d0ac38e8c3bcf4fb5ee2241fb14979c73c312"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "f5af9b2026c27493392dd692ba4d8df195db8981", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b312737c063a679c38c97ceb484a3a13a96ee75/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b312737c063a679c38c97ceb484a3a13a96ee75/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=9b312737c063a679c38c97ceb484a3a13a96ee75", "patch": "@@ -2,6 +2,7 @@ use rustc_ast::{ast, MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::{lang_items, weak_lang_items::WEAK_LANG_ITEMS, LangItem};\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -60,6 +61,21 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n \n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n+    // In some cases, attribute are only valid on functions, but it's the `check_attr`\n+    // pass that check that they aren't used anywhere else, rather this module.\n+    // In these cases, we bail from performing further checks that are only meaningful for\n+    // functions (such as calling `fn_sig`, which ICEs if given a non-function). We also\n+    // report a delayed bug, just in case `check_attr` isn't doing its job.\n+    let validate_fn_only_attr = |attr_sp| -> bool {\n+        let def_kind = tcx.def_kind(did);\n+        if let DefKind::Fn | DefKind::AssocFn = def_kind {\n+            true\n+        } else {\n+            tcx.sess.delay_span_bug(attr_sp, \"this attribute can only be applied to functions\");\n+            false\n+        }\n+    };\n+\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n@@ -197,7 +213,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                 }\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n-            if !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. }) {\n+            if validate_fn_only_attr(attr.span)\n+                && !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. })\n+            {\n                 struct_span_err!(\n                     tcx.sess,\n                     attr.span,\n@@ -214,7 +232,10 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.has_name(sym::track_caller) {\n-            if !tcx.is_closure(did.to_def_id()) && tcx.fn_sig(did).abi() != abi::Abi::Rust {\n+            if !tcx.is_closure(did.to_def_id())\n+                && validate_fn_only_attr(attr.span)\n+                && tcx.fn_sig(did).abi() != abi::Abi::Rust\n+            {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n             }"}]}