{"sha": "563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "node_id": "C_kwDOAAsO6NoAKDU2M2FhMTJhMjJhNTNkMjc3YmZiNDkwODNjMWE0ZmUwYjhiODI4NmM", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-10T20:37:52Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-10T20:42:28Z"}, "message": "Do not panic in Termination impl on closed stderr\n\nRepro:\n\n    #![feature(backtrace)]\n\n    use std::backtrace::Backtrace;\n    use std::io::{self, Write as _};\n    use std::panic::{self, PanicInfo};\n\n    #[derive(Debug)]\n    pub struct Error;\n\n    fn panic_hook(panic_info: &PanicInfo) {\n        let backtrace = Backtrace::force_capture();\n        let _ = write!(io::stdout(), \"{}\\n{}\", panic_info, backtrace);\n    }\n\n    fn main() -> Result<(), Error> {\n        panic::set_hook(Box::new(panic_hook));\n        let stderr = io::stderr();\n        let mut stderr = stderr.lock();\n        while stderr.write_all(b\".\\n\").is_ok() {}\n        Err(Error)\n    }\n\nBefore:\n\n    $ RUST_BACKTRACE=1 target/debug/testing 3>&2 2>&1 1>&3 | head\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    panicked at 'failed printing to stderr: Broken pipe (os error 32)', library/std/src/io/stdio.rs:1016:9\n       0: testing::panic_hook\n                 at ./src/main.rs:11:21\n       1: core::ops::function::Fn::call\n                 at /git/rust/library/core/src/ops/function.rs:77:5\n       2: std::panicking::rust_panic_with_hook\n       3: std::panicking::begin_panic_handler::{{closure}}\n       4: std::sys_common::backtrace::__rust_end_short_backtrace\n       5: rust_begin_unwind\n       6: core::panicking::panic_fmt\n       7: std::io::stdio::_eprint\n       8: <core::result::Result<!,E> as std::process::Termination>::report\n                 at /git/rust/library/std/src/process.rs:2164:9\n       9: <core::result::Result<(),E> as std::process::Termination>::report\n                 at /git/rust/library/std/src/process.rs:2148:25\n      10: std::rt::lang_start::{{closure}}\n                 at /git/rust/library/std/src/rt.rs:145:18\n      11: std::rt::lang_start_internal\n      12: std::rt::lang_start\n                 at /git/rust/library/std/src/rt.rs:144:17\n      13: main\n      14: __libc_start_main\n                 at /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\n      15: _start\n\nAfter:\n\n    $ RUST_BACKTRACE=1 target/debug/testing 3>&2 2>&1 1>&3 | head\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .", "tree": {"sha": "81a0600540bbb2cbb7a669638450b2d4e9dba664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a0600540bbb2cbb7a669638450b2d4e9dba664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKjrV4ACgkQ+boUO5X/\nbYIxrQ//ZmHdOxWla09H1WWau/L2ql3F+O62+fvytadgCWvwS+q/Pi0nvC6AvQna\nNg9+kd1UHFy/Hx4n7loV5j2YZUMhQXwzUpiWoC6tSZOJBcYy6f4OUoWw5tRmry4/\nh3G12xrqa07Ne7/PJvWDNsUiocySNzAabH0sGtTzVZnJ7m7+P/F4fnqRw5kJSStS\nGf+wygslZ4NUVwWxpCW4YsKIUoyTU4wZ3LsQL/jCWZFYkbhvM+UuinYPb9EOS/ju\njiC3L+Z8bcjp+7zqKa2GqsJkAbruY3g+BDzTWM+6ZVjjbh2tLMcED8G3GabmKMmx\nWFMiSIS6HX/puTl2+58Pe5LhPS/Tyk8gBI1YApXhtSgdvv4mev2qnc0XoDMmiPDo\nLm4AaUZ6lPD/2g4tGJJdVYJDT/KweRj8xo1r8bmf19xw8nlRblmnOMC9d9a5nPlY\n5OVe+HDbjXahio98cYJEukgr10rkkPUrnk95GxpvwYBWJj5X/xgsH/KhHQoTWhV7\n1QEsBWq8OMVmVFih4/0pjIH3dq9mObK76pXNTmzxRchRjO1zDLYM11zek0XRIRUJ\n1VA9jaFSN15ORRsNKH6v34gvAbphCRt2CKAQqOD5xSU1agMIYhL32l2JOpefPFsF\n4TKNiVU5kt1rhmw9Lrv3RLRFb0dY481dIoEinAY9B3Wa86s8gvk=\n=o5wl\n-----END PGP SIGNATURE-----", "payload": "tree 81a0600540bbb2cbb7a669638450b2d4e9dba664\nparent ec55c61305eaf385fc1b93ac9a78284b4d887fe5\nauthor David Tolnay <dtolnay@gmail.com> 1654893472 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1654893748 -0700\n\nDo not panic in Termination impl on closed stderr\n\nRepro:\n\n    #![feature(backtrace)]\n\n    use std::backtrace::Backtrace;\n    use std::io::{self, Write as _};\n    use std::panic::{self, PanicInfo};\n\n    #[derive(Debug)]\n    pub struct Error;\n\n    fn panic_hook(panic_info: &PanicInfo) {\n        let backtrace = Backtrace::force_capture();\n        let _ = write!(io::stdout(), \"{}\\n{}\", panic_info, backtrace);\n    }\n\n    fn main() -> Result<(), Error> {\n        panic::set_hook(Box::new(panic_hook));\n        let stderr = io::stderr();\n        let mut stderr = stderr.lock();\n        while stderr.write_all(b\".\\n\").is_ok() {}\n        Err(Error)\n    }\n\nBefore:\n\n    $ RUST_BACKTRACE=1 target/debug/testing 3>&2 2>&1 1>&3 | head\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    panicked at 'failed printing to stderr: Broken pipe (os error 32)', library/std/src/io/stdio.rs:1016:9\n       0: testing::panic_hook\n                 at ./src/main.rs:11:21\n       1: core::ops::function::Fn::call\n                 at /git/rust/library/core/src/ops/function.rs:77:5\n       2: std::panicking::rust_panic_with_hook\n       3: std::panicking::begin_panic_handler::{{closure}}\n       4: std::sys_common::backtrace::__rust_end_short_backtrace\n       5: rust_begin_unwind\n       6: core::panicking::panic_fmt\n       7: std::io::stdio::_eprint\n       8: <core::result::Result<!,E> as std::process::Termination>::report\n                 at /git/rust/library/std/src/process.rs:2164:9\n       9: <core::result::Result<(),E> as std::process::Termination>::report\n                 at /git/rust/library/std/src/process.rs:2148:25\n      10: std::rt::lang_start::{{closure}}\n                 at /git/rust/library/std/src/rt.rs:145:18\n      11: std::rt::lang_start_internal\n      12: std::rt::lang_start\n                 at /git/rust/library/std/src/rt.rs:144:17\n      13: main\n      14: __libc_start_main\n                 at /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\n      15: _start\n\nAfter:\n\n    $ RUST_BACKTRACE=1 target/debug/testing 3>&2 2>&1 1>&3 | head\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n    .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "html_url": "https://github.com/rust-lang/rust/commit/563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563aa12a22a53d277bfb49083c1a4fe0b8b8286c/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec55c61305eaf385fc1b93ac9a78284b4d887fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec55c61305eaf385fc1b93ac9a78284b4d887fe5", "html_url": "https://github.com/rust-lang/rust/commit/ec55c61305eaf385fc1b93ac9a78284b4d887fe5"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "c9595a96567fa9fca3348e95acbebb39c081005d", "filename": "library/std/src/process.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/563aa12a22a53d277bfb49083c1a4fe0b8b8286c/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563aa12a22a53d277bfb49083c1a4fe0b8b8286c/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=563aa12a22a53d277bfb49083c1a4fe0b8b8286c", "patch": "@@ -2161,7 +2161,9 @@ impl Termination for ! {\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n-        eprintln!(\"Error: {err:?}\");\n+        // Ignore error if the write fails, for example because stderr is\n+        // already closed. There is not much point panicking at this point.\n+        let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n         ExitCode::FAILURE\n     }\n }"}]}