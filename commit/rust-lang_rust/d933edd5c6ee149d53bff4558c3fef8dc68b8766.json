{"sha": "d933edd5c6ee149d53bff4558c3fef8dc68b8766", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzNlZGQ1YzZlZTE0OWQ1M2JmZjQ1NThjM2ZlZjhkYzY4Yjg3NjY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-21T20:15:20Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-22T15:25:42Z"}, "message": "Revert \"Revert \"Don't load all extern crates unconditionally\"\"\n\nThis reverts commit 5f0c54db4e595a6a77048f2b0605138ffa49a326.", "tree": {"sha": "6c00dcddb393ecf909b0c0f670eef04905447e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c00dcddb393ecf909b0c0f670eef04905447e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d933edd5c6ee149d53bff4558c3fef8dc68b8766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d933edd5c6ee149d53bff4558c3fef8dc68b8766", "html_url": "https://github.com/rust-lang/rust/commit/d933edd5c6ee149d53bff4558c3fef8dc68b8766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d933edd5c6ee149d53bff4558c3fef8dc68b8766/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b73e81b351d036449e76ad753160853625c5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b73e81b351d036449e76ad753160853625c5b6", "html_url": "https://github.com/rust-lang/rust/commit/99b73e81b351d036449e76ad753160853625c5b6"}], "stats": {"total": 141, "additions": 100, "deletions": 41}, "files": [{"sha": "249febb72bc51802d1a8c369fc548e51741b84c7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -1,12 +1,12 @@\n+use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_driver::abort_on_err;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n-use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::HirId;\n use rustc_hir::{\n     intravisit::{self, NestedVisitorMap, Visitor},\n@@ -23,7 +23,7 @@ use rustc_session::DiagnosticOutput;\n use rustc_session::Session;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::cell::RefCell;\n use std::mem;\n@@ -301,41 +301,16 @@ crate fn create_config(\n }\n \n crate fn create_resolver<'a>(\n-    externs: config::Externs,\n     queries: &Queries<'a>,\n     sess: &Session,\n ) -> Rc<RefCell<interface::BoxedResolver>> {\n-    let extern_names: Vec<String> = externs\n-        .iter()\n-        .filter(|(_, entry)| entry.add_prelude)\n-        .map(|(name, _)| name)\n-        .cloned()\n-        .collect();\n-\n-    let (_, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n-\n-    // Before we actually clone it, let's force all the extern'd crates to\n-    // actually be loaded, just in case they're only referred to inside\n-    // intra-doc links\n-    resolver.borrow_mut().access(|resolver| {\n-        sess.time(\"load_extern_crates\", || {\n-            for extern_name in &extern_names {\n-                debug!(\"loading extern crate {}\", extern_name);\n-                if let Err(()) = resolver\n-                    .resolve_str_path_error(\n-                        DUMMY_SP,\n-                        extern_name,\n-                        TypeNS,\n-                        LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n-                  ) {\n-                    warn!(\"unable to resolve external crate {} (do you have an unused `--extern` crate?)\", extern_name)\n-                  }\n-            }\n-        });\n-    });\n+    let (krate, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n+    let resolver = resolver.clone();\n+\n+    let mut loader = crate::passes::collect_intra_doc_links::IntraLinkCrateLoader::new(resolver);\n+    ast::visit::walk_crate(&mut loader, krate);\n \n-    // Now we're good to clone the resolver because everything should be loaded\n-    resolver.clone()\n+    loader.resolver\n }\n \n crate fn run_global_ctxt("}, {"sha": "40b1f243a05ca17072774de24a49dba62b403067", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -30,6 +30,7 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate rustc_ast;\n+extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;\n@@ -724,7 +725,6 @@ fn main_options(options: config::Options) -> MainResult {\n     let default_passes = options.default_passes;\n     let output_format = options.output_format;\n     // FIXME: fix this clone (especially render_options)\n-    let externs = options.externs.clone();\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n     let config = core::create_config(options);\n@@ -742,7 +742,7 @@ fn main_options(options: config::Options) -> MainResult {\n             // We need to hold on to the complete resolver, so we cause everything to be\n             // cloned for the analysis passes to use. Suboptimal, but necessary in the\n             // current architecture.\n-            let resolver = core::create_resolver(externs, queries, &sess);\n+            let resolver = core::create_resolver(queries, &sess);\n \n             if sess.has_errors() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");"}, {"sha": "b909f6b269544478de78c6e807ec7ec49a8d235a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -37,6 +37,9 @@ use crate::html::markdown::{markdown_links, MarkdownLink};\n use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n \n+mod early;\n+crate use early::IntraLinkCrateLoader;\n+\n crate const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n     name: \"collect-intra-doc-links\",\n     run: collect_intra_doc_links,"}, {"sha": "7cba2523d1a3b938e45b20671e9976e9ac976ec4", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -0,0 +1,63 @@\n+use rustc_ast as ast;\n+use rustc_hir::def::Namespace::TypeNS;\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_interface::interface;\n+\n+use std::cell::RefCell;\n+use std::mem;\n+use std::rc::Rc;\n+\n+// Letting the resolver escape at the end of the function leads to inconsistencies between the\n+// crates the TyCtxt sees and the resolver sees (because the resolver could load more crates\n+// after escaping). Hopefully `IntraLinkCrateLoader` gets all the crates we need ...\n+crate struct IntraLinkCrateLoader {\n+    current_mod: DefId,\n+    crate resolver: Rc<RefCell<interface::BoxedResolver>>,\n+}\n+\n+impl IntraLinkCrateLoader {\n+    crate fn new(resolver: Rc<RefCell<interface::BoxedResolver>>) -> Self {\n+        let crate_id = LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id();\n+        Self { current_mod: crate_id, resolver }\n+    }\n+}\n+\n+impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n+    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        use crate::html::markdown::markdown_links;\n+        use crate::passes::collect_intra_doc_links::preprocess_link;\n+\n+        if let Some(doc) = attr.doc_str() {\n+            for link in markdown_links(&doc.as_str()) {\n+                let path_str = if let Some(Ok(x)) = preprocess_link(&link) {\n+                    x.path_str\n+                } else {\n+                    continue;\n+                };\n+                self.resolver.borrow_mut().access(|resolver| {\n+                    let _ = resolver.resolve_str_path_error(\n+                        attr.span,\n+                        &path_str,\n+                        TypeNS,\n+                        self.current_mod,\n+                    );\n+                });\n+            }\n+        }\n+        ast::visit::walk_attribute(self, attr);\n+    }\n+\n+    fn visit_item(&mut self, item: &ast::Item) {\n+        use rustc_ast_lowering::ResolverAstLowering;\n+\n+        if let ast::ItemKind::Mod(..) = item.kind {\n+            let new_mod =\n+                self.resolver.borrow_mut().access(|resolver| resolver.local_def_id(item.id));\n+            let old_mod = mem::replace(&mut self.current_mod, new_mod.to_def_id());\n+            ast::visit::walk_item(self, item);\n+            self.current_mod = old_mod;\n+        } else {\n+            ast::visit::walk_item(self, item);\n+        }\n+    }\n+}"}, {"sha": "0e86fe45640f8ec80d728be3cd9aa536c7f02b06", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -30,7 +30,7 @@ crate use self::unindent_comments::UNINDENT_COMMENTS;\n mod propagate_doc_cfg;\n crate use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n \n-mod collect_intra_doc_links;\n+crate mod collect_intra_doc_links;\n crate use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n mod doc_test_lints;"}, {"sha": "17b26850d4d2518d8b718f92354e570667e1dd9e", "filename": "src/test/rustdoc-ui/auxiliary/panic-item.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -0,0 +1,17 @@\n+// no-prefer-dynamic\n+#![crate_type = \"lib\"]\n+#![no_std]\n+#![feature(lang_items)]\n+\n+use core::panic::PanicInfo;\n+use core::sync::atomic::{self, Ordering};\n+\n+#[panic_handler]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {\n+        atomic::compiler_fence(Ordering::SeqCst);\n+    }\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn foo() {}"}, {"sha": "f703a183790745c007db89829e286e4430ac57c1", "filename": "src/test/rustdoc-ui/unused-extern-crate.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -0,0 +1,3 @@\n+// check-pass\n+// aux-crate:panic_item=panic-item.rs\n+// @has unused_extern_crate/index.html"}, {"sha": "2f3d069bd51c36665d483943ee79d60dded77367", "filename": "src/test/rustdoc/auxiliary/issue-66159-1.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b73e81b351d036449e76ad753160853625c5b6/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b73e81b351d036449e76ad753160853625c5b6/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-66159-1.rs?ref=99b73e81b351d036449e76ad753160853625c5b6", "patch": "@@ -1,2 +0,0 @@\n-/// This will be referred to by the test docstring\n-pub struct Something;"}, {"sha": "56742b39790a88b6217728192b47ef2b40371bc8", "filename": "src/test/rustdoc/intra-doc/issue-66159.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d933edd5c6ee149d53bff4558c3fef8dc68b8766/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-66159.rs?ref=d933edd5c6ee149d53bff4558c3fef8dc68b8766", "patch": "@@ -1,4 +1,4 @@\n-// aux-crate:priv:issue_66159_1=issue-66159-1.rs\n+// aux-crate:priv:pub_struct=pub-struct.rs\n // compile-flags:-Z unstable-options\n \n // The issue was an ICE which meant that we never actually generated the docs\n@@ -7,4 +7,4 @@\n // verify that the struct is linked correctly.\n \n // @has issue_66159/index.html\n-//! [issue_66159_1::Something]\n+//! [pub_struct::SomeStruct]", "previous_filename": "src/test/rustdoc/issue-66159.rs"}]}