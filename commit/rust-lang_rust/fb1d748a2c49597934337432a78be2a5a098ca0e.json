{"sha": "fb1d748a2c49597934337432a78be2a5a098ca0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMWQ3NDhhMmM0OTU5NzkzNDMzNzQzMmE3OGJlMmE1YTA5OGNhMGU=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-19T00:15:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:27Z"}, "message": "actually drop watcher, use parking_lot::Mutex", "tree": {"sha": "3c632e6a95726fea39c3756d767c9d1cdd06f11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c632e6a95726fea39c3756d767c9d1cdd06f11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1d748a2c49597934337432a78be2a5a098ca0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1d748a2c49597934337432a78be2a5a098ca0e", "html_url": "https://github.com/rust-lang/rust/commit/fb1d748a2c49597934337432a78be2a5a098ca0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1d748a2c49597934337432a78be2a5a098ca0e/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f181e36a44d1998d3239f09365b16bfea50288a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f181e36a44d1998d3239f09365b16bfea50288a4", "html_url": "https://github.com/rust-lang/rust/commit/f181e36a44d1998d3239f09365b16bfea50288a4"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "9cd0b3d9f37795f3044d318af2c7e52119e29192", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d748a2c49597934337432a78be2a5a098ca0e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d748a2c49597934337432a78be2a5a098ca0e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fb1d748a2c49597934337432a78be2a5a098ca0e", "patch": "@@ -1042,6 +1042,7 @@ dependencies = [\n  \"ignore 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"notify 4.0.6 (git+https://github.com/vemoo/notify/?branch=v4-legacy)\",\n+ \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "b77b7139fd61423291dae53745d21ccf22a11e34", "filename": "crates/ra_vfs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d748a2c49597934337432a78be2a5a098ca0e/crates%2Fra_vfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d748a2c49597934337432a78be2a5a098ca0e/crates%2Fra_vfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2FCargo.toml?ref=fb1d748a2c49597934337432a78be2a5a098ca0e", "patch": "@@ -14,6 +14,7 @@ log = \"0.4.6\"\n notify = { git = \"https://github.com/vemoo/notify/\", branch = \"v4-legacy\" }\n ignore = \"0.4\"\n drop_bomb = \"0.1.0\"\n+parking_lot = \"0.7.0\"\n \n thread_worker = { path = \"../thread_worker\" }\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "9d552f8860f3d17d3bac2dbe76111f1f0f660081", "filename": "crates/ra_vfs/src/watcher.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb1d748a2c49597934337432a78be2a5a098ca0e/crates%2Fra_vfs%2Fsrc%2Fwatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1d748a2c49597934337432a78be2a5a098ca0e/crates%2Fra_vfs%2Fsrc%2Fwatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fwatcher.rs?ref=fb1d748a2c49597934337432a78be2a5a098ca0e", "patch": "@@ -3,15 +3,16 @@ use crossbeam_channel::Sender;\n use drop_bomb::DropBomb;\n use ignore;\n use notify::{DebouncedEvent, RecommendedWatcher, RecursiveMode, Watcher as NotifyWatcher};\n+use parking_lot::Mutex;\n use std::{\n     path::{Path, PathBuf},\n-    sync::{mpsc, Arc, Mutex},\n+    sync::{mpsc, Arc},\n     thread,\n     time::Duration,\n };\n \n pub struct Watcher {\n-    watcher: Arc<Mutex<RecommendedWatcher>>,\n+    watcher: Arc<Mutex<Option<RecommendedWatcher>>>,\n     thread: thread::JoinHandle<()>,\n     bomb: DropBomb,\n }\n@@ -27,7 +28,7 @@ pub enum WatcherChange {\n fn handle_change_event(\n     ev: DebouncedEvent,\n     sender: &Sender<io::Task>,\n-    watcher: &Arc<Mutex<RecommendedWatcher>>,\n+    watcher: &Arc<Mutex<Option<RecommendedWatcher>>>,\n ) -> Result<(), Box<std::error::Error>> {\n     match ev {\n         DebouncedEvent::NoticeWrite(_)\n@@ -69,16 +70,23 @@ fn watch_one(watcher: &mut RecommendedWatcher, path: &Path) {\n     }\n }\n \n-fn watch_recursive(watcher: &Arc<Mutex<RecommendedWatcher>>, path: &Path) {\n+fn watch_recursive(watcher: &Arc<Mutex<Option<RecommendedWatcher>>>, path: &Path) {\n     log::debug!(\"watch_recursive \\\"{}\\\"\", path.display());\n-    let mut w = watcher.lock().unwrap();\n+    let mut watcher = watcher.lock();\n+    let mut watcher = match *watcher {\n+        Some(ref mut watcher) => watcher,\n+        None => {\n+            // watcher has been dropped\n+            return;\n+        }\n+    };\n     // TODO it seems path itself isn't checked against ignores\n     // check if path should be ignored before walking it\n     for res in ignore::Walk::new(path) {\n         match res {\n             Ok(entry) => {\n                 if entry.path().is_dir() {\n-                    watch_one(&mut w, entry.path());\n+                    watch_one(&mut watcher, entry.path());\n                 }\n             }\n             Err(e) => log::warn!(\"watcher error: {}\", e),\n@@ -91,10 +99,10 @@ impl Watcher {\n         output_sender: Sender<io::Task>,\n     ) -> Result<Watcher, Box<std::error::Error>> {\n         let (input_sender, input_receiver) = mpsc::channel();\n-        let watcher = Arc::new(Mutex::new(notify::watcher(\n+        let watcher = Arc::new(Mutex::new(Some(notify::watcher(\n             input_sender,\n             Duration::from_millis(250),\n-        )?));\n+        )?)));\n         let w = watcher.clone();\n         let thread = thread::spawn(move || {\n             input_receiver\n@@ -116,7 +124,7 @@ impl Watcher {\n \n     pub fn shutdown(mut self) -> thread::Result<()> {\n         self.bomb.defuse();\n-        drop(self.watcher);\n+        drop(self.watcher.lock().take());\n         let res = self.thread.join();\n         match &res {\n             Ok(()) => log::info!(\"... Watcher terminated with ok\"),"}]}