{"sha": "8715a65496b557798a9ff346194991aea3581f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MTVhNjU0OTZiNTU3Nzk4YTlmZjM0NjE5NDk5MWFlYTM1ODFmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-12T04:53:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-12T04:53:31Z"}, "message": "Auto merge of #23298 - Manishearth:rollup, r=Manishearth\n\nNone", "tree": {"sha": "fbfaa932c2159f49cd3394c32f4d28e6be466dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbfaa932c2159f49cd3394c32f4d28e6be466dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8715a65496b557798a9ff346194991aea3581f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8715a65496b557798a9ff346194991aea3581f4d", "html_url": "https://github.com/rust-lang/rust/commit/8715a65496b557798a9ff346194991aea3581f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8715a65496b557798a9ff346194991aea3581f4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "425297a93035bc89663ff5f83d229f6c19341ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/425297a93035bc89663ff5f83d229f6c19341ffb", "html_url": "https://github.com/rust-lang/rust/commit/425297a93035bc89663ff5f83d229f6c19341ffb"}, {"sha": "419c0ff321c9995a0b3bfc709f61397e5d2c53d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/419c0ff321c9995a0b3bfc709f61397e5d2c53d4", "html_url": "https://github.com/rust-lang/rust/commit/419c0ff321c9995a0b3bfc709f61397e5d2c53d4"}], "stats": {"total": 1093, "additions": 606, "deletions": 487}, "files": [{"sha": "73e09158539aa2cb34a1f923473342972c1cd6e4", "filename": "configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -760,8 +760,9 @@ fi\n # Force bitrig to build with clang; gcc doesn't like us there\n if [ $CFG_OSTYPE = unknown-bitrig ]\n then\n-    step_msg \"on Bitrig, forcing use of clang\"\n+    step_msg \"on Bitrig, forcing use of clang, disabling jemalloc\"\n     CFG_ENABLE_CLANG=1\n+    CFG_ENABLE_JEMALLOC=0\n fi\n \n if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]"}, {"sha": "4bfc65ad843d1f4b58424ef17dfda34f3716a275", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -130,7 +130,7 @@ ifdef CFG_DISABLE_DEBUG\n   CFG_RUSTC_FLAGS += --cfg ndebug\n else\n   $(info cfg: enabling more debugging (CFG_ENABLE_DEBUG))\n-  CFG_RUSTC_FLAGS += --cfg debug\n+  CFG_RUSTC_FLAGS += --cfg debug -C debug-assertions=on\n endif\n \n ifdef SAVE_TEMPS"}, {"sha": "78f5ac11f06a75aaee6f666bd030958d334450ac", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -590,7 +590,7 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n \n # The tests select when to use debug configuration on their own;\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n-CTEST_RUSTC_FLAGS := $$(subst -C debug-assertions,,$$(CFG_RUSTC_FLAGS))\n+CTEST_RUSTC_FLAGS := $$(subst -C debug-assertions,,$$(subst -C debug-assertions=on,,$$(CFG_RUSTC_FLAGS)))\n \n # The tests cannot be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need"}, {"sha": "441496e6a755b7e9590739fdcf44c90f8867d087", "filename": "src/doc/trpl/comments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcomments.md?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -28,7 +28,7 @@ The other kind of comment is a doc comment. Doc comments use `///` instead of\n ///\n /// * `name` - The name of the person you'd like to greet.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// let name = \"Steve\";"}, {"sha": "d077aac7c2dfa8915b9476e114f74ac951a7ad3b", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -78,16 +78,16 @@ Once you have this file in place, we should be ready to build! Try this:\n ```bash\n $ cargo build\n    Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-$ ./target/hello_world\n+$ ./target/debug/hello_world\n Hello, world!\n ```\n \n Bam! We build our project with `cargo build`, and run it with\n-`./target/hello_world`. This hasn't bought us a whole lot over our simple use\n+`./target/debug/hello_world`. This hasn't bought us a whole lot over our simple use\n of `rustc`, but think about the future: when our project has more than one\n file, we would need to call `rustc` more than once, and pass it a bunch of options to\n tell it to build everything together. With Cargo, as our project grows, we can\n-just `cargo build` and it'll work the right way.\n+just `cargo build` and it'll work the right way. When you're project is finally ready for release, you can use `cargo build --release` to compile your crates with optimizations.\n \n You'll also notice that Cargo has created a new file: `Cargo.lock`.\n \n@@ -163,4 +163,4 @@ much more in-depth guide to Cargo can be found [here](http://doc.crates.io/guide\n \n Now that you've got the tools down, let's actually learn more about the Rust\n language itself. These are the basics that will serve you well through the rest\n-of your time with Rust.\n\\ No newline at end of file\n+of your time with Rust."}, {"sha": "0dc83f95f439d771ecdac6a6ac6fc0144b9741b1", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -78,6 +78,11 @@ rustc 1.0.0-nightly (f11f3e7ba 2015-01-04) (built 2015-01-06)\n \n If you did, Rust has been installed successfully! Congrats!\n \n+This installer also installs a copy of the documentation locally, so you can\n+read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n+On Windows, it's in a `share/doc` directory, inside wherever you installed Rust\n+to.\n+\n If not, there are a number of places where you can get help. The easiest is\n [the #rust IRC channel on irc.mozilla.org](irc://irc.mozilla.org/#rust), which\n you can access through"}, {"sha": "504ed63934c6ae0b91b3fdbdfb8d995ce1b3dff2", "filename": "src/doc/trpl/static-and-dynamic-dispatch.md", "status": "modified", "additions": 68, "deletions": 49, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Fstatic-and-dynamic-dispatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fdoc%2Ftrpl%2Fstatic-and-dynamic-dispatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstatic-and-dynamic-dispatch.md?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -102,49 +102,88 @@ reason.\n Rust provides dynamic dispatch through a feature called 'trait objects.' Trait\n objects, like `&Foo` or `Box<Foo>`, are normal values that store a value of\n *any* type that implements the given trait, where the precise type can only be\n-known at runtime. The methods of the trait can be called on a trait object via\n-a special record of function pointers (created and managed by the compiler).\n+known at runtime.\n \n-A function that takes a trait object is not specialized to each of the types\n-that implements `Foo`: only one copy is generated, often (but not always)\n-resulting in less code bloat. However, this comes at the cost of requiring\n-slower virtual function calls, and effectively inhibiting any chance of\n-inlining and related optimisations from occurring.\n+A trait object can be obtained from a pointer to a concrete type that\n+implements the trait by *casting* it (e.g. `&x as &Foo`) or *coercing* it\n+(e.g. using `&x` as an argument to a function that takes `&Foo`).\n \n-Trait objects are both simple and complicated: their core representation and\n-layout is quite straight-forward, but there are some curly error messages and\n-surprising behaviors to discover.\n+These trait object coercions and casts also work for pointers like `&mut T` to\n+`&mut Foo` and `Box<T>` to `Box<Foo>`, but that's all at the moment. Coercions\n+and casts are identical.\n \n-### Obtaining a trait object\n+This operation can be seen as \"erasing\" the compiler's knowledge about the\n+specific type of the pointer, and hence trait objects are sometimes referred to\n+as \"type erasure\".\n \n-There's two similar ways to get a trait object value: casts and coercions. If\n-`T` is a type that implements a trait `Foo` (e.g. `u8` for the `Foo` above),\n-then the two ways to get a `Foo` trait object out of a pointer to `T` look\n-like:\n+Coming back to the example above, we can use the same trait to perform dynamic\n+dispatch with trait objects by casting:\n \n-```{rust,ignore}\n-let ref_to_t: &T = ...;\n+```rust\n+# trait Foo { fn method(&self) -> String; }\n+# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n+# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\n \n-// `as` keyword for casting\n-let cast = ref_to_t as &Foo;\n+fn do_something(x: &Foo) {\n+    x.method();\n+}\n \n-// using a `&T` in a place that has a known type of `&Foo` will implicitly coerce:\n-let coerce: &Foo = ref_to_t;\n+fn main() {\n+    let x = 5u8;\n+    do_something(&x as &Foo);\n+}\n+```\n \n-fn also_coerce(_unused: &Foo) {}\n-also_coerce(ref_to_t);\n+or by coercing:\n+\n+```rust\n+# trait Foo { fn method(&self) -> String; }\n+# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n+# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\n+\n+fn do_something(x: &Foo) {\n+    x.method();\n+}\n+\n+fn main() {\n+    let x = \"Hello\".to_string();\n+    do_something(&x);\n+}\n ```\n \n-These trait object coercions and casts also work for pointers like `&mut T` to\n-`&mut Foo` and `Box<T>` to `Box<Foo>`, but that's all at the moment. Coercions\n-and casts are identical.\n+A function that takes a trait object is not specialized to each of the types\n+that implements `Foo`: only one copy is generated, often (but not always)\n+resulting in less code bloat. However, this comes at the cost of requiring\n+slower virtual function calls, and effectively inhibiting any chance of\n+inlining and related optimisations from occurring.\n \n-This operation can be seen as \"erasing\" the compiler's knowledge about the\n-specific type of the pointer, and hence trait objects are sometimes referred to\n-as \"type erasure\".\n+### Why pointers?\n+\n+Rust does not put things behind a pointer by default, unlike many managed\n+languages, so types can have different sizes. Knowing the size of the value at\n+compile time is important for things like passing it as an argument to a\n+function, moving it about on the stack and allocating (and deallocating) space\n+on the heap to store it.\n+\n+For `Foo`, we would need to have a value that could be at least either a\n+`String` (24 bytes) or a `u8` (1 byte), as well as any other type for which\n+dependent crates may implement `Foo` (any number of bytes at all). There's no\n+way to guarantee that this last point can work if the values are stored without\n+a pointer, because those other types can be arbitrarily large.\n+\n+Putting the value behind a pointer means the size of the value is not relevant\n+when we are tossing a trait object around, only the size of the pointer itself.\n \n ### Representation\n \n+The methods of the trait can be called on a trait object via a special record\n+of function pointers traditionally called a 'vtable' (created and managed by\n+the compiler).\n+\n+Trait objects are both simple and complicated: their core representation and\n+layout is quite straight-forward, but there are some curly error messages and\n+surprising behaviors to discover.\n+\n Let's start simple, with the runtime representation of a trait object. The\n `std::raw` module contains structs with layouts that are the same as the\n complicated built-in types, [including trait objects][stdraw]:\n@@ -265,23 +304,3 @@ let y = TraitObject {\n If `b` or `y` were owning trait objects (`Box<Foo>`), there would be a\n `(b.vtable.destructor)(b.data)` (respectively `y`) call when they went out of\n scope.\n-\n-### Why pointers?\n-\n-The use of language like \"fat pointer\" implies that a trait object is\n-always a pointer of some form, but why?\n-\n-Rust does not put things behind a pointer by default, unlike many managed\n-languages, so types can have different sizes. Knowing the size of the value at\n-compile time is important for things like passing it as an argument to a\n-function, moving it about on the stack and allocating (and deallocating) space\n-on the heap to store it.\n-\n-For `Foo`, we would need to have a value that could be at least either a\n-`String` (24 bytes) or a `u8` (1 byte), as well as any other type for which\n-dependent crates may implement `Foo` (any number of bytes at all). There's no\n-way to guarantee that this last point can work if the values are stored without\n-a pointer, because those other types can be arbitrarily large.\n-\n-Putting the value behind a pointer means the size of the value is not relevant\n-when we are tossing a trait object around, only the size of the pointer itself."}, {"sha": "748eb9dcb2fd4728fb12168c9706c11742e80f50", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -88,7 +88,7 @@ use heap::deallocate;\n \n /// An atomically reference counted wrapper for shared state.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// In this example, a large vector of floats is shared between several tasks.\n /// With simple pipes, without `Arc`, a copy would have to be made for each"}, {"sha": "6d865d2bffa8a0db321ba96d308ab50f06e56ddd", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -133,7 +133,7 @@ impl<T : ?Sized> Box<T> {\n /// automatically managed that may lead to memory or other resource\n /// leak.\n ///\n-/// # Example\n+/// # Examples\n /// ```\n /// use std::boxed;\n ///"}, {"sha": "115acd4a0efecab219554cd15fd6ac96ee2dfa62", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -264,7 +264,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n ///\n /// If the `Rc<T>` is not unique, an `Err` is returned with the same `Rc<T>`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::rc::{self, Rc};\n@@ -298,7 +298,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n ///\n /// Returns `None` if the `Rc<T>` is not unique.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::rc::{self, Rc};"}, {"sha": "5b799d3e5c0ffc47a20009a2170b102b5e7764e9", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -127,7 +127,7 @@ impl<T> ToOwned for T where T: Clone {\n /// is desired, `to_mut` will obtain a mutable references to an owned\n /// value, cloning if necessary.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::borrow::Cow;"}, {"sha": "5de6cbe61e9e6af7a367d4fd8c965da52c5ec2d4", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -1177,7 +1177,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n impl<K, V> BTreeMap<K, V> {\n     /// Gets an iterator over the entries of the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;"}, {"sha": "5d35c3902a31a6816865bfd8cdce808ba3283c61", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -420,7 +420,7 @@ use string;\n ///\n ///   * args - a structure of arguments generated via the `format_args!` macro.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::fmt;"}, {"sha": "0f6a85d75daa80ad63ff1d8406c2a5a1b070cdfd", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -48,7 +48,7 @@ macro_rules! vec {\n /// Use the syntax described in `std::fmt` to create a value of type `String`.\n /// See `std::fmt` for more information.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// format!(\"test\");"}, {"sha": "2503001b44dad9b8d7c949dcf2eb624eed946769", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -277,7 +277,7 @@ pub trait SliceExt {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Print the adjacent pairs of a slice (i.e. `[1,2]`, `[2,3]`,\n     /// `[3,4]`):\n@@ -300,7 +300,7 @@ pub trait SliceExt {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Print the slice two elements at a time (i.e. `[1,2]`,\n     /// `[3,4]`, `[5]`):\n@@ -390,7 +390,7 @@ pub trait SliceExt {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -416,7 +416,7 @@ pub trait SliceExt {\n \n     /// Return the number of elements in the slice\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -427,7 +427,7 @@ pub trait SliceExt {\n \n     /// Returns true if the slice has a length of 0\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -529,7 +529,7 @@ pub trait SliceExt {\n     ///\n     /// Panics if `a` or `b` are out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n@@ -549,7 +549,7 @@ pub trait SliceExt {\n     ///\n     /// Panics if `mid > len`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [1, 2, 3, 4, 5, 6];\n@@ -578,7 +578,7 @@ pub trait SliceExt {\n \n     /// Reverse the order of elements in a slice, in place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [1, 2, 3];\n@@ -638,7 +638,7 @@ pub trait SliceExt {\n     /// shorter of `self.len()` and `src.len()`). Returns the number\n     /// of elements copied.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut dst = [0, 0, 0];\n@@ -676,7 +676,7 @@ pub trait SliceExt {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -707,7 +707,7 @@ pub trait SliceExt {\n     /// Returns `true` if successful and `false` if the slice is at the\n     /// last-ordered permutation.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let v: &mut [_] = &mut [0, 1, 2];\n@@ -727,7 +727,7 @@ pub trait SliceExt {\n     /// Returns `true` if successful and `false` if the slice is at the\n     /// first-ordered permutation.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let v: &mut [_] = &mut [1, 0, 2];"}, {"sha": "31d7677d19eaf4cc86f83324db1cec8395335e32", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -1377,7 +1377,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     ///\n     /// Will return `Err` if it's not possible to parse `self` into the type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// assert_eq!(\"4\".parse::<u32>(), Ok(4));"}, {"sha": "cc7cd0509029ffd5610fbb9dc83011391abe64f1", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -314,6 +314,7 @@ impl String {\n     /// Creates a new `String` from a length, capacity, and pointer.\n     ///\n     /// This is unsafe because:\n+    ///\n     /// * We call `Vec::from_raw_parts` to get a `Vec<u8>`;\n     /// * We assume that the `Vec` contains valid UTF-8.\n     #[inline]"}, {"sha": "74806e52d261da201090452e8aabb3f3ba40fb2b", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -16,7 +16,7 @@\n //! \"finally\" case. For advanced cases, the `try_finally` function can\n //! also be used. See that function for more details.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```\n //! # #![feature(unboxed_closures)]\n@@ -67,7 +67,7 @@ impl<T, F> Finally<T> for F where F: FnMut() -> T {\n /// function could have panicked at any point, so the values of the shared\n /// state may be inconsistent.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::finally::try_finally;"}, {"sha": "fe22ee60da688ef25d403d4041a27d335d2c149f", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -143,7 +143,7 @@ pub struct RadixFmt<T, R>(T, R);\n \n /// Constructs a radix formatter in the range of `2..36`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt::radix;"}, {"sha": "237dbe492baec94ab8bb649a873437f7b56941e1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -488,7 +488,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n-    /// fn process<U: Iterator<Item=isize>>(it: U) -> isize {\n+    /// fn process<U: Iterator<Item=i32>>(it: U) -> i32 {\n     ///     let mut it = it.fuse();\n     ///     let mut sum = 0;\n     ///     for x in it.by_ref() {\n@@ -797,7 +797,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n     ///\n-    /// let a: [isize; 0] = [];\n+    /// let a: [i32; 0] = [];\n     /// assert_eq!(a.iter().min_max(), NoElements);\n     ///\n     /// let a = [1];\n@@ -1251,7 +1251,7 @@ impl<T: Clone> MinMaxResult<T> {\n     /// ```\n     /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n-    /// let r: MinMaxResult<isize> = NoElements;\n+    /// let r: MinMaxResult<i32> = NoElements;\n     /// assert_eq!(r.into_option(), None);\n     ///\n     /// let r = OneElement(1);\n@@ -2296,7 +2296,7 @@ impl<I: RandomAccessIterator, F> RandomAccessIterator for Inspect<I, F>\n \n /// An iterator that passes mutable state to a closure and yields the result.\n ///\n-/// # Example: The Fibonacci Sequence\n+/// # Examples\n ///\n /// An iterator that yields sequential Fibonacci numbers, and stops on overflow.\n ///"}, {"sha": "6575bac501fe0bc5e97742f35e160556bef6241c", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -33,7 +33,7 @@ macro_rules! panic {\n /// This will invoke the `panic!` macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// // the panic message for these assertions is the stringified value of the\n@@ -71,7 +71,7 @@ macro_rules! assert {\n ///\n /// On panic, this macro will print the values of the expressions.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// let a = 3;\n@@ -107,7 +107,7 @@ macro_rules! assert_eq {\n /// expensive to be present in a release build but may be helpful during\n /// development.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// // the panic message for these assertions is the stringified value of the\n@@ -142,7 +142,7 @@ macro_rules! debug_assert {\n /// expensive to be present in a release build but may be helpful during\n /// development.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// let a = 3;\n@@ -172,7 +172,7 @@ macro_rules! try {\n /// Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\n /// See `std::fmt` for more information.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// # #![allow(unused_must_use)]"}, {"sha": "d596a06709c5a1b2ceba44fa5e793e0aa75d8811", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -288,7 +288,7 @@ impl<T:?Sized> MarkerTrait for T { }\n /// can extend `MarkerTrait`, which is equivalent to\n /// `PhantomFn<Self>`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// As an example, consider a trait with no methods like `Even`, meant\n /// to represent types that are \"even\":"}, {"sha": "6170092c8d107baee244384ad2f84d28d8d46eb5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -82,7 +82,7 @@ pub trait Int\n \n     /// Returns the number of ones in the binary representation of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -97,7 +97,7 @@ pub trait Int\n \n     /// Returns the number of zeros in the binary representation of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -116,7 +116,7 @@ pub trait Int\n     /// Returns the number of leading zeros in the binary representation\n     /// of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -132,7 +132,7 @@ pub trait Int\n     /// Returns the number of trailing zeros in the binary representation\n     /// of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -148,7 +148,7 @@ pub trait Int\n     /// Shifts the bits to the left by a specified amount amount, `n`, wrapping\n     /// the truncated bits to the end of the resulting integer.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -165,7 +165,7 @@ pub trait Int\n     /// Shifts the bits to the right by a specified amount amount, `n`, wrapping\n     /// the truncated bits to the beginning of the resulting integer.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -181,7 +181,7 @@ pub trait Int\n \n     /// Reverses the byte order of the integer.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -198,7 +198,7 @@ pub trait Int\n     ///\n     /// On big endian this is a no-op. On little endian the bytes are swapped.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -221,7 +221,7 @@ pub trait Int\n     ///\n     /// On little endian this is a no-op. On big endian the bytes are swapped.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -244,7 +244,7 @@ pub trait Int\n     ///\n     /// On big endian this is a no-op. On little endian the bytes are swapped.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -267,7 +267,7 @@ pub trait Int\n     ///\n     /// On little endian this is a no-op. On big endian the bytes are swapped.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -289,7 +289,7 @@ pub trait Int\n     /// Checked integer addition. Computes `self + other`, returning `None` if\n     /// overflow occurred.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -303,7 +303,7 @@ pub trait Int\n     /// Checked integer subtraction. Computes `self - other`, returning `None`\n     /// if underflow occurred.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -317,7 +317,7 @@ pub trait Int\n     /// Checked integer multiplication. Computes `self * other`, returning\n     /// `None` if underflow or overflow occurred.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -331,7 +331,7 @@ pub trait Int\n     /// Checked integer division. Computes `self / other`, returning `None` if\n     /// `other == 0` or the operation results in underflow or overflow.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -369,7 +369,7 @@ pub trait Int\n \n     /// Raises self to the power of `exp`, using exponentiation by squaring.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::num::Int;\n@@ -1273,7 +1273,7 @@ impl_from_primitive! { f64, to_f64 }\n \n /// Cast from one machine scalar to another.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::num;"}, {"sha": "077b44f2dd2a77dc97d7fe2f5073e5df5a0fa4d3", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -27,7 +27,7 @@\n //! idea to have both `T` and `&T` implement the traits `Add<T>` and `Add<&T>`\n //! so that generic code can be written without unnecessary cloning.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! This example creates a `Point` struct that implements `Add` and `Sub`, and then\n //! demonstrates adding and subtracting two `Point`s.\n@@ -73,7 +73,7 @@ use fmt;\n /// The `Drop` trait is used to run some code when a value goes out of scope. This\n /// is sometimes called a 'destructor'.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Drop`. The `drop` method is called when `_x` goes\n /// out of scope, and therefore `main` prints `Dropping!`.\n@@ -157,7 +157,7 @@ macro_rules! forward_ref_binop {\n \n /// The `Add` trait is used to specify the functionality of `+`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Add`. When `Foo + Foo` happens, it ends up\n /// calling `add`, and therefore, `main` prints `Adding!`.\n@@ -211,7 +211,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Sub` trait is used to specify the functionality of `-`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Sub`. When `Foo - Foo` happens, it ends up\n /// calling `sub`, and therefore, `main` prints `Subtracting!`.\n@@ -265,7 +265,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Mul` trait is used to specify the functionality of `*`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Mul`. When `Foo * Foo` happens, it ends up\n /// calling `mul`, and therefore, `main` prints `Multiplying!`.\n@@ -319,7 +319,7 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Div` trait is used to specify the functionality of `/`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Div`. When `Foo / Foo` happens, it ends up\n /// calling `div`, and therefore, `main` prints `Dividing!`.\n@@ -373,7 +373,7 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Rem` trait is used to specify the functionality of `%`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Rem`. When `Foo % Foo` happens, it ends up\n /// calling `rem`, and therefore, `main` prints `Remainder-ing!`.\n@@ -446,7 +446,7 @@ rem_float_impl! { f64, fmod }\n \n /// The `Neg` trait is used to specify the functionality of unary `-`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Neg`. When `-Foo` happens, it ends up calling\n /// `neg`, and therefore, `main` prints `Negating!`.\n@@ -523,7 +523,7 @@ neg_uint_impl! { u64, i64 }\n \n /// The `Not` trait is used to specify the functionality of unary `!`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Not`. When `!Foo` happens, it ends up calling\n /// `not`, and therefore, `main` prints `Not-ing!`.\n@@ -577,7 +577,7 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `BitAnd` trait is used to specify the functionality of `&`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `BitAnd`. When `Foo & Foo` happens, it ends up\n /// calling `bitand`, and therefore, `main` prints `Bitwise And-ing!`.\n@@ -631,7 +631,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `BitOr` trait is used to specify the functionality of `|`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `BitOr`. When `Foo | Foo` happens, it ends up\n /// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n@@ -685,7 +685,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `BitXor` trait is used to specify the functionality of `^`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `BitXor`. When `Foo ^ Foo` happens, it ends up\n /// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n@@ -739,7 +739,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `Shl` trait is used to specify the functionality of `<<`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Shl`. When `Foo << Foo` happens, it ends up\n /// calling `shl`, and therefore, `main` prints `Shifting left!`.\n@@ -811,7 +811,7 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Shr` trait is used to specify the functionality of `>>`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Shr`. When `Foo >> Foo` happens, it ends up\n /// calling `shr`, and therefore, `main` prints `Shifting right!`.\n@@ -883,7 +883,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `arr[idx]` when used in an immutable context.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `Index`. When `Foo[Bar]` happens, it ends up\n /// calling `index`, and therefore, `main` prints `Indexing!`.\n@@ -924,7 +924,7 @@ pub trait Index<Idx: ?Sized> {\n /// The `IndexMut` trait is used to specify the functionality of indexing\n /// operations like `arr[idx]`, when used in a mutable context.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A trivial implementation of `IndexMut`. When `Foo[Bar]` happens, it ends up\n /// calling `index_mut`, and therefore, `main` prints `Indexing!`.\n@@ -1033,7 +1033,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n /// The `Deref` trait is used to specify the functionality of dereferencing\n /// operations like `*v`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A struct with a single field which is accessible via dereferencing the\n /// struct.\n@@ -1087,7 +1087,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n /// The `DerefMut` trait is used to specify the functionality of dereferencing\n /// mutably like `*v = 1;`\n ///\n-/// # Example\n+/// # Examples\n ///\n /// A struct with a single field which is modifiable via dereferencing the\n /// struct."}, {"sha": "2dd8bf67220ab7c8cb0187ae189f56d2c49dbebb", "filename": "src/libcore/option.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -185,7 +185,7 @@ impl<T> Option<T> {\n \n     /// Returns `true` if the option is a `Some` value\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Option<u32> = Some(2);\n@@ -205,7 +205,7 @@ impl<T> Option<T> {\n \n     /// Returns `true` if the option is a `None` value\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Option<u32> = Some(2);\n@@ -226,7 +226,7 @@ impl<T> Option<T> {\n \n     /// Convert from `Option<T>` to `Option<&T>`\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Convert an `Option<String>` into an `Option<usize>`, preserving the original.\n     /// The `map` method takes the `self` argument by value, consuming the original,\n@@ -251,7 +251,7 @@ impl<T> Option<T> {\n \n     /// Convert from `Option<T>` to `Option<&mut T>`\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut x = Some(2);\n@@ -272,7 +272,7 @@ impl<T> Option<T> {\n \n     /// Convert from `Option<T>` to `&mut [T]` (without copying)\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut x = Some(\"Diamonds\");\n@@ -311,7 +311,7 @@ impl<T> Option<T> {\n     /// Panics if the value is a `None` with a custom panic message provided by\n     /// `msg`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(\"value\");\n@@ -343,7 +343,7 @@ impl<T> Option<T> {\n     /// Instead, prefer to use pattern matching and handle the `None`\n     /// case explicitly.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(\"air\");\n@@ -365,7 +365,7 @@ impl<T> Option<T> {\n \n     /// Returns the contained value or a default.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\");\n@@ -382,7 +382,7 @@ impl<T> Option<T> {\n \n     /// Returns the contained value or computes it from a closure.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let k = 10;\n@@ -404,7 +404,7 @@ impl<T> Option<T> {\n \n     /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Convert an `Option<String>` into an `Option<usize>`, consuming the original:\n     ///\n@@ -424,7 +424,7 @@ impl<T> Option<T> {\n \n     /// Applies a function to the contained value or returns a default.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(\"foo\");\n@@ -444,7 +444,7 @@ impl<T> Option<T> {\n \n     /// Applies a function to the contained value or computes a default.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let k = 21;\n@@ -467,7 +467,7 @@ impl<T> Option<T> {\n     /// Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n     /// `Ok(v)` and `None` to `Err(err)`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(\"foo\");\n@@ -488,7 +488,7 @@ impl<T> Option<T> {\n     /// Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n     /// `Ok(v)` and `None` to `Err(err())`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(\"foo\");\n@@ -512,7 +512,7 @@ impl<T> Option<T> {\n \n     /// Returns an iterator over the possibly contained value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(4);\n@@ -529,7 +529,7 @@ impl<T> Option<T> {\n \n     /// Returns a mutable iterator over the possibly contained value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut x = Some(4);\n@@ -551,7 +551,7 @@ impl<T> Option<T> {\n \n     /// Returns a consuming iterator over the possibly contained value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(\"string\");\n@@ -574,7 +574,7 @@ impl<T> Option<T> {\n \n     /// Returns `None` if the option is `None`, otherwise returns `optb`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(2);\n@@ -607,7 +607,7 @@ impl<T> Option<T> {\n     ///\n     /// Some languages call this operation flatmap.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn sq(x: u32) -> Option<u32> { Some(x * x) }\n@@ -629,7 +629,7 @@ impl<T> Option<T> {\n \n     /// Returns the option if it contains a value, otherwise returns `optb`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x = Some(2);\n@@ -660,7 +660,7 @@ impl<T> Option<T> {\n     /// Returns the option if it contains a value, otherwise calls `f` and\n     /// returns the result.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn nobody() -> Option<&'static str> { None }\n@@ -685,7 +685,7 @@ impl<T> Option<T> {\n \n     /// Takes the value out of the option, leaving a `None` in its place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut x = Some(2);\n@@ -720,7 +720,7 @@ impl<T: Default> Option<T> {\n     /// value, otherwise if `None`, returns the default value for that\n     /// type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Convert a string to an integer, turning poorly-formed strings\n     /// into 0 (the default value for integers). `parse` converts"}, {"sha": "9fba9a4d8ec766bd1431a05dfd91fdb5b10eca91", "filename": "src/libcore/result.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -265,7 +265,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns true if the result is `Ok`\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<int, &str> = Ok(-3);\n@@ -285,7 +285,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns true if the result is `Err`\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<int, &str> = Ok(-3);\n@@ -309,7 +309,7 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an `Option<T>`, consuming `self`,\n     /// and discarding the error, if any.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n@@ -332,7 +332,7 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an `Option<E>`, consuming `self`,\n     /// and discarding the value, if any.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n@@ -440,7 +440,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used to compose the results of two functions.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Sum the lines of a buffer by mapping strings to numbers,\n     /// ignoring I/O and parse errors:\n@@ -479,7 +479,7 @@ impl<T, E> Result<T, E> {\n     /// This function can be used to pass through a successful result while handling\n     /// an error.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn stringify(x: u32) -> String { format!(\"error code: {}\", x) }\n@@ -505,7 +505,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns an iterator over the possibly contained value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(7);\n@@ -522,7 +522,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns a mutable iterator over the possibly contained value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut x: Result<u32, &str> = Ok(7);\n@@ -543,7 +543,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns a consuming iterator over the possibly contained value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(5);\n@@ -566,7 +566,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n@@ -598,7 +598,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used for control flow based on result values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n@@ -620,7 +620,7 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n@@ -652,7 +652,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used for control flow based on result values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n@@ -675,7 +675,7 @@ impl<T, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Ok`.\n     /// Else it returns `optb`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let optb = 2;\n@@ -697,7 +697,7 @@ impl<T, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Ok`.\n     /// If the value is an `Err` then it calls `op` with its value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn count(x: &str) -> usize { x.len() }\n@@ -724,7 +724,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// Panics if the value is an `Err`, with a custom panic message provided\n     /// by the `Err`'s value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n@@ -755,7 +755,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Panics if the value is an `Ok`, with a custom panic message provided\n     /// by the `Ok`'s value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```{.should_fail}\n     /// let x: Result<u32, &str> = Ok(2);"}, {"sha": "07c14d08c078de59cfce2c538d1c8a466276fb26", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -1433,7 +1433,7 @@ pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n /// function taking the lifetime of a host value for the slice, or by explicit\n /// annotation.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::slice;\n@@ -1446,7 +1446,7 @@ pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n /// }\n /// ```\n #[inline]\n-#[unstable(feature = \"core\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n     transmute(RawSlice { data: p, len: len })\n }\n@@ -1458,7 +1458,7 @@ pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n /// as not being able to provide a non-aliasing guarantee of the returned\n /// mutable slice.\n #[inline]\n-#[unstable(feature = \"core\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n     transmute(RawSlice { data: p, len: len })\n }\n@@ -1476,7 +1476,7 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n /// valid for `len` elements, nor whether the lifetime provided is a suitable\n /// lifetime for the returned slice.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::slice;"}, {"sha": "6f72890d96fb55848d1d53832d877cdb9bb5cb37", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -1183,7 +1183,7 @@ mod traits {\n     /// Panics when `begin` and `end` do not point to valid characters\n     /// or point beyond the last character of the string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";"}, {"sha": "9eeb9b869ce3b6830ab71db9031bedc1a308a51e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -215,7 +215,7 @@ pub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n ///   the two ends of a range of values, that is they\n ///   can not \"walk past each other\".\n ///\n-/// # Example\n+/// # Examples\n ///\n /// `char::Searcher` is a `DoubleEndedSearcher` because searching for a\n /// `char` only requires looking at one at a time, which behaves the same"}, {"sha": "100a9e36e86777ba5a1733ef3ea3091afd82f264", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -25,7 +25,6 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(core)]\n #![feature(int_uint)]\n #![feature(libc)]\n #![feature(staged_api)]"}, {"sha": "1aee6e0be2eccaeb988c03e37a478a1da13a7dbe", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -16,7 +16,7 @@\n /// format!-based argument list. See documentation in `std::fmt` for details on\n /// how to use the syntax.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// #[macro_use] extern crate log;\n@@ -64,7 +64,7 @@ macro_rules! log {\n \n /// A convenience macro for logging at the error log level.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// #[macro_use] extern crate log;\n@@ -89,7 +89,7 @@ macro_rules! error {\n \n /// A convenience macro for logging at the warning log level.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// #[macro_use] extern crate log;\n@@ -113,7 +113,7 @@ macro_rules! warn {\n \n /// A convenience macro for logging at the info log level.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// #[macro_use] extern crate log;\n@@ -139,7 +139,7 @@ macro_rules! info {\n /// be omitted at compile time by passing `--cfg ndebug` to the compiler. If\n /// this option is not passed, then debug statements will be compiled.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// #[macro_use] extern crate log;\n@@ -162,7 +162,7 @@ macro_rules! debug {\n \n /// A macro to test whether a log level is enabled for the current module.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// #[macro_use] extern crate log;"}, {"sha": "6820d9c5c48f218f5599f03502311eea8bf53d6c", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -57,7 +57,7 @@ impl Rand for Exp1 {\n /// This distribution has density function: `f(x) = lambda *\n /// exp(-lambda * x)` for `x > 0`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;"}, {"sha": "6659bf0f3eeb317989e06a9b9519ee4a2c6cb6ac", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -37,7 +37,7 @@ use super::{IndependentSample, Sample, Exp};\n /// == 1`, and using the boosting technique described in [1] for\n /// `shape < 1`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;\n@@ -184,7 +184,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// `k`, this uses the equivalent characterisation `\u03c7\u00b2(k) = Gamma(k/2,\n /// 2)`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;\n@@ -241,7 +241,7 @@ impl IndependentSample<f64> for ChiSquared {\n /// chi-squared distributions, that is, `F(m,n) = (\u03c7\u00b2(m)/m) /\n /// (\u03c7\u00b2(n)/n)`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;\n@@ -285,7 +285,7 @@ impl IndependentSample<f64> for FisherF {\n /// The Student t distribution, `t(nu)`, where `nu` is the degrees of\n /// freedom.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;"}, {"sha": "42e830ae4ca4b6ced7ea9672c46869ad8ccaadf0", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -93,7 +93,7 @@ pub struct Weighted<T> {\n /// all `T`, as is `uint`, so one can store references or indices into\n /// another vector.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;"}, {"sha": "aeca477fb94cefb6ecbcb6d6147ec5c4eaaf9655", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -73,7 +73,7 @@ impl Rand for StandardNormal {\n /// This uses the ZIGNOR variant of the Ziggurat method, see\n /// `StandardNormal` for more details.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;\n@@ -121,7 +121,7 @@ impl IndependentSample<f64> for Normal {\n /// If `X` is log-normal distributed, then `ln(X)` is `N(mean,\n /// std_dev**2)` distributed.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand;"}, {"sha": "9a2576a87fcb5f44f8545f3b7753c74e4219daa9", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -33,7 +33,7 @@ use distributions::{Sample, IndependentSample};\n /// primitive integer types satisfy this property, and the float types\n /// normally satisfy it, but rounding may mean `high` can occur.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand::distributions::{IndependentSample, Range};"}, {"sha": "c5ff8ffe4576abf2389bf672eb5c1abcf510dff0", "filename": "src/librand/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -146,7 +146,7 @@ pub trait Rng : Sized {\n     /// (e.g. reading past the end of a file that is being used as the\n     /// source of randomness).\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n@@ -181,7 +181,7 @@ pub trait Rng : Sized {\n \n     /// Return a random value of a `Rand` type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n@@ -199,7 +199,7 @@ pub trait Rng : Sized {\n     /// Return an iterator that will yield an infinite number of randomly\n     /// generated items.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::rand::{thread_rng, Rng};\n@@ -226,7 +226,7 @@ pub trait Rng : Sized {\n     ///\n     /// Panics if `low >= high`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n@@ -244,7 +244,7 @@ pub trait Rng : Sized {\n \n     /// Return a bool with a 1 in n chance of true\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n@@ -258,7 +258,7 @@ pub trait Rng : Sized {\n \n     /// Return an iterator of random characters from the set A-Z,a-z,0-9.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n@@ -274,7 +274,7 @@ pub trait Rng : Sized {\n     ///\n     /// Return `None` if `values` is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::rand::{thread_rng, Rng};\n@@ -294,7 +294,7 @@ pub trait Rng : Sized {\n \n     /// Shuffle a mutable slice in place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n@@ -357,7 +357,7 @@ impl<'a, R: Rng> Iterator for AsciiGenerator<'a, R> {\n pub trait SeedableRng<Seed>: Rng {\n     /// Reseed an RNG with the given seed.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n@@ -372,7 +372,7 @@ pub trait SeedableRng<Seed>: Rng {\n \n     /// Create a new RNG with the given seed.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n@@ -477,7 +477,7 @@ impl Rand for XorShiftRng {\n /// `Rand` implementation for `f32` and `f64` for the half-open\n /// `[0,1)`.\n ///\n-/// # Example\n+/// # Examples\n /// ```rust\n /// use std::rand::{random, Open01};\n ///\n@@ -493,7 +493,7 @@ pub struct Open01<F>(pub F);\n /// `Rand` implementation of `f32` and `f64` for the half-open\n /// `[0,1)`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand::{random, Closed01};"}, {"sha": "f39021d4a5f04d660a19dbc4410b85185518f01b", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -100,7 +100,7 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n \n /// Something that can be used to reseed an RNG via `ReseedingRng`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand::{Rng, SeedableRng, StdRng};"}, {"sha": "bf4b5ee2c0e7498bad4c98656b101370984d9a6e", "filename": "src/librbml/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -36,7 +36,7 @@ fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64>\n \n /// Writes to an owned, growable byte vector that supports seeking.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]"}, {"sha": "96433729a9b96ff675d29d4d7f8183b3a380cf4c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -17,7 +17,7 @@ use metadata::csearch;\n use middle::{astencode, def};\n use middle::pat_util::def_to_path;\n use middle::ty::{self, Ty};\n-use middle::astconv_util::{ast_ty_to_prim_ty};\n+use middle::astconv_util::ast_ty_to_prim_ty;\n \n use syntax::ast::{self, Expr};\n use syntax::codemap::Span;\n@@ -132,16 +132,16 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n     }\n }\n \n-// FIXME (#33): this doesn't handle big integer/float literals correctly\n-// (nor does the rest of our literal handling).\n #[derive(Clone, PartialEq)]\n pub enum const_val {\n     const_float(f64),\n     const_int(i64),\n     const_uint(u64),\n     const_str(InternedString),\n-    const_binary(Rc<Vec<u8> >),\n-    const_bool(bool)\n+    const_binary(Rc<Vec<u8>>),\n+    const_bool(bool),\n+    Struct(ast::NodeId),\n+    Tuple(ast::NodeId)\n }\n \n pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<ast::Pat> {\n@@ -226,9 +226,13 @@ pub enum ErrKind {\n     NegateOnString,\n     NegateOnBoolean,\n     NegateOnBinary,\n+    NegateOnStruct,\n+    NegateOnTuple,\n     NotOnFloat,\n     NotOnString,\n     NotOnBinary,\n+    NotOnStruct,\n+    NotOnTuple,\n \n     AddiWithOverflow(i64, i64),\n     SubiWithOverflow(i64, i64),\n@@ -242,7 +246,8 @@ pub enum ErrKind {\n     ModuloWithOverflow,\n     MissingStructField,\n     NonConstPath,\n-    NonConstStruct,\n+    ExpectedConstTuple,\n+    ExpectedConstStruct,\n     TupleIndexOutOfBounds,\n \n     MiscBinaryOp,\n@@ -262,9 +267,13 @@ impl ConstEvalErr {\n             NegateOnString => \"negate on string\".into_cow(),\n             NegateOnBoolean => \"negate on boolean\".into_cow(),\n             NegateOnBinary => \"negate on binary literal\".into_cow(),\n+            NegateOnStruct => \"negate on struct\".into_cow(),\n+            NegateOnTuple => \"negate on tuple\".into_cow(),\n             NotOnFloat => \"not on float or string\".into_cow(),\n             NotOnString => \"not on float or string\".into_cow(),\n             NotOnBinary => \"not on binary literal\".into_cow(),\n+            NotOnStruct => \"not on struct\".into_cow(),\n+            NotOnTuple => \"not on tuple\".into_cow(),\n \n             AddiWithOverflow(..) => \"attempted to add with overflow\".into_cow(),\n             SubiWithOverflow(..) => \"attempted to sub with overflow\".into_cow(),\n@@ -278,7 +287,8 @@ impl ConstEvalErr {\n             ModuloWithOverflow   => \"attempted remainder with overflow\".into_cow(),\n             MissingStructField  => \"nonexistent struct field\".into_cow(),\n             NonConstPath        => \"non-constant path in constant expr\".into_cow(),\n-            NonConstStruct      => \"non-constant struct in constant expr\".into_cow(),\n+            ExpectedConstTuple => \"expected constant tuple\".into_cow(),\n+            ExpectedConstStruct => \"expected constant struct\".into_cow(),\n             TupleIndexOutOfBounds => \"tuple index out of bounds\".into_cow(),\n \n             MiscBinaryOp => \"bad operands for binary\".into_cow(),\n@@ -341,6 +351,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           const_str(_) => signal!(e, NegateOnString),\n           const_bool(_) => signal!(e, NegateOnBoolean),\n           const_binary(_) => signal!(e, NegateOnBinary),\n+          const_val::Tuple(_) => signal!(e, NegateOnTuple),\n+          const_val::Struct(..) => signal!(e, NegateOnStruct),\n         }\n       }\n       ast::ExprUnary(ast::UnNot, ref inner) => {\n@@ -351,6 +363,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           const_str(_) => signal!(e, NotOnString),\n           const_float(_) => signal!(e, NotOnFloat),\n           const_binary(_) => signal!(e, NotOnBinary),\n+          const_val::Tuple(_) => signal!(e, NotOnTuple),\n+          const_val::Struct(..) => signal!(e, NotOnStruct),\n         }\n       }\n       ast::ExprBinary(op, ref a, ref b) => {\n@@ -540,33 +554,52 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             None => const_int(0)\n         }\n       }\n+      ast::ExprTup(_) => {\n+        const_val::Tuple(e.id)\n+      }\n+      ast::ExprStruct(..) => {\n+        const_val::Struct(e.id)\n+      }\n       ast::ExprTupField(ref base, index) => {\n-        // Get the base tuple if it is constant\n-        if let Some(&ast::ExprTup(ref fields)) = lookup_const(tcx, &**base).map(|s| &s.node) {\n-            // Check that the given index is within bounds and evaluate its value\n-            if fields.len() > index.node {\n-                return eval_const_expr_partial(tcx, &*fields[index.node], None);\n+        if let Ok(c) = eval_const_expr_partial(tcx, base, None) {\n+            if let const_val::Tuple(tup_id) = c {\n+                if let ast::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n+                    if index.node < fields.len() {\n+                        return eval_const_expr_partial(tcx, &fields[index.node], None)\n+                    } else {\n+                        signal!(e, TupleIndexOutOfBounds);\n+                    }\n+                } else {\n+                    unreachable!()\n+                }\n             } else {\n-                signal!(e, TupleIndexOutOfBounds);\n+                signal!(base, ExpectedConstTuple);\n             }\n+        } else {\n+            signal!(base, NonConstPath)\n         }\n-\n-        signal!(e, NonConstStruct);\n       }\n       ast::ExprField(ref base, field_name) => {\n         // Get the base expression if it is a struct and it is constant\n-        if let Some(&ast::ExprStruct(_, ref fields, _)) = lookup_const(tcx, &**base)\n-                                                            .map(|s| &s.node) {\n-            // Check that the given field exists and evaluate it\n-            if let Some(f) = fields.iter().find(|f|\n-                                           f.ident.node.as_str() == field_name.node.as_str()) {\n-                return eval_const_expr_partial(tcx, &*f.expr, None);\n+        if let Ok(c) = eval_const_expr_partial(tcx, base, None) {\n+            if let const_val::Struct(struct_id) = c {\n+                if let ast::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {\n+                    // Check that the given field exists and evaluate it\n+                    if let Some(f) = fields.iter().find(|f| f.ident.node.as_str()\n+                                                         == field_name.node.as_str()) {\n+                        return eval_const_expr_partial(tcx, &*f.expr, None)\n+                    } else {\n+                        signal!(e, MissingStructField);\n+                    }\n+                } else {\n+                    unreachable!()\n+                }\n             } else {\n-                signal!(e, MissingStructField);\n+                signal!(base, ExpectedConstStruct);\n             }\n+        } else {\n+            signal!(base, NonConstPath);\n         }\n-\n-        signal!(e, NonConstStruct);\n       }\n       _ => signal!(e, MiscCatchAll)\n     };"}, {"sha": "a871602b86519f47d6ab3520fb7b09aa042b59d6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -5853,16 +5853,13 @@ pub fn eval_repeat_count(tcx: &ctxt, count_expr: &ast::Expr) -> uint {\n             let found = match val {\n                 const_eval::const_uint(count) => return count as uint,\n                 const_eval::const_int(count) if count >= 0 => return count as uint,\n-                const_eval::const_int(_) =>\n-                    \"negative integer\",\n-                const_eval::const_float(_) =>\n-                    \"float\",\n-                const_eval::const_str(_) =>\n-                    \"string\",\n-                const_eval::const_bool(_) =>\n-                    \"boolean\",\n-                const_eval::const_binary(_) =>\n-                    \"binary array\"\n+                const_eval::const_int(_) => \"negative integer\",\n+                const_eval::const_float(_) => \"float\",\n+                const_eval::const_str(_) => \"string\",\n+                const_eval::const_bool(_) => \"boolean\",\n+                const_eval::const_binary(_) => \"binary array\",\n+                const_eval::Struct(..) => \"struct\",\n+                const_eval::Tuple(_) => \"tuple\"\n             };\n             span_err!(tcx.sess, count_expr.span, E0306,\n                 \"expected positive integer for repeat count, found {}\","}, {"sha": "38502e3c10241cbc333fb673df2de2e1a892d58e", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -193,7 +193,7 @@ pub fn can_reach<T, S>(edges_map: &HashMap<T, Vec<T>, S>, source: T,\n /// ```\n /// but currently it is not possible.\n ///\n-/// # Example\n+/// # Examples\n /// ```\n /// struct Context {\n ///    cache: RefCell<HashMap<uint, uint>>"}, {"sha": "2992ddbc4f4533ac2ca3517bc3c573c863084e13", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -29,7 +29,7 @@\n /// The flags should only be defined for integer types, otherwise unexpected\n /// type errors may occur at compile time.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```{.rust}\n /// #[macro_use] extern crate rustc_bitflags;"}, {"sha": "4ff3c1f0075e95ee47811bb6d48831179d7d9058", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -686,39 +686,57 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n         return None;\n     }\n \n-    let matches =\n-        match getopts::getopts(&args[..], &config::optgroups()) {\n-            Ok(m) => m,\n-            Err(f_stable_attempt) => {\n-                // redo option parsing, including unstable options this time,\n-                // in anticipation that the mishandled option was one of the\n-                // unstable ones.\n-                let all_groups : Vec<getopts::OptGroup>\n-                    = config::rustc_optgroups().into_iter().map(|x|x.opt_group).collect();\n-                match getopts::getopts(&args, &all_groups) {\n-                    Ok(m_unstable) => {\n-                        let r = m_unstable.opt_strs(\"Z\");\n-                        let include_unstable_options = r.iter().any(|x| *x == \"unstable-options\");\n-                        if include_unstable_options {\n-                            m_unstable\n+    fn allows_unstable_options(matches: &getopts::Matches) -> bool {\n+        let r = matches.opt_strs(\"Z\");\n+        r.iter().any(|x| *x == \"unstable-options\")\n+    }\n+\n+    fn parse_all_options(args: &Vec<String>) -> getopts::Matches {\n+        let all_groups : Vec<getopts::OptGroup>\n+            = config::rustc_optgroups().into_iter().map(|x|x.opt_group).collect();\n+        match getopts::getopts(&args[..], &all_groups) {\n+            Ok(m) => {\n+                if !allows_unstable_options(&m) {\n+                    // If -Z unstable-options was not specified, verify that\n+                    // no unstable options were present.\n+                    for opt in config::rustc_optgroups().into_iter().filter(|x| !x.is_stable()) {\n+                        let opt_name = if !opt.opt_group.long_name.is_empty() {\n+                            &opt.opt_group.long_name\n                         } else {\n-                            early_error(&f_stable_attempt.to_string());\n+                            &opt.opt_group.short_name\n+                        };\n+                        if m.opt_present(opt_name) {\n+                            early_error(&format!(\"use of unstable option '{}' requires \\\n+                                                  -Z unstable-options\", opt_name));\n                         }\n                     }\n-                    Err(_) => {\n-                        // ignore the error from the unstable attempt; just\n-                        // pass the error we got from the first try.\n-                        early_error(&f_stable_attempt.to_string());\n-                    }\n                 }\n+                m\n             }\n-        };\n+            Err(f) => early_error(&f.to_string())\n+        }\n+    }\n \n-    let r = matches.opt_strs(\"Z\");\n-    let include_unstable_options = r.iter().any(|x| *x == \"unstable-options\");\n+    // As a speed optimization, first try to parse the command-line using just\n+    // the stable options.\n+    let matches = match getopts::getopts(&args[..], &config::optgroups()) {\n+        Ok(ref m) if allows_unstable_options(m) => {\n+            // If -Z unstable-options was specified, redo parsing with the\n+            // unstable options to ensure that unstable options are defined\n+            // in the returned getopts::Matches.\n+            parse_all_options(&args)\n+        }\n+        Ok(m) => m,\n+        Err(_) => {\n+            // redo option parsing, including unstable options this time,\n+            // in anticipation that the mishandled option was one of the\n+            // unstable ones.\n+            parse_all_options(&args)\n+        }\n+    };\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n-        usage(matches.opt_present(\"verbose\"), include_unstable_options);\n+        usage(matches.opt_present(\"verbose\"), allows_unstable_options(&matches));\n         return None;\n     }\n "}, {"sha": "8dcabe0a94bb82f44887a9dc143f4bf1560c4671", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -505,8 +505,10 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                   // pass. Reporting here is a bit late.\n                   cx.sess().span_err(e.span,\n                                      \"const index-expr is out of bounds\");\n+                  C_undef(type_of::type_of(cx, bt).element_type())\n+              } else {\n+                  const_get_elt(cx, arr, &[iv as c_uint])\n               }\n-              const_get_elt(cx, arr, &[iv as c_uint])\n           }\n           ast::ExprCast(ref base, _) => {\n             let llty = type_of::type_of(cx, ety);"}, {"sha": "9fa8cf7941e33636dcdca0708c34fadb52004c97", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -54,23 +54,6 @@\n         return window.history && typeof window.history.pushState === \"function\";\n     }\n \n-    function resizeShortBlocks() {\n-        if (resizeTimeout) {\n-            clearTimeout(resizeTimeout);\n-        }\n-        resizeTimeout = setTimeout(function() {\n-            var contentWidth = $('.content').width();\n-            $('.docblock.short').width(function() {\n-                return contentWidth - 40 - $(this).prev().width();\n-            }).addClass('nowrap');\n-            $('.summary-column').width(function() {\n-                return contentWidth - 40 - $(this).prev().width();\n-            })\n-        }, 150);\n-    }\n-    resizeShortBlocks();\n-    $(window).on('resize', resizeShortBlocks);\n-\n     function highlightSourceLines(ev) {\n         var i, from, to, match = window.location.hash.match(/^#?(\\d+)(?:-(\\d+))?$/);\n         if (match) {"}, {"sha": "26994a6d79d7fcfc1951014e82dec11eb052d4d9", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -29,7 +29,7 @@ const CHARS: &'static [u8] = b\"0123456789abcdef\";\n impl ToHex for [u8] {\n     /// Turn a vector of `u8` bytes into a hexadecimal string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// extern crate serialize;\n@@ -96,7 +96,7 @@ impl FromHex for str {\n     /// You can use the `String::from_utf8` function to turn a\n     /// `Vec<u8>` into a string with characters corresponding to those values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// This converts a string literal to hexadecimal and back.\n     ///"}, {"sha": "18f86901b8f440517f4e4238af2b0210ede94450", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -225,7 +225,7 @@ fn test_resize_policy() {\n /// 3. Emmanuel Goossaert. [\"Robin Hood hashing: backward shift\n ///    deletion\"](http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/)\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::HashMap;\n@@ -497,7 +497,7 @@ impl<K, V, S> HashMap<K, V, S>\n impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n     /// Create an empty HashMap.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -511,7 +511,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n \n     /// Creates an empty hash map with the given initial capacity.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -531,7 +531,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// The creates map has the default initial capacity.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -559,7 +559,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// cause many collisions and very poor performance. Setting it\n     /// manually using this function can expose a DoS attack vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -586,7 +586,7 @@ impl<K, V, S> HashMap<K, V, S>\n \n     /// Returns the number of elements the map can hold without reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -607,7 +607,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// Panics if the new allocation size overflows `usize`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -714,7 +714,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// down as much as possible while maintaining the internal rules\n     /// and possibly leaving some space in accordance with the resize policy.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -806,7 +806,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// An iterator visiting all keys in arbitrary order.\n     /// Iterator element type is `&'a K`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -831,7 +831,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// An iterator visiting all values in arbitrary order.\n     /// Iterator element type is `&'a V`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -856,7 +856,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// Iterator element type is `(&'a K, &'a V)`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -879,7 +879,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// with mutable references to the values.\n     /// Iterator element type is `(&'a K, &'a mut V)`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -907,7 +907,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// pair out of the map in arbitrary order. The map cannot be used after\n     /// calling this.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -942,7 +942,7 @@ impl<K, V, S> HashMap<K, V, S>\n \n     /// Returns the number of elements in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -957,7 +957,7 @@ impl<K, V, S> HashMap<K, V, S>\n \n     /// Returns true if the map contains no elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -974,7 +974,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// Clears the map, returning all key-value pairs as an iterator. Keeps the\n     /// allocated memory for reuse.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -1005,7 +1005,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// Clears the map, removing all key-value pairs. Keeps the allocated memory\n     /// for reuse.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -1027,7 +1027,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// `Hash` and `Eq` on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -1050,7 +1050,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// `Hash` and `Eq` on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -1073,7 +1073,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// `Hash` and `Eq` on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -1096,7 +1096,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// Inserts a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise, `None` is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n@@ -1128,7 +1128,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// `Hash` and `Eq` on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashMap;"}, {"sha": "35115ad77fefda0ae95838f368e7dae017581e04", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -38,7 +38,7 @@ use super::state::HashState;\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n /// requires that the elements implement the `Eq` and `Hash` traits.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::HashSet;\n@@ -100,7 +100,7 @@ pub struct HashSet<T, S = RandomState> {\n impl<T: Hash + Eq> HashSet<T, RandomState> {\n     /// Create an empty HashSet.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -115,7 +115,7 @@ impl<T: Hash + Eq> HashSet<T, RandomState> {\n     /// Create an empty HashSet with space for at least `n` elements in\n     /// the hash table.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -136,7 +136,7 @@ impl<T, S> HashSet<T, S>\n     ///\n     /// The hash set is also created with the default initial capacity.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -160,7 +160,7 @@ impl<T, S> HashSet<T, S>\n     /// cause many collisions and very poor performance. Setting it\n     /// manually using this function can expose a DoS attack vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -181,7 +181,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Returns the number of elements the set can hold without reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -202,7 +202,7 @@ impl<T, S> HashSet<T, S>\n     ///\n     /// Panics if the new allocation size overflows `usize`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -218,7 +218,7 @@ impl<T, S> HashSet<T, S>\n     /// down as much as possible while maintaining the internal rules\n     /// and possibly leaving some space in accordance with the resize policy.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -238,7 +238,7 @@ impl<T, S> HashSet<T, S>\n     /// An iterator visiting all elements in arbitrary order.\n     /// Iterator element type is &'a T.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -260,7 +260,7 @@ impl<T, S> HashSet<T, S>\n     /// of the set in arbitrary order. The set cannot be used after calling\n     /// this.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -286,7 +286,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Visit the values representing the difference.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -316,7 +316,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Visit the values representing the symmetric difference.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -342,7 +342,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Visit the values representing the intersection.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -367,7 +367,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Visit the values representing the union.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -389,7 +389,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Return the number of elements in the set\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -404,7 +404,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Returns true if the set contains no elements\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -430,7 +430,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Clears the set, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -449,7 +449,7 @@ impl<T, S> HashSet<T, S>\n     /// `Hash` and `Eq` on the borrowed form *must* match those for\n     /// the value type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -468,7 +468,7 @@ impl<T, S> HashSet<T, S>\n     /// Returns `true` if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -489,7 +489,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Returns `true` if the set is a subset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -510,7 +510,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Returns `true` if the set is a superset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -536,7 +536,7 @@ impl<T, S> HashSet<T, S>\n     /// Adds a value to the set. Returns `true` if the value was not already\n     /// present in the set.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -557,7 +557,7 @@ impl<T, S> HashSet<T, S>\n     /// `Hash` and `Eq` on the borrowed form *must* match those for\n     /// the value type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::HashSet;"}, {"sha": "fb7de8c5f66553d869822996385bfea03a545b8b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -38,7 +38,7 @@ use sys::os as os_imp;\n /// * There are insufficient permissions to access the current directory.\n /// * The internal buffer is not large enough to hold the path.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -55,7 +55,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n /// Changes the current working directory to the specified path, returning\n /// whether the change was completed successfully or not.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -99,7 +99,7 @@ pub struct VarsOs { inner: os_imp::Env }\n /// environment is not valid unicode. If this is not desired, consider using the\n /// `env::vars_os` function.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -122,7 +122,7 @@ pub fn vars() -> Vars {\n /// variables at the time of this invocation, modifications to environment\n /// variables afterwards will not be reflected in the returned iterator.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -163,7 +163,7 @@ impl Iterator for VarsOs {\n /// valid unicode. If the environment variable is not present, or it is not\n /// valid unicode, then `Err` will be returned.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -185,7 +185,7 @@ pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n /// Fetches the environment variable `key` from the current process, returning\n /// None if the variable isn't set.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -243,7 +243,7 @@ impl Error for VarError {\n /// Sets the environment variable `k` to the value `v` for the currently running\n /// process.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -279,7 +279,7 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n ///\n /// Returns an iterator over the paths contained in `unparsed`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -323,7 +323,7 @@ pub struct JoinPathsError {\n /// `Path`s contains an invalid character for constructing the `PATH`\n /// variable (a double quote on Windows or a colon on Unix).\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -371,7 +371,7 @@ impl Error for JoinPathsError {\n /// 'USERPROFILE' environment variable if it is set and not equal to the empty\n /// string.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -478,7 +478,7 @@ pub struct ArgsOs { inner: os_imp::Args }\n /// process is not valid unicode. If this is not desired it is recommended to\n /// use the `args_os` function instead.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;\n@@ -500,7 +500,7 @@ pub fn args() -> Args {\n /// set to arbitrary text, and it may not even exist, so this property should\n /// not be relied upon for security purposes.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::env;"}, {"sha": "44564ebf53d5828024a37b58cd4645f97d16c842", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -41,7 +41,7 @@ use vec::Vec;\n /// a `CString` do *not* contain the trailing nul terminator unless otherwise\n /// specified.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```no_run\n /// # extern crate libc;\n@@ -325,7 +325,7 @@ impl CStr {\n     /// > currently implemented with an up-front calculation of the length of\n     /// > the string. This is not guaranteed to always be the case.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```no_run\n     /// # extern crate libc;"}, {"sha": "0faae7015a6e7ea99588b4f8fb311ec3bc312887", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -36,7 +36,7 @@ mod tempdir;\n /// it was opened with. Files also implement `Seek` to alter the logical cursor\n /// that the file contains internally.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```no_run\n /// use std::io::prelude::*;\n@@ -392,7 +392,7 @@ impl DirEntry {\n \n /// Remove a file from the underlying filesystem.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust,no_run\n /// use std::fs;\n@@ -420,7 +420,7 @@ pub fn remove_file<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n /// This function will traverse soft links to query information about the\n /// destination file.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust,no_run\n /// # fn foo() -> std::io::Result<()> {\n@@ -444,7 +444,7 @@ pub fn metadata<P: AsPath + ?Sized>(path: &P) -> io::Result<Metadata> {\n \n /// Rename a file or directory to a new name.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust,no_run\n /// use std::fs;\n@@ -472,7 +472,7 @@ pub fn rename<P: AsPath + ?Sized, Q: AsPath + ?Sized>(from: &P, to: &Q)\n /// Note that if `from` and `to` both point to the same file, then the file\n /// will likely get truncated by this operation.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::fs;\n@@ -541,7 +541,7 @@ pub fn read_link<P: AsPath + ?Sized>(path: &P) -> io::Result<PathBuf> {\n \n /// Create a new, empty directory at the provided path\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::fs;\n@@ -587,7 +587,7 @@ pub fn create_dir_all<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n \n /// Remove an existing, empty directory\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::fs;\n@@ -638,7 +638,7 @@ pub fn remove_dir_all<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n /// be encountered after an iterator is initially constructed.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::io;\n@@ -776,7 +776,7 @@ pub fn set_file_times<P: AsPath + ?Sized>(path: &P, accessed: u64,\n \n /// Changes the permissions found on a file or a directory.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "a50229432672509ae3e7b288005a17ea75d374ef", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -26,7 +26,7 @@\n /// The multi-argument form of this macro panics with a string and has the\n /// `format!` syntax for building a string.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```should_fail\n /// # #![allow(unreachable_code)]\n@@ -74,7 +74,7 @@ macro_rules! print {\n /// The syntax of this macro is the same as that used for `format!`. For more\n /// information, see `std::fmt` and `std::old_io::stdio`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// println!(\"hello there!\");\n@@ -177,7 +177,7 @@ pub mod builtin {\n     ///\n     /// For more information, see the documentation in `std::fmt`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::fmt;\n@@ -200,7 +200,7 @@ pub mod builtin {\n     /// will be emitted.  To not emit a compile error, use the `option_env!`\n     /// macro instead.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let path: &'static str = env!(\"PATH\");\n@@ -219,7 +219,7 @@ pub mod builtin {\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let key: Option<&'static str> = option_env!(\"SECRET_KEY\");\n@@ -263,7 +263,7 @@ pub mod builtin {\n     /// Integer and floating point literals are stringified in order to be\n     /// concatenated.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let s = concat!(\"test\", 10, 'b', true);\n@@ -278,7 +278,7 @@ pub mod builtin {\n     /// the invocation of the `line!()` macro itself, but rather the first macro\n     /// invocation leading up to the invocation of the `line!()` macro.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let current_line = line!();\n@@ -293,7 +293,7 @@ pub mod builtin {\n     /// the invocation of the `column!()` macro itself, but rather the first macro\n     /// invocation leading up to the invocation of the `column!()` macro.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let current_col = column!();\n@@ -309,7 +309,7 @@ pub mod builtin {\n     /// first macro invocation leading up to the invocation of the `file!()`\n     /// macro.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let this_file = file!();\n@@ -324,7 +324,7 @@ pub mod builtin {\n     /// stringification of all the tokens passed to the macro. No restrictions\n     /// are placed on the syntax of the macro invocation itself.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let one_plus_one = stringify!(1 + 1);\n@@ -339,7 +339,7 @@ pub mod builtin {\n     /// contents of the filename specified. The file is located relative to the\n     /// current file (similarly to how modules are found),\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust,ignore\n     /// let secret_key = include_str!(\"secret-key.ascii\");\n@@ -353,7 +353,7 @@ pub mod builtin {\n     /// the contents of the filename specified. The file is located relative to\n     /// the current file (similarly to how modules are found),\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust,ignore\n     /// let secret_key = include_bytes!(\"secret-key.bin\");\n@@ -367,7 +367,7 @@ pub mod builtin {\n     /// leading back up to the crate root. The first component of the path\n     /// returned is the name of the crate currently being compiled.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// mod test {\n@@ -390,7 +390,7 @@ pub mod builtin {\n     /// The syntax given to this macro is the same syntax as the `cfg`\n     /// attribute.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let my_directory = if cfg!(windows) {"}, {"sha": "b8cb8cb5289295298bfe64d65025dd7142bf143d", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -82,7 +82,7 @@ impl Iterator for LookupHost {\n /// This method may perform a DNS query to resolve `host` and may also inspect\n /// system configuration to resolve the specified hostname.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```no_run\n /// use std::net;"}, {"sha": "76c0483547330eddd7db2ea303e13369b5e8c32f", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -21,7 +21,7 @@ use sys_common::AsInner;\n ///\n /// The socket will be closed when the value is dropped.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```no_run\n /// use std::io::prelude::*;"}, {"sha": "041e6551ff5ec0c38d1cda7f3ae0c6e9061448ad", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -21,7 +21,7 @@ use sys_common::AsInner;\n /// IPv6 addresses, and there is no corresponding notion of a server because UDP\n /// is a datagram protocol.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```no_run\n /// use std::net::UdpSocket;"}, {"sha": "3ee73f5ff60335415f04adab2abfa507b64af9bb", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -31,7 +31,7 @@ use vec::Vec;\n /// `BufferedReader` performs large, infrequent reads on the underlying\n /// `Reader` and maintains an in-memory buffer of the results.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::old_io::{BufferedReader, File};\n@@ -134,7 +134,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n ///\n /// This writer will be flushed when it is dropped.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::old_io::{BufferedWriter, File};\n@@ -320,7 +320,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n ///\n /// The output half will be flushed when this stream is dropped.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]"}, {"sha": "72ba653a9861aae14897cd71b5cd8f9ee08cb705", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -20,7 +20,7 @@ use vec::Vec;\n \n /// Allows reading from a rx.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::mpsc::channel;\n@@ -111,7 +111,7 @@ impl Reader for ChanReader {\n \n /// Allows writing to a tx.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// # #![allow(unused_must_use)]"}, {"sha": "b0116bd4efdc47932014cd5a1bf2a9fb1d08a59e", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -27,7 +27,7 @@\n //! the metadata of a file. This includes getting the `stat` information,\n //! reading off particular bits of it, etc.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]\n@@ -102,7 +102,7 @@ impl File {\n     /// Open a file at `path` in the mode specified by the `mode` and `access`\n     /// arguments\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust,should_fail\n     /// use std::old_io::{File, Open, ReadWrite};\n@@ -173,7 +173,7 @@ impl File {\n     ///\n     /// For more information, see the `File::open_mode` function.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::old_io::File;\n@@ -192,7 +192,7 @@ impl File {\n     ///\n     /// For more information, see the `File::open_mode` function.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// # #![allow(unused_must_use)]\n@@ -283,7 +283,7 @@ impl File {\n \n /// Unlink a file from the underlying filesystem.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -314,7 +314,7 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n /// directory, etc. This function will traverse symlinks to query\n /// information about the destination file.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::old_io::fs;\n@@ -356,7 +356,7 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n \n /// Rename a file or directory to a new name.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -384,7 +384,7 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n /// Note that if `from` and `to` both point to the same file, then the file\n /// will likely get truncated by this operation.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -434,7 +434,7 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n /// Changes the permission mode bits found on a file or a directory. This\n /// function takes a mask from the `io` module\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -505,7 +505,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n \n /// Create a new, empty directory at the provided path\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -529,7 +529,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n \n /// Remove an existing, empty directory\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -553,7 +553,7 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n \n /// Retrieve a vector containing all entries within a provided directory\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::old_io::fs::PathExtensions;"}, {"sha": "2445da9ea3babb9e71fb356aa52b3456a35976c4", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -51,7 +51,7 @@ impl Writer for Vec<u8> {\n \n /// Writes to an owned, growable byte vector\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -111,7 +111,7 @@ impl Writer for MemWriter {\n \n /// Reads from an owned byte vector\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -241,7 +241,7 @@ impl<'a> Buffer for &'a [u8] {\n /// If a write will not fit in the buffer, it returns an error and does not\n /// write any data.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n@@ -313,7 +313,7 @@ impl<'a> Seek for BufWriter<'a> {\n \n /// Reads from a fixed-size byte slice\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]"}, {"sha": "f71698fa72586db925a904eaa4f805c21c1ad156", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -1276,7 +1276,7 @@ impl<'a> Writer for &'a mut (Writer+'a) {\n /// A `RefWriter` is a struct implementing `Writer` which contains a reference\n /// to another writer. This is often useful when composing streams.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::old_io::util::TeeReader;\n@@ -1401,7 +1401,7 @@ pub trait Buffer: Reader {\n     /// encoded Unicode codepoints. If a newline is encountered, then the\n     /// newline is contained in the returned string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::old_io::BufReader;\n@@ -1625,7 +1625,7 @@ impl<'a, T, A: ?Sized + Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n /// Creates a standard error for a commonly used flavor of error. The `detail`\n /// field of the returned error will always be `None`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::old_io as io;"}, {"sha": "5935253290283b66d97e3b505b22e28d8a815265", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -50,7 +50,7 @@ impl UnixStream {\n     ///\n     /// The returned stream will be closed when the object falls out of scope.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// # #![allow(unused_must_use)]\n@@ -175,7 +175,7 @@ impl UnixListener {\n     ///\n     /// This listener will be closed when it falls out of scope.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # fn foo() {"}, {"sha": "6fb8020a3d602526393a2b5c6a65d860b5856e62", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -38,7 +38,7 @@ use sys_common;\n ///\n /// The socket will be closed when the value is dropped.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```no_run\n /// use std::old_io::TcpStream;\n@@ -130,7 +130,7 @@ impl TcpStream {\n     /// This method will close the reading portion of this connection, causing\n     /// all pending and future reads to immediately return with an error.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```no_run\n     /// # #![allow(unused_must_use)]\n@@ -373,7 +373,7 @@ impl TcpAcceptor {\n     /// regardless of whether the timeout has expired or not (the accept will\n     /// not block in this case).\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```no_run\n     /// use std::old_io::TcpListener;\n@@ -417,7 +417,7 @@ impl TcpAcceptor {\n     /// This is useful for waking up a thread in an accept loop to indicate that\n     /// it should exit.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::old_io::{TcpListener, Listener, Acceptor, EndOfFile};"}, {"sha": "97ef3da2f369a26a2e1ffc639ecd600ebf72b96b", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -28,7 +28,7 @@ use sys_common;\n /// IPv6 addresses, and there is no corresponding notion of a server because UDP\n /// is a datagram protocol.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust,no_run\n /// # #![allow(unused_must_use)]"}, {"sha": "b78c8acb1900d2e312ceccc4aaf555c0405c2c39", "filename": "src/libstd/old_io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fpipe.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -43,7 +43,7 @@ impl PipeStream {\n     /// This operation consumes ownership of the file descriptor and it will be\n     /// closed once the object is deallocated.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```{rust,no_run}\n     /// # #![allow(unused_must_use)]"}, {"sha": "cabba8e358af0cfdab5f7a55913c75390c501945", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -57,7 +57,7 @@ use thread;\n /// process is created via the `Command` struct, which configures the spawning\n /// process and can itself be constructed using a builder-style interface.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```should_fail\n /// use std::old_io::Command;\n@@ -361,7 +361,7 @@ impl Command {\n     /// Executes the command as a child process, waiting for it to finish and\n     /// collecting all of its output.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::old_io::Command;\n@@ -382,7 +382,7 @@ impl Command {\n     /// Executes a command as a child process, waiting for it to finish and\n     /// collecting its exit status.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::old_io::Command;\n@@ -656,7 +656,7 @@ impl Process {\n     /// A value of `None` will clear any previous timeout, and a value of `Some`\n     /// will override any previously set timeout.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```no_run\n     /// use std::old_io::{Command, IoResult};"}, {"sha": "70e8a4ceff0a0e3d8053befeace1961ef529bd74", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -15,7 +15,7 @@\n //! inspected for information about terminal dimensions or for related information\n //! about the stream or terminal to which it is attached.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]"}, {"sha": "de7883c715a2c636e267a59f2f94531fe2b8499e", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -113,7 +113,7 @@ impl Timer {\n     /// invalidated at the end of that statement, and all `recv` calls will\n     /// fail.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::old_io::Timer;\n@@ -165,7 +165,7 @@ impl Timer {\n     /// invalidated at the end of that statement, and all `recv` calls will\n     /// fail.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::old_io::Timer;"}, {"sha": "7551e91178cbae2ec8194575b0720b678f00ffbe", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -46,7 +46,7 @@\n //! suitable for passing to any API that actually operates on the path; it is only intended for\n //! display.\n //!\n-//! ## Example\n+//! ## Examples\n //!\n //! ```rust\n //! use std::old_io::fs::PathExtensions;\n@@ -140,7 +140,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Creates a new Path from a byte vector or string.\n     /// The resulting Path will always be normalized.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -164,7 +164,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Creates a new Path from a byte vector or string, if possible.\n     /// The resulting Path will always be normalized.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -186,7 +186,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the path as a string, if possible.\n     /// If the path is not representable in utf-8, this returns None.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -203,7 +203,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n \n     /// Returns the path as a byte vector\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -217,7 +217,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n \n     /// Converts the Path into an owned byte vector\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -232,7 +232,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n \n     /// Returns an object that implements `Display` for printing paths\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -250,7 +250,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// If there is no filename, nothing will be printed.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -267,7 +267,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the directory component of `self`, as a byte vector (with no trailing separator).\n     /// If `self` has no directory component, returns ['.'].\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -282,7 +282,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the directory component of `self`, as a string, if possible.\n     /// See `dirname` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -301,7 +301,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If `self` represents the root of the file hierarchy, returns None.\n     /// If `self` is \".\" or \"..\", returns None.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -316,7 +316,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the file component of `self`, as a string, if possible.\n     /// See `filename` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -335,7 +335,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// The stem is the portion of the filename just before the last '.'.\n     /// If there is no '.', the entire filename is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -362,7 +362,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the stem of the filename of `self`, as a string, if possible.\n     /// See `filestem` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -382,7 +382,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If there is no extension, None is returned.\n     /// If the filename ends in '.', the empty vector is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -409,7 +409,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the extension of the filename of `self`, as a string, if possible.\n     /// See `extension` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -427,7 +427,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Replaces the filename portion of the path with the given byte vector or string.\n     /// If the replacement name is [], this is equivalent to popping the path.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -453,7 +453,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If the argument is [] or \"\", this removes the extension.\n     /// If `self` has no filename, this is a no-op.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -503,7 +503,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// byte vector or string.\n     /// See `set_filename` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -528,7 +528,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// byte vector or string.\n     /// See `set_extension` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -552,7 +552,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns the directory component of `self`, as a Path.\n     /// If `self` represents the root of the filesystem hierarchy, returns `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -571,7 +571,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// If `self` is not absolute, or vol/cwd-relative in the case of Windows, this returns None.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -586,7 +586,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Pushes a path (as a byte vector or string) onto `self`.\n     /// If the argument represents an absolute path, it replaces `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -610,7 +610,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Pushes multiple paths (as byte vectors or strings) onto `self`.\n     /// See `push` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -639,7 +639,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Returns `true` if the receiver was modified, or `false` if it already\n     /// represented the root of the file hierarchy.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -656,7 +656,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// (as a byte vector or string).\n     /// If the given path is absolute, the new Path will represent just that.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -681,7 +681,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// (as byte vectors or strings).\n     /// See `join` for details.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -703,7 +703,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// An absolute path is defined as one that, when joined to another path, will\n     /// yield back the same absolute path.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -720,7 +720,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// But for Windows paths, it also means the path is not volume-relative or\n     /// relative to the current working directory.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -738,7 +738,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If both paths are relative, they are compared as though they are relative\n     /// to the same parent path.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -757,7 +757,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If `self` is absolute and `base` is relative, or on Windows if both\n     /// paths refer to separate drives, an absolute path is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();\n@@ -773,7 +773,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n \n     /// Returns whether the relative path `child` is a suffix of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # foo();"}, {"sha": "838710b1aec8e3b265a1b88825a4e7b9e80d4cb1", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -603,7 +603,7 @@ impl Path {\n     ///\n     /// Panics if the vector contains a `NUL`, or if it contains invalid UTF-8.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// println!(\"{}\", Path::new(r\"C:\\some\\path\").display());\n@@ -617,7 +617,7 @@ impl Path {\n     ///\n     /// Returns `None` if the vector contains a `NUL`, or if it contains invalid UTF-8.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let path = Path::new_opt(r\"C:\\some\\path\");"}, {"sha": "f81377e80841ba568759de0bc41e8fc978b0cd02", "filename": "src/libstd/os.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -121,7 +121,7 @@ pub const TMPBUF_SZ : uint = 1000;\n /// * There are insufficient permissions to access the current directory.\n /// * The internal buffer is not large enough to hold the path.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -141,7 +141,7 @@ pub fn getcwd() -> IoResult<Path> {\n /// Invalid UTF-8 bytes are replaced with \\uFFFD. See `String::from_utf8_lossy()`\n /// for details.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -177,7 +177,7 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>, Vec<u8>)> {\n ///\n /// Panics if `n` has any interior NULs.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -219,7 +219,7 @@ fn byteify(s: OsString) -> Vec<u8> {\n /// Sets the environment variable `n` to the value `v` for the currently running\n /// process.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -260,7 +260,7 @@ pub fn unsetenv(n: &str) {\n /// Parses input according to platform conventions for the `PATH`\n /// environment variable.\n ///\n-/// # Example\n+/// # Examples\n /// ```rust\n /// use std::os;\n ///\n@@ -291,7 +291,7 @@ pub fn split_paths<T: BytesContainer>(unparsed: T) -> Vec<Path> {\n /// `Path`s contains an invalid character for constructing the `PATH`\n /// variable (a double quote on Windows or a colon on Unix).\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -372,7 +372,7 @@ pub fn self_exe_name() -> Option<Path> {\n ///\n /// Like self_exe_name() but without the binary's name.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -401,7 +401,7 @@ pub fn self_exe_path() -> Option<Path> {\n /// 'USERPROFILE' environment variable if it is set and not equal to the empty\n /// string.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;\n@@ -491,7 +491,7 @@ pub fn tmpdir() -> Path {\n /// directory. If the given path is already an absolute path, return it\n /// as is.\n ///\n-/// # Example\n+/// # Examples\n /// ```rust\n /// use std::os;\n /// use std::old_path::Path;\n@@ -522,7 +522,7 @@ pub fn make_absolute(p: &Path) -> IoResult<Path> {\n /// Changes the current working directory to the specified path, returning\n /// whether the change was completed successfully or not.\n ///\n-/// # Example\n+/// # Examples\n /// ```rust\n /// use std::os;\n /// use std::old_path::Path;\n@@ -543,7 +543,7 @@ pub fn errno() -> i32 {\n \n /// Return the string corresponding to an `errno()` value of `errnum`.\n ///\n-/// # Example\n+/// # Examples\n /// ```rust\n /// use std::os;\n ///\n@@ -739,7 +739,7 @@ extern \"system\" {\n ///\n /// The arguments are interpreted as utf-8, with invalid bytes replaced with \\uFFFD.\n /// See `String::from_utf8_lossy` for details.\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::os;"}, {"sha": "bf71acc522ca4f39c08383d5fa00aa825088711b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -809,7 +809,7 @@ impl<'a> cmp::Ord for Components<'a> {\n /// More details about the overall approach can be found in\n /// the module documentation.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::path::PathBuf;\n@@ -1041,7 +1041,7 @@ impl AsOsStr for PathBuf {\n /// This is an *unsized* type, meaning that it must always be used with behind a\n /// pointer like `&` or `Box`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::path::Path;"}, {"sha": "ebd0820669c53e0b0382915973f8978a224472a5", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -35,7 +35,7 @@ use thread;\n /// process is created via the `Command` struct, which configures the spawning\n /// process and can itself be constructed using a builder-style interface.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```should_fail\n /// # #![feature(process)]\n@@ -288,7 +288,7 @@ impl Command {\n     ///\n     /// By default, stdin, stdout and stderr are inherited by the parent.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # #![feature(process)]"}, {"sha": "e8407ab1115db9fc8e07df55787f62eaf6d9a1c4", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -424,7 +424,7 @@ pub fn random<T: Rand>() -> T {\n \n /// Randomly sample up to `amount` elements from an iterator.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand::{thread_rng, sample};"}, {"sha": "08c43198aa1f1bdf7778862e27e2487c8508a97c", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -22,7 +22,7 @@ use slice::SliceExt;\n ///\n /// It will panic if it there is insufficient data to fulfill a request.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::rand::{reader, Rng};"}, {"sha": "4430cc3b0af826695f88f334d8578b9d98d3e124", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -34,7 +34,7 @@ use sync::{mutex, MutexGuard, PoisonError};\n /// in a runtime panic. If this is not desired, then the unsafe primitives in\n /// `sys` do not have this restriction but may result in undefined behavior.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::{Arc, Mutex, Condvar};\n@@ -66,7 +66,7 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// This structure is identical to `Condvar` except that it is suitable for use\n /// in static initializers for other structures.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::{StaticCondvar, CONDVAR_INIT};"}, {"sha": "01eeed4fb54d018af47bacd1fe249aa4a2364a0b", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -464,7 +464,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// All data sent on the sender will become available on the receiver, and no\n /// send will block the calling task (this channel has an \"infinite buffer\").\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::mpsc::channel;\n@@ -506,7 +506,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// As with asynchronous channels, all senders will panic in `send` if the\n /// `Receiver` has been destroyed.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::mpsc::sync_channel;\n@@ -555,7 +555,7 @@ impl<T: Send> Sender<T> {\n     ///\n     /// This method will never block the current thread.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::sync::mpsc::channel;"}, {"sha": "b5739c36aa9122b307471f99cb6474e29a94a46b", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -24,7 +24,7 @@\n //! received values of receivers in a much more natural syntax then usage of the\n //! `Select` structure directly.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```rust\n //! use std::sync::mpsc::channel;"}, {"sha": "41378a6b3127b0c1f1cd3af558f14f59d8eafca3", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -133,7 +133,7 @@ unsafe impl<T: Send> Sync for Mutex<T> { }\n /// to a `Mutex`, a `destroy` method. This method is unsafe to call, and\n /// documentation can be found directly on the method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::sync::{StaticMutex, MUTEX_INIT};"}, {"sha": "5cad2916624d2272009173a957070946773e8c15", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -24,7 +24,7 @@ use sync::{StaticMutex, MUTEX_INIT};\n /// functionality. This type can only be constructed with the `ONCE_INIT`\n /// value.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::sync::{Once, ONCE_INIT};"}, {"sha": "368e88e4e8b418ea0d20c23d7c87c01ceb1026eb", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -74,7 +74,7 @@ unsafe impl<T: Send + Sync> Sync for RwLock<T> {}\n /// automatic global access as well as lazy initialization. The internal\n /// resources of this RwLock, however, must be manually deallocated.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::{StaticRwLock, RW_LOCK_INIT};"}, {"sha": "2f9873950b62ee4eba074fc97ef25f1540d7e3a3", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -22,7 +22,7 @@ use sync::{Mutex, Condvar};\n /// until the counter is positive, and each release will increment the counter\n /// and unblock any threads if necessary.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::sync::Semaphore;"}, {"sha": "3d31790550b9649eb7df99c93be29356a4138d01", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -58,7 +58,7 @@ impl<'a> Drop for Sentinel<'a> {\n /// Spawns `n` worker threads and replenishes the pool if any worker threads\n /// panic.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::sync::TaskPool;"}, {"sha": "279362416392b767c10b5f8334cddcf6470347a4", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -28,7 +28,7 @@\n //! more useful in practice than this OS-based version which likely requires\n //! unsafe code to interoperate with.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! Using a dynamically allocated TLS key. Note that this key can be shared\n //! among many threads via an `Arc`.\n@@ -73,7 +73,7 @@ use sys::thread_local as imp;\n /// time. The key is also deallocated when the Rust runtime exits or `destroy`\n /// is called, whichever comes first.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```ignore\n /// use tls::os::{StaticKey, INIT};\n@@ -110,7 +110,7 @@ pub struct StaticKeyInner {\n /// Implementations will likely, however, contain unsafe code as this type only\n /// operates on `*mut u8`, an unsafe pointer.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust,ignore\n /// use tls::os::Key;"}, {"sha": "b9be4eb6bf52b2c2405d502deeeb44867ef51f84", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -300,7 +300,7 @@ pub mod compat {\n \n     /// Macro for creating a compatibility fallback for a Windows function\n     ///\n-    /// # Example\n+    /// # Examples\n     /// ```\n     /// compat_fn!(adll32::SomeFunctionW(_arg: LPCWSTR) {\n     ///     // Fallback implementation"}, {"sha": "4c7dcc8b9eb6130d3236cf083721aeaf0f993f6b", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -635,7 +635,7 @@ impl Drop for JoinHandle {\n /// Due to platform restrictions, it is not possible to `Clone` this\n /// handle: the ability to join a child thread is a uniquely-owned\n /// permission.\n-#[must_use]\n+#[must_use = \"thread will be immediately joined if `JoinGuard` is not used\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinGuard<'a, T: 'a> {\n     inner: JoinInner<T>,"}, {"sha": "08780292c88b1ca288c494caf17463585a9088de", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -68,7 +68,7 @@ pub mod __impl {\n /// within a thread, and values support destructors which will be run when a\n /// thread exits.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::cell::RefCell;"}, {"sha": "86e6c059a70db8890b508a39aa2fc4d003891bc5", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -21,7 +21,7 @@\n //! period of time and it is not required to relinquish ownership of the\n //! contents.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```\n //! scoped_thread_local!(static FOO: u32);\n@@ -139,7 +139,7 @@ impl<T> Key<T> {\n     /// Upon return, this function will restore the previous value, if any\n     /// was available.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// scoped_thread_local!(static FOO: u32);\n@@ -191,7 +191,7 @@ impl<T> Key<T> {\n     ///\n     /// This function will panic if `set` has not previously been called.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```no_run\n     /// scoped_thread_local!(static FOO: u32);"}, {"sha": "ea413ac0dc8412b7318660f9f6e8070e98d5a8af", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -5372,7 +5372,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse extern crate links\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// extern crate url;\n     /// extern crate foo = \"bar\"; //deprecated"}, {"sha": "050d2adf0504b729d6f541a09dba05ca516221ab", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -479,7 +479,7 @@ impl<'a> Iterator for Utf16Items<'a> {\n /// Create an iterator over the UTF-16 encoded codepoints in `v`,\n /// returning invalid surrogates as `LoneSurrogate`s.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};"}, {"sha": "b205d87598cfe5648912e48f9fda838de5e415aa", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -14,6 +14,7 @@\n \n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n+#include \"llvm/Support/Host.h\"\n #include \"llvm/Target/TargetLibraryInfo.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n@@ -83,6 +84,11 @@ LLVMRustCreateTargetMachine(const char *triple,\n         return NULL;\n     }\n \n+    StringRef real_cpu = cpu;\n+    if (real_cpu == \"native\") {\n+        real_cpu = sys::getHostCPUName();\n+    }\n+\n     TargetOptions Options;\n     Options.PositionIndependentExecutable = PositionIndependentExecutable;\n     Options.NoFramePointerElim = NoFramePointerElim;\n@@ -96,7 +102,7 @@ LLVMRustCreateTargetMachine(const char *triple,\n     }\n \n     TargetMachine *TM = TheTarget->createTargetMachine(Trip.getTriple(),\n-                                                       cpu,\n+                                                       real_cpu,\n                                                        feature,\n                                                        Options,\n                                                        RM,"}, {"sha": "a84067539e95c5dc7c7e315bae3e36080ddf4cae", "filename": "src/snapshots.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -1,4 +1,5 @@\n S 2015-03-07 270a677\n+  bitrig-x86_64 4b2f11a96b1b5b3782d74bda707aca33bc179880\n   freebsd-x86_64 3c147d8e4cfdcb02c2569f5aca689a1d8920d17b\n   linux-i386 50a47ef247610fb089d2c4f24e4b641eb0ba4afb\n   linux-x86_64 ccb20709b3c984f960ddde996451be8ce2268d7c"}, {"sha": "84d35292608241fbebdc8006e5503a11a1a01688", "filename": "src/test/compile-fail/const-array-oob.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const FOO: [u32; 3] = [1, 2, 3];\n+const BAR: u32 = FOO[5]; //~ ERROR const index-expr is out of bounds\n+\n+fn main() {\n+    let _ = BAR;\n+}"}, {"sha": "121581412202cdc882e168f51372689d7803408e", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -19,7 +19,7 @@ fn main() {\n //~| found `()`\n //~| expected usize\n //~| found ()\n-//~| ERROR expected constant integer for repeat count, found non-constant expression\n+//~| ERROR expected positive integer for repeat count, found tuple\n     let c = [0; true];\n     //~^ ERROR mismatched types\n     //~| expected `usize`"}, {"sha": "0c9d93ecb2af7579829e886280f0bd6848056162", "filename": "src/test/run-make/target-cpu-native/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Frun-make%2Ftarget-cpu-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Frun-make%2Ftarget-cpu-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-cpu-native%2FMakefile?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs -C target-cpu=native\n+\t$(call RUN,foo)"}, {"sha": "f7a9f969060aeee3c856264e1b65873d30a6c816", "filename": "src/test/run-make/target-cpu-native/foo.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Frun-make%2Ftarget-cpu-native%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Frun-make%2Ftarget-cpu-native%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-cpu-native%2Ffoo.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+}"}, {"sha": "35e053110dfc7ec2be2e5c9fb83fffa2d29dccf0", "filename": "src/test/run-pass/issue-19244.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8715a65496b557798a9ff346194991aea3581f4d/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=8715a65496b557798a9ff346194991aea3581f4d", "patch": "@@ -8,14 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct MyStruct { field: uint }\n+struct MyStruct { field: usize }\n+struct Nested { nested: MyStruct }\n+struct Mix2 { nested: ((usize,),) }\n+\n const STRUCT: MyStruct = MyStruct { field: 42 };\n-const TUP: (uint,) = (43,);\n+const TUP: (usize,) = (43,);\n+const NESTED_S: Nested = Nested { nested: MyStruct { field: 5 } };\n+const NESTED_T: ((usize,),) = ((4,),);\n+const MIX_1: ((Nested,),) = ((Nested { nested: MyStruct { field: 3 } },),);\n+const MIX_2: Mix2 = Mix2 { nested: ((2,),) };\n+const INSTANT_1: usize = (MyStruct { field: 1 }).field;\n+const INSTANT_2: usize = (0,).0;\n \n fn main() {\n     let a = [0; STRUCT.field];\n     let b = [0; TUP.0];\n+    let c = [0; NESTED_S.nested.field];\n+    let d = [0; (NESTED_T.0).0];\n+    let e = [0; (MIX_1.0).0.nested.field];\n+    let f = [0; (MIX_2.nested.0).0];\n+    let g = [0; INSTANT_1];\n+    let h = [0; INSTANT_2];\n \n-    assert!(a.len() == 42);\n-    assert!(b.len() == 43);\n+    assert_eq!(a.len(), 42);\n+    assert_eq!(b.len(), 43);\n+    assert_eq!(c.len(), 5);\n+    assert_eq!(d.len(), 4);\n+    assert_eq!(e.len(), 3);\n+    assert_eq!(f.len(), 2);\n+    assert_eq!(g.len(), 1);\n+    assert_eq!(h.len(), 0);\n }"}]}