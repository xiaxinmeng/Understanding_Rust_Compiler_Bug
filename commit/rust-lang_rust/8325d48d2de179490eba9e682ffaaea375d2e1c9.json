{"sha": "8325d48d2de179490eba9e682ffaaea375d2e1c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMjVkNDhkMmRlMTc5NDkwZWJhOWU2ODJmZmFhZWEzNzVkMmUxYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T09:07:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T09:07:56Z"}, "message": "Auto merge of #6351 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "4f34ae31507d8ec9a88c7a5c51447eded18c9ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f34ae31507d8ec9a88c7a5c51447eded18c9ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8325d48d2de179490eba9e682ffaaea375d2e1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8325d48d2de179490eba9e682ffaaea375d2e1c9", "html_url": "https://github.com/rust-lang/rust/commit/8325d48d2de179490eba9e682ffaaea375d2e1c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8325d48d2de179490eba9e682ffaaea375d2e1c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f", "html_url": "https://github.com/rust-lang/rust/commit/b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f"}, {"sha": "5ee0a400fc5104a0fb9be5c85c48d79cf1af8dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee0a400fc5104a0fb9be5c85c48d79cf1af8dce", "html_url": "https://github.com/rust-lang/rust/commit/5ee0a400fc5104a0fb9be5c85c48d79cf1af8dce"}], "stats": {"total": 324, "additions": 129, "deletions": 195}, "files": [{"sha": "a52f0997d439dbb642946dfe7c40b76895fad0be", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,6 +1,5 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::paths;\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, snippet_opt, span_lint_and_help};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, snippet_opt, span_lint_and_help};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind, PatKind, UnOp};\n@@ -130,10 +129,13 @@ fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n-        if let ExprKind::Block(ref inner_block, _) = block_expr.kind;\n-        if let Some(begin_panic_call) = &inner_block.expr;\n+        // inner block is optional. unwarp it if it exists, or use the expression as is otherwise.\n+        if let Some(begin_panic_call) = match block_expr.kind {\n+            ExprKind::Block(ref inner_block, _) => &inner_block.expr,\n+            _ => &block.expr,\n+        };\n         // function call\n-        if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+        if let Some(args) = match_panic_call(cx, begin_panic_call);\n         if args.len() == 1;\n         // bind the second argument of the `assert!` macro if it exists\n         if let panic_message = snippet_opt(cx, args[0].span);"}, {"sha": "57702dafa6a0ce8a878102a15443db90afdea860", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,7 +1,7 @@\n //! checks for attributes\n \n use crate::utils::{\n-    first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_help,\n+    first_line_of_span, is_present_in_source, match_panic_def_id, snippet_opt, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n@@ -513,7 +513,7 @@ fn is_relevant_expr(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_>\n                 typeck_results\n                     .qpath_res(qpath, path_expr.hir_id)\n                     .opt_def_id()\n-                    .map_or(true, |fun_id| !match_def_path(cx, fun_id, &paths::BEGIN_PANIC))\n+                    .map_or(true, |fun_id| !match_panic_def_id(cx, fun_id))\n             } else {\n                 true\n             }"}, {"sha": "1c3285ed701db19683379058e45f6a2c2453bd46", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -181,3 +181,8 @@ declare_deprecated_lint! {\n     pub TEMPORARY_CSTRING_AS_PTR,\n     \"this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\"\n }\n+\n+declare_deprecated_lint! {\n+    pub PANIC_PARAMS,\n+    \"this lint has been uplifted to rustc and is now called `panic_fmt`\"\n+}"}, {"sha": "509a4a4e15f628162e78ba6bea9375af3d3c5e61", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,5 +1,7 @@\n-use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT};\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, match_def_path, method_chain_args, span_lint_and_then};\n+use crate::utils::paths::FROM_TRAIT;\n+use crate::utils::{\n+    is_expn_of, is_type_diagnostic_item, match_def_path, match_panic_def_id, method_chain_args, span_lint_and_then,\n+};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -84,8 +86,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n                 if let ExprKind::Call(ref func_expr, _) = expr.kind;\n                 if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.kind;\n                 if let Some(path_def_id) = path.res.opt_def_id();\n-                if match_def_path(self.lcx, path_def_id, &BEGIN_PANIC) ||\n-                    match_def_path(self.lcx, path_def_id, &BEGIN_PANIC_FMT);\n+                if match_panic_def_id(self.lcx, path_def_id);\n                 if is_expn_of(expr.span, \"unreachable\").is_none();\n                 then {\n                     self.result.push(expr.span);"}, {"sha": "ed7f3b9293dbf856904e597ba09e7e16012fa396", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,8 +1,4 @@\n-use crate::utils::{\n-    fn_has_unsatisfiable_preds, match_def_path,\n-    paths::{BEGIN_PANIC, BEGIN_PANIC_FMT},\n-    snippet_opt, span_lint_and_then,\n-};\n+use crate::utils::{fn_has_unsatisfiable_preds, match_panic_def_id, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -109,8 +105,7 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             if_chain! {\n                 if let ExprKind::Path(qpath) = &expr.kind;\n                 if let Some(path_def_id) = cx.qpath_res(qpath, expr.hir_id).opt_def_id();\n-                if match_def_path(cx, path_def_id, &BEGIN_PANIC) ||\n-                    match_def_path(cx, path_def_id, &BEGIN_PANIC_FMT);\n+                if match_panic_def_id(cx, path_def_id);\n                 then { }\n                 else {\n                     lint(cx, expr.span, expr.span, LINT_RETURN)"}, {"sha": "36016988b6b0d5ca1eea0a4c95bddc1ae4f260f1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -496,6 +496,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::temporary_cstring_as_ptr\",\n         \"this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\",\n     );\n+    store.register_removed(\n+        \"clippy::panic_params\",\n+        \"this lint has been uplifted to rustc and is now called `panic_fmt`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -790,7 +794,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         &panic_in_result_fn::PANIC_IN_RESULT_FN,\n         &panic_unimplemented::PANIC,\n-        &panic_unimplemented::PANIC_PARAMS,\n         &panic_unimplemented::TODO,\n         &panic_unimplemented::UNIMPLEMENTED,\n         &panic_unimplemented::UNREACHABLE,\n@@ -1505,7 +1508,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-        LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n         LintId::of(&precedence::PRECEDENCE),\n         LintId::of(&ptr::CMP_NULL),\n@@ -1674,7 +1676,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-        LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&ptr::CMP_NULL),\n         LintId::of(&ptr::PTR_ARG),\n         LintId::of(&ptr_eq::PTR_EQ),"}, {"sha": "31b03ecd101c09daaab92d96f992521fc3cb5166", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 23, "deletions": 61, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,30 +1,10 @@\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, paths, span_lint};\n+use crate::utils::{is_expn_of, match_panic_call, span_lint};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for missing parameters in `panic!`.\n-    ///\n-    /// **Why is this bad?** Contrary to the `format!` family of macros, there are\n-    /// two forms of `panic!`: if there are no parameters given, the first argument\n-    /// is not a format string and used literally. So while `format!(\"{}\")` will\n-    /// fail to compile, `panic!(\"{}\")` will not.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```no_run\n-    /// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n-    /// ```\n-    pub PANIC_PARAMS,\n-    style,\n-    \"missing parameters in `panic!` calls\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `panic!`.\n     ///\n@@ -89,31 +69,30 @@ declare_clippy_lint! {\n     \"`unreachable!` should not be present in production code\"\n }\n \n-declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED, UNREACHABLE, TODO, PANIC]);\n+declare_lint_pass!(PanicUnimplemented => [UNIMPLEMENTED, UNREACHABLE, TODO, PANIC]);\n \n impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Block(ref block, _) = expr.kind;\n-            if let Some(ref ex) = block.expr;\n-            if let Some(params) = match_function_call(cx, ex, &paths::BEGIN_PANIC)\n-                .or_else(|| match_function_call(cx, ex, &paths::BEGIN_PANIC_FMT));\n-            then {\n-                let span = get_outer_span(expr);\n-                if is_expn_of(expr.span, \"unimplemented\").is_some() {\n-                    span_lint(cx, UNIMPLEMENTED, span,\n-                              \"`unimplemented` should not be present in production code\");\n-                } else if is_expn_of(expr.span, \"todo\").is_some() {\n-                    span_lint(cx, TODO, span,\n-                              \"`todo` should not be present in production code\");\n-                } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n-                    span_lint(cx, UNREACHABLE, span,\n-                              \"`unreachable` should not be present in production code\");\n-                } else if is_expn_of(expr.span, \"panic\").is_some() {\n-                    span_lint(cx, PANIC, span,\n-                              \"`panic` should not be present in production code\");\n-                    match_panic(params, expr, cx);\n-                }\n+        if match_panic_call(cx, expr).is_some() {\n+            let span = get_outer_span(expr);\n+            if is_expn_of(expr.span, \"unimplemented\").is_some() {\n+                span_lint(\n+                    cx,\n+                    UNIMPLEMENTED,\n+                    span,\n+                    \"`unimplemented` should not be present in production code\",\n+                );\n+            } else if is_expn_of(expr.span, \"todo\").is_some() {\n+                span_lint(cx, TODO, span, \"`todo` should not be present in production code\");\n+            } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n+                span_lint(\n+                    cx,\n+                    UNREACHABLE,\n+                    span,\n+                    \"`unreachable` should not be present in production code\",\n+                );\n+            } else if is_expn_of(expr.span, \"panic\").is_some() {\n+                span_lint(cx, PANIC, span, \"`panic` should not be present in production code\");\n             }\n         }\n     }\n@@ -132,20 +111,3 @@ fn get_outer_span(expr: &Expr<'_>) -> Span {\n         }\n     }\n }\n-\n-fn match_panic(params: &[Expr<'_>], expr: &Expr<'_>, cx: &LateContext<'_>) {\n-    if_chain! {\n-        if let ExprKind::Lit(ref lit) = params[0].kind;\n-        if is_direct_expn_of(expr.span, \"panic\").is_some();\n-        if let LitKind::Str(ref string, _) = lit.node;\n-        let string = string.as_str().replace(\"{{\", \"\").replace(\"}}\", \"\");\n-        if let Some(par) = string.find('{');\n-        if string[par..].contains('}');\n-        if params[0].span.source_callee().is_none();\n-        if params[0].span.lo() != params[0].span.hi();\n-        then {\n-            span_lint(cx, PANIC_PARAMS, params[0].span,\n-                      \"you probably are missing some parameter in your format string\");\n-        }\n-    }\n-}"}, {"sha": "5bd64dcb541f4e3d9f4ab8b5c2c0db8f60b7dcba", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1233,7 +1233,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n /// Usage:\n ///\n /// ```rust,ignore\n-/// if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+/// if let Some(args) = match_function_call(cx, cmp_max_call, &paths::CMP_MAX);\n /// ```\n pub fn match_function_call<'tcx>(\n     cx: &LateContext<'tcx>,\n@@ -1268,6 +1268,24 @@ pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -\n     cx.match_def_path(did, &syms)\n }\n \n+pub fn match_panic_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx [Expr<'tcx>]> {\n+    match_function_call(cx, expr, &paths::BEGIN_PANIC)\n+        .or_else(|| match_function_call(cx, expr, &paths::BEGIN_PANIC_FMT))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANIC_ANY))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANICKING_PANIC))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANICKING_PANIC_FMT))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANICKING_PANIC_STR))\n+}\n+\n+pub fn match_panic_def_id(cx: &LateContext<'_>, did: DefId) -> bool {\n+    match_def_path(cx, did, &paths::BEGIN_PANIC)\n+        || match_def_path(cx, did, &paths::BEGIN_PANIC_FMT)\n+        || match_def_path(cx, did, &paths::PANIC_ANY)\n+        || match_def_path(cx, did, &paths::PANICKING_PANIC)\n+        || match_def_path(cx, did, &paths::PANICKING_PANIC_FMT)\n+        || match_def_path(cx, did, &paths::PANICKING_PANIC_STR)\n+}\n+\n /// Returns the list of condition expressions and the list of blocks in a\n /// sequence of `if/else`.\n /// E.g., this returns `([a, b], [c, d, e])` for the expression"}, {"sha": "137f5d18b6649d0ae26d8694b863e9e907e72b6d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -8,8 +8,8 @@ pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n-pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n-pub const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n+pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n+pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BOX: [&str; 3] = [\"alloc\", \"boxed\", \"Box\"];\n@@ -78,6 +78,10 @@ pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING: [&str; 4] = [\"std\", \"ffi\", \"os_str\", \"OsString\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n+pub(super) const PANICKING_PANIC: [&str; 3] = [\"core\", \"panicking\", \"panic\"];\n+pub(super) const PANICKING_PANIC_FMT: [&str; 3] = [\"core\", \"panicking\", \"panic_fmt\"];\n+pub(super) const PANICKING_PANIC_STR: [&str; 3] = [\"core\", \"panicking\", \"panic_str\"];\n+pub(super) const PANIC_ANY: [&str; 3] = [\"std\", \"panic\", \"panic_any\"];\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 2] = [\"parking_lot\", \"MutexGuard\"];\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWriteGuard\"];"}, {"sha": "c5a31fac254d4ff8801d767c00828dc28dc7f831", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1838,13 +1838,6 @@ vec![\n         deprecation: None,\n         module: \"panic_in_result_fn\",\n     },\n-    Lint {\n-        name: \"panic_params\",\n-        group: \"style\",\n-        desc: \"missing parameters in `panic!` calls\",\n-        deprecation: None,\n-        module: \"panic_unimplemented\",\n-    },\n     Lint {\n         name: \"panicking_unwrap\",\n         group: \"correctness\","}, {"sha": "4cbc5630d759d76d6c5e631e31871a3cbfebb2ac", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -10,5 +10,6 @@\n #[warn(clippy::regex_macro)]\n #[warn(clippy::drop_bounds)]\n #[warn(clippy::temporary_cstring_as_ptr)]\n+#[warn(clippy::panic_params)]\n \n fn main() {}"}, {"sha": "a348d01d734fed006f29ecd2e7dba3b96e8f5f1d", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -72,11 +72,17 @@ error: lint `clippy::temporary_cstring_as_ptr` has been removed: `this lint has\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::panic_params` has been removed: `this lint has been uplifted to rustc and is now called `panic_fmt``\n+  --> $DIR/deprecated.rs:13:8\n+   |\n+LL | #[warn(clippy::panic_params)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "6e004aa9a924ffff0d7160eec504a5140051c4b0", "filename": "tests/ui/panic.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f", "patch": "@@ -1,61 +0,0 @@\n-#![warn(clippy::panic_params)]\n-#![allow(clippy::assertions_on_constants)]\n-fn missing() {\n-    if true {\n-        panic!(\"{}\");\n-    } else if false {\n-        panic!(\"{:?}\");\n-    } else {\n-        assert!(true, \"here be missing values: {}\");\n-    }\n-\n-    panic!(\"{{{this}}}\");\n-}\n-\n-fn ok_single() {\n-    panic!(\"foo bar\");\n-}\n-\n-fn ok_inner() {\n-    // Test for #768\n-    assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n-}\n-\n-fn ok_multiple() {\n-    panic!(\"{}\", \"This is {ok}\");\n-}\n-\n-fn ok_bracket() {\n-    match 42 {\n-        1337 => panic!(\"{so is this\"),\n-        666 => panic!(\"so is this}\"),\n-        _ => panic!(\"}so is that{\"),\n-    }\n-}\n-\n-const ONE: u32 = 1;\n-\n-fn ok_nomsg() {\n-    assert!({ 1 == ONE });\n-    assert!(if 1 == ONE { ONE == 1 } else { false });\n-}\n-\n-fn ok_escaped() {\n-    panic!(\"{{ why should this not be ok? }}\");\n-    panic!(\" or {{ that ?\");\n-    panic!(\" or }} this ?\");\n-    panic!(\" {or {{ that ?\");\n-    panic!(\" }or }} this ?\");\n-    panic!(\"{{ test }\");\n-    panic!(\"{case }}\");\n-}\n-\n-fn main() {\n-    missing();\n-    ok_single();\n-    ok_multiple();\n-    ok_bracket();\n-    ok_inner();\n-    ok_nomsg();\n-    ok_escaped();\n-}"}, {"sha": "1f8ff8ccf55750577675303eb2bcec693119bdda", "filename": "tests/ui/panic.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=b2aefb8cc36fe0f21e8dbe0a34914ef9a20a5a9f", "patch": "@@ -1,28 +0,0 @@\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:5:16\n-   |\n-LL |         panic!(\"{}\");\n-   |                ^^^^\n-   |\n-   = note: `-D clippy::panic-params` implied by `-D warnings`\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:7:16\n-   |\n-LL |         panic!(\"{:?}\");\n-   |                ^^^^^^\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:9:23\n-   |\n-LL |         assert!(true, \"here be missing values: {}\");\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:12:12\n-   |\n-LL |     panic!(\"{{{this}}}\");\n-   |            ^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "77fcb8dfd02fd7460fd097e3c06570cb3cb41cc8", "filename": "tests/ui/panicking_macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,6 +1,8 @@\n #![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n #![allow(clippy::assertions_on_constants)]\n \n+extern crate core;\n+\n fn panic() {\n     let a = 2;\n     panic!();\n@@ -33,9 +35,18 @@ fn unreachable() {\n     let b = a + 2;\n }\n \n+fn core_versions() {\n+    use core::{panic, todo, unimplemented, unreachable};\n+    panic!();\n+    todo!();\n+    unimplemented!();\n+    unreachable!();\n+}\n+\n fn main() {\n     panic();\n     todo();\n     unimplemented();\n     unreachable();\n+    core_versions();\n }"}, {"sha": "83234c0ed92cc4fc93a53e30d2e22aa1f36d9bdb", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8325d48d2de179490eba9e682ffaaea375d2e1c9/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=8325d48d2de179490eba9e682ffaaea375d2e1c9", "patch": "@@ -1,88 +1,112 @@\n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:6:5\n+  --> $DIR/panicking_macros.rs:8:5\n    |\n LL |     panic!();\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:7:5\n+  --> $DIR/panicking_macros.rs:9:5\n    |\n LL |     panic!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:8:5\n+  --> $DIR/panicking_macros.rs:10:5\n    |\n LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:14:5\n+  --> $DIR/panicking_macros.rs:16:5\n    |\n LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:15:5\n+  --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:16:5\n+  --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:22:5\n+  --> $DIR/panicking_macros.rs:24:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:23:5\n+  --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:24:5\n+  --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unreachable` should not be present in production code\n-  --> $DIR/panicking_macros.rs:30:5\n+  --> $DIR/panicking_macros.rs:32:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n \n error: `unreachable` should not be present in production code\n-  --> $DIR/panicking_macros.rs:31:5\n+  --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unreachable` should not be present in production code\n-  --> $DIR/panicking_macros.rs:32:5\n+  --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:40:5\n+   |\n+LL |     panic!();\n+   |     ^^^^^^^^^\n+\n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:41:5\n+   |\n+LL |     todo!();\n+   |     ^^^^^^^^\n+\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panicking_macros.rs:42:5\n+   |\n+LL |     unimplemented!();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:43:5\n+   |\n+LL |     unreachable!();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n "}]}