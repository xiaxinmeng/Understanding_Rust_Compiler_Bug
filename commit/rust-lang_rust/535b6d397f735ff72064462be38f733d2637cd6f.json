{"sha": "535b6d397f735ff72064462be38f733d2637cd6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNWI2ZDM5N2Y3MzVmZjcyMDY0NDYyYmUzOGY3MzNkMjYzN2NkNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-07T19:46:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-07T19:46:23Z"}, "message": "Auto merge of #38214 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\n- Successful merges: #38085, #38123, #38151, #38153, #38158, #38163, #38186, #38189, #38208\n- Failed merges:", "tree": {"sha": "7169db4db2aa1107f831e2dcfeb2c7d6ae9c696b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7169db4db2aa1107f831e2dcfeb2c7d6ae9c696b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535b6d397f735ff72064462be38f733d2637cd6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535b6d397f735ff72064462be38f733d2637cd6f", "html_url": "https://github.com/rust-lang/rust/commit/535b6d397f735ff72064462be38f733d2637cd6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535b6d397f735ff72064462be38f733d2637cd6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209308439a1099b285520459f57e380f18793c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/209308439a1099b285520459f57e380f18793c07", "html_url": "https://github.com/rust-lang/rust/commit/209308439a1099b285520459f57e380f18793c07"}, {"sha": "ef45ec0a244868f639106998515d2f92ee3df562", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef45ec0a244868f639106998515d2f92ee3df562", "html_url": "https://github.com/rust-lang/rust/commit/ef45ec0a244868f639106998515d2f92ee3df562"}], "stats": {"total": 252, "additions": 193, "deletions": 59}, "files": [{"sha": "b53af694428da2648c9d4c8be9aeaf3a2ff08b7b", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -662,26 +662,31 @@ attribute turns off Rust's name mangling, so that it is easier to link to.\n \n It\u2019s important to be mindful of `panic!`s when working with FFI. A `panic!`\n across an FFI boundary is undefined behavior. If you\u2019re writing code that may\n-panic, you should run it in another thread, so that the panic doesn\u2019t bubble up\n-to C:\n+panic, you should run it in a closure with [`catch_unwind()`]:\n \n ```rust\n-use std::thread;\n+use std::panic::catch_unwind;\n \n #[no_mangle]\n pub extern fn oh_no() -> i32 {\n-    let h = thread::spawn(|| {\n+    let result = catch_unwind(|| {\n         panic!(\"Oops!\");\n     });\n-\n-    match h.join() {\n-        Ok(_) => 1,\n-        Err(_) => 0,\n+    match result {\n+        Ok(_) => 0,\n+        Err(_) => 1,\n     }\n }\n-# fn main() {}\n+\n+fn main() {}\n ```\n \n+Please note that [`catch_unwind()`] will only catch unwinding panics, not\n+those who abort the process. See the documentation of [`catch_unwind()`]\n+for more information.\n+\n+[`catch_unwind()`]: https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\n+\n # Representing opaque structs\n \n Sometimes, a C library wants to provide a pointer to something, but not let you"}, {"sha": "bf286aaec4bb34631366b5d224bfa949f3a54fb7", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -603,7 +603,8 @@ syntax named by _designator_. Valid designators are:\n * `ty`: a [type](#types)\n * `ident`: an [identifier](#identifiers)\n * `path`: a [path](#paths)\n-* `tt`: either side of the `=>` in macro rules\n+* `tt`: a token tree (a single [token](#tokens) or a sequence of token trees surrounded\n+  by matching `()`, `[]`, or `{}`)\n * `meta`: the contents of an [attribute](#attributes)\n \n In the transcriber, the"}, {"sha": "d1e0e333b8f3aa7b538779e0d0ff4b9526f5e842", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -12,35 +12,35 @@\n \n //! Single-threaded reference-counting pointers.\n //!\n-//! The type [`Rc<T>`][rc] provides shared ownership of a value of type `T`,\n-//! allocated in the heap. Invoking [`clone`][clone] on `Rc` produces a new\n-//! pointer to the same value in the heap. When the last `Rc` pointer to a\n+//! The type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,\n+//! allocated in the heap. Invoking [`clone()`][clone] on [`Rc`] produces a new\n+//! pointer to the same value in the heap. When the last [`Rc`] pointer to a\n //! given value is destroyed, the pointed-to value is also destroyed.\n //!\n //! Shared references in Rust disallow mutation by default, and `Rc` is no\n-//! exception. If you need to mutate through an `Rc`, use [`Cell`][cell] or\n-//! [`RefCell`][refcell].\n+//! exception. If you need to mutate through an [`Rc`], use [`Cell`] or\n+//! [`RefCell`].\n //!\n-//! `Rc` uses non-atomic reference counting. This means that overhead is very\n-//! low, but an `Rc` cannot be sent between threads, and consequently `Rc`\n+//! [`Rc`] uses non-atomic reference counting. This means that overhead is very\n+//! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\n //! does not implement [`Send`][send]. As a result, the Rust compiler\n-//! will check *at compile time* that you are not sending `Rc`s between\n+//! will check *at compile time* that you are not sending [`Rc`]s between\n //! threads. If you need multi-threaded, atomic reference counting, use\n //! [`sync::Arc`][arc].\n //!\n-//! The [`downgrade`][downgrade] method can be used to create a non-owning\n-//! [`Weak`][weak] pointer. A `Weak` pointer can be [`upgrade`][upgrade]d\n-//! to an `Rc`, but this will return [`None`][option] if the value has\n+//! The [`downgrade()`][downgrade] method can be used to create a non-owning\n+//! [`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d\n+//! to an [`Rc`], but this will return [`None`] if the value has\n //! already been dropped.\n //!\n-//! A cycle between `Rc` pointers will never be deallocated. For this reason,\n-//! `Weak` is used to break cycles. For example, a tree could have strong\n-//! `Rc` pointers from parent nodes to children, and `Weak` pointers from\n+//! A cycle between [`Rc`] pointers will never be deallocated. For this reason,\n+//! [`Weak`] is used to break cycles. For example, a tree could have strong\n+//! [`Rc`] pointers from parent nodes to children, and [`Weak`] pointers from\n //! children back to their parents.\n //!\n-//! `Rc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n-//! so you can call `T`'s methods on a value of type `Rc<T>`. To avoid name\n-//! clashes with `T`'s methods, the methods of `Rc<T>` itself are [associated\n+//! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\n+//! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\n+//! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are [associated\n //! functions][assoc], called using function-like syntax:\n //!\n //! ```\n@@ -50,28 +50,15 @@\n //! Rc::downgrade(&my_rc);\n //! ```\n //!\n-//! `Weak<T>` does not auto-dereference to `T`, because the value may have\n+//! [`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the value may have\n //! already been destroyed.\n //!\n-//! [rc]: struct.Rc.html\n-//! [weak]: struct.Weak.html\n-//! [clone]: ../../std/clone/trait.Clone.html#tymethod.clone\n-//! [cell]: ../../std/cell/struct.Cell.html\n-//! [refcell]: ../../std/cell/struct.RefCell.html\n-//! [send]: ../../std/marker/trait.Send.html\n-//! [arc]: ../../std/sync/struct.Arc.html\n-//! [deref]: ../../std/ops/trait.Deref.html\n-//! [downgrade]: struct.Rc.html#method.downgrade\n-//! [upgrade]: struct.Weak.html#method.upgrade\n-//! [option]: ../../std/option/enum.Option.html\n-//! [assoc]: ../../book/method-syntax.html#associated-functions\n-//!\n //! # Examples\n //!\n //! Consider a scenario where a set of `Gadget`s are owned by a given `Owner`.\n //! We want to have our `Gadget`s point to their `Owner`. We can't do this with\n //! unique ownership, because more than one gadget may belong to the same\n-//! `Owner`. `Rc` allows us to share an `Owner` between multiple `Gadget`s,\n+//! `Owner`. [`Rc`] allows us to share an `Owner` between multiple `Gadget`s,\n //! and have the `Owner` remain allocated as long as any `Gadget` points at it.\n //!\n //! ```\n@@ -127,20 +114,20 @@\n //! ```\n //!\n //! If our requirements change, and we also need to be able to traverse from\n-//! `Owner` to\u00a0`Gadget`, we will run into problems. An `Rc` pointer from `Owner`\n+//! `Owner` to\u00a0`Gadget`, we will run into problems. An [`Rc`] pointer from `Owner`\n //! to `Gadget` introduces a cycle between the values. This means that their\n //! reference counts can never reach 0, and the values will remain allocated\n-//! forever: a memory leak. In order to get around this, we can use `Weak`\n+//! forever: a memory leak. In order to get around this, we can use [`Weak`]\n //! pointers.\n //!\n //! Rust actually makes it somewhat difficult to produce this loop in the first\n //! place. In order to end up with two values that point at each other, one of\n-//! them needs to be mutable. This is difficult because `Rc` enforces\n+//! them needs to be mutable. This is difficult because [`Rc`] enforces\n //! memory safety by only giving out shared references to the value it wraps,\n //! and these don't allow direct mutation. We need to wrap the part of the\n-//! value we wish to mutate in a [`RefCell`][refcell], which provides *interior\n+//! value we wish to mutate in a [`RefCell`], which provides *interior\n //! mutability*: a method to achieve mutability through a shared reference.\n-//! `RefCell` enforces Rust's borrowing rules at runtime.\n+//! [`RefCell`] enforces Rust's borrowing rules at runtime.\n //!\n //! ```\n //! use std::rc::Rc;\n@@ -214,6 +201,19 @@\n //!     // Gadget Man, so he gets destroyed as well.\n //! }\n //! ```\n+//!\n+//! [`Rc`]: struct.Rc.html\n+//! [`Weak`]: struct.Weak.html\n+//! [clone]: ../../std/clone/trait.Clone.html#tymethod.clone\n+//! [`Cell`]: ../../std/cell/struct.Cell.html\n+//! [`RefCell`]: ../../std/cell/struct.RefCell.html\n+//! [send]: ../../std/marker/trait.Send.html\n+//! [arc]: ../../std/sync/struct.Arc.html\n+//! [`Deref`]: ../../std/ops/trait.Deref.html\n+//! [downgrade]: struct.Rc.html#method.downgrade\n+//! [upgrade]: struct.Weak.html#method.upgrade\n+//! [`None`]: ../../std/option/enum.Option.html#variant.None\n+//! [assoc]: ../../book/method-syntax.html#associated-functions\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -251,9 +251,11 @@ struct RcBox<T: ?Sized> {\n /// See the [module-level documentation](./index.html) for more details.\n ///\n /// The inherent methods of `Rc` are all associated functions, which means\n-/// that you have to call them as e.g. `Rc::get_mut(&value)` instead of\n-/// `value.get_mut()`.  This avoids conflicts with methods of the inner\n+/// that you have to call them as e.g. [`Rc::get_mut(&value)`][get_mut] instead of\n+/// `value.get_mut()`. This avoids conflicts with methods of the inner\n /// type `T`.\n+///\n+/// [get_mut]: #method.get_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {\n     ptr: Shared<RcBox<T>>,\n@@ -337,10 +339,10 @@ impl<T> Rc<T> {\n     }\n \n     /// Checks whether [`Rc::try_unwrap`][try_unwrap] would return\n-    /// [`Ok`][result].\n+    /// [`Ok`].\n     ///\n     /// [try_unwrap]: struct.Rc.html#method.try_unwrap\n-    /// [result]: ../../std/result/enum.Result.html\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n     ///\n     /// # Examples\n     ///\n@@ -543,14 +545,14 @@ impl<T: ?Sized> Rc<T> {\n     /// Returns a mutable reference to the inner value, if there are\n     /// no other `Rc` or [`Weak`][weak] pointers to the same value.\n     ///\n-    /// Returns [`None`][option] otherwise, because it is not safe to\n+    /// Returns [`None`] otherwise, because it is not safe to\n     /// mutate a shared value.\n     ///\n     /// See also [`make_mut`][make_mut], which will [`clone`][clone]\n     /// the inner value when it's shared.\n     ///\n     /// [weak]: struct.Weak.html\n-    /// [option]: ../../std/option/enum.Option.html\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [make_mut]: struct.Rc.html#method.make_mut\n     /// [clone]: ../../std/clone/trait.Clone.html#tymethod.clone\n     ///"}, {"sha": "5db622a4e7da035199b1e549746312227b73550e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -103,6 +103,12 @@ impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n                     }\n \n                     ViewPathList(_, ref list) => {\n+                        if list.len() == 0 {\n+                            self.unused_imports\n+                                .entry(item.id)\n+                                .or_insert_with(NodeMap)\n+                                .insert(item.id, item.span);\n+                        }\n                         for i in list {\n                             self.check_import(item.id, i.node.id, i.span);\n                         }"}, {"sha": "0b310eb2585778f553e8a3b74acc8d0769ef298b", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -2117,6 +2117,10 @@ impl DefaultHasher {\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Default for DefaultHasher {\n+    /// Creates a new `DefaultHasher` using [`DefaultHasher::new`]. See\n+    /// [`DefaultHasher::new`] documentation for more information.\n+    ///\n+    /// [`DefaultHasher::new`]: #method.new\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()\n     }"}, {"sha": "45a10d2452851a573f08e85485763cab2d8bf364", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 104, "deletions": 2, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -159,6 +159,23 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n }\n \n /// A struct providing information about a panic.\n+///\n+/// `PanicInfo` structure is passed to a panic hook set by the [`set_hook()`]\n+/// function.\n+///\n+/// [`set_hook()`]: ../../std/panic/fn.set_hook.html\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// use std::panic;\n+///\n+/// panic::set_hook(Box::new(|panic_info| {\n+///     println!(\"panic occured: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+/// }));\n+///\n+/// panic!(\"Normal panic\");\n+/// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct PanicInfo<'a> {\n     payload: &'a (Any + Send),\n@@ -168,7 +185,21 @@ pub struct PanicInfo<'a> {\n impl<'a> PanicInfo<'a> {\n     /// Returns the payload associated with the panic.\n     ///\n-    /// This will commonly, but not always, be a `&'static str` or `String`.\n+    /// This will commonly, but not always, be a `&'static str` or [`String`].\n+    ///\n+    /// [`String`]: ../../std/string/struct.String.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     println!(\"panic occured: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn payload(&self) -> &(Any + Send) {\n         self.payload\n@@ -177,15 +208,54 @@ impl<'a> PanicInfo<'a> {\n     /// Returns information about the location from which the panic originated,\n     /// if available.\n     ///\n-    /// This method will currently always return `Some`, but this may change\n+    /// This method will currently always return [`Some`], but this may change\n     /// in future versions.\n+    ///\n+    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occured in file '{}' at line {}\", location.file(), location.line());\n+    ///     } else {\n+    ///         println!(\"panic occured but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location> {\n         Some(&self.location)\n     }\n }\n \n /// A struct containing information about the location of a panic.\n+///\n+/// This structure is created by the [`location()`] method of [`PanicInfo`].\n+///\n+/// [`location()`]: ../../std/panic/struct.PanicInfo.html#method.location\n+/// [`PanicInfo`]: ../../std/panic/struct.PanicInfo.html\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// use std::panic;\n+///\n+/// panic::set_hook(Box::new(|panic_info| {\n+///     if let Some(location) = panic_info.location() {\n+///         println!(\"panic occured in file '{}' at line {}\", location.file(), location.line());\n+///     } else {\n+///         println!(\"panic occured but can't get location information...\");\n+///     }\n+/// }));\n+///\n+/// panic!(\"Normal panic\");\n+/// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {\n     file: &'a str,\n@@ -194,12 +264,44 @@ pub struct Location<'a> {\n \n impl<'a> Location<'a> {\n     /// Returns the name of the source file from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occured in file '{}'\", location.file());\n+    ///     } else {\n+    ///         println!(\"panic occured but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn file(&self) -> &str {\n         self.file\n     }\n \n     /// Returns the line number from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occured at line {}\", location.line());\n+    ///     } else {\n+    ///         println!(\"panic occured but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn line(&self) -> u32 {\n         self.line"}, {"sha": "858537dd2de122cd75a9e42010be6119d40e4602", "filename": "src/libstd/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -827,6 +827,14 @@ impl Child {\n /// will be run. If a clean shutdown is needed it is recommended to only call\n /// this function at a known point where there are no more destructors left\n /// to run.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::process;\n+///\n+/// process::exit(0);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn exit(code: i32) -> ! {\n     ::sys_common::cleanup();"}, {"sha": "296235e173d13f575a04b395b1042b9a47a1b470", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -43,7 +43,7 @@ pub trait AsRawFd {\n /// descriptor.\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawFd {\n-    /// Constructs a new instances of `Self` from the given raw file\n+    /// Constructs a new instance of `Self` from the given raw file\n     /// descriptor.\n     ///\n     /// This function **consumes ownership** of the specified file"}, {"sha": "ed7851ec0f15700bb63b91f7b16ae2bc08e9a6c7", "filename": "src/test/compile-fail/issue-28388-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-1.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -10,6 +10,8 @@\n \n // Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n \n-use foo::{}; //~ ERROR failed to resolve. Maybe a missing `extern crate foo;`?\n+use foo::{};\n+//~^ ERROR failed to resolve. Maybe a missing `extern crate foo;`?\n+//~| NOTE foo\n \n fn main() {}"}, {"sha": "4ed5bfab06f02209f547072dafc22357d70f4bcd", "filename": "src/test/compile-fail/issue-28388-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Fissue-28388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Fissue-28388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-2.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -14,6 +14,7 @@ mod m {\n     mod n {}\n }\n \n-use m::n::{}; //~ ERROR module `n` is private\n+use m::n::{};\n+//~^ ERROR module `n` is private\n \n fn main() {}"}, {"sha": "4baaa16e772da82726737bfb79697a117b22fa23", "filename": "src/test/compile-fail/issue-28388-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -14,7 +14,8 @@\n \n extern crate lint_stability;\n \n-use lint_stability::UnstableStruct::{}; //~ ERROR use of unstable library feature 'test_feature'\n+use lint_stability::UnstableStruct::{};\n+//~^ ERROR use of unstable library feature 'test_feature'\n use lint_stability::StableStruct::{}; // OK\n \n fn main() {}"}, {"sha": "f6f7c210f466a0712d6dca5d2269e4289ca8ec12", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535b6d397f735ff72064462be38f733d2637cd6f/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=535b6d397f735ff72064462be38f733d2637cd6f", "patch": "@@ -15,6 +15,8 @@ use bar::c::cc as cal;\n \n use std::mem::*;            // shouldn't get errors for not using\n                             // everything imported\n+use std::fmt::{};\n+//~^ ERROR unused import: `use std::fmt::{};`\n \n // Should get errors for both 'Some' and 'None'\n use std::option::Option::{Some, None};"}]}