{"sha": "1e978a3627bd65064164af3548c585fb25eef9d2", "node_id": "C_kwDOAAsO6NoAKDFlOTc4YTM2MjdiZDY1MDY0MTY0YWYzNTQ4YzU4NWZiMjVlZWY5ZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T01:34:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T01:34:47Z"}, "message": "Auto merge of #96946 - WaffleLapkin:ptr_mask, r=scottmcm\n\nAdd pointer masking convenience functions\n\nThis PR adds the following public API:\n```rust\nimpl<T: ?Sized> *const T {\n    fn mask(self, mask: usize) -> *const T;\n}\n\nimpl<T: ?Sized> *mut T {\n    fn mask(self, mask: usize) -> *const T;\n}\n\n// mod intrinsics\nfn mask<T>(ptr: *const T, mask: usize) -> *const T\n```\nThis is equivalent to `ptr.map_addr(|a| a & mask)` but also uses a cool llvm intrinsic.\n\nProposed in https://github.com/rust-lang/rust/pull/95643#issuecomment-1121562352\n\ncc `@Gankra` `@scottmcm` `@RalfJung`\n\nr? rust-lang/libs-api", "tree": {"sha": "d36b93e40e37cd26a0f15a200435c511ed21c0bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36b93e40e37cd26a0f15a200435c511ed21c0bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e978a3627bd65064164af3548c585fb25eef9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e978a3627bd65064164af3548c585fb25eef9d2", "html_url": "https://github.com/rust-lang/rust/commit/1e978a3627bd65064164af3548c585fb25eef9d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e978a3627bd65064164af3548c585fb25eef9d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaadb8947b850a025404082f6297766c4680a42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaadb8947b850a025404082f6297766c4680a42a", "html_url": "https://github.com/rust-lang/rust/commit/eaadb8947b850a025404082f6297766c4680a42a"}, {"sha": "ca753124088c0d57ca6728ee093363cbc1db5274", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca753124088c0d57ca6728ee093363cbc1db5274", "html_url": "https://github.com/rust-lang/rust/commit/ca753124088c0d57ca6728ee093363cbc1db5274"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "95239f415a99b5e88c965b37aab3cc860cdf97a3", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -577,6 +577,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n         }\n \n+        sym::ptr_mask => {\n+            intrinsic_args!(fx, args => (ptr, mask); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+            let mask = mask.load_scalar(fx);\n+            fx.bcx.ins().band(ptr, mask);\n+        }\n+\n         sym::transmute => {\n             intrinsic_args!(fx, args => (from); intrinsic);\n "}, {"sha": "02cedd4646bbd0939e8b7cbfdd8da7c0b32b17c0", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -309,6 +309,18 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     return;\n                 }\n \n+                sym::ptr_mask => {\n+                    let usize_type = self.context.new_type::<usize>();\n+                    let void_ptr_type = self.context.new_type::<*const ()>();\n+\n+                    let ptr = args[0].immediate();\n+                    let mask = args[1].immediate();\n+\n+                    let addr = self.bitcast(ptr, usize_type);\n+                    let masked = self.and(addr, mask);\n+                    self.bitcast(masked, void_ptr_type)\n+                },\n+                \n                 _ if name_str.starts_with(\"simd_\") => {\n                     match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                         Ok(llval) => llval,"}, {"sha": "67ffc7cb9511f3939ca94d7e951e1b0c16805bc8", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -886,6 +886,9 @@ impl<'ll> CodegenCx<'ll, '_> {\n             ifn!(\"llvm.dbg.declare\", fn(t_metadata, t_metadata) -> void);\n             ifn!(\"llvm.dbg.value\", fn(t_metadata, t_i64, t_metadata) -> void);\n         }\n+\n+        ifn!(\"llvm.ptrmask\", fn(i8p, t_isize) -> i8p);\n+\n         None\n     }\n "}, {"sha": "3d789904707c0e80758d2849b3c4e342698ac1a5", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -71,6 +71,7 @@ fn get_simple_intrinsic<'ll>(\n         sym::nearbyintf64 => \"llvm.nearbyint.f64\",\n         sym::roundf32 => \"llvm.round.f32\",\n         sym::roundf64 => \"llvm.round.f64\",\n+        sym::ptr_mask => \"llvm.ptrmask\",\n         _ => return None,\n     };\n     Some(cx.get_intrinsic(llvm_name))"}, {"sha": "1b47d11f6f87d37380165556c5eaef555b2135eb", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -1114,6 +1114,7 @@ symbols! {\n         ptr,\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n+        ptr_mask,\n         ptr_null,\n         ptr_null_mut,\n         ptr_offset_from,"}, {"sha": "73dd7122e269a8008e07220447c277ec3c3e7996", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -105,7 +105,8 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n         | sym::type_name\n         | sym::forget\n         | sym::black_box\n-        | sym::variant_count => hir::Unsafety::Normal,\n+        | sym::variant_count\n+        | sym::ptr_mask => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n }\n@@ -203,6 +204,15 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 ],\n                 tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),\n             ),\n+            sym::ptr_mask => (\n+                1,\n+                vec![\n+                    tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),\n+                    tcx.types.usize,\n+                ],\n+                tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),\n+            ),\n+\n             sym::copy | sym::copy_nonoverlapping => (\n                 1,\n                 vec!["}, {"sha": "5f8e6efa0cf5fd1c4c21fed8c7d193c2f6caaadc", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -1287,6 +1287,17 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n+    /// Masks out bits of the pointer according to a mask.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n+    /// Consider using [`pointer::mask`] instead.\n+    #[cfg(not(bootstrap))]\n+    pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n+\n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`"}, {"sha": "3f3eb3b3c5c52f69e2cf7e69d92283e89f0c9817", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -559,6 +559,21 @@ impl<T: ?Sized> *const T {\n         from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n     }\n \n+    /// Masks out bits of the pointer according to a mask.\n+    ///\n+    /// This is convenience for `ptr.map_addr(|a| a & mask)`.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[inline(always)]\n+    pub fn mask(self, mask: usize) -> *const T {\n+        let this = intrinsics::ptr_mask(self.cast::<()>(), mask);\n+        from_raw_parts::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the distance between two pointers. The returned value is in\n     /// units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n     ///"}, {"sha": "03ee879f7da28808c7c34283a5ef7c0f56b313ae", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -575,6 +575,21 @@ impl<T: ?Sized> *mut T {\n         )\n     }\n \n+    /// Masks out bits of the pointer according to a mask.\n+    ///\n+    /// This is convenience for `ptr.map_addr(|a| a & mask)`.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[inline(always)]\n+    pub fn mask(self, mask: usize) -> *mut T {\n+        let this = intrinsics::ptr_mask(self.cast::<()>(), mask) as *mut ();\n+        from_raw_parts_mut::<T>(this, metadata(self))\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n     /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]\n     /// must be used instead."}, {"sha": "2e984db1be528d30e5a97c25fb4f5d5f8b0930c3", "filename": "src/test/codegen/intrinsics/mask.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e978a3627bd65064164af3548c585fb25eef9d2/src%2Ftest%2Fcodegen%2Fintrinsics%2Fmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e978a3627bd65064164af3548c585fb25eef9d2/src%2Ftest%2Fcodegen%2Fintrinsics%2Fmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fmask.rs?ref=1e978a3627bd65064164af3548c585fb25eef9d2", "patch": "@@ -0,0 +1,11 @@\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+// CHECK-LABEL: @mask_ptr\n+// CHECK-SAME: [[WORD:i[0-9]+]] %mask\n+#[no_mangle]\n+pub fn mask_ptr(ptr: *const u16, mask: usize) -> *const u16 {\n+    // CHECK: call\n+    // CHECK-SAME: @llvm.ptrmask.{{p0|p0i8}}.[[WORD]]({{ptr|i8\\*}} {{%ptr|%0}}, [[WORD]] %mask)\n+    core::intrinsics::ptr_mask(ptr, mask)\n+}"}]}