{"sha": "8dfdca9390b27131a0f05509d501887e83d7c538", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZmRjYTkzOTBiMjcxMzFhMGYwNTUwOWQ1MDE4ODdlODNkN2M1Mzg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-14T12:02:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-14T12:02:39Z"}, "message": "Merge pull request #3094 from otavio/avoid-unwrap-or\n\nReplace `.unwrap_or` with `.map_or` in few places", "tree": {"sha": "ac4c7d9c8abd47f9fc95fdeac204663630c0e289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4c7d9c8abd47f9fc95fdeac204663630c0e289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dfdca9390b27131a0f05509d501887e83d7c538", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwzBfCRBK7hj4Ov3rIwAAdHIIAHKMphUGXupH+NmhUIkmODv0\nkzNvOeUJg6LCN1hR5g+G4g3OKeEucekI0B8yFgqVDbpTkLNXQ0FtpmsL3OM5CPjP\naXii3zhmbUskuJQSVsl7zmhLz9p22XX+dKCwcyXIHjSOEorTwjxl99V8RtQx1M+X\n0KNMlkyPbm3mBi+zaKLpLOYMQ8jW/5cWpU7TE2+NKw3x5OOF2F80p3OKSQKQ9QTA\nTmevV7fcWRmLU2obpkB32WSg+QR9GwMktdf7Bt/oHOYjpGEmH9iH2t0UJE32nwZl\nM+KeKWjKOOksPPv3vonVfZ9ARGcCgaCo6SKSQe2d7x8A7dVytXujGU8/n0WJuGY=\n=BU5h\n-----END PGP SIGNATURE-----\n", "payload": "tree ac4c7d9c8abd47f9fc95fdeac204663630c0e289\nparent a0d1f171dc1db055e15f42e40bb5d3f73837eaee\nparent 6d7fef078ea01f6cbe3ac9fee0044e32c138f309\nauthor Seiichi Uchida <seuchida@gmail.com> 1539518559 +0900\ncommitter GitHub <noreply@github.com> 1539518559 +0900\n\nMerge pull request #3094 from otavio/avoid-unwrap-or\n\nReplace `.unwrap_or` with `.map_or` in few places"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfdca9390b27131a0f05509d501887e83d7c538", "html_url": "https://github.com/rust-lang/rust/commit/8dfdca9390b27131a0f05509d501887e83d7c538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dfdca9390b27131a0f05509d501887e83d7c538/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d1f171dc1db055e15f42e40bb5d3f73837eaee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d1f171dc1db055e15f42e40bb5d3f73837eaee", "html_url": "https://github.com/rust-lang/rust/commit/a0d1f171dc1db055e15f42e40bb5d3f73837eaee"}, {"sha": "6d7fef078ea01f6cbe3ac9fee0044e32c138f309", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7fef078ea01f6cbe3ac9fee0044e32c138f309", "html_url": "https://github.com/rust-lang/rust/commit/6d7fef078ea01f6cbe3ac9fee0044e32c138f309"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "91260a199c4105e021b8e2313c01359aab58e437", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=8dfdca9390b27131a0f05509d501887e83d7c538", "patch": "@@ -156,9 +156,7 @@ fn make_opts() -> Options {\n }\n \n fn is_nightly() -> bool {\n-    option_env!(\"CFG_RELEASE_CHANNEL\")\n-        .map(|c| c == \"nightly\" || c == \"dev\")\n-        .unwrap_or(false)\n+    option_env!(\"CFG_RELEASE_CHANNEL\").map_or(false, |c| c == \"nightly\" || c == \"dev\")\n }\n \n // Returned i32 is an exit code"}, {"sha": "fa656cc351eea68c857d6bbe8ce99cdd3acaa384", "filename": "src/closures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=8dfdca9390b27131a0f05509d501887e83d7c538", "patch": "@@ -345,9 +345,9 @@ pub fn rewrite_last_closure(\n \n         // When overflowing the closure which consists of a single control flow expression,\n         // force to use block if its condition uses multi line.\n-        let is_multi_lined_cond = rewrite_cond(context, body, body_shape)\n-            .map(|cond| cond.contains('\\n') || cond.len() > body_shape.width)\n-            .unwrap_or(false);\n+        let is_multi_lined_cond = rewrite_cond(context, body, body_shape).map_or(false, |cond| {\n+            cond.contains('\\n') || cond.len() > body_shape.width\n+        });\n         if is_multi_lined_cond {\n             return rewrite_closure_with_block(body, &prefix, context, body_shape);\n         }"}, {"sha": "edd6ae5634f590cc712c53986eb603d2073d326a", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=8dfdca9390b27131a0f05509d501887e83d7c538", "patch": "@@ -72,9 +72,7 @@ impl ConfigType for IgnoreList {\n /// nightly compiler when installed from crates.io, default to nightly mode.\n macro_rules! is_nightly_channel {\n     () => {\n-        option_env!(\"CFG_RELEASE_CHANNEL\")\n-            .map(|c| c == \"nightly\" || c == \"dev\")\n-            .unwrap_or(true)\n+        option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\")\n     };\n }\n "}, {"sha": "7a6a147306011c05336009bd8c60003a828a0f44", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfdca9390b27131a0f05509d501887e83d7c538/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8dfdca9390b27131a0f05509d501887e83d7c538", "patch": "@@ -273,11 +273,9 @@ pub fn format_expr(\n \n                 format!(\n                     \"{}{}{}\",\n-                    lhs.map(|lhs| space_if(needs_space_before_range(context, lhs)))\n-                        .unwrap_or(\"\"),\n+                    lhs.map_or(\"\", |lhs| space_if(needs_space_before_range(context, lhs))),\n                     delim,\n-                    rhs.map(|rhs| space_if(needs_space_after_range(rhs)))\n-                        .unwrap_or(\"\"),\n+                    rhs.map_or(\"\", |rhs| space_if(needs_space_after_range(rhs))),\n                 )\n             };\n "}]}