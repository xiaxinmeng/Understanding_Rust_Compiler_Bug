{"sha": "8980d9a76d68f1b75f104c955aaafb0b0d0d58bc", "node_id": "C_kwDOAAsO6NoAKDg5ODBkOWE3NmQ2OGYxYjc1ZjEwNGM5NTVhYWFmYjBiMGQwZDU4YmM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T08:31:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T08:50:10Z"}, "message": "Remove `{Early,Late}LintPassObjects`.\n\n`EarlyContextAndPass` wraps a single early lint pass. We aggregate\nmultiple passes into that single pass by using `EarlyLintPassObjects`.\n\nThis commit removes `EarlyLintPassObjects` by changing\n`EarlyContextAndPass` into `EarlyContextAndPasses`. I.e. it just removes\na level of indirection. This makes the code simpler and slightly faster.\n\nThe commit does likewise for late lints.", "tree": {"sha": "cf10c577ec9684239989be858e0a8a1a4c7058b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf10c577ec9684239989be858e0a8a1a4c7058b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc", "html_url": "https://github.com/rust-lang/rust/commit/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e72ea1dc376e9c302c68faefafd967a8a7ef255a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72ea1dc376e9c302c68faefafd967a8a7ef255a", "html_url": "https://github.com/rust-lang/rust/commit/e72ea1dc376e9c302c68faefafd967a8a7ef255a"}], "stats": {"total": 151, "additions": 51, "deletions": 100}, "files": [{"sha": "52363b0be2db90fc51eb062847498a0ce8745be9", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 42, "deletions": 65, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=8980d9a76d68f1b75f104c955aaafb0b0d0d58bc", "patch": "@@ -20,21 +20,23 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self as ast_visit, Visitor};\n use rustc_ast::{self as ast, walk_list, HasAttrs};\n use rustc_middle::ty::RegisteredTools;\n-use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n+use rustc_session::lint::{BufferedEarlyLint, LintBuffer};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n-    $cx.pass.$f(&$cx.context, $($args),*);\n+macro_rules! run_early_passes { ($cx:expr, $f:ident, $($args:expr),*) => ({\n+    for pass in $cx.passes.iter_mut() {\n+        pass.$f(&$cx.context, $($args),*);\n+    }\n }) }\n \n-pub struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n+pub struct EarlyContextAndPasses<'a> {\n     context: EarlyContext<'a>,\n-    pass: T,\n+    passes: Vec<EarlyLintPassObject>,\n }\n \n-impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n+impl<'a> EarlyContextAndPasses<'a> {\n     fn check_id(&mut self, id: ast::NodeId) {\n         for early_lint in self.context.buffered.take(id) {\n             let BufferedEarlyLint { span, msg, node_id: _, lint_id, diagnostic } = early_lint;\n@@ -61,27 +63,27 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n \n         self.check_id(id);\n         debug!(\"early context: enter_attrs({:?})\", attrs);\n-        run_early_pass!(self, enter_lint_attrs, attrs);\n+        run_early_passes!(self, enter_lint_attrs, attrs);\n         f(self);\n         debug!(\"early context: exit_attrs({:?})\", attrs);\n-        run_early_pass!(self, exit_lint_attrs, attrs);\n+        run_early_passes!(self, exit_lint_attrs, attrs);\n         self.context.builder.pop(push);\n     }\n }\n \n-impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T> {\n+impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     fn visit_param(&mut self, param: &'a ast::Param) {\n         self.with_lint_attrs(param.id, &param.attrs, |cx| {\n-            run_early_pass!(cx, check_param, param);\n+            run_early_passes!(cx, check_param, param);\n             ast_visit::walk_param(cx, param);\n         });\n     }\n \n     fn visit_item(&mut self, it: &'a ast::Item) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_early_pass!(cx, check_item, it);\n+            run_early_passes!(cx, check_item, it);\n             ast_visit::walk_item(cx, it);\n-            run_early_pass!(cx, check_item_post, it);\n+            run_early_passes!(cx, check_item_post, it);\n         })\n     }\n \n@@ -92,10 +94,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n-        run_early_pass!(self, check_pat, p);\n+        run_early_passes!(self, check_pat, p);\n         self.check_id(p.id);\n         ast_visit::walk_pat(self, p);\n-        run_early_pass!(self, check_pat_post, p);\n+        run_early_passes!(self, check_pat_post, p);\n     }\n \n     fn visit_pat_field(&mut self, field: &'a ast::PatField) {\n@@ -111,7 +113,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         self.with_lint_attrs(e.id, &e.attrs, |cx| {\n-            run_early_pass!(cx, check_expr, e);\n+            run_early_passes!(cx, check_expr, e);\n             ast_visit::walk_expr(cx, e);\n         })\n     }\n@@ -132,7 +134,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // Note that statements get their attributes from\n         // the AST struct that they wrap (e.g. an item)\n         self.with_lint_attrs(s.id, s.attrs(), |cx| {\n-            run_early_pass!(cx, check_stmt, s);\n+            run_early_passes!(cx, check_stmt, s);\n             cx.check_id(s.id);\n         });\n         // The visitor for the AST struct wrapped\n@@ -143,7 +145,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, span: Span, id: ast::NodeId) {\n-        run_early_pass!(self, check_fn, fk, span, id);\n+        run_early_passes!(self, check_fn, fk, span, id);\n         self.check_id(id);\n         ast_visit::walk_fn(self, fk);\n \n@@ -171,37 +173,37 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_variant(&mut self, v: &'a ast::Variant) {\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {\n-            run_early_pass!(cx, check_variant, v);\n+            run_early_passes!(cx, check_variant, v);\n             ast_visit::walk_variant(cx, v);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &'a ast::Ty) {\n-        run_early_pass!(self, check_ty, t);\n+        run_early_passes!(self, check_ty, t);\n         self.check_id(t.id);\n         ast_visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, ident: Ident) {\n-        run_early_pass!(self, check_ident, ident);\n+        run_early_passes!(self, check_ident, ident);\n     }\n \n     fn visit_local(&mut self, l: &'a ast::Local) {\n         self.with_lint_attrs(l.id, &l.attrs, |cx| {\n-            run_early_pass!(cx, check_local, l);\n+            run_early_passes!(cx, check_local, l);\n             ast_visit::walk_local(cx, l);\n         })\n     }\n \n     fn visit_block(&mut self, b: &'a ast::Block) {\n-        run_early_pass!(self, check_block, b);\n+        run_early_passes!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n         self.with_lint_attrs(a.id, &a.attrs, |cx| {\n-            run_early_pass!(cx, check_arm, a);\n+            run_early_passes!(cx, check_arm, a);\n             ast_visit::walk_arm(cx, a);\n         })\n     }\n@@ -220,19 +222,19 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {\n-        run_early_pass!(self, check_generic_arg, arg);\n+        run_early_passes!(self, check_generic_arg, arg);\n         ast_visit::walk_generic_arg(self, arg);\n     }\n \n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n         self.with_lint_attrs(param.id, &param.attrs, |cx| {\n-            run_early_pass!(cx, check_generic_param, param);\n+            run_early_passes!(cx, check_generic_param, param);\n             ast_visit::walk_generic_param(cx, param);\n         });\n     }\n \n     fn visit_generics(&mut self, g: &'a ast::Generics) {\n-        run_early_pass!(self, check_generics, g);\n+        run_early_passes!(self, check_generics, g);\n         ast_visit::walk_generics(self, g);\n     }\n \n@@ -241,18 +243,18 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {\n-        run_early_pass!(self, check_poly_trait_ref, t);\n+        run_early_passes!(self, check_poly_trait_ref, t);\n         ast_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n         self.with_lint_attrs(item.id, &item.attrs, |cx| match ctxt {\n             ast_visit::AssocCtxt::Trait => {\n-                run_early_pass!(cx, check_trait_item, item);\n+                run_early_passes!(cx, check_trait_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n             }\n             ast_visit::AssocCtxt::Impl => {\n-                run_early_pass!(cx, check_impl_item, item);\n+                run_early_passes!(cx, check_impl_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n             }\n         });\n@@ -273,53 +275,28 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n-        run_early_pass!(self, check_attribute, attr);\n+        run_early_passes!(self, check_attribute, attr);\n     }\n \n     fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {\n-        run_early_pass!(self, check_mac_def, mac);\n+        run_early_passes!(self, check_mac_def, mac);\n         self.check_id(id);\n     }\n \n     fn visit_mac_call(&mut self, mac: &'a ast::MacCall) {\n-        run_early_pass!(self, check_mac, mac);\n+        run_early_passes!(self, check_mac, mac);\n         ast_visit::walk_mac(self, mac);\n     }\n }\n \n-struct EarlyLintPassObjects<'a> {\n-    lints: &'a mut [EarlyLintPassObject],\n-}\n-\n-#[allow(rustc::lint_pass_impl_without_macro)]\n-impl LintPass for EarlyLintPassObjects<'_> {\n-    fn name(&self) -> &'static str {\n-        panic!()\n-    }\n-}\n-\n-macro_rules! early_lint_pass_impl {\n-    ([], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        impl EarlyLintPass for EarlyLintPassObjects<'_> {\n-            $(fn $name(&mut self, context: &EarlyContext<'_>, $($param: $arg),*) {\n-                for obj in self.lints.iter_mut() {\n-                    obj.$name(context, $($param),*);\n-                }\n-            })*\n-        }\n-    )\n-}\n-\n-crate::early_lint_methods!(early_lint_pass_impl, []);\n-\n /// Early lints work on different nodes - either on the crate root, or on freshly loaded modules.\n /// This trait generalizes over those nodes.\n pub trait EarlyCheckNode<'a>: Copy {\n     fn id(self) -> ast::NodeId;\n     fn attrs<'b>(self) -> &'b [ast::Attribute]\n     where\n         'a: 'b;\n-    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    fn check<'b>(self, cx: &mut EarlyContextAndPasses<'b>)\n     where\n         'a: 'b;\n }\n@@ -334,13 +311,13 @@ impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {\n     {\n         &self.attrs\n     }\n-    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    fn check<'b>(self, cx: &mut EarlyContextAndPasses<'b>)\n     where\n         'a: 'b,\n     {\n-        run_early_pass!(cx, check_crate, self);\n+        run_early_passes!(cx, check_crate, self);\n         ast_visit::walk_crate(cx, self);\n-        run_early_pass!(cx, check_crate_post, self);\n+        run_early_passes!(cx, check_crate_post, self);\n     }\n }\n \n@@ -354,7 +331,7 @@ impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::\n     {\n         self.1\n     }\n-    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    fn check<'b>(self, cx: &mut EarlyContextAndPasses<'b>)\n     where\n         'a: 'b,\n     {\n@@ -374,18 +351,18 @@ pub fn check_ast_node<'a>(\n ) {\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n-    let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n+    let mut passes: Vec<EarlyLintPassObject> = passes.iter().map(|p| (p)()).collect();\n     passes.push(Box::new(builtin_lints));\n \n-    let mut cx = EarlyContextAndPass {\n+    let mut cx = EarlyContextAndPasses {\n         context: EarlyContext::new(\n             sess,\n             !pre_expansion,\n             lint_store,\n             registered_tools,\n             lint_buffer.unwrap_or_default(),\n         ),\n-        pass: EarlyLintPassObjects { lints: &mut passes[..] },\n+        passes,\n     };\n     cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n "}, {"sha": "8a50cb1f19ef5821b843911f5d1b65d06a152344", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8980d9a76d68f1b75f104c955aaafb0b0d0d58bc/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=8980d9a76d68f1b75f104c955aaafb0b0d0d58bc", "patch": "@@ -23,7 +23,6 @@ use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::lint::LintPass;\n use rustc_span::Span;\n \n use std::any::Any;\n@@ -37,15 +36,17 @@ pub fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {\n }\n \n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n-    $cx.pass.$f(&$cx.context, $($args),*);\n+    for pass in $cx.passes.iter_mut() {\n+        pass.$f(&$cx.context, $($args),*);\n+    }\n }) }\n \n-struct LateContextAndPass<'tcx, T: LateLintPass<'tcx>> {\n+struct LateContextAndPasses<'tcx> {\n     context: LateContext<'tcx>,\n-    pass: T,\n+    passes: Vec<LateLintPassObject<'tcx>>,\n }\n \n-impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n+impl<'tcx> LateContextAndPasses<'tcx> {\n     /// Merge the lints specified by any lint attributes into the\n     /// current lint context, call the provided function, then reset the\n     /// lints in effect to their previous state.\n@@ -81,7 +82,7 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n     }\n }\n \n-impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPass<'tcx, T> {\n+impl<'tcx> hir_visit::Visitor<'tcx> for LateContextAndPasses<'tcx> {\n     type NestedFilter = nested_filter::All;\n \n     /// Because lints are scoped lexically, we want to walk nested\n@@ -301,31 +302,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n }\n \n-struct LateLintPassObjects<'a, 'tcx> {\n-    lints: &'a mut [LateLintPassObject<'tcx>],\n-}\n-\n-#[allow(rustc::lint_pass_impl_without_macro)]\n-impl LintPass for LateLintPassObjects<'_, '_> {\n-    fn name(&self) -> &'static str {\n-        panic!()\n-    }\n-}\n-\n-macro_rules! late_lint_pass_impl {\n-    ([], [$hir:tt], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => {\n-        impl<$hir> LateLintPass<$hir> for LateLintPassObjects<'_, $hir> {\n-            $(fn $name(&mut self, context: &LateContext<$hir>, $($param: $arg),*) {\n-                for obj in self.lints.iter_mut() {\n-                    obj.$name(context, $($param),*);\n-                }\n-            })*\n-        }\n-    };\n-}\n-\n-crate::late_lint_methods!(late_lint_pass_impl, [], ['tcx]);\n-\n pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module_def_id: LocalDefId,\n@@ -346,9 +322,8 @@ pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     let mut passes: Vec<_> =\n         unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n     passes.push(Box::new(builtin_lints));\n-    let pass = LateLintPassObjects { lints: &mut passes[..] };\n \n-    let mut cx = LateContextAndPass { context, pass };\n+    let mut cx = LateContextAndPasses { context, passes };\n \n     let (module, _span, hir_id) = tcx.hir().get_module(module_def_id);\n     cx.process_mod(module, hir_id);\n@@ -377,9 +352,8 @@ fn late_lint_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(tcx: TyCtxt<'tcx>, builti\n     let mut passes =\n         unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n     passes.push(Box::new(builtin_lints));\n-    let pass = LateLintPassObjects { lints: &mut passes[..] };\n \n-    let mut cx = LateContextAndPass { context, pass };\n+    let mut cx = LateContextAndPasses { context, passes };\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {"}]}