{"sha": "d180c79a2f3737a21ab3ab426bdcd80622ed9185", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODBjNzlhMmYzNzM3YTIxYWIzYWI0MjZiZGNkODA2MjJlZDkxODU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-22T16:29:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T16:29:11Z"}, "message": "Rollup merge of #74568 - aticu:master, r=Mark-Simulacrum\n\nApply #66379 to `*mut T` `as_ref`\n\n#66379 changed the documentation of `as_ref` on the type `*const T` and `as_mut` on the type `*mut T`, but it missed making that same change for `as_ref` on the type `*mut T`.", "tree": {"sha": "e53fab54a73bd5977f7e6f001e3e91fe6c987df6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e53fab54a73bd5977f7e6f001e3e91fe6c987df6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d180c79a2f3737a21ab3ab426bdcd80622ed9185", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGGlXCRBK7hj4Ov3rIwAAdHIIACfHn1ONhSznWa1GJ+OJMpKF\nEW6A1ccj8fkLZ0yaYzEgUpt8m0+kd4g6QfZYayITSCSmYeHnJf+I4+z1Ah+iJ4b6\nwVL4X1PF/v+5rYy14FzYgqmt70Fb7whi60aRn/vnS8gPPHBZ4EARIWYUIqhuVJ/V\n3DidDx/OqPQ9xV6moaxiBNNVIq8glpZH18LDTASuXFhymtviS+ZvLk5be4ifwevw\n4Yv0aW/Q2R3SLtPZTdYcSl82K1k7GFacL16CrJzcV7ZzuajbYQqqagNqBZTGR242\nRS6cY2O3fdEVasKabCT1zQGP0b2NFWUisCjRbr1azpryQ3tS7rz0F44GT/EidSY=\n=28wb\n-----END PGP SIGNATURE-----\n", "payload": "tree e53fab54a73bd5977f7e6f001e3e91fe6c987df6\nparent f4079ce98078da93f9ce53e1099a96cbf80a5d9f\nparent 40df8fd0fad99db880bee40fce7c855922e7f0f9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595435351 -0700\ncommitter GitHub <noreply@github.com> 1595435351 -0700\n\nRollup merge of #74568 - aticu:master, r=Mark-Simulacrum\n\nApply #66379 to `*mut T` `as_ref`\n\n#66379 changed the documentation of `as_ref` on the type `*const T` and `as_mut` on the type `*mut T`, but it missed making that same change for `as_ref` on the type `*mut T`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d180c79a2f3737a21ab3ab426bdcd80622ed9185", "html_url": "https://github.com/rust-lang/rust/commit/d180c79a2f3737a21ab3ab426bdcd80622ed9185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d180c79a2f3737a21ab3ab426bdcd80622ed9185/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4079ce98078da93f9ce53e1099a96cbf80a5d9f", "html_url": "https://github.com/rust-lang/rust/commit/f4079ce98078da93f9ce53e1099a96cbf80a5d9f"}, {"sha": "40df8fd0fad99db880bee40fce7c855922e7f0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/40df8fd0fad99db880bee40fce7c855922e7f0f9", "html_url": "https://github.com/rust-lang/rust/commit/40df8fd0fad99db880bee40fce7c855922e7f0f9"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "915dc3e45f6445274af2ba29a3ab5e18a43436ca", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d180c79a2f3737a21ab3ab426bdcd80622ed9185/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d180c79a2f3737a21ab3ab426bdcd80622ed9185/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=d180c79a2f3737a21ab3ab426bdcd80622ed9185", "patch": "@@ -47,17 +47,22 @@ impl<T: ?Sized> *mut T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferenceable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     ///\n     /// # Examples\n     ///"}]}