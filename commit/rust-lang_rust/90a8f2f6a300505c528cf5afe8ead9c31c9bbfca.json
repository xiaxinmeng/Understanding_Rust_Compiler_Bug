{"sha": "90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYThmMmY2YTMwMDUwNWM1MjhjZjVhZmU4ZWFkOWMzMWM5YmJmY2E=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T12:02:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T12:02:55Z"}, "message": "Make the non-halting diagnostic scheme independent of `InterpError`", "tree": {"sha": "551fe2e2db21680728232f03130bfa57600d3b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/551fe2e2db21680728232f03130bfa57600d3b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "html_url": "https://github.com/rust-lang/rust/commit/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a7fd56021a375478bd9e202bf5692e4e48736a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a7fd56021a375478bd9e202bf5692e4e48736a", "html_url": "https://github.com/rust-lang/rust/commit/c0a7fd56021a375478bd9e202bf5692e4e48736a"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "cf27a9c3762fe1527fa40b7bbb2327282615b136", "filename": "src/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "patch": "@@ -1,7 +1,12 @@\n use rustc_mir::interpret::InterpErrorInfo;\n+use std::cell::RefCell;\n \n use crate::*;\n \n+pub enum NonHaltingDiagnostic {\n+    PoppedTrackedPointerTag(Item),\n+}\n+\n pub fn report_err<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     mut e: InterpErrorInfo<'tcx>,\n@@ -12,8 +17,6 @@ pub fn report_err<'tcx, 'mir>(\n             let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n             match info {\n                 TerminationInfo::Exit(code) => return Some(*code),\n-                TerminationInfo::PoppedTrackedPointerTag(item) =>\n-                    format!(\"popped tracked tag for item {:?}\", item),\n                 TerminationInfo::Abort => format!(\"the evaluated program aborted execution\"),\n             }\n         }\n@@ -25,11 +28,23 @@ pub fn report_err<'tcx, 'mir>(\n         _ => e.to_string(),\n     };\n     e.print_backtrace();\n+    report_msg(ecx, msg, true)\n+}\n+\n+pub fn report_msg<'tcx, 'mir>(\n+    ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    msg: String,\n+    error: bool,\n+) -> Option<i64> {\n     if let Some(frame) = ecx.stack().last() {\n         let span = frame.current_source_info().unwrap().span;\n \n-        let msg = format!(\"Miri evaluation error: {}\", msg);\n-        let mut err = ecx.tcx.sess.struct_span_err(span, msg.as_str());\n+        let mut err = if error {\n+            let msg = format!(\"Miri evaluation error: {}\", msg);\n+            ecx.tcx.sess.struct_span_err(span, msg.as_str())\n+        } else {\n+            ecx.tcx.sess.diagnostic().span_note_diag(span, msg.as_str())\n+        };\n         let frames = ecx.generate_stacktrace(None);\n         err.span_label(span, msg);\n         // We iterate with indices because we need to look at the next frame (the caller).\n@@ -61,12 +76,11 @@ pub fn report_err<'tcx, 'mir>(\n     return None;\n }\n \n-use std::cell::RefCell;\n thread_local! {\n-    static ECX: RefCell<Vec<InterpErrorInfo<'static>>> = RefCell::new(Vec::new());\n+    static ECX: RefCell<Vec<NonHaltingDiagnostic>> = RefCell::new(Vec::new());\n }\n \n-pub fn register_err(e: InterpErrorInfo<'static>) {\n+pub fn register_err(e: NonHaltingDiagnostic) {\n     ECX.with(|ecx| ecx.borrow_mut().push(e));\n }\n \n@@ -76,7 +90,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         ECX.with(|ecx| {\n             for e in ecx.borrow_mut().drain(..) {\n-                report_err(this, e);\n+                let msg = match e {\n+                    NonHaltingDiagnostic::PoppedTrackedPointerTag(item) =>\n+                        format!(\"popped tracked tag for item {:?}\", item),\n+                };\n+                report_msg(this, msg, false);\n             }\n         });\n     }"}, {"sha": "171f2627ad4a75de6f1bfddf6e2c0cf167385d3f", "filename": "src/eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "patch": "@@ -33,7 +33,6 @@ pub struct MiriConfig {\n /// Details of premature program termination.\n pub enum TerminationInfo {\n     Exit(i64),\n-    PoppedTrackedPointerTag(Item),\n     Abort,\n }\n "}, {"sha": "60e5217721560edcf6cddd422a38499947109d12", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "patch": "@@ -43,7 +43,7 @@ pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::EvalContextExt as ShimsEvalContextExt;\n \n pub use crate::diagnostics::{\n-    register_err, report_err, EvalContextExt as DiagnosticsEvalContextExt,\n+    register_err, report_err, EvalContextExt as DiagnosticsEvalContextExt, NonHaltingDiagnostic,\n };\n pub use crate::eval::{create_ecx, eval_main, MiriConfig, TerminationInfo};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;"}, {"sha": "a98c8e26c652d5920c39732bfdce6396522970bc", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a8f2f6a300505c528cf5afe8ead9c31c9bbfca/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=90a8f2f6a300505c528cf5afe8ead9c31c9bbfca", "patch": "@@ -10,7 +10,6 @@ use std::rc::Rc;\n use rustc_hir::Mutability;\n use rustc::mir::RetagKind;\n use rustc::ty::{self, layout::Size};\n-use rustc_mir::interpret::InterpError;\n \n use crate::*;\n \n@@ -267,12 +266,7 @@ impl<'tcx> Stack {\n     fn check_protector(item: &Item, tag: Option<Tag>, global: &GlobalState) -> InterpResult<'tcx> {\n         if let Tag::Tagged(id) = item.tag {\n             if Some(id) == global.tracked_pointer_tag {\n-                register_err(\n-                    InterpError::MachineStop(Box::new(TerminationInfo::PoppedTrackedPointerTag(\n-                        item.clone(),\n-                    )))\n-                    .into(),\n-                );\n+                register_err(NonHaltingDiagnostic::PoppedTrackedPointerTag(item.clone()));\n             }\n         }\n         if let Some(call) = item.protector {"}]}