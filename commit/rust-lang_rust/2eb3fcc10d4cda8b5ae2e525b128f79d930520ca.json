{"sha": "2eb3fcc10d4cda8b5ae2e525b128f79d930520ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjNmY2MxMGQ0Y2RhOGI1YWUyZTUyNWIxMjhmNzlkOTMwNTIwY2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-05-28T21:02:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "introduce `constrain_regions` helper", "tree": {"sha": "257dca07af919b167f5cb0941e422da0e368812a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257dca07af919b167f5cb0941e422da0e368812a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb3fcc10d4cda8b5ae2e525b128f79d930520ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb3fcc10d4cda8b5ae2e525b128f79d930520ca", "html_url": "https://github.com/rust-lang/rust/commit/2eb3fcc10d4cda8b5ae2e525b128f79d930520ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb3fcc10d4cda8b5ae2e525b128f79d930520ca/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aab48c963a43b28f88e428ecfe9e31d12530c47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aab48c963a43b28f88e428ecfe9e31d12530c47c", "html_url": "https://github.com/rust-lang/rust/commit/aab48c963a43b28f88e428ecfe9e31d12530c47c"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "47dfa3ea5082137ca68ca86f62476321cfb03c7e", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2eb3fcc10d4cda8b5ae2e525b128f79d930520ca/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb3fcc10d4cda8b5ae2e525b128f79d930520ca/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=2eb3fcc10d4cda8b5ae2e525b128f79d930520ca", "patch": "@@ -1,6 +1,3 @@\n-use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::Span;\n-\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::hir::Node;\n@@ -11,6 +8,7 @@ use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::subst::{InternalSubsts, Kind, SubstsRef, UnpackedKind};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use crate::util::nodemap::DefIdMap;\n+use rustc_data_structures::fx::FxHashMap;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n \n@@ -303,11 +301,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let required_region_bounds = tcx.required_region_bounds(opaque_type, bounds.predicates);\n             debug_assert!(!required_region_bounds.is_empty());\n \n-            for region in required_region_bounds {\n-                concrete_ty.visit_with(&mut OpaqueTypeOutlivesVisitor {\n-                    infcx: self,\n-                    least_region: region,\n-                    span,\n+            for required_region in required_region_bounds {\n+                concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n+                    tcx: self.tcx,\n+                    op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n                 });\n             }\n             return;\n@@ -389,7 +386,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let least_region = least_region.unwrap_or(tcx.lifetimes.re_static);\n         debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n \n-        concrete_ty.visit_with(&mut OpaqueTypeOutlivesVisitor { infcx: self, least_region, span });\n+        concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n+            tcx: self.tcx,\n+            op: |r| self.sub_regions(infer::CallReturn(span), least_region, r),\n+        });\n     }\n \n     /// Given the fully resolved, instantiated type for an opaque\n@@ -471,13 +471,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n //\n // We ignore any type parameters because impl trait values are assumed to\n // capture all the in-scope type parameters.\n-struct OpaqueTypeOutlivesVisitor<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n-    least_region: ty::Region<'tcx>,\n-    span: Span,\n+struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+where\n+    OP: FnMut(ty::Region<'tcx>),\n+{\n+    tcx: TyCtxt<'tcx>,\n+    op: OP,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for OpaqueTypeOutlivesVisitor<'_, 'tcx> {\n+impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+where\n+    OP: FnMut(ty::Region<'tcx>),\n+{\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> bool {\n         t.skip_binder().visit_with(self);\n         false // keep visiting\n@@ -488,7 +493,7 @@ impl<'tcx> TypeVisitor<'tcx> for OpaqueTypeOutlivesVisitor<'_, 'tcx> {\n             // ignore bound regions, keep visiting\n             ty::ReLateBound(_, _) => false,\n             _ => {\n-                self.infcx.sub_regions(infer::CallReturn(self.span), self.least_region, r);\n+                (self.op)(r);\n                 false\n             }\n         }\n@@ -504,23 +509,23 @@ impl<'tcx> TypeVisitor<'tcx> for OpaqueTypeOutlivesVisitor<'_, 'tcx> {\n             ty::Closure(def_id, ref substs) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n \n-                for upvar_ty in substs.upvar_tys(def_id, self.infcx.tcx) {\n+                for upvar_ty in substs.upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.closure_sig_ty(def_id, self.infcx.tcx).visit_with(self);\n+                substs.closure_sig_ty(def_id, self.tcx).visit_with(self);\n             }\n \n             ty::Generator(def_id, ref substs, _) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n                 // Also skip the witness type, because that has no free regions.\n \n-                for upvar_ty in substs.upvar_tys(def_id, self.infcx.tcx) {\n+                for upvar_ty in substs.upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.return_ty(def_id, self.infcx.tcx).visit_with(self);\n-                substs.yield_ty(def_id, self.infcx.tcx).visit_with(self);\n+                substs.return_ty(def_id, self.tcx).visit_with(self);\n+                substs.yield_ty(def_id, self.tcx).visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);"}]}