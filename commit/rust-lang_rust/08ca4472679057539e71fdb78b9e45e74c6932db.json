{"sha": "08ca4472679057539e71fdb78b9e45e74c6932db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Y2E0NDcyNjc5MDU3NTM5ZTcxZmRiNzhiOWU0NWU3NGM2OTMyZGI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T11:14:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T11:14:26Z"}, "message": "Rollup merge of #71476 - RalfJung:miri-test-sizes, r=kennytm\n\nmore compact way to adjust test sizes for Miri\n\nInspired by @dtolnay", "tree": {"sha": "93240efca356cd1318e475709d0de0750f5ba0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93240efca356cd1318e475709d0de0750f5ba0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ca4472679057539e71fdb78b9e45e74c6932db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeosoTCRBK7hj4Ov3rIwAAdHIIAKOHms+uwgr0LpkUMgcobnpP\nwtC1jmv4a5GvuhWicmDwCMDRdJTCMkwHaxOE11TAnKnu5Kv2QOMJOmpqPdWMlYjC\nCzBmZ62VCXhYPOyMcqLHpI/4XPWmJJJYyBB7V80CUoNXAWT/xP5avJUu33Ay4uku\nRDqNo52MZHZ5lu9gn578KZem1LGFmIb2m+gsQ9C9ep+z6IdrHIZgU6S287YHYDSW\nf6y8zPEyqiFk64XckIS1HNIBgRbaF6JLYDTHU0w74L8UtbRfVgnj+CEfnJrFyy2Q\nfsDtmX3y0WwCteQasP7b7I/9sMahWanit10ZUmaMhkhUyWVQQCpNaX21c9+3Hw8=\n=JdTl\n-----END PGP SIGNATURE-----\n", "payload": "tree 93240efca356cd1318e475709d0de0750f5ba0d5\nparent aa9053a3e76ecf2a35fecee5e83e5b27582cf9df\nparent eb1de2ff39de631e9fd880f1e066fbe119b23f99\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587726866 +0200\ncommitter GitHub <noreply@github.com> 1587726866 +0200\n\nRollup merge of #71476 - RalfJung:miri-test-sizes, r=kennytm\n\nmore compact way to adjust test sizes for Miri\n\nInspired by @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ca4472679057539e71fdb78b9e45e74c6932db", "html_url": "https://github.com/rust-lang/rust/commit/08ca4472679057539e71fdb78b9e45e74c6932db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ca4472679057539e71fdb78b9e45e74c6932db/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df", "html_url": "https://github.com/rust-lang/rust/commit/aa9053a3e76ecf2a35fecee5e83e5b27582cf9df"}, {"sha": "eb1de2ff39de631e9fd880f1e066fbe119b23f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1de2ff39de631e9fd880f1e066fbe119b23f99", "html_url": "https://github.com/rust-lang/rust/commit/eb1de2ff39de631e9fd880f1e066fbe119b23f99"}], "stats": {"total": 152, "additions": 51, "deletions": 101}, "files": [{"sha": "0a3f33003233f2dc5c1a7928afa5562bf05e03eb", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -386,10 +386,8 @@ fn test_vec_from_vecdeque() {\n         assert!(vec.into_iter().eq(vd));\n     }\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    let max_pwr = 7;\n-    #[cfg(miri)]\n-    let max_pwr = 5;\n+    // Miri is too slow\n+    let max_pwr = if cfg!(miri) { 5 } else { 7 };\n \n     for cap_pwr in 0..max_pwr {\n         // Make capacity as a (2^x)-1, so that the ring size is 2^x"}, {"sha": "057afd41824e745b062e22cd5139ed7c5a3df422", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -409,16 +409,14 @@ fn panic_safe() {\n     }\n     let mut rng = thread_rng();\n     const DATASZ: usize = 32;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const NTEST: usize = 10;\n-    #[cfg(miri)]\n-    const NTEST: usize = 1;\n+    // Miri is too slow\n+    let ntest = if cfg!(miri) { 1 } else { 10 };\n \n     // don't use 0 in the data -- we want to catch the zeroed-out case.\n     let data = (1..=DATASZ).collect::<Vec<_>>();\n \n     // since it's a fuzzy test, run several tries.\n-    for _ in 0..NTEST {\n+    for _ in 0..ntest {\n         for i in 1..=DATASZ {\n             DROP_COUNTER.store(0, Ordering::SeqCst);\n "}, {"sha": "731a1b5f875b7c32bcf1f046684287df1b5c599d", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -28,10 +28,8 @@ const MIN_INSERTS_HEIGHT_2: usize = NODE_CAPACITY + (NODE_CAPACITY + 1) * NODE_C\n #[test]\n fn test_basic_large() {\n     let mut map = BTreeMap::new();\n-    #[cfg(not(miri))] // Miri is too slow\n-    let size = 10000;\n-    #[cfg(miri)]\n-    let size = MIN_INSERTS_HEIGHT_2;\n+    // Miri is too slow\n+    let size = if cfg!(miri) { MIN_INSERTS_HEIGHT_2 } else { 10000 };\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -155,10 +153,8 @@ fn test_basic_small() {\n \n #[test]\n fn test_iter() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let size = 10000;\n-    #[cfg(miri)]\n-    let size = 200;\n+    // Miri is too slow\n+    let size = if cfg!(miri) { 200 } else { 10000 };\n \n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n@@ -180,10 +176,8 @@ fn test_iter() {\n \n #[test]\n fn test_iter_rev() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let size = 10000;\n-    #[cfg(miri)]\n-    let size = 200;\n+    // Miri is too slow\n+    let size = if cfg!(miri) { 200 } else { 10000 };\n \n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n@@ -289,10 +283,8 @@ fn test_values_mut() {\n \n #[test]\n fn test_iter_mixed() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let size = 10000;\n-    #[cfg(miri)]\n-    let size = 200;\n+    // Miri is too slow\n+    let size = if cfg!(miri) { 200 } else { 10000 };\n \n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n@@ -525,10 +517,8 @@ fn test_range_backwards_4() {\n \n #[test]\n fn test_range_1000() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let size = 1000;\n-    #[cfg(miri)]\n-    let size = MIN_INSERTS_HEIGHT_2 as u32;\n+    // Miri is too slow\n+    let size = if cfg!(miri) { MIN_INSERTS_HEIGHT_2 as u32 } else { 1000 };\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) {\n@@ -566,10 +556,8 @@ fn test_range_borrowed_key() {\n #[test]\n fn test_range() {\n     let size = 200;\n-    #[cfg(not(miri))] // Miri is too slow\n-    let step = 1;\n-    #[cfg(miri)]\n-    let step = 66;\n+    // Miri is too slow\n+    let step = if cfg!(miri) { 66 } else { 1 };\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in (0..size).step_by(step) {\n@@ -589,10 +577,8 @@ fn test_range() {\n #[test]\n fn test_range_mut() {\n     let size = 200;\n-    #[cfg(not(miri))] // Miri is too slow\n-    let step = 1;\n-    #[cfg(miri)]\n-    let step = 66;\n+    // Miri is too slow\n+    let step = if cfg!(miri) { 66 } else { 1 };\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in (0..size).step_by(step) {\n@@ -1263,10 +1249,8 @@ fn test_split_off_empty_left() {\n \n #[test]\n fn test_split_off_large_random_sorted() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let mut data = rand_data(1529);\n-    #[cfg(miri)]\n-    let mut data = rand_data(529);\n+    // Miri is too slow\n+    let mut data = if cfg!(miri) { rand_data(529) } else { rand_data(1529) };\n     // special case with maximum height.\n     data.sort();\n "}, {"sha": "75251ca0d51e9b8b4c49f4f057d03da80f886e54", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -621,10 +621,8 @@ fn test_split_off_empty_left() {\n \n #[test]\n fn test_split_off_large_random_sorted() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let mut data = rand_data(1529);\n-    #[cfg(miri)]\n-    let mut data = rand_data(529);\n+    // Miri is too slow\n+    let mut data = if cfg!(miri) { rand_data(529) } else { rand_data(1529) };\n     // special case with maximum height.\n     data.sort();\n "}, {"sha": "75b76bb73ed9e83c327f949c833fb5f9f4022ca9", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -463,15 +463,9 @@ fn test_sort() {\n \n #[test]\n fn test_sort_stability() {\n-    #[cfg(not(miri))] // Miri is too slow\n-    let large_range = 500..510;\n-    #[cfg(not(miri))] // Miri is too slow\n-    let rounds = 10;\n-\n-    #[cfg(miri)]\n-    let large_range = 0..0; // empty range\n-    #[cfg(miri)]\n-    let rounds = 1;\n+    // Miri is too slow\n+    let large_range = if cfg!(miri) { 0..0 } else { 500..510 };\n+    let rounds = if cfg!(miri) { 1 } else { 10 };\n \n     for len in (2..25).chain(large_range) {\n         for _ in 0..rounds {\n@@ -1727,15 +1721,9 @@ fn panic_safe() {\n \n     let mut rng = thread_rng();\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    let lens = (1..20).chain(70..MAX_LEN);\n-    #[cfg(not(miri))] // Miri is too slow\n-    let moduli = &[5, 20, 50];\n-\n-    #[cfg(miri)]\n-    let lens = 1..10;\n-    #[cfg(miri)]\n-    let moduli = &[5];\n+    // Miri is too slow\n+    let lens = if cfg!(miri) { (1..10).chain(20..21) } else { (1..20).chain(70..MAX_LEN) };\n+    let moduli: &[u32] = if cfg!(miri) { &[5] } else { &[5, 20, 50] };\n \n     for len in lens {\n         for &modulus in moduli {"}, {"sha": "762dc4be44d6208950d4bd03e2fba8de66c45fcc", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -954,16 +954,14 @@ fn test_append_permutations() {\n         out\n     }\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    const MAX: usize = 5;\n-    #[cfg(miri)]\n-    const MAX: usize = 3;\n+    // Miri is too slow\n+    let max = if cfg!(miri) { 3 } else { 5 };\n \n     // Many different permutations of both the `VecDeque` getting appended to\n     // and the one getting appended are generated to check `append`.\n     // This ensures all 6 code paths of `append` are tested.\n-    for src_push_back in 0..MAX {\n-        for src_push_front in 0..MAX {\n+    for src_push_back in 0..max {\n+        for src_push_front in 0..max {\n             // doesn't pop more values than are pushed\n             for src_pop_back in 0..(src_push_back + src_push_front) {\n                 for src_pop_front in 0..(src_push_back + src_push_front - src_pop_back) {\n@@ -974,8 +972,8 @@ fn test_append_permutations() {\n                         src_pop_front,\n                     );\n \n-                    for dst_push_back in 0..MAX {\n-                        for dst_push_front in 0..MAX {\n+                    for dst_push_back in 0..max {\n+                        for dst_push_front in 0..max {\n                             for dst_pop_back in 0..(dst_push_back + dst_push_front) {\n                                 for dst_pop_front in\n                                     0..(dst_push_back + dst_push_front - dst_pop_back)"}, {"sha": "da203b5f3620ef7606115ebf7bfe1a3a6bba02b4", "filename": "src/libcore/tests/num/flt2dec/estimator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -52,12 +52,10 @@ fn test_estimate_scaling_factor() {\n     assert_almost_eq!(estimate_scaling_factor(1, -1074), -323);\n     assert_almost_eq!(estimate_scaling_factor(0x1fffffffffffff, 971), 309);\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    let iter = -1074..972;\n-    #[cfg(miri)]\n-    let iter = (-1074..972).step_by(37);\n+    // Miri is too slow\n+    let step = if cfg!(miri) { 37 } else { 1 };\n \n-    for i in iter {\n+    for i in (-1074..972).step_by(step) {\n         let expected = super::ldexp_f64(1.0, i).log10().ceil();\n         assert_almost_eq!(estimate_scaling_factor(1, i as i16), expected as i16);\n     }"}, {"sha": "0ebc0881f5223870ec8b546c302adb0aa9c9c30c", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -138,13 +138,11 @@ where\n #[test]\n fn shortest_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_shortest as fallback;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const N: usize = 10_000;\n-    #[cfg(miri)]\n-    const N: usize = 10;\n+    // Miri is too slow\n+    let n = if cfg!(miri) { 10 } else { 10_000 };\n \n-    f64_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, N);\n-    f32_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, N);\n+    f64_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, n);\n+    f32_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, n);\n }\n \n #[test]\n@@ -173,35 +171,31 @@ fn shortest_f64_hard_random_equivalence_test() {\n #[test]\n fn exact_f32_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_exact as fallback;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const N: usize = 1_000;\n-    #[cfg(miri)]\n-    const N: usize = 3;\n+    // Miri is too slow\n+    let n = if cfg!(miri) { 3 } else { 1_000 };\n \n     for k in 1..21 {\n         f32_random_equivalence_test(\n             |d, buf| format_exact_opt(d, buf, i16::MIN),\n             |d, buf| fallback(d, buf, i16::MIN),\n             k,\n-            N,\n+            n,\n         );\n     }\n }\n \n #[test]\n fn exact_f64_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_exact as fallback;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const N: usize = 1_000;\n-    #[cfg(miri)]\n-    const N: usize = 3;\n+    // Miri is too slow\n+    let n = if cfg!(miri) { 3 } else { 1_000 };\n \n     for k in 1..21 {\n         f64_random_equivalence_test(\n             |d, buf| format_exact_opt(d, buf, i16::MIN),\n             |d, buf| fallback(d, buf, i16::MIN),\n             k,\n-            N,\n+            n,\n         );\n     }\n }"}, {"sha": "54a585415bce2b512a93a3d52ff85052d242b816", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ca4472679057539e71fdb78b9e45e74c6932db/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=08ca4472679057539e71fdb78b9e45e74c6932db", "patch": "@@ -1227,15 +1227,9 @@ fn sort_unstable() {\n     use core::slice::heapsort;\n     use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    let large_range = 500..510;\n-    #[cfg(not(miri))] // Miri is too slow\n-    let rounds = 100;\n-\n-    #[cfg(miri)]\n-    let large_range = 0..0; // empty range\n-    #[cfg(miri)]\n-    let rounds = 1;\n+    // Miri is too slow\n+    let large_range = if cfg!(miri) { 0..0 } else { 500..510 };\n+    let rounds = if cfg!(miri) { 1 } else { 100 };\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];"}]}