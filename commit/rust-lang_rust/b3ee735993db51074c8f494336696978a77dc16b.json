{"sha": "b3ee735993db51074c8f494336696978a77dc16b", "node_id": "C_kwDOAAsO6NoAKGIzZWU3MzU5OTNkYjUxMDc0YzhmNDk0MzM2Njk2OTc4YTc3ZGMxNmI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-22T09:55:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-13T13:31:55Z"}, "message": "resolve: Remove `struct_field_names_untracked`", "tree": {"sha": "cd20a4b010afcb57e34f15275772dd01dcc4843f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd20a4b010afcb57e34f15275772dd01dcc4843f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ee735993db51074c8f494336696978a77dc16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ee735993db51074c8f494336696978a77dc16b", "html_url": "https://github.com/rust-lang/rust/commit/b3ee735993db51074c8f494336696978a77dc16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ee735993db51074c8f494336696978a77dc16b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a716f35636678fde3f5f71f3163909484b99a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a716f35636678fde3f5f71f3163909484b99a55", "html_url": "https://github.com/rust-lang/rust/commit/2a716f35636678fde3f5f71f3163909484b99a55"}], "stats": {"total": 132, "additions": 56, "deletions": 76}, "files": [{"sha": "a680730d1f52d7da9824c09839de54f6e6e07167", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -30,7 +30,6 @@ use rustc_session::cstore::{\n };\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnIndex;\n-use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n@@ -1134,20 +1133,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, sess))\n     }\n \n-    fn get_struct_field_names(\n-        self,\n-        id: DefIndex,\n-        sess: &'a Session,\n-    ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {\n-        self.root\n-            .tables\n-            .children\n-            .get(self, id)\n-            .expect(\"fields not encoded for a struct\")\n-            .decode(self)\n-            .map(move |index| respan(self.get_span(index, sess), self.item_name(index)))\n-    }\n-\n     fn get_inherent_implementations_for_type(\n         self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "7ace335dd3dc9896d4044cb31f00bbecb0897b96", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -19,8 +19,8 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::cstore::{CrateSource, CrateStore};\n use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n-use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::Span;\n \n use rustc_data_structures::sync::Lrc;\n use std::any::Any;\n@@ -507,14 +507,6 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n }\n \n impl CStore {\n-    pub fn struct_field_names_untracked<'a>(\n-        &'a self,\n-        def: DefId,\n-        sess: &'a Session,\n-    ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {\n-        self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n-    }\n-\n     pub fn ctor_untracked(&self, def: DefId) -> Option<(CtorKind, DefId)> {\n         self.get_crate_data(def.krate).get_ctor(def.index)\n     }"}, {"sha": "362ef693c48d5b5576fde410a454fd102f6df021", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -29,7 +29,6 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::{bug, ty};\n use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -327,13 +326,13 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn insert_field_names_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {\n-        let field_names = vdata\n-            .fields()\n-            .iter()\n-            .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))\n-            .collect();\n-        self.r.field_names.insert(def_id, field_names);\n+    fn insert_field_def_ids(&mut self, def_id: LocalDefId, vdata: &ast::VariantData) {\n+        if vdata.fields().iter().any(|field| field.is_placeholder) {\n+            // The fields are not expanded yet.\n+            return;\n+        }\n+        let def_ids = vdata.fields().iter().map(|field| self.r.local_def_id(field.id).to_def_id());\n+        self.r.field_def_ids.insert(def_id, self.r.tcx.arena.alloc_from_iter(def_ids));\n     }\n \n     fn insert_field_visibilities_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {\n@@ -345,12 +344,6 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         self.r.field_visibility_spans.insert(def_id, field_vis);\n     }\n \n-    fn insert_field_names_extern(&mut self, def_id: DefId) {\n-        let field_names =\n-            self.r.cstore().struct_field_names_untracked(def_id, self.r.tcx.sess).collect();\n-        self.r.field_names.insert(def_id, field_names);\n-    }\n-\n     fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {\n         // If any statements are items, we need to create an anonymous module\n         block\n@@ -748,7 +741,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n                 // Record field names for error reporting.\n-                self.insert_field_names_local(def_id, vdata);\n+                self.insert_field_def_ids(local_def_id, vdata);\n                 self.insert_field_visibilities_local(def_id, vdata);\n \n                 // If this is a tuple or unit struct, define a name\n@@ -797,7 +790,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n                 // Record field names for error reporting.\n-                self.insert_field_names_local(def_id, vdata);\n+                self.insert_field_def_ids(local_def_id, vdata);\n                 self.insert_field_visibilities_local(def_id, vdata);\n             }\n \n@@ -1003,12 +996,6 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             | Res::SelfCtor(..)\n             | Res::Err => bug!(\"unexpected resolution: {:?}\", res),\n         }\n-        // Record some extra data for better diagnostics.\n-        match res {\n-            Res::Def(DefKind::Struct, def_id) => self.insert_field_names_extern(def_id),\n-            Res::Def(DefKind::Union, def_id) => self.insert_field_names_extern(def_id),\n-            _ => {}\n-        }\n     }\n \n     fn add_macro_use_binding(\n@@ -1519,7 +1506,7 @@ impl<'a, 'b, 'tcx> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         }\n \n         // Record field names for error reporting.\n-        self.insert_field_names_local(def_id.to_def_id(), &variant.data);\n+        self.insert_field_def_ids(def_id, &variant.data);\n         self.insert_field_visibilities_local(def_id.to_def_id(), &variant.data);\n \n         visit::walk_variant(self, variant);"}, {"sha": "44a3d4e628ebce8b13a0f30c04ad6fd5004ab461", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -1581,8 +1581,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         )) = binding.kind\n         {\n             let def_id = self.tcx.parent(ctor_def_id);\n-            let fields = self.field_names.get(&def_id)?;\n-            return fields.iter().map(|name| name.span).reduce(Span::to); // None for `struct Foo()`\n+            return self\n+                .field_def_ids(def_id)?\n+                .iter()\n+                .map(|&field_id| self.def_span(field_id))\n+                .reduce(Span::to); // None for `struct Foo()`\n         }\n         None\n     }"}, {"sha": "805c2ff280d8be69ed9e627beeece02ec0191d7f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -1295,19 +1295,23 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         }\n                         _ => (\": val\", \"literal\", Applicability::HasPlaceholders),\n                     };\n-                    let (fields, applicability) = match self.r.field_names.get(&def_id) {\n-                        Some(fields) => (\n-                            fields\n+\n+                    let field_ids = self.r.field_def_ids(def_id);\n+                    let (fields, applicability) = match field_ids {\n+                        Some(field_ids) => (\n+                            field_ids\n                                 .iter()\n-                                .map(|f| format!(\"{}{}\", f.node, tail))\n+                                .map(|&field_id| {\n+                                    format!(\"{}{tail}\", self.r.tcx.item_name(field_id))\n+                                })\n                                 .collect::<Vec<String>>()\n                                 .join(\", \"),\n                             applicability,\n                         ),\n                         None => (\"/* fields */\".to_string(), Applicability::HasPlaceholders),\n                     };\n-                    let pad = match self.r.field_names.get(&def_id) {\n-                        Some(fields) if fields.is_empty() => \"\",\n+                    let pad = match field_ids {\n+                        Some(field_ids) if field_ids.is_empty() => \"\",\n                         _ => \" \",\n                     };\n                     err.span_suggestion(\n@@ -1451,10 +1455,12 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         );\n \n                         // Use spans of the tuple struct definition.\n-                        self.r\n-                            .field_names\n-                            .get(&def_id)\n-                            .map(|fields| fields.iter().map(|f| f.span).collect::<Vec<_>>())\n+                        self.r.field_def_ids(def_id).map(|field_ids| {\n+                            field_ids\n+                                .iter()\n+                                .map(|&field_id| self.r.def_span(field_id))\n+                                .collect::<Vec<_>>()\n+                        })\n                     }\n                     _ => None,\n                 };\n@@ -1517,9 +1523,9 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_def_id), _) if ns == ValueNS => {\n                 let def_id = self.r.tcx.parent(ctor_def_id);\n                 err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n-                let fields = self.r.field_names.get(&def_id).map_or_else(\n+                let fields = self.r.field_def_ids(def_id).map_or_else(\n                     || \"/* fields */\".to_string(),\n-                    |fields| vec![\"_\"; fields.len()].join(\", \"),\n+                    |field_ids| vec![\"_\"; field_ids.len()].join(\", \"),\n                 );\n                 err.span_suggestion(\n                     span,\n@@ -1600,8 +1606,11 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     if let Some(Res::Def(DefKind::Struct | DefKind::Union, did)) =\n                         resolution.full_res()\n                     {\n-                        if let Some(field_names) = self.r.field_names.get(&did) {\n-                            if field_names.iter().any(|&field_name| ident.name == field_name.node) {\n+                        if let Some(field_ids) = self.r.field_def_ids(did) {\n+                            if field_ids\n+                                .iter()\n+                                .any(|&field_id| ident.name == self.r.tcx.item_name(field_id))\n+                            {\n                                 return Some(AssocSuggestion::Field);\n                             }\n                         }\n@@ -2015,11 +2024,12 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         } else {\n             let needs_placeholder = |ctor_def_id: DefId, kind: CtorKind| {\n                 let def_id = self.r.tcx.parent(ctor_def_id);\n-                let has_no_fields = self.r.field_names.get(&def_id).map_or(false, |f| f.is_empty());\n                 match kind {\n                     CtorKind::Const => false,\n-                    CtorKind::Fn if has_no_fields => false,\n-                    _ => true,\n+                    CtorKind::Fn => !self\n+                        .r\n+                        .field_def_ids(def_id)\n+                        .map_or(false, |field_ids| field_ids.is_empty()),\n                 }\n             };\n "}, {"sha": "ae1d9406467d6952c31ec3efdc94ac277ea8c7bf", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -50,7 +50,6 @@ use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::LintBuffer;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -881,10 +880,7 @@ pub struct Resolver<'a, 'tcx> {\n \n     /// N.B., this is used only for better diagnostics, not name resolution itself.\n     has_self: LocalDefIdSet,\n-\n-    /// Names of fields of an item `DefId` accessible with dot syntax.\n-    /// Used for hints during error reporting.\n-    field_names: FxHashMap<DefId, Vec<Spanned<Symbol>>>,\n+    field_def_ids: LocalDefIdMap<&'tcx [DefId]>,\n \n     /// Span of the privacy modifier in fields of an item `DefId` accessible with dot syntax.\n     /// Used for hints during error reporting.\n@@ -1249,7 +1245,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             extern_prelude,\n \n             has_self: Default::default(),\n-            field_names: FxHashMap::default(),\n+            field_def_ids: Default::default(),\n             field_visibility_spans: FxHashMap::default(),\n \n             determined_imports: Vec::new(),\n@@ -1877,6 +1873,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n+    fn field_def_ids(&self, def_id: DefId) -> Option<&'tcx [DefId]> {\n+        match def_id.as_local() {\n+            Some(def_id) => self.field_def_ids.get(&def_id).copied(),\n+            None => Some(self.tcx.associated_item_def_ids(def_id)),\n+        }\n+    }\n+\n     /// Checks if an expression refers to a function marked with\n     /// `#[rustc_legacy_const_generics]` and returns the argument index list\n     /// from the attribute."}, {"sha": "45001c7975324e48e087cfd1b3cbb70e362c2992", "filename": "tests/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/tests%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/tests%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -46,8 +46,8 @@ LL |     XEmpty5(),\n    |\n help: use the tuple variant pattern syntax instead\n    |\n-LL |         XE::XEmpty5(/* fields */) => (),\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |         XE::XEmpty5() => (),\n+   |         ~~~~~~~~~~~~~\n help: a unit variant with a similar name exists\n    |\n LL |         XE::XEmpty4 => (),"}, {"sha": "0d7f2e4af69aa5be95050f1d00a501b24b05cb21", "filename": "tests/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee735993db51074c8f494336696978a77dc16b/tests%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee735993db51074c8f494336696978a77dc16b/tests%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=b3ee735993db51074c8f494336696978a77dc16b", "patch": "@@ -113,8 +113,8 @@ LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n    |\n help: use the tuple variant pattern syntax instead\n    |\n-LL |         E1::Z1(/* fields */) => {}\n-   |         ~~~~~~~~~~~~~~~~~~~~\n+LL |         E1::Z1() => {}\n+   |         ~~~~~~~~\n help: a unit variant with a similar name exists\n    |\n LL |         E1::Z0 => {}"}]}