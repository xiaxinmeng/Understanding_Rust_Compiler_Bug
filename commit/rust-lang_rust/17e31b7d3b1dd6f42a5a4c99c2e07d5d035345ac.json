{"sha": "17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "node_id": "C_kwDOAAsO6NoAKDE3ZTMxYjdkM2IxZGQ2ZjQyYTVhNGM5OWMyZTA3ZDVkMDM1MzQ1YWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T19:39:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T19:39:02Z"}, "message": "Auto merge of #14440 - Veykril:deref-fix, r=Veykril\n\nfix: Handle box and raw pointers correctly in builtin_deref", "tree": {"sha": "fc52b1fb60ac9fa19316a71c400077b55ec25195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc52b1fb60ac9fa19316a71c400077b55ec25195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "html_url": "https://github.com/rust-lang/rust/commit/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5351c21b7e57b556c88fb825da14d57522e80a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/5351c21b7e57b556c88fb825da14d57522e80a26", "html_url": "https://github.com/rust-lang/rust/commit/5351c21b7e57b556c88fb825da14d57522e80a26"}, {"sha": "e79747965197e362b375a7019571331b5be2394e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79747965197e362b375a7019571331b5be2394e", "html_url": "https://github.com/rust-lang/rust/commit/e79747965197e362b375a7019571331b5be2394e"}], "stats": {"total": 101, "additions": 62, "deletions": 39}, "files": [{"sha": "6a7ea8a990ab8832d113b4b5e8be0dd7e8a74043", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "patch": "@@ -6,7 +6,10 @@\n use std::sync::Arc;\n \n use chalk_ir::cast::Cast;\n-use hir_def::lang_item::LangItem;\n+use hir_def::{\n+    lang_item::{LangItem, LangItemTarget},\n+    AdtId,\n+};\n use hir_expand::name::name;\n use limit::Limit;\n \n@@ -76,7 +79,7 @@ pub(crate) fn autoderef_step(\n     table: &mut InferenceTable<'_>,\n     ty: Ty,\n ) -> Option<(AutoderefKind, Ty)> {\n-    if let Some(derefed) = builtin_deref(&ty) {\n+    if let Some(derefed) = builtin_deref(table, &ty, false) {\n         Some((AutoderefKind::Builtin, table.resolve_ty_shallow(derefed)))\n     } else {\n         Some((AutoderefKind::Overloaded, deref_by_trait(table, ty)?))\n@@ -99,26 +102,41 @@ pub fn autoderef(\n     v.into_iter()\n }\n \n-pub(crate) fn deref(table: &mut InferenceTable<'_>, ty: Ty) -> Option<Ty> {\n-    let _p = profile::span(\"deref\");\n-    autoderef_step(table, ty).map(|(_, ty)| ty)\n-}\n-\n-fn builtin_deref(ty: &Ty) -> Option<&Ty> {\n+pub(crate) fn builtin_deref<'ty>(\n+    table: &mut InferenceTable<'_>,\n+    ty: &'ty Ty,\n+    explicit: bool,\n+) -> Option<&'ty Ty> {\n     match ty.kind(Interner) {\n-        TyKind::Ref(.., ty) | TyKind::Raw(.., ty) => Some(ty),\n+        TyKind::Ref(.., ty) => Some(ty),\n+        // FIXME: Maybe accept this but diagnose if its not explicit?\n+        TyKind::Raw(.., ty) if explicit => Some(ty),\n+        &TyKind::Adt(chalk_ir::AdtId(AdtId::StructId(strukt)), ref substs) => {\n+            if Some(strukt)\n+                == table\n+                    .db\n+                    .lang_item(table.trait_env.krate, LangItem::OwnedBox)\n+                    .and_then(LangItemTarget::as_struct)\n+            {\n+                substs.at(Interner, 0).ty(Interner)\n+            } else {\n+                None\n+            }\n+        }\n         _ => None,\n     }\n }\n \n-fn deref_by_trait(table: &mut InferenceTable<'_>, ty: Ty) -> Option<Ty> {\n+pub(crate) fn deref_by_trait(\n+    table @ &mut InferenceTable { db, .. }: &mut InferenceTable<'_>,\n+    ty: Ty,\n+) -> Option<Ty> {\n     let _p = profile::span(\"deref_by_trait\");\n     if table.resolve_ty_shallow(&ty).inference_var(Interner).is_some() {\n         // don't try to deref unknown variables\n         return None;\n     }\n \n-    let db = table.db;\n     let deref_trait =\n         db.lang_item(table.trait_env.krate, LangItem::Deref).and_then(|l| l.as_trait())?;\n     let target = db.trait_data(deref_trait).associated_type_by_name(&name![Target])?;"}, {"sha": "5c47e1f00a41fc47b19dcc604eb5cb729c20a943", "filename": "crates/hir-ty/src/consteval/tests/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests%2Fintrinsics.rs?ref=17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "patch": "@@ -86,7 +86,7 @@ fn offset() {\n             ];\n             let ar: *const [(u8, u8, u8)] = ar;\n             let ar = ar as *const (u8, u8, u8);\n-            let element = offset(ar, 2);\n+            let element = *offset(ar, 2);\n             element.1\n         };\n         \"#,\n@@ -113,7 +113,7 @@ fn arith_offset() {\n             ];\n             let ar: *const [(u8, u8, u8)] = ar;\n             let ar = ar as *const (u8, u8, u8);\n-            let element = arith_offset(arith_offset(ar, 102), -100);\n+            let element = *arith_offset(arith_offset(ar, 102), -100);\n             element.1\n         };\n         \"#,"}, {"sha": "6c1214c172606aa4b88a3553c84181f5f3b914c2", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "patch": "@@ -661,11 +661,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME: Note down method resolution her\n                 match op {\n                     UnaryOp::Deref => {\n-                        if let Some(deref_trait) = self\n-                            .db\n-                            .lang_item(self.table.trait_env.krate, LangItem::Deref)\n-                            .and_then(|l| l.as_trait())\n-                        {\n+                        if let Some(deref_trait) = self.resolve_lang_trait(LangItem::Deref) {\n                             if let Some(deref_fn) =\n                                 self.db.trait_data(deref_trait).method_by_name(&name![deref])\n                             {\n@@ -678,7 +674,14 @@ impl<'a> InferenceContext<'a> {\n                                 );\n                             }\n                         }\n-                        autoderef::deref(&mut self.table, inner_ty).unwrap_or_else(|| self.err_ty())\n+                        if let Some(derefed) =\n+                            autoderef::builtin_deref(&mut self.table, &inner_ty, true)\n+                        {\n+                            self.resolve_ty_shallow(derefed)\n+                        } else {\n+                            autoderef::deref_by_trait(&mut self.table, inner_ty)\n+                                .unwrap_or_else(|| self.err_ty())\n+                        }\n                     }\n                     UnaryOp::Neg => {\n                         match inner_ty.kind(Interner) {"}, {"sha": "17663ad38b3fb4f31949249a5119a5683bf9a68a", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "patch": "@@ -854,9 +854,9 @@ fn test2(a1: *const A, a2: *mut A) {\n             237..239 'a2': *mut A\n             249..272 '{     ...2.b; }': ()\n             255..257 'a1': *const A\n-            255..259 'a1.b': B\n+            255..259 'a1.b': {unknown}\n             265..267 'a2': *mut A\n-            265..269 'a2.b': B\n+            265..269 'a2.b': {unknown}\n         \"#]],\n     );\n }"}, {"sha": "813beaa364978150a53a37fd31ed0dd728dfa269", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=17e31b7d3b1dd6f42a5a4c99c2e07d5d035345ac", "patch": "@@ -3051,7 +3051,7 @@ impl<T: ?Sized> core::ops::Deref for Box<T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        &self.inner\n+        unsafe { &*self.inner }\n     }\n }\n \n@@ -3062,23 +3062,25 @@ fn foo() {\n }\"#,\n         expect![[r#\"\n             154..158 'self': &Box<T>\n-            166..193 '{     ...     }': &T\n-            176..187 '&self.inner': &*mut T\n-            177..181 'self': &Box<T>\n-            177..187 'self.inner': *mut T\n-            206..296 '{     ...&s); }': ()\n-            216..217 's': Option<i32>\n-            220..224 'None': Option<i32>\n-            234..235 'f': Box<dyn FnOnce(&Option<i32>)>\n-            269..282 'box (|ps| {})': Box<|&Option<i32>| -> ()>\n-            274..281 '|ps| {}': |&Option<i32>| -> ()\n-            275..277 'ps': &Option<i32>\n-            279..281 '{}': ()\n-            288..289 'f': Box<dyn FnOnce(&Option<i32>)>\n-            288..293 'f(&s)': ()\n-            290..292 '&s': &Option<i32>\n-            291..292 's': Option<i32>\n-            269..282: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|&Option<i32>| -> ()>\n+            166..205 '{     ...     }': &T\n+            176..199 'unsafe...nner }': &T\n+            185..197 '&*self.inner': &T\n+            186..197 '*self.inner': T\n+            187..191 'self': &Box<T>\n+            187..197 'self.inner': *mut T\n+            218..308 '{     ...&s); }': ()\n+            228..229 's': Option<i32>\n+            232..236 'None': Option<i32>\n+            246..247 'f': Box<dyn FnOnce(&Option<i32>)>\n+            281..294 'box (|ps| {})': Box<|&Option<i32>| -> ()>\n+            286..293 '|ps| {}': |&Option<i32>| -> ()\n+            287..289 'ps': &Option<i32>\n+            291..293 '{}': ()\n+            300..301 'f': Box<dyn FnOnce(&Option<i32>)>\n+            300..305 'f(&s)': ()\n+            302..304 '&s': &Option<i32>\n+            303..304 's': Option<i32>\n+            281..294: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|&Option<i32>| -> ()>\n         \"#]],\n     );\n }"}]}