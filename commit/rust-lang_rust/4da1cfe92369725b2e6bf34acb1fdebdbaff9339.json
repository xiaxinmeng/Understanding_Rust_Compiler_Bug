{"sha": "4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTFjZmU5MjM2OTcyNWIyZTZiZjM0YWNiMWZkZWJkYmFmZjkzMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-07T07:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-07T07:56:18Z"}, "message": "auto merge of #8285 : huonw/rust/deriving+++, r=alexcrichton\n\nSome general clean-up relating to deriving:\r\n- `TotalOrd` was too eager, and evaluated the `.cmp` call for every field, even if it could short-circuit earlier.\r\n- the pointer types didn't have impls for `TotalOrd` or `TotalEq`.\r\n- the Makefiles didn't reach deep enough into libsyntax for dependencies.\r\n\r\n(Split out from https://github.com/mozilla/rust/pull/8258.)", "tree": {"sha": "49b56d74ac57a6900fc250a5e04b57994b6fd011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b56d74ac57a6900fc250a5e04b57994b6fd011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "html_url": "https://github.com/rust-lang/rust/commit/4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62dbdc4ea2aa5d57d52bca4159a176942e0ad214", "url": "https://api.github.com/repos/rust-lang/rust/commits/62dbdc4ea2aa5d57d52bca4159a176942e0ad214", "html_url": "https://github.com/rust-lang/rust/commit/62dbdc4ea2aa5d57d52bca4159a176942e0ad214"}, {"sha": "4f3944a34fb5b2f644a2ff6783e0af4116e5a832", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3944a34fb5b2f644a2ff6783e0af4116e5a832", "html_url": "https://github.com/rust-lang/rust/commit/4f3944a34fb5b2f644a2ff6783e0af4116e5a832"}], "stats": {"total": 163, "additions": 143, "deletions": 20}, "files": [{"sha": "a9a41a073d03366291a404187213a417cd608de6", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -297,7 +297,7 @@ COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/librustc/,      \\\n \n LIBSYNTAX_CRATE := $(S)src/libsyntax/syntax.rs\n LIBSYNTAX_INPUTS := $(wildcard $(addprefix $(S)src/libsyntax/, \\\n-                           *.rs */*.rs */*/*.rs))\n+                           *.rs */*.rs */*/*.rs */*/*/*.rs))\n \n DRIVER_CRATE := $(S)src/driver/driver.rs\n "}, {"sha": "6c3d4c5f1fbeab4d82dec81c1543d7e4eeb74939", "filename": "src/libstd/borrow.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fborrow.rs?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -58,3 +58,15 @@ impl<'self, T: Ord> Ord for &'self T {\n         *(*self) > *(*other)\n     }\n }\n+\n+#[cfg(not(test))]\n+impl<'self, T: TotalOrd> TotalOrd for &'self T {\n+    #[inline]\n+    fn cmp(&self, other: & &'self T) -> Ordering { (**self).cmp(*other) }\n+}\n+\n+#[cfg(not(test))]\n+impl<'self, T: TotalEq> TotalEq for &'self T {\n+    #[inline]\n+    fn equals(&self, other: & &'self T) -> bool { (**self).equals(*other) }\n+}"}, {"sha": "b66f89e83415e1b22ad0a575f950f1855057460f", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -153,7 +153,6 @@ pub fn cmp2<A:TotalOrd,B:TotalOrd>(\n Return `o1` if it is not `Equal`, otherwise `o2`. Simulates the\n lexical ordering on a type `(int, int)`.\n */\n-// used in deriving code in libsyntax\n #[inline]\n pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n     match o1 {"}, {"sha": "57230b2fd247d4e86d9a844dc6bc39c798056378", "filename": "src/libstd/managed.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -12,7 +12,7 @@\n \n use ptr::to_unsafe_ptr;\n \n-#[cfg(not(test))] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::*;\n \n pub static RC_MANAGED_UNIQUE : uint = (-2) as uint;\n pub static RC_IMMORTAL : uint = 0x77777777;\n@@ -71,6 +71,29 @@ impl<T:Ord> Ord for @mut T {\n     fn gt(&self, other: &@mut T) -> bool { *(*self) > *(*other) }\n }\n \n+#[cfg(not(test))]\n+impl<T: TotalOrd> TotalOrd for @T {\n+    #[inline]\n+    fn cmp(&self, other: &@T) -> Ordering { (**self).cmp(*other) }\n+}\n+\n+#[cfg(not(test))]\n+impl<T: TotalOrd> TotalOrd for @mut T {\n+    #[inline]\n+    fn cmp(&self, other: &@mut T) -> Ordering { (**self).cmp(*other) }\n+}\n+\n+#[cfg(not(test))]\n+impl<T: TotalEq> TotalEq for @T {\n+    #[inline]\n+    fn equals(&self, other: &@T) -> bool { (**self).equals(*other) }\n+}\n+\n+#[cfg(not(test))]\n+impl<T: TotalEq> TotalEq for @mut T {\n+    #[inline]\n+    fn equals(&self, other: &@mut T) -> bool { (**self).equals(*other) }\n+}\n #[test]\n fn test() {\n     let x = @3;"}, {"sha": "424c4fd6b2f44d0e4f4102e04e1827a62f667670", "filename": "src/libstd/owned.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibstd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fowned.rs?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on unique pointer types\n \n-#[cfg(not(test))] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::*;\n \n #[cfg(not(test))]\n impl<T:Eq> Eq for ~T {\n@@ -31,3 +31,15 @@ impl<T:Ord> Ord for ~T {\n     #[inline]\n     fn gt(&self, other: &~T) -> bool { *(*self) > *(*other) }\n }\n+\n+#[cfg(not(test))]\n+impl<T: TotalOrd> TotalOrd for ~T {\n+    #[inline]\n+    fn cmp(&self, other: &~T) -> Ordering { (**self).cmp(*other) }\n+}\n+\n+#[cfg(not(test))]\n+impl<T: TotalEq> TotalEq for ~T {\n+    #[inline]\n+    fn equals(&self, other: &~T) -> bool { (**self).equals(*other) }\n+}"}, {"sha": "001e92355282f9d5f095dfab787c3afa9dd779d4", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use ast::{MetaItem, item, expr};\n use codemap::span;\n use ext::base::ExtCtxt;\n@@ -40,40 +41,70 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n }\n \n \n-pub fn ordering_const(cx: @ExtCtxt, span: span, cnst: Ordering) -> @expr {\n+pub fn ordering_const(cx: @ExtCtxt, span: span, cnst: Ordering) -> ast::Path {\n     let cnst = match cnst {\n         Less => \"Less\",\n         Equal => \"Equal\",\n         Greater => \"Greater\"\n     };\n-    cx.expr_path(\n-        cx.path_global(span,\n-                       ~[cx.ident_of(\"std\"),\n-                         cx.ident_of(\"cmp\"),\n-                         cx.ident_of(cnst)]))\n+    cx.path_global(span,\n+                   ~[cx.ident_of(\"std\"),\n+                     cx.ident_of(\"cmp\"),\n+                     cx.ident_of(cnst)])\n }\n \n pub fn cs_cmp(cx: @ExtCtxt, span: span,\n               substr: &Substructure) -> @expr {\n+    let test_id = cx.ident_of(\"__test\");\n+    let equals_path = ordering_const(cx, span, Equal);\n \n+    /*\n+    Builds:\n+\n+    let __test = self_field1.cmp(&other_field2);\n+    if other == ::std::cmp::Equal {\n+        let __test = self_field2.cmp(&other_field2);\n+        if __test == ::std::cmp::Equal {\n+            ...\n+        } else {\n+            __test\n+        }\n+    } else {\n+        __test\n+    }\n+\n+    FIXME #6449: These `if`s could/should be `match`es.\n+    */\n     cs_same_method_fold(\n-        // foldr (possibly) nests the matches in lexical_ordering better\n+        // foldr nests the if-elses correctly, leaving the first field\n+        // as the outermost one, and the last as the innermost.\n         false,\n         |cx, span, old, new| {\n-            cx.expr_call_global(span,\n-                                ~[cx.ident_of(\"std\"),\n-                                  cx.ident_of(\"cmp\"),\n-                                  cx.ident_of(\"lexical_ordering\")],\n-                                ~[old, new])\n+            // let __test = new;\n+            // if __test == ::std::cmp::Equal {\n+            //    old\n+            // } else {\n+            //    __test\n+            // }\n+\n+            let assign = cx.stmt_let(span, false, test_id, new);\n+\n+            let cond = cx.expr_binary(span, ast::eq,\n+                                      cx.expr_ident(span, test_id),\n+                                      cx.expr_path(equals_path.clone()));\n+            let if_ = cx.expr_if(span,\n+                                 cond,\n+                                 old, Some(cx.expr_ident(span, test_id)));\n+            cx.expr_block(cx.block(span, ~[assign], Some(if_)))\n         },\n-        ordering_const(cx, span, Equal),\n+        cx.expr_path(equals_path.clone()),\n         |cx, span, list, _| {\n             match list {\n                 // an earlier nonmatching variant is Less than a\n-                // later one\n+                // later one.\n                 [(self_var, _, _),\n-                 (other_var, _, _)] => ordering_const(cx, span,\n-                                                      self_var.cmp(&other_var)),\n+                 (other_var, _, _)] => cx.expr_path(ordering_const(cx, span,\n+                                                                   self_var.cmp(&other_var))),\n                 _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(TotalOrd)`\")\n             }\n         },"}, {"sha": "7f5c78cf602ad400a5c11d7ea8c2e59030623cb7", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da1cfe92369725b2e6bf34acb1fdebdbaff9339/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=4da1cfe92369725b2e6bf34acb1fdebdbaff9339", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that the derived impls for the comparison traits shortcircuit\n+// where possible, by having a type that fails when compared as the\n+// second element, so this passes iff the instances shortcircuit.\n+\n+pub struct FailCmp;\n+impl Eq for FailCmp {\n+    fn eq(&self, _: &FailCmp) -> bool { fail!(\"eq\") }\n+}\n+\n+impl Ord for FailCmp {\n+    fn lt(&self, _: &FailCmp) -> bool { fail!(\"lt\") }\n+}\n+\n+impl TotalEq for FailCmp {\n+    fn equals(&self, _: &FailCmp) -> bool { fail!(\"equals\") }\n+}\n+\n+impl TotalOrd for FailCmp {\n+    fn cmp(&self, _: &FailCmp) -> Ordering { fail!(\"cmp\") }\n+}\n+\n+#[deriving(Eq,Ord,TotalEq,TotalOrd)]\n+struct ShortCircuit {\n+    x: int,\n+    y: FailCmp\n+}\n+\n+fn main() {\n+    let a = ShortCircuit { x: 1, y: FailCmp };\n+    let b = ShortCircuit { x: 2, y: FailCmp };\n+\n+    assert!(a != b);\n+    assert!(a < b);\n+    assert!(!a.equals(&b));\n+    assert_eq!(a.cmp(&b), ::std::cmp::Less);\n+}"}]}