{"sha": "4f8049a2b00c46cb1ac77cabaaf716895f185afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODA0OWEyYjAwYzQ2Y2IxYWM3N2NhYmFhZjcxNjg5NWYxODVhZmU=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-09T09:47:18Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-09T09:47:18Z"}, "message": "Add Range[Inclusive]::is_empty\n\nDuring the RFC, it was discussed that figuring out whether a range is empty was subtle, and thus there should be a clear and obvious way to do it.  It can't just be ExactSizeIterator::is_empty (also unstable) because not all ranges are ExactSize -- not even Range<i32> or RangeInclusive<usize>.", "tree": {"sha": "9d04efd20feb079c5cc6e1a5182535109a8ca47c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d04efd20feb079c5cc6e1a5182535109a8ca47c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8049a2b00c46cb1ac77cabaaf716895f185afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8049a2b00c46cb1ac77cabaaf716895f185afe", "html_url": "https://github.com/rust-lang/rust/commit/4f8049a2b00c46cb1ac77cabaaf716895f185afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8049a2b00c46cb1ac77cabaaf716895f185afe/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa8acce251cda7ab1548640fdb769139a45f839", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa8acce251cda7ab1548640fdb769139a45f839", "html_url": "https://github.com/rust-lang/rust/commit/afa8acce251cda7ab1548640fdb769139a45f839"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "860742d9eab6047b3fc6ff0510401d33cfdda949", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=4f8049a2b00c46cb1ac77cabaaf716895f185afe", "patch": "@@ -706,7 +706,7 @@ pub trait ExactSizeIterator: Iterator {\n     /// ```\n     /// #![feature(exact_size_is_empty)]\n     ///\n-    /// let mut one_element = 0..1;\n+    /// let mut one_element = std::iter::once(0);\n     /// assert!(!one_element.is_empty());\n     ///\n     /// assert_eq!(one_element.next(), Some(0));"}, {"sha": "102e08362cb4cb3d6099e4a83528bee3782d2787", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=4f8049a2b00c46cb1ac77cabaaf716895f185afe", "patch": "@@ -92,7 +92,6 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n@@ -109,9 +108,26 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!(!(3..3).contains(3));\n     /// assert!(!(3..2).contains(3));\n     /// ```\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains(&self, item: Idx) -> bool {\n         (self.start <= item) && (item < self.end)\n     }\n+\n+    /// Returns `true` if the range contains no items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty)]\n+    ///\n+    /// assert!(!(3..5).is_empty());\n+    /// assert!( (3..3).is_empty());\n+    /// assert!( (3..2).is_empty());\n+    /// ```\n+    #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"123456789\")]\n+    pub fn is_empty(&self) -> bool {\n+        !(self.start < self.end)\n+    }\n }\n \n /// A range only bounded inclusively below (`start..`).\n@@ -280,7 +296,6 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n@@ -298,9 +313,26 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!( (3..=3).contains(3));\n     /// assert!(!(3..=2).contains(3));\n     /// ```\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains(&self, item: Idx) -> bool {\n         self.start <= item && item <= self.end\n     }\n+\n+    /// Returns `true` if the range contains no items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// assert!(!(3..=5).is_empty());\n+    /// assert!(!(3..=3).is_empty());\n+    /// assert!( (3..=2).is_empty());\n+    /// ```\n+    #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"123456789\")]\n+    pub fn is_empty(&self) -> bool {\n+        !(self.start <= self.end)\n+    }\n }\n \n /// A range only bounded inclusively above (`..=end`)."}, {"sha": "062b6d4126e2c3f56caad8ee0f726768a5d327c7", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=4f8049a2b00c46cb1ac77cabaaf716895f185afe", "patch": "@@ -1427,9 +1427,9 @@ fn test_range_inclusive_nth() {\n     assert_eq!(r, 13..=20);\n     assert_eq!(r.nth(2), Some(15));\n     assert_eq!(r, 16..=20);\n-    assert_eq!(r.is_empty(), false);\n+    assert_eq!(ExactSizeIterator::is_empty(&r), false);\n     assert_eq!(r.nth(10), None);\n-    assert_eq!(r.is_empty(), true);\n+    assert_eq!(ExactSizeIterator::is_empty(&r), true);\n     assert_eq!(r, 1..=0);  // We may not want to document/promise this detail\n }\n "}, {"sha": "91b4f02594bc3900b20cd93fb700da7be0e90f6f", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=4f8049a2b00c46cb1ac77cabaaf716895f185afe", "patch": "@@ -29,6 +29,7 @@\n #![feature(iter_rfold)]\n #![feature(nonzero)]\n #![feature(pattern)]\n+#![feature(range_is_empty)]\n #![feature(raw)]\n #![feature(refcell_replace_swap)]\n #![feature(sip_hash_13)]"}, {"sha": "68a692b24a3fbb9d12079b63f34c3ea1cb61208b", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8049a2b00c46cb1ac77cabaaf716895f185afe/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=4f8049a2b00c46cb1ac77cabaaf716895f185afe", "patch": "@@ -68,3 +68,27 @@ fn test_range_inclusive() {\n     assert_eq!(r.size_hint(), (0, Some(0)));\n     assert_eq!(r.next(), None);\n }\n+\n+\n+#[test]\n+fn test_range_is_empty() {\n+    use core::f32::*;\n+\n+    assert!(!(0.0 .. 10.0).is_empty());\n+    assert!( (-0.0 .. 0.0).is_empty());\n+    assert!( (10.0 .. 0.0).is_empty());\n+\n+    assert!(!(NEG_INFINITY .. INFINITY).is_empty());\n+    assert!( (EPSILON .. NAN).is_empty());\n+    assert!( (NAN .. EPSILON).is_empty());\n+    assert!( (NAN .. NAN).is_empty());\n+\n+    assert!(!(0.0 ..= 10.0).is_empty());\n+    assert!(!(-0.0 ..= 0.0).is_empty());\n+    assert!( (10.0 ..= 0.0).is_empty());\n+\n+    assert!(!(NEG_INFINITY ..= INFINITY).is_empty());\n+    assert!( (EPSILON ..= NAN).is_empty());\n+    assert!( (NAN ..= EPSILON).is_empty());\n+    assert!( (NAN ..= NAN).is_empty());\n+}\n\\ No newline at end of file"}]}