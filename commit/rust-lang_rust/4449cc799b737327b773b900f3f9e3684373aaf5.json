{"sha": "4449cc799b737327b773b900f3f9e3684373aaf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NDljYzc5OWI3MzczMjdiNzczYjkwMGYzZjllMzY4NDM3M2FhZjU=", "commit": {"author": {"name": "Marcin Serwin", "email": "toxyxer@gmail.com", "date": "2020-04-06T13:29:54Z"}, "committer": {"name": "Marcin Serwin", "email": "toxyxer@gmail.com", "date": "2020-04-09T06:18:52Z"}, "message": "Make the epsilon note spanless", "tree": {"sha": "c95503602397822b478b81a7feda05abcbaa2a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c95503602397822b478b81a7feda05abcbaa2a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4449cc799b737327b773b900f3f9e3684373aaf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4449cc799b737327b773b900f3f9e3684373aaf5", "html_url": "https://github.com/rust-lang/rust/commit/4449cc799b737327b773b900f3f9e3684373aaf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4449cc799b737327b773b900f3f9e3684373aaf5/comments", "author": {"login": "marcin-serwin", "id": 12128106, "node_id": "MDQ6VXNlcjEyMTI4MTA2", "avatar_url": "https://avatars.githubusercontent.com/u/12128106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcin-serwin", "html_url": "https://github.com/marcin-serwin", "followers_url": "https://api.github.com/users/marcin-serwin/followers", "following_url": "https://api.github.com/users/marcin-serwin/following{/other_user}", "gists_url": "https://api.github.com/users/marcin-serwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcin-serwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcin-serwin/subscriptions", "organizations_url": "https://api.github.com/users/marcin-serwin/orgs", "repos_url": "https://api.github.com/users/marcin-serwin/repos", "events_url": "https://api.github.com/users/marcin-serwin/events{/privacy}", "received_events_url": "https://api.github.com/users/marcin-serwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcin-serwin", "id": 12128106, "node_id": "MDQ6VXNlcjEyMTI4MTA2", "avatar_url": "https://avatars.githubusercontent.com/u/12128106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcin-serwin", "html_url": "https://github.com/marcin-serwin", "followers_url": "https://api.github.com/users/marcin-serwin/followers", "following_url": "https://api.github.com/users/marcin-serwin/following{/other_user}", "gists_url": "https://api.github.com/users/marcin-serwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcin-serwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcin-serwin/subscriptions", "organizations_url": "https://api.github.com/users/marcin-serwin/orgs", "repos_url": "https://api.github.com/users/marcin-serwin/repos", "events_url": "https://api.github.com/users/marcin-serwin/events{/privacy}", "received_events_url": "https://api.github.com/users/marcin-serwin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "html_url": "https://github.com/rust-lang/rust/commit/4e01ca35a08a104b5ab28e3e0c5c324264989fc6"}], "stats": {"total": 82, "additions": 16, "deletions": 66}, "files": [{"sha": "58a5a29eb16bc8f70bf793e749e537aaae7a6a52", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4449cc799b737327b773b900f3f9e3684373aaf5/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4449cc799b737327b773b900f3f9e3684373aaf5/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=4449cc799b737327b773b900f3f9e3684373aaf5", "patch": "@@ -378,9 +378,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        if is_comparing_arrays {\n-                            db.note(\"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n-                        } else {\n+                        if !is_comparing_arrays {\n                             db.span_suggestion(\n                                 expr.span,\n                                 \"consider comparing them within some error\",\n@@ -391,8 +389,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                                 ),\n                                 Applicability::HasPlaceholders, // snippet\n                             );\n-                            db.span_note(expr.span, \"`f32::EPSILON` and `f64::EPSILON` are available.\");\n                         }\n+                        db.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error`\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");"}, {"sha": "2d454e8e70de5ab173e7a0d511f1872f896cdac8", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4449cc799b737327b773b900f3f9e3684373aaf5/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4449cc799b737327b773b900f3f9e3684373aaf5/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=4449cc799b737327b773b900f3f9e3684373aaf5", "patch": "@@ -5,67 +5,47 @@ LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:65:5\n-   |\n-LL |     ONE as f64 != 2.0;\n-   |     ^^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:70:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:70:5\n-   |\n-LL |     x == 1.0;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:73:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:73:5\n-   |\n-LL |     twice(x) != twice(ONE as f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:93:5\n    |\n LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:93:5\n-   |\n-LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` arrays\n   --> $DIR/float_cmp.rs:98:5\n    |\n LL |     a1 == a2;\n    |     ^^^^^^^^\n    |\n-   = note: `f32::EPSILON` and `f64::EPSILON` are available.\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:99:5\n    |\n LL |     a1[0] == a2[0];\n    |     ^^^^^^^^^^^^^^ help: consider comparing them within some error: `(a1[0] - a2[0]).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:99:5\n-   |\n-LL |     a1[0] == a2[0];\n-   |     ^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "19dc4a284b726744b219bd4aa9f2d55e40fa130a", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4449cc799b737327b773b900f3f9e3684373aaf5/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4449cc799b737327b773b900f3f9e3684373aaf5/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=4449cc799b737327b773b900f3f9e3684373aaf5", "patch": "@@ -5,91 +5,63 @@ LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:20:5\n-   |\n-LL |     1f32 == ONE;\n-   |     ^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:21:5\n-   |\n-LL |     TWO == ONE;\n-   |     ^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:22:5\n-   |\n-LL |     TWO != ONE;\n-   |     ^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:23:5\n-   |\n-LL |     ONE + ONE == TWO;\n-   |     ^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:25:5\n-   |\n-LL |     x as f32 == ONE;\n-   |     ^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:28:5\n-   |\n-LL |     v == ONE;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:29:5\n-   |\n-LL |     v != ONE;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant arrays\n   --> $DIR/float_cmp_const.rs:61:5\n    |\n LL |     NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: aborting due to 8 previous errors\n "}]}