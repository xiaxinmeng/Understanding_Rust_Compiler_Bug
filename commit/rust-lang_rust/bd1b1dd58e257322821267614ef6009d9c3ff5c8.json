{"sha": "bd1b1dd58e257322821267614ef6009d9c3ff5c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMWIxZGQ1OGUyNTczMjI4MjEyNjc2MTRlZjYwMDlkOWMzZmY1Yzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-06T13:58:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-06T13:58:29Z"}, "message": "Handle #![windows_subsystem]", "tree": {"sha": "5b93de9e3f2182f1d70e47fd64adaffc23ef9b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b93de9e3f2182f1d70e47fd64adaffc23ef9b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1b1dd58e257322821267614ef6009d9c3ff5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1b1dd58e257322821267614ef6009d9c3ff5c8", "html_url": "https://github.com/rust-lang/rust/commit/bd1b1dd58e257322821267614ef6009d9c3ff5c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1b1dd58e257322821267614ef6009d9c3ff5c8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3d640d45d88410511f610796b9a36465899eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3d640d45d88410511f610796b9a36465899eee", "html_url": "https://github.com/rust-lang/rust/commit/5f3d640d45d88410511f610796b9a36465899eee"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "0f1da66170a32c3ca1681ffea2c26fa1d1affc92", "filename": "src/driver/aot.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd1b1dd58e257322821267614ef6009d9c3ff5c8/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1b1dd58e257322821267614ef6009d9c3ff5c8/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=bd1b1dd58e257322821267614ef6009d9c3ff5c8", "patch": "@@ -163,6 +163,22 @@ pub(super) fn run_aot(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)> {\n+    use rustc_span::symbol::sym;\n+\n+    let subsystem = tcx\n+        .sess\n+        .first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n+    let windows_subsystem = subsystem.map(|subsystem| {\n+        if subsystem != sym::windows && subsystem != sym::console {\n+            tcx.sess.fatal(&format!(\n+                \"invalid windows subsystem `{}`, only \\\n+                                    `windows` and `console` are allowed\",\n+                subsystem\n+            ));\n+        }\n+        subsystem.to_string()\n+    });\n+\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n@@ -280,7 +296,7 @@ pub(super) fn run_aot(\n             allocator_module,\n             metadata_module,\n             metadata,\n-            windows_subsystem: None, // Windows is not yet supported\n+            windows_subsystem,\n             linker_info: LinkerInfo::new(tcx),\n             crate_info: CrateInfo::new(tcx),\n         },"}]}