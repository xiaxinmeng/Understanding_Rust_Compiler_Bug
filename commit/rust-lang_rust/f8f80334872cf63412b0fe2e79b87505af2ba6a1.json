{"sha": "f8f80334872cf63412b0fe2e79b87505af2ba6a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZjgwMzM0ODcyY2Y2MzQxMmIwZmUyZTc5Yjg3NTA1YWYyYmE2YTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-23T11:22:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T13:42:59Z"}, "message": "assert that types without discriminant use variant idx of 0", "tree": {"sha": "d7706123c53ee69fce7ef5f7699e7cd872ca3cf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7706123c53ee69fce7ef5f7699e7cd872ca3cf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f80334872cf63412b0fe2e79b87505af2ba6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f80334872cf63412b0fe2e79b87505af2ba6a1", "html_url": "https://github.com/rust-lang/rust/commit/f8f80334872cf63412b0fe2e79b87505af2ba6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f80334872cf63412b0fe2e79b87505af2ba6a1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3971cdb8694717f56b8c1bc2cd597bb4ac1677", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3971cdb8694717f56b8c1bc2cd597bb4ac1677", "html_url": "https://github.com/rust-lang/rust/commit/5a3971cdb8694717f56b8c1bc2cd597bb4ac1677"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "81ef8172da77f3e32ba6da81562084937d729e31", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f80334872cf63412b0fe2e79b87505af2ba6a1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f80334872cf63412b0fe2e79b87505af2ba6a1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=f8f80334872cf63412b0fe2e79b87505af2ba6a1", "patch": "@@ -596,7 +596,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         Scalar::from_uint(discr.val, discr_layout.size)\n                     }\n                     None => {\n-                        // On a type without actual discriminants, return variant idx as `u8`.\n+                        // On a type without actual discriminants, variant is 0. Return variant idx as `u8`.\n+                        assert_eq!(index.as_u32(), 0);\n                         let discr_layout = self.layout_of(self.tcx.types.u8)?;\n                         Scalar::from_uint(index.as_u32(), discr_layout.size)\n                     }"}]}