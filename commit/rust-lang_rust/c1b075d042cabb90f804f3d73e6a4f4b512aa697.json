{"sha": "c1b075d042cabb90f804f3d73e6a4f4b512aa697", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjA3NWQwNDJjYWJiOTBmODA0ZjNkNzNlNmE0ZjRiNTEyYWE2OTc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-03T08:34:42Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-03T10:34:12Z"}, "message": "Remove experimental GC code\n\nIt's been sitting unused long enough to have bitrotted completely.", "tree": {"sha": "ac1501fb72bff6b04597c054c138ae2fc8ce24dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1501fb72bff6b04597c054c138ae2fc8ce24dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b075d042cabb90f804f3d73e6a4f4b512aa697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b075d042cabb90f804f3d73e6a4f4b512aa697", "html_url": "https://github.com/rust-lang/rust/commit/c1b075d042cabb90f804f3d73e6a4f4b512aa697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b075d042cabb90f804f3d73e6a4f4b512aa697/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea184285eec782f90ecf4e77c854edfb0269e1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea184285eec782f90ecf4e77c854edfb0269e1b", "html_url": "https://github.com/rust-lang/rust/commit/1ea184285eec782f90ecf4e77c854edfb0269e1b"}], "stats": {"total": 414, "additions": 24, "deletions": 390}, "files": [{"sha": "3ecfbcad2500c2fb2552141cb55dd4e159f74434", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -56,7 +56,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_kernel.cpp \\\n               rt/rust_shape.cpp \\\n               rt/rust_obstack.cpp \\\n-              rt/rust_gc.cpp \\\n               rt/rust_abi.cpp \\\n               rt/rust_cc.cpp \\\n               rt/rust_debug.cpp \\\n@@ -73,7 +72,6 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_abi.h \\\n                rt/rust_cc.h \\\n                rt/rust_debug.h \\\n-               rt/rust_gc.h \\\n                rt/rust_internal.h \\\n                rt/rust_util.h \\\n                rt/rust_env.h \\"}, {"sha": "e3a124640e48d211083b1b38b9e16bd2f8622c27", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -56,7 +56,7 @@ fn declare_upcalls(targ_cfg: @session::config,\n               d(\"malloc\", [T_ptr(tydesc_type)],\n                 T_ptr(T_i8())),\n           free:\n-              dv(\"free\", [T_ptr(T_i8()), int_t]),\n+              dv(\"free\", [T_ptr(T_i8())]),\n           validate_box:\n               dv(\"validate_box\", [T_ptr(T_i8())]),\n           shared_malloc:"}, {"sha": "3f39ba1d1238ea4bd0176436304c90dc2a6cac0c", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -412,7 +412,6 @@ fn build_session_options(match: getopts::match,\n     let addl_lib_search_paths = getopts::opt_strs(match, \"L\");\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n-    let do_gc = opt_present(match, \"gc\");\n     let warn_unused_imports = opt_present(match, \"warn-unused-imports\");\n     let sopts: @session::options =\n         @{crate_type: crate_type,\n@@ -434,7 +433,6 @@ fn build_session_options(match: getopts::match,\n           test: test,\n           parse_only: parse_only,\n           no_trans: no_trans,\n-          do_gc: do_gc,\n           no_asm_comments: no_asm_comments,\n           warn_unused_imports: warn_unused_imports};\n     ret sopts;"}, {"sha": "30e7aec43742128ea53a73c65491072a86337bec", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -46,7 +46,6 @@ type options =\n      test: bool,\n      parse_only: bool,\n      no_trans: bool,\n-     do_gc: bool,\n      no_asm_comments: bool,\n      warn_unused_imports: bool};\n "}, {"sha": "0fe72c5b8f749486e2b1d8621cea1edc60ba16f8", "filename": "src/comp/middle/gc.rs", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/1ea184285eec782f90ecf4e77c854edfb0269e1b/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea184285eec782f90ecf4e77c854edfb0269e1b/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=1ea184285eec782f90ecf4e77c854edfb0269e1b", "patch": "@@ -1,148 +0,0 @@\n-// Routines useful for garbage collection.\n-\n-import lib::llvm::{True, ValueRef};\n-import trans::base::get_tydesc;\n-import trans::common::*;\n-import trans::base;\n-import option::none;\n-import str;\n-import driver::session::session;\n-\n-import lll = lib::llvm::llvm;\n-import bld = trans::build;\n-\n-type ctxt = @{mutable next_tydesc_num: uint};\n-\n-fn mk_ctxt() -> ctxt { ret @{mutable next_tydesc_num: 0u}; }\n-\n-fn add_global(ccx: @crate_ctxt, llval: ValueRef, name: str) -> ValueRef {\n-    let llglobal =\n-        str::as_buf(name,\n-                    {|buf|\n-                        lll::LLVMAddGlobal(ccx.llmod, val_ty(llval), buf)\n-                    });\n-    lll::LLVMSetInitializer(llglobal, llval);\n-    lll::LLVMSetGlobalConstant(llglobal, True);\n-    ret llglobal;\n-}\n-\n-fn add_gc_root(cx: @block_ctxt, llval: ValueRef, ty: ty::t) -> @block_ctxt {\n-    let bcx = cx;\n-    let ccx = bcx_ccx(cx);\n-    if !type_is_gc_relevant(bcx_tcx(cx), ty) ||\n-           ty::type_has_dynamic_size(bcx_tcx(cx), ty) {\n-        ret bcx;\n-    }\n-\n-    let gc_cx = bcx_ccx(cx).gc_cx;\n-\n-    // FIXME (issue #839): For now, we are unconditionally zeroing out all\n-    // GC-relevant types. Eventually we should use typestate for this.\n-    bcx = base::zero_alloca(bcx, llval, ty);\n-\n-    let ti = none;\n-    let td_r = get_tydesc(bcx, ty, false, ti);\n-    bcx = td_r.result.bcx;\n-    let lltydesc = td_r.result.val;\n-\n-    let gcroot = bcx_ccx(bcx).intrinsics.get(\"llvm.gcroot\");\n-    let llvalptr = bld::PointerCast(bcx, llval, T_ptr(T_ptr(T_i8())));\n-\n-    alt td_r.kind {\n-      tk_derived {\n-        // It's a derived type descriptor. First, spill it.\n-        let lltydescptr = base::alloca(bcx, val_ty(lltydesc));\n-\n-        let llderivedtydescs =\n-            base::llderivedtydescs_block_ctxt(bcx_fcx(bcx));\n-        bld::Store(llderivedtydescs, lltydesc, lltydescptr);\n-\n-        let number = gc_cx.next_tydesc_num;\n-        gc_cx.next_tydesc_num += 1u;\n-\n-        let lldestindex =\n-            add_global(bcx_ccx(bcx), C_struct([C_int(ccx, 0),\n-                                               C_uint(ccx, number)]),\n-                       \"rust_gc_tydesc_dest_index\");\n-        let llsrcindex =\n-            add_global(bcx_ccx(bcx), C_struct([C_int(ccx, 1),\n-                                               C_uint(ccx, number)]),\n-                       \"rust_gc_tydesc_src_index\");\n-\n-        lldestindex = lll::LLVMConstPointerCast(lldestindex, T_ptr(T_i8()));\n-        llsrcindex = lll::LLVMConstPointerCast(llsrcindex, T_ptr(T_i8()));\n-\n-        lltydescptr =\n-            bld::PointerCast(llderivedtydescs, lltydescptr,\n-                             T_ptr(T_ptr(T_i8())));\n-\n-        bld::Call(llderivedtydescs, gcroot, [lltydescptr, lldestindex]);\n-        bld::Call(bcx, gcroot, [llvalptr, llsrcindex]);\n-      }\n-      tk_param {\n-        bcx_tcx(cx).sess.bug(\"we should never be trying to root values \" +\n-                                 \"of a type parameter\");\n-      }\n-      tk_static {\n-        // Static type descriptor.\n-\n-        let llstaticgcmeta =\n-            add_global(bcx_ccx(bcx), C_struct([C_int(ccx, 2), lltydesc]),\n-                       \"rust_gc_tydesc_static_gc_meta\");\n-        let llstaticgcmetaptr =\n-            lll::LLVMConstPointerCast(llstaticgcmeta, T_ptr(T_i8()));\n-\n-        bld::Call(bcx, gcroot, [llvalptr, llstaticgcmetaptr]);\n-      }\n-    }\n-\n-    ret bcx;\n-}\n-\n-fn type_is_gc_relevant(cx: ty::ctxt, ty: ty::t) -> bool {\n-    alt ty::struct(cx, ty) {\n-      ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_int(_) |\n-      ty::ty_float(_) | ty::ty_uint(_) | ty::ty_str |\n-      ty::ty_type | ty::ty_send_type | ty::ty_ptr(_) {\n-        ret false;\n-      }\n-      ty::ty_rec(fields) {\n-        for f in fields { if type_is_gc_relevant(cx, f.mt.ty) { ret true; } }\n-        ret false;\n-      }\n-      ty::ty_tup(elts) {\n-        for elt in elts { if type_is_gc_relevant(cx, elt) { ret true; } }\n-        ret false;\n-      }\n-      ty::ty_enum(did, tps) {\n-        let variants = ty::enum_variants(cx, did);\n-        for variant in *variants {\n-            for aty in variant.args {\n-                let arg_ty = ty::substitute_type_params(cx, tps, aty);\n-                if type_is_gc_relevant(cx, arg_ty) { ret true; }\n-            }\n-        }\n-        ret false;\n-      }\n-      ty::ty_vec(tm) {\n-        ret type_is_gc_relevant(cx, tm.ty);\n-      }\n-      ty::ty_constr(sub, _) { ret type_is_gc_relevant(cx, sub); }\n-      ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_fn(_) |\n-      ty::ty_param(_, _) | ty::ty_res(_, _, _) { ret true; }\n-      ty::ty_opaque_closure_ptr(_) {\n-        ret false; // I guess?\n-      }\n-      // A precondition to rule out these cases would be nice\n-      ty::ty_var(_) {\n-        fail \"ty_var in type_is_gc_relevant\";\n-      }\n-      ty::ty_iface(_, _) {\n-        fail \"ty_iface in type_is_gc_relevant\";\n-      }\n-      ty::ty_named(_,_) {\n-        fail \"ty_named in type_is_gc_relevant\";\n-      }\n-    }\n-}\n-"}, {"sha": "76493e767dcd02352164a1aa128d117daf5ecd1c", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -21,7 +21,6 @@ import option::{some, none};\n import driver::session;\n import session::session;\n import front::attr;\n-import middle::{ty, gc, resolve, debuginfo};\n import middle::freevars::*;\n import back::{link, abi, upcall};\n import syntax::{ast, ast_util, codemap};\n@@ -350,14 +349,9 @@ fn trans_native_call(cx: @block_ctxt, externs: hashmap<str, ValueRef>,\n     ret Call(cx, llnative, call_args);\n }\n \n-fn trans_free_if_not_gc(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n-    let ccx = bcx_ccx(cx);\n-    if !ccx.sess.opts.do_gc {\n-        Call(cx, ccx.upcalls.free,\n-             [PointerCast(cx, v, T_ptr(T_i8())),\n-              C_int(bcx_ccx(cx), 0)]);\n-    }\n-    ret cx;\n+fn trans_free(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n+    Call(cx, bcx_ccx(cx).upcalls.free, [PointerCast(cx, v, T_ptr(T_i8()))]);\n+    cx\n }\n \n fn trans_shared_free(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n@@ -1245,7 +1239,7 @@ fn free_box(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n         let v = PointerCast(bcx, v, type_of_1(bcx, t));\n         let body = GEPi(bcx, v, [0, abi::box_field_body]);\n         let bcx = drop_ty(bcx, body, body_mt.ty);\n-        trans_free_if_not_gc(bcx, v)\n+        trans_free(bcx, v)\n       }\n \n       _ { fail \"free_box invoked with non-box type\"; }\n@@ -1280,7 +1274,7 @@ fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) {\n         let ti = none;\n         call_tydesc_glue_full(bcx, body, tydesc,\n                               abi::tydesc_field_drop_glue, ti);\n-        trans_free_if_not_gc(bcx, b)\n+        trans_free(bcx, b)\n       }\n       ty::ty_send_type {\n         // sendable type descriptors are basically unique pointers,\n@@ -4226,10 +4220,6 @@ fn alloc_ty(cx: @block_ctxt, t: ty::t) -> result {\n     // past caller conventions and may well make sense again,\n     // so we leave it as-is.\n \n-    if bcx_tcx(cx).sess.opts.do_gc {\n-        bcx = gc::add_gc_root(bcx, val, t);\n-    }\n-\n     ret rslt(cx, val);\n }\n \n@@ -5604,7 +5594,6 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           opaque_vec_type: T_opaque_vec(targ_cfg),\n           builder: BuilderRef_res(llvm::LLVMCreateBuilder()),\n           shape_cx: shape::mk_ctxt(llmod),\n-          gc_cx: gc::mk_ctxt(),\n           crate_map: crate_map,\n           dbg_cx: dbg_cx,\n           mutable do_not_commit_warning_issued: false};"}, {"sha": "d051662a14e3a0669904e8a475a33c9771c92714", "filename": "src/comp/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -716,7 +716,7 @@ fn make_opaque_cbox_free_glue(\n         alt ck {\n           ty::ck_block { fail \"Impossible\"; }\n           ty::ck_box {\n-            trans_free_if_not_gc(bcx, cbox)\n+            trans_free(bcx, cbox)\n           }\n           ty::ck_uniq {\n             let bcx = free_ty(bcx, tydesc, mk_tydesc_ty(tcx, ck));"}, {"sha": "20f32954438124e188eafe40ef85e465ab681ce1", "filename": "src/comp/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -120,7 +120,6 @@ type crate_ctxt =\n      opaque_vec_type: TypeRef,\n      builder: BuilderRef_res,\n      shape_cx: shape::ctxt,\n-     gc_cx: gc::ctxt,\n      crate_map: ValueRef,\n      dbg_cx: option<@debuginfo::debug_ctxt>,\n      mutable do_not_commit_warning_issued: bool};\n@@ -286,7 +285,7 @@ fn add_clean_temp_mem(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n fn add_clean_free(cx: @block_ctxt, ptr: ValueRef, shared: bool) {\n     let scope_cx = find_scope_cx(cx);\n     let free_fn = if shared { bind base::trans_shared_free(_, ptr) }\n-                  else { bind base::trans_free_if_not_gc(_, ptr) };\n+                  else { bind base::trans_free(_, ptr) };\n     scope_cx.cleanups += [clean_temp(ptr, free_fn)];\n     scope_cx.lpad_dirty = true;\n }"}, {"sha": "6f63bb3693399418bba6bbf7d41348464e6973dc", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -39,7 +39,6 @@ mod middle {\n     mod kind;\n     mod freevars;\n     mod shape;\n-    mod gc;\n     mod debuginfo;\n     mod capture;\n     mod pat_util;"}, {"sha": "40b50c1ad4be6779a8f983acb077a8f29f973e3c", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -17,7 +17,6 @@ native mod rustrt {\n     // visible-in-crate, but not re-exported.\n     fn last_os_error() -> str;\n     fn refcount<T>(t: @T) -> ctypes::intptr_t;\n-    fn do_gc();\n     fn unsupervise();\n     fn shape_log_str<T>(t: *sys::type_desc, data: T) -> str;\n     fn rust_set_exit_status(code: ctypes::intptr_t);\n@@ -74,15 +73,6 @@ fn refcount<T>(t: @T) -> uint {\n     ret rustrt::refcount::<T>(t);\n }\n \n-/*\n-Function: do_gc\n-\n-Force a garbage collection\n-*/\n-fn do_gc() -> () {\n-    ret rustrt::do_gc();\n-}\n-\n // FIXME: There's a wrapper for this in the task module and this really\n // just belongs there\n fn unsupervise() -> () {"}, {"sha": "3c935c1ed4d87edf79cc211d9a9538dc4bc0a5d5", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -91,11 +91,6 @@ refcount(intptr_t *v) {\n     return (*v) - 1;\n }\n \n-extern \"C\" CDECL void\n-do_gc() {\n-    // TODO\n-}\n-\n extern \"C\" CDECL void\n unsupervise() {\n     rust_task *task = rust_scheduler::get_task();"}, {"sha": "03a4bed014ef63c03538e4991feb2c20877d12d5", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -2,7 +2,6 @@\n // time until LLVM's GC infrastructure is more mature.\n \n #include \"rust_debug.h\"\n-#include \"rust_gc.h\"\n #include \"rust_internal.h\"\n #include \"rust_shape.h\"\n #include \"rust_task.h\""}, {"sha": "26e48857ecbbda2c9b35d2f225c764dfbf126e8a", "filename": "src/rt/rust_gc.cpp", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/1ea184285eec782f90ecf4e77c854edfb0269e1b/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ea184285eec782f90ecf4e77c854edfb0269e1b/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=1ea184285eec782f90ecf4e77c854edfb0269e1b", "patch": "@@ -1,164 +0,0 @@\n-// Rust garbage collection.\n-\n-#include <algorithm>\n-#include <iostream>\n-#include <utility>\n-#include <vector>\n-#include <stdint.h>\n-\n-#include \"rust_abi.h\"\n-#include \"rust_debug.h\"\n-#include \"rust_gc.h\"\n-#include \"rust_internal.h\"\n-#include \"rust_shape.h\"\n-\n-#ifdef __WIN32__\n-#include <windows.h>\n-#else\n-#include <dlfcn.h>\n-#endif\n-\n-using namespace stack_walk;\n-\n-namespace gc {\n-\n-weak_symbol<const uintptr_t> safe_point_data(\"rust_gc_safe_points\");\n-\n-struct root_info {\n-    intptr_t frame_offset;\n-    uintptr_t dynamic;  // 0 = static, 1 = dynamic\n-    const type_desc *tydesc;\n-};\n-\n-struct root {\n-    const type_desc *tydesc;\n-    uint8_t *data;\n-\n-    root(const root_info &info, const frame &frame)\n-    : tydesc(info.tydesc),\n-      data((uint8_t *)frame.bp + info.frame_offset) {}\n-};\n-\n-struct safe_point {\n-    uintptr_t n_roots;\n-    root_info roots[0];\n-};\n-\n-struct safe_point_index_entry {\n-    void (*ra)();                   // The return address.\n-    const struct safe_point *safe_point;   // The safe point.\n-\n-    struct cmp {\n-        bool operator()(const safe_point_index_entry &entry, void (*ra)())\n-                const {\n-            return entry.ra < ra;\n-        }\n-        bool operator()(void (*ra)(), const safe_point_index_entry &entry)\n-                const {\n-            return ra < entry.ra;\n-        }\n-    };\n-};\n-\n-class safe_point_map {\n-    uintptr_t n_safe_points;\n-    const safe_point_index_entry *index;\n-    const safe_point *safe_points;\n-\n-public:\n-    safe_point_map() {\n-        const uintptr_t *data = *safe_point_data;\n-        n_safe_points = *data++;\n-        index = (const safe_point_index_entry *)data;\n-        data += n_safe_points * 2;\n-        safe_points = (const safe_point *)data;\n-    }\n-\n-    const safe_point *get_safe_point(void (*addr)());\n-};\n-\n-class gc {\n-private:\n-    rust_task *task;\n-\n-    void mark(std::vector<root> &roots);\n-    void sweep();\n-\n-public:\n-    gc(rust_task *in_task) : task(in_task) {}\n-    void run();\n-};\n-\n-const safe_point *\n-safe_point_map::get_safe_point(void (*addr)()) {\n-    safe_point_index_entry::cmp cmp;\n-    const safe_point_index_entry *entry =\n-        std::lower_bound(index, index + n_safe_points, addr, cmp);\n-    return (entry && entry->ra == addr) ? entry->safe_point : NULL;\n-}\n-\n-void\n-gc::mark(std::vector<root> &roots) {\n-    std::vector<root>::iterator ri = roots.begin(), rend = roots.end();\n-    while (ri < rend) {\n-        DPRINT(\"root: %p\\n\", ri->data);\n-\n-        shape::arena arena;\n-        shape::type_param *params =\n-            shape::type_param::from_tydesc_and_data(ri->tydesc, ri->data,\n-                                                    arena);\n-        shape::log log(task, true, ri->tydesc->shape, params,\n-                       ri->tydesc->shape_tables, ri->data, std::cerr);\n-        log.walk();\n-        DPRINT(\"\\n\");\n-\n-        ++ri;\n-    }\n-    // TODO\n-}\n-\n-void\n-gc::sweep() {\n-    // TODO\n-}\n-\n-void\n-gc::run() {\n-    safe_point_map map;\n-\n-    // Find roots.\n-    std::vector<root> roots;\n-    std::vector<frame> call_stack = backtrace();\n-    for (unsigned i = 0; i < call_stack.size(); i++) {\n-        frame f = call_stack[i];\n-        const safe_point *sp = map.get_safe_point(f.ra);\n-        if (!sp)\n-            continue;\n-\n-        DPRINT(\"%u: ra %p, ebp %p\\n\", i, call_stack[i].ra, call_stack[i].bp);\n-        for (unsigned j = 0; j < sp->n_roots; j++) {\n-            root r(sp->roots[j], f);\n-            roots.push_back(r);\n-        }\n-    }\n-\n-    // Mark and sweep.\n-    mark(roots);\n-    sweep();\n-}\n-\n-void\n-maybe_gc(rust_task *task) {\n-    if (*safe_point_data == NULL)\n-        return;\n-\n-    static debug::flag zeal(\"RUST_GC_ZEAL\");\n-\n-    if (*zeal) {\n-        gc gc(task);\n-        gc.run();\n-    }\n-}\n-\n-}\n-"}, {"sha": "45349dc0f912e7f845e7aa7914cb1a9c5c423f19", "filename": "src/rt/rust_gc.h", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ea184285eec782f90ecf4e77c854edfb0269e1b/src%2Frt%2Frust_gc.h", "raw_url": "https://github.com/rust-lang/rust/raw/1ea184285eec782f90ecf4e77c854edfb0269e1b/src%2Frt%2Frust_gc.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.h?ref=1ea184285eec782f90ecf4e77c854edfb0269e1b", "patch": "@@ -1,10 +0,0 @@\n-// Rust garbage collection.\n-\n-struct rust_task;\n-\n-namespace gc {\n-\n-void maybe_gc(rust_task *task);\n-\n-}\n-"}, {"sha": "9868d4f5750e7dfbd1adfba0039fbfc8955935b6", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -523,13 +523,13 @@ rust_task::malloc(size_t sz, const char *tag, type_desc *td)\n }\n \n void *\n-rust_task::realloc(void *data, size_t sz, bool is_gc)\n+rust_task::realloc(void *data, size_t sz)\n {\n     return local_region.realloc(data, sz);\n }\n \n void\n-rust_task::free(void *p, bool is_gc)\n+rust_task::free(void *p)\n {\n     local_region.free(p);\n }"}, {"sha": "f1296c15292a2eba972fb53c2c2a1d8fffb8d1c3", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -141,8 +141,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     bool dead();\n \n     void *malloc(size_t sz, const char *tag, type_desc *td=0);\n-    void *realloc(void *data, size_t sz, bool gc_mem=false);\n-    void free(void *p, bool gc_mem=false);\n+    void *realloc(void *data, size_t sz);\n+    void free(void *p);\n \n     void transition(rust_task_list *src, rust_task_list *dst);\n "}, {"sha": "fc9e8af9f02da59d4cbfb7bbb5dfecc811fef711", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -7,7 +7,6 @@\n  */\n \n #include \"rust_cc.h\"\n-#include \"rust_gc.h\"\n #include \"rust_internal.h\"\n #include \"rust_scheduler.h\"\n #include \"rust_unwind.h\"\n@@ -122,7 +121,6 @@ upcall_s_malloc(s_malloc_args *args) {\n \n     LOG(task, mem, \"upcall malloc(0x%\" PRIxPTR \")\", args->td);\n \n-    gc::maybe_gc(task);\n     cc::maybe_cc(task);\n \n     // FIXME--does this have to be calloc?\n@@ -151,7 +149,6 @@ upcall_malloc(type_desc *td) {\n \n struct s_free_args {\n     void *ptr;\n-    uintptr_t is_gc;\n };\n \n extern \"C\" CDECL void\n@@ -162,7 +159,7 @@ upcall_s_free(s_free_args *args) {\n     rust_scheduler *sched = task->sched;\n     DLOG(sched, mem,\n              \"upcall free(0x%\" PRIxPTR \", is_gc=%\" PRIdPTR \")\",\n-             (uintptr_t)args->ptr, args->is_gc);\n+             (uintptr_t)args->ptr);\n \n     debug::maybe_untrack_origin(task, args->ptr);\n \n@@ -171,8 +168,8 @@ upcall_s_free(s_free_args *args) {\n }\n \n extern \"C\" CDECL void\n-upcall_free(void* ptr, uintptr_t is_gc) {\n-    s_free_args args = {ptr, is_gc};\n+upcall_free(void* ptr) {\n+    s_free_args args = {ptr};\n     UPCALL_SWITCH_STACK(&args, upcall_s_free);\n }\n "}, {"sha": "da6026ebb23ee852fc47d06bf5c822fc2a126013", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -9,7 +9,6 @@ debug_ptrcast\n debug_tag\n debug_tydesc\n debug_get_stk_seg\n-do_gc\n drop_task\n get_port_id\n get_task_id"}, {"sha": "d4c5720b01693bee2725d1841f738f8a4852a159", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -83,7 +83,6 @@ fn build_session() -> session::session {\n         test: false,\n         parse_only: false,\n         no_trans: false,\n-        do_gc: false,\n         no_asm_comments: false,\n         warn_unused_imports: false\n     };"}, {"sha": "15123a0540df652fe5e3108282a3b68652df63b8", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -8,14 +8,14 @@\n use std;\n \n native mod rustrt {\n-    fn do_gc();\n+    fn last_os_error() -> str;\n }\n \n fn getbig_call_c_and_fail(i: int) {\n     if i != 0 {\n         getbig_call_c_and_fail(i - 1);\n     } else {\n-        rustrt::do_gc();\n+        rustrt::last_os_error();\n         fail;\n     }\n }"}, {"sha": "7451055f0a6287b2faa4b1757754bae84ac1a212", "filename": "src/test/run-pass/bind-native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fbind-native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fbind-native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-native.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -4,7 +4,7 @@ Can we bind native things?\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn do_gc();\n+    fn rand_new() -> *ctypes::void;\n }\n \n-fn main() { bind rustrt::do_gc(); }\n+fn main() { bind rustrt::rand_new(); }"}, {"sha": "11fc041d08f23588858ad30df3abe9dbc5b81d70", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -120,15 +120,13 @@ fn test_fn() {\n #[abi = \"cdecl\"]\n #[nolink]\n native mod test {\n-    fn do_gc();\n     fn unsupervise();\n }\n \n // FIXME (#1058): comparison of native fns\n fn test_native_fn() {\n     /*\n-    assert (native_mod::do_gc == native_mod::do_gc);\n-    assert (native_mod::do_gc != native_mod::unsupervise);\n+    assert (native_mod::last_os_error != native_mod::unsupervise);\n     */\n }\n "}, {"sha": "87ff60f13a7bf8517bb1ddde4cb45fc0bf30859e", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -12,7 +12,6 @@ native mod rustrt {\n     fn last_os_error() -> str;\n     fn rust_getcwd() -> str;\n     fn refcount(box: @int);\n-    fn do_gc();\n     fn get_task_id();\n     fn sched_threads();\n     fn rust_get_task();\n@@ -22,7 +21,6 @@ fn calllink01() { rustrt::unsupervise(); }\n fn calllink02() { rustrt::last_os_error(); }\n fn calllink03() { rustrt::rust_getcwd(); }\n fn calllink04() { rustrt::refcount(@0); }\n-fn calllink05() { rustrt::do_gc(); }\n fn calllink08() { rustrt::get_task_id(); }\n fn calllink09() { rustrt::sched_threads(); }\n fn calllink10() { rustrt::rust_get_task(); }\n@@ -55,7 +53,6 @@ fn main() {\n         calllink02,\n         calllink03,\n         calllink04,\n-        calllink05,\n         calllink08,\n         calllink09,\n         calllink10"}, {"sha": "139189f4b9c28e5b8eca8ad98e0415e5bcb4e141", "filename": "src/test/run-pass/native-dupe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fnative-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b075d042cabb90f804f3d73e6a4f4b512aa697/src%2Ftest%2Frun-pass%2Fnative-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-dupe.rs?ref=c1b075d042cabb90f804f3d73e6a4f4b512aa697", "patch": "@@ -4,16 +4,16 @@\n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n native mod rustrt1 {\n-    fn do_gc();\n+    fn last_os_error() -> str;\n }\n \n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n native mod rustrt2 {\n-    fn do_gc();\n+    fn last_os_error() -> str;\n }\n \n fn main() {\n-    rustrt1::do_gc();\n-    rustrt2::do_gc();\n+    rustrt1::last_os_error();\n+    rustrt2::last_os_error();\n }"}]}