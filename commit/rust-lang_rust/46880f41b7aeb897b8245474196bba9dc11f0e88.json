{"sha": "46880f41b7aeb897b8245474196bba9dc11f0e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ODgwZjQxYjdhZWI4OTdiODI0NTQ3NDE5NmJiYTlkYzExZjBlODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-15T19:50:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-15T19:50:50Z"}, "message": "Auto merge of #55095 - Manishearth:rollup, r=Manishearth\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #54820 (Closes #54538: `unused_patterns` lint)\n - #54963 (Cleanup rustc/session)\n - #54991 (add test for #23189)\n - #55025 (Add missing lifetime fragment specifier to error message.)\n - #55047 (doc: make core::fmt::Error example more simple)\n - #55048 (Don't collect to vectors where unnecessary)\n - #55060 (clarify pointer add/sub function safety concerns)\n - #55062 (Make EvalContext::step public again)\n - #55066 (Fix incorrect link in println! documentation)\n - #55081 (Deduplicate tests)\n - #55088 (Update rustc documentation link)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "62fe4510055d0d70dc6ea315af27bf09db4dff3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62fe4510055d0d70dc6ea315af27bf09db4dff3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46880f41b7aeb897b8245474196bba9dc11f0e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46880f41b7aeb897b8245474196bba9dc11f0e88", "html_url": "https://github.com/rust-lang/rust/commit/46880f41b7aeb897b8245474196bba9dc11f0e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46880f41b7aeb897b8245474196bba9dc11f0e88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a52983d690bfdc0d0343c1db14c2c6b2359df2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a52983d690bfdc0d0343c1db14c2c6b2359df2d", "html_url": "https://github.com/rust-lang/rust/commit/5a52983d690bfdc0d0343c1db14c2c6b2359df2d"}, {"sha": "562625dda21cbfbce8206c7553991eacd09e714b", "url": "https://api.github.com/repos/rust-lang/rust/commits/562625dda21cbfbce8206c7553991eacd09e714b", "html_url": "https://github.com/rust-lang/rust/commit/562625dda21cbfbce8206c7553991eacd09e714b"}], "stats": {"total": 700, "additions": 326, "deletions": 374}, "files": [{"sha": "fe6bea9d8dc3f8ef13f9520cb092f6775975c950", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -646,7 +646,7 @@ are:\n * Don't be afraid to ask! The Rust community is friendly and helpful.\n \n [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/about-this-guide.html\n-[gdfrustc]: http://manishearth.github.io/rust-internals-docs/rustc/\n+[gdfrustc]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n [gsearchdocs]: https://www.google.com/search?q=site:doc.rust-lang.org+your+query+here\n [rif]: http://internals.rust-lang.org\n [rr]: https://doc.rust-lang.org/book/README.html"}, {"sha": "75ec0d7d50be6e7398d190b9e551918b0b5152cc", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -96,9 +96,8 @@ pub type Result = result::Result<(), Error>;\n /// use std::fmt::{self, write};\n ///\n /// let mut output = String::new();\n-/// match write(&mut output, format_args!(\"Hello {}!\", \"world\")) {\n-///     Err(fmt::Error) => panic!(\"An error occurred\"),\n-///     _ => (),\n+/// if let Err(fmt::Error) = write(&mut output, format_args!(\"Hello {}!\", \"world\")) {\n+///     panic!(\"An error occurred\");\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1c761ba21b3ec860ef4cb35675569ac197ee67fa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -1037,7 +1037,7 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of *the same* allocated object.\n+    ///   byte past the end of the same allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1255,7 +1255,7 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of the same allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1312,7 +1312,7 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of the same allocated object.\n     ///\n     /// * The computed offset cannot exceed `isize::MAX` **bytes**.\n     ///\n@@ -1657,7 +1657,7 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of *the same* allocated object.\n+    ///   byte past the end of the same allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1893,7 +1893,7 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of the same allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1950,7 +1950,7 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of the same allocated object.\n     ///\n     /// * The computed offset cannot exceed `isize::MAX` **bytes**.\n     ///"}, {"sha": "e99d65024967b7c63de2d8b9a564d17903190887", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -60,7 +60,6 @@ use util::nodemap::{DefIdMap, NodeMap};\n \n use std::collections::BTreeMap;\n use std::fmt::Debug;\n-use std::iter;\n use std::mem;\n use smallvec::SmallVec;\n use syntax::attr;\n@@ -3888,9 +3887,7 @@ impl<'a> LoweringContext<'a> {\n                     .collect::<P<[hir::Field]>>();\n \n                 let is_unit = fields.is_empty();\n-                let struct_path = iter::once(\"ops\")\n-                    .chain(iter::once(path))\n-                    .collect::<Vec<_>>();\n+                let struct_path = [\"ops\", path];\n                 let struct_path = self.std_path(e.span, &struct_path, None, is_unit);\n                 let struct_path = hir::QPath::Resolved(None, P(struct_path));\n "}, {"sha": "569e7a24d2353ce8652d5112b6f3738b109c5023", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 99, "deletions": 115, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -490,10 +490,10 @@ pub enum Input {\n }\n \n impl Input {\n-    pub fn filestem(&self) -> String {\n+    pub fn filestem(&self) -> &str {\n         match *self {\n-            Input::File(ref ifile) => ifile.file_stem().unwrap().to_str().unwrap().to_string(),\n-            Input::Str { .. } => \"rust_out\".to_string(),\n+            Input::File(ref ifile) => ifile.file_stem().unwrap().to_str().unwrap(),\n+            Input::Str { .. } => \"rust_out\",\n         }\n     }\n \n@@ -736,19 +736,19 @@ macro_rules! options {\n                     match (value, opt_type_desc) {\n                         (Some(..), None) => {\n                             early_error(error_format, &format!(\"{} option `{}` takes no \\\n-                                                              value\", $outputname, key))\n+                                                                value\", $outputname, key))\n                         }\n                         (None, Some(type_desc)) => {\n                             early_error(error_format, &format!(\"{0} option `{1}` requires \\\n-                                                              {2} ({3} {1}=<value>)\",\n-                                                             $outputname, key,\n-                                                             type_desc, $prefix))\n+                                                                {2} ({3} {1}=<value>)\",\n+                                                               $outputname, key,\n+                                                               type_desc, $prefix))\n                         }\n                         (Some(value), Some(type_desc)) => {\n                             early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n-                                                              option `{}` - {} was expected\",\n-                                                             value, $outputname,\n-                                                             key, type_desc))\n+                                                                option `{}` - {} was expected\",\n+                                                               value, $outputname,\n+                                                               key, type_desc))\n                         }\n                         (None, None) => bug!()\n                     }\n@@ -758,14 +758,13 @@ macro_rules! options {\n             }\n             if !found {\n                 early_error(error_format, &format!(\"unknown {} option: `{}`\",\n-                                                 $outputname, key));\n+                                                   $outputname, key));\n             }\n         }\n         return op;\n     }\n \n     impl<'a> dep_tracking::DepTrackingHash for $struct_name {\n-\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n@@ -782,7 +781,7 @@ macro_rules! options {\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n     pub const $stat: &'static [(&'static str, $setter_name,\n-                                     Option<&'static str>, &'static str)] =\n+                                Option<&'static str>, &'static str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n     #[allow(non_upper_case_globals, dead_code)]\n@@ -1062,8 +1061,8 @@ macro_rules! options {\n ) }\n \n options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n-         build_codegen_options, \"C\", \"codegen\",\n-         CG_OPTIONS, cg_type_desc, cgsetters,\n+          build_codegen_options, \"C\", \"codegen\",\n+          CG_OPTIONS, cg_type_desc, cgsetters,\n     ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n@@ -1107,13 +1106,13 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n+        \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the code model to use (rustc --print code-models for details)\"),\n+        \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-         \"metadata to mangle symbol names with\"),\n+        \"metadata to mangle symbol names with\"),\n     extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n-         \"extra data to put in each output filename\"),\n+        \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n@@ -1134,14 +1133,14 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"enable incremental compilation\"),\n+        \"enable incremental compilation\"),\n     default_linker_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-          \"allow the linker to link its default libraries\"),\n+        \"allow the linker to link its default libraries\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n-         build_debugging_options, \"Z\", \"debugging\",\n-         DB_OPTIONS, db_type_desc, dbsetters,\n+          build_debugging_options, \"Z\", \"debugging\",\n+          DB_OPTIONS, db_type_desc, dbsetters,\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n@@ -1211,26 +1210,26 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     flowgraph_print_all: bool = (false, parse_bool, [UNTRACKED],\n         \"include all dataflow analysis data in -Z unpretty flowgraph output\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n-         \"prints region inference graph. \\\n-          Use with RUST_REGION_GRAPH=help for more info\"),\n+        \"prints region inference graph. \\\n+         Use with RUST_REGION_GRAPH=help for more info\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n-          \"parse only; do not compile, assemble, or link\"),\n+        \"parse only; do not compile, assemble, or link\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n-          \"run all passes except codegen; no output\"),\n+        \"run all passes except codegen; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n-          \"treat all errors that occur as bugs\"),\n+        \"treat all errors that occur as bugs\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n-          \"immediately print bugs registered with `delay_span_bug`\"),\n+        \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-          \"show macro backtraces even for non-local macros\"),\n+        \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n-          \"show extended diagnostic help\"),\n+        \"show extended diagnostic help\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n-          \"attempt to recover from parse errors (experimental)\"),\n+        \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"enable incremental compilation (experimental)\"),\n+        \"enable incremental compilation (experimental)\"),\n     incremental_queries: bool = (true, parse_bool, [UNTRACKED],\n-          \"enable incremental compilation support for queries (experimental)\"),\n+        \"enable incremental compilation support for queries (experimental)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n         \"print high-level information about incremental reuse (or the lack thereof)\"),\n     incremental_dump_hash: bool = (false, parse_bool, [UNTRACKED],\n@@ -1240,64 +1239,64 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n         \"ignore spans during ICH computation -- used for testing\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-          \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n+        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-          \"enable queries of the dependency graph for regression testing\"),\n+        \"enable queries of the dependency graph for regression testing\"),\n     profile_queries: bool = (false, parse_bool, [UNTRACKED],\n-          \"trace and profile the queries of the incremental compilation framework\"),\n+        \"trace and profile the queries of the incremental compilation framework\"),\n     profile_queries_and_keys: bool = (false, parse_bool, [UNTRACKED],\n-          \"trace and profile the queries and keys of the incremental compilation framework\"),\n+        \"trace and profile the queries and keys of the incremental compilation framework\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n-          \"parse and expand the source, but run no analysis\"),\n+        \"parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n-          \"adds unstable command line options to rustc interface\"),\n+        \"adds unstable command line options to rustc interface\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"force overflow checks on or off\"),\n+        \"force overflow checks on or off\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n-          \"for every macro invocation, print its name and arguments\"),\n+        \"for every macro invocation, print its name and arguments\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n-          \"emit line numbers debug info inside macros\"),\n+        \"emit line numbers debug info inside macros\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-          \"don't clear the hygiene data after analysis\"),\n+        \"don't clear the hygiene data after analysis\"),\n     keep_ast: bool = (false, parse_bool, [UNTRACKED],\n-          \"keep the AST after lowering it to HIR\"),\n+        \"keep the AST after lowering it to HIR\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n-          \"show spans for compiler debugging (expr|pat|ty)\"),\n+        \"show spans for compiler debugging (expr|pat|ty)\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n-          \"print layout information for each type encountered\"),\n+        \"print layout information for each type encountered\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"print the result of the monomorphization collection pass\"),\n+        \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-          \"set the MIR optimization level (0-3, default: 1)\"),\n+        \"set the MIR optimization level (0-3, default: 1)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n+        \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n     arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n-          \"emit align metadata for reference arguments\"),\n+        \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"dump MIR state at various points in transforms\"),\n+        \"dump MIR state at various points in transforms\"),\n     dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n-          \"the directory the MIR is dumped into\"),\n+        \"the directory the MIR is dumped into\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-          \"in addition to `.mir` files, create graphviz `.dot` files\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files\"),\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n-          \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n+        \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n     mir_emit_validate: usize = (0, parse_uint, [TRACKED],\n-          \"emit Validate MIR statements, interpreted e.g. by miri (0: do not emit; 1: if function \\\n-           contains unsafe block, only validate arguments; 2: always emit full validation)\"),\n+        \"emit Validate MIR statements, interpreted e.g. by miri (0: do not emit; 1: if function \\\n+         contains unsafe block, only validate arguments; 2: always emit full validation)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some performance-related statistics\"),\n+        \"print some performance-related statistics\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some statistics about AST and HIR\"),\n+        \"print some statistics about AST and HIR\"),\n     mir_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some statistics about MIR\"),\n+        \"print some statistics about MIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n-          \"encode MIR of all functions into the crate metadata\"),\n+        \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n-          \"pass `-install_name @rpath/...` to the macOS linker\"),\n+        \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n-                                   \"Use a sanitizer\"),\n+                                    \"Use a sanitizer\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n@@ -1313,13 +1312,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n     pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"Generate PGO profile data, to a given file, or to the default \\\n-         location if it's empty.\"),\n+        \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n     pgo_use: String = (String::new(), parse_string, [TRACKED],\n         \"Use PGO profile data from the given profile file.\"),\n-    disable_instrumentation_preinliner: bool =\n-        (false, parse_bool, [TRACKED], \"Disable the instrumentation pre-inliner, \\\n-        useful for profiling / PGO.\"),\n+    disable_instrumentation_preinliner: bool = (false, parse_bool, [TRACKED],\n+        \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n@@ -1341,7 +1338,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n     tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n+        \"choose the TLS model to use (rustc --print tls-models for details)\"),\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n@@ -1362,31 +1359,31 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"run `dsymutil` and delete intermediate object files\"),\n+        \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n-          \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n+        \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-          \"embed LLVM bitcode in object files\"),\n+        \"embed LLVM bitcode in object files\"),\n     strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"tell the linker to strip debuginfo when building without debuginfo enabled.\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"make the current crate share its generic instantiations\"),\n+        \"make the current crate share its generic instantiations\"),\n     chalk: bool = (false, parse_bool, [TRACKED],\n-          \"enable the experimental Chalk-based trait solving engine\"),\n+        \"enable the experimental Chalk-based trait solving engine\"),\n     cross_lang_lto: CrossLangLto = (CrossLangLto::Disabled, parse_cross_lang_lto, [TRACKED],\n-          \"generate build artifacts that are compatible with linker-based LTO.\"),\n+        \"generate build artifacts that are compatible with linker-based LTO.\"),\n     no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n-          \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n+        \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n         \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     self_profile: bool = (false, parse_bool, [UNTRACKED],\n-          \"run the self profiler\"),\n+        \"run the self profiler\"),\n     profile_json: bool = (false, parse_bool, [UNTRACKED],\n-          \"output a json file with profiler results\"),\n+        \"output a json file with profiler results\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n-          \"emits a section containing stack size metadata\"),\n+        \"emits a section containing stack size metadata\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"whether to use the PLT when calling into shared libraries;\n           only has effect for PIC code on systems with ELF binaries\n@@ -1409,6 +1406,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let atomic_cas = sess.target.target.options.atomic_cas;\n \n     let mut ret = FxHashSet::default();\n+    ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((Symbol::intern(\"target_os\"), Some(Symbol::intern(os))));\n     if let Some(ref fam) = sess.target.target.options.target_family {\n@@ -1455,7 +1453,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n         ret.insert((Symbol::intern(\"proc_macro\"), None));\n     }\n-    return ret;\n+    ret\n }\n \n pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> ast::CrateConfig {\n@@ -1471,15 +1469,12 @@ pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> as\n }\n \n pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n-    let target = match Target::search(&opts.target_triple) {\n-        Ok(t) => t,\n-        Err(e) => {\n-            sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n-                .help(\"Use `--print target-list` for a list of built-in targets\")\n-                .emit();\n-            FatalError.raise();\n-        }\n-    };\n+    let target = Target::search(&opts.target_triple).unwrap_or_else(|e| {\n+        sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n+          .help(\"Use `--print target-list` for a list of built-in targets\")\n+          .emit();\n+        FatalError.raise();\n+    });\n \n     let (isize_ty, usize_ty) = match &target.target_pointer_width[..] {\n         \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n@@ -1502,7 +1497,6 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum OptionStability {\n     Stable,\n-\n     Unstable,\n }\n \n@@ -1845,18 +1839,17 @@ pub fn build_session_options_and_crate_config(\n     };\n \n     let edition = match matches.opt_str(\"edition\") {\n-        Some(arg) => match Edition::from_str(&arg){\n-            Ok(edition) => edition,\n-            Err(_) => early_error(\n+        Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_|\n+            early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"argument for --edition must be one of: \\\n-                    {}. (instead was `{}`)\",\n+                     {}. (instead was `{}`)\",\n                     EDITION_NAME_LIST,\n                     arg\n                 ),\n             ),\n-        }\n+        ),\n         None => DEFAULT_EDITION,\n     };\n \n@@ -1865,7 +1858,7 @@ pub fn build_session_options_and_crate_config(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"Edition {} is unstable and only \\\n-                    available for nightly builds of rustc.\",\n+                     available for nightly builds of rustc.\",\n                     edition,\n                 )\n         )\n@@ -1925,17 +1918,16 @@ pub fn build_session_options_and_crate_config(\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');\n                 let shorthand = parts.next().unwrap();\n-                let output_type = match OutputType::from_shorthand(shorthand) {\n-                    Some(output_type) => output_type,\n-                    None => early_error(\n+                let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(||\n+                    early_error(\n                         error_format,\n                         &format!(\n                             \"unknown emission type: `{}` - expected one of: {}\",\n                             shorthand,\n                             OutputType::shorthands_display(),\n                         ),\n                     ),\n-                };\n+                );\n                 let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);\n             }\n@@ -2063,12 +2055,8 @@ pub fn build_session_options_and_crate_config(\n     let target_triple = if let Some(target) = matches.opt_str(\"target\") {\n         if target.ends_with(\".json\") {\n             let path = Path::new(&target);\n-            match TargetTriple::from_path(&path) {\n-                Ok(triple) => triple,\n-                Err(_) => {\n-                    early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n-                }\n-            }\n+            TargetTriple::from_path(&path).unwrap_or_else(|_|\n+                early_error(error_format, &format!(\"target file {:?} does not exist\", path)))\n         } else {\n             TargetTriple::TargetTriple(target)\n         }\n@@ -2169,7 +2157,7 @@ pub fn build_session_options_and_crate_config(\n             let mut name_parts = name.splitn(2, ':');\n             let name = name_parts.next().unwrap();\n             let new_name = name_parts.next();\n-            (name.to_string(), new_name.map(|n| n.to_string()), kind)\n+            (name.to_owned(), new_name.map(|n| n.to_owned()), kind)\n         })\n         .collect();\n \n@@ -2223,10 +2211,8 @@ pub fn build_session_options_and_crate_config(\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n-        let name = match parts.next() {\n-            Some(s) => s,\n-            None => early_error(error_format, \"--extern value must not be empty\"),\n-        };\n+        let name = parts.next().unwrap_or_else(||\n+            early_error(error_format, \"--extern value must not be empty\"));\n         let location = parts.next().map(|s| s.to_string());\n         if location.is_none() && !is_unstable_enabled {\n             early_error(\n@@ -2237,7 +2223,7 @@ pub fn build_session_options_and_crate_config(\n         };\n \n         externs\n-            .entry(name.to_string())\n+            .entry(name.to_owned())\n             .or_default()\n             .insert(location);\n     }\n@@ -2308,9 +2294,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\" => CrateType::Cdylib,\n                 \"bin\" => CrateType::Executable,\n                 \"proc-macro\" => CrateType::ProcMacro,\n-                _ => {\n-                    return Err(format!(\"unknown crate type: `{}`\", part));\n-                }\n+                _ => return Err(format!(\"unknown crate type: `{}`\", part))\n             };\n             if !crate_types.contains(&new_part) {\n                 crate_types.push(new_part)"}, {"sha": "f410c270bcef91aa681dae20159534c7550108ed", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -41,7 +41,7 @@ impl<'a> FileSearch<'a> {\n         F: FnMut(&Path, PathKind)\n     {\n         let mut visited_dirs = FxHashSet::default();\n-\n+        visited_dirs.reserve(self.search_paths.paths.len() + 1);\n         for (path, kind) in self.search_paths.iter(self.kind) {\n             f(path, kind);\n             visited_dirs.insert(path.to_path_buf());\n@@ -160,7 +160,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n     match env::current_exe() {\n         Ok(exe) => {\n             match canonicalize(Some(exe)) {\n-                Some(mut p) => { p.pop(); p.pop(); return p; },\n+                Some(mut p) => { p.pop(); p.pop(); p },\n                 None => bug!(\"can't determine value for sysroot\")\n             }\n         }\n@@ -175,25 +175,25 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n     // to lib64/lib32. This would be more foolproof by basing the sysroot off\n     // of the directory where librustc is located, rather than where the rustc\n     // binary is.\n-    //If --libdir is set during configuration to the value other than\n+    // If --libdir is set during configuration to the value other than\n     // \"lib\" (i.e. non-default), this value is used (see issue #16552).\n \n-    match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n-        Some(libdir) if libdir != \"lib\" => return libdir.into(),\n-        _ => if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n-            return PRIMARY_LIB_DIR.into();\n-        } else {\n-            return SECONDARY_LIB_DIR.into();\n-        }\n-    }\n-\n     #[cfg(target_pointer_width = \"64\")]\n     const PRIMARY_LIB_DIR: &'static str = \"lib64\";\n \n     #[cfg(target_pointer_width = \"32\")]\n     const PRIMARY_LIB_DIR: &'static str = \"lib32\";\n \n     const SECONDARY_LIB_DIR: &'static str = \"lib\";\n+\n+    match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n+        Some(libdir) if libdir != \"lib\" => libdir.into(),\n+        _ => if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n+            PRIMARY_LIB_DIR.into()\n+        } else {\n+            SECONDARY_LIB_DIR.into()\n+        }\n+    }\n }\n \n // The name of rustc's own place to organize libraries."}, {"sha": "e983ddc3108d7e62a862c4d8edded6c9afd77b7a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -703,8 +703,8 @@ impl Session {\n         match self.opts.maybe_sysroot {\n             Some(ref sysroot) => sysroot,\n             None => self.default_sysroot\n-                .as_ref()\n-                .expect(\"missing sysroot and default_sysroot in Session\"),\n+                        .as_ref()\n+                        .expect(\"missing sysroot and default_sysroot in Session\"),\n         }\n     }\n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n@@ -727,14 +727,8 @@ impl Session {\n     pub fn set_incr_session_load_dep_graph(&self, load: bool) {\n         let mut incr_comp_session = self.incr_comp_session.borrow_mut();\n \n-        match *incr_comp_session {\n-            IncrCompSession::Active {\n-                ref mut load_dep_graph,\n-                ..\n-            } => {\n-                *load_dep_graph = load;\n-            }\n-            _ => {}\n+        if let IncrCompSession::Active { ref mut load_dep_graph, .. } = *incr_comp_session {\n+            *load_dep_graph = load;\n         }\n     }\n \n@@ -872,9 +866,9 @@ impl Session {\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n         let mut ret = true;\n-        match self.optimization_fuel_crate {\n-            Some(ref c) if c == crate_name => {\n-                assert!(self.query_threads() == 1);\n+        if let Some(ref c) = self.optimization_fuel_crate {\n+            if c == crate_name {\n+                assert_eq!(self.query_threads(), 1);\n                 let fuel = self.optimization_fuel_limit.get();\n                 ret = fuel != 0;\n                 if fuel == 0 && !self.out_of_fuel.get() {\n@@ -884,14 +878,12 @@ impl Session {\n                     self.optimization_fuel_limit.set(fuel - 1);\n                 }\n             }\n-            _ => {}\n         }\n-        match self.print_fuel_crate {\n-            Some(ref c) if c == crate_name => {\n-                assert!(self.query_threads() == 1);\n+        if let Some(ref c) = self.print_fuel_crate {\n+            if c == crate_name {\n+                assert_eq!(self.query_threads(), 1);\n                 self.print_fuel.set(self.print_fuel.get() + 1);\n             }\n-            _ => {}\n         }\n         ret\n     }\n@@ -1108,14 +1100,11 @@ pub fn build_session_(\n     source_map: Lrc<source_map::SourceMap>,\n ) -> Session {\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n-    let host = match Target::search(&host_triple) {\n-        Ok(t) => t,\n-        Err(e) => {\n-            span_diagnostic\n-                .fatal(&format!(\"Error loading host specification: {}\", e))\n-                .raise();\n-        }\n-    };\n+    let host = Target::search(&host_triple).unwrap_or_else(|e|\n+        span_diagnostic\n+            .fatal(&format!(\"Error loading host specification: {}\", e))\n+            .raise()\n+    );\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n \n     let p_s = parse::ParseSess::with_span_handler(span_diagnostic, source_map);\n@@ -1135,12 +1124,11 @@ pub fn build_session_(\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n     let print_fuel = LockCell::new(0);\n \n-    let working_dir = match env::current_dir() {\n-        Ok(dir) => dir,\n-        Err(e) => p_s.span_diagnostic\n+    let working_dir = env::current_dir().unwrap_or_else(|e|\n+        p_s.span_diagnostic\n             .fatal(&format!(\"Current directory is invalid: {}\", e))\n-            .raise(),\n-    };\n+            .raise()\n+    );\n     let working_dir = file_path_mapping.map_prefix(working_dir);\n \n     let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {"}, {"sha": "768d4f1e5fb6573f24c5a7bbf3a63a19b1eb19fd", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -14,7 +14,7 @@ use session::{early_error, config};\n \n #[derive(Clone, Debug)]\n pub struct SearchPaths {\n-    paths: Vec<(PathKind, PathBuf)>,\n+    crate paths: Vec<(PathKind, PathBuf)>,\n }\n \n pub struct Iter<'a> {"}, {"sha": "223df7cbb1874cb48fe2feaf0d3d19ac15aa80b1", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -1657,7 +1657,7 @@ pub fn build_output_filenames(\n                 .crate_name\n                 .clone()\n                 .or_else(|| attr::find_crate_name(attrs).map(|n| n.to_string()))\n-                .unwrap_or_else(|| input.filestem());\n+                .unwrap_or_else(|| input.filestem().to_owned());\n \n             OutputFilenames {\n                 out_directory: dirpath,"}, {"sha": "76717548521b7343b7b59cb002f9e1f08438fc19", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 69, "deletions": 42, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -272,7 +272,7 @@ declare_lint! {\n pub struct UnusedParens;\n \n impl UnusedParens {\n-    fn check_unused_parens_core(&self,\n+    fn check_unused_parens_expr(&self,\n                                 cx: &EarlyContext,\n                                 value: &ast::Expr,\n                                 msg: &str,\n@@ -281,46 +281,57 @@ impl UnusedParens {\n             let necessary = struct_lit_needs_parens &&\n                             parser::contains_exterior_struct_lit(&inner);\n             if !necessary {\n-                let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n-                let mut err = cx.struct_span_lint(UNUSED_PARENS,\n-                                                  value.span,\n-                                                  &span_msg);\n-                // Remove exactly one pair of parentheses (rather than na\u00efvely\n-                // stripping all paren characters)\n-                let mut ate_left_paren = false;\n-                let mut ate_right_paren = false;\n-                let parens_removed = pprust::expr_to_string(value)\n-                    .trim_matches(|c| {\n-                        match c {\n-                            '(' => {\n-                                if ate_left_paren {\n-                                    false\n-                                } else {\n-                                    ate_left_paren = true;\n-                                    true\n-                                }\n-                            },\n-                            ')' => {\n-                                if ate_right_paren {\n-                                    false\n-                                } else {\n-                                    ate_right_paren = true;\n-                                    true\n-                                }\n-                            },\n-                            _ => false,\n-                        }\n-                    }).to_owned();\n-                err.span_suggestion_short_with_applicability(\n-                    value.span,\n-                    \"remove these parentheses\",\n-                    parens_removed,\n-                    Applicability::MachineApplicable\n-                );\n-                err.emit();\n+                let pattern = pprust::expr_to_string(value);\n+                Self::remove_outer_parens(cx, value.span, &pattern, msg);\n             }\n         }\n     }\n+\n+    fn check_unused_parens_pat(&self,\n+                                cx: &EarlyContext,\n+                                value: &ast::Pat,\n+                                msg: &str) {\n+        if let ast::PatKind::Paren(_) = value.node {\n+            let pattern = pprust::pat_to_string(value);\n+            Self::remove_outer_parens(cx, value.span, &pattern, msg);\n+        }\n+    }\n+\n+    fn remove_outer_parens(cx: &EarlyContext, span: Span, pattern: &str, msg: &str) {\n+        let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n+        let mut err = cx.struct_span_lint(UNUSED_PARENS, span, &span_msg);\n+        let mut ate_left_paren = false;\n+        let mut ate_right_paren = false;\n+        let parens_removed = pattern\n+            .trim_matches(|c| {\n+                match c {\n+                    '(' => {\n+                        if ate_left_paren {\n+                            false\n+                        } else {\n+                            ate_left_paren = true;\n+                            true\n+                        }\n+                    },\n+                    ')' => {\n+                        if ate_right_paren {\n+                            false\n+                        } else {\n+                            ate_right_paren = true;\n+                            true\n+                        }\n+                    },\n+                    _ => false,\n+                }\n+            }).to_owned();\n+        err.span_suggestion_short_with_applicability(\n+                span,\n+                \"remove these parentheses\",\n+                parens_removed,\n+                Applicability::MachineApplicable\n+            );\n+        err.emit();\n+    }\n }\n \n impl LintPass for UnusedParens {\n@@ -349,7 +360,9 @@ impl EarlyLintPass for UnusedParens {\n                     // first \"argument\" is self (which sometimes needs parens)\n                     MethodCall(_, ref args) => (&args[1..], \"method\"),\n                     // actual catch-all arm\n-                    _ => { return; }\n+                    _ => {\n+                        return;\n+                    }\n                 };\n                 // Don't lint if this is a nested macro expansion: otherwise, the lint could\n                 // trigger in situations that macro authors shouldn't have to care about, e.g.,\n@@ -362,18 +375,32 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 let msg = format!(\"{} argument\", call_kind);\n                 for arg in args_to_check {\n-                    self.check_unused_parens_core(cx, arg, &msg, false);\n+                    self.check_unused_parens_expr(cx, arg, &msg, false);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);\n+        self.check_unused_parens_expr(cx, &value, msg, struct_lit_needs_parens);\n+    }\n+\n+    fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat) {\n+        use ast::PatKind::{Paren, Range};\n+        // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n+        // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n+        // is a recursive `check_pat` on `a` and `b`, but we will assume that if there are\n+        // unnecessry parens they serve a purpose of readability.\n+        if let Paren(ref pat) = p.node {\n+            match pat.node {\n+                Range(..) => {}\n+                _ => self.check_unused_parens_pat(cx, &p, \"pattern\")\n+            }\n+        }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n-                self.check_unused_parens_core(cx, &value, \"assigned value\", false);\n+                self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n             }\n         }\n     }"}, {"sha": "d15867eacddc60dc11c9f3581192e9e77264796a", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -52,7 +52,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     /// Returns true as long as there are more things to do.\n-    fn step(&mut self) -> EvalResult<'tcx, bool> {\n+    ///\n+    /// This is used by [priroda](https://github.com/oli-obk/priroda)\n+    pub fn step(&mut self) -> EvalResult<'tcx, bool> {\n         if self.stack.is_empty() {\n             return Ok(false);\n         }"}, {"sha": "1e3f0a21cefb3ef3593d723eca5a8f2eed4c94ea", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -306,8 +306,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let wf_conditions = iter::once(ty::Binder::dummy(trait_pred.lower()))\n         .chain(\n             where_clauses\n-                .iter()\n-                .cloned()\n+                .into_iter()\n                 .map(|wc| wc.map_bound(|goal| goal.into_well_formed_goal()))\n         );\n \n@@ -350,15 +349,13 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     // `WC`\n     let where_clauses = tcx.predicates_of(def_id).predicates\n         .into_iter()\n-        .map(|(wc, _)| wc.lower())\n-        .collect::<Vec<_>>();\n+        .map(|(wc, _)| wc.lower());\n \n     // `Implemented(A0: Trait<A1..An>) :- WC`\n     let clause = ProgramClause {\n         goal: trait_pred,\n         hypotheses: tcx.mk_goals(\n             where_clauses\n-                .into_iter()\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };"}, {"sha": "d82d36a1937bf4b5449249789643be1b5285e2e2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // field is of the found type, suggest such variants. See Issue\n         // #42764.\n         if let ty::Adt(expected_adt, substs) = expected.sty {\n-            let compatible_variants = expected_adt.variants\n+            let mut compatible_variants = expected_adt.variants\n                                                   .iter()\n                                                   .filter(|variant| variant.fields.len() == 1)\n                                                   .filter_map(|variant| {\n@@ -127,12 +127,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     None\n                 }\n-            }).collect::<Vec<_>>();\n+            }).peekable();\n \n-            if !compatible_variants.is_empty() {\n+            if compatible_variants.peek().is_some() {\n                 let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n-                let suggestions = compatible_variants.iter()\n-                    .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n+                let suggestions = compatible_variants.map(|v|\n+                    format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n                 err.span_suggestions_with_applicability(\n                      expr.span,\n                      \"try using a variant of the expected type\","}, {"sha": "34bbbb53d5ff1c1eaa86b0d9713464565098bf76", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -139,7 +139,7 @@ macro_rules! print {\n ///\n /// [`format!`]: ../std/macro.format.html\n /// [`std::fmt`]: ../std/fmt/index.html\n-/// [`eprintln!`]: ../std/macro.eprint.html\n+/// [`eprintln!`]: ../std/macro.eprintln.html\n /// # Panics\n ///\n /// Panics if writing to `io::stdout` fails."}, {"sha": "87ade278c685a7fadf4e9d8114861e6806c83725", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -34,6 +34,10 @@ use std::collections::hash_map::Entry;\n use rustc_data_structures::sync::Lrc;\n use errors::Applicability;\n \n+const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n+    `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, \\\n+    `path`, `meta`, `tt`, `item` and `vis`\";\n+\n pub struct ParserAnyMacro<'a> {\n     parser: Parser<'a>,\n \n@@ -708,8 +712,7 @@ fn check_matcher_core(sess: &ParseSess,\n                 if let Err(bad_frag) = has_legal_fragment_specifier(sess, features, attrs, token) {\n                     let msg = format!(\"invalid fragment specifier `{}`\", bad_frag);\n                     sess.span_diagnostic.struct_span_err(token.span(), &msg)\n-                        .help(\"valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, \\\n-                              `pat`, `ty`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\")\n+                        .help(VALID_FRAGMENT_NAMES_MSG)\n                         .emit();\n                     // (This eliminates false positives and duplicates\n                     // from error messages.)\n@@ -938,9 +941,7 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n             },\n             \"\" => Ok(true), // keywords::Invalid\n             _ => Err((format!(\"invalid fragment specifier `{}`\", frag),\n-                     \"valid fragment specifiers are `ident`, `block`, \\\n-                      `stmt`, `expr`, `pat`, `ty`, `path`, `meta`, `tt`, \\\n-                      `literal`, `item` and `vis`\"))\n+                     VALID_FRAGMENT_NAMES_MSG))\n         }\n     }\n }"}, {"sha": "06bd14d188e34f25aeab55fe076db084a9758bf9", "filename": "src/test/run-pass/binding/pat-tuple-7.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -11,6 +11,7 @@\n // run-pass\n \n fn main() {\n+    #[allow(unused_parens)]\n     match 0 {\n         (pat) => assert_eq!(pat, 0)\n     }"}, {"sha": "924767fb5e17a3cdd666c87e0ff67b02141ba46f", "filename": "src/test/ui/issues/issue-21356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fissues%2Fissue-21356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fissues%2Fissue-21356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21356.stderr?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -4,7 +4,7 @@ error: invalid fragment specifier `t_ty`\n LL | macro_rules! test { ($wrong:t_ty ..) => () }\n    |                      ^^^^^^^^^^^\n    |\n-   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n+   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n \n error: aborting due to previous error\n "}, {"sha": "7a475d1a6abdb13add5077fbfe04eb0b06894329", "filename": "src/test/ui/issues/issue-23189.rs", "status": "renamed", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fissues%2Fissue-23189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fissues%2Fissue-23189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23189.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,13 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-struct Ref<'a, 'b> {\n-    a: &'a u32,\n-    b: &'b u32,\n-}\n \n-fn foo(mut x: Ref) {\n-    x.a = x.b; //~ ERROR lifetime mismatch\n-}\n+mod module {}\n \n-fn main() {}\n+fn main() {\n+    let _ = module { x: 0 }; //~ERROR expected struct\n+}", "previous_filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.rs"}, {"sha": "c7bbab4524dc8befed5d1febebb49306abce3713", "filename": "src/test/ui/issues/issue-23189.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fissues%2Fissue-23189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fissues%2Fissue-23189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23189.stderr?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -0,0 +1,9 @@\n+error[E0574]: expected struct, variant or union type, found module `module`\n+  --> $DIR/issue-23189.rs:14:13\n+   |\n+LL |     let _ = module { x: 0 }; //~ERROR expected struct\n+   |             ^^^^^^ not a struct, variant or union type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0574`."}, {"sha": "4f0efe24cf70a3b558ffce4ee1754c9cbbc959e2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr?ref=5a52983d690bfdc0d0343c1db14c2c6b2359df2d", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:5\n-   |\n-LL | fn foo(mut x: Ref) {\n-   |        -----\n-   |        |\n-   |        has type `Ref<'_, '1>`\n-   |        has type `Ref<'2, '_>`\n-LL |     x.a = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ccc5e02ab704cebd95cc70ef67791846fb822b33", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr?ref=5a52983d690bfdc0d0343c1db14c2c6b2359df2d", "patch": "@@ -1,13 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:11\n-   |\n-LL | fn foo(mut x: Ref) {\n-   |               ---\n-   |               |\n-   |               this type is declared with multiple lifetimes...\n-LL |     x.a = x.b; //~ ERROR lifetime mismatch\n-   |           ^^^ ...but data with one lifetime flows into the other here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "97a2dd59a6209d0332099fca262f65fb4e37cae8", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![allow(unreachable_patterns)]\n+#![allow(unused_variables)]\n+#![warn(unused_parens)]\n+\n+fn main() {\n+    match 1 {\n+        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n+        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n+        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n+        (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        (1..=2) => {}     // Non ambiguous range pattern should not warn\n+        e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n+        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n+        &(1..=2) => {}       // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) | e @ &(3..=4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+}"}, {"sha": "b76b969fd2b1a8ab1693933076b75d177db00149", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -0,0 +1,42 @@\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:19:9\n+   |\n+LL |         (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-54538-unused-parens-lint.rs:15:9\n+   |\n+LL | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:20:9\n+   |\n+LL |         (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:21:9\n+   |\n+LL |         (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:22:9\n+   |\n+LL |         (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+   |         ^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:28:9\n+   |\n+LL |         (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+   |         ^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:29:10\n+   |\n+LL |         &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n+   |          ^^^ help: remove these parentheses\n+"}, {"sha": "55d6168e6e0085205d0044dca7e8f4ab517d8c7a", "filename": "src/test/ui/lint/lint-group-style.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs?ref=5a52983d690bfdc0d0343c1db14c2c6b2359df2d", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014\u20132017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(nonstandard_style)]\n-#![allow(dead_code)]\n-\n-fn CamelCase() {} //~ ERROR should have a snake\n-\n-#[allow(nonstandard_style)]\n-mod test {\n-    fn CamelCase() {}\n-\n-    #[forbid(nonstandard_style)]\n-    mod bad {\n-        fn CamelCase() {} //~ ERROR should have a snake\n-\n-        static bad: isize = 1; //~ ERROR should have an upper\n-    }\n-\n-    mod warn {\n-        #![warn(nonstandard_style)]\n-\n-        fn CamelCase() {} //~ WARN should have a snake\n-\n-        struct snake_case; //~ WARN should have a camel\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "6b91ce5b93ca604ab9d28b5b7a816028ea96fe30", "filename": "src/test/ui/lint/lint-group-style.stderr", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a52983d690bfdc0d0343c1db14c2c6b2359df2d/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr?ref=5a52983d690bfdc0d0343c1db14c2c6b2359df2d", "patch": "@@ -1,67 +0,0 @@\n-error: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-style.rs:14:1\n-   |\n-LL | fn CamelCase() {} //~ ERROR should have a snake\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-group-style.rs:11:9\n-   |\n-LL | #![deny(nonstandard_style)]\n-   |         ^^^^^^^^^^^^^^^^^\n-   = note: #[deny(non_snake_case)] implied by #[deny(nonstandard_style)]\n-\n-error: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-style.rs:22:9\n-   |\n-LL |         fn CamelCase() {} //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-group-style.rs:20:14\n-   |\n-LL |     #[forbid(nonstandard_style)]\n-   |              ^^^^^^^^^^^^^^^^^\n-   = note: #[forbid(non_snake_case)] implied by #[forbid(nonstandard_style)]\n-\n-error: static variable `bad` should have an upper case name such as `BAD`\n-  --> $DIR/lint-group-style.rs:24:9\n-   |\n-LL |         static bad: isize = 1; //~ ERROR should have an upper\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-group-style.rs:20:14\n-   |\n-LL |     #[forbid(nonstandard_style)]\n-   |              ^^^^^^^^^^^^^^^^^\n-   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(nonstandard_style)]\n-\n-warning: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-style.rs:30:9\n-   |\n-LL |         fn CamelCase() {} //~ WARN should have a snake\n-   |         ^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-group-style.rs:28:17\n-   |\n-LL |         #![warn(nonstandard_style)]\n-   |                 ^^^^^^^^^^^^^^^^^\n-   = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n-\n-warning: type `snake_case` should have a camel case name such as `SnakeCase`\n-  --> $DIR/lint-group-style.rs:32:9\n-   |\n-LL |         struct snake_case; //~ WARN should have a camel\n-   |         ^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-group-style.rs:28:17\n-   |\n-LL |         #![warn(nonstandard_style)]\n-   |                 ^^^^^^^^^^^^^^^^^\n-   = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "e683d47cf54826cd03a9abc5a84ed15bdc41bf50", "filename": "src/test/ui/macros/macro-invalid-fragment-spec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fmacros%2Fmacro-invalid-fragment-spec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Fmacros%2Fmacro-invalid-fragment-spec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-invalid-fragment-spec.stderr?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -4,7 +4,7 @@ error: invalid fragment specifier `foo`\n LL |     ($x:foo) => ()\n    |      ^^^^^^\n    |\n-   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n+   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n \n error: aborting due to previous error\n "}, {"sha": "20b1ae690ec82d1b7e833775d1c96bac01c4bf2c", "filename": "src/test/ui/unused/unused-macro-with-bad-frag-spec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Funused%2Funused-macro-with-bad-frag-spec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46880f41b7aeb897b8245474196bba9dc11f0e88/src%2Ftest%2Fui%2Funused%2Funused-macro-with-bad-frag-spec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-macro-with-bad-frag-spec.stderr?ref=46880f41b7aeb897b8245474196bba9dc11f0e88", "patch": "@@ -4,7 +4,7 @@ error: invalid fragment specifier `t_ty`\n LL |     ($wrong:t_ty) => () //~ ERROR invalid fragment specifier `t_ty`\n    |      ^^^^^^^^^^^\n    |\n-   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n+   = help: valid fragment specifiers are `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, `path`, `meta`, `tt`, `item` and `vis`\n \n error: aborting due to previous error\n "}]}