{"sha": "560d8079ec26f2a45ecb80e95d24917025e02104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MGQ4MDc5ZWMyNmYyYTQ1ZWNiODBlOTVkMjQ5MTcwMjVlMDIxMDQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T18:35:36Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T18:35:36Z"}, "message": "Deny bare trait objects in `src/libstd`.", "tree": {"sha": "6e288b50c28bcd6386874e3f4af71ff10431d190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e288b50c28bcd6386874e3f4af71ff10431d190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560d8079ec26f2a45ecb80e95d24917025e02104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560d8079ec26f2a45ecb80e95d24917025e02104", "html_url": "https://github.com/rust-lang/rust/commit/560d8079ec26f2a45ecb80e95d24917025e02104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560d8079ec26f2a45ecb80e95d24917025e02104/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77117e383676176116851d7d3ec04b5e0cf0c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/77117e383676176116851d7d3ec04b5e0cf0c456", "html_url": "https://github.com/rust-lang/rust/commit/77117e383676176116851d7d3ec04b5e0cf0c456"}], "stats": {"total": 197, "additions": 99, "deletions": 98}, "files": [{"sha": "8d715ac0ec33d58402125a9b512ef06b3fc5e8da", "filename": "src/libstd/error.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -138,7 +138,7 @@ pub trait Error: Debug + Display {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn cause(&self) -> Option<&Error> { None }\n+    fn cause(&self) -> Option<&dyn Error> { None }\n \n     /// Get the `TypeId` of `self`\n     #[doc(hidden)]\n@@ -151,22 +151,22 @@ pub trait Error: Debug + Display {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n-    fn from(err: E) -> Box<Error + 'a> {\n+impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n+    fn from(err: E) -> Box<dyn Error + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<Error + Send + Sync + 'a> {\n-    fn from(err: E) -> Box<Error + Send + Sync + 'a> {\n+impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<String> for Box<Error + Send + Sync> {\n-    fn from(err: String) -> Box<Error + Send + Sync> {\n+impl From<String> for Box<dyn Error + Send + Sync> {\n+    fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         #[derive(Debug)]\n         struct StringError(String);\n \n@@ -185,38 +185,38 @@ impl From<String> for Box<Error + Send + Sync> {\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl From<String> for Box<Error> {\n-    fn from(str_err: String) -> Box<Error> {\n-        let err1: Box<Error + Send + Sync> = From::from(str_err);\n-        let err2: Box<Error> = err1;\n+impl From<String> for Box<dyn Error> {\n+    fn from(str_err: String) -> Box<dyn Error> {\n+        let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n+        let err2: Box<dyn Error> = err1;\n         err2\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> From<&'b str> for Box<Error + Send + Sync + 'a> {\n-    fn from(err: &'b str) -> Box<Error + Send + Sync + 'a> {\n+impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl<'a> From<&'a str> for Box<Error> {\n-    fn from(err: &'a str) -> Box<Error> {\n+impl<'a> From<&'a str> for Box<dyn Error> {\n+    fn from(err: &'a str) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a, 'b> From<Cow<'b, str>> for Box<Error + Send + Sync + 'a> {\n-    fn from(err: Cow<'b, str>) -> Box<Error + Send + Sync + 'a> {\n+impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a> From<Cow<'a, str>> for Box<Error> {\n-    fn from(err: Cow<'a, str>) -> Box<Error> {\n+impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n+    fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }\n@@ -327,7 +327,7 @@ impl<T: Error> Error for Box<T> {\n         Error::description(&**self)\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         Error::cause(&**self)\n     }\n }\n@@ -368,7 +368,7 @@ impl Error for char::ParseCharError {\n }\n \n // copied from any.rs\n-impl Error + 'static {\n+impl dyn Error + 'static {\n     /// Returns true if the boxed type is the same as `T`\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n@@ -390,7 +390,7 @@ impl Error + 'static {\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&*(self as *const Error as *const T))\n+                Some(&*(self as *const dyn Error as *const T))\n             }\n         } else {\n             None\n@@ -404,68 +404,68 @@ impl Error + 'static {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&mut *(self as *mut Error as *mut T))\n+                Some(&mut *(self as *mut dyn Error as *mut T))\n             }\n         } else {\n             None\n         }\n     }\n }\n \n-impl Error + 'static + Send {\n+impl dyn Error + 'static + Send {\n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n-        <Error + 'static>::is::<T>(self)\n+        <dyn Error + 'static>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <Error + 'static>::downcast_ref::<T>(self)\n+        <dyn Error + 'static>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <Error + 'static>::downcast_mut::<T>(self)\n+        <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n }\n \n-impl Error + 'static + Send + Sync {\n+impl dyn Error + 'static + Send + Sync {\n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n-        <Error + 'static>::is::<T>(self)\n+        <dyn Error + 'static>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <Error + 'static>::downcast_ref::<T>(self)\n+        <dyn Error + 'static>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <Error + 'static>::downcast_mut::<T>(self)\n+        <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n }\n \n-impl Error {\n+impl dyn Error {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error>> {\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {\n         if self.is::<T>() {\n             unsafe {\n-                let raw: *mut Error = Box::into_raw(self);\n+                let raw: *mut dyn Error = Box::into_raw(self);\n                 Ok(Box::from_raw(raw as *mut T))\n             }\n         } else {\n@@ -474,30 +474,30 @@ impl Error {\n     }\n }\n \n-impl Error + Send {\n+impl dyn Error + Send {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     pub fn downcast<T: Error + 'static>(self: Box<Self>)\n-                                        -> Result<Box<T>, Box<Error + Send>> {\n-        let err: Box<Error> = self;\n-        <Error>::downcast(err).map_err(|s| unsafe {\n+                                        -> Result<Box<T>, Box<dyn Error + Send>> {\n+        let err: Box<dyn Error> = self;\n+        <dyn Error>::downcast(err).map_err(|s| unsafe {\n             // reapply the Send marker\n-            transmute::<Box<Error>, Box<Error + Send>>(s)\n+            transmute::<Box<dyn Error>, Box<dyn Error + Send>>(s)\n         })\n     }\n }\n \n-impl Error + Send + Sync {\n+impl dyn Error + Send + Sync {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     pub fn downcast<T: Error + 'static>(self: Box<Self>)\n                                         -> Result<Box<T>, Box<Self>> {\n-        let err: Box<Error> = self;\n-        <Error>::downcast(err).map_err(|s| unsafe {\n+        let err: Box<dyn Error> = self;\n+        <dyn Error>::downcast(err).map_err(|s| unsafe {\n             // reapply the Send+Sync marker\n-            transmute::<Box<Error>, Box<Error + Send + Sync>>(s)\n+            transmute::<Box<dyn Error>, Box<dyn Error + Send + Sync>>(s)\n         })\n     }\n }"}, {"sha": "03e0d0aa6dd9f1f1bad38a79beb1e3414c11a55b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -883,7 +883,7 @@ impl Error for IntoStringError {\n         \"C string contained non-utf8 bytes\"\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         Some(&self.error)\n     }\n }"}, {"sha": "02a3ce8b9c4d475a0dcdb366fcdcd44a9344521b", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -83,7 +83,7 @@ enum Repr {\n #[derive(Debug)]\n struct Custom {\n     kind: ErrorKind,\n-    error: Box<error::Error+Send+Sync>,\n+    error: Box<dyn error::Error+Send+Sync>,\n }\n \n /// A list specifying general categories of I/O error.\n@@ -250,12 +250,12 @@ impl Error {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<E>(kind: ErrorKind, error: E) -> Error\n-        where E: Into<Box<error::Error+Send+Sync>>\n+        where E: Into<Box<dyn error::Error+Send+Sync>>\n     {\n         Self::_new(kind, error.into())\n     }\n \n-    fn _new(kind: ErrorKind, error: Box<error::Error+Send+Sync>) -> Error {\n+    fn _new(kind: ErrorKind, error: Box<dyn error::Error+Send+Sync>) -> Error {\n         Error {\n             repr: Repr::Custom(Box::new(Custom {\n                 kind,\n@@ -373,7 +373,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n-    pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n+    pub fn get_ref(&self) -> Option<&(dyn error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n@@ -444,7 +444,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n-    pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n+    pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n@@ -478,7 +478,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n-    pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n+    pub fn into_inner(self) -> Option<Box<dyn error::Error+Send+Sync>> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n@@ -551,7 +551,7 @@ impl error::Error for Error {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,"}, {"sha": "8530487484827e5d8d404151a26bcb769eecde4c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -1972,7 +1972,7 @@ impl<T: BufRead> BufRead for Take<T> {\n     }\n }\n \n-fn read_one_byte(reader: &mut Read) -> Option<Result<u8>> {\n+fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {\n     let mut buf = [0];\n     loop {\n         return match reader.read(&mut buf) {\n@@ -2081,7 +2081,7 @@ impl std_error::Error for CharsError {\n             CharsError::Other(ref e) => std_error::Error::description(e),\n         }\n     }\n-    fn cause(&self) -> Option<&std_error::Error> {\n+    fn cause(&self) -> Option<&dyn std_error::Error> {\n         match *self {\n             CharsError::NotUtf8 => None,\n             CharsError::Other(ref e) => e.cause(),"}, {"sha": "fffe8fc559b8192b63c12f7208d23bac9dbf0a89", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -21,7 +21,7 @@ use thread::LocalKey;\n \n /// Stdout used by print! and println! macros\n thread_local! {\n-    static LOCAL_STDOUT: RefCell<Option<Box<Write + Send>>> = {\n+    static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {\n         RefCell::new(None)\n     }\n }\n@@ -624,7 +624,7 @@ impl<'a> fmt::Debug for StderrLock<'a> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_panic(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n+pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n     use panicking::LOCAL_STDERR;\n     use mem;\n     LOCAL_STDERR.with(move |slot| {\n@@ -648,7 +648,7 @@ pub fn set_panic(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n+pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n     use mem;\n     LOCAL_STDOUT.with(move |slot| {\n         mem::replace(&mut *slot.borrow_mut(), sink)\n@@ -670,7 +670,7 @@ pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(\n     args: fmt::Arguments,\n-    local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n+    local_s: &'static LocalKey<RefCell<Option<Box<dyn Write+Send>>>>,\n     global_s: fn() -> T,\n     label: &str,\n )"}, {"sha": "006922383cfb9bbd92a6a311d9a6704fede2efd3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -221,6 +221,7 @@\n // Don't link to std. We are std.\n #![no_std]\n \n+#![deny(bare_trait_objects)]\n #![deny(missing_docs)]\n #![deny(missing_debug_implementations)]\n "}, {"sha": "234c5618a0611db4a41ca0c115c83d0cf0e8d808", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -61,7 +61,7 @@ impl<'a> Parser<'a> {\n     }\n \n     // Return result of first successful parser\n-    fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T> + 'static>])\n+    fn read_or<T>(&mut self, parsers: &mut [Box<dyn FnMut(&mut Parser) -> Option<T> + 'static>])\n                -> Option<T> {\n         for pf in parsers {\n             if let Some(r) = self.read_atomically(|p: &mut Parser| pf(p)) {"}, {"sha": "b8c1c4f9e68e7602ad5ab3b78679abf3f84e7988", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -421,6 +421,6 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n /// }\n /// ```\n #[stable(feature = \"resume_unwind\", since = \"1.9.0\")]\n-pub fn resume_unwind(payload: Box<Any + Send>) -> ! {\n+pub fn resume_unwind(payload: Box<dyn Any + Send>) -> ! {\n     panicking::update_count_then_panic(payload)\n }"}, {"sha": "283fd36af41ff4976ca69b7896856a157492077b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -36,7 +36,7 @@ use sys_common::util;\n use thread;\n \n thread_local! {\n-    pub static LOCAL_STDERR: RefCell<Option<Box<Write + Send>>> = {\n+    pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {\n         RefCell::new(None)\n     }\n }\n@@ -64,7 +64,7 @@ extern {\n #[derive(Copy, Clone)]\n enum Hook {\n     Default,\n-    Custom(*mut (Fn(&PanicInfo) + 'static + Sync + Send)),\n+    Custom(*mut (dyn Fn(&PanicInfo) + 'static + Sync + Send)),\n }\n \n static HOOK_LOCK: RWLock = RWLock::new();\n@@ -104,7 +104,7 @@ static mut HOOK: Hook = Hook::Default;\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub fn set_hook(hook: Box<Fn(&PanicInfo) + 'static + Sync + Send>) {\n+pub fn set_hook(hook: Box<dyn Fn(&PanicInfo) + 'static + Sync + Send>) {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n@@ -149,7 +149,7 @@ pub fn set_hook(hook: Box<Fn(&PanicInfo) + 'static + Sync + Send>) {\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n+pub fn take_hook() -> Box<dyn Fn(&PanicInfo) + 'static + Sync + Send> {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n@@ -197,7 +197,7 @@ fn default_hook(info: &PanicInfo) {\n     let thread = thread_info::current_thread();\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n \n-    let write = |err: &mut ::io::Write| {\n+    let write = |err: &mut dyn (::io::Write)| {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n@@ -248,7 +248,7 @@ pub fn update_panic_count(amt: isize) -> usize {\n pub use realstd::rt::update_panic_count;\n \n /// Invoke a closure, capturing the cause of an unwinding panic if one occurs.\n-pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n+pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {\n     #[allow(unions_with_drop_fields)]\n     union Data<F, R> {\n         f: F,\n@@ -369,12 +369,12 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n     }\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n             let contents = mem::replace(self.fill(), String::new());\n             Box::into_raw(Box::new(contents))\n         }\n \n-        fn get(&mut self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(dyn Any + Send) {\n             self.fill()\n         }\n     }\n@@ -419,15 +419,15 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n     }\n \n     unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n             let data = match self.inner.take() {\n-                Some(a) => Box::new(a) as Box<Any + Send>,\n+                Some(a) => Box::new(a) as Box<dyn Any + Send>,\n                 None => Box::new(()),\n             };\n             Box::into_raw(data)\n         }\n \n-        fn get(&mut self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(dyn Any + Send) {\n             match self.inner {\n                 Some(ref a) => a,\n                 None => &(),\n@@ -441,7 +441,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// Executes the primary logic for a panic, including checking for recursive\n /// panics, panic hooks, and finally dispatching to the panic runtime to either\n /// abort or unwind.\n-fn rust_panic_with_hook(payload: &mut BoxMeUp,\n+fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n                         message: Option<&fmt::Arguments>,\n                         file_line_col: &(&str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n@@ -496,17 +496,17 @@ fn rust_panic_with_hook(payload: &mut BoxMeUp,\n }\n \n /// Shim around rust_panic. Called by resume_unwind.\n-pub fn update_count_then_panic(msg: Box<Any + Send>) -> ! {\n+pub fn update_count_then_panic(msg: Box<dyn Any + Send>) -> ! {\n     update_panic_count(1);\n \n-    struct RewrapBox(Box<Any + Send>);\n+    struct RewrapBox(Box<dyn Any + Send>);\n \n     unsafe impl BoxMeUp for RewrapBox {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n             Box::into_raw(mem::replace(&mut self.0, Box::new(())))\n         }\n \n-        fn get(&mut self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(dyn Any + Send) {\n             &*self.0\n         }\n     }\n@@ -517,9 +517,9 @@ pub fn update_count_then_panic(msg: Box<Any + Send>) -> ! {\n /// A private no-mangle function on which to slap yer breakpoints.\n #[no_mangle]\n #[allow(private_no_mangle_fns)] // yes we get it, but we like breakpoints\n-pub fn rust_panic(mut msg: &mut BoxMeUp) -> ! {\n+pub fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n     let code = unsafe {\n-        let obj = &mut msg as *mut &mut BoxMeUp;\n+        let obj = &mut msg as *mut &mut dyn BoxMeUp;\n         __rust_start_panic(obj as usize)\n     };\n     rtabort!(\"failed to initiate panic, error {}\", code)"}, {"sha": "39692836866baab6e7873920c7159ed3bb605be3", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -813,13 +813,13 @@ impl fmt::Debug for Output {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n \n         let stdout_utf8 = str::from_utf8(&self.stdout);\n-        let stdout_debug: &fmt::Debug = match stdout_utf8 {\n+        let stdout_debug: &dyn fmt::Debug = match stdout_utf8 {\n             Ok(ref str) => str,\n             Err(_) => &self.stdout\n         };\n \n         let stderr_utf8 = str::from_utf8(&self.stderr);\n-        let stderr_debug: &fmt::Debug = match stderr_utf8 {\n+        let stderr_debug: &dyn fmt::Debug = match stderr_utf8 {\n             Ok(ref str) => str,\n             Err(_) => &self.stderr\n         };"}, {"sha": "9e957bd87d79e3ac4daa224a43847b63b8709150", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -29,7 +29,7 @@ pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work.\n #[cfg(not(test))]\n-fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n+fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n                        argc: isize, argv: *const *const u8) -> isize {\n     use panic;\n     use sys;"}, {"sha": "1dc0b1c0042ab2ab4188a324fab3fd30bc473f61", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -1638,7 +1638,7 @@ impl<T: Send> error::Error for SendError<T> {\n         \"sending on a closed channel\"\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1681,7 +1681,7 @@ impl<T: Send> error::Error for TrySendError<T> {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1709,7 +1709,7 @@ impl error::Error for RecvError {\n         \"receiving on a closed channel\"\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1742,7 +1742,7 @@ impl error::Error for TryRecvError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1783,7 +1783,7 @@ impl error::Error for RecvTimeoutError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }"}, {"sha": "a7a284cfb7994a766b1d3781c9d5b34e22effdec", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -93,7 +93,7 @@ pub struct Handle<'rx, T:Send+'rx> {\n     next: *mut Handle<'static, ()>,\n     prev: *mut Handle<'static, ()>,\n     added: bool,\n-    packet: &'rx (Packet+'rx),\n+    packet: &'rx (dyn Packet+'rx),\n \n     // due to our fun transmutes, we be sure to place this at the end. (nothing\n     // previous relies on T)"}, {"sha": "1c63f99753a7c96c7a480b12437a70c5ef9f87fd", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -301,7 +301,7 @@ impl Once {\n     #[cold]\n     fn call_inner(&'static self,\n                   ignore_poisoning: bool,\n-                  init: &mut FnMut(bool)) {\n+                  init: &mut dyn FnMut(bool)) {\n         let mut state = self.state.load(Ordering::SeqCst);\n \n         'outer: loop {"}, {"sha": "44ec872b2446b956d85677a5e5d28f60a4a2bc44", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -28,7 +28,7 @@ pub struct Thread {\n }\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<FnBox() + 'a>)\n+    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)\n                           -> io::Result<Thread> {\n         let p = box p;\n "}, {"sha": "b28a4d2f8be016f21bcc2f58b2457eea0c921b10", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -17,7 +17,7 @@ use ptr;\n use mem;\n use sys_common::mutex::Mutex;\n \n-type Queue = Vec<Box<FnBox()>>;\n+type Queue = Vec<Box<dyn FnBox()>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -68,7 +68,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Box<FnBox()>) -> bool {\n+pub fn push(f: Box<dyn FnBox()>) -> bool {\n     unsafe {\n         let _guard = LOCK.lock();\n         if init() {"}, {"sha": "6184ba4ded6e33baba53b7287f4f3af037a429c2", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -49,7 +49,7 @@ pub struct Frame {\n const MAX_NB_FRAMES: usize = 100;\n \n /// Prints the current backtrace.\n-pub fn print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n+pub fn print(w: &mut dyn Write, format: PrintFormat) -> io::Result<()> {\n     static LOCK: Mutex = Mutex::new();\n \n     // Use a lock to prevent mixed output in multithreading context.\n@@ -62,7 +62,7 @@ pub fn print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n     }\n }\n \n-fn _print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n+fn _print(w: &mut dyn Write, format: PrintFormat) -> io::Result<()> {\n     let mut frames = [Frame {\n         exact_position: ptr::null(),\n         symbol_addr: ptr::null(),\n@@ -177,7 +177,7 @@ pub fn log_enabled() -> Option<PrintFormat> {\n ///\n /// These output functions should now be used everywhere to ensure consistency.\n /// You may want to also use `output_fileline`.\n-fn output(w: &mut Write, idx: usize, frame: Frame,\n+fn output(w: &mut dyn Write, idx: usize, frame: Frame,\n               s: Option<&str>, format: PrintFormat) -> io::Result<()> {\n     // Remove the `17: 0x0 - <unknown>` line.\n     if format == PrintFormat::Short && frame.exact_position == ptr::null() {\n@@ -202,7 +202,7 @@ fn output(w: &mut Write, idx: usize, frame: Frame,\n ///\n /// See also `output`.\n #[allow(dead_code)]\n-fn output_fileline(w: &mut Write,\n+fn output_fileline(w: &mut dyn Write,\n                    file: &[u8],\n                    line: u32,\n                    format: PrintFormat) -> io::Result<()> {\n@@ -254,7 +254,7 @@ fn output_fileline(w: &mut Write,\n // Note that this demangler isn't quite as fancy as it could be. We have lots\n // of other information in our symbols like hashes, version, type information,\n // etc. Additionally, this doesn't handle glue symbols at all.\n-pub fn demangle(writer: &mut Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n+pub fn demangle(writer: &mut dyn Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n     // During ThinLTO LLVM may import and rename internal symbols, so strip out\n     // those endings first as they're one of the last manglings applied to\n     // symbol names."}, {"sha": "1625efe4a2ae7142a06023a31b1058991a2bcdd8", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -251,7 +251,7 @@ impl<T> Error for TryLockError<T> {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         match *self {\n             TryLockError::Poisoned(ref p) => Some(p),\n             _ => None"}, {"sha": "86a5e2b86942a4e6b7740ab158371942fb37a768", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -21,7 +21,7 @@ pub unsafe fn start_thread(main: *mut u8) {\n     let _handler = stack_overflow::Handler::new();\n \n     // Finally, let's run some code.\n-    Box::from_raw(main as *mut Box<FnBox()>)()\n+    Box::from_raw(main as *mut Box<dyn FnBox()>)()\n }\n \n pub fn min_stack() -> usize {"}, {"sha": "cc0ec8a5b4dbc3f1feb51b465d933bc8f8da80c4", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560d8079ec26f2a45ecb80e95d24917025e02104/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=560d8079ec26f2a45ecb80e95d24917025e02104", "patch": "@@ -1175,7 +1175,7 @@ impl fmt::Debug for Thread {\n ///\n /// [`Result`]: ../../std/result/enum.Result.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type Result<T> = ::result::Result<T, Box<Any + Send + 'static>>;\n+pub type Result<T> = ::result::Result<T, Box<dyn Any + Send + 'static>>;\n \n // This packet is used to communicate the return value between the child thread\n // and the parent thread. Memory is shared through the `Arc` within and there's"}]}