{"sha": "c4e8e718807d1925769bdcdd055c6d8de05f20ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZThlNzE4ODA3ZDE5MjU3NjliZGNkZDA1NWM2ZDhkZTA1ZjIwY2U=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-28T13:55:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:08Z"}, "message": "Lift name into GenericParam", "tree": {"sha": "b2d0c13f9b12a4e5fcb2a4cfe3444ab47e6e448a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d0c13f9b12a4e5fcb2a4cfe3444ab47e6e448a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e8e718807d1925769bdcdd055c6d8de05f20ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e8e718807d1925769bdcdd055c6d8de05f20ce", "html_url": "https://github.com/rust-lang/rust/commit/c4e8e718807d1925769bdcdd055c6d8de05f20ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e8e718807d1925769bdcdd055c6d8de05f20ce/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b2dacdf8c0e2eaf5fd919e6c35ee3819101e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b2dacdf8c0e2eaf5fd919e6c35ee3819101e0a", "html_url": "https://github.com/rust-lang/rust/commit/32b2dacdf8c0e2eaf5fd919e6c35ee3819101e0a"}], "stats": {"total": 114, "additions": 51, "deletions": 63}, "files": [{"sha": "d0a3f0d097fd098898cdf45e458e0d1a0e3b44f7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -699,11 +699,12 @@ impl<'a> LoweringContext<'a> {\n \n                 hir::GenericParam {\n                     id: def_node_id,\n+                    name: hir_name.name(),\n                     span,\n                     pure_wrt_drop: false,\n                     bounds: vec![].into(),\n                     kind: hir::GenericParamKind::Lifetime {\n-                        name: hir_name,\n+                        lt_name: hir_name,\n                         in_band: true,\n                         lifetime: hir::Lifetime {\n                             id: def_node_id,\n@@ -734,10 +735,7 @@ impl<'a> LoweringContext<'a> {\n \n         let hir_name = hir::LifetimeName::Name(name);\n \n-        if self.lifetimes_to_define\n-            .iter()\n-            .any(|(_, lt_name)| *lt_name == hir_name)\n-        {\n+        if self.lifetimes_to_define.iter().any(|(_, lt_name)| *lt_name == hir_name) {\n             return;\n         }\n \n@@ -788,7 +786,7 @@ impl<'a> LoweringContext<'a> {\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => Some(param.name()),\n+            hir::GenericParamKind::Lifetime { .. } => Some(param.name),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -1251,11 +1249,11 @@ impl<'a> LoweringContext<'a> {\n                         let name = Symbol::intern(&pprust::ty_to_string(t));\n                         self.in_band_ty_params.push(hir::GenericParam {\n                             id: def_node_id,\n+                            name,\n                             span,\n                             pure_wrt_drop: false,\n                             bounds: hir_bounds,\n                             kind: hir::GenericParamKind::Type {\n-                                name,\n                                 default: None,\n                                 synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n                                 attrs: P::new(),\n@@ -1366,10 +1364,10 @@ impl<'a> LoweringContext<'a> {\n \n             fn visit_generic_param(&mut self, param: &'v hir::GenericParam) {\n                 // Record the introduction of 'a in `for<'a> ...`\n-                if let hir::GenericParamKind::Lifetime { name, .. } = param.kind {\n+                if let hir::GenericParamKind::Lifetime { lt_name, .. } = param.kind {\n                     // Introduce lifetimes one at a time so that we can handle\n                     // cases like `fn foo<'d>() -> impl for<'a, 'b: 'a, 'c: 'b + 'd>`\n-                    self.currently_bound_lifetimes.push(name);\n+                    self.currently_bound_lifetimes.push(lt_name);\n                 }\n \n                 hir::intravisit::walk_generic_param(self, param);\n@@ -1418,11 +1416,12 @@ impl<'a> LoweringContext<'a> {\n \n                     self.output_lifetime_params.push(hir::GenericParam {\n                         id: def_node_id,\n+                        name: name.name(),\n                         span: lifetime.span,\n                         pure_wrt_drop: false,\n                         bounds: vec![].into(),\n                         kind: hir::GenericParamKind::Lifetime {\n-                            name,\n+                            lt_name: name,\n                             in_band: false,\n                             lifetime: hir::Lifetime {\n                                 id: def_node_id,\n@@ -1955,11 +1954,12 @@ impl<'a> LoweringContext<'a> {\n                 let lifetime = self.lower_lifetime(lifetime);\n                 let param = hir::GenericParam {\n                     id: lifetime.id,\n+                    name: lifetime.name.name(),\n                     span: lifetime.span,\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n                     bounds,\n                     kind: hir::GenericParamKind::Lifetime {\n-                        name: lifetime.name,\n+                        lt_name: lifetime.name,\n                         in_band: false,\n                         lifetime,\n                     }\n@@ -1988,11 +1988,11 @@ impl<'a> LoweringContext<'a> {\n \n                 hir::GenericParam {\n                     id: self.lower_node_id(param.id).node_id,\n+                    name,\n                     span: param.ident.span,\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n                     bounds,\n                     kind: hir::GenericParamKind::Type {\n-                        name,\n                         default: default.as_ref().map(|x| {\n                             self.lower_ty(x, ImplTraitContext::Disallowed)\n                         }),"}, {"sha": "999103980625c330eaddd76ceac84d504e17b8b0", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -616,7 +616,7 @@ impl<'hir> Map<'hir> {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => {\n                 keywords::SelfType.name()\n             }\n-            NodeGenericParam(param) => param.name(),\n+            NodeGenericParam(param) => param.name,\n             _ => {\n                 bug!(\"ty_param_name: {} not a type parameter\",\n                     self.node_to_string(id))\n@@ -957,7 +957,7 @@ impl<'hir> Map<'hir> {\n             NodeVariant(v) => v.node.name,\n             NodeField(f) => f.ident.name,\n             NodeLifetime(lt) => lt.name.name(),\n-            NodeGenericParam(param) => param.name(),\n+            NodeGenericParam(param) => param.name,\n             NodeBinding(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n             NodeStructCtor(_) => self.name(self.get_parent(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))"}, {"sha": "b4470ed7c1eb0ef77980593b765a4df20a984036", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -424,8 +424,6 @@ pub enum TraitBoundModifier {\n     Maybe,\n }\n \n-pub type Outlives = Lifetime;\n-\n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n@@ -451,7 +449,7 @@ pub type ParamBounds = HirVec<ParamBound>;\n pub enum GenericParamKind {\n     /// A lifetime definition, eg `'a: 'b + 'c + 'd`.\n     Lifetime {\n-        name: LifetimeName,\n+        lt_name: LifetimeName,\n         // Indicates that the lifetime definition was synthetically added\n         // as a result of an in-band lifetime usage like:\n         // `fn foo(x: &'a u8) -> &'a u8 { x }`\n@@ -460,7 +458,6 @@ pub enum GenericParamKind {\n         lifetime: Lifetime,\n     },\n     Type {\n-        name: Name,\n         default: Option<P<Ty>>,\n         synthetic: Option<SyntheticTyParamKind>,\n         attrs: HirVec<Attribute>,\n@@ -470,22 +467,14 @@ pub enum GenericParamKind {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct GenericParam {\n     pub id: NodeId,\n+    pub name: Name,\n     pub bounds: ParamBounds,\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n \n     pub kind: GenericParamKind,\n }\n \n-impl GenericParam {\n-    pub fn name(&self) -> Name {\n-        match self.kind {\n-            GenericParamKind::Lifetime { name, .. } => name.name(),\n-            GenericParamKind::Type { name, .. } => name,\n-        }\n-    }\n-}\n-\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,"}, {"sha": "a4cbd6515955d333a5e5c02287eec52195ba19bb", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -2115,7 +2115,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_generic_param(&mut self, param: &GenericParam) -> io::Result<()> {\n-        self.print_name(param.name())?;\n+        self.print_name(param.name)?;\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n                 let mut sep = \":\";"}, {"sha": "0c31134ae9cb35acf03d0cc434e8348abcab01bd", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -196,6 +196,7 @@ impl_stable_hash_for!(enum hir::TraitBoundModifier {\n \n impl_stable_hash_for!(struct hir::GenericParam {\n     id,\n+    name,\n     span,\n     pure_wrt_drop,\n     bounds,\n@@ -208,13 +209,12 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            hir::GenericParamKind::Lifetime { name, in_band, ref lifetime } => {\n-                name.hash_stable(hcx, hasher);\n+            hir::GenericParamKind::Lifetime { lt_name, in_band, ref lifetime } => {\n+                lt_name.hash_stable(hcx, hasher);\n                 in_band.hash_stable(hcx, hasher);\n                 lifetime.hash_stable(hcx, hasher);\n             }\n-            hir::GenericParamKind::Type { name, ref default, synthetic, attrs } => {\n-                name.hash_stable(hcx, hasher);\n+            hir::GenericParamKind::Type { ref default, synthetic, attrs } => {\n                 default.hash_stable(hcx, hasher);\n                 synthetic.hash_stable(hcx, hasher);\n                 attrs.hash_stable(hcx, hasher);"}, {"sha": "cc39456c2fe36ba5a00e41c4d31e9e91f91db069", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -84,13 +84,13 @@ pub enum Region {\n fn new_region(hir_map: &Map, param: &hir::GenericParam)\n     -> (hir::LifetimeName, DefId, LifetimeDefOrigin) {\n     let def_id = hir_map.local_def_id(param.id);\n-    let (name, origin) = match param.kind {\n-        GenericParamKind::Lifetime { name, in_band, .. } => {\n-            (name, LifetimeDefOrigin::from_is_in_band(in_band))\n+    let (lt_name, origin) = match param.kind {\n+        GenericParamKind::Lifetime { lt_name, in_band, .. } => {\n+            (lt_name, LifetimeDefOrigin::from_is_in_band(in_band))\n         }\n         _ => bug!(\"expected a lifetime param\"),\n     };\n-    (name, def_id, origin)\n+    (lt_name, def_id, origin)\n }\n \n impl Region {\n@@ -1222,7 +1222,7 @@ fn compute_object_lifetime_defaults(\n                                 generics.params.iter().find_map(|param| match param.kind {\n                                         GenericParamKind::Lifetime { .. } => {\n                                             if i == 0 {\n-                                                return Some(param.name().to_string());\n+                                                return Some(param.name.to_string());\n                                             }\n                                             i -= 1;\n                                             None\n@@ -1299,8 +1299,8 @@ fn object_lifetime_defaults_for_item(\n                         Set1::One(Region::Static)\n                     } else {\n                         generics.params.iter().filter_map(|param| match param.kind {\n-                            GenericParamKind::Lifetime { name, in_band, .. } => {\n-                                Some((param.id, name, in_band))\n+                            GenericParamKind::Lifetime { lt_name, in_band, .. } => {\n+                                Some((param.id, lt_name, in_band))\n                             }\n                             _ => None,\n                         })\n@@ -2237,7 +2237,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     fn check_lifetime_params(&mut self, old_scope: ScopeRef, params: &'tcx [hir::GenericParam]) {\n         let lifetimes: Vec<_> = params.iter().filter_map(|param| match param.kind {\n-            GenericParamKind::Lifetime { name, .. } => Some((param, name)),\n+            GenericParamKind::Lifetime { lt_name, .. } => Some((param, lt_name)),\n             _ => None,\n         }).collect();\n         for (i, (lifetime_i, lifetime_i_name)) in lifetimes.iter().enumerate() {\n@@ -2271,7 +2271,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         lifetime_j.span,\n                         E0263,\n                         \"lifetime name `{}` declared twice in the same scope\",\n-                        lifetime_j.name()\n+                        lifetime_j.name\n                     ).span_label(lifetime_j.span, \"declared twice\")\n                         .span_label(lifetime_i.span, \"previous declaration here\")\n                         .emit();\n@@ -2302,13 +2302,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                     lifetime_i.span.to(lt.span),\n                                     &format!(\n                                         \"unnecessary lifetime parameter `{}`\",\n-                                        lifetime_i.name()\n+                                        lifetime_i.name\n                                     ),\n                                 )\n                                 .help(&format!(\n                                     \"you can use the `'static` lifetime directly, in place \\\n                                      of `{}`\",\n-                                    lifetime_i.name()\n+                                    lifetime_i.name\n                                 ))\n                                 .emit();\n                         }\n@@ -2331,7 +2331,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     ) {\n         for &(label, label_span) in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n-            if param.name() == label {\n+            if param.name == label {\n                 signal_shadowing_problem(\n                     self.tcx,\n                     label,\n@@ -2343,7 +2343,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let name = match param.kind {\n-            GenericParamKind::Lifetime { name, .. } => name,\n+            GenericParamKind::Lifetime { lt_name, .. } => lt_name,\n             _ => bug!(\"expected lifetime param\"),\n         };\n \n@@ -2367,7 +2367,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                         signal_shadowing_problem(\n                             self.tcx,\n-                            param.name(),\n+                            param.name,\n                             original_lifetime(self.tcx.hir.span(node_id)),\n                             shadower_lifetime(&param),\n                         );\n@@ -2539,7 +2539,7 @@ fn insert_late_bound_lifetimes(\n     // - are not implicitly captured by `impl Trait`\n     for param in &generics.params {\n         let name = match param.kind {\n-            GenericParamKind::Lifetime { name, .. } => name,\n+            GenericParamKind::Lifetime { lt_name, .. } => lt_name,\n             _ => continue,\n         };\n "}, {"sha": "aeeb812dd77d4269bbfeb3c3da1b10775e5094c9", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n             GenericParamKind::Lifetime { .. } => {}\n             GenericParamKind::Type { synthetic, .. } => {\n                 if synthetic.is_none() {\n-                    self.check_case(cx, \"type parameter\", param.name(), param.span);\n+                    self.check_case(cx, \"type parameter\", param.name, param.span);\n                 }\n             }\n         }\n@@ -258,7 +258,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_generic_param(&mut self, cx: &LateContext, param: &hir::GenericParam) {\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n-                self.check_snake_case(cx, \"lifetime\", &param.name().as_str(), Some(param.span));\n+                self.check_snake_case(cx, \"lifetime\", &param.name.as_str(), Some(param.span));\n             }\n             GenericParamKind::Type { .. } => {}\n         }"}, {"sha": "9ff400d013bf8fcda05e6d81fcb7b3430afd7721", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -5195,7 +5195,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for (&used, param) in types_used.iter().zip(types) {\n         if !used {\n             struct_span_err!(tcx.sess, param.span, E0091, \"type parameter `{}` is unused\",\n-                             param.name())\n+                             param.name)\n                 .span_label(param.span, \"unused type parameter\")\n                 .emit();\n         }"}, {"sha": "9df8502461cc05128987b6673269c0541a13c487", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -632,7 +632,7 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         let param = &ast_generics.params[index];\n-        report_bivariance(tcx, param.span, param.name());\n+        report_bivariance(tcx, param.span, param.name);\n     }\n }\n "}, {"sha": "d53efe14600040e7650ecd6dfe087de99f2958bd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -898,7 +898,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| {\n         ty::GenericParamDef {\n-            name: param.name().as_interned_str(),\n+            name: param.name.as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(param.id),\n             pure_wrt_drop: param.pure_wrt_drop,\n@@ -914,9 +914,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut i = 0;\n     params.extend(ast_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamKind::Type { ref default, synthetic, .. } => {\n-            if param.name() == keywords::SelfType.name() {\n-                span_bug!(param.span,\n-                            \"`Self` should not be the name of a regular parameter\");\n+            if param.name == keywords::SelfType.name() {\n+                span_bug!(param.span,  \"`Self` should not be the name of a regular parameter\");\n             }\n \n             if !allow_defaults && default.is_some() {\n@@ -932,7 +931,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             let ty_param = ty::GenericParamDef {\n                 index: type_start + i as u32,\n-                name: param.name().as_interned_str(),\n+                name: param.name.as_interned_str(),\n                 def_id: tcx.hir.local_def_id(param.id),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Type {\n@@ -1438,7 +1437,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.id),\n             index,\n-            name: param.name().as_interned_str(),\n+            name: param.name.as_interned_str(),\n         }));\n         index += 1;\n \n@@ -1462,7 +1461,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for param in &ast_generics.params {\n         match param.kind {\n             GenericParamKind::Type { .. } => {\n-                let param_ty = ty::ParamTy::new(index, param.name().as_interned_str()).to_ty(tcx);\n+                let param_ty = ty::ParamTy::new(index, param.name.as_interned_str()).to_ty(tcx);\n                 index += 1;\n \n                 let sized = SizedByDefault::Yes;"}, {"sha": "cea29ab30dfe744944906dae285dde6dd74259dd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e8e718807d1925769bdcdd055c6d8de05f20ce/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c4e8e718807d1925769bdcdd055c6d8de05f20ce", "patch": "@@ -1678,13 +1678,13 @@ impl Clean<Lifetime> for hir::GenericParam {\n                         _ => panic!(),\n                     });\n                     let name = bounds.next().unwrap().name.name();\n-                    let mut s = format!(\"{}: {}\", self.name(), name);\n+                    let mut s = format!(\"{}: {}\", self.name, name);\n                     for bound in bounds {\n                         s.push_str(&format!(\" + {}\", bound.name.name()));\n                     }\n                     Lifetime(s)\n                 } else {\n-                    Lifetime(self.name().to_string())\n+                    Lifetime(self.name.to_string())\n                 }\n             }\n             _ => panic!(),\n@@ -1897,18 +1897,18 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n                         _ => panic!(),\n                     });\n                     let name = bounds.next().unwrap().name.name();\n-                    let mut s = format!(\"{}: {}\", self.name(), name);\n+                    let mut s = format!(\"{}: {}\", self.name, name);\n                     for bound in bounds {\n                         s.push_str(&format!(\" + {}\", bound.name.name()));\n                     }\n                     s\n                 } else {\n-                    self.name().to_string()\n+                    self.name.to_string()\n                 };\n                 (name, GenericParamDefKind::Lifetime)\n             }\n             hir::GenericParamKind::Type { ref default, synthetic, .. } => {\n-                (self.name().clean(cx), GenericParamDefKind::Type {\n+                (self.name.clean(cx), GenericParamDefKind::Type {\n                     did: cx.tcx.hir.local_def_id(self.id),\n                     bounds: self.bounds.clean(cx),\n                     default: default.clean(cx),"}]}