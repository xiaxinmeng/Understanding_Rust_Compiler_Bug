{"sha": "5696ea58946f077f815dc5f74b883cf948c7e1ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OTZlYTU4OTQ2ZjA3N2Y4MTVkYzVmNzRiODgzY2Y5NDhjN2UxZWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T16:54:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T16:54:58Z"}, "message": "rollup merge of #20157: alexcrichton/issue-20068", "tree": {"sha": "0ecc90224cb9e0d68bf276ebd447d61a6bd72a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecc90224cb9e0d68bf276ebd447d61a6bd72a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5696ea58946f077f815dc5f74b883cf948c7e1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5696ea58946f077f815dc5f74b883cf948c7e1ea", "html_url": "https://github.com/rust-lang/rust/commit/5696ea58946f077f815dc5f74b883cf948c7e1ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5696ea58946f077f815dc5f74b883cf948c7e1ea/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b46b18a274edc7f7fb60b490e5ebbb9c911462", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b46b18a274edc7f7fb60b490e5ebbb9c911462", "html_url": "https://github.com/rust-lang/rust/commit/71b46b18a274edc7f7fb60b490e5ebbb9c911462"}, {"sha": "76e3bc23388e268438e4318b0580149619a9d1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e3bc23388e268438e4318b0580149619a9d1ac", "html_url": "https://github.com/rust-lang/rust/commit/76e3bc23388e268438e4318b0580149619a9d1ac"}], "stats": {"total": 2932, "additions": 1699, "deletions": 1233}, "files": [{"sha": "ad1264828cb9679506e13084c82d97633b93009e", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -22,8 +22,8 @@ extern crate regex;\n use std::os;\n use std::io;\n use std::io::fs;\n-use std::str::FromStr;\n-use std::thunk::{Thunk};\n+use std::str::{FromStr, from_str};\n+use std::thunk::Thunk;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Codegen};"}, {"sha": "b8808eaf57d93e076b5b90829ecd0d45b5317202", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -450,6 +450,8 @@ them.\n \n ~~~no_run\n extern crate libc;\n+\n+use std::c_str::ToCStr;\n use std::ptr;\n \n #[link(name = \"readline\")]"}, {"sha": "a3a24abeb2e47be7dcf8d12257dc5e2c581ea1b4", "filename": "src/doc/guide.md", "status": "modified", "additions": 137, "deletions": 110, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -26,7 +26,7 @@ in the `$`s, they just indicate the start of each command):\n curl -L https://static.rust-lang.org/rustup.sh | sudo sh\n ```\n \n-If you're concerned about the [potential insecurity](http://curlpipesh.tumblr.com/) of using `curl | sudo sh`, \n+If you're concerned about the [potential insecurity](http://curlpipesh.tumblr.com/) of using `curl | sudo sh`,\n please keep reading and see our disclaimer below. And feel free to use a two-step version of the installation and examine our installation script:\n \n ```bash\n@@ -1106,13 +1106,21 @@ enum Ordering {\n ```\n \n An `Ordering` can only be _one_ of `Less`, `Equal`, or `Greater` at any given\n-time. Here's an example:\n+time.\n+\n+Because `Ordering` is provided by the standard library, we can use the `use`\n+keyword to use it in our code. We'll learn more about `use` later, but it's\n+used to bring names into scope.\n+\n+Here's an example of how to use `Ordering`:\n \n ```{rust}\n+use std::cmp::Ordering;\n+\n fn cmp(a: int, b: int) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n \n fn main() {\n@@ -1121,28 +1129,35 @@ fn main() {\n \n     let ordering = cmp(x, y); // ordering: Ordering\n \n-    if ordering == Less {\n+    if ordering == Ordering::Less {\n         println!(\"less\");\n-    } else if ordering == Greater {\n+    } else if ordering == Ordering::Greater {\n         println!(\"greater\");\n-    } else if ordering == Equal {\n+    } else if ordering == Ordering::Equal {\n         println!(\"equal\");\n     }\n }\n ```\n \n-`cmp` is a function that compares two things, and returns an `Ordering`. We\n-return either `Less`, `Greater`, or `Equal`, depending on if the two values\n-are greater, less, or equal.\n+There's a symbol here we haven't seen before: the double colon (`::`).\n+This is used to indicate a namesapce. In this case, `Ordering` lives in\n+the `cmp` submodule of the `std` module. We'll talk more about modules\n+later in the guide. For now, all you need to know is that you can `use`\n+things from the standard library if you need them.\n \n-The `ordering` variable has the type `Ordering`, and so contains one of the\n-three values. We can then do a bunch of `if`/`else` comparisons to check\n-which one it is.\n+Okay, let's talk about the actual code in the example. `cmp` is a function that\n+compares two things, and returns an `Ordering`. We return either\n+`Ordering::Less`, `Ordering::Greater`, or `Ordering::Equal`, depending on if\n+the two values are greater, less, or equal. Note that each variant of the\n+`enum` is namespaced under the `enum` itself: it's `Ordering::Greater` not\n+`Greater`.\n \n-However, repeated `if`/`else` comparisons get quite tedious. Rust has a feature\n-that not only makes them nicer to read, but also makes sure that you never\n-miss a case. Before we get to that, though, let's talk about another kind of\n-enum: one with values.\n+The `ordering` variable has the type `Ordering`, and so contains one of the\n+three values. We can then do a bunch of `if`/`else` comparisons to check which\n+one it is. However, repeated `if`/`else` comparisons get quite tedious. Rust\n+has a feature that not only makes them nicer to read, but also makes sure that\n+you never miss a case. Before we get to that, though, let's talk about another\n+kind of enum: one with values.\n \n This enum has two variants, one of which has a value:\n \n@@ -1175,18 +1190,19 @@ enum StringResult {\n     ErrorReason(String),\n }\n ```\n-Where a `StringResult` is either a `StringOK`, with the result of a computation, or an\n-`ErrorReason` with a `String` explaining what caused the computation to fail. These kinds of\n-`enum`s are actually very useful and are even part of the standard library.\n+Where a `StringResult` is either a `StringResult::StringOK`, with the result of\n+a computation, or an `StringResult::ErrorReason` with a `String` explaining\n+what caused the computation to fail. These kinds of `enum`s are actually very\n+useful and are even part of the standard library.\n \n-Enum variants are namespaced under the enum names. For example, here is an example of using\n-our `StringResult`:\n+Here is an example of using our `StringResult`:\n \n ```rust\n-# enum StringResult {\n-#     StringOK(String),\n-#     ErrorReason(String),\n-# }\n+enum StringResult {\n+    StringOK(String),\n+    ErrorReason(String),\n+}\n+\n fn respond(greeting: &str) -> StringResult {\n     if greeting == \"Hello\" {\n         StringResult::StringOK(\"Good morning!\".to_string())\n@@ -1196,10 +1212,7 @@ fn respond(greeting: &str) -> StringResult {\n }\n ```\n \n-Notice that we need both the enum name and the variant name: `StringResult::StringOK`, but\n-we didn't need to with `Ordering` \u2013 we just said `Greater` rather than `Ordering::Greater`.\n-There's a reason: the Rust prelude imports the variants of `Ordering` as well as the enum\n-itself. We can use the `use` keyword to do something similar with `StringResult`:\n+That's a lot of typing! We can use the `use` keyword to make it shorter:\n \n ```rust\n use StringResult::StringOK;\n@@ -1221,12 +1234,11 @@ fn respond(greeting: &str) -> StringResult {\n }\n ```\n \n-We'll learn more about `use` later, but it's used to bring names into scope. `use` declarations\n-must come before anything else, which looks a little strange in this example, since we `use`\n-the variants before we define them. Anyway, in the body of `respond`, we can just say `StringOK`\n-now, rather than the full `StringResult::StringOK`. Importing variants can be convenient, but can\n-also cause name conflicts, so do this with caution. It's considered good style to rarely import\n-variants for this reason.\n+`use` declarations must come before anything else, which looks a little strange in this example,\n+since we `use` the variants before we define them. Anyway, in the body of `respond`, we can just\n+say `StringOK` now, rather than the full `StringResult::StringOK`. Importing variants can be\n+convenient, but can also cause name conflicts, so do this with caution. It's considered good style\n+to rarely import variants for this reason.\n \n As you can see, `enum`s with values are quite a powerful tool for data representation,\n and can be even more useful when they're generic across types. Before we get to generics,\n@@ -1280,10 +1292,12 @@ for every possible value of `x`, and so our program will compile successfully.\n section on enums?\n \n ```{rust}\n+use std::cmp::Ordering;\n+\n fn cmp(a: int, b: int) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n \n fn main() {\n@@ -1292,11 +1306,11 @@ fn main() {\n \n     let ordering = cmp(x, y);\n \n-    if ordering == Less {\n+    if ordering == Ordering::Less {\n         println!(\"less\");\n-    } else if ordering == Greater {\n+    } else if ordering == Ordering::Greater {\n         println!(\"greater\");\n-    } else if ordering == Equal {\n+    } else if ordering == Ordering::Equal {\n         println!(\"equal\");\n     }\n }\n@@ -1305,20 +1319,22 @@ fn main() {\n We can re-write this as a `match`:\n \n ```{rust}\n+use std::cmp::Ordering;\n+\n fn cmp(a: int, b: int) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n \n fn main() {\n     let x = 5i;\n     let y = 10i;\n \n     match cmp(x, y) {\n-        Less    => println!(\"less\"),\n-        Greater => println!(\"greater\"),\n-        Equal   => println!(\"equal\"),\n+        Ordering::Less    => println!(\"less\"),\n+        Ordering::Greater => println!(\"greater\"),\n+        Ordering::Equal   => println!(\"equal\"),\n     }\n }\n ```\n@@ -1365,20 +1381,22 @@ side of a `let` binding or directly where an expression is used. We could\n also implement the previous line like this:\n \n ```{rust}\n+use std::cmp::Ordering;\n+\n fn cmp(a: int, b: int) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n \n fn main() {\n     let x = 5i;\n     let y = 10i;\n \n     println!(\"{}\", match cmp(x, y) {\n-        Less    => \"less\",\n-        Greater => \"greater\",\n-        Equal   => \"equal\",\n+        Ordering::Less    => \"less\",\n+        Ordering::Greater => \"greater\",\n+        Ordering::Equal   => \"equal\",\n     });\n }\n ```\n@@ -2139,6 +2157,7 @@ guess to the secret number:\n ```{rust,ignore}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2157,16 +2176,16 @@ fn main() {\n     println!(\"You guessed: {}\", input);\n \n     match cmp(input, secret_number) {\n-        Less    => println!(\"Too small!\"),\n-        Greater => println!(\"Too big!\"),\n-        Equal   => println!(\"You win!\"),\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n     }\n }\n \n fn cmp(a: int, b: int) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2193,6 +2212,7 @@ we wrote the `cmp` function! Let's change it to take `uint`s:\n ```{rust,ignore}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2211,16 +2231,16 @@ fn main() {\n     println!(\"You guessed: {}\", input);\n \n     match cmp(input, secret_number) {\n-        Less    => println!(\"Too small!\"),\n-        Greater => println!(\"Too big!\"),\n-        Equal   => println!(\"You win!\"),\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n     }\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2290,6 +2310,7 @@ Anyway, with us now converting our input to a number, our code looks like this:\n ```{rust,ignore}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2308,16 +2329,16 @@ fn main() {\n     println!(\"You guessed: {}\", input_num);\n \n     match cmp(input_num, secret_number) {\n-        Less    => println!(\"Too small!\"),\n-        Greater => println!(\"Too big!\"),\n-        Equal   => println!(\"You win!\"),\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n     }\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2339,6 +2360,7 @@ to do that. Try this code:\n ```{rust,no_run}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2366,16 +2388,16 @@ fn main() {\n     println!(\"You guessed: {}\", num);\n \n     match cmp(num, secret_number) {\n-        Less    => println!(\"Too small!\"),\n-        Greater => println!(\"Too big!\"),\n-        Equal   => println!(\"You win!\"),\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n     }\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2405,6 +2427,7 @@ code looks like this:\n ```{rust,no_run}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2432,16 +2455,16 @@ fn main() {\n     println!(\"You guessed: {}\", num);\n \n     match cmp(num, secret_number) {\n-        Less    => println!(\"Too small!\"),\n-        Greater => println!(\"Too big!\"),\n-        Equal   => println!(\"You win!\"),\n+        Ordering::Less    => println!(\"Too small!\"),\n+        Ordering::Greater => println!(\"Too big!\"),\n+        Ordering::Equal   => println!(\"You win!\"),\n     }\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2478,6 +2501,7 @@ Let's add that in:\n ```{rust,no_run}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2507,17 +2531,17 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Less    => println!(\"Too small!\"),\n-            Greater => println!(\"Too big!\"),\n-            Equal   => println!(\"You win!\"),\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => println!(\"You win!\"),\n         }\n     }\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2553,6 +2577,7 @@ suboptimal to say the least. First, let's actually quit when you win the game:\n ```{rust,no_run}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2582,9 +2607,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Less    => println!(\"Too small!\"),\n-            Greater => println!(\"Too big!\"),\n-            Equal   => {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => {\n                 println!(\"You win!\");\n                 return;\n             },\n@@ -2593,9 +2618,9 @@ fn main() {\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2608,6 +2633,7 @@ we don't want to quit, we just want to ignore it. Change that `return` to\n ```{rust,no_run}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2637,9 +2663,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Less    => println!(\"Too small!\"),\n-            Greater => println!(\"Too big!\"),\n-            Equal   => {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => {\n                 println!(\"You win!\");\n                 return;\n             },\n@@ -2648,9 +2674,9 @@ fn main() {\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -2686,6 +2712,7 @@ It was good for testing, but it kind of ruins the game. Here's our final source:\n ```{rust,no_run}\n use std::io;\n use std::rand;\n+use std::cmp::Ordering;\n \n fn main() {\n     println!(\"Guess the number!\");\n@@ -2713,9 +2740,9 @@ fn main() {\n         println!(\"You guessed: {}\", num);\n \n         match cmp(num, secret_number) {\n-            Less    => println!(\"Too small!\"),\n-            Greater => println!(\"Too big!\"),\n-            Equal   => {\n+            Ordering::Less    => println!(\"Too small!\"),\n+            Ordering::Greater => println!(\"Too big!\"),\n+            Ordering::Equal   => {\n                 println!(\"You win!\");\n                 return;\n             },\n@@ -2724,9 +2751,9 @@ fn main() {\n }\n \n fn cmp(a: uint, b: uint) -> Ordering {\n-    if a < b { Less }\n-    else if a > b { Greater }\n-    else { Equal }\n+    if a < b { Ordering::Less }\n+    else if a > b { Ordering::Greater }\n+    else { Ordering::Equal }\n }\n ```\n \n@@ -5217,7 +5244,7 @@ as you can see, there's no overhead of deciding which version to call here,\n hence 'statically dispatched'. The downside is that we have two copies of\n the same function, so our binary is a little bit larger.\n \n-# Threads \n+# Threads\n \n Concurrency and parallelism are topics that are of increasing interest to a\n broad subsection of software developers. Modern computers are often multi-core,"}, {"sha": "7b3a0b74b8a5ce274c0e1b5a2271c429c38b4797", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -4149,11 +4149,11 @@ Unwinding the stack of a thread is done by the thread itself, on its own control\n stack. If a value with a destructor is freed during unwinding, the code for the\n destructor is run, also on the thread's control stack. Running the destructor\n code causes a temporary transition to a *running* state, and allows the\n-destructor code to cause any subsequent state transitions. The original thread \n+destructor code to cause any subsequent state transitions. The original thread\n of unwinding and panicking thereby may suspend temporarily, and may involve\n (recursive) unwinding of the stack of a failed destructor. Nonetheless, the\n outermost unwinding activity will continue until the stack is unwound and the\n-thread transitions to the *dead* state. There is no way to \"recover\" from thread \n+thread transitions to the *dead* state. There is no way to \"recover\" from thread\n panics. Once a thread has temporarily suspended its unwinding in the *panicking*\n state, a panic occurring from within this destructor results in *hard* panic.\n A hard panic currently results in the process aborting."}, {"sha": "f748c8ad1eb2a24b10628eb0a1276e84a744a3d1", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -26,6 +26,7 @@\n //! [dir_graph]: http://en.wikipedia.org/wiki/Directed_graph\n //!\n //! ```\n+//! use std::cmp::Ordering;\n //! use std::collections::BinaryHeap;\n //! use std::uint;\n //!\n@@ -151,6 +152,7 @@\n use core::prelude::*;\n \n use core::default::Default;\n+use core::iter::FromIterator;\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n "}, {"sha": "0b3de113042112ca2d34f79c8b64e5e736a49eb5", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -82,17 +82,19 @@\n \n use core::prelude::*;\n \n+use core::cmp::Ordering;\n use core::cmp;\n use core::default::Default;\n use core::fmt;\n+use core::hash;\n use core::iter::{Cloned, Chain, Enumerate, Repeat, Skip, Take, repeat};\n-use core::iter;\n+use core::iter::{mod, FromIterator, RandomAccessIterator};\n use core::num::Int;\n-use core::slice;\n+use core::ops::Index;\n+use core::slice::{Iter, IterMut};\n use core::{u8, u32, uint};\n use bitv_set; //so meta\n \n-use core::hash;\n use Vec;\n \n type Blocks<'a> = Cloned<slice::Iter<'a, u32>>;\n@@ -2507,7 +2509,7 @@ mod tests {\n \n #[cfg(test)]\n mod bitv_bench {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n     use std::rand;\n     use std::rand::Rng;\n     use std::u32;\n@@ -3002,7 +3004,7 @@ mod bitv_set_test {\n \n #[cfg(test)]\n mod bitv_set_bench {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n     use std::rand;\n     use std::rand::Rng;\n     use std::u32;"}, {"sha": "6d41883dc8d9ea40c2400ce611206811dba27e55", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -19,21 +19,23 @@ pub use self::Entry::*;\n \n use core::prelude::*;\n \n-use self::StackOp::*;\n-use super::node::{mod, Node, Found, GoDown};\n-use super::node::{Traversal, MutTraversal, MoveTraversal};\n-use super::node::TraversalItem::{mod, Elem, Edge};\n-use super::node::ForceResult::{Leaf, Internal};\n use core::borrow::BorrowFrom;\n-use std::hash::{Writer, Hash};\n+use core::cmp::Ordering;\n use core::default::Default;\n-use core::{iter, fmt, mem};\n use core::fmt::Show;\n-use core::iter::Map;\n+use core::hash::{Writer, Hash};\n+use core::iter::{Map, FromIterator};\n+use core::ops::{Index, IndexMut};\n+use core::{iter, fmt, mem};\n \n use ring_buf::RingBuf;\n \n use self::Continuation::{Continue, Finished};\n+use self::StackOp::*;\n+use super::node::ForceResult::{Leaf, Internal};\n+use super::node::TraversalItem::{mod, Elem, Edge};\n+use super::node::{Traversal, MutTraversal, MoveTraversal};\n+use super::node::{mod, Node, Found, GoDown};\n \n // FIXME(conventions): implement bounded iterators\n \n@@ -501,6 +503,7 @@ mod stack {\n     use core::prelude::*;\n     use core::kinds::marker;\n     use core::mem;\n+    use core::ops::{Deref, DerefMut};\n     use super::BTreeMap;\n     use super::super::node::{mod, Node, Fit, Split, Internal, Leaf};\n     use super::super::node::handle;"}, {"sha": "053563683653b0b0fe28a2446130e47795c5e246", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -18,10 +18,12 @@ pub use self::TraversalItem::*;\n \n use core::prelude::*;\n \n-use core::{slice, mem, ptr, cmp, num, raw};\n-use core::iter::Zip;\n use core::borrow::BorrowFrom;\n+use core::cmp::Ordering::{Greater, Less, Equal};\n+use core::iter::Zip;\n+use core::ops::{Deref, DerefMut};\n use core::ptr::Unique;\n+use core::{slice, mem, ptr, cmp, num, raw};\n use alloc::heap;\n \n /// Represents the result of an Insertion: either the item fit, or the node had to split"}, {"sha": "3e8988530e63e147302f2f7b38ae6860bc6b791c", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,13 +13,16 @@\n \n use core::prelude::*;\n \n-use btree_map::{BTreeMap, Keys};\n-use std::hash::Hash;\n use core::borrow::BorrowFrom;\n+use core::cmp::Ordering::{mod, Less, Greater, Equal};\n use core::default::Default;\n-use core::fmt;\n-use core::iter::{Peekable, Map};\n use core::fmt::Show;\n+use core::fmt;\n+use core::hash::Hash;\n+use core::iter::{Peekable, Map, FromIterator};\n+use core::ops::{BitOr, BitAnd, BitXor, Sub};\n+\n+use btree_map::{BTreeMap, Keys};\n \n // FIXME(conventions): implement bounded iterators\n "}, {"sha": "68acbfcb3c3c80d412811d4341e25db7887d59b6", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -22,12 +22,13 @@\n use core::prelude::*;\n \n use alloc::boxed::Box;\n+use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n-use core::iter;\n+use core::hash::{Writer, Hash};\n+use core::iter::{mod, FromIterator};\n use core::mem;\n use core::ptr;\n-use std::hash::{Writer, Hash};\n \n /// A doubly-linked list.\n #[stable]"}, {"sha": "ea3d8659f54a471706edc038ffa5174a7dd0f885", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -16,6 +16,8 @@\n use core::prelude::*;\n use core::fmt;\n use core::num::Int;\n+use core::iter::FromIterator;\n+use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n "}, {"sha": "e4c9e51a8455b46f4eb7e31e312527d8056fac39", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -14,14 +14,16 @@\n \n use core::prelude::*;\n \n+use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n-use core::iter;\n-use core::raw::Slice as RawSlice;\n-use core::ptr;\n+use core::iter::{mod, FromIterator, RandomAccessIterator};\n use core::kinds::marker;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n+use core::ops::{Index, IndexMut};\n+use core::ptr;\n+use core::raw::Slice as RawSlice;\n \n use std::hash::{Writer, Hash};\n use std::cmp;"}, {"sha": "9e2b4b77910e225434e2c24ae955479bef2561a4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -89,15 +89,19 @@\n \n use alloc::boxed::Box;\n use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n-use core::cmp;\n-use core::iter::{range_step, MultiplicativeIterator};\n+use core::clone::Clone;\n+use core::cmp::Ordering::{mod, Greater, Less};\n+use core::cmp::{mod, Ord};\n+use core::iter::{Iterator, IteratorExt, IteratorCloneExt};\n+use core::iter::{range, range_step, MultiplicativeIterator};\n use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n-use core::ops::{FnMut,SliceMut};\n-use core::prelude::{Clone, Greater, Iterator, IteratorExt, Less, None, Option};\n-use core::prelude::{Ord, Ordering, PtrExt, Some, range, IteratorCloneExt, Result};\n+use core::ops::{FnMut, SliceMut};\n+use core::option::Option::{mod, Some, None};\n+use core::ptr::PtrExt;\n use core::ptr;\n+use core::result::Result;\n use core::slice as core_slice;\n use self::Direction::*;\n "}, {"sha": "ae038a9f0891f4b800a02cd0c025388b43ee12e2", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,12 +17,14 @@\n use core::prelude::*;\n \n use core::borrow::{Cow, IntoCow};\n+use core::cmp::Equiv;\n use core::default::Default;\n use core::fmt;\n use core::hash;\n+use core::iter::FromIterator;\n use core::mem;\n+use core::ops::{mod, Deref, Add};\n use core::ptr;\n-use core::ops;\n use core::raw::Slice as RawSlice;\n use unicode::str as unicode_str;\n use unicode::str::Utf16Item;"}, {"sha": "4b7aa896870527b3419138d6e1b00b7e259d5852", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -50,14 +50,16 @@ use alloc::boxed::Box;\n use alloc::heap::{EMPTY, allocate, reallocate, deallocate};\n use core::borrow::{Cow, IntoCow};\n use core::cmp::max;\n+use core::cmp::{Equiv, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::hash::{mod, Hash};\n-use core::iter::repeat;\n+use core::iter::{repeat, FromIterator};\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n use core::nonzero::NonZero;\n use core::num::{Int, UnsignedInt};\n+use core::ops::{Index, IndexMut, Deref, Add};\n use core::ops;\n use core::ptr;\n use core::raw::Slice as RawSlice;"}, {"sha": "172fd56ed3962bca413debf9c4256224dedadb16", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,12 +15,14 @@\n \n use core::prelude::*;\n \n+use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n use core::hash::{Hash, Writer};\n+use core::iter::{Enumerate, FilterMap, Map, FromIterator};\n use core::iter;\n-use core::iter::{Enumerate, FilterMap, Map};\n use core::mem::replace;\n+use core::ops::{Index, IndexMut};\n \n use {vec, slice};\n use vec::Vec;"}, {"sha": "38906892a339f24a3c5ab81b0ab470c5929ec202", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -125,11 +125,12 @@ impl Ordering {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::cmp::Ordering::{Less, Equal, Greater};\n+    ///\n     /// assert_eq!(Less.reverse(), Greater);\n     /// assert_eq!(Equal.reverse(), Equal);\n     /// assert_eq!(Greater.reverse(), Less);\n     ///\n-    ///\n     /// let mut data: &mut [_] = &mut [2u, 10, 5, 8];\n     ///\n     /// // sort the array from largest to smallest.\n@@ -170,6 +171,8 @@ pub trait Ord for Sized?: Eq + PartialOrd<Self> {\n     /// the expression `self <operator> other` if true.  For example:\n     ///\n     /// ```\n+    /// use std::cmp::Ordering::{Less, Equal, Greater};\n+    ///\n     /// assert_eq!( 5u.cmp(&10), Less);     // because 5 < 10\n     /// assert_eq!(10u.cmp(&5),  Greater);  // because 10 > 5\n     /// assert_eq!( 5u.cmp(&5),  Equal);    // because 5 == 5"}, {"sha": "15016562699d6a800dff9c790ff5fac228fb3799", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -25,6 +25,8 @@\n //! demonstrates adding and subtracting two `Point`s.\n //!\n //! ```rust\n+//! use std::ops::{Add, Sub};\n+//!\n //! #[deriving(Show)]\n //! struct Point {\n //!     x: int,\n@@ -68,13 +70,13 @@ use option::Option::{mod, Some, None};\n /// struct HasDrop;\n ///\n /// impl Drop for HasDrop {\n-///   fn drop(&mut self) {\n-///       println!(\"Dropping!\");\n-///   }\n+///     fn drop(&mut self) {\n+///         println!(\"Dropping!\");\n+///     }\n /// }\n ///\n /// fn main() {\n-///   let _x = HasDrop;\n+///     let _x = HasDrop;\n /// }\n /// ```\n #[lang=\"drop\"]\n@@ -91,6 +93,8 @@ pub trait Drop {\n /// calling `add`, and therefore, `main` prints `Adding!`.\n ///\n /// ```rust\n+/// use std::ops::Add;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -130,6 +134,8 @@ add_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `sub`, and therefore, `main` prints `Subtracting!`.\n ///\n /// ```rust\n+/// use std::ops::Sub;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -169,6 +175,8 @@ sub_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `mul`, and therefore, `main` prints `Multiplying!`.\n ///\n /// ```rust\n+/// use std::ops::Mul;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -208,6 +216,8 @@ mul_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `div`, and therefore, `main` prints `Dividing!`.\n ///\n /// ```\n+/// use std::ops::Div;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -247,6 +257,8 @@ div_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n /// calling `rem`, and therefore, `main` prints `Remainder-ing!`.\n ///\n /// ```\n+/// use std::ops::Rem;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -300,6 +312,8 @@ rem_float_impl! { f64, fmod }\n /// `neg`, and therefore, `main` prints `Negating!`.\n ///\n /// ```\n+/// use std::ops::Neg;\n+///\n /// struct Foo;\n ///\n /// impl Copy for Foo {}\n@@ -356,6 +370,8 @@ neg_uint_impl! { u64, i64 }\n /// `not`, and therefore, `main` prints `Not-ing!`.\n ///\n /// ```\n+/// use std::ops::Not;\n+///\n /// struct Foo;\n ///\n /// impl Copy for Foo {}\n@@ -396,6 +412,8 @@ not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitand`, and therefore, `main` prints `Bitwise And-ing!`.\n ///\n /// ```\n+/// use std::ops::BitAnd;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -435,6 +453,8 @@ bitand_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n ///\n /// ```\n+/// use std::ops::BitOr;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -474,6 +494,8 @@ bitor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n ///\n /// ```\n+/// use std::ops::BitXor;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -513,6 +535,8 @@ bitxor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shl`, and therefore, `main` prints `Shifting left!`.\n ///\n /// ```\n+/// use std::ops::Shl;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -554,6 +578,8 @@ shl_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `shr`, and therefore, `main` prints `Shifting right!`.\n ///\n /// ```\n+/// use std::ops::Shr;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -594,6 +620,8 @@ shr_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n /// calling `index`, and therefore, `main` prints `Indexing!`.\n ///\n /// ```\n+/// use std::ops::Index;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -623,6 +651,8 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n /// calling `index_mut`, and therefore, `main` prints `Indexing!`.\n ///\n /// ```\n+/// use std::ops::IndexMut;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -652,6 +682,8 @@ pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n /// calling `slice_to`, and therefore, `main` prints `Slicing!`.\n ///\n /// ```ignore\n+/// use std::ops::Slice;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -699,6 +731,8 @@ pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n /// calling `slice_from_mut`, and therefore, `main` prints `Slicing!`.\n ///\n /// ```ignore\n+/// use std::ops::SliceMut;\n+///\n /// #[deriving(Copy)]\n /// struct Foo;\n ///\n@@ -827,6 +861,8 @@ pub struct RangeTo<Idx> {\n /// struct.\n ///\n /// ```\n+/// use std::ops::Deref;\n+///\n /// struct DerefExample<T> {\n ///     value: T\n /// }\n@@ -865,6 +901,8 @@ impl<'a, Sized? T> Deref<T> for &'a mut T {\n /// struct.\n ///\n /// ```\n+/// use std::ops::{Deref, DerefMut};\n+///\n /// struct DerefMutExample<T> {\n ///     value: T\n /// }"}, {"sha": "210850be13a8e960a58e82cce392afc09ca44dd5", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -30,39 +30,24 @@\n \n // Reexported core operators\n pub use kinds::{Copy, Send, Sized, Sync};\n-pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n-pub use ops::{BitAnd, BitOr, BitXor};\n-pub use ops::{Drop, Deref, DerefMut};\n-pub use ops::{Shl, Shr};\n-pub use ops::{Index, IndexMut};\n-pub use ops::{Slice, SliceMut};\n-pub use ops::{Fn, FnMut, FnOnce};\n+pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions\n pub use iter::range;\n pub use mem::drop;\n-pub use str::from_str;\n \n // Reexported types and traits\n \n pub use char::Char;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-pub use cmp::{Ordering, Equiv};\n-pub use cmp::Ordering::{Less, Equal, Greater};\n-pub use iter::{FromIterator, Extend, IteratorExt};\n-pub use iter::{Iterator, DoubleEndedIterator, DoubleEndedIteratorExt, RandomAccessIterator};\n-pub use iter::{IteratorCloneExt, CloneIteratorExt, IteratorPairExt};\n-pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n-pub use num::{ToPrimitive, FromPrimitive};\n-pub use option::Option;\n-pub use option::Option::{Some, None};\n+pub use iter::{Extend, IteratorExt};\n+pub use iter::{Iterator, DoubleEndedIterator, DoubleEndedIteratorExt};\n+pub use iter::{IteratorCloneExt, CloneIteratorExt};\n+pub use iter::{IteratorOrdExt, ExactSizeIterator, IteratorPairExt};\n+pub use option::Option::{mod, Some, None};\n pub use ptr::{PtrExt, MutPtrExt};\n-pub use result::Result;\n-pub use result::Result::{Ok, Err};\n-pub use str::{Str, StrExt};\n-pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n-pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n-pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n-pub use slice::{PartialEqSliceExt, OrdSliceExt};\n+pub use result::Result::{mod, Ok, Err};\n pub use slice::{AsSlice, SliceExt};\n+pub use slice::{PartialEqSliceExt, OrdSliceExt};\n+pub use str::{Str, StrExt};"}, {"sha": "ad2323296d97f5dcfb8d24700e4b852e1a33c7d8", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -32,35 +32,6 @@\n //! * `PartialOrd`\n //! * `Ord`\n //! * `Default`\n-//!\n-//! # Examples\n-//!\n-//! Using methods:\n-//!\n-//! ```\n-//! #[allow(deprecated)]\n-//! # fn main() {\n-//! let pair = (\"pi\", 3.14f64);\n-//! assert_eq!(pair.val0(), \"pi\");\n-//! assert_eq!(pair.val1(), 3.14f64);\n-//! # }\n-//! ```\n-//!\n-//! Using traits implemented for tuples:\n-//!\n-//! ```\n-//! use std::default::Default;\n-//!\n-//! let a = (1i, 2i);\n-//! let b = (3i, 4i);\n-//! assert!(a != b);\n-//!\n-//! let c = b.clone();\n-//! assert!(b == c);\n-//!\n-//! let d : (u32, f32) = Default::default();\n-//! assert_eq!(d, (0u32, 0.0f32));\n-//! ```\n \n #![stable]\n "}, {"sha": "992c99f1f9fe0a609ee8e12a542ff96f0a062a92", "filename": "src/libcoretest/cmp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcmp.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::{ partial_min, partial_max };\n+use core::cmp::{partial_min, partial_max};\n+use core::cmp::Ordering::{Less, Greater, Equal};\n \n #[test]\n fn test_int_totalord() {"}, {"sha": "e409dc61510f6e3ecc5a0a9f37271eaa62bd80ab", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,6 +17,7 @@ mod tests {\n     use core::int;\n     use core::num::{FromStrRadix, Int, SignedInt};\n     use core::str::from_str;\n+    use core::ops::{Shl, Shr, Not, BitXor, BitAnd, BitOr};\n     use num;\n \n     #[test]"}, {"sha": "82e91c5b7120a6af93dc5812ba68e01e8f2357cb", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,6 +13,7 @@ use core::fmt::Show;\n use core::num::{NumCast, cast};\n use core::ops::{Add, Sub, Mul, Div, Rem};\n use core::kinds::Copy;\n+use std::str::from_str;\n \n mod int_macros;\n mod i8;\n@@ -54,6 +55,7 @@ mod test {\n     use core::option::Option::{Some, None};\n     use core::num::Float;\n     use core::num::from_str_radix;\n+    use core::str::from_str;\n \n     #[test]\n     fn from_str_issue7588() {"}, {"sha": "2311c19d5573ae0200d571f7c922ff15a237f2a8", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -16,6 +16,7 @@ mod tests {\n     use core::$T_i::*;\n     use core::num::Int;\n     use num;\n+    use core::ops::{BitOr, BitAnd, BitXor, Shl, Shr, Not};\n \n     #[test]\n     fn test_overflows() {"}, {"sha": "fc02f46724fb8a5c466a968b89af00434da7ac1a", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::str::from_str;\n+\n #[test]\n fn test_bool_from_str() {\n     assert_eq!(from_str::<bool>(\"true\"), Some(true));"}, {"sha": "c3bc38a6614b8ce270ccd214cfddb212d0581151", "filename": "src/libcoretest/tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibcoretest%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ftuple.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cmp::Ordering::{Equal, Less, Greater};\n+\n #[test]\n fn test_clone() {\n     let a = (1i, \"2\");"}, {"sha": "01e55fb2edd9a9e58ab807e543d55fbf39378f25", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -47,6 +47,7 @@\n //! which is cyclic.\n //!\n //! ```rust\n+//! use std::borrow::IntoCow;\n //! use graphviz as dot;\n //!\n //! type Nd = int;\n@@ -146,6 +147,7 @@\n //! entity `&sube`).\n //!\n //! ```rust\n+//! use std::borrow::IntoCow;\n //! use graphviz as dot;\n //!\n //! type Nd = uint;\n@@ -201,6 +203,7 @@\n //! Hasse-diagram for the subsets of the set `{x, y}`.\n //!\n //! ```rust\n+//! use std::borrow::IntoCow;\n //! use graphviz as dot;\n //!\n //! type Nd<'a> = (uint, &'a str);\n@@ -273,6 +276,7 @@\n \n pub use self::LabelText::*;\n \n+use std::borrow::IntoCow;\n use std::io;\n use std::str::CowString;\n use std::vec::CowVec;\n@@ -586,6 +590,7 @@ mod tests {\n     use super::{Nodes, Edges, GraphWalk, render};\n     use std::io::IoResult;\n     use std::str;\n+    use std::borrow::IntoCow;\n \n     /// each node is an index in a vector in the graph.\n     type Node = uint;"}, {"sha": "573f0926e29150035e684539f5b3bb2d995faa02", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,8 +12,10 @@\n \n pub use self::MaybeOwnedVector::*;\n \n+use std::cmp::{Equiv, Ordering};\n use std::default::Default;\n use std::fmt;\n+use std::iter::FromIterator;\n use std::path::BytesContainer;\n use std::slice;\n \n@@ -125,7 +127,7 @@ impl<'a,T> FromIterator<T> for MaybeOwnedVector<'a,T> {\n     fn from_iter<I:Iterator<T>>(iterator: I) -> MaybeOwnedVector<'a,T> {\n         // If we are building from scratch, might as well build the\n         // most flexible variant.\n-        Growable(FromIterator::from_iter(iterator))\n+        Growable(iterator.collect())\n     }\n }\n "}, {"sha": "8e6c7de305f823edc50450f7055d633aeb7f14e8", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -206,7 +206,7 @@ impl Rand for ChaChaRng {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use core::iter::order;\n     use {Rng, SeedableRng};"}, {"sha": "981b0eeee53e0c55187dcbe2409ab26c3fefde29", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -94,7 +94,7 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use distributions::{Sample, IndependentSample};\n     use super::Exp;\n@@ -124,7 +124,7 @@ mod test {\n mod bench {\n     extern crate test;\n \n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use self::test::Bencher;\n     use std::mem::size_of;"}, {"sha": "378029d1f9b377df231d85969c8d23f6cb5a074e", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -323,7 +323,7 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use distributions::{Sample, IndependentSample};\n     use super::{ChiSquared, StudentT, FisherF};\n@@ -385,7 +385,7 @@ mod test {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n     use self::test::Bencher;\n     use std::mem::size_of;\n     use distributions::IndependentSample;"}, {"sha": "d0123d9c76c997f8206341d6125f8e817fc3fb23", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -258,7 +258,7 @@ fn ziggurat<R: Rng, P, Z>(\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use {Rng, Rand};\n     use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};"}, {"sha": "543e236f96dd2ab0c451b4120b35cd54696a1f33", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -160,7 +160,7 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use distributions::{Sample, IndependentSample};\n     use super::{Normal, LogNormal};\n@@ -200,7 +200,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n     use self::test::Bencher;\n     use std::mem::size_of;\n     use distributions::{Sample};"}, {"sha": "558fa2012567591e312d39a657e2f9480bc0337c", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -164,7 +164,7 @@ float_impl! { f64 }\n #[cfg(test)]\n mod tests {\n     use std::num::Int;\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n     use distributions::{Sample, IndependentSample};\n     use super::Range;\n "}, {"sha": "1ea4784407592d44b95bbe4dea2da79619cf9db8", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -487,7 +487,7 @@ impl Rand for Isaac64Rng {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use core::iter::order;\n     use {Rng, SeedableRng};"}, {"sha": "c331807c1b9d3d0acb3175635a1e1000cbbe31bc", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -214,7 +214,7 @@ impl<T:Rand> Rand for Option<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n     use std::rand::{Rng, thread_rng, Open01, Closed01};\n \n     struct ConstantRng(u64);"}, {"sha": "46371d427e63fba95ad0cd60f01f00d9d5102fee", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -149,7 +149,7 @@ impl Default for ReseedWithDefault {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use std::prelude::v1::*;\n \n     use core::iter::order;\n     use super::{ReseedingRng, ReseedWithDefault};"}, {"sha": "3171966a596dbad5e8167493154847818c8e6296", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,7 @@\n pub use self::NamesIter::*;\n pub use self::Regex::*;\n \n+use std::borrow::IntoCow;\n use std::collections::HashMap;\n use std::fmt;\n use std::str::CowString;"}, {"sha": "603ca57d15d5bc010ae1575ca2a5cb28889c0b2d", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -37,6 +37,7 @@ pub use self::MatchKind::*;\n pub use self::StepState::*;\n \n use std::cmp;\n+use std::cmp::Ordering::{mod, Less, Equal, Greater};\n use std::mem;\n use std::iter::repeat;\n use std::slice::SliceExt;"}, {"sha": "5e74b90dba34cbeb2f1c694ebb7e8c90cf61b900", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -36,10 +36,11 @@ use util::ppaux::{ty_to_string};\n use util::nodemap::{FnvHashMap, NodeSet};\n use lint::{Context, LintPass, LintArray};\n \n-use std::{cmp, slice};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::num::SignedInt;\n+use std::{cmp, slice};\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n+\n use syntax::{abi, ast, ast_map};\n use syntax::ast_util::is_shift_binop;\n use syntax::attr::{mod, AttrMetaMethods};"}, {"sha": "70325294743e8bb658e2f79ee2a2836be5337a19", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -32,13 +32,15 @@ use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{mod, Ty};\n use middle::astencode::vtable_decoder_helpers;\n \n+use std::collections::HashMap;\n use std::hash::Hash;\n use std::hash;\n use std::io::extensions::u64_from_be_bytes;\n use std::io;\n-use std::collections::hash_map::HashMap;\n+use std::num::FromPrimitive;\n use std::rc::Rc;\n use std::str;\n+\n use rbml::reader;\n use rbml;\n use serialize::Decodable;"}, {"sha": "2d3ff95ffa66e64b2085d3289d6e832201740229", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -25,7 +25,6 @@ use middle::ty::{mod, AsPredicate, Ty};\n \n use std::rc::Rc;\n use std::str;\n-use std::string::String;\n use syntax::abi;\n use syntax::ast;\n use syntax::parse::token;"}, {"sha": "06fef66c1e0033609f053b0e8ca3b6190f3c2c9f", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,7 +11,9 @@\n /// This module provides linkage between rustc::middle::graph and\n /// libgraphviz traits.\n \n-/// For clarity, rename the graphviz crate locally to dot.\n+use std::borrow::IntoCow;\n+\n+// For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n use syntax::ast;"}, {"sha": "d16224ec5b8ac19c79b2db17bb51b382bd96b25d", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -24,8 +24,7 @@ use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;\n use std::fmt;\n-use std::iter::AdditiveIterator;\n-use std::iter::{range_inclusive, repeat};\n+use std::iter::{range_inclusive, AdditiveIterator, FromIterator, repeat};\n use std::num::Float;\n use std::slice;\n use syntax::ast::{mod, DUMMY_NODE_ID, NodeId, Pat};"}, {"sha": "9fc5cb03353138b46ef8dba1d5717fd4b6532da5", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -27,8 +27,8 @@ use syntax::ptr::P;\n use syntax::visit::{mod, Visitor};\n use syntax::{ast_map, ast_util, codemap};\n \n-use std::rc::Rc;\n use std::collections::hash_map::Entry::Vacant;\n+use std::rc::Rc;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "6ac1c5470cc755f2abda790cc38f69ff7421bebb", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -33,8 +33,9 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n use std::cell::{Cell, RefCell};\n-use std::u32;\n+use std::cmp::Ordering::{mod, Less, Greater, Equal};\n use std::iter::repeat;\n+use std::u32;\n use syntax::ast;\n \n mod doc;"}, {"sha": "78fabcd588a28353ea6021f9535895089971f516", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -36,6 +36,7 @@ use syntax::visit::Visitor;\n use syntax::visit;\n \n use std::iter::Enumerate;\n+use std::num::FromPrimitive;\n use std::slice;\n \n // The actual lang items defined come at the end of this file in one handy table."}, {"sha": "07ff0ed67a64e7ac5e0e2b88b2547d82bae54553", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -69,7 +69,7 @@ use util::nodemap::{FnvHashMap};\n use arena::TypedArena;\n use std::borrow::BorrowFrom;\n use std::cell::{Cell, RefCell};\n-use std::cmp;\n+use std::cmp::{mod, Ordering};\n use std::fmt::{mod, Show};\n use std::hash::{Hash, sip, Writer};\n use std::mem;"}, {"sha": "f6f46017f37b95afa9b16aa91f7c3c1b789d93e6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -394,6 +394,7 @@ macro_rules! cgoptions {\n \n     mod cgsetters {\n         use super::{CodegenOptions, Passes, SomePasses, AllPasses};\n+        use std::str::from_str;\n \n         $(\n             pub fn $opt(cg: &mut CodegenOptions, v: Option<&str>) -> bool {"}, {"sha": "8d3aa397f306163063c5aeee492f0f05b2297eba", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> MoveErrorCollector<'tcx> {\n     }\n \n     pub fn report_potential_errors<'a>(&self, bccx: &BorrowckCtxt<'a, 'tcx>) {\n-        report_move_errors(bccx, self.errors.borrow().deref())\n+        report_move_errors(bccx, &*self.errors.borrow())\n     }\n }\n "}, {"sha": "ac6b962d6470448e43958c0eb41109df4d5732c3", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -24,6 +24,7 @@ use rustc::middle::cfg::{CFGIndex};\n use rustc::middle::dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n use rustc::middle::dataflow;\n use std::rc::Rc;\n+use std::borrow::IntoCow;\n \n #[deriving(Show, Copy)]\n pub enum Variant {"}, {"sha": "f3013d2066c3dcab9ebfc5b39cd3ce86f0fa3716", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -54,6 +54,8 @@ use rustc::metadata;\n use rustc::DIAGNOSTICS;\n \n use std::any::AnyRefExt;\n+use std::cmp::Ordering::Equal;\n+use std::comm::channel;\n use std::io;\n use std::iter::repeat;\n use std::os;"}, {"sha": "53992d4567a34915148e2c9e87957e05cbc81517", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,8 +13,9 @@\n use libc;\n use ArchiveRef;\n \n-use std::raw;\n+use std::c_str::ToCStr;\n use std::mem;\n+use std::raw;\n \n pub struct ArchiveRO {\n     ptr: ArchiveRef,"}, {"sha": "8553a209005134120fe5dfa1cbd450bd689064cd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -61,8 +61,9 @@ use syntax::parse::token::{mod, special_idents};\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::visit::{mod, Visitor};\n \n-use std::rc::Rc;\n use std::mem::replace;\n+use std::ops::{Deref, DerefMut};\n+use std::rc::Rc;\n \n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace."}, {"sha": "b3d0d30726c5df9c09d9554406cf8c31ba5dcebb", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,6 +17,8 @@\n // `use` directives.\n //\n \n+use std::ops::{Deref, DerefMut};\n+\n use Resolver;\n use Namespace::{TypeNS, ValueNS};\n "}, {"sha": "4f314291da62810f02f318daac632072f3da94c8", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -27,6 +27,7 @@ use rustc::middle::def::Export;\n use syntax::ast;\n use syntax::parse::token;\n \n+use std::ops::{Deref, DerefMut};\n use std::rc::Rc;\n \n struct ExportRecorder<'a, 'b:'a, 'tcx:'b> {"}, {"sha": "7cf4bafe032e0728d0cde8ba8ebe8415e49faa29", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -20,6 +20,7 @@ use rustc::util::common::time;\n use libc;\n use flate;\n \n+use std::c_str::ToCStr;\n use std::iter;\n use std::mem;\n use std::num::Int;"}, {"sha": "f74f0abc18625230da46ca3934ba0586b7aa3bae", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -23,6 +23,7 @@ use syntax::diagnostic;\n use syntax::diagnostic::{Emitter, Handler, Level, mk_handler};\n \n use std::c_str::{ToCStr, CString};\n+use std::comm::channel;\n use std::io::Command;\n use std::io::fs;\n use std::iter::Unfold;"}, {"sha": "b877a771bbc6ce80ebc0b6bca809f0cdf0fd08cc", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -1202,8 +1202,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                         let glob_map = &self.analysis.glob_map;\n                         let glob_map = glob_map.as_ref().unwrap();\n                         if glob_map.contains_key(&id) {\n-                            let names = glob_map.index(&id);\n-                            for n in names.iter() {\n+                            for n in glob_map[id].iter() {\n                                 if name_string.len() > 0 {\n                                     name_string.push_str(\", \");\n                                 }"}, {"sha": "97f0b92a290f839ab9871f6819dce94038bef53f", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -20,7 +20,7 @@ use trans::machine::llalign_of_pref;\n use trans::type_::Type;\n use util::nodemap::FnvHashMap;\n use libc::{c_uint, c_char};\n-use std::string::String;\n+use std::c_str::ToCStr;\n use syntax::codemap::Span;\n \n pub struct Builder<'a, 'tcx: 'a> {"}, {"sha": "99dc971ed945d15e4bdc7025f175cb08062a78a4", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -26,6 +26,7 @@ use trans::type_of;\n use middle::ty::{mod, Ty};\n use middle::subst::{Substs};\n use std::cmp;\n+use std::c_str::ToCStr;\n use libc::c_uint;\n use syntax::abi::{Cdecl, Aapcs, C, Win64, Abi};\n use syntax::abi::{RustIntrinsic, Rust, RustCall, Stdcall, Fastcall, System};"}, {"sha": "0f0dbf6a24dffc7de58cbf2bdeb6a4fc18a8870c", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -18,10 +18,10 @@\n \n pub use self::imp::Lock;\n \n-\n #[cfg(unix)]\n mod imp {\n     use libc;\n+    use std::c_str::ToCStr;\n \n     #[cfg(target_os = \"linux\")]\n     mod os {"}, {"sha": "468fed1d33910769ce72bae9435fde770a80c501", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -29,11 +29,12 @@\n \n use libc;\n use std::ascii::AsciiExt;\n+use std::c_str::ToCStr;\n use std::cell::{RefCell, Cell};\n+use std::collections::HashMap;\n use std::fmt;\n use std::slice;\n use std::str;\n-use std::collections::HashMap;\n \n use html::toc::TocBuilder;\n use html::highlight;"}, {"sha": "ceb66be2d667439b3e7feb078174940bc9766fd8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -35,6 +35,7 @@\n pub use self::ExternalLocation::*;\n \n use std::cell::RefCell;\n+use std::cmp::Ordering::{mod, Less, Greater, Equal};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::collections::{HashMap, HashSet};\n use std::default::Default;"}, {"sha": "058a7acd4550b7874be6c7090df920d72d1ac12c", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,8 +13,9 @@\n //! hierarchy, with item counts for every stability level per module. A parent\n //! module's count includes its children's.\n \n-use std::ops::Add;\n+use std::cmp::Ordering;\n use std::num::Zero;\n+use std::ops::Add;\n \n use syntax::attr::{Deprecated, Experimental, Unstable, Stable, Frozen, Locked};\n use syntax::ast::Public;"}, {"sha": "b7b8360fced85e89fa383959b627dad055b1a859", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n use std::cell::RefCell;\n+use std::comm::channel;\n use std::dynamic_lib::DynamicLibrary;\n use std::io::{Command, TempDir};\n use std::io;\n use std::os;\n use std::str;\n-use std::string::String;\n-use std::thunk::Thunk;\n use std::thread::Thread;\n+use std::thunk::Thunk;\n \n use std::collections::{HashSet, HashMap};\n use testing;"}, {"sha": "857a7072009bdb6119fc4284fc17b499de009d4d", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -315,8 +315,8 @@ static ASCII_UPPERCASE_MAP: [u8; 256] = [\n \n #[cfg(test)]\n mod tests {\n+    use prelude::v1::*;\n     use super::*;\n-    use prelude::*;\n     use char::from_u32;\n \n     #[test]"}, {"sha": "72220926c0d866105d262d9fa5dc27349f7ddd05", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -209,39 +209,39 @@ macro_rules! bitflags {\n             }\n         }\n \n-        impl BitOr<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::BitOr<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the union of the two sets of flags.\n             #[inline]\n             fn bitor(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits | other.bits }\n             }\n         }\n \n-        impl BitXor<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::BitXor<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the left flags, but with all the right flags toggled.\n             #[inline]\n             fn bitxor(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits ^ other.bits }\n             }\n         }\n \n-        impl BitAnd<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::BitAnd<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the intersection between the two sets of flags.\n             #[inline]\n             fn bitand(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits & other.bits }\n             }\n         }\n \n-        impl Sub<$BitFlags, $BitFlags> for $BitFlags {\n+        impl ::std::ops::Sub<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the set difference of the two sets of flags.\n             #[inline]\n             fn sub(self, other: $BitFlags) -> $BitFlags {\n                 $BitFlags { bits: self.bits & !other.bits }\n             }\n         }\n \n-        impl Not<$BitFlags> for $BitFlags {\n+        impl ::std::ops::Not<$BitFlags> for $BitFlags {\n             /// Returns the complement of this set of flags.\n             #[inline]\n             fn not(self) -> $BitFlags {"}, {"sha": "6418841eda8cf36a82b7341259b0529742128871", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -45,6 +45,8 @@\n //! ```rust\n //! extern crate libc;\n //!\n+//! use std::c_str::ToCStr;\n+//!\n //! extern {\n //!     fn puts(s: *const libc::c_char);\n //! }\n@@ -70,6 +72,7 @@\n use core::prelude::*;\n use libc;\n \n+use cmp::Ordering;\n use fmt;\n use hash;\n use mem;\n@@ -155,6 +158,8 @@ impl CString {\n     /// one).\n     ///\n     /// ```rust\n+    /// use std::c_str::ToCStr;\n+    ///\n     /// let foo = \"some string\";\n     ///\n     /// // right\n@@ -170,6 +175,8 @@ impl CString {\n     /// ```rust\n     /// extern crate libc;\n     ///\n+    /// use std::c_str::ToCStr;\n+    ///\n     /// fn main() {\n     ///     let c_str = \"foo bar\".to_c_str();\n     ///     unsafe {\n@@ -189,6 +196,8 @@ impl CString {\n     /// one).\n     ///\n     /// ```rust\n+    /// use std::c_str::ToCStr;\n+    ///\n     /// let foo = \"some string\";\n     ///\n     /// // right\n@@ -309,6 +318,8 @@ pub trait ToCStr for Sized? {\n     /// ```rust\n     /// extern crate libc;\n     ///\n+    /// use std::c_str::ToCStr;\n+    ///\n     /// fn main() {\n     ///     let s = \"PATH\".with_c_str(|path| unsafe {\n     ///         libc::getenv(path)\n@@ -539,8 +550,7 @@ pub unsafe fn from_c_multistring<F>(buf: *const libc::c_char,\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use prelude::{spawn, Some, None, Option, FnOnce, ToString, CloneSliceExt};\n-    use prelude::{Clone, PtrExt, Iterator, SliceExt, StrExt};\n+    use prelude::v1::*;\n     use ptr;\n     use thread::Thread;\n     use libc;\n@@ -732,9 +742,10 @@ mod tests {\n mod bench {\n     extern crate test;\n \n+    use prelude::v1::*;\n     use self::test::Bencher;\n     use libc;\n-    use prelude::*;\n+    use c_str::ToCStr;\n \n     #[inline]\n     fn check(s: &str, c_str: *const libc::c_char) {"}, {"sha": "de60f06efd218dee3c4272a94842938ea2ee90b2", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -172,7 +172,7 @@ impl<T> AsSlice<T> for CVec<T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use super::CVec;\n     use libc;"}, {"sha": "28689767cb0e3524323238c3f7fdc10893b769ab", "filename": "src/libstd/collections/hash/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,7 +11,7 @@\n #![cfg(test)]\n \n extern crate test;\n-use prelude::*;\n+use prelude::v1::*;\n \n use self::test::Bencher;\n use iter::{range_inclusive};"}, {"sha": "c0536fc5ca4e4c38294b58a49116c3e77ac1a28f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -87,7 +87,7 @@ impl DefaultResizePolicy {\n \n #[test]\n fn test_resize_policy() {\n-    use prelude::*;\n+    use prelude::v1::*;\n     let rp = DefaultResizePolicy;\n     for n in range(0u, 1000) {\n         assert!(rp.min_capacity(rp.usable_capacity(n)) <= n);\n@@ -1530,8 +1530,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Extend<(K, V)> for HashMap<K\n \n #[cfg(test)]\n mod test_map {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n+    use cmp::Equiv;\n     use super::HashMap;\n     use super::Entry::{Occupied, Vacant};\n     use hash;"}, {"sha": "6132d288da2799ca4698acf467c3ab6db7cb935e", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -866,7 +866,7 @@ impl<'a, T, S, H> Iterator<&'a T> for Union<'a, T, H>\n \n #[cfg(test)]\n mod test_set {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use super::HashSet;\n "}, {"sha": "dcef24c62bd23c4c0a360b2cca96e1aa8b618dd6", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 381, "deletions": 300, "changes": 681, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -60,6 +60,7 @@\n //!\n //! ```\n //! use std::thread::Thread;\n+//! use std::comm::channel;\n //!\n //! // Create a simple streaming channel\n //! let (tx, rx) = channel();\n@@ -73,6 +74,7 @@\n //!\n //! ```\n //! use std::thread::Thread;\n+//! use std::comm::channel;\n //!\n //! // Create a shared channel that can be sent along from many threads\n //! // where tx is the sending half (tx for transmission), and rx is the receiving\n@@ -94,6 +96,8 @@\n //! Propagating panics:\n //!\n //! ```should_fail\n+//! use std::comm::channel;\n+//!\n //! // The call to recv() will panic!() because the channel has already hung\n //! // up (or been deallocated)\n //! let (tx, rx) = channel::<int>();\n@@ -105,6 +109,7 @@\n //!\n //! ```\n //! use std::thread::Thread;\n+//! use std::comm::sync_channel;\n //!\n //! let (tx, rx) = sync_channel::<int>(0);\n //! Thread::spawn(move|| {\n@@ -120,6 +125,7 @@\n //! after 10 seconds no matter what:\n //!\n //! ```no_run\n+//! use std::comm::channel;\n //! use std::io::timer::Timer;\n //! use std::time::Duration;\n //!\n@@ -143,6 +149,7 @@\n //! has been inactive for 5 seconds:\n //!\n //! ```no_run\n+//! use std::comm::channel;\n //! use std::io::timer::Timer;\n //! use std::time::Duration;\n //!\n@@ -328,22 +335,6 @@ use self::select::StartResult;\n use self::select::StartResult::*;\n use self::blocking::SignalToken;\n \n-macro_rules! test {\n-    { fn $name:ident() $b:block $(#[$a:meta])*} => (\n-        mod $name {\n-            #![allow(unused_imports)]\n-\n-            use super::*;\n-            use comm::*;\n-            use thread::Thread;\n-            use prelude::{Ok, Err, spawn, range, drop, Box, Some, None, Option};\n-            use prelude::{Vec, Buffer, from_str, Clone};\n-\n-            $(#[$a])* #[test] fn f() { $b }\n-        }\n-    )\n-}\n-\n mod blocking;\n mod oneshot;\n mod select;\n@@ -458,6 +449,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// # Example\n ///\n /// ```\n+/// use std::comm::channel;\n /// use std::thread::Thread;\n ///\n /// // tx is is the sending half (tx for transmission), and rx is the receiving\n@@ -499,6 +491,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// # Example\n ///\n /// ```\n+/// use std::comm::sync_channel;\n /// use std::thread::Thread;\n ///\n /// let (tx, rx) = sync_channel(1);\n@@ -580,6 +573,8 @@ impl<T: Send> Sender<T> {\n     /// # Example\n     ///\n     /// ```\n+    /// use std::comm::channel;\n+    ///\n     /// let (tx, rx) = channel();\n     ///\n     /// // This send is always successful\n@@ -1046,9 +1041,12 @@ unsafe impl<T> kinds::Sync for RacyCell<T> { } // Oh dear\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use prelude::{spawn, range, Some, None, from_str, Clone, Str};\n+    use prelude::v1::*;\n+\n     use os;\n+    use super::*;\n+    use thread::Thread;\n+    use str::from_str;\n \n     pub fn stress_factor() -> uint {\n         match os::getenv(\"RUST_TEST_STRESS\") {\n@@ -1057,221 +1055,238 @@ mod test {\n         }\n     }\n \n-    test! { fn smoke() {\n+    #[test]\n+    fn smoke() {\n         let (tx, rx) = channel::<int>();\n         tx.send(1);\n         assert_eq!(rx.recv(), 1);\n-    } }\n+    }\n \n-    test! { fn drop_full() {\n+    #[test]\n+    fn drop_full() {\n         let (tx, _rx) = channel();\n         tx.send(box 1i);\n-    } }\n+    }\n \n-    test! { fn drop_full_shared() {\n+    #[test]\n+    fn drop_full_shared() {\n         let (tx, _rx) = channel();\n         drop(tx.clone());\n         drop(tx.clone());\n         tx.send(box 1i);\n-    } }\n+    }\n \n-    test! { fn smoke_shared() {\n+    #[test]\n+    fn smoke_shared() {\n         let (tx, rx) = channel::<int>();\n         tx.send(1);\n         assert_eq!(rx.recv(), 1);\n         let tx = tx.clone();\n         tx.send(1);\n         assert_eq!(rx.recv(), 1);\n-    } }\n+    }\n \n-    test! { fn smoke_threads() {\n+    #[test]\n+    fn smoke_threads() {\n         let (tx, rx) = channel::<int>();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             tx.send(1);\n         });\n         assert_eq!(rx.recv(), 1);\n-    } }\n+    }\n \n-    test! { fn smoke_port_gone() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_port_gone() {\n         let (tx, rx) = channel::<int>();\n         drop(rx);\n         tx.send(1);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_shared_port_gone() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_shared_port_gone() {\n         let (tx, rx) = channel::<int>();\n         drop(rx);\n         tx.send(1);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_shared_port_gone2() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_shared_port_gone2() {\n         let (tx, rx) = channel::<int>();\n         drop(rx);\n         let tx2 = tx.clone();\n         drop(tx);\n         tx2.send(1);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn port_gone_concurrent() {\n+    #[test]\n+    #[should_fail]\n+    fn port_gone_concurrent() {\n         let (tx, rx) = channel::<int>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             rx.recv();\n-        });\n+        }).detach();\n         loop { tx.send(1) }\n-    } #[should_fail] }\n+    }\n \n-    test! { fn port_gone_concurrent_shared() {\n+    #[test]\n+    #[should_fail]\n+    fn port_gone_concurrent_shared() {\n         let (tx, rx) = channel::<int>();\n         let tx2 = tx.clone();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             rx.recv();\n-        });\n+        }).detach();\n         loop {\n             tx.send(1);\n             tx2.send(1);\n         }\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_chan_gone() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_chan_gone() {\n         let (tx, rx) = channel::<int>();\n         drop(tx);\n         rx.recv();\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_chan_gone_shared() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_chan_gone_shared() {\n         let (tx, rx) = channel::<()>();\n         let tx2 = tx.clone();\n         drop(tx);\n         drop(tx2);\n         rx.recv();\n-    } #[should_fail] }\n+    }\n \n-    test! { fn chan_gone_concurrent() {\n+    #[test]\n+    #[should_fail]\n+    fn chan_gone_concurrent() {\n         let (tx, rx) = channel::<int>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             tx.send(1);\n             tx.send(1);\n-        });\n+        }).detach();\n         loop { rx.recv(); }\n-    } #[should_fail] }\n+    }\n \n-    test! { fn stress() {\n+    #[test]\n+    fn stress() {\n         let (tx, rx) = channel::<int>();\n-        spawn(move|| {\n+        let t = Thread::spawn(move|| {\n             for _ in range(0u, 10000) { tx.send(1i); }\n         });\n         for _ in range(0u, 10000) {\n             assert_eq!(rx.recv(), 1);\n         }\n-    } }\n+        t.join().ok().unwrap();\n+    }\n \n-    test! { fn stress_shared() {\n+    #[test]\n+    fn stress_shared() {\n         static AMT: uint = 10000;\n         static NTHREADS: uint = 8;\n         let (tx, rx) = channel::<int>();\n-        let (dtx, drx) = channel::<()>();\n \n-        spawn(move|| {\n+        let t = Thread::spawn(move|| {\n             for _ in range(0, AMT * NTHREADS) {\n                 assert_eq!(rx.recv(), 1);\n             }\n             match rx.try_recv() {\n                 Ok(..) => panic!(),\n                 _ => {}\n             }\n-            dtx.send(());\n         });\n \n         for _ in range(0, NTHREADS) {\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 for _ in range(0, AMT) { tx.send(1); }\n-            });\n+            }).detach();\n         }\n         drop(tx);\n-        drx.recv();\n-    } }\n+        t.join().ok().unwrap();\n+    }\n \n     #[test]\n     fn send_from_outside_runtime() {\n         let (tx1, rx1) = channel::<()>();\n         let (tx2, rx2) = channel::<int>();\n-        let (tx3, rx3) = channel::<()>();\n-        let tx4 = tx3.clone();\n-        spawn(move|| {\n+        let t1 = Thread::spawn(move|| {\n             tx1.send(());\n             for _ in range(0i, 40) {\n                 assert_eq!(rx2.recv(), 1);\n             }\n-            tx3.send(());\n         });\n         rx1.recv();\n-        spawn(move|| {\n+        let t2 = Thread::spawn(move|| {\n             for _ in range(0i, 40) {\n                 tx2.send(1);\n             }\n-            tx4.send(());\n         });\n-        rx3.recv();\n-        rx3.recv();\n+        t1.join().ok().unwrap();\n+        t2.join().ok().unwrap();\n     }\n \n     #[test]\n     fn recv_from_outside_runtime() {\n         let (tx, rx) = channel::<int>();\n-        let (dtx, drx) = channel();\n-        spawn(move|| {\n+        let t = Thread::spawn(move|| {\n             for _ in range(0i, 40) {\n                 assert_eq!(rx.recv(), 1);\n             }\n-            dtx.send(());\n         });\n         for _ in range(0u, 40) {\n             tx.send(1);\n         }\n-        drx.recv();\n+        t.join().ok().unwrap();\n     }\n \n     #[test]\n     fn no_runtime() {\n         let (tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<int>();\n-        let (tx3, rx3) = channel::<()>();\n-        let tx4 = tx3.clone();\n-        spawn(move|| {\n+        let t1 = Thread::spawn(move|| {\n             assert_eq!(rx1.recv(), 1);\n             tx2.send(2);\n-            tx4.send(());\n         });\n-        spawn(move|| {\n+        let t2 = Thread::spawn(move|| {\n             tx1.send(1);\n             assert_eq!(rx2.recv(), 2);\n-            tx3.send(());\n         });\n-        rx3.recv();\n-        rx3.recv();\n+        t1.join().ok().unwrap();\n+        t2.join().ok().unwrap();\n     }\n \n-    test! { fn oneshot_single_thread_close_port_first() {\n+    #[test]\n+    fn oneshot_single_thread_close_port_first() {\n         // Simple test of closing without sending\n         let (_tx, rx) = channel::<int>();\n         drop(rx);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_close_chan_first() {\n+    #[test]\n+    fn oneshot_single_thread_close_chan_first() {\n         // Simple test of closing without sending\n         let (tx, _rx) = channel::<int>();\n         drop(tx);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_send_port_close() {\n+    #[test]\n+    #[should_fail]\n+    fn oneshot_single_thread_send_port_close() {\n         // Testing that the sender cleans up the payload if receiver is closed\n         let (tx, rx) = channel::<Box<int>>();\n         drop(rx);\n         tx.send(box 0);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn oneshot_single_thread_recv_chan_close() {\n+    #[test]\n+    fn oneshot_single_thread_recv_chan_close() {\n         // Receiving on a closed chan will panic\n         let res = Thread::spawn(move|| {\n             let (tx, rx) = channel::<int>();\n@@ -1280,129 +1295,142 @@ mod test {\n         }).join();\n         // What is our res?\n         assert!(res.is_err());\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_send_then_recv() {\n+    #[test]\n+    fn oneshot_single_thread_send_then_recv() {\n         let (tx, rx) = channel::<Box<int>>();\n         tx.send(box 10);\n         assert!(rx.recv() == box 10);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_send_open() {\n+    #[test]\n+    fn oneshot_single_thread_try_send_open() {\n         let (tx, rx) = channel::<int>();\n         assert!(tx.send_opt(10).is_ok());\n         assert!(rx.recv() == 10);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_send_closed() {\n+    #[test]\n+    fn oneshot_single_thread_try_send_closed() {\n         let (tx, rx) = channel::<int>();\n         drop(rx);\n         assert!(tx.send_opt(10).is_err());\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_recv_open() {\n+    #[test]\n+    fn oneshot_single_thread_try_recv_open() {\n         let (tx, rx) = channel::<int>();\n         tx.send(10);\n         assert!(rx.recv_opt() == Ok(10));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_recv_closed() {\n+    #[test]\n+    fn oneshot_single_thread_try_recv_closed() {\n         let (tx, rx) = channel::<int>();\n         drop(tx);\n         assert!(rx.recv_opt() == Err(()));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_peek_data() {\n+    #[test]\n+    fn oneshot_single_thread_peek_data() {\n         let (tx, rx) = channel::<int>();\n         assert_eq!(rx.try_recv(), Err(Empty));\n         tx.send(10);\n         assert_eq!(rx.try_recv(), Ok(10));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_peek_close() {\n+    #[test]\n+    fn oneshot_single_thread_peek_close() {\n         let (tx, rx) = channel::<int>();\n         drop(tx);\n         assert_eq!(rx.try_recv(), Err(Disconnected));\n         assert_eq!(rx.try_recv(), Err(Disconnected));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_peek_open() {\n+    #[test]\n+    fn oneshot_single_thread_peek_open() {\n         let (_tx, rx) = channel::<int>();\n         assert_eq!(rx.try_recv(), Err(Empty));\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_task_recv_then_send() {\n+    #[test]\n+    fn oneshot_multi_task_recv_then_send() {\n         let (tx, rx) = channel::<Box<int>>();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             assert!(rx.recv() == box 10);\n         });\n \n         tx.send(box 10);\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_task_recv_then_close() {\n+    #[test]\n+    fn oneshot_multi_task_recv_then_close() {\n         let (tx, rx) = channel::<Box<int>>();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             drop(tx);\n         });\n         let res = Thread::spawn(move|| {\n             assert!(rx.recv() == box 10);\n         }).join();\n         assert!(res.is_err());\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_close_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_close_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = channel::<int>();\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 drop(rx);\n             });\n             drop(tx);\n         }\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_send_close_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_send_close_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = channel::<int>();\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 drop(rx);\n             });\n             let _ = Thread::spawn(move|| {\n                 tx.send(1);\n             }).join();\n         }\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_recv_close_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_recv_close_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = channel::<int>();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 let res = Thread::spawn(move|| {\n                     rx.recv();\n                 }).join();\n                 assert!(res.is_err());\n-            });\n-            spawn(move|| {\n-                spawn(move|| {\n+            }).detach();\n+            let _t = Thread::spawn(move|| {\n+                Thread::spawn(move|| {\n                     drop(tx);\n-                });\n+                }).detach();\n             });\n         }\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_send_recv_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_send_recv_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = channel();\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 tx.send(box 10i);\n             });\n-            spawn(move|| {\n-                assert!(rx.recv() == box 10i);\n-            });\n+            assert!(rx.recv() == box 10i);\n         }\n-    } }\n+    }\n \n-    test! { fn stream_send_recv_stress() {\n+    #[test]\n+    fn stream_send_recv_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = channel();\n \n@@ -1412,50 +1440,53 @@ mod test {\n             fn send(tx: Sender<Box<int>>, i: int) {\n                 if i == 10 { return }\n \n-                spawn(move|| {\n+                Thread::spawn(move|| {\n                     tx.send(box i);\n                     send(tx, i + 1);\n-                });\n+                }).detach();\n             }\n \n             fn recv(rx: Receiver<Box<int>>, i: int) {\n                 if i == 10 { return }\n \n-                spawn(move|| {\n+                Thread::spawn(move|| {\n                     assert!(rx.recv() == box i);\n                     recv(rx, i + 1);\n-                });\n+                }).detach();\n             }\n         }\n-    } }\n+    }\n \n-    test! { fn recv_a_lot() {\n+    #[test]\n+    fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = channel();\n         for _ in range(0i, 10000) { tx.send(()); }\n         for _ in range(0i, 10000) { rx.recv(); }\n-    } }\n+    }\n \n-    test! { fn shared_chan_stress() {\n+    #[test]\n+    fn shared_chan_stress() {\n         let (tx, rx) = channel();\n         let total = stress_factor() + 100;\n         for _ in range(0, total) {\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 tx.send(());\n-            });\n+            }).detach();\n         }\n \n         for _ in range(0, total) {\n             rx.recv();\n         }\n-    } }\n+    }\n \n-    test! { fn test_nested_recv_iter() {\n+    #[test]\n+    fn test_nested_recv_iter() {\n         let (tx, rx) = channel::<int>();\n         let (total_tx, total_rx) = channel::<int>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acc = 0;\n             for x in rx.iter() {\n                 acc += x;\n@@ -1468,13 +1499,14 @@ mod test {\n         tx.send(2);\n         drop(tx);\n         assert_eq!(total_rx.recv(), 6);\n-    } }\n+    }\n \n-    test! { fn test_recv_iter_break() {\n+    #[test]\n+    fn test_recv_iter_break() {\n         let (tx, rx) = channel::<int>();\n         let (count_tx, count_rx) = channel();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut count = 0;\n             for x in rx.iter() {\n                 if count >= 3 {\n@@ -1492,13 +1524,14 @@ mod test {\n         let _ = tx.send_opt(2);\n         drop(tx);\n         assert_eq!(count_rx.recv(), 4);\n-    } }\n+    }\n \n-    test! { fn try_recv_states() {\n+    #[test]\n+    fn try_recv_states() {\n         let (tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<()>();\n         let (tx3, rx3) = channel::<()>();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx2.recv();\n             tx1.send(1);\n             tx3.send(());\n@@ -1515,14 +1548,15 @@ mod test {\n         tx2.send(());\n         rx3.recv();\n         assert_eq!(rx1.try_recv(), Err(Disconnected));\n-    } }\n+    }\n \n     // This bug used to end up in a livelock inside of the Receiver destructor\n     // because the internal state of the Shared packet was corrupted\n-    test! { fn destroy_upgraded_shared_port_when_sender_still_active() {\n+    #[test]\n+    fn destroy_upgraded_shared_port_when_sender_still_active() {\n         let (tx, rx) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx.recv(); // wait on a oneshot\n             drop(rx);  // destroy a shared\n             tx2.send(());\n@@ -1537,13 +1571,16 @@ mod test {\n \n         // wait for the child task to exit before we exit\n         rx2.recv();\n-    }}\n+    }\n }\n \n #[cfg(test)]\n mod sync_tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use os;\n+    use thread::Thread;\n+    use super::*;\n+    use str::from_str;\n \n     pub fn stress_factor() -> uint {\n         match os::getenv(\"RUST_TEST_STRESS\") {\n@@ -1552,108 +1589,128 @@ mod sync_tests {\n         }\n     }\n \n-    test! { fn smoke() {\n+    #[test]\n+    fn smoke() {\n         let (tx, rx) = sync_channel::<int>(1);\n         tx.send(1);\n         assert_eq!(rx.recv(), 1);\n-    } }\n+    }\n \n-    test! { fn drop_full() {\n+    #[test]\n+    fn drop_full() {\n         let (tx, _rx) = sync_channel(1);\n         tx.send(box 1i);\n-    } }\n+    }\n \n-    test! { fn smoke_shared() {\n+    #[test]\n+    fn smoke_shared() {\n         let (tx, rx) = sync_channel::<int>(1);\n         tx.send(1);\n         assert_eq!(rx.recv(), 1);\n         let tx = tx.clone();\n         tx.send(1);\n         assert_eq!(rx.recv(), 1);\n-    } }\n+    }\n \n-    test! { fn smoke_threads() {\n+    #[test]\n+    fn smoke_threads() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             tx.send(1);\n         });\n         assert_eq!(rx.recv(), 1);\n-    } }\n+    }\n \n-    test! { fn smoke_port_gone() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_port_gone() {\n         let (tx, rx) = sync_channel::<int>(0);\n         drop(rx);\n         tx.send(1);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_shared_port_gone2() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_shared_port_gone2() {\n         let (tx, rx) = sync_channel::<int>(0);\n         drop(rx);\n         let tx2 = tx.clone();\n         drop(tx);\n         tx2.send(1);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn port_gone_concurrent() {\n+    #[test]\n+    #[should_fail]\n+    fn port_gone_concurrent() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             rx.recv();\n-        });\n+        }).detach();\n         loop { tx.send(1) }\n-    } #[should_fail] }\n+    }\n \n-    test! { fn port_gone_concurrent_shared() {\n+    #[test]\n+    #[should_fail]\n+    fn port_gone_concurrent_shared() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let tx2 = tx.clone();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             rx.recv();\n-        });\n+        }).detach();\n         loop {\n             tx.send(1);\n             tx2.send(1);\n         }\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_chan_gone() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_chan_gone() {\n         let (tx, rx) = sync_channel::<int>(0);\n         drop(tx);\n         rx.recv();\n-    } #[should_fail] }\n+    }\n \n-    test! { fn smoke_chan_gone_shared() {\n+    #[test]\n+    #[should_fail]\n+    fn smoke_chan_gone_shared() {\n         let (tx, rx) = sync_channel::<()>(0);\n         let tx2 = tx.clone();\n         drop(tx);\n         drop(tx2);\n         rx.recv();\n-    } #[should_fail] }\n+    }\n \n-    test! { fn chan_gone_concurrent() {\n+    #[test]\n+    #[should_fail]\n+    fn chan_gone_concurrent() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             tx.send(1);\n             tx.send(1);\n-        });\n+        }).detach();\n         loop { rx.recv(); }\n-    } #[should_fail] }\n+    }\n \n-    test! { fn stress() {\n+    #[test]\n+    fn stress() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             for _ in range(0u, 10000) { tx.send(1); }\n-        });\n+        }).detach();\n         for _ in range(0u, 10000) {\n             assert_eq!(rx.recv(), 1);\n         }\n-    } }\n+    }\n \n-    test! { fn stress_shared() {\n+    #[test]\n+    fn stress_shared() {\n         static AMT: uint = 1000;\n         static NTHREADS: uint = 8;\n         let (tx, rx) = sync_channel::<int>(0);\n         let (dtx, drx) = sync_channel::<()>(0);\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             for _ in range(0, AMT * NTHREADS) {\n                 assert_eq!(rx.recv(), 1);\n             }\n@@ -1662,38 +1719,43 @@ mod sync_tests {\n                 _ => {}\n             }\n             dtx.send(());\n-        });\n+        }).detach();\n \n         for _ in range(0, NTHREADS) {\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 for _ in range(0, AMT) { tx.send(1); }\n-            });\n+            }).detach();\n         }\n         drop(tx);\n         drx.recv();\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_close_port_first() {\n+    #[test]\n+    fn oneshot_single_thread_close_port_first() {\n         // Simple test of closing without sending\n         let (_tx, rx) = sync_channel::<int>(0);\n         drop(rx);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_close_chan_first() {\n+    #[test]\n+    fn oneshot_single_thread_close_chan_first() {\n         // Simple test of closing without sending\n         let (tx, _rx) = sync_channel::<int>(0);\n         drop(tx);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_send_port_close() {\n+    #[test]\n+    #[should_fail]\n+    fn oneshot_single_thread_send_port_close() {\n         // Testing that the sender cleans up the payload if receiver is closed\n         let (tx, rx) = sync_channel::<Box<int>>(0);\n         drop(rx);\n         tx.send(box 0);\n-    } #[should_fail] }\n+    }\n \n-    test! { fn oneshot_single_thread_recv_chan_close() {\n+    #[test]\n+    fn oneshot_single_thread_recv_chan_close() {\n         // Receiving on a closed chan will panic\n         let res = Thread::spawn(move|| {\n             let (tx, rx) = sync_channel::<int>(0);\n@@ -1702,134 +1764,148 @@ mod sync_tests {\n         }).join();\n         // What is our res?\n         assert!(res.is_err());\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_send_then_recv() {\n+    #[test]\n+    fn oneshot_single_thread_send_then_recv() {\n         let (tx, rx) = sync_channel::<Box<int>>(1);\n         tx.send(box 10);\n         assert!(rx.recv() == box 10);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_send_open() {\n+    #[test]\n+    fn oneshot_single_thread_try_send_open() {\n         let (tx, rx) = sync_channel::<int>(1);\n         assert_eq!(tx.try_send(10), Ok(()));\n         assert!(rx.recv() == 10);\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_send_closed() {\n+    #[test]\n+    fn oneshot_single_thread_try_send_closed() {\n         let (tx, rx) = sync_channel::<int>(0);\n         drop(rx);\n         assert_eq!(tx.try_send(10), Err(RecvDisconnected(10)));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_send_closed2() {\n+    #[test]\n+    fn oneshot_single_thread_try_send_closed2() {\n         let (tx, _rx) = sync_channel::<int>(0);\n         assert_eq!(tx.try_send(10), Err(Full(10)));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_recv_open() {\n+    #[test]\n+    fn oneshot_single_thread_try_recv_open() {\n         let (tx, rx) = sync_channel::<int>(1);\n         tx.send(10);\n         assert!(rx.recv_opt() == Ok(10));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_try_recv_closed() {\n+    #[test]\n+    fn oneshot_single_thread_try_recv_closed() {\n         let (tx, rx) = sync_channel::<int>(0);\n         drop(tx);\n         assert!(rx.recv_opt() == Err(()));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_peek_data() {\n+    #[test]\n+    fn oneshot_single_thread_peek_data() {\n         let (tx, rx) = sync_channel::<int>(1);\n         assert_eq!(rx.try_recv(), Err(Empty));\n         tx.send(10);\n         assert_eq!(rx.try_recv(), Ok(10));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_peek_close() {\n+    #[test]\n+    fn oneshot_single_thread_peek_close() {\n         let (tx, rx) = sync_channel::<int>(0);\n         drop(tx);\n         assert_eq!(rx.try_recv(), Err(Disconnected));\n         assert_eq!(rx.try_recv(), Err(Disconnected));\n-    } }\n+    }\n \n-    test! { fn oneshot_single_thread_peek_open() {\n+    #[test]\n+    fn oneshot_single_thread_peek_open() {\n         let (_tx, rx) = sync_channel::<int>(0);\n         assert_eq!(rx.try_recv(), Err(Empty));\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_task_recv_then_send() {\n+    #[test]\n+    fn oneshot_multi_task_recv_then_send() {\n         let (tx, rx) = sync_channel::<Box<int>>(0);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             assert!(rx.recv() == box 10);\n         });\n \n         tx.send(box 10);\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_task_recv_then_close() {\n+    #[test]\n+    fn oneshot_multi_task_recv_then_close() {\n         let (tx, rx) = sync_channel::<Box<int>>(0);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             drop(tx);\n         });\n         let res = Thread::spawn(move|| {\n             assert!(rx.recv() == box 10);\n         }).join();\n         assert!(res.is_err());\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_close_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_close_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = sync_channel::<int>(0);\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 drop(rx);\n             });\n             drop(tx);\n         }\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_send_close_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_send_close_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = sync_channel::<int>(0);\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 drop(rx);\n             });\n             let _ = Thread::spawn(move || {\n                 tx.send(1);\n             }).join();\n         }\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_recv_close_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_recv_close_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = sync_channel::<int>(0);\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 let res = Thread::spawn(move|| {\n                     rx.recv();\n                 }).join();\n                 assert!(res.is_err());\n             });\n-            spawn(move|| {\n-                spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n+                Thread::spawn(move|| {\n                     drop(tx);\n-                });\n+                }).detach();\n             });\n         }\n-    } }\n+    }\n \n-    test! { fn oneshot_multi_thread_send_recv_stress() {\n+    #[test]\n+    fn oneshot_multi_thread_send_recv_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = sync_channel::<Box<int>>(0);\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 tx.send(box 10i);\n             });\n-            spawn(move|| {\n-                assert!(rx.recv() == box 10i);\n-            });\n+            assert!(rx.recv() == box 10i);\n         }\n-    } }\n+    }\n \n-    test! { fn stream_send_recv_stress() {\n+    #[test]\n+    fn stream_send_recv_stress() {\n         for _ in range(0, stress_factor()) {\n             let (tx, rx) = sync_channel::<Box<int>>(0);\n \n@@ -1839,50 +1915,53 @@ mod sync_tests {\n             fn send(tx: SyncSender<Box<int>>, i: int) {\n                 if i == 10 { return }\n \n-                spawn(move|| {\n+                Thread::spawn(move|| {\n                     tx.send(box i);\n                     send(tx, i + 1);\n-                });\n+                }).detach();\n             }\n \n             fn recv(rx: Receiver<Box<int>>, i: int) {\n                 if i == 10 { return }\n \n-                spawn(move|| {\n+                Thread::spawn(move|| {\n                     assert!(rx.recv() == box i);\n                     recv(rx, i + 1);\n-                });\n+                }).detach();\n             }\n         }\n-    } }\n+    }\n \n-    test! { fn recv_a_lot() {\n+    #[test]\n+    fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = sync_channel(10000);\n         for _ in range(0u, 10000) { tx.send(()); }\n         for _ in range(0u, 10000) { rx.recv(); }\n-    } }\n+    }\n \n-    test! { fn shared_chan_stress() {\n+    #[test]\n+    fn shared_chan_stress() {\n         let (tx, rx) = sync_channel(0);\n         let total = stress_factor() + 100;\n         for _ in range(0, total) {\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 tx.send(());\n-            });\n+            }).detach();\n         }\n \n         for _ in range(0, total) {\n             rx.recv();\n         }\n-    } }\n+    }\n \n-    test! { fn test_nested_recv_iter() {\n+    #[test]\n+    fn test_nested_recv_iter() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let (total_tx, total_rx) = sync_channel::<int>(0);\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acc = 0;\n             for x in rx.iter() {\n                 acc += x;\n@@ -1895,13 +1974,14 @@ mod sync_tests {\n         tx.send(2);\n         drop(tx);\n         assert_eq!(total_rx.recv(), 6);\n-    } }\n+    }\n \n-    test! { fn test_recv_iter_break() {\n+    #[test]\n+    fn test_recv_iter_break() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let (count_tx, count_rx) = sync_channel(0);\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut count = 0;\n             for x in rx.iter() {\n                 if count >= 3 {\n@@ -1919,13 +1999,14 @@ mod sync_tests {\n         let _ = tx.try_send(2);\n         drop(tx);\n         assert_eq!(count_rx.recv(), 4);\n-    } }\n+    }\n \n-    test! { fn try_recv_states() {\n+    #[test]\n+    fn try_recv_states() {\n         let (tx1, rx1) = sync_channel::<int>(1);\n         let (tx2, rx2) = sync_channel::<()>(1);\n         let (tx3, rx3) = sync_channel::<()>(1);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx2.recv();\n             tx1.send(1);\n             tx3.send(());\n@@ -1942,14 +2023,15 @@ mod sync_tests {\n         tx2.send(());\n         rx3.recv();\n         assert_eq!(rx1.try_recv(), Err(Disconnected));\n-    } }\n+    }\n \n     // This bug used to end up in a livelock inside of the Receiver destructor\n     // because the internal state of the Shared packet was corrupted\n-    test! { fn destroy_upgraded_shared_port_when_sender_still_active() {\n+    #[test]\n+    fn destroy_upgraded_shared_port_when_sender_still_active() {\n         let (tx, rx) = sync_channel::<()>(0);\n         let (tx2, rx2) = sync_channel::<()>(0);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx.recv(); // wait on a oneshot\n             drop(rx);  // destroy a shared\n             tx2.send(());\n@@ -1964,78 +2046,77 @@ mod sync_tests {\n \n         // wait for the child task to exit before we exit\n         rx2.recv();\n-    } }\n+    }\n \n-    test! { fn send_opt1() {\n+    #[test]\n+    fn send_opt1() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| { rx.recv(); });\n+        let _t = Thread::spawn(move|| { rx.recv(); });\n         assert_eq!(tx.send_opt(1), Ok(()));\n-    } }\n+    }\n \n-    test! { fn send_opt2() {\n+    #[test]\n+    fn send_opt2() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| { drop(rx); });\n+        let _t = Thread::spawn(move|| { drop(rx); });\n         assert_eq!(tx.send_opt(1), Err(1));\n-    } }\n+    }\n \n-    test! { fn send_opt3() {\n+    #[test]\n+    fn send_opt3() {\n         let (tx, rx) = sync_channel::<int>(1);\n         assert_eq!(tx.send_opt(1), Ok(()));\n-        spawn(move|| { drop(rx); });\n+        let _t = Thread::spawn(move|| { drop(rx); });\n         assert_eq!(tx.send_opt(1), Err(1));\n-    } }\n+    }\n \n-    test! { fn send_opt4() {\n+    #[test]\n+    fn send_opt4() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let tx2 = tx.clone();\n         let (done, donerx) = channel();\n         let done2 = done.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             assert_eq!(tx.send_opt(1), Err(1));\n             done.send(());\n         });\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             assert_eq!(tx2.send_opt(2), Err(2));\n             done2.send(());\n         });\n         drop(rx);\n         donerx.recv();\n         donerx.recv();\n-    } }\n+    }\n \n-    test! { fn try_send1() {\n+    #[test]\n+    fn try_send1() {\n         let (tx, _rx) = sync_channel::<int>(0);\n         assert_eq!(tx.try_send(1), Err(Full(1)));\n-    } }\n+    }\n \n-    test! { fn try_send2() {\n+    #[test]\n+    fn try_send2() {\n         let (tx, _rx) = sync_channel::<int>(1);\n         assert_eq!(tx.try_send(1), Ok(()));\n         assert_eq!(tx.try_send(1), Err(Full(1)));\n-    } }\n+    }\n \n-    test! { fn try_send3() {\n+    #[test]\n+    fn try_send3() {\n         let (tx, rx) = sync_channel::<int>(1);\n         assert_eq!(tx.try_send(1), Ok(()));\n         drop(rx);\n         assert_eq!(tx.try_send(1), Err(RecvDisconnected(1)));\n-    } }\n-\n-    test! { fn try_send4() {\n-        let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| {\n-            for _ in range(0u, 1000) { Thread::yield_now(); }\n-            assert_eq!(tx.try_send(1), Ok(()));\n-        });\n-        assert_eq!(rx.recv(), 1);\n-    } #[ignore(reason = \"flaky on libnative\")] }\n+    }\n \n-    test! { fn issue_15761() {\n+    #[test]\n+    fn issue_15761() {\n         fn repro() {\n             let (tx1, rx1) = sync_channel::<()>(3);\n             let (tx2, rx2) = sync_channel::<()>(3);\n \n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 rx1.recv();\n                 tx2.try_send(()).unwrap();\n             });\n@@ -2047,5 +2128,5 @@ mod sync_tests {\n         for _ in range(0u, 100) {\n             repro()\n         }\n-    } }\n+    }\n }"}, {"sha": "d1b6d0d697cf28e89318de5b71dbeea0aabd0901", "filename": "src/libstd/comm/mpsc_queue.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmpsc_queue.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -153,11 +153,12 @@ impl<T: Send> Drop for Queue<T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-\n-    use alloc::arc::Arc;\n+    use prelude::v1::*;\n \n+    use comm::channel;\n     use super::{Queue, Data, Empty, Inconsistent};\n+    use sync::Arc;\n+    use thread::Thread;\n \n     #[test]\n     fn test_full() {\n@@ -181,12 +182,12 @@ mod tests {\n         for _ in range(0, nthreads) {\n             let tx = tx.clone();\n             let q = q.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 for i in range(0, nmsgs) {\n                     q.push(i);\n                 }\n                 tx.send(());\n-            });\n+            }).detach();\n         }\n \n         let mut i = 0u;"}, {"sha": "a0a8e40b4150ecbf0aa5d558dfb4755ebd0fc422", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 89, "deletions": 62, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -27,6 +27,8 @@\n //! # Example\n //!\n //! ```rust\n+//! use std::comm::channel;\n+//!\n //! let (tx1, rx1) = channel();\n //! let (tx2, rx2) = channel();\n //!\n@@ -335,9 +337,10 @@ impl Iterator<*mut Handle<'static, ()>> for Packets {\n #[cfg(test)]\n #[allow(unused_imports)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n-    use super::*;\n+    use comm::*;\n+    use thread::Thread;\n \n     // Don't use the libstd version so we can pull in the right Select structure\n     // (std::comm points at the wrong one)\n@@ -357,7 +360,8 @@ mod test {\n         })\n     }\n \n-    test! { fn smoke() {\n+    #[test]\n+    fn smoke() {\n         let (tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<int>();\n         tx1.send(1);\n@@ -379,9 +383,10 @@ mod test {\n         select! {\n             bar = rx2.recv_opt() => { assert_eq!(bar, Err(())); }\n         }\n-    } }\n+    }\n \n-    test! { fn smoke2() {\n+    #[test]\n+    fn smoke2() {\n         let (_tx1, rx1) = channel::<int>();\n         let (_tx2, rx2) = channel::<int>();\n         let (_tx3, rx3) = channel::<int>();\n@@ -395,9 +400,10 @@ mod test {\n             _foo = rx4.recv() => { panic!(\"4\") },\n             foo = rx5.recv() => { assert_eq!(foo, 4); }\n         }\n-    } }\n+    }\n \n-    test! { fn closed() {\n+    #[test]\n+    fn closed() {\n         let (_tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<int>();\n         drop(tx2);\n@@ -406,14 +412,15 @@ mod test {\n             _a1 = rx1.recv_opt() => { panic!() },\n             a2 = rx2.recv_opt() => { assert_eq!(a2, Err(())); }\n         }\n-    } }\n+    }\n \n-    test! { fn unblocks() {\n+    #[test]\n+    fn unblocks() {\n         let (tx1, rx1) = channel::<int>();\n         let (_tx2, rx2) = channel::<int>();\n         let (tx3, rx3) = channel::<int>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for _ in range(0u, 20) { Thread::yield_now(); }\n             tx1.send(1);\n             rx3.recv();\n@@ -429,14 +436,15 @@ mod test {\n             a = rx1.recv_opt() => { assert_eq!(a, Err(())); },\n             _b = rx2.recv() => { panic!() }\n         }\n-    } }\n+    }\n \n-    test! { fn both_ready() {\n+    #[test]\n+    fn both_ready() {\n         let (tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<int>();\n         let (tx3, rx3) = channel::<()>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for _ in range(0u, 20) { Thread::yield_now(); }\n             tx1.send(1);\n             tx2.send(2);\n@@ -454,15 +462,16 @@ mod test {\n         assert_eq!(rx1.try_recv(), Err(Empty));\n         assert_eq!(rx2.try_recv(), Err(Empty));\n         tx3.send(());\n-    } }\n+    }\n \n-    test! { fn stress() {\n+    #[test]\n+    fn stress() {\n         static AMT: int = 10000;\n         let (tx1, rx1) = channel::<int>();\n         let (tx2, rx2) = channel::<int>();\n         let (tx3, rx3) = channel::<()>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for i in range(0, AMT) {\n                 if i % 2 == 0 {\n                     tx1.send(i);\n@@ -480,14 +489,15 @@ mod test {\n             }\n             tx3.send(());\n         }\n-    } }\n+    }\n \n-    test! { fn cloning() {\n+    #[test]\n+    fn cloning() {\n         let (tx1, rx1) = channel::<int>();\n         let (_tx2, rx2) = channel::<int>();\n         let (tx3, rx3) = channel::<()>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx3.recv();\n             tx1.clone();\n             assert_eq!(rx3.try_recv(), Err(Empty));\n@@ -501,14 +511,15 @@ mod test {\n             _i2 = rx2.recv() => panic!()\n         }\n         tx3.send(());\n-    } }\n+    }\n \n-    test! { fn cloning2() {\n+    #[test]\n+    fn cloning2() {\n         let (tx1, rx1) = channel::<int>();\n         let (_tx2, rx2) = channel::<int>();\n         let (tx3, rx3) = channel::<()>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx3.recv();\n             tx1.clone();\n             assert_eq!(rx3.try_recv(), Err(Empty));\n@@ -522,13 +533,14 @@ mod test {\n             _i2 = rx2.recv() => panic!()\n         }\n         tx3.send(());\n-    } }\n+    }\n \n-    test! { fn cloning3() {\n+    #[test]\n+    fn cloning3() {\n         let (tx1, rx1) = channel::<()>();\n         let (tx2, rx2) = channel::<()>();\n         let (tx3, rx3) = channel::<()>();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let s = Select::new();\n             let mut h1 = s.handle(&rx1);\n             let mut h2 = s.handle(&rx2);\n@@ -542,73 +554,81 @@ mod test {\n         drop(tx1.clone());\n         tx2.send(());\n         rx3.recv();\n-    } }\n+    }\n \n-    test! { fn preflight1() {\n+    #[test]\n+    fn preflight1() {\n         let (tx, rx) = channel();\n         tx.send(());\n         select! {\n             () = rx.recv() => {}\n         }\n-    } }\n+    }\n \n-    test! { fn preflight2() {\n+    #[test]\n+    fn preflight2() {\n         let (tx, rx) = channel();\n         tx.send(());\n         tx.send(());\n         select! {\n             () = rx.recv() => {}\n         }\n-    } }\n+    }\n \n-    test! { fn preflight3() {\n+    #[test]\n+    fn preflight3() {\n         let (tx, rx) = channel();\n         drop(tx.clone());\n         tx.send(());\n         select! {\n             () = rx.recv() => {}\n         }\n-    } }\n+    }\n \n-    test! { fn preflight4() {\n+    #[test]\n+    fn preflight4() {\n         let (tx, rx) = channel();\n         tx.send(());\n         let s = Select::new();\n         let mut h = s.handle(&rx);\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n-    } }\n+    }\n \n-    test! { fn preflight5() {\n+    #[test]\n+    fn preflight5() {\n         let (tx, rx) = channel();\n         tx.send(());\n         tx.send(());\n         let s = Select::new();\n         let mut h = s.handle(&rx);\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n-    } }\n+    }\n \n-    test! { fn preflight6() {\n+    #[test]\n+    fn preflight6() {\n         let (tx, rx) = channel();\n         drop(tx.clone());\n         tx.send(());\n         let s = Select::new();\n         let mut h = s.handle(&rx);\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n-    } }\n+    }\n \n-    test! { fn preflight7() {\n+    #[test]\n+    fn preflight7() {\n         let (tx, rx) = channel::<()>();\n         drop(tx);\n         let s = Select::new();\n         let mut h = s.handle(&rx);\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n-    } }\n+    }\n \n-    test! { fn preflight8() {\n+    #[test]\n+    fn preflight8() {\n         let (tx, rx) = channel();\n         tx.send(());\n         drop(tx);\n@@ -617,9 +637,10 @@ mod test {\n         let mut h = s.handle(&rx);\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n-    } }\n+    }\n \n-    test! { fn preflight9() {\n+    #[test]\n+    fn preflight9() {\n         let (tx, rx) = channel();\n         drop(tx.clone());\n         tx.send(());\n@@ -629,12 +650,13 @@ mod test {\n         let mut h = s.handle(&rx);\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n-    } }\n+    }\n \n-    test! { fn oneshot_data_waiting() {\n+    #[test]\n+    fn oneshot_data_waiting() {\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             select! {\n                 () = rx1.recv() => {}\n             }\n@@ -644,16 +666,17 @@ mod test {\n         for _ in range(0u, 100) { Thread::yield_now() }\n         tx1.send(());\n         rx2.recv();\n-    } }\n+    }\n \n-    test! { fn stream_data_waiting() {\n+    #[test]\n+    fn stream_data_waiting() {\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n         tx1.send(());\n         tx1.send(());\n         rx1.recv();\n         rx1.recv();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             select! {\n                 () = rx1.recv() => {}\n             }\n@@ -663,15 +686,16 @@ mod test {\n         for _ in range(0u, 100) { Thread::yield_now() }\n         tx1.send(());\n         rx2.recv();\n-    } }\n+    }\n \n-    test! { fn shared_data_waiting() {\n+    #[test]\n+    fn shared_data_waiting() {\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n         drop(tx1.clone());\n         tx1.send(());\n         rx1.recv();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             select! {\n                 () = rx1.recv() => {}\n             }\n@@ -681,32 +705,35 @@ mod test {\n         for _ in range(0u, 100) { Thread::yield_now() }\n         tx1.send(());\n         rx2.recv();\n-    } }\n+    }\n \n-    test! { fn sync1() {\n+    #[test]\n+    fn sync1() {\n         let (tx, rx) = sync_channel::<int>(1);\n         tx.send(1);\n         select! {\n             n = rx.recv() => { assert_eq!(n, 1); }\n         }\n-    } }\n+    }\n \n-    test! { fn sync2() {\n+    #[test]\n+    fn sync2() {\n         let (tx, rx) = sync_channel::<int>(0);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for _ in range(0u, 100) { Thread::yield_now() }\n             tx.send(1);\n         });\n         select! {\n             n = rx.recv() => { assert_eq!(n, 1); }\n         }\n-    } }\n+    }\n \n-    test! { fn sync3() {\n+    #[test]\n+    fn sync3() {\n         let (tx1, rx1) = sync_channel::<int>(0);\n         let (tx2, rx2): (Sender<int>, Receiver<int>) = channel();\n-        spawn(move|| { tx1.send(1); });\n-        spawn(move|| { tx2.send(2); });\n+        let _t = Thread::spawn(move|| { tx1.send(1); });\n+        let _t = Thread::spawn(move|| { tx2.send(2); });\n         select! {\n             n = rx1.recv() => {\n                 assert_eq!(n, 1);\n@@ -717,5 +744,5 @@ mod test {\n                 assert_eq!(rx1.recv(), 1);\n             }\n         }\n-    } }\n+    }\n }"}, {"sha": "1e2f5222d8b1a19f4cd88914d565303da9e7278c", "filename": "src/libstd/comm/spsc_queue.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fcomm%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fspsc_queue.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -240,10 +240,12 @@ impl<T: Send> Drop for Queue<T> {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use sync::Arc;\n     use super::Queue;\n+    use thread::Thread;\n+    use comm::channel;\n \n     #[test]\n     fn smoke() {\n@@ -320,7 +322,7 @@ mod test {\n \n             let (tx, rx) = channel();\n             let q2 = q.clone();\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 for _ in range(0u, 100000) {\n                     loop {\n                         match q2.pop() {"}, {"sha": "ecfe2d15ae1c26deb2ab5d5adb65fdf13323e27a", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,7 +15,9 @@\n #![experimental]\n #![allow(missing_docs)]\n \n-use prelude::*;\n+use prelude::v1::*;\n+\n+use c_str::ToCStr;\n use mem;\n use os;\n use str;\n@@ -146,7 +148,7 @@ impl DynamicLibrary {\n #[cfg(all(test, not(target_os = \"ios\")))]\n mod test {\n     use super::*;\n-    use prelude::*;\n+    use prelude::v1::*;\n     use libc;\n     use mem;\n \n@@ -202,8 +204,8 @@ mod test {\n pub mod dl {\n     use self::Rtld::*;\n \n-    use prelude::*;\n-    use c_str::CString;\n+    use prelude::v1::*;\n+    use c_str::{CString, ToCStr};\n     use libc;\n     use ptr;\n "}, {"sha": "32e1922ae74fd62a92261c95f5fb0451da6088db", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -78,7 +78,7 @@\n //! }\n //! ```\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use str::Utf8Error;\n use string::{FromUtf8Error, FromUtf16Error};"}, {"sha": "3d98b6ec40e493fd8777ab187b730643c4499da1", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,7 +10,7 @@\n \n #![experimental]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use any::{Any, AnyRefExt};\n use cell::RefCell;"}, {"sha": "57dc62084e33ee29c28953085bd7abcc921358f5", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -410,7 +410,7 @@ impl<S: Stream> Writer for BufferedStream<S> {\n mod test {\n     extern crate test;\n     use io;\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::*;\n     use super::super::{IoResult, EndOfFile};\n     use super::super::mem::MemReader;"}, {"sha": "ebadecfebb5222059f1c173098bc1d5b406ef8b7", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -23,6 +23,7 @@ use vec::Vec;\n /// # Example\n ///\n /// ```\n+/// use std::comm::channel;\n /// use std::io::ChanReader;\n ///\n /// let (tx, rx) = channel();\n@@ -114,6 +115,7 @@ impl Reader for ChanReader {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n+/// use std::comm::channel;\n /// use std::io::ChanWriter;\n ///\n /// let (tx, rx) = channel();\n@@ -154,7 +156,9 @@ impl Writer for ChanWriter {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n+\n+    use comm::channel;\n     use super::*;\n     use io;\n     use thread::Thread;"}, {"sha": "94dba1f7cc70a1f539d7e78f783ce5b7afb149e1", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -175,7 +175,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use io;\n     use io::{MemReader, BytesReader};\n \n@@ -507,7 +507,7 @@ mod test {\n mod bench {\n     extern crate test;\n \n-    use prelude::*;\n+    use prelude::v1::*;\n     use self::test::Bencher;\n \n     // why is this a macro? wouldn't an inlined function work just as well?"}, {"sha": "7fa5b3cfac7e254e2c4cd5075a3653dd2ab3efed", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -819,7 +819,7 @@ fn access_string(access: FileAccess) -> &'static str {\n #[allow(unused_variables)]\n #[allow(unused_mut)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use io::{SeekSet, SeekCur, SeekEnd, Read, Open, ReadWrite, FileType};\n     use io;\n     use str;"}, {"sha": "ad921e43c0cc58b4be584052b2ad1a5303a14803", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -399,9 +399,10 @@ impl<'a> Buffer for BufReader<'a> {\n #[cfg(test)]\n mod test {\n     extern crate \"test\" as test_crate;\n+    use prelude::v1::*;\n+\n     use super::*;\n-    use io::{SeekSet, SeekCur, SeekEnd, Reader, Writer, Seek};\n-    use prelude::{Ok, Err, range,  Vec, Buffer,  AsSlice, SliceExt, IteratorExt, CloneSliceExt};\n+    use io::{SeekSet, SeekCur, SeekEnd};\n     use io;\n     use self::test_crate::Bencher;\n "}, {"sha": "9eb860d7ec3a3966bedda7e44df54cb2649507b6", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -233,7 +233,7 @@ use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n use mem::transmute;\n-use ops::{BitOr, BitXor, BitAnd, Sub, Not, FnOnce};\n+use ops::FnOnce;\n use option::Option;\n use option::Option::{Some, None};\n use os;\n@@ -1918,8 +1918,8 @@ impl fmt::Show for FilePermission {\n #[cfg(test)]\n mod tests {\n     use self::BadReaderBehavior::*;\n-    use super::{IoResult, Reader, MemReader, NoProgress, InvalidInput, Writer};\n-    use prelude::{Ok, Vec, Buffer, CloneSliceExt};\n+    use super::{IoResult, MemReader, NoProgress, InvalidInput};\n+    use prelude::v1::*;\n     use uint;\n \n     #[deriving(Clone, PartialEq, Show)]"}, {"sha": "d86cb841f96cebc3e04f3e09ec205088a41e1589", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -112,7 +112,7 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n // permission without help of apk\n #[cfg(all(test, not(target_os = \"android\")))]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::*;\n     use io::net::ip::*;\n "}, {"sha": "7ce1d1fc13bcb8bdd67a6b0b06e8b90c9f461157", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -544,7 +544,7 @@ impl<'a> ToSocketAddr for &'a str {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::*;\n     use str::FromStr;\n "}, {"sha": "95147c52a69108120655880ecffd38b060068dca", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -20,14 +20,14 @@\n \n #![allow(missing_docs)]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n+use c_str::ToCStr;\n use io::{Listener, Acceptor, IoResult, TimedOut, standard_error};\n-use time::Duration;\n-\n-use sys::pipe::UnixStream as UnixStreamImp;\n-use sys::pipe::UnixListener as UnixListenerImp;\n use sys::pipe::UnixAcceptor as UnixAcceptorImp;\n+use sys::pipe::UnixListener as UnixListenerImp;\n+use sys::pipe::UnixStream as UnixStreamImp;\n+use time::Duration;\n \n use sys_common;\n \n@@ -264,13 +264,17 @@ impl sys_common::AsInner<UnixAcceptorImp> for UnixAcceptor {\n }\n \n #[cfg(test)]\n-#[allow(experimental)]\n mod tests {\n-    use super::*;\n-    use io::*;\n-    use io::test::*;\n-    use prelude::{Ok, Err, spawn, range, drop,  Some, None, channel, Send, FnOnce, Clone};\n+    use prelude::v1::*;\n+\n+    use comm::channel;\n     use io::fs::PathExtensions;\n+    use io::{EndOfFile, TimedOut, ShortWrite, IoError, ConnectionReset};\n+    use io::{NotConnected, BrokenPipe, OtherIoError, FileNotFound, InvalidInput};\n+    use io::{PermissionDenied, Acceptor, Listener};\n+    use io::test::*;\n+    use super::*;\n+    use thread::Thread;\n     use time::Duration;\n \n     pub fn smalltest<F,G>(server: F, client: G)\n@@ -282,7 +286,7 @@ mod tests {\n \n         let mut acceptor = UnixListener::bind(&path1).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             match UnixStream::connect(&path2) {\n                 Ok(c) => client(c),\n                 Err(e) => panic!(\"failed connect: {}\", e),\n@@ -377,7 +381,7 @@ mod tests {\n             Err(e) => panic!(\"failed listen: {}\", e),\n         };\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for _ in range(0u, times) {\n                 let mut stream = UnixStream::connect(&path2);\n                 match stream.write(&[100]) {\n@@ -411,7 +415,7 @@ mod tests {\n         let addr = next_test_unix();\n         let mut acceptor = UnixListener::bind(&addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr);\n             let mut buf = [0, 0];\n             debug!(\"client reading\");\n@@ -427,7 +431,7 @@ mod tests {\n \n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             rx1.recv();\n             debug!(\"writer writing\");\n@@ -450,7 +454,7 @@ mod tests {\n         let (tx1, rx) = channel();\n         let tx2 = tx1.clone();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr);\n             s.write(&[1]).unwrap();\n             rx.recv();\n@@ -462,7 +466,7 @@ mod tests {\n         let s2 = s1.clone();\n \n         let (done, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             let mut buf = [0, 0];\n             s2.read(&mut buf).unwrap();\n@@ -481,7 +485,7 @@ mod tests {\n         let addr = next_test_unix();\n         let mut acceptor = UnixListener::bind(&addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr);\n             let buf = &mut [0, 1];\n             s.read(buf).unwrap();\n@@ -492,7 +496,7 @@ mod tests {\n         let s2 = s1.clone();\n \n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             s2.write(&[1]).unwrap();\n             tx.send(());\n@@ -539,7 +543,7 @@ mod tests {\n         // continue to receive any pending connections.\n         let (tx, rx) = channel();\n         let addr2 = addr.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             tx.send(UnixStream::connect(&addr2).unwrap());\n         });\n         let l = rx.recv();\n@@ -557,7 +561,7 @@ mod tests {\n         // Unset the timeout and make sure that this always blocks.\n         a.set_timeout(None);\n         let addr2 = addr.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             drop(UnixStream::connect(&addr2).unwrap());\n         });\n         a.accept().unwrap();\n@@ -595,11 +599,11 @@ mod tests {\n         let addr = next_test_unix();\n         let a = UnixListener::bind(&addr).listen().unwrap();\n         let (_tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut b = [0];\n         let mut s = UnixStream::connect(&addr).unwrap();\n@@ -632,16 +636,16 @@ mod tests {\n         let addr = next_test_unix();\n         let a = UnixListener::bind(&addr).listen().unwrap();\n         let (_tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = UnixStream::connect(&addr).unwrap();\n         let s2 = s.clone();\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             assert!(s2.read(&mut [0]).is_err());\n             tx.send(());\n@@ -658,12 +662,12 @@ mod tests {\n         let addr = next_test_unix();\n         let mut a = UnixListener::bind(&addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr).unwrap();\n             rx.recv();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         s.set_timeout(Some(20));\n@@ -696,7 +700,7 @@ mod tests {\n         let addr = next_test_unix();\n         let mut a = UnixListener::bind(&addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr).unwrap();\n             rx.recv();\n             let mut amt = 0;\n@@ -707,7 +711,7 @@ mod tests {\n                 }\n             }\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         s.set_read_timeout(Some(20));\n@@ -725,12 +729,12 @@ mod tests {\n         let addr = next_test_unix();\n         let mut a = UnixListener::bind(&addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr).unwrap();\n             rx.recv();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n@@ -752,17 +756,17 @@ mod tests {\n         let addr = next_test_unix();\n         let mut a = UnixListener::bind(&addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = UnixStream::connect(&addr).unwrap();\n             rx.recv();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         let s2 = s.clone();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             assert!(s2.read(&mut [0]).is_ok());\n             tx2.send(());\n@@ -784,10 +788,10 @@ mod tests {\n         let mut a2 = a.clone();\n \n         let addr2 = addr.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = UnixStream::connect(&addr2);\n         });\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = UnixStream::connect(&addr);\n         });\n \n@@ -807,14 +811,14 @@ mod tests {\n         let (tx, rx) = channel();\n         let tx2 = tx.clone();\n \n-        spawn(move|| { let mut a = a; tx.send(a.accept()) });\n-        spawn(move|| { let mut a = a2; tx2.send(a.accept()) });\n+        let _t = Thread::spawn(move|| { let mut a = a; tx.send(a.accept()) });\n+        let _t = Thread::spawn(move|| { let mut a = a2; tx2.send(a.accept()) });\n \n         let addr2 = addr.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = UnixStream::connect(&addr2);\n         });\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = UnixStream::connect(&addr);\n         });\n \n@@ -840,7 +844,7 @@ mod tests {\n         let mut a2 = a.clone();\n \n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut a = a;\n             tx.send(a.accept());\n         });"}, {"sha": "4492e679cd5f1a1425e80f8dbd69fc4b57fa4721", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 69, "deletions": 67, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -141,7 +141,7 @@ impl TcpStream {\n     /// let mut stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\n     /// let stream2 = stream.clone();\n     ///\n-    /// Thread::spawn(move|| {\n+    /// let _t = Thread::spawn(move|| {\n     ///     // close this stream after one second\n     ///     timer::sleep(Duration::seconds(1));\n     ///     let mut stream = stream2;\n@@ -282,10 +282,10 @@ impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n /// use std::io::{Acceptor, Listener};\n /// use std::thread::Thread;\n ///\n-/// let listener = TcpListener::bind(\"127.0.0.1:80\");\n+/// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n ///\n /// // bind the listener to the specified address\n-/// let mut acceptor = listener.listen();\n+/// let mut acceptor = listener.listen().unwrap();\n ///\n /// fn handle_client(mut stream: TcpStream) {\n ///     // ...\n@@ -423,7 +423,7 @@ impl TcpAcceptor {\n     /// let mut a = TcpListener::bind(\"127.0.0.1:8482\").listen().unwrap();\n     /// let a2 = a.clone();\n     ///\n-    /// Thread::spawn(move|| {\n+    /// let _t = Thread::spawn(move|| {\n     ///     let mut a2 = a2;\n     ///     for socket in a2.incoming() {\n     ///         match socket {\n@@ -482,14 +482,16 @@ impl sys_common::AsInner<TcpAcceptorImp> for TcpAcceptor {\n #[cfg(test)]\n #[allow(experimental)]\n mod test {\n+    use prelude::v1::*;\n+\n+    use comm::channel;\n+    use thread::Thread;\n     use io::net::tcp::*;\n     use io::net::ip::*;\n     use io::{EndOfFile, TimedOut, IoError, ShortWrite, OtherIoError, ConnectionAborted};\n     use io::{ConnectionRefused, ConnectionReset, BrokenPipe, NotConnected};\n     use io::{PermissionDenied, Listener, Acceptor};\n     use io::test::*;\n-    use prelude::{Ok, Err, spawn, range, drop, Some, None, channel, Clone};\n-    use prelude::{Reader, Writer, IteratorExt};\n \n     // FIXME #11530 this fails on android because tests are run as root\n     #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n@@ -515,7 +517,7 @@ mod test {\n         let listener = TcpListener::bind(socket_addr);\n         let mut acceptor = listener.listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut stream = TcpStream::connect((\"localhost\", socket_addr.port));\n             stream.write(&[144]).unwrap();\n         });\n@@ -531,7 +533,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut stream = TcpStream::connect((\"localhost\", addr.port));\n             stream.write(&[64]).unwrap();\n         });\n@@ -547,7 +549,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut stream = TcpStream::connect((\"127.0.0.1\", addr.port));\n             stream.write(&[44]).unwrap();\n         });\n@@ -563,7 +565,7 @@ mod test {\n         let addr = next_test_ip6();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut stream = TcpStream::connect((\"::1\", addr.port));\n             stream.write(&[66]).unwrap();\n         });\n@@ -579,7 +581,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut stream = TcpStream::connect(addr);\n             stream.write(&[99]).unwrap();\n         });\n@@ -595,7 +597,7 @@ mod test {\n         let addr = next_test_ip6();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut stream = TcpStream::connect(addr);\n             stream.write(&[99]).unwrap();\n         });\n@@ -611,7 +613,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _stream = TcpStream::connect(addr);\n             // Close\n         });\n@@ -627,7 +629,7 @@ mod test {\n         let addr = next_test_ip6();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _stream = TcpStream::connect(addr);\n             // Close\n         });\n@@ -643,7 +645,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _stream = TcpStream::connect(addr);\n             // Close\n         });\n@@ -667,7 +669,7 @@ mod test {\n         let addr = next_test_ip6();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _stream = TcpStream::connect(addr);\n             // Close\n         });\n@@ -692,7 +694,7 @@ mod test {\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             drop(TcpStream::connect(addr));\n             tx.send(());\n         });\n@@ -717,7 +719,7 @@ mod test {\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             drop(TcpStream::connect(addr));\n             tx.send(());\n         });\n@@ -742,7 +744,7 @@ mod test {\n         let max = 10u;\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for _ in range(0, max) {\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write(&[99]).unwrap();\n@@ -762,7 +764,7 @@ mod test {\n         let max = 10u;\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             for _ in range(0, max) {\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write(&[99]).unwrap();\n@@ -782,11 +784,11 @@ mod test {\n         static MAX: int = 10;\n         let acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acceptor = acceptor;\n             for (i, stream) in acceptor.incoming().enumerate().take(MAX as uint) {\n                 // Start another task to handle the connection\n-                spawn(move|| {\n+                let _t = Thread::spawn(move|| {\n                     let mut stream = stream;\n                     let mut buf = [0];\n                     stream.read(&mut buf).unwrap();\n@@ -801,7 +803,7 @@ mod test {\n         fn connect(i: int, addr: SocketAddr) {\n             if i == MAX { return }\n \n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 debug!(\"connecting\");\n                 let mut stream = TcpStream::connect(addr);\n                 // Connect again before writing\n@@ -818,11 +820,11 @@ mod test {\n         static MAX: int = 10;\n         let acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acceptor = acceptor;\n             for (i, stream) in acceptor.incoming().enumerate().take(MAX as uint) {\n                 // Start another task to handle the connection\n-                spawn(move|| {\n+                let _t = Thread::spawn(move|| {\n                     let mut stream = stream;\n                     let mut buf = [0];\n                     stream.read(&mut buf).unwrap();\n@@ -837,7 +839,7 @@ mod test {\n         fn connect(i: int, addr: SocketAddr) {\n             if i == MAX { return }\n \n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 debug!(\"connecting\");\n                 let mut stream = TcpStream::connect(addr);\n                 // Connect again before writing\n@@ -854,11 +856,11 @@ mod test {\n         let addr = next_test_ip4();\n         let acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acceptor = acceptor;\n             for stream in acceptor.incoming().take(MAX as uint) {\n                 // Start another task to handle the connection\n-                spawn(move|| {\n+                let _t = Thread::spawn(move|| {\n                     let mut stream = stream;\n                     let mut buf = [0];\n                     stream.read(&mut buf).unwrap();\n@@ -873,7 +875,7 @@ mod test {\n         fn connect(i: int, addr: SocketAddr) {\n             if i == MAX { return }\n \n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 debug!(\"connecting\");\n                 let mut stream = TcpStream::connect(addr);\n                 // Connect again before writing\n@@ -890,11 +892,11 @@ mod test {\n         let addr = next_test_ip6();\n         let acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acceptor = acceptor;\n             for stream in acceptor.incoming().take(MAX as uint) {\n                 // Start another task to handle the connection\n-                spawn(move|| {\n+                let _t = Thread::spawn(move|| {\n                     let mut stream = stream;\n                     let mut buf = [0];\n                     stream.read(&mut buf).unwrap();\n@@ -909,7 +911,7 @@ mod test {\n         fn connect(i: int, addr: SocketAddr) {\n             if i == MAX { return }\n \n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 debug!(\"connecting\");\n                 let mut stream = TcpStream::connect(addr);\n                 // Connect again before writing\n@@ -932,7 +934,7 @@ mod test {\n \n     pub fn peer_name(addr: SocketAddr) {\n         let acceptor = TcpListener::bind(addr).listen();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut acceptor = acceptor;\n             acceptor.accept().unwrap();\n         });\n@@ -967,7 +969,7 @@ mod test {\n     fn partial_read() {\n         let addr = next_test_ip4();\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut srv = TcpListener::bind(addr).listen().unwrap();\n             tx.send(());\n             let mut cl = srv.accept().unwrap();\n@@ -1004,7 +1006,7 @@ mod test {\n         let addr = next_test_ip4();\n         let (tx, rx) = channel();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             rx.recv();\n             let _stream = TcpStream::connect(addr).unwrap();\n             // Close\n@@ -1029,7 +1031,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr);\n             let mut buf = [0, 0];\n             assert_eq!(s.read(&mut buf), Ok(1));\n@@ -1042,7 +1044,7 @@ mod test {\n \n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             rx1.recv();\n             s2.write(&[1]).unwrap();\n@@ -1061,7 +1063,7 @@ mod test {\n         let (tx1, rx) = channel();\n         let tx2 = tx1.clone();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr);\n             s.write(&[1]).unwrap();\n             rx.recv();\n@@ -1073,7 +1075,7 @@ mod test {\n         let s2 = s1.clone();\n \n         let (done, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             let mut buf = [0, 0];\n             s2.read(&mut buf).unwrap();\n@@ -1092,7 +1094,7 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr);\n             let mut buf = [0, 1];\n             s.read(&mut buf).unwrap();\n@@ -1103,7 +1105,7 @@ mod test {\n         let s2 = s1.clone();\n \n         let (done, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             s2.write(&[1]).unwrap();\n             done.send(());\n@@ -1117,7 +1119,7 @@ mod test {\n     fn shutdown_smoke() {\n         let addr = next_test_ip4();\n         let a = TcpListener::bind(addr).unwrap().listen();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut a = a;\n             let mut c = a.accept().unwrap();\n             assert_eq!(c.read_to_end(), Ok(vec!()));\n@@ -1151,7 +1153,7 @@ mod test {\n         //        flakiness.\n         if !cfg!(target_os = \"freebsd\") {\n             let (tx, rx) = channel();\n-            spawn(move|| {\n+            let _t = Thread::spawn(move|| {\n                 tx.send(TcpStream::connect(addr).unwrap());\n             });\n             let _l = rx.recv();\n@@ -1168,7 +1170,7 @@ mod test {\n \n         // Unset the timeout and make sure that this always blocks.\n         a.set_timeout(None);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             drop(TcpStream::connect(addr).unwrap());\n         });\n         a.accept().unwrap();\n@@ -1179,11 +1181,11 @@ mod test {\n         let addr = next_test_ip4();\n         let a = TcpListener::bind(addr).listen().unwrap();\n         let (_tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut b = [0];\n         let mut s = TcpStream::connect(addr).unwrap();\n@@ -1216,16 +1218,16 @@ mod test {\n         let addr = next_test_ip4();\n         let a = TcpListener::bind(addr).listen().unwrap();\n         let (_tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut a = a;\n             let _s = a.accept().unwrap();\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = TcpStream::connect(addr).unwrap();\n         let s2 = s.clone();\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             assert!(s2.read(&mut [0]).is_err());\n             tx.send(());\n@@ -1242,12 +1244,12 @@ mod test {\n         let addr = next_test_ip6();\n         let mut a = TcpListener::bind(addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr).unwrap();\n             rx.recv();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         s.set_timeout(Some(20));\n@@ -1275,7 +1277,7 @@ mod test {\n         let addr = next_test_ip6();\n         let mut a = TcpListener::bind(addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr).unwrap();\n             rx.recv();\n             let mut amt = 0;\n@@ -1286,7 +1288,7 @@ mod test {\n                 }\n             }\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         s.set_read_timeout(Some(20));\n@@ -1304,12 +1306,12 @@ mod test {\n         let addr = next_test_ip6();\n         let mut a = TcpListener::bind(addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr).unwrap();\n             rx.recv();\n             assert!(s.write(&[0]).is_ok());\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n@@ -1332,17 +1334,17 @@ mod test {\n         let addr = next_test_ip6();\n         let mut a = TcpListener::bind(addr).listen().unwrap();\n         let (tx, rx) = channel::<()>();\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut s = TcpStream::connect(addr).unwrap();\n             rx.recv();\n             assert_eq!(s.write(&[0]), Ok(()));\n             let _ = rx.recv_opt();\n-        });\n+        }).detach();\n \n         let mut s = a.accept().unwrap();\n         let s2 = s.clone();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut s2 = s2;\n             assert_eq!(s2.read(&mut [0]), Ok(1));\n             tx2.send(());\n@@ -1365,7 +1367,7 @@ mod test {\n         let (tx, rx) = channel();\n         let (txdone, rxdone) = channel();\n         let txdone2 = txdone.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut tcp = TcpStream::connect(addr).unwrap();\n             rx.recv();\n             tcp.write_u8(0).unwrap();\n@@ -1376,7 +1378,7 @@ mod test {\n         let tcp = accept.accept().unwrap();\n         let tcp2 = tcp.clone();\n         let txdone3 = txdone.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut tcp2 = tcp2;\n             tcp2.read_u8().unwrap();\n             txdone3.send(());\n@@ -1402,10 +1404,10 @@ mod test {\n         let mut a = l.listen().unwrap();\n         let mut a2 = a.clone();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = TcpStream::connect(addr);\n         });\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = TcpStream::connect(addr);\n         });\n \n@@ -1423,13 +1425,13 @@ mod test {\n         let (tx, rx) = channel();\n         let tx2 = tx.clone();\n \n-        spawn(move|| { let mut a = a; tx.send(a.accept()) });\n-        spawn(move|| { let mut a = a2; tx2.send(a.accept()) });\n+        let _t = Thread::spawn(move|| { let mut a = a; tx.send(a.accept()) });\n+        let _t = Thread::spawn(move|| { let mut a = a2; tx2.send(a.accept()) });\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = TcpStream::connect(addr);\n         });\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _ = TcpStream::connect(addr);\n         });\n \n@@ -1455,7 +1457,7 @@ mod test {\n         let mut a2 = a.clone();\n \n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut a = a;\n             tx.send(a.accept());\n         });"}, {"sha": "2e366c7e27ba7c6fa1683c8a8f45098f60313b02", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -248,11 +248,14 @@ impl Writer for UdpStream {\n #[cfg(test)]\n #[allow(experimental)]\n mod test {\n-    use super::*;\n+    use prelude::v1::*;\n+\n+    use comm::channel;\n     use io::net::ip::*;\n-    use io::{ShortWrite, IoError, TimedOut, PermissionDenied};\n+    use io::{IoError, ShortWrite, TimedOut, PermissionDenied};\n     use io::test::*;\n-    use prelude::{Ok, Err, spawn, range, drop, Some, None, channel, Clone, Reader, Writer};\n+    use super::*;\n+    use thread::Thread;\n \n     // FIXME #11530 this fails on android because tests are run as root\n     #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n@@ -272,7 +275,7 @@ mod test {\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             match UdpSocket::bind(client_ip) {\n                 Ok(ref mut client) => {\n                     rx1.recv();\n@@ -307,7 +310,7 @@ mod test {\n         let client_ip = next_test_ip6();\n         let (tx, rx) = channel::<()>();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             match UdpSocket::bind(client_ip) {\n                 Ok(ref mut client) => {\n                     rx.recv();\n@@ -343,8 +346,8 @@ mod test {\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n \n-        spawn(move|| {\n-            let send_as = |&: ip, val: &[u8]| {\n+        let _t = Thread::spawn(move|| {\n+            let send_as = |&:ip, val: &[u8]| {\n                 match UdpSocket::bind(ip) {\n                     Ok(client) => {\n                         let client = box client;\n@@ -387,7 +390,7 @@ mod test {\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             match UdpSocket::bind(client_ip) {\n                 Ok(client) => {\n                     let client = box client;\n@@ -449,7 +452,7 @@ mod test {\n         let mut sock1 = UdpSocket::bind(addr1).unwrap();\n         let sock2 = UdpSocket::bind(addr2).unwrap();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut sock2 = sock2;\n             let mut buf = [0, 0];\n             assert_eq!(sock2.recv_from(&mut buf), Ok((1, addr1)));\n@@ -461,7 +464,7 @@ mod test {\n \n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut sock3 = sock3;\n             rx1.recv();\n             sock3.send_to(&[1], addr2).unwrap();\n@@ -482,7 +485,7 @@ mod test {\n         let (tx1, rx) = channel();\n         let tx2 = tx1.clone();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut sock2 = sock2;\n             sock2.send_to(&[1], addr1).unwrap();\n             rx.recv();\n@@ -493,7 +496,7 @@ mod test {\n         let sock3 = sock1.clone();\n \n         let (done, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut sock3 = sock3;\n             let mut buf = [0, 0];\n             sock3.recv_from(&mut buf).unwrap();\n@@ -517,7 +520,7 @@ mod test {\n         let (tx, rx) = channel();\n         let (serv_tx, serv_rx) = channel();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut sock2 = sock2;\n             let mut buf = [0, 1];\n \n@@ -533,7 +536,7 @@ mod test {\n \n         let (done, rx) = channel();\n         let tx2 = tx.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut sock3 = sock3;\n             match sock3.send_to(&[1], addr2) {\n                 Ok(..) => { let _ = tx2.send_opt(()); }\n@@ -561,7 +564,7 @@ mod test {\n \n         let (tx, rx) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut a = a2;\n             assert_eq!(a.recv_from(&mut [0]), Ok((1, addr1)));\n             assert_eq!(a.send_to(&[0], addr1), Ok(()));"}, {"sha": "ee86eae058da02c1ea50d0d6ec0a878d763fa21a", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,7 +15,7 @@\n \n #![allow(missing_docs)]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use io::IoResult;\n use libc;\n@@ -112,7 +112,10 @@ impl Writer for PipeStream {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n+\n+    use comm::channel;\n+    use thread::Thread;\n \n     #[test]\n     fn partial_read() {\n@@ -123,7 +126,7 @@ mod test {\n         let out = PipeStream::open(writer);\n         let mut input = PipeStream::open(reader);\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut out = out;\n             out.write(&[10]).unwrap();\n             rx.recv(); // don't close the pipe until the other read has finished"}, {"sha": "b93e091af7e88150e57d4048b1c52500a476aab0", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -16,25 +16,25 @@\n pub use self::StdioContainer::*;\n pub use self::ProcessExit::*;\n \n-use prelude::*;\n+use prelude::v1::*;\n \n+use c_str::{CString, ToCStr};\n+use collections::HashMap;\n+use comm::{channel, Receiver};\n use fmt;\n-use os;\n+use hash::Hash;\n+use io::pipe::{PipeStream, PipePair};\n use io::{IoResult, IoError};\n use io;\n use libc;\n-use c_str::CString;\n-use collections::HashMap;\n-use hash::Hash;\n-#[cfg(windows)]\n-use std::hash::sip::SipState;\n-use io::pipe::{PipeStream, PipePair};\n+use os;\n use path::BytesContainer;\n-use thread::Thread;\n-\n-use sys;\n use sys::fs::FileDesc;\n use sys::process::Process as ProcessImp;\n+use sys;\n+use thread::Thread;\n+\n+#[cfg(windows)] use std::hash::sip::SipState;\n \n /// Signal a process to exit, without forcibly killing it. Corresponds to\n /// SIGTERM on unix platforms.\n@@ -741,18 +741,17 @@ impl Drop for Process {\n \n #[cfg(test)]\n mod tests {\n-    #![allow(unused_imports)]\n+    use prelude::v1::*;\n \n-    use super::*;\n+    use comm::channel;\n+    use io::fs::PathExtensions;\n     use io::timer::*;\n     use io::{Truncate, Write, TimedOut, timer, process, FileNotFound};\n-    use prelude::{Ok, Err, spawn, range, drop, Box, Some, None, Option, Vec, Buffer};\n-    use prelude::{from_str, Path, String, channel, Reader, Writer, Clone, Slice};\n-    use prelude::{SliceExt, Str, StrExt, AsSlice, ToString, GenericPath};\n-    use io::fs::PathExtensions;\n-    use time::Duration;\n-    use str;\n     use rt::running_on_valgrind;\n+    use str;\n+    use super::*;\n+    use thread::Thread;\n+    use time::Duration;\n \n     // FIXME(#10380) these tests should not all be ignored on android.\n \n@@ -1156,14 +1155,14 @@ mod tests {\n     fn wait_timeout2() {\n         let (tx, rx) = channel();\n         let tx2 = tx.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut p = sleeper();\n             p.set_timeout(Some(10));\n             assert_eq!(p.wait().err().unwrap().kind, TimedOut);\n             p.signal_kill().unwrap();\n             tx.send(());\n         });\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut p = sleeper();\n             p.set_timeout(Some(10));\n             assert_eq!(p.wait().err().unwrap().kind, TimedOut);"}, {"sha": "c1474650f1eb479fa73245b253105b9b708302c3", "filename": "src/libstd/io/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fresult.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -78,7 +78,7 @@ impl<T, A: Acceptor<T>> Acceptor<T> for IoResult<A> {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::super::mem::*;\n     use io;\n "}, {"sha": "789fdeba8a2cb0ae2291320137d7074c5fcf905b", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -520,8 +520,11 @@ impl Writer for StdWriter {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::v1::*;\n+\n     use super::*;\n-    use prelude::*;\n+    use comm::channel;\n+    use thread::Thread;\n \n     #[test]\n     fn smoke() {\n@@ -537,7 +540,7 @@ mod tests {\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             set_stdout(box w);\n             println!(\"hello!\");\n         });\n@@ -550,7 +553,7 @@ mod tests {\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n-        spawn(move|| {\n+        let _t = Thread::spawn(move || -> () {\n             set_stderr(box w);\n             panic!(\"my special message\");\n         });"}, {"sha": "7592e7692db0d50db732d57d8bc1302d484bfedc", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,9 +12,10 @@\n \n #![macro_escape]\n \n+use prelude::v1::*;\n+\n use libc;\n use os;\n-use prelude::*;\n use std::io::net::ip::*;\n use sync::atomic::{AtomicUint, INIT_ATOMIC_UINT, Relaxed};\n "}, {"sha": "2067a97fdacf906f35725ee5bad0256899ea7c16", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -225,9 +225,10 @@ fn in_ms_u64(d: Duration) -> u64 {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use super::Timer;\n+    use thread::Thread;\n     use time::Duration;\n \n     #[test]\n@@ -357,9 +358,9 @@ mod test {\n         let mut timer = Timer::new().unwrap();\n         let timer_rx = timer.periodic(Duration::milliseconds(1000));\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let _ = timer_rx.recv_opt();\n-        });\n+        }).detach();\n \n         // when we drop the TimerWatcher we're going to destroy the channel,\n         // which must wake up the task on the other end\n@@ -371,9 +372,9 @@ mod test {\n         let mut timer = Timer::new().unwrap();\n         let timer_rx = timer.periodic(Duration::milliseconds(1000));\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let _ = timer_rx.recv_opt();\n-        });\n+        }).detach();\n \n         timer.oneshot(Duration::milliseconds(1));\n     }\n@@ -384,9 +385,9 @@ mod test {\n         let mut timer = Timer::new().unwrap();\n         let timer_rx = timer.periodic(Duration::milliseconds(1000));\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let _ = timer_rx.recv_opt();\n-        });\n+        }).detach();\n \n         timer.sleep(Duration::milliseconds(1));\n     }"}, {"sha": "36986b8fdc5e54540171f5a28f46d9bec8debf85", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,7 +10,7 @@\n \n //! Utility implementations of Reader and Writer\n \n-use prelude::*;\n+use prelude::v1::*;\n use cmp;\n use io;\n use slice::bytes::MutableByteVector;\n@@ -278,11 +278,11 @@ impl<T: Iterator<u8>> Reader for IterReader<T> {\n \n #[cfg(test)]\n mod test {\n+    use prelude::v1::*;\n+\n     use io::{MemReader, ByRefReader};\n     use io;\n-    use boxed::Box;\n     use super::*;\n-    use prelude::{Ok, range, Vec, Buffer, Writer, Reader, ToString, AsSlice};\n \n     #[test]\n     fn test_limit_reader_unlimited() {"}, {"sha": "8beb002cf4899dcf492f91f6f8ad910538cd60c7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -265,6 +265,7 @@ mod std {\n     pub use cell; // used for tls!\n     pub use thread_local; // used for thread_local!\n     pub use kinds; // used for tls!\n+    pub use ops; // used for bitflags!\n \n     // The test runner calls ::std::os::args() but really wants realstd\n     #[cfg(test)] pub use realstd::os as os;"}, {"sha": "fa77ae6418dd30a6cf21b95675c12565d26c8ad1", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -334,6 +334,7 @@ macro_rules! vec {\n ///\n /// ```\n /// use std::thread::Thread;\n+/// use std::comm::channel;\n ///\n /// let (tx1, rx1) = channel();\n /// let (tx2, rx2) = channel();"}, {"sha": "6de49c38b732e98b6195de7e6d7d5210a802c7df", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,7 +15,7 @@\n #![allow(unsigned_negation)]\n #![doc(primitive = \"f32\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use intrinsics;\n use libc::c_int;"}, {"sha": "50855d21b4ab89aac9a618ad40e99fa7dd912855", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -14,7 +14,7 @@\n #![allow(missing_docs)]\n #![doc(primitive = \"f64\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use intrinsics;\n use libc::c_int;"}, {"sha": "01aa21c692bf54cce2047b2cfd694ee89262932f", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -147,10 +147,8 @@ pub fn test_num<T>(ten: T, two: T) where\n \n #[cfg(test)]\n mod tests {\n-    use prelude::{range, Some, None, Option, IteratorExt};\n-    use super::{from_int, from_uint, from_i32, from_i64, from_u64, from_u32};\n-    use super::{from_f64, from_f32, from_u16, from_i16, from_u8, from_i8, Int};\n-    use super::{cast, NumCast, ToPrimitive, FromPrimitive, UnsignedInt};\n+    use prelude::v1::*;\n+    use super::*;\n     use i8;\n     use i16;\n     use i32;\n@@ -802,7 +800,7 @@ mod bench {\n     extern crate test;\n     use self::test::Bencher;\n     use num::Int;\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     #[bench]\n     fn bench_pow_function(b: &mut Bencher) {"}, {"sha": "b52e4fda7af2c8c2af4aa104e5fe4f58e9b5c0a6", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -49,8 +49,9 @@ pub fn to_str_bytes<U, F>(n: $T, radix: uint, f: F) -> U where\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use num::FromStrRadix;\n+    use str::from_str;\n \n     #[test]\n     pub fn test_from_str() {"}, {"sha": "bceae6102165e322dbb158a6dd9bdc88be549145", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -1427,7 +1427,7 @@ mod arch_consts {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use option;\n     use os::{env, getcwd, getenv, make_absolute};\n     use os::{split_paths, join_paths, setenv, unsetenv};"}, {"sha": "024dc56073d04b4d189c5e6c7572287bf2d93cec", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -931,7 +931,9 @@ fn contains_nul<T: BytesContainer>(v: &T) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n+    use c_str::ToCStr;\n+    use path::{WindowsPath, PosixPath};\n \n     #[test]\n     fn test_cstring() {"}, {"sha": "102da31a2933a46e473d80b1949a965c4efa2e1c", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -448,10 +448,15 @@ static dot_dot_static: &'static [u8] = b\"..\";\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use prelude::Option::{mod, Some, None};\n-    use prelude::{Vec, Clone, AsSlice, SliceExt, CloneSliceExt, IteratorExt};\n-    use prelude::{DoubleEndedIteratorExt, Str, StrExt, ToString, GenericPath};\n-    use str;\n+\n+    use clone::Clone;\n+    use iter::{IteratorExt, DoubleEndedIteratorExt};\n+    use option::Option::{mod, Some, None};\n+    use path::GenericPath;\n+    use slice::{AsSlice, SliceExt, CloneSliceExt};\n+    use str::{mod, Str, StrExt};\n+    use string::ToString;\n+    use vec::Vec;\n \n     macro_rules! t {\n         (s: $path:expr, $exp:expr) => (\n@@ -1239,7 +1244,7 @@ mod bench {\n     extern crate test;\n     use self::test::Bencher;\n     use super::*;\n-    use prelude::{Clone, GenericPath};\n+    use prelude::v1::{Clone, GenericPath};\n \n     #[bench]\n     fn join_home_dir(b: &mut Bencher) {"}, {"sha": "107e9d80fc3d36f693a0d919c7b9c4262ced2774", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -1120,12 +1120,18 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use prelude::Option::{mod, Some, None};\n-    use prelude::{Vec, Clone, AsSlice, SliceExt, CloneSliceExt, IteratorExt};\n-    use prelude::{DoubleEndedIteratorExt, Str, ToString, GenericPath};\n     use super::PathPrefix::*;\n     use super::parse_prefix;\n \n+    use clone::Clone;\n+    use iter::{IteratorExt, DoubleEndedIteratorExt};\n+    use option::Option::{mod, Some, None};\n+    use path::GenericPath;\n+    use slice::{AsSlice, SliceExt, CloneSliceExt};\n+    use str::Str;\n+    use string::ToString;\n+    use vec::Vec;\n+\n     macro_rules! t {\n         (s: $path:expr, $exp:expr) => (\n             {"}, {"sha": "f016683e3d0a99991cf5f07db5befa71e6edb27e", "filename": "src/libstd/prelude.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/71b46b18a274edc7f7fb60b490e5ebbb9c911462/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b46b18a274edc7f7fb60b490e5ebbb9c911462/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=71b46b18a274edc7f7fb60b490e5ebbb9c911462", "patch": "@@ -1,94 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The Rust prelude\n-//!\n-//! Because `std` is required by most serious Rust software, it is\n-//! imported at the topmost level of every crate by default, as if the\n-//! first line of each crate was\n-//!\n-//! ```ignore\n-//! extern crate std;\n-//! ```\n-//!\n-//! This means that the contents of std can be accessed from any context\n-//! with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n-//! etc.\n-//!\n-//! Additionally, `std` contains a `prelude` module that reexports many of the\n-//! most common traits, types and functions. The contents of the prelude are\n-//! imported into every *module* by default.  Implicitly, all modules behave as if\n-//! they contained the following prologue:\n-//!\n-//! ```ignore\n-//! use std::prelude::*;\n-//! ```\n-//!\n-//! The prelude is primarily concerned with exporting *traits* that are so\n-//! pervasive that it would be obnoxious to import for every use, particularly\n-//! those that define methods on primitive types. It does include a few\n-//! particularly useful standalone functions, like `from_str`, `range`, and\n-//! `drop`, `spawn`, and `channel`.\n-\n-#![experimental]\n-\n-// Reexported core operators\n-#[doc(no_inline)] pub use kinds::{Copy, Send, Sized, Sync};\n-#[doc(no_inline)] pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n-#[doc(no_inline)] pub use ops::{BitAnd, BitOr, BitXor};\n-#[doc(no_inline)] pub use ops::{Drop, Deref, DerefMut};\n-#[doc(no_inline)] pub use ops::{Shl, Shr};\n-#[doc(no_inline)] pub use ops::{Index, IndexMut};\n-#[doc(no_inline)] pub use ops::{Slice, SliceMut};\n-#[doc(no_inline)] pub use ops::{Fn, FnMut, FnOnce};\n-\n-// Reexported functions\n-#[doc(no_inline)] pub use iter::range;\n-#[doc(no_inline)] pub use mem::drop;\n-#[doc(no_inline)] pub use str::from_str;\n-\n-// Reexported types and traits\n-\n-#[doc(no_inline)] pub use borrow::IntoCow;\n-#[doc(no_inline)] pub use c_str::ToCStr;\n-#[doc(no_inline)] pub use char::{Char, UnicodeChar};\n-#[doc(no_inline)] pub use clone::Clone;\n-#[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-#[doc(no_inline)] pub use cmp::{Ordering, Equiv};\n-#[doc(no_inline)] pub use cmp::Ordering::{Less, Equal, Greater};\n-#[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSizeIterator};\n-#[doc(no_inline)] pub use iter::{Iterator, IteratorExt, DoubleEndedIterator};\n-#[doc(no_inline)] pub use iter::{DoubleEndedIteratorExt, CloneIteratorExt};\n-#[doc(no_inline)] pub use iter::{RandomAccessIterator, IteratorCloneExt, IteratorPairExt};\n-#[doc(no_inline)] pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator};\n-#[doc(no_inline)] pub use num::{ToPrimitive, FromPrimitive};\n-#[doc(no_inline)] pub use boxed::Box;\n-#[doc(no_inline)] pub use option::Option;\n-#[doc(no_inline)] pub use option::Option::{Some, None};\n-#[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n-#[doc(no_inline)] pub use ptr::{PtrExt, MutPtrExt};\n-#[doc(no_inline)] pub use result::Result;\n-#[doc(no_inline)] pub use result::Result::{Ok, Err};\n-#[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n-#[doc(no_inline)] pub use core::prelude::{Tuple1, Tuple2, Tuple3, Tuple4};\n-#[doc(no_inline)] pub use core::prelude::{Tuple5, Tuple6, Tuple7, Tuple8};\n-#[doc(no_inline)] pub use core::prelude::{Tuple9, Tuple10, Tuple11, Tuple12};\n-#[doc(no_inline)] pub use str::{Str, StrExt};\n-#[doc(no_inline)] pub use slice::AsSlice;\n-#[doc(no_inline)] pub use slice::{SliceConcatExt, PartialEqSliceExt};\n-#[doc(no_inline)] pub use slice::{CloneSliceExt, OrdSliceExt, SliceExt};\n-#[doc(no_inline)] pub use slice::{BoxedSliceExt};\n-#[doc(no_inline)] pub use string::{IntoString, String, ToString};\n-#[doc(no_inline)] pub use vec::Vec;\n-\n-// Reexported runtime types\n-#[doc(no_inline)] pub use comm::{sync_channel, channel};\n-#[doc(no_inline)] pub use comm::{SyncSender, Sender, Receiver};\n-#[doc(no_inline)] pub use task::spawn;"}, {"sha": "da945b4c9fa084673605af4e30391c99d64cdd64", "filename": "src/libstd/prelude/mod.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The Rust prelude\n+//!\n+//! Because `std` is required by most serious Rust software, it is\n+//! imported at the topmost level of every crate by default, as if the\n+//! first line of each crate was\n+//!\n+//! ```ignore\n+//! extern crate std;\n+//! ```\n+//!\n+//! This means that the contents of std can be accessed from any context\n+//! with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n+//! etc.\n+//!\n+//! Additionally, `std` contains a `prelude` module that reexports many of the\n+//! most common traits, types and functions. The contents of the prelude are\n+//! imported into every *module* by default.  Implicitly, all modules behave as if\n+//! they contained the following prologue:\n+//!\n+//! ```ignore\n+//! use std::prelude::v1::*;\n+//! ```\n+//!\n+//! The prelude is primarily concerned with exporting *traits* that are so\n+//! pervasive that it would be obnoxious to import for every use, particularly\n+//! those that define methods on primitive types.\n+\n+#[cfg(stage0)]\n+pub use self::v1::*;\n+\n+#[stable]\n+pub mod v1;"}, {"sha": "33146f5e622ea02c991fc57a2b9fcb3f0ad7430d", "filename": "src/libstd/prelude/v1.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The first version of the prelude of the standard library.\n+\n+#![stable]\n+\n+// Reexported core operators\n+#[stable] #[doc(no_inline)] pub use kinds::{Copy, Send, Sized, Sync};\n+#[stable] #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n+\n+// Reexported functions\n+#[stable] #[doc(no_inline)] pub use mem::drop;\n+\n+// Reexported types and traits\n+\n+#[stable] #[doc(no_inline)] pub use boxed::Box;\n+#[stable] #[doc(no_inline)] pub use char::{Char, UnicodeChar};\n+#[stable] #[doc(no_inline)] pub use clone::Clone;\n+#[stable] #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n+#[stable] #[doc(no_inline)] pub use iter::CloneIteratorExt;\n+#[stable] #[doc(no_inline)] pub use iter::DoubleEndedIterator;\n+#[stable] #[doc(no_inline)] pub use iter::DoubleEndedIteratorExt;\n+#[stable] #[doc(no_inline)] pub use iter::ExactSizeIterator;\n+#[stable] #[doc(no_inline)] pub use iter::{Iterator, IteratorExt, Extend};\n+#[stable] #[doc(no_inline)] pub use iter::{IteratorCloneExt, IteratorOrdExt};\n+#[stable] #[doc(no_inline)] pub use iter::IteratorPairExt;\n+#[stable] #[doc(no_inline)] pub use option::Option::{mod, Some, None};\n+#[stable] #[doc(no_inline)] pub use ptr::{PtrExt, MutPtrExt};\n+#[stable] #[doc(no_inline)] pub use result::Result::{mod, Ok, Err};\n+#[stable] #[doc(no_inline)] pub use slice::AsSlice;\n+#[stable] #[doc(no_inline)] pub use slice::{BoxedSliceExt, SliceExt};\n+#[stable] #[doc(no_inline)] pub use slice::{CloneSliceExt, OrdSliceExt};\n+#[stable] #[doc(no_inline)] pub use slice::{PartialEqSliceExt, SliceConcatExt};\n+#[stable] #[doc(no_inline)] pub use str::{Str, StrExt};\n+#[stable] #[doc(no_inline)] pub use string::{String, ToString};\n+#[stable] #[doc(no_inline)] pub use vec::Vec;\n+\n+// NB: remove when path reform lands\n+#[doc(no_inline)] pub use path::{Path, GenericPath};\n+// NB: remove when I/O reform lands\n+#[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n+// NB: remove when range syntax lands\n+#[doc(no_inline)] pub use iter::range;"}, {"sha": "86b8bfc73709d6998f722d098b85fb3cf36752cc", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -419,7 +419,7 @@ pub fn sample<T, I: Iterator<T>, R: Rng>(rng: &mut R,\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::{Rng, thread_rng, random, SeedableRng, StdRng, sample};\n     use iter::order;\n \n@@ -615,7 +615,7 @@ static RAND_BENCH_N: u64 = 100;\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use self::test::Bencher;\n     use super::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};"}, {"sha": "6576f1b65261ef309468102aeab183bbf5bcf8a6", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -338,10 +338,11 @@ mod imp {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n-    use super::OsRng;\n+    use comm::channel;\n     use rand::Rng;\n+    use super::OsRng;\n     use thread::Thread;\n \n     #[test]"}, {"sha": "48d7f2e7854da0421270185094414ab2a661fc87", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -74,7 +74,7 @@ impl<R: Reader> Rng for ReaderRng<R> {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use super::ReaderRng;\n     use io::MemReader;"}, {"sha": "4734a39c8354257a6fa21ed236160c8f42b964e5", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -44,7 +44,7 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n mod imp {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use mem;\n     use slice;\n@@ -107,7 +107,7 @@ mod imp {\n \n     #[cfg(test)]\n     mod tests {\n-        use prelude::*;\n+        use prelude::v1::*;\n         use finally::Finally;\n \n         use super::*;"}, {"sha": "4abef6ee9104620ddd26c1d3d99ac1603d602e65", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(non_camel_case_types)]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use os;\n use sync::atomic;\n@@ -39,7 +39,7 @@ pub fn log_enabled() -> bool {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use sys_common;\n     macro_rules! t { ($a:expr, $b:expr) => ({\n         let mut m = Vec::new();"}, {"sha": "eb6b36554445767def015a22d71dfaf61abdfece", "filename": "src/libstd/rt/exclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fexclusive.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -83,7 +83,7 @@ impl<'a, T: Send> DerefMut<T> for ExclusiveGuard<'a, T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use sync::Arc;\n     use super::Exclusive;\n     use task;"}, {"sha": "68aaa1b3ae55dc38e239853dfcb10ab5e93315c9", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -23,14 +23,10 @@\n \n #![allow(dead_code)]\n \n-use os;\n-use thunk::Thunk;\n use kinds::Send;\n-use thread::Thread;\n use ops::FnOnce;\n use sys;\n-use sys_common;\n-use sys_common::thread_info::{mod, NewThread};\n+use thunk::Thunk;\n \n // Reexport some of our utilities which are expected by other crates.\n pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n@@ -65,9 +61,14 @@ const OS_DEFAULT_STACK_ESTIMATE: uint = 2 * (1 << 20);\n #[cfg(not(test))]\n #[lang = \"start\"]\n fn lang_start(main: *const u8, argc: int, argv: *const *const u8) -> int {\n+    use prelude::v1::*;\n+\n     use mem;\n-    use prelude::*;\n+    use os;\n     use rt;\n+    use sys_common::thread_info::{mod, NewThread};\n+    use sys_common;\n+    use thread::Thread;\n \n     let something_around_the_top_of_the_stack = 1;\n     let addr = &something_around_the_top_of_the_stack as *const int;"}, {"sha": "48cdfc20a351a8eacf10e57a7825172e072315dc", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -496,7 +496,7 @@ impl Death {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use prelude::*;\n+    use prelude::v1::*;\n     use task;\n     use rt::unwind;\n "}, {"sha": "dcd967a774cf6c388fa4a0251fc5eec9dbd008fc", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -57,7 +57,7 @@\n //!\n //! Currently Rust uses unwind runtime provided by libgcc.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use any::Any;\n use cell::Cell;"}, {"sha": "2a8deccb5dc930929b84852923edcaac69b7aea2", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,13 +10,12 @@\n //\n // ignore-lexer-test FIXME #15677\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cmp;\n use fmt;\n use intrinsics;\n-use libc::uintptr_t;\n-use libc;\n+use libc::{mod, uintptr_t};\n use os;\n use slice;\n use str;"}, {"sha": "a88932f21cba30f412cfb6a7b1ef22074334bc03", "filename": "src/libstd/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomic.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -180,7 +180,7 @@ impl<T: Send> Drop for AtomicOption<T> {\n \n #[cfg(test)]\n mod test {\n-    use prelude::{Some, None};\n+    use prelude::v1::*;\n     use super::*;\n \n     #[test]"}, {"sha": "1c73bf7cf35657ab9d72f560551a2232ff5638ca", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -89,10 +89,11 @@ impl Barrier {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use sync::{Arc, Barrier};\n-    use comm::Empty;\n+    use comm::{channel, Empty};\n+    use thread::Thread;\n \n     #[test]\n     fn test_barrier() {\n@@ -102,10 +103,10 @@ mod tests {\n         for _ in range(0u, 9) {\n             let c = barrier.clone();\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 c.wait();\n                 tx.send(true);\n-            });\n+            }).detach();\n         }\n \n         // At this point, all spawned tasks should be blocked,"}, {"sha": "df3f2e5cf6279bf951e8d26ddab0cc6cbb140ba7", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use sync::atomic::{mod, AtomicUint};\n use sync::poison::{mod, LockResult};\n@@ -279,11 +279,13 @@ impl StaticCondvar {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n-    use time::Duration;\n+    use comm::channel;\n     use super::{StaticCondvar, CONDVAR_INIT};\n     use sync::{StaticMutex, MUTEX_INIT, Condvar, Mutex, Arc};\n+    use thread::Thread;\n+    use time::Duration;\n \n     #[test]\n     fn smoke() {\n@@ -305,8 +307,8 @@ mod tests {\n         static C: StaticCondvar = CONDVAR_INIT;\n         static M: StaticMutex = MUTEX_INIT;\n \n-        let g = M.lock().unwrap();\n-        spawn(move|| {\n+        let mut g = M.lock().unwrap();\n+        let _t = Thread::spawn(move|| {\n             let _g = M.lock().unwrap();\n             C.notify_one();\n         });\n@@ -324,7 +326,7 @@ mod tests {\n         for _ in range(0, N) {\n             let data = data.clone();\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 let &(ref lock, ref cond) = &*data;\n                 let mut cnt = lock.lock().unwrap();\n                 *cnt += 1;\n@@ -335,7 +337,7 @@ mod tests {\n                     cnt = cond.wait(cnt).unwrap();\n                 }\n                 tx.send(());\n-            });\n+            }).detach();\n         }\n         drop(tx);\n \n@@ -359,7 +361,7 @@ mod tests {\n         let g = M.lock().unwrap();\n         let (g, success) = C.wait_timeout(g, Duration::nanoseconds(1000)).unwrap();\n         assert!(!success);\n-        spawn(move|| {\n+        let _t = Thread::spawn(move || {\n             let _g = M.lock().unwrap();\n             C.notify_one();\n         });\n@@ -377,14 +379,13 @@ mod tests {\n         static C: StaticCondvar = CONDVAR_INIT;\n \n         let mut g = M1.lock().unwrap();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _g = M1.lock().unwrap();\n             C.notify_one();\n         });\n         g = C.wait(g).unwrap();\n         drop(g);\n \n         C.wait(M2.lock().unwrap()).unwrap();\n-\n     }\n }"}, {"sha": "a0e7236b8d29a69ce3ec208c1b28d82f22f257a5", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -150,9 +150,10 @@ impl<A:Send> Future<A> {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n+    use comm::channel;\n     use sync::Future;\n-    use task;\n+    use thread::Thread;\n \n     #[test]\n     fn test_from_value() {\n@@ -210,7 +211,7 @@ mod test {\n         let expected = \"schlorf\";\n         let (tx, rx) = channel();\n         let f = Future::spawn(move|| { expected });\n-        task::spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let mut f = f;\n             tx.send(f.get());\n         });"}, {"sha": "98425f26c1af4222ed2571ca4e769cdf290534c3", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cell::UnsafeCell;\n use kinds::marker;\n+use ops::{Deref, DerefMut};\n use sync::poison::{mod, TryLockError, TryLockResult, LockResult};\n use sys_common::mutex as sys;\n \n@@ -47,6 +48,8 @@ use sys_common::mutex as sys;\n /// ```rust\n /// use std::sync::{Arc, Mutex};\n /// use std::thread::Thread;\n+/// use std::comm::channel;\n+///\n /// const N: uint = 10;\n ///\n /// // Spawn a few threads to increment a shared variable (non-atomically), and\n@@ -320,10 +323,11 @@ pub fn guard_poison<'a, T>(guard: &MutexGuard<'a, T>) -> &'a poison::Flag {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n-    use thread::Thread;\n+    use comm::channel;\n     use sync::{Arc, Mutex, StaticMutex, MUTEX_INIT, Condvar};\n+    use thread::Thread;\n \n     struct Packet<T>(Arc<(Mutex<T>, Condvar)>);\n \n@@ -366,9 +370,9 @@ mod test {\n         let (tx, rx) = channel();\n         for _ in range(0, K) {\n             let tx2 = tx.clone();\n-            spawn(move|| { inc(); tx2.send(()); });\n+            Thread::spawn(move|| { inc(); tx2.send(()); }).detach();\n             let tx2 = tx.clone();\n-            spawn(move|| { inc(); tx2.send(()); });\n+            Thread::spawn(move|| { inc(); tx2.send(()); }).detach();\n         }\n \n         drop(tx);\n@@ -392,7 +396,7 @@ mod test {\n         let packet = Packet(Arc::new((Mutex::new(false), Condvar::new())));\n         let packet2 = Packet(packet.0.clone());\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             // wait until parent gets in\n             rx.recv();\n             let &(ref lock, ref cvar) = &*packet2.0;\n@@ -416,7 +420,7 @@ mod test {\n         let packet2 = Packet(packet.0.clone());\n         let (tx, rx) = channel();\n \n-        spawn(move|| {\n+        let _t = Thread::spawn(move || -> () {\n             rx.recv();\n             let &(ref lock, ref cvar) = &*packet2.0;\n             let _g = lock.lock().unwrap();\n@@ -457,9 +461,9 @@ mod test {\n         let arc = Arc::new(Mutex::new(1i));\n         let arc2 = Arc::new(Mutex::new(arc));\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let lock = arc2.lock().unwrap();\n-            let lock2 = lock.deref().lock().unwrap();\n+            let lock2 = lock.lock().unwrap();\n             assert_eq!(*lock2, 1);\n             tx.send(());\n         });"}, {"sha": "fe25eca03d7cf6cfa388eee60de31c5768f04363", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -122,10 +122,11 @@ impl Once {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use thread::Thread;\n     use super::{ONCE_INIT, Once};\n+    use comm::channel;\n \n     #[test]\n     fn smoke_once() {\n@@ -145,7 +146,7 @@ mod test {\n         let (tx, rx) = channel();\n         for _ in range(0u, 10) {\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 for _ in range(0u, 4) { Thread::yield_now() }\n                 unsafe {\n                     O.doit(|| {\n@@ -155,7 +156,7 @@ mod test {\n                     assert!(run);\n                 }\n                 tx.send(());\n-            });\n+            }).detach();\n         }\n \n         unsafe {"}, {"sha": "6e4df1182091febb789c66a67f2564719701c8fc", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cell::UnsafeCell;\n use error::FromError;"}, {"sha": "efdd894a806de024abcc06cf5329185297d62bb7", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cell::UnsafeCell;\n use kinds::marker;\n+use ops::{Deref, DerefMut};\n use sync::poison::{mod, LockResult, TryLockError, TryLockResult};\n use sys_common::rwlock as sys;\n \n@@ -355,9 +356,10 @@ impl<'a, T> Drop for RWLockWriteGuard<'a, T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use rand::{mod, Rng};\n+    use comm::channel;\n     use thread::Thread;\n     use sync::{Arc, RWLock, StaticRWLock, RWLOCK_INIT};\n \n@@ -389,7 +391,7 @@ mod tests {\n         let (tx, rx) = channel::<()>();\n         for _ in range(0, N) {\n             let tx = tx.clone();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 let mut rng = rand::thread_rng();\n                 for _ in range(0, M) {\n                     if rng.gen_weighted_bool(N) {\n@@ -399,7 +401,7 @@ mod tests {\n                     }\n                 }\n                 drop(tx);\n-            });\n+            }).detach();\n         }\n         drop(tx);\n         let _ = rx.recv_opt();"}, {"sha": "a283626a408ba62f040e213cc07c428965f9f9ed", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -104,10 +104,12 @@ impl<'a> Drop for SemaphoreGuard<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use sync::Arc;\n     use super::Semaphore;\n+    use comm::channel;\n+    use thread::Thread;\n \n     #[test]\n     fn test_sem_acquire_release() {\n@@ -127,7 +129,7 @@ mod tests {\n     fn test_sem_as_mutex() {\n         let s = Arc::new(Semaphore::new(1));\n         let s2 = s.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _g = s2.access();\n         });\n         let _g = s.access();\n@@ -139,7 +141,7 @@ mod tests {\n         let (tx, rx) = channel();\n         let s = Arc::new(Semaphore::new(0));\n         let s2 = s.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             s2.acquire();\n             tx.send(());\n         });\n@@ -150,7 +152,7 @@ mod tests {\n         let (tx, rx) = channel();\n         let s = Arc::new(Semaphore::new(0));\n         let s2 = s.clone();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             s2.release();\n             let _ = rx.recv();\n         });\n@@ -166,7 +168,7 @@ mod tests {\n         let s2 = s.clone();\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             let _g = s2.access();\n             let _ = rx2.recv();\n             tx1.send(());\n@@ -183,11 +185,11 @@ mod tests {\n         let (tx, rx) = channel();\n         {\n             let _g = s.access();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 tx.send(());\n                 drop(s2.access());\n                 tx.send(());\n-            });\n+            }).detach();\n             rx.recv(); // wait for child to come alive\n         }\n         rx.recv(); // wait for child to be done"}, {"sha": "63c10c1804659baa6c34a36767994eaa722a7765", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -53,8 +53,9 @@ impl<'a> Drop for Sentinel<'a> {\n /// # Example\n ///\n /// ```rust\n-/// # use std::sync::TaskPool;\n-/// # use std::iter::AdditiveIterator;\n+/// use std::sync::TaskPool;\n+/// use std::iter::AdditiveIterator;\n+/// use std::comm::channel;\n ///\n /// let pool = TaskPool::new(4u);\n ///\n@@ -131,8 +132,9 @@ fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::*;\n+    use comm::channel;\n \n     const TEST_TASKS: uint = 4u;\n "}, {"sha": "d4039fd96ff204c92ae087e0014e3c79cfb8b3fd", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use io::IoResult;\n "}, {"sha": "c4c093dcb328f38739be42204a4e989ea35b5127", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -20,12 +20,13 @@\n //! can be created in the future and there must be no active timers at that\n //! time.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cell::UnsafeCell;\n+use comm::{channel, Sender, Receiver};\n use mem;\n-use sync::{StaticMutex, StaticCondvar};\n use rt;\n+use sync::{StaticMutex, StaticCondvar};\n use sys::helper_signal;\n \n use thread::Thread;"}, {"sha": "97015f74a4a10bec8df2662fea0fbd77c0dc9b90", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,7 +12,7 @@\n #![allow(dead_code)]\n \n use io::{mod, IoError, IoResult};\n-use prelude::*;\n+use prelude::v1::*;\n use sys::{last_error, retry};\n use c_str::CString;\n use num::Int;"}, {"sha": "cb0c5581abd8b34f1238a2dda59aba79d7090ee8", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n use self::SocketStatus::*;\n use self::InAddr::*;\n \n-use alloc::arc::Arc;\n+use c_str::ToCStr;\n+use io::net::addrinfo;\n+use io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};\n+use io::{IoResult, IoError};\n use libc::{mod, c_char, c_int};\n use c_str::CString;\n use mem;\n use num::Int;\n use ptr::{mod, null, null_mut};\n-use io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};\n-use io::net::addrinfo;\n-use io::{IoResult, IoError};\n use sys::{mod, retry, c, sock_t, last_error, last_net_error, last_gai_error, close_sock,\n           wrlen, msglen_t, os, wouldblock, set_nonblocking, timer, ms_to_timeval,\n           decode_error_detailed};\n-use sync::{Mutex, MutexGuard};\n+use sync::{Arc, Mutex, MutexGuard};\n use sys_common::{mod, keep_going, short_write, timeout};\n-use prelude::*;\n use cmp;\n use io;\n "}, {"sha": "405dd4eacf3993a7f74da26d9b0f0490542941ec", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -56,7 +56,7 @@\n \n #![allow(non_camel_case_types)]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use sync::atomic::{mod, AtomicUint};\n use sync::{Mutex, Once, ONCE_INIT};\n@@ -246,7 +246,7 @@ impl Drop for Key {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n     use super::{Key, StaticKey, INIT_INNER};\n \n     fn assert_sync<T: Sync>() {}"}, {"sha": "e3e0b279c12c705e6c438cc766a8cfbcc09e04be", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,16 +10,15 @@\n \n //! Blocking posix-based file I/O\n \n-use libc::{mod, c_int, c_void};\n-use c_str::CString;\n-use mem;\n-use io;\n-\n-use prelude::*;\n+use prelude::v1::*;\n \n+use c_str::{CString, ToCStr};\n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use io::{IoResult, FileStat, SeekStyle};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n+use io;\n+use libc::{mod, c_int, c_void};\n+use mem;\n use sys::retry;\n use sys_common::{keep_going, eof, mkerr_libc};\n \n@@ -360,7 +359,7 @@ mod tests {\n     use super::FileDesc;\n     use libc;\n     use os;\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     #[cfg_attr(target_os = \"freebsd\", ignore)] // hmm, maybe pipes have a tiny buffer\n     #[test]"}, {"sha": "4199cbc1bb9f52242e7fbccf1231e9d3e5a9796a", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -19,7 +19,7 @@ extern crate libc;\n \n use num;\n use num::{Int, SignedInt};\n-use prelude::*;\n+use prelude::v1::*;\n use io::{mod, IoResult, IoError};\n use sys_common::mkerr_libc;\n "}, {"sha": "6d145e47516c7a862ab783152d1ef3d780a881cf", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,17 +10,18 @@\n \n //! Implementation of `std::os` functionality for unix systems\n \n-use prelude::*;\n+use prelude::v1::*;\n \n+use c_str::ToCStr;\n use error::{FromError, Error};\n use fmt;\n use io::{IoError, IoResult};\n use libc::{mod, c_int, c_char, c_void};\n-use path::BytesContainer;\n+use os;\n+use path::{BytesContainer};\n use ptr;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use sys::fs::FileDesc;\n-use os;\n \n use os::TMPBUF_SZ;\n "}, {"sha": "e46814ef4a27d03ca4e7921d16d89509ac0fa0f6", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::arc::Arc;\n+use prelude::v1::*;\n+\n use libc;\n use c_str::CString;\n use mem;\n-use sync::{atomic, Mutex};\n+use sync::{atomic, Arc, Mutex};\n use io::{mod, IoResult, IoError};\n-use prelude::*;\n \n use sys::{mod, timer, retry, c, set_nonblocking, wouldblock};\n use sys::fs::{fd_t, FileDesc};"}, {"sha": "13191961fb7b0c248d44498a0bbaab4c2f49342d", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -7,22 +7,23 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+use prelude::v1::*;\n use self::Req::*;\n \n-use libc::{mod, pid_t, c_void, c_int};\n-use c_str::CString;\n+use c_str::{CString, ToCStr};\n+use collections;\n+use comm::{channel, Sender, Receiver};\n+use hash::Hash;\n+use io::process::{ProcessExit, ExitStatus, ExitSignal};\n use io::{mod, IoResult, IoError, EndOfFile};\n+use libc::{mod, pid_t, c_void, c_int};\n use mem;\n use os;\n-use ptr;\n-use prelude::*;\n-use io::process::{ProcessExit, ExitStatus, ExitSignal};\n-use collections;\n use path::BytesContainer;\n-use hash::Hash;\n-\n-use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval};\n+use ptr;\n use sys::fs::FileDesc;\n+use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval};\n use sys_common::helper_thread::Helper;\n use sys_common::{AsInner, mkerr_libc, timeout};\n "}, {"sha": "13ccf685fd7fc5b0a1e7c321406bce03ab539b10", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use io::net::ip;\n use io::IoResult;\n use libc;\n use mem;\n use ptr;\n-use prelude::*;\n use super::{last_error, last_net_error, retry, sock_t};\n use sync::{Arc, atomic};\n use sys::fs::FileDesc;"}, {"sha": "e507377a8fcdd880a01c5b98ee53145a7463cfaa", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n use libc::c_int;\n \n pub type Key = pthread_key_t;"}, {"sha": "c9160a032ecf7f2824f1f4d924d6482fd634ed5f", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -46,19 +46,19 @@\n //!\n //! Note that all time units in this file are in *milliseconds*.\n \n+use prelude::v1::*;\n use self::Req::*;\n \n+use comm::{mod, channel, Sender, Receiver};\n+use io::IoResult;\n use libc;\n use mem;\n use os;\n use ptr;\n use sync::atomic;\n-use comm;\n use sys::c;\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n-use prelude::*;\n-use io::IoResult;\n \n helper_init! { static HELPER: Helper<Req> }\n "}, {"sha": "4ef687d41d8ee70a23c7fd51099885bcc7c58ffe", "filename": "src/libstd/sys/unix/tty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use sys::fs::FileDesc;\n-use prelude::*;\n use libc::{mod, c_int};\n use io::{mod, IoResult, IoError};\n use sys_common;"}, {"sha": "d28d0fe26b9431a0bb662159d391773cffa2cd13", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,7 +15,7 @@\n #![allow(non_camel_case_types)]\n \n use libc;\n-use prelude::*;\n+use prelude::v1::*;\n \n pub const WSADESCRIPTION_LEN: uint = 256;\n pub const WSASYS_STATUS_LEN: uint = 128;\n@@ -132,7 +132,9 @@ extern \"system\" {\n pub mod compat {\n     use intrinsics::{atomic_store_relaxed, transmute};\n     use libc::types::os::arch::extra::{LPCWSTR, HMODULE, LPCSTR, LPVOID};\n-    use prelude::*;\n+    use prelude::v1::*;\n+\n+    use c_str::ToCStr;\n \n     extern \"system\" {\n         fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;"}, {"sha": "523d60c71aa8b7a2e7c13328da1b91dc27e57a95", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -21,7 +21,7 @@ use ptr;\n use str;\n use io;\n \n-use prelude::*;\n+use prelude::v1::*;\n use sys;\n use sys::os;\n use sys_common::{keep_going, eof, mkerr_libc};"}, {"sha": "c354e7b3ece2927379b2fc5b3f774516fbb47d6d", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -18,11 +18,13 @@\n \n extern crate libc;\n \n+use prelude::v1::*;\n+\n use num;\n use mem;\n-use prelude::*;\n use io::{mod, IoResult, IoError};\n use sync::{Once, ONCE_INIT};\n+use comm::Sender;\n \n macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => (\n     static $name: Helper<$m> = Helper {"}, {"sha": "c7b4a4cec09ecceafe8035b2d130cf1db2adb928", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use sync::atomic;\n use alloc::{mod, heap};"}, {"sha": "dfdee0e0385c5c121ee2db90ea5acc7b694cc909", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,7 +13,7 @@\n // FIXME: move various extern bindings from here into liblibc or\n // something similar\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use fmt;\n use io::{IoResult, IoError};"}, {"sha": "f173d5fc6d4cb5843abce61eff584eba5c5df3b4", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -84,14 +84,14 @@\n //! the test suite passing (the suite is in libstd), and that's good enough for\n //! me!\n \n-use alloc::arc::Arc;\n+use prelude::v1::*;\n+\n use libc;\n use c_str::CString;\n use mem;\n use ptr;\n-use sync::{atomic, Mutex};\n+use sync::{atomic, Arc, Mutex};\n use io::{mod, IoError, IoResult};\n-use prelude::*;\n \n use sys_common::{mod, eof};\n "}, {"sha": "cb99a886ce4fcf5bf249bed08d46aca8e689ac25", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n+\n use libc::{pid_t, c_void, c_int};\n use libc;\n-use c_str::CString;\n+use c_str::{CString, ToCStr};\n use io;\n use mem;\n use os;\n use ptr;\n-use prelude::*;\n use io::process::{ProcessExit, ExitStatus, ExitSignal};\n use collections;\n use path::BytesContainer;\n@@ -466,10 +467,11 @@ fn free_handle(handle: *mut ()) {\n \n #[cfg(test)]\n mod tests {\n+    use c_str::ToCStr;\n \n     #[test]\n     fn test_make_command_line() {\n-        use prelude::*;\n+        use prelude::v1::*;\n         use str;\n         use c_str::CString;\n         use super::make_command_line;"}, {"sha": "5a929f6b2b5ff27aafed24204c774ad654d638c0", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,7 +13,7 @@ use io::IoResult;\n use libc;\n use mem;\n use ptr;\n-use prelude::*;\n+use prelude::v1::*;\n use super::{last_error, last_net_error, retry, sock_t};\n use sync::{Arc, atomic};\n use sys::fs::FileDesc;"}, {"sha": "b96e26c7a86a6feef0d49e98297187d2beaa591d", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use libc::types::os::arch::extra::{DWORD, LPVOID, BOOL};\n "}, {"sha": "485dc251050145a4c644247230806b0b104bf70a", "filename": "src/libstd/sys/windows/timer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -21,16 +21,17 @@\n //! the other two implementations of timers with nothing *that* new showing up.\n \n use self::Req::*;\n+use prelude::v1::*;\n \n use libc;\n use ptr;\n use comm;\n \n+use comm::{channel, Sender, Receiver};\n+use io::IoResult;\n use sys::c;\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n-use prelude::*;\n-use io::IoResult;\n \n helper_init! { static HELPER: Helper<Req> }\n "}, {"sha": "7591025d76d6f4305b4a2c67fee27cae32f83fb0", "filename": "src/libstd/sys/windows/tty.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -25,19 +25,20 @@\n //! wrapper that performs encoding/decoding, this implementation should switch\n //! to working in raw UTF-16, with such a wrapper around it.\n \n-use super::c::{ReadConsoleW, WriteConsoleW, GetConsoleMode, SetConsoleMode};\n-use super::c::{ERROR_ILLEGAL_CHARACTER};\n-use super::c::{ENABLE_ECHO_INPUT, ENABLE_EXTENDED_FLAGS};\n-use super::c::{ENABLE_INSERT_MODE, ENABLE_LINE_INPUT};\n-use super::c::{ENABLE_PROCESSED_INPUT, ENABLE_QUICK_EDIT_MODE};\n-use libc::{c_int, HANDLE, LPDWORD, DWORD, LPVOID};\n-use libc::{get_osfhandle, CloseHandle};\n-use libc::types::os::arch::extra::LPCVOID;\n+use prelude::v1::*;\n+\n use io::{mod, IoError, IoResult, MemReader};\n use iter::repeat;\n-use prelude::*;\n+use libc::types::os::arch::extra::LPCVOID;\n+use libc::{c_int, HANDLE, LPDWORD, DWORD, LPVOID};\n+use libc::{get_osfhandle, CloseHandle};\n use ptr;\n use str::from_utf8;\n+use super::c::{ENABLE_ECHO_INPUT, ENABLE_EXTENDED_FLAGS};\n+use super::c::{ENABLE_INSERT_MODE, ENABLE_LINE_INPUT};\n+use super::c::{ENABLE_PROCESSED_INPUT, ENABLE_QUICK_EDIT_MODE};\n+use super::c::{ERROR_ILLEGAL_CHARACTER};\n+use super::c::{ReadConsoleW, WriteConsoleW, GetConsoleMode, SetConsoleMode};\n \n fn invalid_encoding() -> IoError {\n     IoError {"}, {"sha": "b6e16a8e6abf3ade81aa1f7b8ae554e5ac324726", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -440,13 +440,15 @@ impl<T: Send> Drop for JoinGuard<T> {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n+    use prelude::v1::*;\n+\n     use any::{Any, AnyRefExt};\n     use boxed::BoxAny;\n+    use comm::{channel, Sender};\n     use result;\n     use std::io::{ChanReader, ChanWriter};\n-    use thunk::Thunk;\n     use super::{Thread, Builder};\n+    use thunk::Thunk;\n \n     // !!! These tests are dangerous. If something is buggy, they will hang, !!!\n     // !!! instead of exiting cleanly. This might wedge the buildbots.       !!!"}, {"sha": "9d4e7936de21bb5c063ebcec1c9c35dbf040a797", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -37,7 +37,7 @@\n #![macro_escape]\n #![experimental]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cell::UnsafeCell;\n \n@@ -248,7 +248,7 @@ impl<T: 'static> Key<T> {\n \n #[cfg(any(target_os = \"macos\", target_os = \"linux\"))]\n mod imp {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use cell::UnsafeCell;\n     use intrinsics;\n@@ -380,7 +380,7 @@ mod imp {\n \n #[cfg(not(any(target_os = \"macos\", target_os = \"linux\")))]\n mod imp {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use cell::UnsafeCell;\n     use mem;\n@@ -453,8 +453,9 @@ mod imp {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n+    use comm::{channel, Sender};\n     use cell::UnsafeCell;\n     use thread::Thread;\n \n@@ -476,7 +477,7 @@ mod tests {\n             *f.get() = 2;\n         });\n         let (tx, rx) = channel();\n-        spawn(move|| {\n+        let _t = Thread::spawn(move|| {\n             FOO.with(|f| unsafe {\n                 assert_eq!(*f.get(), 1);\n             });\n@@ -496,7 +497,7 @@ mod tests {\n         });\n \n         let (tx, rx) = channel();\n-        spawn(move|| unsafe {\n+        let _t = Thread::spawn(move|| unsafe {\n             let mut tx = Some(tx);\n             FOO.with(|f| {\n                 *f.get() = Some(Foo(tx.take().unwrap()));\n@@ -546,7 +547,7 @@ mod tests {\n \n         Thread::spawn(move|| {\n             drop(S1);\n-        }).join();\n+        }).join().ok().unwrap();\n     }\n \n     #[test]\n@@ -564,7 +565,7 @@ mod tests {\n \n         Thread::spawn(move|| unsafe {\n             K1.with(|s| *s.get() = Some(S1));\n-        }).join();\n+        }).join().ok().unwrap();\n     }\n \n     #[test]\n@@ -589,7 +590,7 @@ mod tests {\n         }\n \n         let (tx, rx) = channel();\n-        spawn(move|| unsafe {\n+        let _t = Thread::spawn(move|| unsafe {\n             let mut tx = Some(tx);\n             K1.with(|s| *s.get() = Some(S1(tx.take().unwrap())));\n         });\n@@ -599,7 +600,7 @@ mod tests {\n \n #[cfg(test)]\n mod dynamic_tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use cell::RefCell;\n     use collections::HashMap;"}, {"sha": "a2e2bd43849e223566da4c1420ecbd49d4851a8e", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -40,7 +40,7 @@\n \n #![macro_escape]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n // macro hygiene sure would be nice, wouldn't it?\n #[doc(hidden)] pub use self::imp::KeyInner;\n@@ -238,7 +238,7 @@ mod imp {\n #[cfg(test)]\n mod tests {\n     use cell::Cell;\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     scoped_thread_local!(static FOO: uint);\n "}, {"sha": "fc90bffa03c2f77975535bfa3a656baa62d1b687", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -35,14 +35,14 @@\n //!\n //! # Examples\n //!\n-//! Using methods:\n+//! Using fields:\n //!\n //! ```\n //! #[allow(deprecated)]\n //! # fn main() {\n //! let pair = (\"pi\", 3.14f64);\n-//! assert_eq!(pair.val0(), \"pi\");\n-//! assert_eq!(pair.val1(), 3.14f64);\n+//! assert_eq!(pair.0, \"pi\");\n+//! assert_eq!(pair.1, 3.14f64);\n //! # }\n //! ```\n //!"}, {"sha": "5eac6546c6b82676270329955870fccf65a8ee84", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,19 +10,24 @@\n //\n // ignore-lexer-test FIXME #15679\n \n-//! The CodeMap tracks all the source code used within a single crate, mapping from integer byte\n-//! positions to the original source code location. Each bit of source parsed during crate parsing\n-//! (typically files, in-memory strings, or various bits of macro expansion) cover a continuous\n-//! range of bytes in the CodeMap and are represented by FileMaps. Byte positions are stored in\n-//! `spans` and used pervasively in the compiler. They are absolute positions within the CodeMap,\n-//! which upon request can be converted to line and column information, source code snippets, etc.\n+//! The CodeMap tracks all the source code used within a single crate, mapping\n+//! from integer byte positions to the original source code location. Each bit\n+//! of source parsed during crate parsing (typically files, in-memory strings,\n+//! or various bits of macro expansion) cover a continuous range of bytes in the\n+//! CodeMap and are represented by FileMaps. Byte positions are stored in\n+//! `spans` and used pervasively in the compiler. They are absolute positions\n+//! within the CodeMap, which upon request can be converted to line and column\n+//! information, source code snippets, etc.\n \n pub use self::MacroFormat::*;\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::cell::RefCell;\n+use std::num::ToPrimitive;\n+use std::ops::{Add, Sub};\n use std::rc::Rc;\n+\n use libc::c_uint;\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n     fn from_uint(n: uint) -> Self;"}, {"sha": "9f225d55b444fe787bf7d8f73ce40798f4f8fd9e", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,7 +17,6 @@ use ext::base;\n use ext::build::AstBuilder;\n use std::ascii::AsciiExt;\n \n-\n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[ast::TokenTree])"}, {"sha": "e46bd7ac4bc73c07ab63472edc0a2dcd3a6a3988", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -50,8 +50,7 @@ pub mod rt {\n \n     impl<T: ToTokens> ToTokens for Vec<T> {\n         fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-            let a = self.iter().flat_map(|t| t.to_tokens(cx).into_iter());\n-            FromIterator::from_iter(a)\n+            self.iter().flat_map(|t| t.to_tokens(cx).into_iter()).collect()\n         }\n     }\n "}, {"sha": "f7d2331c9ec5850f0cf5740bbf7d0615295f766e", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt;\n use std::default::Default;\n+use std::fmt;\n+use std::iter::FromIterator;\n+use std::ops::Deref;\n use std::vec;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n "}, {"sha": "0f5ff33021cc94867a0f014b177896859ffd7c17", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -16,6 +16,7 @@ use ext::tt::transcribe::tt_next_token;\n use parse::token;\n use parse::token::{str_to_ident};\n \n+use std::borrow::IntoCow;\n use std::char;\n use std::fmt;\n use std::mem::replace;\n@@ -358,7 +359,7 @@ impl<'a> StringReader<'a> {\n \n     pub fn nextnextch(&self) -> Option<char> {\n         let offset = self.byte_offset(self.pos).to_uint();\n-        let s = self.filemap.deref().src[];\n+        let s = self.filemap.src.as_slice();\n         if offset >= s.len() { return None }\n         let str::CharRange { next, .. } = s.char_range_at(offset);\n         if next < s.len() {"}, {"sha": "832b112921e493829f4915b43b96c10ecaec9967", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -84,11 +84,12 @@ use owned_slice::OwnedSlice;\n \n use std::collections::HashSet;\n use std::io::fs::PathExtensions;\n+use std::iter;\n use std::mem;\n use std::num::Float;\n use std::rc::Rc;\n-use std::iter;\n use std::slice;\n+use std::str::from_str;\n \n bitflags! {\n     flags Restrictions: u8 {"}, {"sha": "9c6644c520452548ab0bf18d744c6415d11a977d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -22,8 +22,10 @@ use util::interner::{RcStr, StrInterner};\n use util::interner;\n \n use serialize::{Decodable, Decoder, Encodable, Encoder};\n+use std::cmp::Equiv;\n use std::fmt;\n use std::mem;\n+use std::ops::Deref;\n use std::path::BytesContainer;\n use std::rc::Rc;\n "}, {"sha": "8b1aed483c34f76bc94d7d3698a95a880a475660", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,16 +10,18 @@\n \n //! The AST pointer\n //!\n-//! Provides `P<T>`, a frozen owned smart pointer, as a replacement for `@T` in the AST.\n+//! Provides `P<T>`, a frozen owned smart pointer, as a replacement for `@T` in\n+//! the AST.\n //!\n //! # Motivations and benefits\n //!\n-//! * **Identity**: sharing AST nodes is problematic for the various analysis passes\n-//!   (e.g. one may be able to bypass the borrow checker with a shared `ExprAddrOf`\n-//!   node taking a mutable borrow). The only reason `@T` in the AST hasn't caused\n-//!   issues is because of inefficient folding passes which would always deduplicate\n-//!   any such shared nodes. Even if the AST were to switch to an arena, this would\n-//!   still hold, i.e. it couldn't use `&'a T`, but rather a wrapper like `P<'a, T>`.\n+//! * **Identity**: sharing AST nodes is problematic for the various analysis\n+//!   passes (e.g. one may be able to bypass the borrow checker with a shared\n+//!   `ExprAddrOf` node taking a mutable borrow). The only reason `@T` in the\n+//!   AST hasn't caused issues is because of inefficient folding passes which\n+//!   would always deduplicate any such shared nodes. Even if the AST were to\n+//!   switch to an arena, this would still hold, i.e. it couldn't use `&'a T`,\n+//!   but rather a wrapper like `P<'a, T>`.\n //!\n //! * **Immutability**: `P<T>` disallows mutating its inner `T`, unlike `Box<T>`\n //!   (unless it contains an `Unsafe` interior, but that may be denied later).\n@@ -34,9 +36,9 @@\n //!   implementation changes (using a special thread-local heap, for example).\n //!   Moreover, a switch to, e.g. `P<'a, T>` would be easy and mostly automated.\n \n-use std::fmt;\n-use std::fmt::Show;\n+use std::fmt::{mod, Show};\n use std::hash::Hash;\n+use std::ops::Deref;\n use std::ptr;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n "}, {"sha": "5a4d0cc3bd896cb69c58a07513bc5b2e4674b910", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -152,15 +152,20 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n         let prelude_path = ast::Path {\n             span: DUMMY_SP,\n             global: false,\n-            segments: vec!(\n+            segments: vec![\n                 ast::PathSegment {\n                     identifier: token::str_to_ident(\"std\"),\n                     parameters: ast::PathParameters::none(),\n                 },\n                 ast::PathSegment {\n                     identifier: token::str_to_ident(\"prelude\"),\n                     parameters: ast::PathParameters::none(),\n-                }),\n+                },\n+                ast::PathSegment {\n+                    identifier: token::str_to_ident(\"v1\"),\n+                    parameters: ast::PathParameters::none(),\n+                },\n+            ],\n         };\n \n         let (crates, uses): (Vec<_>, _) = view_items.iter().cloned().partition(|x| {"}, {"sha": "d25161a12a7419b774992d31e609c932473d1ea7", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,10 +15,12 @@\n use ast::Name;\n \n use std::borrow::BorrowFrom;\n-use std::collections::HashMap;\n use std::cell::RefCell;\n+use std::cmp::Ordering;\n+use std::collections::HashMap;\n use std::fmt;\n use std::hash::Hash;\n+use std::ops::Deref;\n use std::rc::Rc;\n \n pub struct Interner<T> {"}, {"sha": "953a7ae960e8c029d27721fbb9105ea7463bab8f", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -7,9 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n use self::SmallVectorRepr::*;\n use self::IntoIterRepr::*;\n \n+use std::iter::FromIterator;\n use std::mem;\n use std::slice;\n use std::vec;"}, {"sha": "87f791e6992337e25f12edc8356f64703334d274", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -49,16 +49,17 @@ use self::TestEvent::*;\n use self::NamePadding::*;\n use self::OutputLocation::*;\n \n-use std::any::{Any, AnyRefExt};\n-use std::collections::BTreeMap;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};\n use regex::Regex;\n use serialize::{json, Decodable, Encodable};\n use term::Terminal;\n use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n+use std::any::{Any, AnyRefExt};\n use std::cmp;\n+use std::collections::BTreeMap;\n+use std::comm::{channel, Sender};\n use std::f64;\n use std::fmt::Show;\n use std::fmt;\n@@ -69,11 +70,10 @@ use std::io;\n use std::iter::repeat;\n use std::num::{Float, FloatMath, Int};\n use std::os;\n-use std::str::FromStr;\n-use std::string::String;\n+use std::str::{FromStr, from_str};\n use std::thread::{mod, Thread};\n-use std::time::Duration;\n use std::thunk::{Thunk, Invoke};\n+use std::time::Duration;\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n@@ -1466,6 +1466,7 @@ mod tests {\n                StaticTestName, DynTestName, DynTestFn, ShouldFail};\n     use std::io::TempDir;\n     use std::thunk::Thunk;\n+    use std::comm::channel;\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {"}, {"sha": "ed6a00a8e9115b9f3832fecb5d448643d9c3179f", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,13 +10,14 @@\n \n #![allow(missing_docs)]\n \n-use std::collections::hash_map;\n+use std::cmp::Ordering::{mod, Less, Greater, Equal};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n+use std::collections::hash_map;\n use std::fmt::Show;\n use std::hash::Hash;\n use std::io;\n use std::mem;\n-use std::num::{Float, FloatMath};\n+use std::num::{Float, FloatMath, FromPrimitive};\n \n fn local_cmp<T:Float>(x: T, y: T) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything."}, {"sha": "a6d9a542a49ede228684ab4181b9f739455080da", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -30,10 +30,9 @@ extern crate libc;\n pub use self::ParseError::*;\n use self::Fmt::*;\n \n-use std::fmt::Show;\n-use std::fmt;\n+use std::fmt::{mod, Show};\n use std::num::SignedInt;\n-use std::string::String;\n+use std::ops::{Add, Sub};\n use std::time::Duration;\n \n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n@@ -1274,6 +1273,7 @@ mod tests {\n     #[cfg(windows)]\n     fn set_time_zone() {\n         use libc;\n+        use std::c_str::ToCStr;\n         // Windows crt doesn't see any environment variable set by\n         // `SetEnvironmentVariable`, which `os::setenv` internally uses.\n         // It is why we use `putenv` here."}, {"sha": "e3dbe3c7e225abd829a7b6e8d3efa70d4f8e2892", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::{Receiver, channel};\n \n pub fn foo<T:Send + Clone>(x: T) -> Receiver<T> {\n     let (tx, rx) = channel();"}, {"sha": "ea4751bf4ed20b07c6b4871b7cfa8aafcbc50c72", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,6 +12,7 @@\n #![crate_type = \"lib\"]\n \n use std::int;\n+use std::str::from_str;\n \n pub trait read {\n     fn readMaybe(s: String) -> Option<Self>;"}, {"sha": "7de34d52f513c235f426c0d53a46e4978f33d37b", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::cmp::PartialEq;\n+use std::ops::{Add, Sub, Mul};\n \n pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone {\n }"}, {"sha": "0b65fa913cb775a32ff44af546d08649f6c3b8ab", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(unboxed_closures)]\n \n+use std::ops::Add;\n+\n #[inline]\n pub fn has_closures() -> uint {\n     let x = 1u;"}, {"sha": "0ada1cb991c6be80682edac8f8df45fb99825605", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,6 +13,7 @@\n use std::collections::{BTreeMap, HashMap, HashSet};\n use std::os;\n use std::rand::{Rng, IsaacRng, SeedableRng};\n+use std::str::from_str;\n use std::time::Duration;\n use std::uint;\n "}, {"sha": "52380001c6c0d4da69e9f38b729ac0ef376dfa09", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,11 +15,12 @@\n extern crate collections;\n extern crate rand;\n \n+use std::collections::BTreeSet;\n use std::collections::BitvSet;\n use std::collections::HashSet;\n-use std::collections::BTreeSet;\n use std::hash::Hash;\n use std::os;\n+use std::str::from_str;\n use std::time::Duration;\n use std::uint;\n "}, {"sha": "08637b4bf1c1c5777c291c2e45ed0e3ed64678e1", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::os;\n+use std::str::from_str;\n use std::uint;\n \n fn main() {"}, {"sha": "94b7e58a54c1c9d56736c975dff98932120302fd", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -18,8 +18,10 @@\n // different scalability characteristics compared to the select\n // version.\n \n+use std::comm::{channel, Sender, Receiver};\n use std::comm;\n use std::os;\n+use std::str::from_str;\n use std::thread::Thread;\n use std::time::Duration;\n use std::uint;"}, {"sha": "4fb84c8610695e85d2c55d6a91371e9a4310f1b9", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -14,7 +14,9 @@\n //\n // I *think* it's the same, more or less.\n \n+use std::comm::{channel, Sender, Receiver};\n use std::os;\n+use std::str::from_str;\n use std::thread::Thread;\n use std::time::Duration;\n use std::uint;"}, {"sha": "3ead5ef64fd9953b41ed1957f75a403207a32dc4", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -19,6 +19,7 @@\n // ignore-lexer-test FIXME #15679\n \n use std::os;\n+use std::str::from_str;\n use std::sync::{Arc, Future, Mutex, Condvar};\n use std::time::Duration;\n use std::uint;"}, {"sha": "d3a340d488b57e084aa6cb9a3e2845685653ac80", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,7 +17,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n use std::os;\n+use std::str::from_str;\n+use std::thread::Thread;\n use std::uint;\n \n // This is a simple bench that creates M pairs of tasks. These\n@@ -34,21 +37,21 @@ fn ping_pong_bench(n: uint, m: uint) {\n         // Create a stream B->A\n         let (btx, brx) = channel::<()>();\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let (tx, rx) = (atx, brx);\n             for _ in range(0, n) {\n                 tx.send(());\n                 rx.recv();\n             }\n-        });\n+        }).detach();\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let (tx, rx) = (btx, arx);\n             for _ in range(0, n) {\n                 rx.recv();\n                 tx.send(());\n             }\n-        });\n+        }).detach();\n     }\n \n     for _ in range(0, m) {"}, {"sha": "0a513c32aafc827d9ad4ce1cb2733aebee20ef6c", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n use std::os;\n+use std::str::from_str;\n+use std::thread::Thread;\n use std::uint;\n \n // A simple implementation of parfib. One subtree is found in a new\n@@ -21,9 +24,9 @@ fn parfib(n: uint) -> uint {\n     }\n \n     let (tx, rx) = channel();\n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         tx.send(parfib(n-1));\n-    });\n+    }).detach();\n     let m2 = parfib(n-2);\n     return (rx.recv() + m2);\n }"}, {"sha": "f7810d5d740c0cb4adec5a0e3777047c4063e75f", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::os;\n+use std::str::from_str;\n \n fn ack(m: int, n: int) -> int {\n     if m == 0 {"}, {"sha": "2f25c37a911df3da6692bb1a76a074e26dd6fbb8", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -41,7 +41,9 @@\n extern crate arena;\n \n use std::iter::range_step;\n+use std::str::from_str;\n use std::sync::Future;\n+\n use arena::TypedArena;\n \n enum Tree<'a> {"}, {"sha": "6bbf6cde4ea29f37b03bcc61a0a1357c9209c673", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -41,8 +41,10 @@\n // no-pretty-expanded\n \n use self::Color::{Red, Yellow, Blue};\n-use std::string::String;\n+use std::comm::{channel, Sender, Receiver};\n use std::fmt;\n+use std::str::from_str;\n+use std::thread::Thread;\n \n fn print_complements() {\n     let all = [Blue, Red, Yellow];\n@@ -188,13 +190,13 @@ fn rendezvous(nn: uint, set: Vec<Color>) {\n             let to_rendezvous = to_rendezvous.clone();\n             let to_rendezvous_log = to_rendezvous_log.clone();\n             let (to_creature, from_rendezvous) = channel();\n-            spawn(move|| {\n+            Thread::spawn(move|| {\n                 creature(ii,\n                          col,\n                          from_rendezvous,\n                          to_rendezvous,\n                          to_rendezvous_log);\n-            });\n+            }).detach();\n             to_creature\n         }).collect();\n "}, {"sha": "ec1268c90803be7acb289fd229393d19feebe231", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -40,8 +40,9 @@\n \n #![feature(slicing_syntax)]\n \n-use std::{cmp, iter, mem};\n+use std::str::from_str;\n use std::sync::Future;\n+use std::{cmp, iter, mem};\n \n fn rotate(x: &mut [i32]) {\n     let mut prev = x[0];"}, {"sha": "09f7f236f19a79e4844deed1a7c159e4d1039d6c", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -44,6 +44,7 @@ use std::cmp::min;\n use std::io::{stdout, IoResult};\n use std::os;\n use std::slice::bytes::copy_memory;\n+use std::str::from_str;\n \n const LINE_LEN: uint = 60;\n const LOOKUP_SIZE: uint = 4 * 1024;"}, {"sha": "7009dd4c1a76fa8fde1700721ade27606a10536f", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -40,11 +40,12 @@\n \n #![feature(slicing_syntax)]\n \n-use std::io;\n-use std::io::{BufferedWriter, File};\n use std::cmp::min;\n+use std::io::{BufferedWriter, File};\n+use std::io;\n use std::num::Float;\n use std::os;\n+use std::str::from_str;\n \n const LINE_LENGTH: uint = 60;\n const IM: u32 = 139968;"}, {"sha": "cbacf415f6f7fcef98d597fca54627bca86e6701", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::os;\n+use std::str::from_str;\n \n fn fib(n: int) -> int {\n     if n < 2 {"}, {"sha": "b59eef916dc095a93b800d8a7d9002f57d9a0225", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -18,12 +18,15 @@\n extern crate collections;\n \n use std::ascii::{AsciiExt, OwnedAsciiExt};\n+use std::cmp::Ordering::{mod, Less, Greater, Equal};\n use std::collections::HashMap;\n+use std::comm::{channel, Sender, Receiver};\n use std::mem::replace;\n use std::num::Float;\n use std::option;\n use std::os;\n-use std::string::String;\n+use std::string::IntoString;\n+use std::thread::Thread;\n \n fn f64_cmp(x: f64, y: f64) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything.\n@@ -167,9 +170,9 @@ fn main() {\n \n         let (to_child, from_parent) = channel();\n \n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             make_sequence_processor(sz, &from_parent, &to_parent_);\n-        });\n+        }).detach();\n \n         to_child\n     }).collect::<Vec<Sender<Vec<u8> >> >();"}, {"sha": "3dc51805917127c9d0f75b8155c1d9a520f8718d", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -43,7 +43,6 @@\n #![feature(slicing_syntax)]\n \n use std::ascii::OwnedAsciiExt;\n-use std::string::String;\n use std::slice;\n use std::sync::{Arc, Future};\n "}, {"sha": "51ce4cbaa841d022adbdf447009cffb9fa67cc9e", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -47,6 +47,7 @@\n use std::io;\n use std::os;\n use std::simd::f64x2;\n+use std::str::from_str;\n use std::sync::{Arc, Future};\n \n const ITER: int = 50;"}, {"sha": "2e229a50d16ef60574e98cd372158c9c8b62a263", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -40,7 +40,9 @@\n \n // no-pretty-expanded FIXME #15189\n \n+use std::comm::channel;\n use std::sync::Arc;\n+use std::thread::Thread;\n \n //\n // Utilities.\n@@ -310,11 +312,11 @@ fn par_search(masks: Vec<Vec<Vec<u64>>>) -> Data {\n         let masks = masks.clone();\n         let tx = tx.clone();\n         let m = *m;\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let mut data = Data::new();\n             search(&*masks, m, 1, List::Cons(m, &List::Nil), &mut data);\n             tx.send(data);\n-        });\n+        }).detach();\n     }\n \n     // collecting the results"}, {"sha": "6a325798f5805a71a62953c7fe71d9e7f12b75d9", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -39,6 +39,7 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n use std::num::Float;\n+use std::str::from_str;\n \n const PI: f64 = 3.141592653589793;\n const SOLAR_MASS: f64 = 4.0 * PI * PI;"}, {"sha": "e58303a724adbd178903fb5de49291f648a11264", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -20,8 +20,10 @@\n \n extern crate getopts;\n \n+use std::comm::{channel, Sender};\n use std::os;\n use std::result::Result::{Ok, Err};\n+use std::str::from_str;\n use std::thread::Thread;\n use std::time::Duration;\n "}, {"sha": "d9dfd65d5b34bd49fec61bf02444ec5b97ca2222", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -45,9 +45,10 @@\n extern crate libc;\n \n use std::io::stdio::{stdin_raw, stdout_raw};\n+use std::io::{IoResult, EndOfFile};\n use std::num::{div_rem};\n use std::ptr::{copy_memory, Unique};\n-use std::io::{IoResult, EndOfFile};\n+use std::thread::Thread;\n \n struct Tables {\n     table8: [u8;1 << 8],\n@@ -229,26 +230,20 @@ unsafe impl<T: 'static> Send for Racy<T> {}\n fn parallel<'a, I, T, F>(mut iter: I, f: F)\n         where T: 'a+Send + Sync,\n               I: Iterator<&'a mut [T]>,\n-              F: Fn(&'a mut [T]) + Sync {\n+              F: Fn(&mut [T]) + Sync {\n     use std::mem;\n     use std::raw::Repr;\n \n-    let (tx, rx) = channel();\n-    for chunk in iter {\n-        let tx = tx.clone();\n-\n+    iter.map(|chunk| {\n         // Need to convert `f` and `chunk` to something that can cross the task\n         // boundary.\n         let f = Racy(&f as *const F as *const uint);\n         let raw = Racy(chunk.repr());\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let f = f.0 as *const F;\n             unsafe { (*f)(mem::transmute(raw.0)) }\n-            drop(tx)\n-        });\n-    }\n-    drop(tx);\n-    for () in rx.iter() {}\n+        })\n+    }).collect::<Vec<_>>();\n }\n \n fn main() {"}, {"sha": "a5af1227a165de5efdebda356b655310f16081b2", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -44,11 +44,13 @@\n #![feature(unboxed_closures)]\n \n use std::iter::AdditiveIterator;\n+use std::thread::Thread;\n use std::mem;\n use std::num::Float;\n use std::os;\n use std::raw::Repr;\n use std::simd::f64x2;\n+use std::str::from_str;\n \n fn main() {\n     let args = os::args();\n@@ -80,14 +82,15 @@ fn mult_AtAv(v: &[f64], out: &mut [f64], tmp: &mut [f64]) {\n }\n \n fn mult_Av(v: &[f64], out: &mut [f64]) {\n-    parallel(out, |&: start, out| mult(v, out, start, |i, j| A(i, j)));\n+    parallel(out, |start, out| mult(v, out, start, |i, j| A(i, j)));\n }\n \n fn mult_Atv(v: &[f64], out: &mut [f64]) {\n-    parallel(out, |&: start, out| mult(v, out, start, |i, j| A(j, i)));\n+    parallel(out, |start, out| mult(v, out, start, |i, j| A(j, i)));\n }\n \n-fn mult(v: &[f64], out: &mut [f64], start: uint, a: |uint, uint| -> f64) {\n+fn mult<F>(v: &[f64], out: &mut [f64], start: uint, a: F)\n+           where F: Fn(uint, uint) -> f64 {\n     for (i, slot) in out.iter_mut().enumerate().map(|(i, s)| (i + start, s)) {\n         let mut sum = f64x2(0.0, 0.0);\n         for (j, chunk) in v.chunks(2).enumerate().map(|(j, s)| (2 * j, s)) {\n@@ -116,25 +119,19 @@ unsafe impl<T: 'static> Send for Racy<T> {}\n // Executes a closure in parallel over the given mutable slice. The closure `f`\n // is run in parallel and yielded the starting index within `v` as well as a\n // sub-slice of `v`.\n-fn parallel<'a, T, F>(v: &'a mut [T], f: F)\n-                      where T: Send + Sync,\n-                            F: Fn(uint, &'a mut [T]) + Sync {\n-    let (tx, rx) = channel();\n+fn parallel<T, F>(v: &mut [T], f: F)\n+                  where T: Send + Sync,\n+                        F: Fn(uint, &mut [T]) + Sync {\n     let size = v.len() / os::num_cpus() + 1;\n \n-    for (i, chunk) in v.chunks_mut(size).enumerate() {\n-        let tx = tx.clone();\n-\n+    v.chunks_mut(size).enumerate().map(|(i, chunk)| {\n         // Need to convert `f` and `chunk` to something that can cross the task\n         // boundary.\n         let f = Racy(&f as *const _ as *const uint);\n         let raw = Racy(chunk.repr());\n-        spawn(move|| {\n+        Thread::spawn(move|| {\n             let f = f.0 as *const F;\n             unsafe { (*f)(i * size, mem::transmute(raw.0)) }\n-            drop(tx)\n-        });\n-    }\n-    drop(tx);\n-    for () in rx.iter() {}\n+        })\n+    }).collect::<Vec<_>>();\n }"}, {"sha": "94d958ea8d5243f8e8f1086acb55c1ee339d4dac", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -38,15 +38,19 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+use std::comm::{channel, Sender, Receiver};\n+use std::str::from_str;\n+use std::thread::Thread;\n+\n fn start(n_tasks: int, token: int) {\n     let (tx, mut rx) = channel();\n     tx.send(token);\n     for i in range(2, n_tasks + 1) {\n         let (tx, next_rx) = channel();\n-        spawn(move|| roundtrip(i, tx, rx));\n+        Thread::spawn(move|| roundtrip(i, tx, rx)).detach();\n         rx = next_rx;\n     }\n-    spawn(move|| roundtrip(1, tx, rx));\n+    Thread::spawn(move|| roundtrip(1, tx, rx)).detach();\n }\n \n fn roundtrip(id: int, tx: Sender<int>, rx: Receiver<int>) {"}, {"sha": "ca36d99014cf4b530b8a2805ed9c683da7df13ba", "filename": "src/test/bench/spawnone.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71b46b18a274edc7f7fb60b490e5ebbb9c911462/src%2Ftest%2Fbench%2Fspawnone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b46b18a274edc7f7fb60b490e5ebbb9c911462/src%2Ftest%2Fbench%2Fspawnone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fspawnone.rs?ref=71b46b18a274edc7f7fb60b490e5ebbb9c911462", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Useful for checking syscall usage of baseline scheduler usage\n-fn main() {\n-    spawn(move|| {});\n-}"}, {"sha": "035b222e6ce62073fc38e1194584f029c4236a88", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,6 +12,7 @@\n \n use std::collections::VecMap;\n use std::os;\n+use std::str::from_str;\n use std::time::Duration;\n use std::uint;\n "}, {"sha": "cccc9362a729ba6133a5f0ba0924bb72592cf024", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,11 +12,12 @@\n \n #![allow(non_snake_case)]\n \n-use std::io;\n-use std::io::stdio::StdReader;\n use std::io::BufferedReader;\n+use std::io::stdio::StdReader;\n+use std::io;\n use std::num::Int;\n use std::os;\n+use std::str::from_str;\n \n // Computes a single solution to a given 9x9 sudoku\n //"}, {"sha": "287b3fc6c460d5cea72c9da6660d802b2d11e994", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,16 +17,18 @@\n \n // ignore-pretty very bad with line comments\n \n-use std::comm;\n+use std::comm::{mod, channel};\n use std::os;\n+use std::str::from_str;\n use std::task;\n+use std::thread::Thread;\n use std::uint;\n \n fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         if gens_left & 1 == 1 {\n             task::deschedule(); // shake things up a bit\n         }\n@@ -35,7 +37,7 @@ fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n         } else {\n             tx.send(())\n         }\n-    });\n+    }).detach();\n }\n \n fn main() {"}, {"sha": "7e2c6fcf0ecd461c7e960a7690cb8722453da989", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,7 @@\n use std::os;\n use std::task;\n use std::uint;\n+use std::str::from_str;\n \n fn f(n: uint) {\n     let mut i = 0u;"}, {"sha": "90d5072f412e7827fe6fa4c7cbbd03882f64b8df", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n+\n fn main() {\n     let (tx, rx) = channel();\n     let x = Some(rx);"}, {"sha": "afa255be699e7bb701c07fdffda1e332964f0b09", "filename": "src/test/compile-fail/binop-consume-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that binary operators consume their arguments\n \n+use std::ops::{Add, Sub, Mul, Div, Rem, BitAnd, BitXor, BitOr, Shl, Shr};\n+\n fn add<A: Add<B, ()>, B>(lhs: A, rhs: B) {\n     lhs + rhs;\n     drop(lhs);  //~ ERROR use of moved value: `lhs`"}, {"sha": "e48c88a49f0bf25013f3eca312dfe7fb15ea9465", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that move restrictions are enforced on overloaded binary operations\n \n+use std::ops::Add;\n+\n fn double_move<T: Add<T, ()>>(x: T) {\n     x\n     +"}, {"sha": "af9a18acbf2ad639d8ad7e9f0a858d5e74f453a4", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Add;\n \n #[deriving(Clone)]\n struct foo(Box<uint>);"}, {"sha": "b571af2425a5c60a4799a665acc87f5e5fa172e0", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Add;\n+\n #[deriving(Copy)]\n struct Point {\n     x: int,"}, {"sha": "01afe405d5e12828589d383b9bdc252ed173f7bb", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Index;\n+\n struct MyVec<T> {\n     data: Vec<T>,\n }"}, {"sha": "e8949d4b30befd55320d2672a994b0d14d3343cc", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,8 @@\n // Test that we still see borrowck errors of various kinds when using\n // indexing and autoderef in combination.\n \n+use std::ops::{Index, IndexMut};\n+\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "933d0f15e4e7064219432bc368abcf2390750120", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::{Index, IndexMut};\n+\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "6228b92472924fa582c24d1983ee7a2151d146b3", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,8 @@\n // Tests (negatively) the ability for the Self type in default methods\n // to use capabilities granted by builtin kinds as supertraits.\n \n+use std::comm::{channel, Sender};\n+\n trait Foo : Sync+'static {\n     fn foo(self, mut chan: Sender<Self>) { }\n }"}, {"sha": "83e329db0da2e48d61a2764d8bca9befea167343", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::Receiver;\n+\n fn test<T: Sync>() {}\n \n fn main() {"}, {"sha": "296b4187a1f532ed2ce989dc15196794bd16379a", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::Sender;\n+\n fn test<T: Sync>() {}\n \n fn main() {"}, {"sha": "f42e1a1bc15edf22f5431c68dd704298453f20f4", "filename": "src/test/compile-fail/issue-12041.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n+use std::thread::Thread;\n+\n fn main() {\n     let (tx, rx) = channel();\n-    spawn(move|| {\n+    let _t = Thread::spawn(move|| -> () {\n         loop {\n             let tx = tx;\n             //~^ ERROR: use of moved value: `tx`"}, {"sha": "327f50ee059f961bdb917a0b2ecda6b8c259dccc", "filename": "src/test/compile-fail/issue-16709.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-16709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-16709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16709.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,8 @@\n use std::ptr;\n use std::raw;\n \n+trait Slice {}\n+\n fn main() {\n   unsafe {\n     let nil: *const u8 = ptr::null();"}, {"sha": "c2e4629e14de0abcff762f8d46f599d88b25d688", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Deref;\n+\n struct MyPtr<'a>(&'a mut uint);\n impl<'a> Deref<uint> for MyPtr<'a> {\n     fn deref<'b>(&'b self) -> &'b uint { self.0 }"}, {"sha": "1e80fd7a7e91043ef10fce7e68e7156ce59002e8", "filename": "src/test/compile-fail/issue-3702-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::num::ToPrimitive;\n+\n trait Add {\n     fn to_int(&self) -> int;\n     fn add_dynamic(&self, other: &Add) -> int;"}, {"sha": "c458c539c0766f65875d26eefe748f33adf372a6", "filename": "src/test/compile-fail/unop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that move restrictions are enforced on overloaded unary operations\n \n+use std::ops::Not;\n+\n fn move_then_borrow<T: Not<T> + Clone>(x: T) {\n     !x;\n "}, {"sha": "312f26394b24d341abca24d7aaa96af11882c34e", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n \n // Test that a class with an unsendable field can't be\n // sent"}, {"sha": "bde5b853078f221d72224d8dcb9ae795a676aa26", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,6 +13,8 @@\n // (In this case the mul method should take &f64 and not f64)\n // See: #11450\n \n+use std::ops::Mul;\n+\n struct Vec1 {\n     x: f64\n }"}, {"sha": "35bd22880cef742dde2823838e252219c4497a6a", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -4,7 +4,7 @@\n #[phase(plugin, link)]\n extern crate \"std\" as std;\n #[prelude_import]\n-use std::prelude::*;\n+use std::prelude::v1::*;\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "b3c4802530ed3c9f7aa38a0ea43af498648f91d1", "filename": "src/test/run-pass/bool.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,9 @@\n \n // Basic boolean tests\n \n+use std::cmp::Ordering::{Equal, Greater, Less};\n+use std::ops::{BitAnd, BitOr, BitXor};\n+\n fn main() {\n     assert_eq!(false.eq(&true), false);\n     assert_eq!(false == false, true);"}, {"sha": "83c1696f7b2ab3fb367dff531b30c3075ce17c15", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -14,6 +14,8 @@\n // a Send. Basically this just makes sure rustc is using\n // each_bound_trait_and_supertraits in type_contents correctly.\n \n+use std::comm::{channel, Sender};\n+\n trait Bar : Send { }\n trait Foo : Bar { }\n "}, {"sha": "1f002ec79c61eb975ad5f4934ed68dbf6048fcf2", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,6 +15,8 @@\n // even when using them cross-crate.\n \n extern crate trait_superkinds_in_metadata;\n+\n+use std::comm::{channel, Sender, Receiver};\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n #[deriving(PartialEq)]"}, {"sha": "46ad3f93b0bb79413ce84fdf424b663d4cecd0a0", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,6 +12,8 @@\n // builtin-kinds, e.g., if a trait requires Send to implement, then\n // at usage site of that trait, we know we have the Send capability.\n \n+use std::comm::{channel, Sender, Receiver};\n+\n trait Foo : Send { }\n \n impl <T: Send> Foo for T { }"}, {"sha": "27a7cd909fefec1a7678878518317e339405b671", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,8 @@\n // Tests the ability for the Self type in default methods to use\n // capabilities granted by builtin kinds as supertraits.\n \n+use std::comm::{Sender, channel};\n+\n trait Foo : Send {\n     fn foo(self, tx: Sender<Self>) {\n         tx.send(self);"}, {"sha": "c95cf0bfdee453d8c5a43bd9c20ecab323c39fb6", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,6 +12,8 @@\n \n extern crate libc;\n \n+use std::c_str::ToCStr;\n+\n mod mlibc {\n     use libc::{c_char, c_long, c_longlong};\n "}, {"sha": "4ed444f92ac92b34da999d80b34f29f91b1da658", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,8 +17,10 @@\n extern crate log;\n \n use log::{set_logger, Logger, LogRecord};\n+use std::comm::channel;\n use std::fmt;\n use std::io::{ChanReader, ChanWriter};\n+use std::thread::Thread;\n \n struct MyWriter(ChanWriter);\n \n@@ -32,7 +34,7 @@ impl Logger for MyWriter {\n fn main() {\n     let (tx, rx) = channel();\n     let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n-    spawn(move|| {\n+    let _t = Thread::spawn(move|| {\n         set_logger(box MyWriter(w) as Box<Logger+Send>);\n         debug!(\"debug\");\n         info!(\"info\");"}, {"sha": "e1dc5802162eb8cd41d14f4bd3f08d20ee4978e0", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-use std::comm;\n+use std::comm::channel;\n \n fn foo<F:FnOnce()+Send>(blk: F) {\n     blk();"}, {"sha": "fd040d109108fe173ceedc95a6bbe046babfe5b4", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cmp::Ordering;\n+\n // Test default methods in PartialOrd and PartialEq\n //\n struct Fool(bool);"}, {"sha": "119bdaff98ee812f13ce0b6325d4630625470cba", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::{channel, Sender};\n \n pub fn main() {\n     let (tx, rx) = channel();"}, {"sha": "e0e8ca5618e50f0bdff3ed1143f395fb7d8333cf", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::{str, string};\n+use std::c_str::ToCStr;\n \n const A: [u8; 2] = ['h' as u8, 'i' as u8];\n const B: &'static [u8; 2] = &A;"}, {"sha": "198915fe02ed89e6ebc09e0e9618e9e3b5cfab89", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -23,6 +23,8 @@ extern crate libc;\n use std::io::{Process, Command, timer};\n use std::time::Duration;\n use std::str;\n+use std::comm::channel;\n+use std::thread::Thread;\n \n macro_rules! succeed( ($e:expr) => (\n     match $e { Ok(..) => {}, Err(e) => panic!(\"panic: {}\", e) }\n@@ -84,12 +86,12 @@ pub fn test_destroy_actually_kills(force: bool) {\n     let (tx, rx1) = channel();\n     let mut t = timer::Timer::new().unwrap();\n     let rx2 = t.oneshot(Duration::milliseconds(1000));\n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         select! {\n             () = rx2.recv() => unsafe { libc::exit(1) },\n             () = rx1.recv() => {}\n         }\n-    });\n+    }).detach();\n     match p.wait().unwrap() {\n         ExitStatus(..) => panic!(\"expected a signal\"),\n         ExitSignal(..) => tx.send(()),"}, {"sha": "5a98952c127d826264b827b3cfeeadb88289491d", "filename": "src/test/run-pass/deref-mut-on-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that `&mut T` implements `DerefMut<T>`\n \n+use std::ops::DerefMut;\n+\n fn inc<T:DerefMut<int>>(mut t: T) {\n     *t += 1;\n }"}, {"sha": "f245c11f0904b50156d0de983bd1ae8b4fe5bdfe", "filename": "src/test/run-pass/deref-on-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that `&T` and `&mut T` implement `Deref<T>`\n \n+use std::ops::Deref;\n+\n fn deref<U:Copy,T:Deref<U>>(t: T) -> U {\n     *t\n }"}, {"sha": "fb81dd558d2c4e2276fc52871a9b6d8c48ca7aac", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -12,6 +12,8 @@\n // where possible, by having a type that panics when compared as the\n // second element, so this passes iff the instances shortcircuit.\n \n+use std::cmp::Ordering;\n+\n pub struct FailCmp;\n impl PartialEq for FailCmp {\n     fn eq(&self, _: &FailCmp) -> bool { panic!(\"eq\") }"}, {"sha": "b8903d05cd89974681037a8ceb7794b38a7c4679", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::ops::Add;\n use std::num::Zero;\n \n #[deriving(Zero)]"}, {"sha": "bca61ab1bd38718e2e2a1016565cf4fae3efe74d", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::{channel, Sender};\n \n #[deriving(PartialEq, Show)]\n enum Message {"}, {"sha": "0cbcee3e253e1d54fa3f94517eda048cb315e790", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n+use std::ops::{Deref, DerefMut};\n+\n pub struct Arr {\n     ptr: Box<[uint]>\n }"}, {"sha": "96a9c117dea46ee2aa18cae3f2122ab72e41af60", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n+use std::ops::Deref;\n+\n pub struct Arr {\n     ptr: Box<[uint]>\n }"}, {"sha": "70d14ba3623237f967fb8e18d43c5957bdaedbe6", "filename": "src/test/run-pass/fixup-deref-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::{Deref, DerefMut};\n+\n // Generic unique/owned smaht pointer.\n struct Own<T> {\n     value: *mut T"}, {"sha": "8a75fdd685dd1055fb2515d5372182a30cb50cee", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,10 +11,10 @@\n // ignore-fast doesn't like extern crate\n \n extern crate libc;\n+use std::c_str::ToCStr;\n \n mod mlibc {\n-    extern crate libc;\n-    use self::libc::{c_char, size_t};\n+    use libc::{c_char, size_t};\n \n     extern {\n         #[link_name = \"strlen\"]"}, {"sha": "6155ca6357237f00863164280d6fb25cfe073d94", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,9 +9,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate collections;\n-\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n \n@@ -24,6 +21,7 @@ pub fn map(filename: String, emit: map_reduce::putter) {\n \n mod map_reduce {\n     use std::collections::HashMap;\n+    use std::comm::{channel, Sender};\n     use std::str;\n     use std::task;\n "}, {"sha": "33377d1f21726c92a3d1d95fbc733661d5cbea1e", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Deref;\n+\n struct Root {\n     jsref: JSRef\n }"}, {"sha": "e6da859c110e734cbeedb53735eb775e933bfd4e", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,9 @@\n // This test may not always fail, but it can be flaky if the race it used to\n // expose is still present.\n \n+use std::comm::{channel, Sender, Receiver};\n+use std::thread::Thread;\n+\n fn helper(rx: Receiver<Sender<()>>) {\n     for tx in rx.iter() {\n         let _ = tx.send_opt(());\n@@ -19,7 +22,7 @@ fn helper(rx: Receiver<Sender<()>>) {\n \n fn main() {\n     let (tx, rx) = channel();\n-    spawn(move|| { helper(rx) });\n+    let _t = Thread::spawn(move|| { helper(rx) }).detach();\n     let (snd, rcv) = channel::<int>();\n     for _ in range(1i, 100000i) {\n         snd.send(1i);"}, {"sha": "8aa7447ccd2e90f787ee74f6b7cae63938f1df48", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Index;\n+\n struct Mat<T> { data: Vec<T>, cols: uint, }\n \n impl<T> Mat<T> {"}, {"sha": "b2b819a110305ec5265ebd396afab5ee8014b5f2", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n+use std::thread::Thread;\n use std::mem;\n \n fn main() {\n@@ -19,7 +20,7 @@ fn main() {\n     // Check that both closures are capturing by value\n     assert_eq!(1, mem::size_of_val(&closure));\n \n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         let ok = closure;\n-    })\n+    }).join().ok().unwrap();\n }"}, {"sha": "0b9a85851c591a4bc3b0d0bb33f9779e97a79108", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(unboxed_closures)]\n \n+use std::ops::{Deref, DerefMut};\n+\n struct X(Box<int>);\n \n static mut DESTRUCTOR_RAN: bool = false;"}, {"sha": "df2a9e6bfa9094ab24da3f0cd54dcc8813329920", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,7 @@\n #![feature(default_type_params)]\n \n use std::task;\n+use std::comm::Sender;\n use std::thunk::Invoke;\n \n type RingBuffer = Vec<f64> ;"}, {"sha": "c88022f3eb706ce28541d2958bb0c0cac9393298", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Mul;\n+\n struct Vec2 {\n     x: f64,\n     y: f64"}, {"sha": "93c72e2e35091d493046d17dc7c9e2e3b15405e5", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Add;\n+\n trait Positioned<S> {\n   fn SetX(&mut self, S);\n   fn X(&self) -> S;"}, {"sha": "871e52e3639541e263973e54216fa427a886098a", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,13 +9,15 @@\n // except according to those terms.\n \n use std::io::println;\n+use std::comm::channel;\n+use std::thread::Thread;\n \n pub fn main() {\n     let (tx, rx) = channel();\n \n     tx.send(\"hello, world\");\n \n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         println(rx.recv());\n-    });\n+    }).join().ok().unwrap();\n }"}, {"sha": "6692988f6da29f5824f348dd58c7714845200f6b", "filename": "src/test/run-pass/issue-4448.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4448.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::channel;\n \n pub fn main() {\n     let (tx, rx) = channel::<&'static str>();"}, {"sha": "43785edc2eb03782097add8a8c1c1ed79f64aaa3", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(advanced_slice_patterns)]\n \n+use std::ops::Add;\n+\n fn foo<T: Add<T, T> + Clone>([x, y, z]: [T; 3]) -> (T, T, T) {\n     (x.clone(), x.clone() + y.clone(), x + y + z)\n }"}, {"sha": "4163ebf4573fcdb79b27db98ba448e2b59e75488", "filename": "src/test/run-pass/issue-8827.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8827.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::thread::Thread;\n+use std::comm::{channel, Receiver};\n+\n fn periodical(n: int) -> Receiver<bool> {\n     let (chan, port) = channel();\n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         loop {\n             for _ in range(1, n) {\n                 match chan.send_opt(false) {\n@@ -23,13 +26,13 @@ fn periodical(n: int) -> Receiver<bool> {\n                 Err(..) => break\n             }\n         }\n-    });\n+    }).detach();\n     return port;\n }\n \n fn integers() -> Receiver<int> {\n     let (chan, port) = channel();\n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         let mut i = 1;\n         loop {\n             match chan.send_opt(i) {\n@@ -38,7 +41,7 @@ fn integers() -> Receiver<int> {\n             }\n             i = i + 1;\n         }\n-    });\n+    }).detach();\n     return port;\n }\n "}, {"sha": "d3cbd556776401f93bef72cd1b7a155f6da7336a", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm;\n+use std::comm::{mod, channel};\n use std::io::timer::Timer;\n+use std::thread::Thread;\n use std::time::Duration;\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    spawn(move||{\n+    let _t = Thread::spawn(move||{\n         let mut timer = Timer::new().unwrap();\n         timer.sleep(Duration::milliseconds(10));\n         tx.send(());"}, {"sha": "2e6127541a1a1bf02aaa2096f2aa3157cbc7c982", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::{channel, Sender};\n \n fn producer(tx: &Sender<Vec<u8>>) {\n     tx.send("}, {"sha": "509afff3d133bb204744467e0c64cadcbbf08675", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,6 +13,7 @@\n \n use std::cell::Cell;\n use std::fmt;\n+use std::thread::Thread;\n \n struct Foo(Cell<int>);\n \n@@ -26,13 +27,10 @@ impl fmt::Show for Foo {\n }\n \n pub fn main() {\n-    let (tx, rx) = channel();\n-    spawn(move|| {\n+    Thread::spawn(move|| {\n         let mut f = Foo(Cell::new(0));\n         println!(\"{}\", f);\n         let Foo(ref mut f) = f;\n         assert!(f.get() == 1);\n-        tx.send(());\n-    });\n-    rx.recv();\n+    }).join().ok().unwrap();\n }"}, {"sha": "a6e579ddff3045091f33f64be39ef169ba2faa8a", "filename": "src/test/run-pass/macro-with-braces-in-expr-position.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(macro_rules)]\n \n+use std::thread::Thread;\n+\n macro_rules! expr (($e: expr) => { $e });\n \n macro_rules! spawn {\n     ($($code: tt)*) => {\n-        expr!(spawn(move|| {$($code)*}))\n+        expr!(Thread::spawn(move|| {$($code)*}).detach())\n     }\n }\n "}, {"sha": "2cba1dec2dc99f587afc3026989cd5b031a52561", "filename": "src/test/run-pass/match-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::uint;\n+use std::str::from_str;\n \n pub fn main() {\n     // sometimes we have had trouble finding"}, {"sha": "b4d079d79d650905b2cc8bd3e1c30f0de03cac4d", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,6 +15,9 @@\n // necessary. Testing the methods of the impls is done within the source\n // file for each numeric type.\n \n+use std::ops::Add;\n+use std::num::ToPrimitive;\n+\n pub fn main() {\n // ints\n     // num"}, {"sha": "7aac2d705a854d293ec1ed4da203ea3df5bab79b", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -17,6 +17,7 @@\n \n use std::io::process::Command;\n use std::os;\n+use std::thread::Thread;\n \n // lifted from the test module\n // Inlining to avoid llvm turning the recursive functions into tail calls,\n@@ -36,12 +37,7 @@ fn main() {\n     let args = os::args();\n     let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"recurse\" {\n-        let (tx, rx) = channel();\n-        spawn(move|| {\n-            recurse();\n-            tx.send(());\n-        });\n-        rx.recv();\n+        let _t = Thread::spawn(recurse);\n     } else {\n         let recurse = Command::new(args[0].as_slice()).arg(\"recurse\").output().unwrap();\n         assert!(!recurse.status.success());"}, {"sha": "d1fb69b87a30e5b2ad76e2b5cb13d76d1051961b", "filename": "src/test/run-pass/overloaded-autoderef-indexing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Deref;\n+\n struct DerefArray<'a, T:'a> {\n     inner: &'a [T]\n }"}, {"sha": "23a8285063ffb48a2c6c2888c27237e7eb051347", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::rc::Rc;\n+use std::ops::Deref;\n \n struct DerefWrapper<X, Y> {\n     x: X,\n@@ -30,6 +31,8 @@ impl<X, Y> Deref<Y> for DerefWrapper<X, Y> {\n }\n \n mod priv_test {\n+    use std::ops::Deref;\n+\n     pub struct DerefWrapperHideX<X, Y> {\n         x: X,\n         pub y: Y"}, {"sha": "222e2825c0404e0b17ddf0f40b775f7f2df235bd", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,7 +10,7 @@\n \n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::string::String;\n+use std::num::ToPrimitive;\n \n #[deriving(PartialEq, Show)]\n struct Point {\n@@ -31,7 +31,6 @@ pub fn main() {\n     assert_eq!((i_value, *i.borrow()), (2, 5));\n \n     let s = Rc::new(\"foo\".to_string());\n-    assert!(s.equiv(&(\"foo\")));\n     assert_eq!(s.as_slice(), \"foo\");\n \n     let mut_s = Rc::new(RefCell::new(String::from_str(\"foo\")));"}, {"sha": "95df1ed0d837ed176e9536824f860a5a26eec7fe", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -13,6 +13,7 @@\n #![feature(unboxed_closures)]\n \n use std::ops::Fn;\n+use std::ops::Add;\n \n struct G;\n "}, {"sha": "dcb0c40c6088a95eecc651f32359efe8839ada78", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test overloaded indexing combined with autoderef.\n \n+use std::ops::{Index, IndexMut};\n+\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "1c06ed64fc7b8a6112ad6d8e778869b857403d85", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,8 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n+use std::ops::Index;\n+\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "fdf7e7e2cbb13760197f4687aa5163aba340945a", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::{Index, IndexMut};\n+\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "c7aa405b513e465bb6404d80d57df928edb5e95b", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -14,6 +14,7 @@\n extern crate libc;\n \n use std::io::TempDir;\n+use std::c_str::ToCStr;\n use std::io::fs::PathExtensions;\n use std::io::fs;\n use std::io;"}, {"sha": "0aeade935dadba948ad8b765bc8879d291e50c9e", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,12 +10,12 @@\n \n use std::io::process::{Command, ProcessOutput};\n use std::os;\n-use std::str;\n+use std::rt::unwind::try;\n use std::rt;\n+use std::str;\n+use std::thread::Thread;\n use std::thunk::Thunk;\n \n-use std::rt::unwind::try;\n-\n #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n     if argc > 1 {\n@@ -25,8 +25,7 @@ fn start(argc: int, argv: *const *const u8) -> int {\n                 2 => println!(\"foo\"),\n                 3 => assert!(try(|| {}).is_ok()),\n                 4 => assert!(try(|| panic!()).is_err()),\n-                5 => assert!(try(|| spawn(move|| {})).is_err()),\n-                6 => assert!(Command::new(\"test\").spawn().is_err()),\n+                5 => assert!(Command::new(\"test\").spawn().is_err()),\n                 _ => panic!()\n             }\n         }\n@@ -50,8 +49,6 @@ fn start(argc: int, argv: *const *const u8) -> int {\n     pass(Command::new(me).arg(x).output().unwrap());\n     let x: &[u8] = &[5u8];\n     pass(Command::new(me).arg(x).output().unwrap());\n-    let x: &[u8] = &[6u8];\n-    pass(Command::new(me).arg(x).output().unwrap());\n \n     0\n }"}, {"sha": "8e547527f7297700879b2fe4d58ca97fe1583ba6", "filename": "src/test/run-pass/rust-log-filter.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frust-log-filter.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -14,6 +14,9 @@\n #[phase(plugin,link)]\n extern crate log;\n \n+use std::comm::{channel, Sender, Receiver};\n+use std::thread::Thread;\n+\n pub struct ChannelLogger {\n     tx: Sender<String>\n }\n@@ -34,7 +37,7 @@ impl log::Logger for ChannelLogger {\n pub fn main() {\n     let (logger, rx) = ChannelLogger::new();\n \n-    spawn(move|| {\n+    let _t = Thread::spawn(move|| {\n         log::set_logger(logger);\n \n         // our regex is \"f.o\""}, {"sha": "71620d05e014bb752e7c8b37731031b94eb99a14", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::channel;\n \n struct test {\n   f: int,"}, {"sha": "181874705da67770e867fc9d5a1bb03a732941d3", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::{channel, Sender};\n+\n // tests that ctrl's type gets inferred properly\n struct Command<K, V> {\n     key: K,"}, {"sha": "bfeff58b802df7150f2b5b4d37670a36bc2dfaed", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,8 +11,8 @@\n extern crate collections;\n \n use std::collections::HashMap;\n-use std::option::Option::Some;\n use std::str::SendStr;\n+use std::borrow::IntoCow;\n \n pub fn main() {\n     let mut map: HashMap<SendStr, uint> = HashMap::new();"}, {"sha": "8c70738de48f19cc99a6a01469b5bd7d38172e91", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,9 +11,8 @@\n extern crate collections;\n \n use self::collections::BTreeMap;\n-use std::option::Option::Some;\n use std::str::SendStr;\n-use std::string::ToString;\n+use std::borrow::IntoCow;\n \n pub fn main() {\n     let mut map: BTreeMap<SendStr, uint> = BTreeMap::new();"}, {"sha": "3d5f0af0e3f40001e82124d7f25f647660aba635", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // Test that a class with only sendable fields can be sent\n \n+use std::comm::channel;\n+\n struct foo {\n   i: int,\n   j: char,"}, {"sha": "e3b2a2903bcbafa81b1f9c93031cc120ecc26fc5", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -15,6 +15,7 @@\n  */\n \n use std::task;\n+use std::comm::{channel, Sender};\n \n type ctx = Sender<int>;\n "}, {"sha": "4465561f874eb737b64e1770d48cd6c04c54e083", "filename": "src/test/run-pass/supertrait-default-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n // There is some other borrowck bug, so we make the stuff not mut.\n \n+use std::ops::Add;\n+\n trait Positioned<S> {\n   fn SetX(&mut self, S);\n   fn X(&self) -> S;"}, {"sha": "7c664b21fade574a201b8050c9d72485aa2729af", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use std::task;\n+use std::comm::{channel, Sender};\n \n pub fn main() { test05(); }\n "}, {"sha": "c35e2f2f37a40dd8739462f9897db9f5558a03a6", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use std::task;\n+use std::comm::{channel, Sender};\n \n fn start(tx: &Sender<Sender<String>>) {\n     let (tx2, rx) = channel();"}, {"sha": "10b4e51631176d1fc2fdb4014c3fb81477793345", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::comm::{channel, Sender};\n use std::task;\n \n fn start(tx: &Sender<Sender<int>>) {"}, {"sha": "31da1168bf7eb75cb50081c23ef0caa468f58c7b", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::comm::{channel, Sender};\n use std::task;\n \n fn start(tx: &Sender<int>, start: int, number_of_messages: int) {"}, {"sha": "8ec589d5db5fce8780012fceae016d405c50a1a2", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::comm::{channel, Sender};\n use std::task;\n \n pub fn main() {"}, {"sha": "b69644244ab4c49708eae69947a62d70d0c5f68d", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use std::comm::{channel, Sender};\n use std::task;\n \n fn start(tx: &Sender<int>, i0: int) {"}, {"sha": "5e71ed3ba06eb58871a236fafabf3d8847f26fa0", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n use std::cmp;\n \n // Tests of ports and channels on various types"}, {"sha": "c7a6da6a79417354e0240bd0bc537f911cf12e50", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -11,6 +11,7 @@\n // no-pretty-expanded FIXME #15189\n \n use std::thread::Thread;\n+use std::comm::{channel, Sender};\n \n pub fn main() { println!(\"===== WITHOUT THREADS =====\"); test00(); }\n "}, {"sha": "0e75479046be665ba6650546574e46089d81f27b", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(dead_assignment)]\n \n+use std::comm::channel;\n+\n pub fn main() { test00(); }\n \n fn test00() {"}, {"sha": "d4edbf85cd833830a270a587cbf403ae2fb476ed", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n+\n pub fn main() { test00(); }\n \n fn test00() {"}, {"sha": "4c18e5dc31357c8f8e9d45a0cf5bec4235b0bf26", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(dead_assignment)]\n \n+use std::comm::channel;\n+\n pub fn main() { test00(); }\n \n fn test00() {"}, {"sha": "e7e5c04e1954e80058854699803362a71f9e043e", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(dead_assignment)]\n \n+use std::comm::{channel, Sender};\n use std::task;\n \n pub fn main() { test00(); }"}, {"sha": "5a271f9dc05fd70e4cf3942a8436f8b51f80c875", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::thread::Thread;\n+use std::comm::{channel, Sender};\n \n pub fn main() { test00(); }\n "}, {"sha": "368cac1d27dfa130da10a930796d9e4401923290", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n+\n // rustboot can't transmit nils across channels because they don't have\n // any size, but rustc currently can because they do have size. Whether\n // or not this is desirable I don't know, but here's a regression test."}, {"sha": "1e10a4186fba9940030a0b521b31e9f95c97af20", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::task;\n+use std::comm::channel;\n \n pub fn main() {\n     let (tx, rx) = channel::<uint>();"}, {"sha": "048d7b2be72253b7456730fecfc52bf2bca970fc", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5696ea58946f077f815dc5f74b883cf948c7e1ea/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=5696ea58946f077f815dc5f74b883cf948c7e1ea", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm::channel;\n use std::io::{ChanReader, ChanWriter};\n use std::thread;\n "}]}