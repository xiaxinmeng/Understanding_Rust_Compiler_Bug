{"sha": "3c3f4a75b4f2747a36cf2066af747f47542fdb93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjM2Y0YTc1YjRmMjc0N2EzNmNmMjA2NmFmNzQ3ZjQ3NTQyZmRiOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-22T22:28:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-22T22:28:41Z"}, "message": "Auto merge of #6591 - camsteffen:manual-filter-map, r=llogiq\n\n`manual_filter_map` and `manual_find_map`\n\nchangelog: Add `manual_filter_map` and replace `find_map` with `manual_find_map`\n\nReplaces #6453\n\nFixes #3188\nFixes #4193\n\n~Depends on #6567 (to fix an internal lint false positive)~\n\nThis replaces `filter_map` and `find_map` with `manual_filter_map` and `manual_find_map` respectively. However, `filter_map` is left in place since it is used for a variety of other cases. See discussion in #6453.", "tree": {"sha": "66f8f1b5f0dc953769e7b3f015989fd70d67b8d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66f8f1b5f0dc953769e7b3f015989fd70d67b8d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c3f4a75b4f2747a36cf2066af747f47542fdb93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3f4a75b4f2747a36cf2066af747f47542fdb93", "html_url": "https://github.com/rust-lang/rust/commit/3c3f4a75b4f2747a36cf2066af747f47542fdb93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c3f4a75b4f2747a36cf2066af747f47542fdb93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc374d0a6d9824e3174a0038dc5c258f6729020", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc374d0a6d9824e3174a0038dc5c258f6729020", "html_url": "https://github.com/rust-lang/rust/commit/fbc374d0a6d9824e3174a0038dc5c258f6729020"}, {"sha": "82bab19a0105ff86176b79a5eae7a9ea7d300cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bab19a0105ff86176b79a5eae7a9ea7d300cb9", "html_url": "https://github.com/rust-lang/rust/commit/82bab19a0105ff86176b79a5eae7a9ea7d300cb9"}], "stats": {"total": 452, "additions": 355, "deletions": 97}, "files": [{"sha": "7f2de888d35f0f6604cc4bc769794c1171f3b449", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -2035,6 +2035,8 @@ Released 2018-09-13\n [`macro_use_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n+[`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n+[`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or"}, {"sha": "a8a6a2cb1bd6fbd4fdfa27a707679450d7838bc5", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::filter_map)]\n-\n use std::fs;\n use std::fs::File;\n use std::io::prelude::*;"}, {"sha": "ea386237f20a4809fa71475e15c4d0bf18a22d25", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -166,3 +166,8 @@ declare_deprecated_lint! {\n     pub PANIC_PARAMS,\n     \"this lint has been uplifted to rustc and is now called `panic_fmt`\"\n }\n+\n+declare_deprecated_lint! {\n+    pub FIND_MAP,\n+    \"this lint is replaced by `manual_find_map`, a more specific lint\"\n+}"}, {"sha": "7097812e088e7ead544b87d1e761c15130c39202", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -505,6 +505,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::panic_params\",\n         \"this lint has been uplifted to rustc and is now called `panic_fmt`\",\n     );\n+    store.register_removed(\n+        \"clippy::find_map\",\n+        \"this lint is replaced by `manual_find_map`, a more specific lint\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -732,7 +736,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::FILTER_MAP,\n         &methods::FILTER_MAP_NEXT,\n         &methods::FILTER_NEXT,\n-        &methods::FIND_MAP,\n         &methods::FLAT_MAP_IDENTITY,\n         &methods::FROM_ITER_INSTEAD_OF_COLLECT,\n         &methods::GET_UNWRAP,\n@@ -745,6 +748,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_NTH,\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n+        &methods::MANUAL_FILTER_MAP,\n+        &methods::MANUAL_FIND_MAP,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_COLLECT_RESULT_UNIT,\n         &methods::MAP_FLATTEN,\n@@ -1331,7 +1336,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n-        LintId::of(&methods::FIND_MAP),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n         LintId::of(&methods::MAP_UNWRAP_OR),\n@@ -1526,6 +1530,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n+        LintId::of(&methods::MANUAL_FILTER_MAP),\n+        LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n@@ -1823,6 +1829,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INSPECT_FOR_EACH),\n+        LintId::of(&methods::MANUAL_FILTER_MAP),\n+        LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SKIP_WHILE_NEXT),"}, {"sha": "c7e1088e353066b04e4ac7c566c83be01e43589d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -1069,7 +1069,6 @@ fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n ) -> impl Iterator<Item = Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>> + 'c {\n     // As the `filter` and `map` below do different things, I think putting together\n     // just increases complexity. (cc #3188 and #4193)\n-    #[allow(clippy::filter_map)]\n     stmts\n         .iter()\n         .filter_map(move |stmt| match stmt.kind {"}, {"sha": "7a459a440cae4f0744d0270082a916173b9fe635", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 132, "deletions": 54, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -15,7 +15,8 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{TraitItem, TraitItemKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind, PatKind, QPath, TraitItem, TraitItemKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n@@ -450,6 +451,58 @@ declare_clippy_lint! {\n     \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.filter(_).map(_)` that can be written more simply\n+    /// as `filter_map(_)`.\n+    ///\n+    /// **Why is this bad?** Redundant code in the `filter` and `map` operations is poor style and\n+    /// less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+     /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// (0_i32..10)\n+    ///     .filter(|n| n.checked_add(1).is_some())\n+    ///     .map(|n| n.checked_add(1).unwrap());\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// (0_i32..10).filter_map(|n| n.checked_add(1));\n+    /// ```\n+    pub MANUAL_FILTER_MAP,\n+    complexity,\n+    \"using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.find(_).map(_)` that can be written more simply\n+    /// as `find_map(_)`.\n+    ///\n+    /// **Why is this bad?** Redundant code in the `find` and `map` operations is poor style and\n+    /// less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+     /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// (0_i32..10)\n+    ///     .find(|n| n.checked_add(1).is_some())\n+    ///     .map(|n| n.checked_add(1).unwrap());\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// (0_i32..10).find_map(|n| n.checked_add(1));\n+    /// ```\n+    pub MANUAL_FIND_MAP,\n+    complexity,\n+    \"using `_.find(_).map(_)` in a way that can be written more simply as `find_map(_)`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.filter_map(_).next()`.\n     ///\n@@ -494,28 +547,6 @@ declare_clippy_lint! {\n     \"call to `flat_map` where `flatten` is sufficient\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.find(_).map(_)`.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.find_map(_)`.\n-    ///\n-    /// **Known problems:** Often requires a condition + Option/Iterator creation\n-    /// inside the closure.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    ///  (0..3).find(|x| *x == 2).map(|x| x * 2);\n-    /// ```\n-    /// Can be written as\n-    /// ```rust\n-    ///  (0..3).find_map(|x| if x == 2 { Some(x * 2) } else { None });\n-    /// ```\n-    pub FIND_MAP,\n-    pedantic,\n-    \"using a combination of `find` and `map` can usually be written as a single method call\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for an iterator or string search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n@@ -1473,9 +1504,10 @@ impl_lint_pass!(Methods => [\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n+    MANUAL_FILTER_MAP,\n+    MANUAL_FIND_MAP,\n     FILTER_MAP_NEXT,\n     FLAT_MAP_IDENTITY,\n-    FIND_MAP,\n     MAP_FLATTEN,\n     ITERATOR_STEP_BY_ZERO,\n     ITER_NEXT_SLICE,\n@@ -1540,10 +1572,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"next\", \"skip_while\"] => lint_skip_while_next(cx, expr, arg_lists[1]),\n             [\"next\", \"iter\"] => lint_iter_next(cx, expr, arg_lists[1]),\n-            [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"filter\"] => lint_filter_map(cx, expr, false),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1], self.msrv.as_ref()),\n-            [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"find\"] => lint_filter_map(cx, expr, true),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n@@ -2988,18 +3020,79 @@ fn lint_skip_while_next<'tcx>(\n     }\n }\n \n-/// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n+/// lint use of `filter().map()` or `find().map()` for `Iterators`\n+fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_find: bool) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(_, _, [map_recv, map_arg], map_span) = expr.kind;\n+        if let ExprKind::MethodCall(_, _, [_, filter_arg], filter_span) = map_recv.kind;\n+        if match_trait_method(cx, map_recv, &paths::ITERATOR);\n+\n+        // filter(|x| ...is_some())...\n+        if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n+        let filter_body = cx.tcx.hir().body(filter_body_id);\n+        if let [filter_param] = filter_body.params;\n+        // optional ref pattern: `filter(|&x| ..)`\n+        let (filter_pat, is_filter_param_ref) = if let PatKind::Ref(ref_pat, _) = filter_param.pat.kind {\n+            (ref_pat, true)\n+        } else {\n+            (filter_param.pat, false)\n+        };\n+        // closure ends with is_some() or is_ok()\n+        if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n+        if let ExprKind::MethodCall(path, _, [filter_arg], _) = filter_body.value.kind;\n+        if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n+        if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::option_type, opt_ty.did) {\n+            Some(false)\n+        } else if cx.tcx.is_diagnostic_item(sym::result_type, opt_ty.did) {\n+            Some(true)\n+        } else {\n+            None\n+        };\n+        if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n+\n+        // ...map(|x| ...unwrap())\n+        if let ExprKind::Closure(_, _, map_body_id, ..) = map_arg.kind;\n+        let map_body = cx.tcx.hir().body(map_body_id);\n+        if let [map_param] = map_body.params;\n+        if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;\n+        // closure ends with expect() or unwrap()\n+        if let ExprKind::MethodCall(seg, _, [map_arg, ..], _) = map_body.value.kind;\n+        if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n+\n+        let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n+            // in `filter(|x| ..)`, replace `*x` with `x`\n+            let a_path = if_chain! {\n+                if !is_filter_param_ref;\n+                if let ExprKind::Unary(UnOp::UnDeref, expr_path) = a.kind;\n+                then { expr_path } else { a }\n+            };\n+            // let the filter closure arg and the map closure arg be equal\n+            if_chain! {\n+                if let ExprKind::Path(QPath::Resolved(None, a_path)) = a_path.kind;\n+                if let ExprKind::Path(QPath::Resolved(None, b_path)) = b.kind;\n+                if a_path.res == Res::Local(filter_param_id);\n+                if b_path.res == Res::Local(map_param_id);\n+                if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n+                then {\n+                    return true;\n+                }\n+            }\n+            false\n+        };\n+        if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n+        then {\n+            let span = filter_span.to(map_span);\n+            let (filter_name, lint) = if is_find {\n+                (\"find\", MANUAL_FIND_MAP)\n+            } else {\n+                (\"filter\", MANUAL_FILTER_MAP)\n+            };\n+            let msg = format!(\"`{}(..).map(..)` can be simplified as `{0}_map(..)`\", filter_name);\n+            let to_opt = if is_result { \".ok()\" } else { \"\" };\n+            let sugg = format!(\"{}_map(|{}| {}{})\", filter_name, map_param_ident,\n+                snippet(cx, map_arg.span, \"..\"), to_opt);\n+            span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n+        }\n     }\n }\n \n@@ -3037,29 +3130,14 @@ fn lint_filter_map_next<'tcx>(\n     }\n }\n \n-/// lint use of `find().map()` for `Iterators`\n-fn lint_find_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _find_args: &'tcx [hir::Expr<'_>],\n-    map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().map()` is an Iterator\n-    if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n-        let msg = \"called `find(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n-        span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n-    }\n-}\n-\n /// lint use of `filter_map().map()` for `Iterators`\n fn lint_filter_map_map<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     _filter_args: &'tcx [hir::Expr<'_>],\n     _map_args: &'tcx [hir::Expr<'_>],\n ) {\n-    // lint if caller of `.filter().map()` is an Iterator\n+    // lint if caller of `.filter_map().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";"}, {"sha": "1c7398f17f2e5b297f5b4bd2547610f795928ba4", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -24,6 +24,7 @@ pub struct SpanlessEq<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     maybe_typeck_results: Option<&'tcx TypeckResults<'tcx>>,\n     allow_side_effects: bool,\n+    expr_fallback: Option<Box<dyn Fn(&Expr<'_>, &Expr<'_>) -> bool + 'a>>,\n }\n \n impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n@@ -32,6 +33,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             cx,\n             maybe_typeck_results: cx.maybe_typeck_results(),\n             allow_side_effects: true,\n+            expr_fallback: None,\n         }\n     }\n \n@@ -43,6 +45,13 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n+    pub fn expr_fallback(self, expr_fallback: impl Fn(&Expr<'_>, &Expr<'_>) -> bool + 'a) -> Self {\n+        Self {\n+            expr_fallback: Some(Box::new(expr_fallback)),\n+            ..self\n+        }\n+    }\n+\n     /// Checks whether two statements are the same.\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n@@ -81,7 +90,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             }\n         }\n \n-        match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n+        let is_eq = match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n             (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n@@ -158,7 +167,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Array(l), &ExprKind::Array(r)) => self.eq_exprs(l, r),\n             (&ExprKind::DropTemps(ref le), &ExprKind::DropTemps(ref re)) => self.eq_expr(le, re),\n             _ => false,\n-        }\n+        };\n+        is_eq || self.expr_fallback.as_ref().map_or(false, |f| f(left, right))\n     }\n \n     fn eq_exprs(&mut self, left: &[Expr<'_>], right: &[Expr<'_>]) -> bool {"}, {"sha": "c7b4f28be3a4454f5a01293c6bf0ba8d7b5a02ba", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -1,12 +1,3 @@\n-error: called `filter(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:6:21\n-   |\n-LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::filter-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n-\n error: called `filter(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:8:21\n    |\n@@ -17,6 +8,7 @@ LL | |         .filter(|&x| x == 0)\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n    |\n+   = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).flat_map(..)` on an `Iterator`\n@@ -43,5 +35,5 @@ LL | |         .map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "aea3cc62afcc41631213bbafca089acc6f9b72b5", "filename": "tests/ui/find_map.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fbc374d0a6d9824e3174a0038dc5c258f6729020/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbc374d0a6d9824e3174a0038dc5c258f6729020/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=fbc374d0a6d9824e3174a0038dc5c258f6729020", "patch": "@@ -1,26 +0,0 @@\n-error: called `find(..).map(..)` on an `Iterator`\n-  --> $DIR/find_map.rs:20:26\n-   |\n-LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::find-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n-\n-error: called `find(..).map(..)` on an `Iterator`\n-  --> $DIR/find_map.rs:23:29\n-   |\n-LL |       let _: Option<Flavor> = desserts_of_the_week\n-   |  _____________________________^\n-LL | |         .iter()\n-LL | |         .find(|dessert| match *dessert {\n-LL | |             Dessert::Cake(_) => true,\n-...  |\n-LL | |             _ => unreachable!(),\n-LL | |         });\n-   | |__________^\n-   |\n-   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "fc8f58f8ea5cdf1192a5a585d1ce4ee97961062b", "filename": "tests/ui/manual_filter_map.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_filter_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).filter_map(|a| to_opt(a));\n+\n+    // ref pattern, expect()\n+    let _ = (0..).filter_map(|a| to_opt(a));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).filter_map(|a| to_res(a).ok());\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .filter(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "3af4bbee3bf82c17355da7f9922d23e16fbeffd9", "filename": "tests/ui/manual_filter_map.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_filter_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).filter(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // ref pattern, expect()\n+    let _ = (0..).filter(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .filter(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "4d4e2d5c12fe942127d3e72534bfa50392d6c68d", "filename": "tests/ui/manual_filter_map.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -0,0 +1,22 @@\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:8:19\n+   |\n+LL |     let _ = (0..).filter(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_opt(a))`\n+   |\n+   = note: `-D clippy::manual-filter-map` implied by `-D warnings`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:11:19\n+   |\n+LL |     let _ = (0..).filter(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_opt(a))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:14:19\n+   |\n+LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "95e97c4fd1ff4e64941a6e02d406ee40ff48af16", "filename": "tests/ui/manual_find_map.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_find_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).find_map(|a| to_opt(a));\n+\n+    // ref pattern, expect()\n+    let _ = (0..).find_map(|a| to_opt(a));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).find_map(|a| to_res(a).ok());\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .find(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "cd3c82e3b25abbe7a7b0791bf44f5706d1c77e2c", "filename": "tests/ui/manual_find_map.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_find_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).find(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // ref pattern, expect()\n+    let _ = (0..).find(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .find(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "9e7f798df4573bcdda46f0b0e0b5dc3d45f4d908", "filename": "tests/ui/manual_find_map.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c3f4a75b4f2747a36cf2066af747f47542fdb93/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=3c3f4a75b4f2747a36cf2066af747f47542fdb93", "patch": "@@ -0,0 +1,22 @@\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:8:19\n+   |\n+LL |     let _ = (0..).find(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_opt(a))`\n+   |\n+   = note: `-D clippy::manual-find-map` implied by `-D warnings`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:11:19\n+   |\n+LL |     let _ = (0..).find(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_opt(a))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:14:19\n+   |\n+LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n+\n+error: aborting due to 3 previous errors\n+"}]}