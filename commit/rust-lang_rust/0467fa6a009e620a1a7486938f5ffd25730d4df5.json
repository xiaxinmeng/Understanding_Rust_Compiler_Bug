{"sha": "0467fa6a009e620a1a7486938f5ffd25730d4df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjdmYTZhMDA5ZTYyMGExYTc0ODY5MzhmNWZmZDI1NzMwZDRkZjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T21:43:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T21:43:17Z"}, "message": "Rename rust_vec to rust_evec", "tree": {"sha": "7f4a5af99abec600d1d6d87384ea1e1f8928bcc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4a5af99abec600d1d6d87384ea1e1f8928bcc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0467fa6a009e620a1a7486938f5ffd25730d4df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0467fa6a009e620a1a7486938f5ffd25730d4df5", "html_url": "https://github.com/rust-lang/rust/commit/0467fa6a009e620a1a7486938f5ffd25730d4df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0467fa6a009e620a1a7486938f5ffd25730d4df5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1739200b02d0714c6caaf47d7a09cab037a40682", "url": "https://api.github.com/repos/rust-lang/rust/commits/1739200b02d0714c6caaf47d7a09cab037a40682", "html_url": "https://github.com/rust-lang/rust/commit/1739200b02d0714c6caaf47d7a09cab037a40682"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "51d07f23eb9a764f90e63d789dc9d9eddf1a2706", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=0467fa6a009e620a1a7486938f5ffd25730d4df5", "patch": "@@ -10,7 +10,7 @@ upcall_fail(rust_task *task, char const *expr, char const *file, size_t line);\n \n extern \"C\" void\n rust_intrinsic_vec_len(rust_task *task, size_t *retptr, type_desc *ty,\n-                       rust_vec *v)\n+                       rust_evec *v)\n {\n     *retptr = v->fill / ty->size;\n }"}, {"sha": "ac4491f15888d9c28c2664cc0733b1ce83c6ebfb", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=0467fa6a009e620a1a7486938f5ffd25730d4df5", "patch": "@@ -127,17 +127,17 @@ unsupervise(rust_task *task) {\n }\n \n /* Helper for str_alloc and str_from_vec.  Returns NULL as failure. */\n-static rust_vec*\n+static rust_evec*\n vec_alloc_with_data(rust_task *task,\n                     size_t n_elts,\n                     size_t fill,\n                     size_t elt_size,\n                     void *d)\n {\n-    size_t alloc = next_power_of_two(sizeof(rust_vec) + (n_elts * elt_size));\n-    void *mem = task->malloc(alloc, \"rust_vec (with data)\");\n+    size_t alloc = next_power_of_two(sizeof(rust_evec) + (n_elts * elt_size));\n+    void *mem = task->malloc(alloc, \"rust_evec (with data)\");\n     if (!mem) return NULL;\n-    return new (mem) rust_vec(alloc, fill * elt_size, (uint8_t*)d);\n+    return new (mem) rust_evec(alloc, fill * elt_size, (uint8_t*)d);\n }\n \n extern \"C\" CDECL rust_str*\n@@ -158,7 +158,7 @@ extern \"C\" CDECL rust_str*\n str_push_byte(rust_task* task, rust_str* v, size_t byte)\n {\n     size_t fill = v->fill;\n-    size_t alloc = next_power_of_two(sizeof(rust_vec) + fill + 1);\n+    size_t alloc = next_power_of_two(sizeof(rust_evec) + fill + 1);\n     if (v->ref_count > 1 || v->alloc < alloc) {\n         v = vec_alloc_with_data(task, fill + 1, fill, 1, (void*)&v->data[0]);\n         if (!v) {"}, {"sha": "c73378d657de2fed28a1215130820ce47329e8b3", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=0467fa6a009e620a1a7486938f5ffd25730d4df5", "patch": "@@ -968,7 +968,7 @@ data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n template<typename T,typename U>\n std::pair<uint8_t *,uint8_t *>\n data<T,U>::get_evec_data_range(ptr dp) {\n-    rust_vec *vp = bump_dp<rust_vec *>(dp);\n+    rust_evec *vp = bump_dp<rust_evec *>(dp);\n     return std::make_pair(vp->data, vp->data + vp->fill);\n }\n "}, {"sha": "c13ba4def87f829afdad61d48c63c8898ba91475", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=0467fa6a009e620a1a7486938f5ffd25730d4df5", "patch": "@@ -222,9 +222,9 @@ upcall_new_str(rust_task *task, char const *s, size_t fill) {\n     return make_str(task, s, fill);\n }\n \n-static rust_vec *\n+static rust_evec *\n vec_grow(rust_task *task,\n-         rust_vec *v,\n+         rust_evec *v,\n          size_t n_bytes,\n          uintptr_t *need_copy,\n          type_desc *td)\n@@ -237,7 +237,7 @@ vec_grow(rust_task *task,\n         v, n_bytes, v->ref_count, v->alloc, v->fill, need_copy);\n \n     *need_copy = 0;\n-    size_t alloc = next_power_of_two(sizeof(rust_vec) + v->fill + n_bytes);\n+    size_t alloc = next_power_of_two(sizeof(rust_evec) + v->fill + n_bytes);\n \n     if (v->ref_count == 1) {\n \n@@ -249,7 +249,7 @@ vec_grow(rust_task *task,\n \n         // Second-fastest path: can at least realloc.\n         LOG(task, mem, \"realloc path\");\n-        v = (rust_vec*) task->realloc(v, alloc, td->is_stateful);\n+        v = (rust_evec*) task->realloc(v, alloc, td->is_stateful);\n         if (!v) {\n             task->fail();\n             return NULL;\n@@ -260,9 +260,9 @@ vec_grow(rust_task *task,\n         /**\n          * Slowest path: make a new vec.\n          *\n-         * 1. Allocate a new rust_vec with desired additional space.\n-         * 2. Down-ref the shared rust_vec, point to the new one instead.\n-         * 3. Copy existing elements into the new rust_vec.\n+         * 1. Allocate a new rust_evec with desired additional space.\n+         * 2. Down-ref the shared rust_evec, point to the new one instead.\n+         * 3. Copy existing elements into the new rust_evec.\n          *\n          * Step 3 is a bit tricky.  We don't know how to properly copy the\n          * elements in the runtime (all we have are bits in a buffer; no\n@@ -271,7 +271,7 @@ vec_grow(rust_task *task,\n          * that we need the copies performed for us.\n          */\n         LOG(task, mem, \"new vec path\");\n-        void *mem = task->malloc(alloc, \"rust_vec (vec_grow)\", td);\n+        void *mem = task->malloc(alloc, \"rust_evec (vec_grow)\", td);\n         if (!mem) {\n             task->fail();\n             return NULL;\n@@ -280,10 +280,10 @@ vec_grow(rust_task *task,\n         if (v->ref_count != CONST_REFCOUNT)\n             v->deref();\n \n-        v = new (mem) rust_vec(alloc, 0, NULL);\n+        v = new (mem) rust_evec(alloc, 0, NULL);\n         *need_copy = 1;\n     }\n-    I(sched, sizeof(rust_vec) + v->fill <= v->alloc);\n+    I(sched, sizeof(rust_evec) + v->fill <= v->alloc);\n     return v;\n }\n \n@@ -309,14 +309,14 @@ copy_elements(rust_task *task, type_desc *elem_t,\n \n extern \"C\" CDECL void\n upcall_evec_append(rust_task *task, type_desc *t, type_desc *elem_t,\n-                   rust_vec **dst_ptr, rust_vec *src, bool skip_null)\n+                   rust_evec **dst_ptr, rust_evec *src, bool skip_null)\n {\n     LOG_UPCALL_ENTRY(task);\n-    rust_vec *dst = *dst_ptr;\n+    rust_evec *dst = *dst_ptr;\n     uintptr_t need_copy;\n     size_t n_src_bytes = skip_null ? src->fill - 1 : src->fill;\n     size_t n_dst_bytes = skip_null ? dst->fill - 1 : dst->fill;\n-    rust_vec *new_vec = vec_grow(task, dst, n_src_bytes, &need_copy, t);\n+    rust_evec *new_vec = vec_grow(task, dst, n_src_bytes, &need_copy, t);\n \n     // If src and dst are the same (due to \"v += v\"), then dst getting\n     // resized causes src to move as well.\n@@ -341,7 +341,7 @@ upcall_evec_append(rust_task *task, type_desc *t, type_desc *elem_t,\n // FIXME: Transitional. Please remove.\n extern \"C\" CDECL void\n upcall_vec_append(rust_task *task, type_desc *t, type_desc *elem_t,\n-                  rust_vec **dst_ptr, rust_vec *src, bool skip_null) {\n+                  rust_evec **dst_ptr, rust_evec *src, bool skip_null) {\n     upcall_evec_append(task, t, elem_t, dst_ptr, src, skip_null);\n }\n "}, {"sha": "64b7d35623cd77691a383a41c100b272b810a34b", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/0467fa6a009e620a1a7486938f5ffd25730d4df5/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=0467fa6a009e620a1a7486938f5ffd25730d4df5", "patch": "@@ -181,29 +181,29 @@ isaac_init(sched_or_kernel *sched, randctx *rctx)\n // Vectors (rust-user-code level).\n \n struct\n-rust_vec : public rc_base<rust_vec>\n+rust_evec : public rc_base<rust_evec>\n {\n     size_t alloc;\n     size_t fill;\n     size_t pad; // Pad to align data[0] to 16 bytes.\n     uint8_t data[];\n-    rust_vec(size_t alloc, size_t fill,\n+    rust_evec(size_t alloc, size_t fill,\n              uint8_t const *d)\n         : alloc(alloc),\n           fill(fill)\n     {\n         if (d)\n             memcpy(&data[0], d, fill);\n     }\n-    ~rust_vec() {}\n+    ~rust_evec() {}\n \n     inline void *operator new(size_t size, void *mem) {\n         return mem;\n     }\n };\n \n-// Rust types vec and str look identical from our perspective.\n-typedef rust_vec rust_str;\n+// Strings are just exterior vecs\n+typedef rust_evec rust_str;\n \n // Interior vectors (rust-user-code level).\n "}]}