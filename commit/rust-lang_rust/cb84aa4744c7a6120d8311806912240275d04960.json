{"sha": "cb84aa4744c7a6120d8311806912240275d04960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiODRhYTQ3NDRjN2E2MTIwZDgzMTE4MDY5MTIyNDAyNzVkMDQ5NjA=", "commit": {"author": {"name": "Shiqing", "email": "shiqing-thu18@yandex.com", "date": "2019-09-02T13:03:35Z"}, "committer": {"name": "Shiqing", "email": "shiqing-thu18@yandex.com", "date": "2019-09-04T13:27:13Z"}, "message": "Improve searching in rustdoc and add tests", "tree": {"sha": "80dc6870a847464ecf19836f40bbaacc60c86390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80dc6870a847464ecf19836f40bbaacc60c86390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb84aa4744c7a6120d8311806912240275d04960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb84aa4744c7a6120d8311806912240275d04960", "html_url": "https://github.com/rust-lang/rust/commit/cb84aa4744c7a6120d8311806912240275d04960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb84aa4744c7a6120d8311806912240275d04960/comments", "author": {"login": "ayuusweetfish", "id": 45892908, "node_id": "MDQ6VXNlcjQ1ODkyOTA4", "avatar_url": "https://avatars.githubusercontent.com/u/45892908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayuusweetfish", "html_url": "https://github.com/ayuusweetfish", "followers_url": "https://api.github.com/users/ayuusweetfish/followers", "following_url": "https://api.github.com/users/ayuusweetfish/following{/other_user}", "gists_url": "https://api.github.com/users/ayuusweetfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayuusweetfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayuusweetfish/subscriptions", "organizations_url": "https://api.github.com/users/ayuusweetfish/orgs", "repos_url": "https://api.github.com/users/ayuusweetfish/repos", "events_url": "https://api.github.com/users/ayuusweetfish/events{/privacy}", "received_events_url": "https://api.github.com/users/ayuusweetfish/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayuusweetfish", "id": 45892908, "node_id": "MDQ6VXNlcjQ1ODkyOTA4", "avatar_url": "https://avatars.githubusercontent.com/u/45892908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayuusweetfish", "html_url": "https://github.com/ayuusweetfish", "followers_url": "https://api.github.com/users/ayuusweetfish/followers", "following_url": "https://api.github.com/users/ayuusweetfish/following{/other_user}", "gists_url": "https://api.github.com/users/ayuusweetfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayuusweetfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayuusweetfish/subscriptions", "organizations_url": "https://api.github.com/users/ayuusweetfish/orgs", "repos_url": "https://api.github.com/users/ayuusweetfish/repos", "events_url": "https://api.github.com/users/ayuusweetfish/events{/privacy}", "received_events_url": "https://api.github.com/users/ayuusweetfish/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdaf594bab31eec75fb6d582cd33e5a5b43de7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaf594bab31eec75fb6d582cd33e5a5b43de7f4", "html_url": "https://github.com/rust-lang/rust/commit/fdaf594bab31eec75fb6d582cd33e5a5b43de7f4"}], "stats": {"total": 179, "additions": 169, "deletions": 10}, "files": [{"sha": "5cb2456fefdb27609533ec46522743b455db1e9b", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -547,6 +547,11 @@ if (!DOMTokenList.prototype.remove) {\n                 results.sort(function(aaa, bbb) {\n                     var a, b;\n \n+                    // sort by exact match with regard to the last word (mismatch goes later)\n+                    a = (aaa.word !== val);\n+                    b = (bbb.word !== val);\n+                    if (a !== b) { return a - b; }\n+\n                     // Sort by non levenshtein results and then levenshtein results by the distance\n                     // (less changes required to match means higher rankings)\n                     a = (aaa.lev);\n@@ -558,11 +563,6 @@ if (!DOMTokenList.prototype.remove) {\n                     b = (bbb.item.crate !== window.currentCrate);\n                     if (a !== b) { return a - b; }\n \n-                    // sort by exact match (mismatch goes later)\n-                    a = (aaa.word !== valLower);\n-                    b = (bbb.word !== valLower);\n-                    if (a !== b) { return a - b; }\n-\n                     // sort by item name length (longer goes later)\n                     a = aaa.word.length;\n                     b = bbb.word.length;\n@@ -1028,7 +1028,7 @@ if (!DOMTokenList.prototype.remove) {\n                         if (lev > MAX_LEV_DISTANCE) {\n                             continue;\n                         } else if (lev > 0) {\n-                            lev_add = 1;\n+                            lev_add = lev / 10;\n                         }\n                     }\n \n@@ -1099,10 +1099,6 @@ if (!DOMTokenList.prototype.remove) {\n                     if (index !== -1 || lev <= MAX_LEV_DISTANCE) {\n                         if (index !== -1 && paths.length < 2) {\n                             lev = 0;\n-                        } else if (searchWords[j] === val) {\n-                            // Small trick to fix when you're looking for a one letter type\n-                            // and there are other short named types.\n-                            lev = -1;\n                         }\n                         if (results[fullId] === undefined) {\n                             results[fullId] = {"}, {"sha": "e1a3256876bde15af94274c65d1ab29a71c6ce62", "filename": "src/test/rustdoc-js-std/vec-new.js", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js-std%2Fvec-new.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js-std%2Fvec-new.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fvec-new.js?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -4,5 +4,6 @@ const EXPECTED = {\n     'others': [\n         { 'path': 'std::vec::Vec', 'name': 'new' },\n         { 'path': 'std::vec::Vec', 'name': 'ne' },\n+        { 'path': 'std::rc::Rc', 'name': 'ne' },\n     ],\n };"}, {"sha": "b0a411bee5829921b8f1f57d11c9668a15f108f0", "filename": "src/test/rustdoc-js/exact-match.js", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fexact-match.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fexact-match.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fexact-match.js?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -0,0 +1,9 @@\n+const QUERY = 'si::pc';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'exact_match::Si', 'name': 'pc' },\n+        { 'path': 'exact_match::Psi', 'name': 'pc' },\n+        { 'path': 'exact_match::Si', 'name': 'pa' },\n+    ],\n+};"}, {"sha": "2eacc0a358284f07a4dd63f0ddb9be58f6a8bbbe", "filename": "src/test/rustdoc-js/exact-match.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fexact-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fexact-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fexact-match.rs?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -0,0 +1,68 @@\n+macro_rules! imp {\n+    ($name:ident) => {\n+        pub struct $name {\n+            pub op: usize,\n+        }\n+        impl $name {\n+            pub fn op() {}\n+            pub fn cmp() {}\n+            pub fn map() {}\n+            pub fn pop() {}\n+            pub fn ptr() {}\n+            pub fn rpo() {}\n+            pub fn drop() {}\n+            pub fn copy() {}\n+            pub fn zip() {}\n+            pub fn sup() {}\n+            pub fn pa() {}\n+            pub fn pb() {}\n+            pub fn pc() {}\n+            pub fn pd() {}\n+            pub fn pe() {}\n+            pub fn pf() {}\n+            pub fn pg() {}\n+            pub fn ph() {}\n+            pub fn pi() {}\n+            pub fn pj() {}\n+            pub fn pk() {}\n+            pub fn pl() {}\n+            pub fn pm() {}\n+            pub fn pn() {}\n+            pub fn po() {}\n+        }\n+    };\n+    ($name:ident, $($names:ident),*) => {\n+        imp!($name);\n+        imp!($($names),*);\n+    };\n+}\n+macro_rules! en {\n+    ($name:ident) => {\n+        pub enum $name {\n+            Ptr,\n+            Rp,\n+            Rpo,\n+            Pt,\n+            Drop,\n+            Dr,\n+            Dro,\n+            Sup,\n+            Op,\n+            Cmp,\n+            Map,\n+            Mp,\n+        }\n+    };\n+    ($name:ident, $($names:ident),*) => {\n+        en!($name);\n+        en!($($names),*);\n+    };\n+}\n+\n+imp!(Ot, Foo, Cmp, Map, Loc, Lac, Toc, Si, Sig, Sip, Psy, Psi, Py, Pi, Pa, Pb, Pc, Pd);\n+imp!(Pe, Pf, Pg, Ph, Pj, Pk, Pl, Pm, Pn, Po, Pq, Pr, Ps, Pt, Pu, Pv, Pw, Px, Pz, Ap, Bp, Cp);\n+imp!(Dp, Ep, Fp, Gp, Hp, Ip, Jp, Kp, Lp, Mp, Np, Op, Pp, Qp, Rp, Sp, Tp, Up, Vp, Wp, Xp, Yp, Zp);\n+\n+en!(Place, Plac, Plae, Plce, Pace, Scalar, Scalr, Scaar, Sclar, Salar);\n+\n+pub struct P;"}, {"sha": "a446c39ebad57cdc05bb311e2f8614d32c672c90", "filename": "src/test/rustdoc-js/module-substring.js", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fmodule-substring.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fmodule-substring.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fmodule-substring.js?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -0,0 +1,9 @@\n+const QUERY = 'ig::pc';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'module_substring::Sig', 'name': 'pc' },\n+        { 'path': 'module_substring::Si', 'name': 'pc' },\n+        { 'path': 'module_substring::Si', 'name': 'pa' },\n+    ],\n+};"}, {"sha": "2eacc0a358284f07a4dd63f0ddb9be58f6a8bbbe", "filename": "src/test/rustdoc-js/module-substring.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fmodule-substring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fmodule-substring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fmodule-substring.rs?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -0,0 +1,68 @@\n+macro_rules! imp {\n+    ($name:ident) => {\n+        pub struct $name {\n+            pub op: usize,\n+        }\n+        impl $name {\n+            pub fn op() {}\n+            pub fn cmp() {}\n+            pub fn map() {}\n+            pub fn pop() {}\n+            pub fn ptr() {}\n+            pub fn rpo() {}\n+            pub fn drop() {}\n+            pub fn copy() {}\n+            pub fn zip() {}\n+            pub fn sup() {}\n+            pub fn pa() {}\n+            pub fn pb() {}\n+            pub fn pc() {}\n+            pub fn pd() {}\n+            pub fn pe() {}\n+            pub fn pf() {}\n+            pub fn pg() {}\n+            pub fn ph() {}\n+            pub fn pi() {}\n+            pub fn pj() {}\n+            pub fn pk() {}\n+            pub fn pl() {}\n+            pub fn pm() {}\n+            pub fn pn() {}\n+            pub fn po() {}\n+        }\n+    };\n+    ($name:ident, $($names:ident),*) => {\n+        imp!($name);\n+        imp!($($names),*);\n+    };\n+}\n+macro_rules! en {\n+    ($name:ident) => {\n+        pub enum $name {\n+            Ptr,\n+            Rp,\n+            Rpo,\n+            Pt,\n+            Drop,\n+            Dr,\n+            Dro,\n+            Sup,\n+            Op,\n+            Cmp,\n+            Map,\n+            Mp,\n+        }\n+    };\n+    ($name:ident, $($names:ident),*) => {\n+        en!($name);\n+        en!($($names),*);\n+    };\n+}\n+\n+imp!(Ot, Foo, Cmp, Map, Loc, Lac, Toc, Si, Sig, Sip, Psy, Psi, Py, Pi, Pa, Pb, Pc, Pd);\n+imp!(Pe, Pf, Pg, Ph, Pj, Pk, Pl, Pm, Pn, Po, Pq, Pr, Ps, Pt, Pu, Pv, Pw, Px, Pz, Ap, Bp, Cp);\n+imp!(Dp, Ep, Fp, Gp, Hp, Ip, Jp, Kp, Lp, Mp, Np, Op, Pp, Qp, Rp, Sp, Tp, Up, Vp, Wp, Xp, Yp, Zp);\n+\n+en!(Place, Plac, Plae, Plce, Pace, Scalar, Scalr, Scaar, Sclar, Salar);\n+\n+pub struct P;"}, {"sha": "d14672af71fd6b714d3107b68c04ee16bd130d71", "filename": "src/test/rustdoc-js/search-short-types.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.js?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -3,6 +3,8 @@ const QUERY = 'P';\n const EXPECTED = {\n     'others': [\n         { 'path': 'search_short_types', 'name': 'P' },\n+        { 'path': 'search_short_types::VeryLongTypeName', 'name': 'p' },\n         { 'path': 'search_short_types', 'name': 'Ap' },\n+        { 'path': 'search_short_types::VeryLongTypeName', 'name': 'ap' },\n     ],\n };"}, {"sha": "a4083f9a76401897190efbe3c0086954d5b9622d", "filename": "src/test/rustdoc-js/search-short-types.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb84aa4744c7a6120d8311806912240275d04960/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.rs?ref=cb84aa4744c7a6120d8311806912240275d04960", "patch": "@@ -66,3 +66,9 @@ imp!(Dp, Ep, Fp, Gp, Hp, Ip, Jp, Kp, Lp, Mp, Np, Op, Pp, Qp, Rp, Sp, Tp, Up, Vp,\n en!(Place, Plac, Plae, Plce, Pace, Scalar, Scalr, Scaar, Sclar, Salar);\n \n pub struct P;\n+\n+pub struct VeryLongTypeName;\n+impl VeryLongTypeName {\n+    pub fn p() {}\n+    pub fn ap() {}\n+}"}]}