{"sha": "4ad53dc9f5b43e0fa27622e3e40faeac15f00f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDUzZGM5ZjViNDNlMGZhMjc2MjJlM2U0MGZhZWFjMTVmMDBmMzE=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-20T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-20T00:00:00Z"}, "message": "Use pointer type in AtomicPtr::swap implementation", "tree": {"sha": "174d8437af5aaae4e8eba544debe25f4a26e780d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/174d8437af5aaae4e8eba544debe25f4a26e780d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31", "html_url": "https://github.com/rust-lang/rust/commit/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59aaa2a04bbcc17c5c9495e9d995e1be73c1b969", "url": "https://api.github.com/repos/rust-lang/rust/commits/59aaa2a04bbcc17c5c9495e9d995e1be73c1b969", "html_url": "https://github.com/rust-lang/rust/commit/59aaa2a04bbcc17c5c9495e9d995e1be73c1b969"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "80e3ed75b8585de8c7f5e2341ccceca7c9f39eee", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=4ad53dc9f5b43e0fa27622e3e40faeac15f00f31", "patch": "@@ -524,8 +524,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         };\n \n                         let ty = substs.type_at(0);\n-                        if int_type_width_signed(ty, bx.tcx()).is_some() {\n-                            bx.atomic_rmw(atom_op, args[0].immediate(), args[1].immediate(), order)\n+                        if int_type_width_signed(ty, bx.tcx()).is_some()\n+                            || (ty.is_unsafe_ptr() && op == \"xchg\")\n+                        {\n+                            let mut ptr = args[0].immediate();\n+                            let mut val = args[1].immediate();\n+                            if ty.is_unsafe_ptr() {\n+                                // Some platforms do not support atomic operations on pointers,\n+                                // so we cast to integer first.\n+                                let ptr_llty = bx.type_ptr_to(bx.type_isize());\n+                                ptr = bx.pointercast(ptr, ptr_llty);\n+                                val = bx.ptrtoint(val, bx.type_isize());\n+                            }\n+                            bx.atomic_rmw(atom_op, ptr, val, order)\n                         } else {\n                             return invalid_monomorphization(ty);\n                         }"}, {"sha": "a96da9aa6dc73c3879acbffcab9a0fc082c3ed3d", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad53dc9f5b43e0fa27622e3e40faeac15f00f31/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4ad53dc9f5b43e0fa27622e3e40faeac15f00f31", "patch": "@@ -1040,8 +1040,16 @@ impl<T> AtomicPtr<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n     pub fn swap(&self, ptr: *mut T, order: Ordering) -> *mut T {\n+        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe { atomic_swap(self.p.get() as *mut usize, ptr as usize, order) as *mut T }\n+        unsafe {\n+            atomic_swap(self.p.get() as *mut usize, ptr as usize, order) as *mut T\n+        }\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: data races are prevented by atomic intrinsics.\n+        unsafe {\n+            atomic_swap(self.p.get(), ptr, order)\n+        }\n     }\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value."}]}