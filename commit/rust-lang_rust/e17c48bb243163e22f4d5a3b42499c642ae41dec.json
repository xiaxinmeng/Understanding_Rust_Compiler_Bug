{"sha": "e17c48bb243163e22f4d5a3b42499c642ae41dec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2M0OGJiMjQzMTYzZTIyZjRkNWEzYjQyNDk5YzY0MmFlNDFkZWM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-05T10:01:00Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-05T10:01:00Z"}, "message": "trans: don't declare symbols that were already imported.", "tree": {"sha": "e1cdc39335b03c350f15fc7aac632d4c4304e0a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1cdc39335b03c350f15fc7aac632d4c4304e0a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17c48bb243163e22f4d5a3b42499c642ae41dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17c48bb243163e22f4d5a3b42499c642ae41dec", "html_url": "https://github.com/rust-lang/rust/commit/e17c48bb243163e22f4d5a3b42499c642ae41dec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17c48bb243163e22f4d5a3b42499c642ae41dec/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600dc3552ffcdff014cc770e98a67b674496d10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/600dc3552ffcdff014cc770e98a67b674496d10a", "html_url": "https://github.com/rust-lang/rust/commit/600dc3552ffcdff014cc770e98a67b674496d10a"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "6b0945b2bb24822fe64c0a76fb00e47b9df80a15", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e17c48bb243163e22f4d5a3b42499c642ae41dec/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17c48bb243163e22f4d5a3b42499c642ae41dec/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=e17c48bb243163e22f4d5a3b42499c642ae41dec", "patch": "@@ -541,14 +541,6 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n     };\n \n-    let llfn = declare::declare_fn(ccx, &sym, ty);\n-    attributes::from_fn_attrs(ccx, attrs, llfn);\n-    if let Some(id) = local_item {\n-        // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n-        attributes::unwind(llfn, true);\n-        ccx.item_symbols().borrow_mut().insert(id, sym);\n-    }\n-\n     // This is subtle and surprising, but sometimes we have to bitcast\n     // the resulting fn pointer.  The reason has to do with external\n     // functions.  If you have two crates that both bind the same C\n@@ -572,12 +564,32 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // This can occur on either a crate-local or crate-external\n     // reference. It also occurs when testing libcore and in some\n     // other weird situations. Annoying.\n+\n     let llptrty = type_of::type_of(ccx, fn_ptr_ty);\n-    let llfn = if common::val_ty(llfn) != llptrty {\n-        debug!(\"get_fn: casting {:?} to {:?}\", llfn, llptrty);\n-        consts::ptrcast(llfn, llptrty)\n+    let llfn = if let Some(llfn) = declare::get_declared_value(ccx, &sym) {\n+        if common::val_ty(llfn) != llptrty {\n+            if local_item.is_some() {\n+                bug!(\"symbol `{}` previously declared as {:?}, now wanted as {:?}\",\n+                     sym, Value(llfn), llptrty);\n+            }\n+            debug!(\"get_fn: casting {:?} to {:?}\", llfn, llptrty);\n+            consts::ptrcast(llfn, llptrty)\n+        } else {\n+            debug!(\"get_fn: not casting pointer!\");\n+            llfn\n+        }\n     } else {\n+        let llfn = declare::declare_fn(ccx, &sym, ty);\n+        assert_eq!(common::val_ty(llfn), llptrty);\n         debug!(\"get_fn: not casting pointer!\");\n+\n+        attributes::from_fn_attrs(ccx, attrs, llfn);\n+        if let Some(id) = local_item {\n+            // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n+            attributes::unwind(llfn, true);\n+            ccx.item_symbols().borrow_mut().insert(id, sym);\n+        }\n+\n         llfn\n     };\n "}, {"sha": "eb520fe744a3d7b3190da3a8baaddfbf52b6dc40", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e17c48bb243163e22f4d5a3b42499c642ae41dec/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17c48bb243163e22f4d5a3b42499c642ae41dec/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=e17c48bb243163e22f4d5a3b42499c642ae41dec", "patch": "@@ -26,6 +26,7 @@ use abi::{Abi, FnType};\n use attributes;\n use context::CrateContext;\n use type_::Type;\n+use value::Value;\n \n use std::ffi::CString;\n \n@@ -146,27 +147,33 @@ pub fn define_internal_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n \n-/// Get defined or externally defined (AvailableExternally linkage) value by\n-/// name.\n-pub fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n-    debug!(\"get_defined_value(name={:?})\", name);\n+/// Get declared value by name.\n+pub fn get_declared_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n+    debug!(\"get_declared_value(name={:?})\", name);\n     let namebuf = CString::new(name).unwrap_or_else(|_|{\n         bug!(\"name {:?} contains an interior null byte\", name)\n     });\n     let val = unsafe { llvm::LLVMGetNamedValue(ccx.llmod(), namebuf.as_ptr()) };\n     if val.is_null() {\n-        debug!(\"get_defined_value: {:?} value is null\", name);\n+        debug!(\"get_declared_value: {:?} value is null\", name);\n         None\n     } else {\n+        debug!(\"get_declared_value: {:?} => {:?}\", name, Value(val));\n+        Some(val)\n+    }\n+}\n+\n+/// Get defined or externally defined (AvailableExternally linkage) value by\n+/// name.\n+pub fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n+    get_declared_value(ccx, name).and_then(|val|{\n         let declaration = unsafe {\n             llvm::LLVMIsDeclaration(val) != 0\n         };\n-        debug!(\"get_defined_value: found {:?} value (declaration: {})\",\n-                name, declaration);\n         if !declaration {\n             Some(val)\n         } else {\n             None\n         }\n-    }\n+    })\n }"}, {"sha": "6c393ce99e34df204e3d2c2eb8b2fcc7c0cae7db", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e17c48bb243163e22f4d5a3b42499c642ae41dec/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17c48bb243163e22f4d5a3b42499c642ae41dec/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=e17c48bb243163e22f4d5a3b42499c642ae41dec", "patch": "@@ -31,9 +31,20 @@ mod rustrt2 {\n     }\n }\n \n+mod rustrt3 {\n+    // Different type, but same ABI (on all supported platforms).\n+    // Ensures that we don't ICE or trigger LLVM asserts when\n+    // importing the same symbol under different types.\n+    // See https://github.com/rust-lang/rust/issues/32740.\n+    extern {\n+        pub fn rust_get_test_int() -> *const u8;\n+    }\n+}\n+\n pub fn main() {\n     unsafe {\n-        rustrt1::rust_get_test_int();\n-        rustrt2::rust_get_test_int();\n+        let x = rustrt1::rust_get_test_int();\n+        assert_eq!(x, rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n     }\n }"}]}