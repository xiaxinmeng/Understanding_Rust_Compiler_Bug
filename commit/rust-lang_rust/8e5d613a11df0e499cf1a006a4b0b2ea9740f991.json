{"sha": "8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNWQ2MTNhMTFkZjBlNDk5Y2YxYTAwNmE0YjBiMmVhOTc0MGY5OTE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-19T18:43:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:57Z"}, "message": "Wrap QueryDescription into a macro.", "tree": {"sha": "5ba7b892c418dac075669d360bbc6346c788ceec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ba7b892c418dac075669d360bbc6346c788ceec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "html_url": "https://github.com/rust-lang/rust/commit/8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc0b199a904fe0318c7a5cf55a610c2ded6ca68", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc0b199a904fe0318c7a5cf55a610c2ded6ca68", "html_url": "https://github.com/rust-lang/rust/commit/cdc0b199a904fe0318c7a5cf55a610c2ded6ca68"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "5326f0ae269663ef40d1d550aff840f6f2af588e", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "patch": "@@ -344,7 +344,6 @@ fn add_query_description_impl(\n     impls: &mut proc_macro2::TokenStream,\n ) {\n     let name = &query.name;\n-    let arg = &query.arg;\n     let key = &query.key.0;\n \n     // Find out if we should cache the query on disk\n@@ -414,7 +413,7 @@ fn add_query_description_impl(\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        fn describe(tcx: QueryCtxt<'tcx>, key: #arg) -> String {\n+        fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n             let (#tcx, #key) = (*tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths(|| format!(#desc).into())\n         }\n@@ -520,7 +519,8 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 $($macro)*(#cached_queries);\n             }\n         }\n-\n-        #query_description_stream\n+        macro_rules! rustc_query_description {\n+            () => { #query_description_stream }\n+        }\n     })\n }"}, {"sha": "4207e2dea34a3fc5278b240c8263f7e83d95f161", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "patch": "@@ -1,28 +1,3 @@\n-use crate::dep_graph::SerializedDepNodeIndex;\n-use crate::mir::interpret::{GlobalId, LitToConstInput};\n-use crate::traits;\n-use crate::traits::query::{\n-    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n-    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n-    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n-};\n-use crate::ty::query::queries;\n-use crate::ty::query::QueryCtxt;\n-use crate::ty::subst::{GenericArg, SubstsRef};\n-use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n-use rustc_query_system::query::QueryDescription;\n-\n-use rustc_span::symbol::Symbol;\n-\n-fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n-    if def_id.is_top_level_module() {\n-        \"top-level module\".to_string()\n-    } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n-    }\n-}\n-\n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way"}, {"sha": "61bc4f3c1c446ac43d3688155acf717a74554a2e", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5d613a11df0e499cf1a006a4b0b2ea9740f991/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=8e5d613a11df0e499cf1a006a4b0b2ea9740f991", "patch": "@@ -3,19 +3,19 @@\n //! manage the caches, and so forth.\n \n use crate::dep_graph::{self, DepKind, DepNode, DepNodeExt, DepNodeIndex, SerializedDepNodeIndex};\n-use crate::ty::query::{on_disk_cache, Queries, Query};\n+use crate::ty::query::{on_disk_cache, queries, Queries, Query};\n use crate::ty::tls::{self, ImplicitCtxt};\n use crate::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n-use rustc_query_system::query::QueryContext;\n use rustc_query_system::query::{CycleError, QueryJobId, QueryJobInfo};\n+use rustc_query_system::query::{QueryContext, QueryDescription};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n use rustc_serialize::opaque;\n-use rustc_span::def_id::DefId;\n+use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n \n #[derive(Copy, Clone)]\n@@ -797,3 +797,13 @@ macro_rules! define_provider_struct {\n         }\n     };\n }\n+\n+fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n+    if def_id.is_top_level_module() {\n+        \"top-level module\".to_string()\n+    } else {\n+        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n+    }\n+}\n+\n+rustc_query_description! {}"}]}