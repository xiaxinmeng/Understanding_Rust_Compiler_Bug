{"sha": "6c6ae965ba1235b6cbd8299e2959698bd394e80a", "node_id": "C_kwDOAAsO6NoAKDZjNmFlOTY1YmExMjM1YjZjYmQ4Mjk5ZTI5NTk2OThiZDM5NGU4MGE", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-07-08T13:44:49Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-07-08T13:44:49Z"}, "message": "Update remaining GitHub URLs", "tree": {"sha": "17af8583fabe0eba9592c1e9882dfd145974aec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17af8583fabe0eba9592c1e9882dfd145974aec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c6ae965ba1235b6cbd8299e2959698bd394e80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6ae965ba1235b6cbd8299e2959698bd394e80a", "html_url": "https://github.com/rust-lang/rust/commit/6c6ae965ba1235b6cbd8299e2959698bd394e80a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c6ae965ba1235b6cbd8299e2959698bd394e80a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09abd76c6a601797c2287a9ef341b7ce904e8aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/09abd76c6a601797c2287a9ef341b7ce904e8aa6", "html_url": "https://github.com/rust-lang/rust/commit/09abd76c6a601797c2287a9ef341b7ce904e8aa6"}], "stats": {"total": 290, "additions": 145, "deletions": 145}, "files": [{"sha": "459b82599f39fd9c96a329f07ace9f67117a4169", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -69,7 +69,7 @@ impl SourceRoot {\n /// `CrateGraph` by lowering `cargo metadata` output.\n ///\n /// `CrateGraph` is `!Serialize` by design, see\n-/// <https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md#serialization>\n+/// <https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/architecture.md#serialization>\n #[derive(Debug, Clone, Default /* Serialize, Deserialize */)]\n pub struct CrateGraph {\n     arena: FxHashMap<CrateId, CrateData>,\n@@ -482,7 +482,7 @@ impl CrateGraph {\n         None\n     }\n \n-    // Work around for https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n+    // Work around for https://github.com/rust-lang/rust-analyzer/issues/6038.\n     // As hacky as it gets.\n     pub fn patch_cfg_if(&mut self) -> bool {\n         let cfg_if = self.hacky_find_crate(\"cfg_if\");"}, {"sha": "3bba08cfcce48bded7405a0473f6219534230890", "filename": "crates/hir-def/src/body/tests/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Ftests%2Fblock.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -345,7 +345,7 @@ fn foo() {\n \n #[test]\n fn is_visible_from_same_def_map() {\n-    // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/9481\n+    // Regression test for https://github.com/rust-lang/rust-analyzer/issues/9481\n     cov_mark::check!(is_visible_from_same_block_def_map);\n     check_at(\n         r#\""}, {"sha": "81b9c5c4bfaf98bc3a43eb7cdacd050c38945e00", "filename": "crates/hir-def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -72,7 +72,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n     // fact.\n     //\n     // This is the usual\n-    // <https://github.com/rust-analyzer/rust-analyzer/issues/3407>\n+    // <https://github.com/rust-lang/rust-analyzer/issues/3407>\n     // resolve/record tension!\n     //\n     // So here we try to do a resolve, which is necessary a heuristic. For macro"}, {"sha": "9c1fe54738e216fe463a1653a00e8c27367f3291", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1178,7 +1178,7 @@ abs!( = > #);\n #[test]\n fn test_tt_with_composite_without_space() {\n     // Test macro input without any spaces\n-    // See https://github.com/rust-analyzer/rust-analyzer/issues/6692\n+    // See https://github.com/rust-lang/rust-analyzer/issues/6692\n     check(\n         r#\"\n macro_rules! m { ($ op:tt, $j:path) => ( ok!(); ) }"}, {"sha": "520a6ae1cba5a345a3069fc458ba413043d8f510", "filename": "crates/hir-def/src/nameres/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -759,7 +759,7 @@ fn unresolved_attributes_fall_back_track_per_file_moditems() {\n \n #[test]\n fn unresolved_attrs_extern_block_hang() {\n-    // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/8905\n+    // Regression test for https://github.com/rust-lang/rust-analyzer/issues/8905\n     check(\n         r#\"\n #[unresolved]\n@@ -823,7 +823,7 @@ fn derive() {}\n \n #[test]\n fn unresolved_attr_with_cfg_attr_hang() {\n-    // Another regression test for https://github.com/rust-analyzer/rust-analyzer/issues/8905\n+    // Another regression test for https://github.com/rust-lang/rust-analyzer/issues/8905\n     check(\n         r#\"\n #[cfg_attr(not(off), unresolved, unresolved)]"}, {"sha": "81a2f024b36b4c2c52e7034f5939536da3b757eb", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -434,7 +434,7 @@ pub enum ConstScalar {\n     /// Case of an unknown value that rustc might know but we don't\n     // FIXME: this is a hack to get around chalk not being able to represent unevaluatable\n     // constants\n-    // https://github.com/rust-analyzer/rust-analyzer/pull/8813#issuecomment-840679177\n+    // https://github.com/rust-lang/rust-analyzer/pull/8813#issuecomment-840679177\n     // https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/Handling.20non.20evaluatable.20constants'.20equality/near/238386348\n     Unknown,\n }"}, {"sha": "c3a9091ee79ac8cb1ae24a74d9efb501cb856624", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -400,7 +400,7 @@ fn concat_expand(\n     for (i, mut t) in tt.token_trees.iter().enumerate() {\n         // FIXME: hack on top of a hack: `$e:expr` captures get surrounded in parentheses\n         // to ensure the right parsing order, so skip the parentheses here. Ideally we'd\n-        // implement rustc's model. cc https://github.com/rust-analyzer/rust-analyzer/pull/10623\n+        // implement rustc's model. cc https://github.com/rust-lang/rust-analyzer/pull/10623\n         if let tt::TokenTree::Subtree(tt::Subtree { delimiter: Some(delim), token_trees }) = t {\n             if let [tt] = &**token_trees {\n                 if delim.kind == tt::DelimiterKind::Parenthesis {"}, {"sha": "93a88ab58ef82dee1d6b7fe9a8e03238136a6987", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -985,7 +985,7 @@ fn test() {\n \n #[test]\n fn cfg_tail() {\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/8378\n+    // https://github.com/rust-lang/rust-analyzer/issues/8378\n     check_infer(\n         r#\"\n         fn fake_tail(){"}, {"sha": "3cdb8df31c4075326c152f795fb435bd68957418", "filename": "crates/ide-assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -187,7 +187,7 @@ fn f() {\n         )\n     }\n \n-    /// https://github.com/rust-analyzer/rust-analyzer/issues/2922\n+    /// https://github.com/rust-lang/rust-analyzer/issues/2922\n     #[test]\n     fn regression_issue_2922() {\n         check_assist("}, {"sha": "fd3ae5f78c2f244043f764ade10862100b280507", "filename": "crates/ide-assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -222,7 +222,7 @@ fn f() { !(S <= S || S < S) }\n         check_assist(apply_demorgan, \"fn f() { (x ||$0 x) }\", \"fn f() { !(!x && !x) }\")\n     }\n \n-    // https://github.com/rust-analyzer/rust-analyzer/issues/10963\n+    // https://github.com/rust-lang/rust-analyzer/issues/10963\n     #[test]\n     fn demorgan_doesnt_hang() {\n         check_assist("}, {"sha": "c36cb3ff109c63d55486620ae4af387402b8e596", "filename": "crates/ide-assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1793,7 +1793,7 @@ fn foo() -> Option<()> {\n     let v: &i32 = &t.0;         // no deref, no parens, remove `&`\n     f1(t.0);                    // deref, no parens\n     f2(&t.0);                   // `&*` -> cancel out -> no deref, no parens\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/1109#issuecomment-658868639\n+    // https://github.com/rust-lang/rust-analyzer/issues/1109#issuecomment-658868639\n     // let v: i32 = t.1.0;      // no deref, no parens\n     let v: i32 = t.4.value;     // no deref, no parens\n     t.0.do_stuff();             // deref, parens\n@@ -1827,7 +1827,7 @@ fn foo() -> Option<()> {\n     let v: &i32 = _0;         // no deref, no parens, remove `&`\n     f1(*_0);                    // deref, no parens\n     f2(_0);                   // `&*` -> cancel out -> no deref, no parens\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/1109#issuecomment-658868639\n+    // https://github.com/rust-lang/rust-analyzer/issues/1109#issuecomment-658868639\n     // let v: i32 = t.1.0;      // no deref, no parens\n     let v: i32 = _4.value;     // no deref, no parens\n     (*_0).do_stuff();             // deref, parens"}, {"sha": "51be0a715abeb61475c70ff34255eafb08405337", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1053,7 +1053,7 @@ fn locals_defined_in_body(\n     body: &FunctionBody,\n ) -> FxIndexSet<Local> {\n     // FIXME: this doesn't work well with macros\n-    //        see https://github.com/rust-analyzer/rust-analyzer/pull/7535#discussion_r570048550\n+    //        see https://github.com/rust-lang/rust-analyzer/pull/7535#discussion_r570048550\n     let mut res = FxIndexSet::default();\n     body.walk_pat(&mut |pat| {\n         if let ast::Pat::IdentPat(pat) = pat {"}, {"sha": "8f3fcaf6fb27cdc1f596d23fc5f9249c0d9c1f68", "filename": "crates/ide-assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -67,7 +67,7 @@ mod tests {\n \n     #[test]\n     fn flip_comma_before_punct() {\n-        // See https://github.com/rust-analyzer/rust-analyzer/issues/1619\n+        // See https://github.com/rust-lang/rust-analyzer/issues/1619\n         // \"Flip comma\" assist shouldn't be applicable to the last comma in enum or struct\n         // declaration body.\n         check_assist_not_applicable(flip_comma, \"pub enum Test { A,$0 }\");\n@@ -86,7 +86,7 @@ mod tests {\n     #[test]\n     fn flip_comma_not_applicable_for_macro_input() {\n         // \"Flip comma\" assist shouldn't be applicable inside the macro call\n-        // See https://github.com/rust-analyzer/rust-analyzer/issues/7693\n+        // See https://github.com/rust-lang/rust-analyzer/issues/7693\n         check_assist_not_applicable(flip_comma, r#\"bar!(a,$0 b)\"#);\n     }\n }"}, {"sha": "be91eacbe7caf54d0b7adf6f37f482aa6b95ad03", "filename": "crates/ide-assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -150,7 +150,7 @@ mod tests {\n \n     #[test]\n     fn test_remove_dbg_keep_semicolon_in_let() {\n-        // https://github.com/rust-analyzer/rust-analyzer/issues/5129#issuecomment-651399779\n+        // https://github.com/rust-lang/rust-analyzer/issues/5129#issuecomment-651399779\n         check(\n             r#\"let res = $0dbg!(1 * 20); // needless comment\"#,\n             r#\"let res = 1 * 20; // needless comment\"#,"}, {"sha": "67eb1754607c450c14be7aa6c8a4aead6b4bd274", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -411,7 +411,7 @@ impl Test for T {\n             expect![[\"\"]],\n         );\n \n-        // https://github.com/rust-analyzer/rust-analyzer/pull/5976#issuecomment-692332191\n+        // https://github.com/rust-lang/rust-analyzer/pull/5976#issuecomment-692332191\n         check(\n             r\"\n trait Test { fn test(); fn test2(); }"}, {"sha": "ca2269f1398f0e3090edcac951049766d8f230d9", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -243,7 +243,7 @@ fn main() { foo! {$0} }\n \n     #[test]\n     fn completes_macro_call_if_cursor_at_bang_token() {\n-        // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/9904\n+        // Regression test for https://github.com/rust-lang/rust-analyzer/issues/9904\n         cov_mark::check!(completes_macro_call_if_cursor_at_bang_token);\n         check_edit(\n             \"foo!\","}, {"sha": "fa139ebc24ca52b9ea872eb9aee0746ae9fae5d7", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -372,7 +372,7 @@ fn source_edit_from_name(edit: &mut TextEditBuilder, name: &ast::Name, new_name:\n             //      ^ insert `new_name: `\n \n             // FIXME: instead of splitting the shorthand, recursively trigger a rename of the\n-            // other name https://github.com/rust-analyzer/rust-analyzer/issues/6547\n+            // other name https://github.com/rust-lang/rust-analyzer/issues/6547\n             edit.insert(ident_pat.syntax().text_range().start(), format!(\"{}: \", new_name));\n             return true;\n         }"}, {"sha": "d6a66dc1509178e28af82c4479396298c7448ae8", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -41,7 +41,7 @@ macro_rules! compile_error { () => {} }\n     #[test]\n     fn eager_macro_concat() {\n         // FIXME: this is incorrectly handling `$crate`, resulting in a wrong diagnostic.\n-        // See: https://github.com/rust-analyzer/rust-analyzer/issues/10300\n+        // See: https://github.com/rust-lang/rust-analyzer/issues/10300\n \n         check_diagnostics(\n             r#\""}, {"sha": "b2f6d18553bb2a01a4c0457eadddfa5fa11de3ad", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -357,7 +357,7 @@ fn traverse(\n             element\n         };\n \n-        // FIXME: do proper macro def highlighting https://github.com/rust-analyzer/rust-analyzer/issues/6232\n+        // FIXME: do proper macro def highlighting https://github.com/rust-lang/rust-analyzer/issues/6232\n         // Skip metavariables from being highlighted to prevent keyword highlighting in them\n         if descended_element.as_token().and_then(|t| macro_highlighter.highlight(t)).is_some() {\n             continue;"}, {"sha": "318d492ab4a573abad3f420dff8c96fbd2ac0e06", "filename": "crates/parser/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -5,7 +5,7 @@ SOURCE_FILE\n   WHITESPACE \"\\n\"\n   COMMENT \"//! \"\n   WHITESPACE \"\\n\"\n-  COMMENT \"//! Reported to rust-analyzer in https://github.com/rust-analyzer/rust-analyzer/issues/290\"\n+  COMMENT \"//! Reported to rust-analyzer in https://github.com/rust-lang/rust-analyzer/issues/290\"\n   WHITESPACE \"\\n\\n\"\n   ATTR\n     POUND \"#\""}, {"sha": "fb7d706b05b2aa40483cee1cd4476fdf7824a58b", "filename": "crates/parser/test_data/parser/ok/0035_weird_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,7 +1,7 @@\n //! Adapted from a `rustc` test, which can be found at \n //! https://github.com/rust-lang/rust/blob/6d34ec18c7d7e574553f6347ecf08e1e1c45c13d/src/test/run-pass/weird-exprs.rs.\n //! \n-//! Reported to rust-analyzer in https://github.com/rust-analyzer/rust-analyzer/issues/290\n+//! Reported to rust-analyzer in https://github.com/rust-lang/rust-analyzer/issues/290\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]"}, {"sha": "9382020e2f608bf84e8c84fcf5ddebc1f7910578", "filename": "crates/parser/test_data/parser/ok/0036_fully_qualified.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/311\"\n+  COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/311\"\n   WHITESPACE \"\\n\\n\"\n   FN\n     VISIBILITY"}, {"sha": "f8a085dc7da3aac62c2669fda8d80952dd4457f4", "filename": "crates/parser/test_data/parser/ok/0036_fully_qualified.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/issues/311\n+// https://github.com/rust-lang/rust-analyzer/issues/311\n \n pub fn foo<S: Iterator>() -> String\n where"}, {"sha": "b4a3fc6292e96d1e78c0a695baa487727e8b068d", "filename": "crates/parser/test_data/parser/ok/0037_mod.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0037_mod.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0037_mod.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0037_mod.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/357\"\n+  COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/357\"\n   WHITESPACE \"\\n\\n\"\n   COMMENT \"//! docs\"\n   WHITESPACE \"\\n\""}, {"sha": "05f6cf05cb40fd833b4fdabcccf3240de7212074", "filename": "crates/parser/test_data/parser/ok/0037_mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0037_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0037_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0037_mod.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/issues/357\n+// https://github.com/rust-lang/rust-analyzer/issues/357\n \n //! docs\n // non-docs"}, {"sha": "a536b0e881f0e5c4c3016a6e3fda8e919efc5bc1", "filename": "crates/parser/test_data/parser/ok/0042_ufcs_call_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/596\"\n+  COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/596\"\n   WHITESPACE \"\\n\\n\"\n   STRUCT\n     STRUCT_KW \"struct\""}, {"sha": "09b18982effe110e4def895d7dff5e970aa81422", "filename": "crates/parser/test_data/parser/ok/0042_ufcs_call_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/issues/596\n+// https://github.com/rust-lang/rust-analyzer/issues/596\n \n struct Foo;\n "}, {"sha": "3b02c3f96ae02416575d443b79f9e8270037e159", "filename": "crates/parser/test_data/parser/ok/0043_complex_assignment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/674\"\n+  COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/674\"\n   WHITESPACE \"\\n\\n\"\n   STRUCT\n     STRUCT_KW \"struct\""}, {"sha": "961dc8c7d1aa1eea7ebe2cdc67ae81232fcb2e59", "filename": "crates/parser/test_data/parser/ok/0043_complex_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/issues/674\n+// https://github.com/rust-lang/rust-analyzer/issues/674\n \n struct Repr { raw: [u8; 1] }\n "}, {"sha": "f3c20337e43fb714049ce9febf6e72aee9a1fbe1", "filename": "crates/parser/test_data/parser/ok/0044_let_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,6 +1,6 @@\n SOURCE_FILE\n   FN\n-    COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/677\"\n+    COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/677\"\n     WHITESPACE \"\\n\"\n     FN_KW \"fn\"\n     WHITESPACE \" \""}, {"sha": "7d15248790915e2b7e40b92ebc071f489b3ab94f", "filename": "crates/parser/test_data/parser/ok/0044_let_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/issues/677\n+// https://github.com/rust-lang/rust-analyzer/issues/677\n fn main() {\n     #[cfg(feature = \"backtrace\")]\n     let exit_code = panic::catch_unwind(move || main());"}, {"sha": "bef13807116308dc22154ec69dd143f645190d64", "filename": "crates/parser/test_data/parser/ok/0045_block_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -138,7 +138,7 @@ SOURCE_FILE\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\\n\"\n   IMPL\n-    COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/689\"\n+    COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/689\"\n     WHITESPACE \"\\n\"\n     IMPL_KW \"impl\"\n     WHITESPACE \" \""}, {"sha": "f16c4566e77c3a51a4127f82eec03086a531a0b3", "filename": "crates/parser/test_data/parser/ok/0045_block_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -16,7 +16,7 @@ fn outer() {\n     let _ = #[doc(\"Outer attributes are always allowed\")] {};\n }\n \n-// https://github.com/rust-analyzer/rust-analyzer/issues/689\n+// https://github.com/rust-lang/rust-analyzer/issues/689\n impl Whatever {\n     fn salsa_event(&self, event_fn: impl Fn() -> Event<Self>) {\n         #![allow(unused_variables)] // this is  `inner_attr` of the block"}, {"sha": "c7eb3687deec6299e79a0017bd2a9f1201d39ce8", "filename": "crates/parser/test_data/parser/ok/0047_minus_in_inner_pattern.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/issues/972\"\n+  COMMENT \"// https://github.com/rust-lang/rust-analyzer/issues/972\"\n   WHITESPACE \"\\n\\n\"\n   FN\n     FN_KW \"fn\""}, {"sha": "13dc46afa94a31cae0ee7db48d69dfff9f57d307", "filename": "crates/parser/test_data/parser/ok/0047_minus_in_inner_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/issues/972\n+// https://github.com/rust-lang/rust-analyzer/issues/972\n \n fn main() {\n     match Some(-1) {"}, {"sha": "e0f163b1a1f8e60cfeecaf550f5f14e9eda5b945", "filename": "crates/parser/test_data/parser/ok/0048_compound_assignment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  COMMENT \"// https://github.com/rust-analyzer/rust-analyzer/pull/983\"\n+  COMMENT \"// https://github.com/rust-lang/rust-analyzer/pull/983\"\n   WHITESPACE \"\\n\\n\"\n   FN\n     FN_KW \"fn\""}, {"sha": "1a6a9bdf5657268caf7140b050d3296b98d1d0fd", "filename": "crates/parser/test_data/parser/ok/0048_compound_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -1,4 +1,4 @@\n-// https://github.com/rust-analyzer/rust-analyzer/pull/983\n+// https://github.com/rust-lang/rust-analyzer/pull/983\n \n fn compound_assignment() {\n     let mut a = 0;"}, {"sha": "66fe16e94f77510cb084164f8a9fc3646b41640d", "filename": "crates/proc-macro-api/src/version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -101,7 +101,7 @@ fn read_section<'a>(dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'\n /// * [version string bytes encoded in utf8] <- GET THIS BOI\n /// * [some more bytes that we don't really care but about still there] :-)\n /// Check this issue for more about the bytes layout:\n-/// <https://github.com/rust-analyzer/rust-analyzer/issues/6174>\n+/// <https://github.com/rust-lang/rust-analyzer/issues/6174>\n fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n     let dylib_file = File::open(dylib_path)?;\n     let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;"}, {"sha": "bf9048e935c675b1ccea97d48c316225329d5b95", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -75,7 +75,7 @@ impl Drop for Scope {\n ///\n /// See this diff for how to profile completions:\n ///\n-/// <https://github.com/rust-analyzer/rust-analyzer/pull/5306>\n+/// <https://github.com/rust-lang/rust-analyzer/pull/5306>\n #[derive(Debug)]\n pub struct CpuSpan {\n     _private: (),"}, {"sha": "ad2f7e51bbfb1c0a86b97e7d92822fa1cbfea83c", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -579,7 +579,7 @@ fn cargo_to_crate_graph(\n                 // add any targets except the library target, since those will not work correctly if\n                 // they use dev-dependencies.\n                 // In fact, they can break quite badly if multiple client workspaces get merged:\n-                // https://github.com/rust-analyzer/rust-analyzer/issues/11300\n+                // https://github.com/rust-lang/rust-analyzer/issues/11300\n                 continue;\n             }\n "}, {"sha": "49b83941119f64e84482c5aa0bbf25aeb78ab11c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -38,7 +38,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     //\n     // https://docs.microsoft.com/en-us/windows/win32/procthread/scheduling-priorities\n     // https://docs.microsoft.com/en-us/windows/win32/procthread/priority-boosts\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/2835\n+    // https://github.com/rust-lang/rust-analyzer/issues/2835\n     #[cfg(windows)]\n     unsafe {\n         use winapi::um::processthreadsapi::*;"}, {"sha": "1d666fdf0f3d14a37d12604ddb660291c78fc0a2", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -344,7 +344,7 @@ fn check_dbg(path: &Path, text: &str) {\n \n fn check_test_attrs(path: &Path, text: &str) {\n     let ignore_rule =\n-        \"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#ignore\";\n+        \"https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/style.md#ignore\";\n     let need_ignore: &[&str] = &[\n         // This file.\n         \"slow-tests/tidy.rs\",\n@@ -365,7 +365,7 @@ fn check_test_attrs(path: &Path, text: &str) {\n     }\n \n     let panic_rule =\n-        \"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#should_panic\";\n+        \"https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/style.md#should_panic\";\n     let need_panic: &[&str] = &[\n         // This file.\n         \"slow-tests/tidy.rs\","}, {"sha": "2972fc45f84b0f41f7153a18ea19cca99f3cf9c3", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -125,7 +125,7 @@ impl fmt::Display for Location {\n         let name = self.file.file_name().unwrap();\n         write!(\n             f,\n-            \"https://github.com/rust-analyzer/rust-analyzer/blob/master/{}#L{}[{}]\",\n+            \"https://github.com/rust-lang/rust-analyzer/blob/master/{}#L{}[{}]\",\n             path,\n             self.line,\n             name.to_str().unwrap()"}, {"sha": "940b7f0a242d411e52580a445736a9a2db63f691", "filename": "crates/syntax/src/syntax_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsyntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsyntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_error.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -10,7 +10,7 @@ use crate::{TextRange, TextSize};\n pub struct SyntaxError(String, TextRange);\n \n // FIXME: there was an unused SyntaxErrorKind previously (before this enum was removed)\n-// It was introduced in this PR: https://github.com/rust-analyzer/rust-analyzer/pull/846/files#diff-827da9b03b8f9faa1bade5cdd44d5dafR95\n+// It was introduced in this PR: https://github.com/rust-lang/rust-analyzer/pull/846/files#diff-827da9b03b8f9faa1bade5cdd44d5dafR95\n // but it was not removed by a mistake.\n //\n // So, we need to find a place where to stick validation for attributes in match clauses."}, {"sha": "a08c01597d3f3de9e41dcdcc3f2b7a47c4ccffff", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -47,7 +47,7 @@ impl SyntaxTreeBuilder {\n \n     pub fn finish(self) -> Parse<SyntaxNode> {\n         let (green, errors) = self.finish_raw();\n-        // Disable block validation, see https://github.com/rust-analyzer/rust-analyzer/pull/10357\n+        // Disable block validation, see https://github.com/rust-lang/rust-analyzer/pull/10357\n         if cfg!(debug_assertions) && false {\n             let node = SyntaxNode::new_root(green.clone());\n             crate::validation::validate_block_structure(&node);"}, {"sha": "b9f2b5132353c9c2d30ae16b22cc4b1c98db324f", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -114,15 +114,15 @@ fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n }\n \n fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n-    // FIXME: move this function to outer scope (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366196658)\n+    // FIXME: move this function to outer scope (https://github.com/rust-lang/rust-analyzer/pull/2834#discussion_r366196658)\n     fn unquote(text: &str, prefix_len: usize, end_delimiter: char) -> Option<&str> {\n         text.rfind(end_delimiter).and_then(|end| text.get(prefix_len..end))\n     }\n \n     let token = literal.token();\n     let text = token.text();\n \n-    // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n+    // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-lang/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {\n         let off = token.text_range().start() + TextSize::try_from(off + prefix_len).unwrap();\n         acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));"}, {"sha": "468f2b9e981fe29851a793c0fa412ed7718d378c", "filename": "docs/dev/README.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -28,26 +28,26 @@ https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer\n \n # Issue Labels\n \n-* [good-first-issue](https://github.com/rust-analyzer/rust-analyzer/labels/good%20first%20issue)\n+* [good-first-issue](https://github.com/rust-lang/rust-analyzer/labels/good%20first%20issue)\n   are good issues to get into the project.\n-* [E-has-instructions](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-has-instructions)\n+* [E-has-instructions](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-has-instructions)\n   issues have links to the code in question and tests.\n-* [Broken Window](https://github.com/rust-analyzer/rust-analyzer/issues?q=is:issue+is:open+label:%22Broken+Window%22)\n+* [Broken Window](https://github.com/rust-lang/rust-analyzer/issues?q=is:issue+is:open+label:%22Broken+Window%22)\n   are issues which are not necessarily critical by themselves, but which should be fixed ASAP regardless, to avoid accumulation of technical debt.\n-* [E-easy](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy),\n-  [E-medium](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-medium),\n-  [E-hard](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-hard),\n-  [E-unknown](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-unknown),\n+* [E-easy](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy),\n+  [E-medium](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-medium),\n+  [E-hard](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-hard),\n+  [E-unknown](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-unknown),\n   labels are *estimates* for how hard would be to write a fix. Each triaged issue should have one of these labels.\n-* [S-actionable](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AS-actionable) and\n-  [S-unactionable](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AS-unactionable)\n+* [S-actionable](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AS-actionable) and\n+  [S-unactionable](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AS-unactionable)\n   specify if there are concrete steps to resolve or advance an issue. Roughly, actionable issues need only work to be fixed,\n   while unactionable ones are blocked either on user feedback (providing a reproducible example), or on larger architectural\n   work or decisions. This classification is descriptive, not prescriptive, and might be wrong: Any unactionable issue might have a simple fix that we missed.\n   Each triaged issue should have one of these labels.\n-* [fun](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3Afun)\n+* [fun](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3Afun)\n   is for cool, but probably hard stuff.\n-* [Design](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%Design)\n+* [Design](https://github.com/rust-lang/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%Design)\n   is for moderate/large scale architecture discussion.\n   Also a kind of fun.\n   These issues should generally include a link to a Zulip discussion thread.\n@@ -119,11 +119,11 @@ npm run lint\n ```\n ## How to ...\n \n-* ... add an assist? [#7535](https://github.com/rust-analyzer/rust-analyzer/pull/7535)\n-* ... add a new protocol extension? [#4569](https://github.com/rust-analyzer/rust-analyzer/pull/4569)\n-* ... add a new configuration option? [#7451](https://github.com/rust-analyzer/rust-analyzer/pull/7451)\n-* ... add a new completion? [#6964](https://github.com/rust-analyzer/rust-analyzer/pull/6964)\n-* ... allow new syntax in the parser? [#7338](https://github.com/rust-analyzer/rust-analyzer/pull/7338)\n+* ... add an assist? [#7535](https://github.com/rust-lang/rust-analyzer/pull/7535)\n+* ... add a new protocol extension? [#4569](https://github.com/rust-lang/rust-analyzer/pull/4569)\n+* ... add a new configuration option? [#7451](https://github.com/rust-lang/rust-analyzer/pull/7451)\n+* ... add a new completion? [#6964](https://github.com/rust-lang/rust-analyzer/pull/6964)\n+* ... allow new syntax in the parser? [#7338](https://github.com/rust-lang/rust-analyzer/pull/7338)\n \n ## Logging\n "}, {"sha": "ea4035baf114c1599210a71f5d0630f1b413b67d", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -111,10 +111,10 @@ env UPDATE_EXPECT=1 cargo qt\n \n After adding a new inline test you need to run `cargo test -p xtask` and also update the test data as described above.\n \n-Note [`api_walkthrough`](https://github.com/rust-analyzer/rust-analyzer/blob/2fb6af89eb794f775de60b82afe56b6f986c2a40/crates/ra_syntax/src/lib.rs#L190-L348)\n+Note [`api_walkthrough`](https://github.com/rust-lang/rust-analyzer/blob/2fb6af89eb794f775de60b82afe56b6f986c2a40/crates/ra_syntax/src/lib.rs#L190-L348)\n in particular: it shows off various methods of working with syntax tree.\n \n-See [#93](https://github.com/rust-analyzer/rust-analyzer/pull/93) for an example PR which fixes a bug in the grammar.\n+See [#93](https://github.com/rust-lang/rust-analyzer/pull/93) for an example PR which fixes a bug in the grammar.\n \n **Architecture Invariant:** `syntax` crate is completely independent from the rest of rust-analyzer. It knows nothing about salsa or LSP.\n This is important because it is possible to make useful tooling using only the syntax tree."}, {"sha": "47ae3f3e6a9026dc027027e411b9db1e8d63af9d", "filename": "docs/dev/guide.md", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fguide.md?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -8,7 +8,7 @@ architectural solutions related to the problem of building IDE-first compiler\n for Rust. There is a video version of this guide as well:\n https://youtu.be/ANKBNiSWyfc.\n \n-[guide-2019-01]: https://github.com/rust-analyzer/rust-analyzer/tree/guide-2019-01\n+[guide-2019-01]: https://github.com/rust-lang/rust-analyzer/tree/guide-2019-01\n \n ## The big picture\n \n@@ -40,8 +40,8 @@ terms of files and offsets, and **not** in terms of Rust concepts like structs,\n traits, etc. The \"typed\" API with Rust specific types is slightly lower in the\n stack, we'll talk about it later.\n \n-[`AnalysisHost`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L265-L284\n-[`Analysis`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L291-L478\n+[`AnalysisHost`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L265-L284\n+[`Analysis`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L291-L478\n \n The reason for this separation of `Analysis` and `AnalysisHost` is that we want to apply\n changes \"uniquely\", but we might also want to fork an `Analysis` and send it to\n@@ -69,7 +69,7 @@ the `AnalysisHost::apply_change` method, which accepts a single argument, a\n \"transaction\", so it suffices to study its methods to understand all of the\n input data.\n \n-[`Change`]: https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/base_db/src/change.rs#L14-L89\n+[`Change`]: https://github.com/rust-lang/rust-analyzer/blob/master/crates/base_db/src/change.rs#L14-L89\n \n The `(add|change|remove)_file` methods control the set of the input files, where\n each file has an integer id (`FileId`, picked by the client), text (`String`)\n@@ -142,8 +142,8 @@ like syntax highlighting). We use the event loop pattern to manage the zoo, and\n the loop is the [`main_loop_inner`] function. The [`main_loop`] does a one-time\n initialization and tearing down of the resources.\n \n-[`main_loop`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L51-L110\n-[`main_loop_inner`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L156-L258\n+[`main_loop`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L51-L110\n+[`main_loop_inner`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L156-L258\n \n \n Let's walk through a typical analyzer session!\n@@ -154,7 +154,7 @@ and we run `rustc --print sysroot` and scan the \"sysroot\" (the directory contain\n `std`. Currently we load this configuration once at the start of the server, but\n it should be possible to dynamically reconfigure it later without restart.\n \n-[main_loop.rs#L62-L70](https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L62-L70)\n+[main_loop.rs#L62-L70](https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L62-L70)\n \n The [`ProjectModel`] we get after this step is very Cargo and sysroot specific,\n it needs to be lowered to get the input in the form of `Change`. This\n@@ -165,19 +165,19 @@ happens in [`ServerWorldState::new`] method. Specifically\n * Create an analyzer's `Crate` for each Cargo **target** and sysroot crate.\n * Setup dependencies between the crates.\n \n-[`ProjectModel`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/project_model.rs#L16-L20\n-[`ServerWorldState::new`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/server_world.rs#L38-L160\n+[`ProjectModel`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/project_model.rs#L16-L20\n+[`ServerWorldState::new`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/server_world.rs#L38-L160\n \n The results of the scan (which may take a while) will be processed in the body\n of the main loop, just like any other change. Here's where we handle:\n \n-* [File system changes](https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L194)\n-* [Changes from the editor](https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L377)\n+* [File system changes](https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L194)\n+* [Changes from the editor](https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L377)\n \n After a single loop's turn, we group the changes into one `Change` and\n [apply] it. This always happens on the main thread and blocks the loop.\n \n-[apply]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/server_world.rs#L216\n+[apply]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/server_world.rs#L216\n \n To handle requests, like [\"goto definition\"], we create an instance of the\n `Analysis` and [`schedule`] the task (which consumes `Analysis`) on the\n@@ -187,9 +187,9 @@ executing \"goto definition\" on the threadpool and a new change comes in, the\n task will be canceled as soon as the main loop calls `apply_change` on the\n `AnalysisHost`.\n \n-[\"goto definition\"]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/server_world.rs#L216\n-[`schedule`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L426-L455\n-[The task]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop/handlers.rs#L205-L223\n+[\"goto definition\"]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/server_world.rs#L216\n+[`schedule`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L426-L455\n+[The task]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop/handlers.rs#L205-L223\n \n This concludes the overview of the analyzer's programing *interface*. Next, let's\n dig into the implementation!\n@@ -251,13 +251,13 @@ All analyzer information is stored in a salsa database. `Analysis` and\n `AnalysisHost` types are newtype wrappers for [`RootDatabase`] -- a salsa\n database.\n \n-[`RootDatabase`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/db.rs#L88-L134\n+[`RootDatabase`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/db.rs#L88-L134\n \n Salsa input queries are defined in [`FilesDatabase`] (which is a part of\n `RootDatabase`). They closely mirror the familiar `Change` structure:\n indeed, what `apply_change` does is it sets the values of input queries.\n \n-[`FilesDatabase`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/base_db/src/input.rs#L150-L174\n+[`FilesDatabase`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/base_db/src/input.rs#L150-L174\n \n ## From text to semantic model\n \n@@ -273,16 +273,16 @@ several times, with different sets of `cfg`s enabled. The IDE-specific task of\n mapping source code into a semantic model is inherently imprecise for\n this reason and gets handled by the [`source_binder`].\n \n-[`source_binder`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/source_binder.rs\n+[`source_binder`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/source_binder.rs\n \n The semantic interface is declared in the [`code_model_api`] module. Each entity is\n identified by an integer ID and has a bunch of methods which take a salsa database\n as an argument and returns other entities (which are also IDs). Internally, these\n methods invoke various queries on the database to build the model on demand.\n Here's [the list of queries].\n \n-[`code_model_api`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/code_model_api.rs\n-[the list of queries]: https://github.com/rust-analyzer/rust-analyzer/blob/7e84440e25e19529e4ff8a66e521d1b06349c6ec/crates/hir/src/db.rs#L20-L106\n+[`code_model_api`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/code_model_api.rs\n+[the list of queries]: https://github.com/rust-lang/rust-analyzer/blob/7e84440e25e19529e4ff8a66e521d1b06349c6ec/crates/hir/src/db.rs#L20-L106\n \n The first step of building the model is parsing the source code.\n \n@@ -328,7 +328,7 @@ The implementation is based on the generic [rowan] crate on top of which a\n \n [libsyntax]: https://github.com/apple/swift/tree/5e2c815edfd758f9b1309ce07bfc01c4bc20ec23/lib/Syntax\n [rowan]: https://github.com/rust-analyzer/rowan/tree/100a36dc820eb393b74abe0d20ddf99077b61f88\n-[rust-specific]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_syntax/src/ast/generated.rs\n+[rust-specific]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_syntax/src/ast/generated.rs\n \n The next step in constructing the semantic model is ...\n \n@@ -339,7 +339,7 @@ The algorithm for building a tree of modules is to start with a crate root\n declarations and recursively process child modules. This is handled by the\n [`module_tree_query`], with two slight variations.\n \n-[`module_tree_query`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/module_tree.rs#L116-L123\n+[`module_tree_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/module_tree.rs#L116-L123\n \n First, rust-analyzer builds a module tree for all crates in a source root\n simultaneously. The main reason for this is historical (`module_tree` predates\n@@ -362,7 +362,7 @@ the same, we don't have to re-execute [`module_tree_query`]. In fact, we only\n need to re-execute it when we add/remove new files or when we change mod\n declarations.\n \n-[`submodules_query`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/module_tree.rs#L41\n+[`submodules_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/module_tree.rs#L41\n \n We store the resulting modules in a `Vec`-based indexed arena. The indices in\n the arena becomes module IDs. And this brings us to the next topic:\n@@ -390,8 +390,8 @@ integers which can \"intern\" a location and return an integer ID back. The salsa\n database we use includes a couple of [interners]. How to \"garbage collect\"\n unused locations is an open question.\n \n-[`LocationInterner`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/base_db/src/loc2id.rs#L65-L71\n-[interners]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/db.rs#L22-L23\n+[`LocationInterner`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/base_db/src/loc2id.rs#L65-L71\n+[interners]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/db.rs#L22-L23\n \n For example, we use `LocationInterner` to assign IDs to definitions of functions,\n structs, enums, etc. The location, [`DefLoc`] contains two bits of information:\n@@ -405,7 +405,7 @@ using offsets, text ranges or syntax trees as keys and values for queries. What\n we do instead is we store \"index\" of the item among all of the items of a file\n (so, a positional based ID, but localized to a single file).\n \n-[`DefLoc`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/ids.rs#L127-L139\n+[`DefLoc`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/ids.rs#L127-L139\n \n One thing we've glossed over for the time being is support for macros. We have\n only proof of concept handling of macros at the moment, but they are extremely\n@@ -438,7 +438,7 @@ terms of `HirFileId`! This does not recur infinitely though: any chain of\n `HirFileId`s bottoms out in `HirFileId::FileId`, that is, some source file\n actually written by the user.\n \n-[`HirFileId`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/ids.rs#L18-L125\n+[`HirFileId`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/ids.rs#L18-L125\n \n Now that we understand how to identify a definition, in a source or in a\n macro-generated file, we can discuss name resolution a bit.\n@@ -452,14 +452,14 @@ each module into a position-independent representation which does not change if\n we modify bodies of the items. After that we [loop] resolving all imports until\n we've reached a fixed point.\n \n-[lower]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L113-L117\n-[loop]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres.rs#L186-L196\n+[lower]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L113-L117\n+[loop]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres.rs#L186-L196\n \n And, given all our preparation with IDs and a position-independent representation,\n it is satisfying to [test] that typing inside function body does not invalidate\n name resolution results.\n \n-[test]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/tests.rs#L376\n+[test]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/tests.rs#L376\n \n An interesting fact about name resolution is that it \"erases\" all of the\n intermediate paths from the imports: in the end, we know which items are defined\n@@ -494,10 +494,10 @@ there's an intermediate [projection query] which returns only the first\n position-independent part of the lowering. The result of this query is stable.\n Naturally, name resolution [uses] this stable projection query.\n \n-[imports]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L52-L59\n-[`SourceMap`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L52-L59\n-[projection query]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L97-L103\n-[uses]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/query_definitions.rs#L49\n+[imports]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L52-L59\n+[`SourceMap`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L52-L59\n+[projection query]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/nameres/lower.rs#L97-L103\n+[uses]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/query_definitions.rs#L49\n \n ## Type inference\n \n@@ -518,11 +518,11 @@ Given the lowered body of the function, we can now run [type inference] and\n construct a mapping from `ExprId`s to types.\n \n [@flodiebold]: https://github.com/flodiebold\n-[#327]: https://github.com/rust-analyzer/rust-analyzer/pull/327\n-[lower the AST]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs\n-[positional ID]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs#L13-L15\n-[a source map]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs#L41-L44\n-[type inference]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/hir/src/ty.rs#L1208-L1223\n+[#327]: https://github.com/rust-lang/rust-analyzer/pull/327\n+[lower the AST]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs\n+[positional ID]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs#L13-L15\n+[a source map]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/expr.rs#L41-L44\n+[type inference]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/hir/src/ty.rs#L1208-L1223\n \n ## Tying it all together: completion\n \n@@ -559,15 +559,15 @@ function and map our syntactic expression to `ExprId`. Using the ID, we figure\n out the type of the receiver expression. Then we add all fields & methods from\n the type to completion.\n \n-[receiving a message]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L203\n-[schedule it on the threadpool]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L428\n-[catch]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L436-L442\n+[receiving a message]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L203\n+[schedule it on the threadpool]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L428\n+[catch]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ra_lsp_server/src/main_loop.rs#L436-L442\n [the handler]: https://salsa.zulipchat.com/#narrow/stream/181542-rfcs.2Fsalsa-query-group/topic/design.20next.20steps\n-[ask analysis for completion]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L439-L444\n-[completion implementation]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L46-L62\n-[`CompletionContext`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L14-L37\n-[\"IntelliJ Trick\"]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L72-L75\n-[find an ancestor `fn` node]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L116-L120\n-[semantic model]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L123\n-[series of independent completion routines]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L52-L59\n-[`complete_dot`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/complete_dot.rs#L6-L22\n+[ask analysis for completion]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/lib.rs#L439-L444\n+[completion implementation]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L46-L62\n+[`CompletionContext`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L14-L37\n+[\"IntelliJ Trick\"]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L72-L75\n+[find an ancestor `fn` node]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L116-L120\n+[semantic model]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/completion_context.rs#L123\n+[series of independent completion routines]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion.rs#L52-L59\n+[`complete_dot`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/crates/ide_api/src/completion/complete_dot.rs#L6-L22"}, {"sha": "5040643d34a32338eebf6451785387e5c2e5ad23", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -4,7 +4,7 @@ lsp_ext.rs hash: 2a188defec26cc7c\n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n \n-  https://github.com/rust-analyzer/rust-analyzer/issues/4604\n+  https://github.com/rust-lang/rust-analyzer/issues/4604\n \n --->\n \n@@ -17,7 +17,7 @@ All capabilities are enabled via the `experimental` field of `ClientCapabilities\n Requests which we hope to upstream live under `experimental/` namespace.\n Requests, which are likely to always remain specific to `rust-analyzer` are under `rust-analyzer/` namespace.\n \n-If you want to be notified about the changes to this document, subscribe to [#4604](https://github.com/rust-analyzer/rust-analyzer/issues/4604).\n+If you want to be notified about the changes to this document, subscribe to [#4604](https://github.com/rust-lang/rust-analyzer/issues/4604).\n \n ## UTF-8 offsets\n \n@@ -611,7 +611,7 @@ Such actions on the client side are appended to a hover bottom as command links:\n \n ## Open Cargo.toml\n \n-**Upstream Issue:** https://github.com/rust-analyzer/rust-analyzer/issues/6462\n+**Upstream Issue:** https://github.com/rust-lang/rust-analyzer/issues/6462\n \n **Experimental Server Capability:** `{ \"openCargoToml\": boolean }`\n \n@@ -681,7 +681,7 @@ Triggering a hover inside the selection above will show a result of `i32`.\n \n ## Move Item\n \n-**Upstream Issue:** https://github.com/rust-analyzer/rust-analyzer/issues/6823\n+**Upstream Issue:** https://github.com/rust-lang/rust-analyzer/issues/6823\n \n This request is sent from client to server to move item under cursor or selection in some direction.\n "}, {"sha": "a80eebd632961a6ef468658dce53f755fce95c07", "filename": "docs/dev/style.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -281,7 +281,7 @@ fn f() {\n Assert liberally.\n Prefer [`stdx::never!`](https://docs.rs/always-assert/0.1.2/always_assert/macro.never.html) to standard `assert!`.\n \n-**Rationale:** See [cross cutting concern: error handling](https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md#error-handling).\n+**Rationale:** See [cross cutting concern: error handling](https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/architecture.md#error-handling).\n \n ## Getters & Setters\n \n@@ -840,7 +840,7 @@ Context-first works better when non-context parameter is a lambda.\n \n ## Variable Naming\n \n-Use boring and long names for local variables ([yay code completion](https://github.com/rust-analyzer/rust-analyzer/pull/4162#discussion_r417130973)).\n+Use boring and long names for local variables ([yay code completion](https://github.com/rust-lang/rust-analyzer/pull/4162#discussion_r417130973)).\n The default name is a lowercased name of the type: `global_state: GlobalState`.\n Avoid ad-hoc acronyms and contractions, but use the ones that exist consistently (`db`, `ctx`, `acc`).\n Prefer American spelling (color, behavior)."}, {"sha": "30e13701383a9a3f091daa20f35ee9bacaad8e56", "filename": "docs/dev/syntax.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fdev%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fsyntax.md?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -2,16 +2,16 @@\n \n ## About the guide\n \n-This guide describes the current state of syntax trees and parsing in rust-analyzer as of 2020-01-09 ([link to commit](https://github.com/rust-analyzer/rust-analyzer/tree/cf5bdf464cad7ceb9a67e07985a3f4d3799ec0b6)).\n+This guide describes the current state of syntax trees and parsing in rust-analyzer as of 2020-01-09 ([link to commit](https://github.com/rust-lang/rust-analyzer/tree/cf5bdf464cad7ceb9a67e07985a3f4d3799ec0b6)).\n \n ## Source Code\n \n The things described are implemented in three places\n \n * [rowan](https://github.com/rust-analyzer/rowan/tree/v0.9.0) -- a generic library for rowan syntax trees.\n-* [ra_syntax](https://github.com/rust-analyzer/rust-analyzer/tree/cf5bdf464cad7ceb9a67e07985a3f4d3799ec0b6/crates/ra_syntax) crate inside rust-analyzer which wraps `rowan` into rust-analyzer specific API.\n+* [ra_syntax](https://github.com/rust-lang/rust-analyzer/tree/cf5bdf464cad7ceb9a67e07985a3f4d3799ec0b6/crates/ra_syntax) crate inside rust-analyzer which wraps `rowan` into rust-analyzer specific API.\n   Nothing in rust-analyzer except this crate knows about `rowan`.\n-* [parser](https://github.com/rust-analyzer/rust-analyzer/tree/cf5bdf464cad7ceb9a67e07985a3f4d3799ec0b6/crates/parser) crate parses input tokens into an `ra_syntax` tree\n+* [parser](https://github.com/rust-lang/rust-analyzer/tree/cf5bdf464cad7ceb9a67e07985a3f4d3799ec0b6/crates/parser) crate parses input tokens into an `ra_syntax` tree\n \n ## Design Goals\n "}, {"sha": "f55dfd470332f967b4e69011cece7d6a10e6d804", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -7,7 +7,7 @@\n :experimental:\n \n ////\n-IMPORTANT: the master copy of this document lives in the https://github.com/rust-analyzer/rust-analyzer repository\n+IMPORTANT: the master copy of this document lives in the https://github.com/rust-lang/rust-analyzer repository\n ////\n \n At its core, rust-analyzer is a *library* for semantic analysis of Rust code as it changes over time.\n@@ -19,7 +19,7 @@ The LSP allows various code editors, like VS Code, Emacs or Vim, to implement se\n ====\n [.lead]\n To improve this document, send a pull request: +\n-https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/manual.adoc[https://github.com/rust-analyzer/.../manual.adoc]\n+https://github.com/rust-lang/rust-analyzer/blob/master/docs/user/manual.adoc[https://github.com/rust-analyzer/.../manual.adoc]\n \n The manual is written in https://asciidoc.org[AsciiDoc] and includes some extra files which are generated from the source code. Run `cargo test` and `cargo test -p xtask` to create these and then `asciidoctor manual.adoc` to create an HTML copy.\n ====\n@@ -58,7 +58,7 @@ For example, with VS Code or coc-rust-analyzer:\n \n This is the best supported editor at the moment.\n The rust-analyzer plugin for VS Code is maintained\n-https://github.com/rust-analyzer/rust-analyzer/tree/master/editors/code[in tree].\n+https://github.com/rust-lang/rust-analyzer/tree/master/editors/code[in tree].\n \n You can install the latest release of the plugin from\n https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer[the marketplace].\n@@ -105,7 +105,7 @@ To help us out by testing the newest code, you can enable pre-release versions i\n ==== Manual installation\n \n Alternatively, download a VSIX corresponding to your platform from the\n-https://github.com/rust-analyzer/rust-analyzer/releases[releases] page.\n+https://github.com/rust-lang/rust-analyzer/releases[releases] page.\n \n Install the extension with the `Extensions: Install from VSIX` command within VS Code, or from the command line via:\n [source]\n@@ -126,7 +126,7 @@ Both the server and the Code plugin can be installed from source:\n \n [source]\n ----\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyzer\n+$ git clone https://github.com/rust-lang/rust-analyzer.git && cd rust-analyzer\n $ cargo xtask install\n ----\n \n@@ -144,15 +144,15 @@ $ cargo xtask install --server\n === rust-analyzer Language Server Binary\n \n Other editors generally require the `rust-analyzer` binary to be in `$PATH`.\n-You can download pre-built binaries from the https://github.com/rust-analyzer/rust-analyzer/releases[releases] page.\n+You can download pre-built binaries from the https://github.com/rust-lang/rust-analyzer/releases[releases] page.\n You will need to uncompress and rename the binary for your platform, e.g. from `rust-analyzer-aarch64-apple-darwin.gz` on Mac OS to `rust-analyzer`, make it executable, then move it into a directory in your `$PATH`.\n \n On Linux to install the `rust-analyzer` binary into `~/.local/bin`, these commands should work:\n \n [source,bash]\n ----\n $ mkdir -p ~/.local/bin\n-$ curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.local/bin/rust-analyzer\n+$ curl -L https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.local/bin/rust-analyzer\n $ chmod +x ~/.local/bin/rust-analyzer\n ----\n \n@@ -165,11 +165,11 @@ You'll need the latest stable version of the Rust toolchain.\n \n [source,bash]\n ----\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyzer\n+$ git clone https://github.com/rust-lang/rust-analyzer.git && cd rust-analyzer\n $ cargo xtask install --server\n ----\n \n-If your editor can't find the binary even though the binary is on your `$PATH`, the likely explanation is that it doesn't see the same `$PATH` as the shell, see https://github.com/rust-analyzer/rust-analyzer/issues/1811[this issue].\n+If your editor can't find the binary even though the binary is on your `$PATH`, the likely explanation is that it doesn't see the same `$PATH` as the shell, see https://github.com/rust-lang/rust-analyzer/issues/1811[this issue].\n On Unix, running the editor from a shell or changing the `.desktop` file to set the environment should help.\n \n ==== `rustup`\n@@ -426,7 +426,7 @@ With\n         \"rust\": {\n             \"command\": [\"rust-analyzer\"],\n             \"rootIndicationFileNames\": [\"Cargo.lock\", \"Cargo.toml\"],\n-            \"url\": \"https://github.com/rust-analyzer/rust-analyzer\",\n+            \"url\": \"https://github.com/rust-lang/rust-analyzer\",\n             \"highlightingModeRegex\": \"^Rust$\"\n         },\n ----\n@@ -506,11 +506,11 @@ $ rust-analyzer analysis-stats .\n It is especially useful when the `repo` doesn't use external crates or the standard library.\n \n If you want to go as far as to modify the source code to debug the problem, be sure to take a look at the\n-https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev[dev docs]!\n+https://github.com/rust-lang/rust-analyzer/tree/master/docs/dev[dev docs]!\n \n == Configuration\n \n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/rust-analyzer/src/config.rs[config.rs]\n+**Source:** https://github.com/rust-lang/rust-analyzer/blob/master/crates/rust-analyzer/src/config.rs[config.rs]\n \n The <<_installation,Installation>> section contains details on configuration for some of the editors.\n In general `rust-analyzer` is configured via LSP messages, which means that it's up to the editor to decide on the exact format and location of configuration files."}, {"sha": "bd45599227ed4d0fc74aa56aab159e579dc1809e", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -114,7 +114,7 @@ async function getDebugConfiguration(\n     const wsFolder = path.normalize(workspace.uri.fsPath);\n     const workspaceQualifier = isMultiFolderWorkspace ? `:${workspace.name}` : \"\";\n     function simplifyPath(p: string): string {\n-        // see https://github.com/rust-analyzer/rust-analyzer/pull/5513#issuecomment-663458818 for why this is needed\n+        // see https://github.com/rust-lang/rust-analyzer/pull/5513#issuecomment-663458818 for why this is needed\n         return path.normalize(p).replace(wsFolder, \"${workspaceFolder\" + workspaceQualifier + \"}\");\n     }\n "}, {"sha": "9ae20ddc4ac4b2ffde3369721fdc92227ed9ea70", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -316,7 +316,7 @@ async function getServer(\n             \"You need to manually clone the rust-analyzer repository and \" +\n             \"run `cargo xtask install --server` to build the language server from sources. \" +\n             \"If you feel that your platform should be supported, please create an issue \" +\n-            \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n+            \"about that [here](https://github.com/rust-lang/rust-analyzer/issues) and we \" +\n             \"will consider it.\"\n     );\n     return undefined;"}, {"sha": "204d120d07c4ab7dbebda9530df8d26a20a4a863", "filename": "lib/lsp-server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/lib%2Flsp-server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/lib%2Flsp-server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2FCargo.toml?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -3,7 +3,7 @@ name = \"lsp-server\"\n version = \"0.6.0\"\n description = \"Generic LSP server scaffold.\"\n license = \"MIT OR Apache-2.0\"\n-repository = \"https://github.com/rust-analyzer/rust-analyzer/tree/master/lib/lsp-server\"\n+repository = \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/lsp-server\"\n edition = \"2021\"\n \n [dependencies]"}, {"sha": "ebeb873463ea18aeed509abc877ee1081f00e17c", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c6ae965ba1235b6cbd8299e2959698bd394e80a/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6ae965ba1235b6cbd8299e2959698bd394e80a/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=6c6ae965ba1235b6cbd8299e2959698bd394e80a", "patch": "@@ -33,7 +33,7 @@ impl flags::Metrics {\n         let _env = sh.push_env(\"RA_METRICS\", \"1\");\n \n         {\n-            // https://github.com/rust-analyzer/rust-analyzer/issues/9997\n+            // https://github.com/rust-lang/rust-analyzer/issues/9997\n             let _d = sh.push_dir(\"target/rustc-perf/collector/benchmarks/webrender\");\n             cmd!(sh, \"cargo update -p url --precise 1.6.1\").run()?;\n         }"}]}