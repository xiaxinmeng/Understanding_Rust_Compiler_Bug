{"sha": "7b31058873b69883ece4ae3da6725f54a26f58f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzEwNTg4NzNiNjk4ODNlY2U0YWUzZGE2NzI1ZjU0YTI2ZjU4ZjA=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-26T19:45:55Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-26T20:11:40Z"}, "message": "libcollections: In tests, remove some uses of deprecated methods and\nunused imports.", "tree": {"sha": "dc255370b322186cc19551b0d51127634f916d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc255370b322186cc19551b0d51127634f916d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b31058873b69883ece4ae3da6725f54a26f58f0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b31058873b69883ece4ae3da6725f54a26f58f0", "html_url": "https://github.com/rust-lang/rust/commit/7b31058873b69883ece4ae3da6725f54a26f58f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b31058873b69883ece4ae3da6725f54a26f58f0/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b45ddbd351f0a4a939c3a3c4e20b4defec4b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b45ddbd351f0a4a939c3a3c4e20b4defec4b35", "html_url": "https://github.com/rust-lang/rust/commit/80b45ddbd351f0a4a939c3a3c4e20b4defec4b35"}], "stats": {"total": 152, "additions": 75, "deletions": 77}, "files": [{"sha": "9ab3592b5750dfc3aa05a230b286834b40fb635d", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=7b31058873b69883ece4ae3da6725f54a26f58f0", "patch": "@@ -786,21 +786,21 @@ mod tests {\n     fn test_basic() {\n         let mut m: DList<Box<int>> = DList::new();\n         assert_eq!(m.pop_front(), None);\n-        assert_eq!(m.pop_back(), None);\n+        assert_eq!(m.pop(), None);\n         assert_eq!(m.pop_front(), None);\n         m.push_front(box 1);\n         assert_eq!(m.pop_front(), Some(box 1));\n-        m.push_back(box 2);\n-        m.push_back(box 3);\n+        m.push(box 2);\n+        m.push(box 3);\n         assert_eq!(m.len(), 2);\n         assert_eq!(m.pop_front(), Some(box 2));\n         assert_eq!(m.pop_front(), Some(box 3));\n         assert_eq!(m.len(), 0);\n         assert_eq!(m.pop_front(), None);\n-        m.push_back(box 1);\n-        m.push_back(box 3);\n-        m.push_back(box 5);\n-        m.push_back(box 7);\n+        m.push(box 1);\n+        m.push(box 3);\n+        m.push(box 5);\n+        m.push(box 7);\n         assert_eq!(m.pop_front(), Some(box 1));\n \n         let mut n = DList::new();\n@@ -837,19 +837,19 @@ mod tests {\n         {\n             let mut m = DList::new();\n             let mut n = DList::new();\n-            n.push_back(2i);\n+            n.push(2i);\n             m.append(n);\n             assert_eq!(m.len(), 1);\n-            assert_eq!(m.pop_back(), Some(2));\n+            assert_eq!(m.pop(), Some(2));\n             check_links(&m);\n         }\n         {\n             let mut m = DList::new();\n             let n = DList::new();\n-            m.push_back(2i);\n+            m.push(2i);\n             m.append(n);\n             assert_eq!(m.len(), 1);\n-            assert_eq!(m.pop_back(), Some(2));\n+            assert_eq!(m.pop(), Some(2));\n             check_links(&m);\n         }\n \n@@ -870,10 +870,10 @@ mod tests {\n         {\n             let mut m = DList::new();\n             let mut n = DList::new();\n-            n.push_back(2i);\n+            n.push(2i);\n             m.prepend(n);\n             assert_eq!(m.len(), 1);\n-            assert_eq!(m.pop_back(), Some(2));\n+            assert_eq!(m.pop(), Some(2));\n             check_links(&m);\n         }\n \n@@ -931,9 +931,9 @@ mod tests {\n     #[test]\n     fn test_iterator_clone() {\n         let mut n = DList::new();\n-        n.push_back(2i);\n-        n.push_back(3);\n-        n.push_back(4);\n+        n.push(2i);\n+        n.push(3);\n+        n.push(4);\n         let mut it = n.iter();\n         it.next();\n         let mut jt = it.clone();\n@@ -988,7 +988,7 @@ mod tests {\n         let mut n = DList::new();\n         assert!(n.mut_iter().next().is_none());\n         n.push_front(4i);\n-        n.push_back(5);\n+        n.push(5);\n         let mut it = n.mut_iter();\n         assert_eq!(it.size_hint(), (2, Some(2)));\n         assert!(it.next().is_some());\n@@ -1062,8 +1062,8 @@ mod tests {\n         assert_eq!(n.pop_front(), Some(1));\n \n         let mut m = DList::new();\n-        m.push_back(2i);\n-        m.push_back(4);\n+        m.push(2i);\n+        m.push(4);\n         m.insert_ordered(3);\n         check_links(&m);\n         assert_eq!(vec![2,3,4], m.move_iter().collect::<Vec<int>>());\n@@ -1100,7 +1100,7 @@ mod tests {\n         assert!(n == m);\n         n.push_front(1);\n         assert!(n != m);\n-        m.push_back(1);\n+        m.push(1);\n         assert!(n == m);\n \n         let n = list_from([2i,3,4]);\n@@ -1115,9 +1115,9 @@ mod tests {\n \n       assert!(hash::hash(&x) == hash::hash(&y));\n \n-      x.push_back(1i);\n-      x.push_back(2);\n-      x.push_back(3);\n+      x.push(1i);\n+      x.push(2);\n+      x.push(3);\n \n       y.push_front(3i);\n       y.push_front(2);\n@@ -1197,19 +1197,19 @@ mod tests {\n             let r: u8 = rand::random();\n             match r % 6 {\n                 0 => {\n-                    m.pop_back();\n+                    m.pop();\n                     v.pop();\n                 }\n                 1 => {\n                     m.pop_front();\n-                    v.shift();\n+                    v.remove(0);\n                 }\n                 2 | 4 =>  {\n                     m.push_front(-i);\n-                    v.unshift(-i);\n+                    v.insert(0, -i);\n                 }\n                 3 | 5 | _ => {\n-                    m.push_back(i);\n+                    m.push(i);\n                     v.push(i);\n                 }\n             }\n@@ -1245,16 +1245,16 @@ mod tests {\n     fn bench_push_back(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         b.iter(|| {\n-            m.push_back(0);\n+            m.push(0);\n         })\n     }\n \n     #[bench]\n     fn bench_push_back_pop_back(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         b.iter(|| {\n-            m.push_back(0);\n-            m.pop_back();\n+            m.push(0);\n+            m.pop();\n         })\n     }\n "}, {"sha": "8d20208515cbce4e9bf79c56853020b153325b36", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=7b31058873b69883ece4ae3da6725f54a26f58f0", "patch": "@@ -293,7 +293,6 @@ impl<S: Writer, T: Hash<S>, U: Hash<S>> Hash<S> for Result<T, U> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n     use std::mem;\n \n     use slice::ImmutableSlice;"}, {"sha": "98fa5d168d8040b06d0ce77677ae4b26b168e81e", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=7b31058873b69883ece4ae3da6725f54a26f58f0", "patch": "@@ -541,9 +541,9 @@ mod tests {\n         assert_eq!(d.len(), 0u);\n         d.push_front(17i);\n         d.push_front(42i);\n-        d.push_back(137);\n+        d.push(137);\n         assert_eq!(d.len(), 3u);\n-        d.push_back(137);\n+        d.push(137);\n         assert_eq!(d.len(), 4u);\n         debug!(\"{:?}\", d.front());\n         assert_eq!(*d.front().unwrap(), 42);\n@@ -552,21 +552,21 @@ mod tests {\n         let mut i = d.pop_front();\n         debug!(\"{:?}\", i);\n         assert_eq!(i, Some(42));\n-        i = d.pop_back();\n+        i = d.pop();\n         debug!(\"{:?}\", i);\n         assert_eq!(i, Some(137));\n-        i = d.pop_back();\n+        i = d.pop();\n         debug!(\"{:?}\", i);\n         assert_eq!(i, Some(137));\n-        i = d.pop_back();\n+        i = d.pop();\n         debug!(\"{:?}\", i);\n         assert_eq!(i, Some(17));\n         assert_eq!(d.len(), 0u);\n-        d.push_back(3);\n+        d.push(3);\n         assert_eq!(d.len(), 1u);\n         d.push_front(2);\n         assert_eq!(d.len(), 2u);\n-        d.push_back(4);\n+        d.push(4);\n         assert_eq!(d.len(), 3u);\n         d.push_front(1);\n         assert_eq!(d.len(), 4u);\n@@ -591,22 +591,22 @@ mod tests {\n         assert_eq!(deq.len(), 0);\n         deq.push_front(a);\n         deq.push_front(b);\n-        deq.push_back(c);\n+        deq.push(c);\n         assert_eq!(deq.len(), 3);\n-        deq.push_back(d);\n+        deq.push(d);\n         assert_eq!(deq.len(), 4);\n         assert_eq!(deq.front(), Some(&b));\n         assert_eq!(deq.back(), Some(&d));\n         assert_eq!(deq.pop_front(), Some(b));\n-        assert_eq!(deq.pop_back(), Some(d));\n-        assert_eq!(deq.pop_back(), Some(c));\n-        assert_eq!(deq.pop_back(), Some(a));\n+        assert_eq!(deq.pop(), Some(d));\n+        assert_eq!(deq.pop(), Some(c));\n+        assert_eq!(deq.pop(), Some(a));\n         assert_eq!(deq.len(), 0);\n-        deq.push_back(c);\n+        deq.push(c);\n         assert_eq!(deq.len(), 1);\n         deq.push_front(b);\n         assert_eq!(deq.len(), 2);\n-        deq.push_back(d);\n+        deq.push(d);\n         assert_eq!(deq.len(), 3);\n         deq.push_front(a);\n         assert_eq!(deq.len(), 4);\n@@ -622,22 +622,22 @@ mod tests {\n         assert_eq!(deq.len(), 0);\n         deq.push_front(a.clone());\n         deq.push_front(b.clone());\n-        deq.push_back(c.clone());\n+        deq.push(c.clone());\n         assert_eq!(deq.len(), 3);\n-        deq.push_back(d.clone());\n+        deq.push(d.clone());\n         assert_eq!(deq.len(), 4);\n         assert_eq!((*deq.front().unwrap()).clone(), b.clone());\n         assert_eq!((*deq.back().unwrap()).clone(), d.clone());\n         assert_eq!(deq.pop_front().unwrap(), b.clone());\n-        assert_eq!(deq.pop_back().unwrap(), d.clone());\n-        assert_eq!(deq.pop_back().unwrap(), c.clone());\n-        assert_eq!(deq.pop_back().unwrap(), a.clone());\n+        assert_eq!(deq.pop().unwrap(), d.clone());\n+        assert_eq!(deq.pop().unwrap(), c.clone());\n+        assert_eq!(deq.pop().unwrap(), a.clone());\n         assert_eq!(deq.len(), 0);\n-        deq.push_back(c.clone());\n+        deq.push(c.clone());\n         assert_eq!(deq.len(), 1);\n         deq.push_front(b.clone());\n         assert_eq!(deq.len(), 2);\n-        deq.push_back(d.clone());\n+        deq.push(d.clone());\n         assert_eq!(deq.len(), 3);\n         deq.push_front(a.clone());\n         assert_eq!(deq.len(), 4);\n@@ -661,7 +661,7 @@ mod tests {\n \n         let mut deq = RingBuf::new();\n         for i in range(0u, 66) {\n-            deq.push_back(i);\n+            deq.push(i);\n         }\n \n         for i in range(0u, 66) {\n@@ -699,7 +699,7 @@ mod tests {\n     fn bench_push_back(b: &mut test::Bencher) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n-            deq.push_back(0i);\n+            deq.push(0i);\n         })\n     }\n \n@@ -778,10 +778,10 @@ mod tests {\n     #[test]\n     fn test_with_capacity() {\n         let mut d = RingBuf::with_capacity(0);\n-        d.push_back(1i);\n+        d.push(1i);\n         assert_eq!(d.len(), 1);\n         let mut d = RingBuf::with_capacity(50);\n-        d.push_back(1i);\n+        d.push(1i);\n         assert_eq!(d.len(), 1);\n     }\n \n@@ -829,23 +829,23 @@ mod tests {\n     #[test]\n     fn test_reserve_exact() {\n         let mut d = RingBuf::new();\n-        d.push_back(0u64);\n+        d.push(0u64);\n         d.reserve_exact(50);\n         assert_eq!(d.elts.capacity(), 50);\n         let mut d = RingBuf::new();\n-        d.push_back(0u32);\n+        d.push(0u32);\n         d.reserve_exact(50);\n         assert_eq!(d.elts.capacity(), 50);\n     }\n \n     #[test]\n     fn test_reserve() {\n         let mut d = RingBuf::new();\n-        d.push_back(0u64);\n+        d.push(0u64);\n         d.reserve(50);\n         assert_eq!(d.elts.capacity(), 64);\n         let mut d = RingBuf::new();\n-        d.push_back(0u32);\n+        d.push(0u32);\n         d.reserve(50);\n         assert_eq!(d.elts.capacity(), 64);\n     }\n@@ -865,7 +865,7 @@ mod tests {\n         assert_eq!(d.iter().size_hint(), (0, Some(0)));\n \n         for i in range(0i, 5) {\n-            d.push_back(i);\n+            d.push(i);\n         }\n         {\n             let b: &[_] = &[&0,&1,&2,&3,&4];\n@@ -896,7 +896,7 @@ mod tests {\n         assert_eq!(d.iter().rev().next(), None);\n \n         for i in range(0i, 5) {\n-            d.push_back(i);\n+            d.push(i);\n         }\n         {\n             let b: &[_] = &[&4,&3,&2,&1,&0];\n@@ -915,11 +915,11 @@ mod tests {\n         let mut d = RingBuf::with_capacity(3);\n         assert!(d.mut_iter().rev().next().is_none());\n \n-        d.push_back(1i);\n-        d.push_back(2);\n-        d.push_back(3);\n+        d.push(1i);\n+        d.push(2);\n+        d.push(3);\n         assert_eq!(d.pop_front(), Some(1));\n-        d.push_back(4);\n+        d.push(4);\n \n         assert_eq!(d.mut_iter().rev().map(|x| *x).collect::<Vec<int>>(),\n                    vec!(4, 3, 2));\n@@ -992,13 +992,13 @@ mod tests {\n         let mut d = RingBuf::new();\n         d.push_front(17i);\n         d.push_front(42);\n-        d.push_back(137);\n-        d.push_back(137);\n+        d.push(137);\n+        d.push(137);\n         assert_eq!(d.len(), 4u);\n         let mut e = d.clone();\n         assert_eq!(e.len(), 4u);\n         while !d.is_empty() {\n-            assert_eq!(d.pop_back(), e.pop_back());\n+            assert_eq!(d.pop(), e.pop());\n         }\n         assert_eq!(d.len(), 0u);\n         assert_eq!(e.len(), 0u);\n@@ -1011,15 +1011,15 @@ mod tests {\n         d.push_front(137i);\n         d.push_front(17);\n         d.push_front(42);\n-        d.push_back(137);\n+        d.push(137);\n         let mut e = RingBuf::with_capacity(0);\n-        e.push_back(42);\n-        e.push_back(17);\n-        e.push_back(137);\n-        e.push_back(137);\n+        e.push(42);\n+        e.push(17);\n+        e.push(137);\n+        e.push(137);\n         assert!(&e == &d);\n-        e.pop_back();\n-        e.push_back(0);\n+        e.pop();\n+        e.push(0);\n         assert!(e != d);\n         e.clear();\n         assert!(e == RingBuf::new());"}, {"sha": "c13695e2b84ce4929102c8b88cdb8ceeea49affa", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b31058873b69883ece4ae3da6725f54a26f58f0/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7b31058873b69883ece4ae3da6725f54a26f58f0", "patch": "@@ -2374,7 +2374,6 @@ mod bench {\n     use test::Bencher;\n     use test::black_box;\n     use super::*;\n-    use std::option::{None, Some};\n     use std::iter::{Iterator, DoubleEndedIterator};\n     use std::collections::Collection;\n "}]}