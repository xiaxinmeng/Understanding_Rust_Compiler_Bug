{"sha": "9457497bccc59d4f87ef0377ffe09350396e3466", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NTc0OTdiY2NjNTlkNGY4N2VmMDM3N2ZmZTA5MzUwMzk2ZTM0NjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-28T19:51:19Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "update comments", "tree": {"sha": "05300e47400e79584b4865d3172dfce0ab9966d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05300e47400e79584b4865d3172dfce0ab9966d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9457497bccc59d4f87ef0377ffe09350396e3466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9457497bccc59d4f87ef0377ffe09350396e3466", "html_url": "https://github.com/rust-lang/rust/commit/9457497bccc59d4f87ef0377ffe09350396e3466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9457497bccc59d4f87ef0377ffe09350396e3466/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "html_url": "https://github.com/rust-lang/rust/commit/104125d5f7c4d1943e9de3871016e2b21c6b4ab6"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "625bde2ca8b67c52dd99ea0be8df8cb602017336", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9457497bccc59d4f87ef0377ffe09350396e3466/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457497bccc59d4f87ef0377ffe09350396e3466/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=9457497bccc59d4f87ef0377ffe09350396e3466", "patch": "@@ -67,22 +67,37 @@ impl<'a> FnKind<'a> {\n     }\n }\n \n-/// Specifies what nested things a visitor wants to visit. Currently there are\n-/// two modes: `OnlyBodies` descends into item bodies, but not into nested\n-/// items; `All` descends into item bodies and nested items.\n+/// Specifies what nested things a visitor wants to visit. The most\n+/// common choice is `OnlyBodies`, which will cause the visitor to\n+/// visit fn bodies for fns that it encounters, but skip over nested\n+/// item-like things.\n+///\n+/// See the comments on `ItemLikeVisitor` for more details on the overall\n+/// visit strategy.\n pub enum NestedVisitorMap<'this, 'tcx: 'this> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n+    ///\n+    /// Use this if you are only walking some particular kind of tree\n+    /// (i.e., a type, or fn signature) and you don't want to thread a\n+    /// HIR map around.\n     None,\n \n     /// Do not visit nested item-like things, but visit nested things\n     /// that are inside of an item-like.\n     ///\n-    /// **This is the default mode.**\n+    /// **This is the most common choice.** A very commmon pattern is\n+    /// to use `tcx.visit_all_item_likes_in_krate()` as an outer loop,\n+    /// and to have the visitor that visits the contents of each item\n+    /// using this setting.\n     OnlyBodies(&'this Map<'tcx>),\n \n     /// Visit all nested things, including item-likes.\n+    ///\n+    /// **This is an unusual choice.** It is used when you want to\n+    /// process everything within their lexical context. Typically you\n+    /// kick off the visit by doing `walk_krate()`.\n     All(&'this Map<'tcx>),\n }\n \n@@ -128,13 +143,15 @@ pub trait Visitor<'v> : Sized {\n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n \n-    /// The default versions of the `visit_nested_XXX` routines invoke this\n-    /// method to get a map to use; if they get back `None`, they just skip\n-    /// nested things. Otherwise, they will lookup the nested thing in the map\n-    /// and visit it depending on what `nested_visit_mode` returns. So the best\n-    /// way to implement a nested visitor is to override this method to return a\n-    /// `Map`; one advantage of this is that if we add more types of nested\n-    /// things in the future, they will automatically work.\n+    /// The default versions of the `visit_nested_XXX` routines invoke\n+    /// this method to get a map to use. By selecting an enum variant,\n+    /// you control which kinds of nested HIR are visited; see\n+    /// `NestedVisitorMap` for details. By \"nested HIR\", we are\n+    /// referring to bits of HIR that are not directly embedded within\n+    /// one another but rather indirectly, through a table in the\n+    /// crate. This is done to control dependencies during incremental\n+    /// compilation: the non-inline bits of HIR can be tracked and\n+    /// hashed separately.\n     ///\n     /// **If for some reason you want the nested behavior, but don't\n     /// have a `Map` are your disposal:** then you should override the"}, {"sha": "71ef7131440b80393fa90c3e3880437befd77909", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9457497bccc59d4f87ef0377ffe09350396e3466/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457497bccc59d4f87ef0377ffe09350396e3466/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=9457497bccc59d4f87ef0377ffe09350396e3466", "patch": "@@ -41,8 +41,10 @@ use super::intravisit::Visitor;\n ///    item-like things.\n ///    - Example: Lifetime resolution, which wants to bring lifetimes declared on the\n ///      impl into scope while visiting the impl-items, and then back out again.\n-///    - How: Implement `intravisit::Visitor` and override the `visit_nested_foo()` foo methods\n-///      as needed. Walk your crate with `intravisit::walk_crate()` invoked on `tcx.map.krate()`.\n+///    - How: Implement `intravisit::Visitor` and override the\n+///      `visit_nested_map()` methods to return\n+///      `NestedVisitorMap::All`. Walk your crate with\n+///      `intravisit::walk_crate()` invoked on `tcx.map.krate()`.\n ///    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n ///    - Pro: Preserves nesting information\n ///    - Con: Does not integrate well into dependency tracking."}]}