{"sha": "3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWY1ZTM0NjIwZDZiZmEzMmExMjcyNThlMmMyZDlmMmY0ZDY5M2I=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-08T23:32:41Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-26T16:32:29Z"}, "message": "Use iter::zip in library/", "tree": {"sha": "65195beaa85d4c160440fb38aa940536040a010a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65195beaa85d4c160440fb38aa940536040a010a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "html_url": "https://github.com/rust-lang/rust/commit/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b362958453910169876686a839c6818fec2950c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b362958453910169876686a839c6818fec2950c5", "html_url": "https://github.com/rust-lang/rust/commit/b362958453910169876686a839c6818fec2950c5"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "fb243100990b97f7d5b61f313b829dad66813e22", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -108,6 +108,7 @@\n // that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n // from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n #![feature(intra_doc_pointers)]\n+#![feature(iter_zip)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(maybe_uninit_ref)]"}, {"sha": "708898ad2e7809ee2cb948b7c2fb3ca06962559a", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -58,7 +58,7 @@ use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::FromIterator;\n+use core::iter::{self, FromIterator};\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::{self, Index, IndexMut, Range, RangeBounds};\n@@ -2268,11 +2268,8 @@ impl<T: Clone, A: Allocator> ExtendFromWithinSpec for Vec<T, A> {\n         // - caller guaratees that src is a valid index\n         let to_clone = unsafe { this.get_unchecked(src) };\n \n-        to_clone\n-            .iter()\n-            .cloned()\n-            .zip(spare.iter_mut())\n-            .map(|(src, dst)| dst.write(src))\n+        iter::zip(to_clone, spare)\n+            .map(|(src, dst)| dst.write(src.clone()))\n             // Note:\n             // - Element was just initialized with `MaybeUninit::write`, so it's ok to increace len\n             // - len is increased after each element to prevent leaks (see issue #82533)"}, {"sha": "c36542f6314887946e1ebf0f3eadfd7298a08795", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     fmt,\n-    iter::{ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n+    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n     mem::{self, MaybeUninit},\n     ops::Range,\n     ptr,\n@@ -215,7 +215,7 @@ impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n         let mut new = Self { data: MaybeUninit::uninit_array(), alive: 0..0 };\n \n         // Clone all alive elements.\n-        for (src, dst) in self.as_slice().iter().zip(&mut new.data) {\n+        for (src, dst) in iter::zip(self.as_slice(), &mut new.data) {\n             // Write a clone into the new array, then update its alive range.\n             // If cloning panics, we'll correctly drop the previous items.\n             dst.write(src.clone());"}, {"sha": "d696ffa82774b89a93ad6bacae7cd5200d33844e", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -4,6 +4,7 @@\n \n use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n use crate::char::EscapeDebugExtArgs;\n+use crate::iter;\n use crate::marker::PhantomData;\n use crate::mem;\n use crate::num::flt2dec;\n@@ -1088,7 +1089,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     match args.fmt {\n         None => {\n             // We can use default formatting parameters for all arguments.\n-            for (arg, piece) in args.args.iter().zip(args.pieces.iter()) {\n+            for (arg, piece) in iter::zip(args.args, args.pieces) {\n                 formatter.buf.write_str(*piece)?;\n                 (arg.formatter)(arg.value, &mut formatter)?;\n                 idx += 1;\n@@ -1097,7 +1098,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n         Some(fmt) => {\n             // Every spec has a corresponding argument that is preceded by\n             // a string piece.\n-            for (arg, piece) in fmt.iter().zip(args.pieces.iter()) {\n+            for (arg, piece) in iter::zip(fmt, args.pieces) {\n                 formatter.buf.write_str(*piece)?;\n                 // SAFETY: arg and args.args come from the same Arguments,\n                 // which guarantees the indexes are always within bounds."}, {"sha": "197b85fba1fd72b02e49d63a0baf51d187b96863", "filename": "library/core/src/num/bignum.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -181,11 +181,12 @@ macro_rules! define_bignum {\n             /// Adds `other` to itself and returns its own mutable reference.\n             pub fn add<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                 use crate::cmp;\n+                use crate::iter;\n                 use crate::num::bignum::FullOps;\n \n                 let mut sz = cmp::max(self.size, other.size);\n                 let mut carry = false;\n-                for (a, b) in self.base[..sz].iter_mut().zip(&other.base[..sz]) {\n+                for (a, b) in iter::zip(&mut self.base[..sz], &other.base[..sz]) {\n                     let (c, v) = (*a).full_add(*b, carry);\n                     *a = v;\n                     carry = c;\n@@ -219,11 +220,12 @@ macro_rules! define_bignum {\n             /// Subtracts `other` from itself and returns its own mutable reference.\n             pub fn sub<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                 use crate::cmp;\n+                use crate::iter;\n                 use crate::num::bignum::FullOps;\n \n                 let sz = cmp::max(self.size, other.size);\n                 let mut noborrow = true;\n-                for (a, b) in self.base[..sz].iter_mut().zip(&other.base[..sz]) {\n+                for (a, b) in iter::zip(&mut self.base[..sz], &other.base[..sz]) {\n                     let (c, v) = (*a).full_add(!*b, noborrow);\n                     *a = v;\n                     noborrow = c;"}, {"sha": "009ef9e0a9c1f253f4fb34c9e5206daec2e4c01c", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -1,5 +1,6 @@\n //! Operations on ASCII `[u8]`.\n \n+use crate::iter;\n use crate::mem;\n \n #[lang = \"slice_u8\"]\n@@ -19,7 +20,7 @@ impl [u8] {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n-        self.len() == other.len() && self.iter().zip(other).all(|(a, b)| a.eq_ignore_ascii_case(b))\n+        self.len() == other.len() && iter::zip(self, other).all(|(a, b)| a.eq_ignore_ascii_case(b))\n     }\n \n     /// Converts this slice to its ASCII upper case equivalent in-place."}, {"sha": "3719eeb1840beee553a05a2d8b584b1165395e32", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -278,6 +278,7 @@\n #![feature(integer_atomics)]\n #![feature(into_future)]\n #![feature(intra_doc_pointers)]\n+#![feature(iter_zip)]\n #![feature(lang_items)]\n #![feature(link_args)]\n #![feature(linkage)]"}, {"sha": "459f3590e647015f6edc2c1fe6f91f07a9407861", "filename": "library/std/src/sys/unix/ext/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Faddr.rs?ref=3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::OsStr;\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::Path;\n use crate::sys::cvt;\n-use crate::{ascii, fmt, io, mem};\n+use crate::{ascii, fmt, io, iter, mem};\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n@@ -41,7 +41,7 @@ pub(super) unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un,\n             &\"path must be shorter than SUN_LEN\",\n         ));\n     }\n-    for (dst, src) in addr.sun_path.iter_mut().zip(bytes.iter()) {\n+    for (dst, src) in iter::zip(&mut addr.sun_path, bytes) {\n         *dst = *src as libc::c_char;\n     }\n     // null byte for pathname addresses is already there because we zeroed the"}]}