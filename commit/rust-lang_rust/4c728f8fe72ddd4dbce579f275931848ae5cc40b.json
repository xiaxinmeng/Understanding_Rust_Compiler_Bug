{"sha": "4c728f8fe72ddd4dbce579f275931848ae5cc40b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzI4ZjhmZTcyZGRkNGRiY2U1NzlmMjc1OTMxODQ4YWU1Y2M0MGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-12T05:11:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-12T05:42:19Z"}, "message": "rollup merge of #27636: llogiq/patch-1\n\nSee line 181: The lookup should start with the random index and iterate from there.\n\nAlso locked stdout (which makes it a bit faster on my machine). And the `make_lookup` function now uses `map` (as the TODO asked for).\n\nPerhaps the multi-thread output from the fasta benchmark could be used to speed it up even more.", "tree": {"sha": "0ed95145218c49c821a980776bb04c9696949efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed95145218c49c821a980776bb04c9696949efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c728f8fe72ddd4dbce579f275931848ae5cc40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c728f8fe72ddd4dbce579f275931848ae5cc40b", "html_url": "https://github.com/rust-lang/rust/commit/4c728f8fe72ddd4dbce579f275931848ae5cc40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c728f8fe72ddd4dbce579f275931848ae5cc40b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726c9f2c807c98e2ad5bdca356d76b86195d738f", "url": "https://api.github.com/repos/rust-lang/rust/commits/726c9f2c807c98e2ad5bdca356d76b86195d738f", "html_url": "https://github.com/rust-lang/rust/commit/726c9f2c807c98e2ad5bdca356d76b86195d738f"}, {"sha": "86191e2014225d62cc5c3b48e990529ea354f61b", "url": "https://api.github.com/repos/rust-lang/rust/commits/86191e2014225d62cc5c3b48e990529ea354f61b", "html_url": "https://github.com/rust-lang/rust/commit/86191e2014225d62cc5c3b48e990529ea354f61b"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "f7e6149eeaa923f4a5d1463e72535583987178c2", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c728f8fe72ddd4dbce579f275931848ae5cc40b/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c728f8fe72ddd4dbce579f275931848ae5cc40b/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=4c728f8fe72ddd4dbce579f275931848ae5cc40b", "patch": "@@ -87,16 +87,12 @@ static HOMO_SAPIENS: [AminoAcid;4] = [\n     AminoAcid { c: 't' as u8, p: 0.3015094502008 },\n ];\n \n-// FIXME: Use map().\n fn sum_and_scale(a: &'static [AminoAcid]) -> Vec<AminoAcid> {\n-    let mut result = Vec::new();\n     let mut p = 0f32;\n-    for a_i in a {\n-        let mut a_i = *a_i;\n-        p += a_i.p;\n-        a_i.p = p * LOOKUP_SCALE;\n-        result.push(a_i);\n-    }\n+    let mut result: Vec<AminoAcid> = a.iter().map(|a_i| {\n+        p += a_i.p; \n+        AminoAcid { c: a_i.c, p: p * LOOKUP_SCALE }\n+    }).collect();\n     let result_len = result.len();\n     result[result_len - 1].p = LOOKUP_SCALE;\n     result\n@@ -177,17 +173,17 @@ impl<'a, W: Write> RandomFasta<'a, W> {\n \n     fn rng(&mut self, max: f32) -> f32 {\n         self.seed = (self.seed * IA + IC) % IM;\n-        max * (self.seed as f32) / (IM as f32)\n+        (max * self.seed as f32) / (IM as f32)\n     }\n \n     fn nextc(&mut self) -> u8 {\n-        let r = self.rng(1.0);\n-        for a in &self.lookup[..] {\n-            if a.p >= r {\n-                return a.c;\n+        let r = self.rng(LOOKUP_SCALE);\n+        for i in (r as usize..LOOKUP_SIZE) {\n+            if self.lookup[i].p >= r { \n+                return self.lookup[i].c;\n             }\n         }\n-        0\n+        unreachable!();\n     }\n \n     fn make(&mut self, n: usize) -> io::Result<()> {\n@@ -216,8 +212,9 @@ fn main() {\n     } else {\n         5\n     };\n-\n-    let mut out = io::stdout();\n+    \n+    let stdout = io::stdout();\n+    let mut out = stdout.lock();\n \n     out.write_all(b\">ONE Homo sapiens alu\\n\").unwrap();\n     {"}]}