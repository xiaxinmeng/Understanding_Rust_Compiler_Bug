{"sha": "1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTM2YWFlMGI5MmI0Yjc1YWUxYWFkMjhjY2YyN2Q4YjJiNmNmNzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-07T18:50:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T18:50:00Z"}, "message": "Merge #4296\n\n4296: Support cargo:rustc-cfg in build.rs r=matklad a=robojumper\n\nFixes #4238.\n\nCo-authored-by: robojumper <robojumper@gmail.com>", "tree": {"sha": "e76f5011154b29d1987e098e06ae6e1d05b8f650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76f5011154b29d1987e098e06ae6e1d05b8f650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetFhYCRBK7hj4Ov3rIwAAdHIIAGsDo8PCyyHt8DYvQTP7oSgu\nWrrdEZgeCqfBoQxZF1eVv4tcrI3XGnMFPdvCIJ+lpAqbwMB4fS41dqrnvql4ORbF\nY3xDzAQfL1SmIq8SMM+GB3C05TIOE4XLgJ/vaSRUWYN5hEwK6heJwHBQQxWTst58\n9trdBVfWiJ0vzZUk+64QBsYGQwX74JCtZf0/cDL+Yqc2zv+dKzD5w2mag1JA2/Er\nQKVagHvfgtHiO81C1FeIYl5IFR1jHcdGjiLA+4KOsZjI9QNpp+xRXcQbG5ymy0TE\nVtXXWufV9E03XFSLWxXA7DAFKeiTttkDmzPdEo13sAAVpdN97jj7nMAGThA012c=\n=4fXw\n-----END PGP SIGNATURE-----\n", "payload": "tree e76f5011154b29d1987e098e06ae6e1d05b8f650\nparent 97b9b364d65b00ce2246da7670a3823a0bccc1d3\nparent f2dd233ddc60b647fe9c32ea2d712224005ae99e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588877400 +0000\ncommitter GitHub <noreply@github.com> 1588877400 +0000\n\nMerge #4296\n\n4296: Support cargo:rustc-cfg in build.rs r=matklad a=robojumper\n\nFixes #4238.\n\nCo-authored-by: robojumper <robojumper@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "html_url": "https://github.com/rust-lang/rust/commit/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b9b364d65b00ce2246da7670a3823a0bccc1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b9b364d65b00ce2246da7670a3823a0bccc1d3", "html_url": "https://github.com/rust-lang/rust/commit/97b9b364d65b00ce2246da7670a3823a0bccc1d3"}, {"sha": "f2dd233ddc60b647fe9c32ea2d712224005ae99e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2dd233ddc60b647fe9c32ea2d712224005ae99e", "html_url": "https://github.com/rust-lang/rust/commit/f2dd233ddc60b647fe9c32ea2d712224005ae99e"}], "stats": {"total": 135, "additions": 130, "deletions": 5}, "files": [{"sha": "697a0458147d76fb376fc73f99f242f7d0a474a2", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "patch": "@@ -53,4 +53,13 @@ impl CfgOptions {\n     pub fn insert_features(&mut self, iter: impl IntoIterator<Item = SmolStr>) {\n         iter.into_iter().for_each(|feat| self.insert_key_value(\"feature\".into(), feat));\n     }\n+\n+    /// Shortcut to set cfgs\n+    pub fn insert_cfgs(&mut self, iter: impl IntoIterator<Item = SmolStr>) {\n+        iter.into_iter().for_each(|cfg| match cfg.find('=') {\n+            Some(split) => self\n+                .insert_key_value(cfg[0..split].into(), cfg[split + 1..].trim_matches('\"').into()),\n+            None => self.insert_atom(cfg),\n+        });\n+    }\n }"}, {"sha": "16fff9f1ca732680d17d1e38716572d4bb829a97", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "patch": "@@ -87,6 +87,7 @@ pub struct PackageData {\n     pub dependencies: Vec<PackageDependency>,\n     pub edition: Edition,\n     pub features: Vec<String>,\n+    pub cfgs: Vec<String>,\n     pub out_dir: Option<PathBuf>,\n     pub proc_macro_dylib_path: Option<PathBuf>,\n }\n@@ -172,10 +173,12 @@ impl CargoWorkspace {\n         })?;\n \n         let mut out_dir_by_id = FxHashMap::default();\n+        let mut cfgs = FxHashMap::default();\n         let mut proc_macro_dylib_paths = FxHashMap::default();\n         if cargo_features.load_out_dirs_from_check {\n             let resources = load_extern_resources(cargo_toml, cargo_features)?;\n             out_dir_by_id = resources.out_dirs;\n+            cfgs = resources.cfgs;\n             proc_macro_dylib_paths = resources.proc_dylib_paths;\n         }\n \n@@ -201,6 +204,7 @@ impl CargoWorkspace {\n                 edition,\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n+                cfgs: cfgs.get(&id).cloned().unwrap_or_default(),\n                 out_dir: out_dir_by_id.get(&id).cloned(),\n                 proc_macro_dylib_path: proc_macro_dylib_paths.get(&id).cloned(),\n             });\n@@ -282,6 +286,7 @@ impl CargoWorkspace {\n pub struct ExternResources {\n     out_dirs: FxHashMap<PackageId, PathBuf>,\n     proc_dylib_paths: FxHashMap<PackageId, PathBuf>,\n+    cfgs: FxHashMap<PackageId, Vec<String>>,\n }\n \n pub fn load_extern_resources(\n@@ -307,8 +312,14 @@ pub fn load_extern_resources(\n     for message in cargo_metadata::parse_messages(output.stdout.as_slice()) {\n         if let Ok(message) = message {\n             match message {\n-                Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n-                    res.out_dirs.insert(package_id, out_dir);\n+                Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n+                    res.out_dirs.insert(package_id.clone(), out_dir);\n+                    res.cfgs.insert(\n+                        package_id,\n+                        // FIXME: Current `cargo_metadata` uses `PathBuf` instead of `String`,\n+                        // change when https://github.com/oli-obk/cargo_metadata/pulls/112 reaches crates.io\n+                        cfgs.iter().filter_map(|c| c.to_str().map(|s| s.to_owned())).collect(),\n+                    );\n                 }\n \n                 Message::CompilerArtifact(message) => {"}, {"sha": "8703429d4457cb6ae6f2265a29e81e3e0721979f", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "patch": "@@ -399,6 +399,7 @@ impl ProjectWorkspace {\n                             let cfg_options = {\n                                 let mut opts = default_cfg_options.clone();\n                                 opts.insert_features(cargo[pkg].features.iter().map(Into::into));\n+                                opts.insert_cfgs(cargo[pkg].cfgs.iter().map(Into::into));\n                                 opts\n                             };\n                             let mut env = Env::default();"}, {"sha": "e459e3a3cec776d1652af9d6e4651a08f6ce0f80", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 107, "deletions": 3, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=1b136aae0b92b4b75ae1aad28ccf27d8b2b6cf73", "patch": "@@ -9,7 +9,8 @@ use lsp_types::{\n };\n use rust_analyzer::req::{\n     CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n-    Formatting, GotoDefinition, HoverRequest, OnEnter, Runnables, RunnablesParams,\n+    Formatting, GotoDefinition, GotoTypeDefinition, HoverRequest, OnEnter, Runnables,\n+    RunnablesParams,\n };\n use serde_json::json;\n use tempfile::TempDir;\n@@ -574,7 +575,7 @@ version = \\\"0.0.0\\\"\n }\n \n #[test]\n-fn resolve_include_concat_env() {\n+fn out_dirs_check() {\n     if skip_slow_tests() {\n         return;\n     }\n@@ -597,11 +598,28 @@ fn main() {\n         r#\"pub fn message() -> &'static str { \"Hello, World!\" }\"#,\n     )\n     .unwrap();\n+    println!(\"cargo:rustc-cfg=atom_cfg\");\n+    println!(\"cargo:rustc-cfg=featlike=\\\"set\\\"\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n }\n //- src/main.rs\n include!(concat!(env!(\"OUT_DIR\"), \"/hello.rs\"));\n \n+#[cfg(atom_cfg)]\n+struct A;\n+#[cfg(bad_atom_cfg)]\n+struct A;\n+#[cfg(featlike = \"set\")]\n+struct B;\n+#[cfg(featlike = \"not_set\")]\n+struct B;\n+\n+fn main() {\n+    let va = A;\n+    let vb = B;\n+    message();\n+}\n+\n fn main() { message(); }\n \"###,\n     )\n@@ -613,12 +631,98 @@ fn main() { message(); }\n     let res = server.send_request::<GotoDefinition>(GotoDefinitionParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"src/main.rs\"),\n-            Position::new(2, 15),\n+            Position::new(14, 8),\n         ),\n         work_done_progress_params: Default::default(),\n         partial_result_params: Default::default(),\n     });\n     assert!(format!(\"{}\", res).contains(\"hello.rs\"));\n+    server.request::<GotoTypeDefinition>(\n+        GotoDefinitionParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/main.rs\"),\n+                Position::new(12, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+            partial_result_params: Default::default(),\n+        },\n+        json!([{\n+            \"originSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 10,\n+                    \"line\": 12\n+                },\n+                \"start\": {\n+                    \"character\": 8,\n+                    \"line\": 12\n+                }\n+            },\n+            \"targetRange\": {\n+                \"end\": {\n+                    \"character\": 9,\n+                    \"line\": 3\n+                },\n+                \"start\": {\n+                    \"character\": 0,\n+                    \"line\": 2\n+                }\n+            },\n+            \"targetSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 8,\n+                    \"line\": 3\n+                },\n+                \"start\": {\n+                    \"character\": 7,\n+                    \"line\": 3\n+                }\n+            },\n+            \"targetUri\": \"file:///[..]src/main.rs\"\n+        }]),\n+    );\n+    server.request::<GotoTypeDefinition>(\n+        GotoDefinitionParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/main.rs\"),\n+                Position::new(13, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+            partial_result_params: Default::default(),\n+        },\n+        json!([{\n+            \"originSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 10,\n+                    \"line\": 13\n+                },\n+                \"start\": {\n+                    \"character\": 8,\n+                    \"line\":13\n+                }\n+            },\n+            \"targetRange\": {\n+                \"end\": {\n+                    \"character\": 9,\n+                    \"line\": 7\n+                },\n+                \"start\": {\n+                    \"character\": 0,\n+                    \"line\":6\n+                }\n+            },\n+            \"targetSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 8,\n+                    \"line\": 7\n+                },\n+                \"start\": {\n+                    \"character\": 7,\n+                    \"line\": 7\n+                }\n+            },\n+            \"targetUri\": \"file:///[..]src/main.rs\"\n+        }]),\n+    );\n }\n \n #[test]"}]}