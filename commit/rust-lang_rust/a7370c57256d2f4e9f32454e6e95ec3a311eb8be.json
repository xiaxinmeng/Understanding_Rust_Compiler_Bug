{"sha": "a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "node_id": "C_kwDOAAsO6NoAKGE3MzcwYzU3MjU2ZDJmNGU5ZjMyNDU0ZTZlOTVlYzNhMzExZWI4YmU", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-27T13:00:02Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-27T13:00:02Z"}, "message": "remove file symbols", "tree": {"sha": "0cb91326d18d1a205e264bbd5a0bcc2ba0f98482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb91326d18d1a205e264bbd5a0bcc2ba0f98482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "html_url": "https://github.com/rust-lang/rust/commit/a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7370c57256d2f4e9f32454e6e95ec3a311eb8be/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377162c0f81d415941a3f8f16bf5e4b6799628a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/377162c0f81d415941a3f8f16bf5e4b6799628a6", "html_url": "https://github.com/rust-lang/rust/commit/377162c0f81d415941a3f8f16bf5e4b6799628a6"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "6c085ffc979031a9f3b75effbb7576333c0b0b34", "filename": "crates/ide_db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7370c57256d2f4e9f32454e6e95ec3a311eb8be/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7370c57256d2f4e9f32454e6e95ec3a311eb8be/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "patch": "@@ -137,7 +137,7 @@ impl RootDatabase {\n             hir::db::InternTypeParamIdQuery\n \n             // SymbolsDatabase\n-            crate::symbol_index::FileSymbolsQuery\n+            crate::symbol_index::ModuleSymbolsQuery\n             crate::symbol_index::LibrarySymbolsQuery\n             crate::symbol_index::LocalRootsQuery\n             crate::symbol_index::LibraryRootsQuery"}, {"sha": "e85a846de5f15707c082726dc79fb16750307ff0", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 33, "deletions": 40, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a7370c57256d2f4e9f32454e6e95ec3a311eb8be/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7370c57256d2f4e9f32454e6e95ec3a311eb8be/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=a7370c57256d2f4e9f32454e6e95ec3a311eb8be", "patch": "@@ -96,7 +96,7 @@ impl Query {\n \n #[salsa::query_group(SymbolsDatabaseStorage)]\n pub trait SymbolsDatabase: hir::db::HirDatabase + SourceDatabaseExt {\n-    fn file_symbols(&self, file_id: FileId) -> Arc<SymbolIndex>;\n+    fn module_symbols(&self, module_id: ModuleId) -> Arc<SymbolIndex>;\n     fn library_symbols(&self) -> Arc<FxHashMap<SourceRootId, SymbolIndex>>;\n     /// The set of \"local\" (that is, from the current workspace) roots.\n     /// Files in local roots are assumed to change frequently.\n@@ -129,13 +129,13 @@ fn library_symbols(db: &dyn SymbolsDatabase) -> Arc<FxHashMap<SourceRootId, Symb\n     Arc::new(res)\n }\n \n-fn file_symbols(db: &dyn SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n+fn module_symbols(db: &dyn SymbolsDatabase, module_id: ModuleId) -> Arc<SymbolIndex> {\n     db.unwind_if_cancelled();\n-    let parse = db.parse(file_id);\n \n-    let symbols = source_file_to_file_symbols(&parse.tree(), file_id);\n+    let def_map = module_id.def_map(db.upcast());\n+    let module_data = &def_map[module_id.local_id];\n \n-    // FIXME: add macros here\n+    let symbols = module_data_to_file_symbols(db.upcast(), module_data);\n \n     Arc::new(SymbolIndex::new(symbols))\n }\n@@ -183,16 +183,19 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n         tmp1 = db.library_symbols();\n         tmp1.values().collect()\n     } else {\n-        let mut files = Vec::new();\n+        let mut module_ids = Vec::new();\n+\n         for &root in db.local_roots().iter() {\n-            let sr = db.source_root(root);\n-            files.extend(sr.iter())\n+            let crates = db.source_root_crates(root);\n+            for &krate in crates.iter() {\n+                module_ids.extend(module_ids_for_crate(db, krate));\n+            }\n         }\n \n         let snap = Snap(db.snapshot());\n-        tmp2 = files\n+        tmp2 = module_ids\n             .par_iter()\n-            .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n+            .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n             .collect::<Vec<_>>();\n         tmp2.iter().map(|it| &**it).collect()\n     };\n@@ -201,37 +204,30 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n \n pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<FileSymbol> {\n     let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{:?}\", query));\n-    // FIXME(#4842): This now depends on DefMap, why not build the entire symbol index from\n-    // that instead?\n \n-    let def_map = db.crate_def_map(krate);\n-    // let mut files = Vec::new();\n-    // let mut modules = vec![def_map.root()];\n-    // while let Some(module) = modules.pop() {\n-    //     let data = &def_map[module];\n-    //     files.extend(data.origin.file_id());\n-    //     modules.extend(data.children.values());\n-    // }\n-\n-    // let snap = Snap(db.snapshot());\n-\n-    // let buf = files\n-    //     .par_iter()\n-    //     .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n-    //     .collect::<Vec<_>>();\n-\n-    // todo: make this fast!!!\n-    // how do i salsa this?\n-\n-    let buf: Vec<_> = def_map\n-        .modules()\n-        .map(|(_, module_data)| SymbolIndex::new(module_data_to_file_symbols(db, module_data)))\n+    let module_ids = module_ids_for_crate(db, krate);\n+    let snap = Snap(db.snapshot());\n+    let buf: Vec<_> = module_ids\n+        .par_iter()\n+        .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n         .collect();\n-    let buf = buf.iter().collect::<Vec<_>>();\n-\n+    let buf = buf.iter().map(|it| &**it).collect::<Vec<_>>();\n     query.search(&buf)\n }\n \n+fn module_ids_for_crate(db: &RootDatabase, krate: CrateId) -> Vec<ModuleId> {\n+    let def_map = db.crate_def_map(krate);\n+    let mut module_ids = Vec::new();\n+    let mut modules = vec![def_map.root()];\n+    while let Some(module) = modules.pop() {\n+        let data = &def_map[module];\n+        module_ids.push(def_map.module_id(module));\n+        modules.extend(data.children.values());\n+    }\n+\n+    module_ids\n+}\n+\n pub fn index_resolve(db: &RootDatabase, name: &str) -> Vec<FileSymbol> {\n     let mut query = Query::new(name.to_string());\n     query.exact();\n@@ -572,10 +568,7 @@ fn collect_symbols_from_item_scope(\n         let def_map = module_id.def_map(db);\n         let module_data = &def_map[module_id.local_id];\n         let declaration = module_data.origin.declaration()?;\n-        let file_id = match module_data.origin.file_id() {\n-            Some(file_id) => file_id.into(),\n-            None => declaration.file_id,\n-        };\n+        let file_id = declaration.file_id;\n \n         let module = declaration.to_node(db.upcast());\n         let name = module.name()?;"}]}