{"sha": "339027ec157757e903bc23ad0eed11e8a75867fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTAyN2VjMTU3NzU3ZTkwM2JjMjNhZDBlZWQxMWU4YTc1ODY3ZmE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:59:56Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:59:56Z"}, "message": "Move unchanging portions of Context over to the Visitor.", "tree": {"sha": "5939fbae8104073ca4308a2b1a37e73ea7f213a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5939fbae8104073ca4308a2b1a37e73ea7f213a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339027ec157757e903bc23ad0eed11e8a75867fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339027ec157757e903bc23ad0eed11e8a75867fa", "html_url": "https://github.com/rust-lang/rust/commit/339027ec157757e903bc23ad0eed11e8a75867fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339027ec157757e903bc23ad0eed11e8a75867fa/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc133650077af5b223795e24c7f0ce67ea7e12ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc133650077af5b223795e24c7f0ce67ea7e12ad", "html_url": "https://github.com/rust-lang/rust/commit/bc133650077af5b223795e24c7f0ce67ea7e12ad"}], "stats": {"total": 137, "additions": 70, "deletions": 67}, "files": [{"sha": "5b6bb3a7b752af0dd8265b0e1e9e45194cddcde4", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 70, "deletions": 67, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/339027ec157757e903bc23ad0eed11e8a75867fa/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339027ec157757e903bc23ad0eed11e8a75867fa/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=339027ec157757e903bc23ad0eed11e8a75867fa", "patch": "@@ -65,19 +65,22 @@ pub struct RegionMaps {\n \n #[deriving(Clone)]\n pub struct Context {\n-    sess: Session,\n-    def_map: resolve::DefMap,\n-\n-    // Generated maps:\n-    region_maps: @mut RegionMaps,\n-\n     // Scope where variables should be parented to\n     var_parent: Option<ast::NodeId>,\n \n     // Innermost enclosing expression\n     parent: Option<ast::NodeId>,\n }\n \n+struct RegionResolutionVisitor {\n+    sess: Session,\n+    def_map: resolve::DefMap,\n+\n+    // Generated maps:\n+    region_maps: @mut RegionMaps,\n+}\n+\n+\n impl RegionMaps {\n     pub fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) {\n         match self.free_region_map.find_mut(&sub) {\n@@ -318,24 +321,24 @@ impl RegionMaps {\n }\n \n /// Records the current parent (if any) as the parent of `child_id`.\n-fn parent_to_expr(cx: Context, child_id: ast::NodeId, sp: Span) {\n+fn parent_to_expr(visitor: &mut RegionResolutionVisitor,\n+                  cx: Context, child_id: ast::NodeId, sp: Span) {\n     debug!(\"region::parent_to_expr(span=%?)\",\n-           cx.sess.codemap.span_to_str(sp));\n+           visitor.sess.codemap.span_to_str(sp));\n     for parent_id in cx.parent.iter() {\n-        cx.region_maps.record_parent(child_id, *parent_id);\n+        visitor.region_maps.record_parent(child_id, *parent_id);\n     }\n }\n \n fn resolve_block(visitor: &mut RegionResolutionVisitor,\n                  blk: &ast::Block,\n                  cx: Context) {\n     // Record the parent of this block.\n-    parent_to_expr(cx, blk.id, blk.span);\n+    parent_to_expr(visitor, cx, blk.id, blk.span);\n \n     // Descend.\n     let new_cx = Context {var_parent: Some(blk.id),\n-                          parent: Some(blk.id),\n-                          ..cx};\n+                          parent: Some(blk.id)};\n     visit::walk_block(visitor, blk, new_cx);\n }\n \n@@ -349,7 +352,7 @@ fn resolve_pat(visitor: &mut RegionResolutionVisitor,\n                pat: @ast::Pat,\n                cx: Context) {\n     assert_eq!(cx.var_parent, cx.parent);\n-    parent_to_expr(cx, pat.id, pat.span);\n+    parent_to_expr(visitor, cx, pat.id, pat.span);\n     visit::walk_pat(visitor, pat, cx);\n }\n \n@@ -362,18 +365,18 @@ fn resolve_stmt(visitor: &mut RegionResolutionVisitor,\n         }\n         ast::StmtExpr(_, stmt_id) |\n         ast::StmtSemi(_, stmt_id) => {\n-            parent_to_expr(cx, stmt_id, stmt.span);\n+            parent_to_expr(visitor, cx, stmt_id, stmt.span);\n             let expr_cx = Context {parent: Some(stmt_id), ..cx};\n             visit::walk_stmt(visitor, stmt, expr_cx);\n         }\n-        ast::StmtMac(*) => cx.sess.bug(\"unexpanded macro\")\n+        ast::StmtMac(*) => visitor.sess.bug(\"unexpanded macro\")\n     }\n }\n \n fn resolve_expr(visitor: &mut RegionResolutionVisitor,\n                 expr: @ast::Expr,\n                 cx: Context) {\n-    parent_to_expr(cx, expr.id, expr.span);\n+    parent_to_expr(visitor, cx, expr.id, expr.span);\n \n     let mut new_cx = cx;\n     new_cx.parent = Some(expr.id);\n@@ -415,7 +418,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor,\n                  local: @ast::Local,\n                  cx: Context) {\n     assert_eq!(cx.var_parent, cx.parent);\n-    parent_to_expr(cx, local.id, local.span);\n+    parent_to_expr(visitor, cx, local.id, local.span);\n     visit::walk_local(visitor, local, cx);\n }\n \n@@ -439,7 +442,7 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n                                body.id=%?, \\\n                                cx.parent=%?)\",\n            id,\n-           cx.sess.codemap.span_to_str(sp),\n+           visitor.sess.codemap.span_to_str(sp),\n            body.id,\n            cx.parent);\n \n@@ -449,7 +452,7 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n                            ..cx};\n     match *fk {\n         visit::fk_method(_, _, method) => {\n-            cx.region_maps.record_parent(method.self_id, body.id);\n+            visitor.region_maps.record_parent(method.self_id, body.id);\n         }\n         _ => {}\n     }\n@@ -470,8 +473,6 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n     visitor.visit_block(body, body_cx);\n }\n \n-struct RegionResolutionVisitor;\n-\n impl Visitor<Context> for RegionResolutionVisitor {\n \n     fn visit_block(&mut self, b:&Block, cx:Context) {\n@@ -511,12 +512,13 @@ pub fn resolve_crate(sess: Session,\n         free_region_map: HashMap::new(),\n         cleanup_scopes: HashSet::new(),\n     };\n-    let cx = Context {sess: sess,\n-                      def_map: def_map,\n-                      region_maps: region_maps,\n-                      parent: None,\n+    let cx = Context {parent: None,\n                       var_parent: None};\n-    let mut visitor = RegionResolutionVisitor;\n+    let mut visitor = RegionResolutionVisitor {\n+        sess: sess,\n+        def_map: def_map,\n+        region_maps: region_maps,\n+    };\n     visit::walk_crate(&mut visitor, crate, cx);\n     return region_maps;\n }\n@@ -733,10 +735,9 @@ impl DetermineRpCtxt {\n }\n \n fn determine_rp_in_item(visitor: &mut DetermineRpVisitor,\n-                        item: @ast::item,\n-                        cx: @mut DetermineRpCtxt) {\n-    do cx.with(item.id, true) {\n-        visit::walk_item(visitor, item, cx);\n+                        item: @ast::item) {\n+    do visitor.cx.with(item.id, true) {\n+        visit::walk_item(visitor, item, ());\n     }\n }\n \n@@ -745,32 +746,33 @@ fn determine_rp_in_fn(visitor: &mut DetermineRpVisitor,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n                       _: Span,\n-                      _: ast::NodeId,\n-                      cx: @mut DetermineRpCtxt) {\n+                      _: ast::NodeId) {\n+    let cx = visitor.cx;\n     do cx.with(cx.item_id, false) {\n         do cx.with_ambient_variance(rv_contravariant) {\n             for a in decl.inputs.iter() {\n-                visitor.visit_ty(&a.ty, cx);\n+                visitor.visit_ty(&a.ty, ());\n             }\n         }\n-        visitor.visit_ty(&decl.output, cx);\n+        visitor.visit_ty(&decl.output, ());\n         let generics = visit::generics_of_fn(fk);\n-        visitor.visit_generics(&generics, cx);\n-        visitor.visit_block(body, cx);\n+        visitor.visit_generics(&generics, ());\n+        visitor.visit_block(body, ());\n     }\n }\n \n fn determine_rp_in_ty_method(visitor: &mut DetermineRpVisitor,\n-                             ty_m: &ast::TypeMethod,\n-                             cx: @mut DetermineRpCtxt) {\n+                             ty_m: &ast::TypeMethod) {\n+    let cx = visitor.cx;\n     do cx.with(cx.item_id, false) {\n-        visit::walk_ty_method(visitor, ty_m, cx);\n+        visit::walk_ty_method(visitor, ty_m, ());\n     }\n }\n \n fn determine_rp_in_ty(visitor: &mut DetermineRpVisitor,\n-                      ty: &ast::Ty,\n-                      cx: @mut DetermineRpCtxt) {\n+                      ty: &ast::Ty) {\n+    let cx = visitor.cx;\n+\n     // we are only interested in types that will require an item to\n     // be region-parameterized.  if cx.item_id is zero, then this type\n     // is not a member of a type defn nor is it a constitutent of an\n@@ -854,14 +856,14 @@ fn determine_rp_in_ty(visitor: &mut DetermineRpVisitor,\n     match ty.node {\n       ast::ty_box(ref mt) | ast::ty_uniq(ref mt) | ast::ty_vec(ref mt) |\n       ast::ty_rptr(_, ref mt) | ast::ty_ptr(ref mt) => {\n-        visit_mt(visitor, mt, cx);\n+        visit_mt(visitor, mt);\n       }\n \n       ast::ty_path(ref path, _, _) => {\n         // type parameters are---for now, anyway---always invariant\n         do cx.with_ambient_variance(rv_invariant) {\n             for tp in path.segments.iter().flat_map(|s| s.types.iter()) {\n-                visitor.visit_ty(tp, cx);\n+                visitor.visit_ty(tp, ());\n             }\n         }\n       }\n@@ -874,57 +876,58 @@ fn determine_rp_in_ty(visitor: &mut DetermineRpVisitor,\n             // parameters are contravariant\n             do cx.with_ambient_variance(rv_contravariant) {\n                 for a in decl.inputs.iter() {\n-                    visitor.visit_ty(&a.ty, cx);\n+                    visitor.visit_ty(&a.ty, ());\n                 }\n             }\n-            visitor.visit_ty(&decl.output, cx);\n+            visitor.visit_ty(&decl.output, ());\n         }\n       }\n \n       _ => {\n-        visit::walk_ty(visitor, ty, cx);\n+        visit::walk_ty(visitor, ty, ());\n       }\n     }\n \n     fn visit_mt(visitor: &mut DetermineRpVisitor,\n-                mt: &ast::mt,\n-                cx: @mut DetermineRpCtxt) {\n+                mt: &ast::mt) {\n+        let cx = visitor.cx;\n         // mutability is invariant\n         if mt.mutbl == ast::MutMutable {\n             do cx.with_ambient_variance(rv_invariant) {\n-                visitor.visit_ty(mt.ty, cx);\n+                visitor.visit_ty(mt.ty, ());\n             }\n         } else {\n-            visitor.visit_ty(mt.ty, cx);\n+            visitor.visit_ty(mt.ty, ());\n         }\n     }\n }\n \n fn determine_rp_in_struct_field(visitor: &mut DetermineRpVisitor,\n-                                cm: @ast::struct_field,\n-                                cx: @mut DetermineRpCtxt) {\n-    visit::walk_struct_field(visitor, cm, cx);\n+                                cm: @ast::struct_field) {\n+    visit::walk_struct_field(visitor, cm, ());\n }\n \n-struct DetermineRpVisitor;\n+struct DetermineRpVisitor {\n+    cx: @mut DetermineRpCtxt\n+}\n \n-impl Visitor<@mut DetermineRpCtxt> for DetermineRpVisitor {\n+impl Visitor<()> for DetermineRpVisitor {\n \n     fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl,\n-                b:&Block, s:Span, n:NodeId, e:@mut DetermineRpCtxt) {\n-        determine_rp_in_fn(self, fk, fd, b, s, n, e);\n+                b:&Block, s:Span, n:NodeId, _:()) {\n+        determine_rp_in_fn(self, fk, fd, b, s, n);\n     }\n-    fn visit_item(&mut self, i:@item, e:@mut DetermineRpCtxt) {\n-        determine_rp_in_item(self, i, e);\n+    fn visit_item(&mut self, i:@item, _:()) {\n+        determine_rp_in_item(self, i);\n     }\n-    fn visit_ty(&mut self, t:&Ty, e:@mut DetermineRpCtxt) {\n-        determine_rp_in_ty(self, t, e);\n+    fn visit_ty(&mut self, t:&Ty, _:()) {\n+        determine_rp_in_ty(self, t);\n     }\n-    fn visit_ty_method(&mut self, t:&TypeMethod, e:@mut DetermineRpCtxt) {\n-        determine_rp_in_ty_method(self, t, e);\n+    fn visit_ty_method(&mut self, t:&TypeMethod, _:()) {\n+        determine_rp_in_ty_method(self, t);\n     }\n-    fn visit_struct_field(&mut self, s:@struct_field, e:@mut DetermineRpCtxt) {\n-        determine_rp_in_struct_field(self, s, e);\n+    fn visit_struct_field(&mut self, s:@struct_field, _:()) {\n+        determine_rp_in_struct_field(self, s);\n     }\n \n }\n@@ -947,8 +950,8 @@ pub fn determine_rp_in_crate(sess: Session,\n     };\n \n     // Gather up the base set, worklist and dep_map\n-    let mut visitor = DetermineRpVisitor;\n-    visit::walk_crate(&mut visitor, crate, cx);\n+    let mut visitor = DetermineRpVisitor { cx: cx };\n+    visit::walk_crate(&mut visitor, crate, ());\n \n     // Propagate indirect dependencies\n     //"}]}