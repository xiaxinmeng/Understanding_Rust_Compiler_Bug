{"sha": "cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOWFiMmMwMzM5YWEwMDU2NmVlNmM1ZDEyMzgzMjc4YzdiZDdlZWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-22T03:22:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-24T01:35:34Z"}, "message": "Remove old comm-based weak task interface", "tree": {"sha": "f45ae66e7ce00c66cae3c793d088250a4af8003b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45ae66e7ce00c66cae3c793d088250a4af8003b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "html_url": "https://github.com/rust-lang/rust/commit/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e087cefacb1b92476543fe7d6ef68f0ca82dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e087cefacb1b92476543fe7d6ef68f0ca82dd8", "html_url": "https://github.com/rust-lang/rust/commit/a3e087cefacb1b92476543fe7d6ef68f0ca82dd8"}], "stats": {"total": 165, "additions": 0, "deletions": 165}, "files": [{"sha": "03207330f31c775453f63e005550acaf232e2bec", "filename": "src/libcore/private.rs", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "patch": "@@ -39,8 +39,6 @@ pub mod weak_task;\n \n extern mod rustrt {\n     #[legacy_exports];\n-    unsafe fn rust_task_weaken(ch: rust_port_id);\n-    unsafe fn rust_task_unweaken(ch: rust_port_id);\n \n     unsafe fn rust_create_little_lock() -> rust_little_lock;\n     unsafe fn rust_destroy_little_lock(lock: rust_little_lock);\n@@ -92,111 +90,11 @@ fn test_run_in_bare_thread() unsafe {\n     }\n }\n \n-#[allow(non_camel_case_types)] // runtime type\n-type rust_port_id = uint;\n-\n fn compare_and_swap(address: &mut int, oldval: int, newval: int) -> bool {\n     let old = rusti::atomic_cxchg(address, oldval, newval);\n     old == oldval\n }\n \n-/**\n- * Convert the current task to a 'weak' task temporarily\n- *\n- * As a weak task it will not be counted towards the runtime's set\n- * of live tasks. When there are no more outstanding live (non-weak) tasks\n- * the runtime will send an exit message on the provided channel.\n- *\n- * This function is super-unsafe. Do not use.\n- *\n- * # Safety notes\n- *\n- * * Weak tasks must either die on their own or exit upon receipt of\n- *   the exit message. Failure to do so will cause the runtime to never\n- *   exit\n- * * Tasks must not call `weaken_task` multiple times. This will\n- *   break the kernel's accounting of live tasks.\n- * * Weak tasks must not be supervised. A supervised task keeps\n- *   a reference to its parent, so the parent will not die.\n- */\n-pub unsafe fn weaken_task(f: fn(oldcomm::Port<()>)) {\n-    let po = oldcomm::Port();\n-    let ch = oldcomm::Chan(&po);\n-    unsafe {\n-        rustrt::rust_task_weaken(cast::reinterpret_cast(&ch));\n-    }\n-    let _unweaken = Unweaken(ch);\n-    f(po);\n-\n-    struct Unweaken {\n-      ch: oldcomm::Chan<()>,\n-      drop unsafe {\n-        rustrt::rust_task_unweaken(cast::reinterpret_cast(&self.ch));\n-      }\n-    }\n-\n-    fn Unweaken(ch: oldcomm::Chan<()>) -> Unweaken {\n-        Unweaken {\n-            ch: ch\n-        }\n-    }\n-}\n-\n-#[test]\n-pub fn test_weaken_task_then_unweaken() {\n-    do task::try {\n-        unsafe {\n-            do weaken_task |_po| {\n-            }\n-        }\n-    };\n-}\n-\n-#[test]\n-pub fn test_weaken_task_wait() {\n-    do task::spawn_unlinked {\n-        unsafe {\n-            do weaken_task |po| {\n-                oldcomm::recv(po);\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-pub fn test_weaken_task_stress() {\n-    // Create a bunch of weak tasks\n-    for iter::repeat(100u) {\n-        do task::spawn {\n-            unsafe {\n-                do weaken_task |_po| {\n-                }\n-            }\n-        }\n-        do task::spawn_unlinked {\n-            unsafe {\n-                do weaken_task |po| {\n-                    // Wait for it to tell us to die\n-                    oldcomm::recv(po);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-#[ignore(cfg(windows))]\n-pub fn test_weaken_task_fail() {\n-    let res = do task::try {\n-        unsafe {\n-            do weaken_task |_po| {\n-                fail;\n-            }\n-        }\n-    };\n-    assert result::is_err(&res);\n-}\n-\n /****************************************************************************\n  * Shared state & exclusive ARC\n  ****************************************************************************/"}, {"sha": "4fcfc11b325684903c76e7583585f01da8e49e29", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "patch": "@@ -858,18 +858,6 @@ rust_compare_and_swap_ptr(intptr_t *address,\n     return sync::compare_and_swap(address, oldval, newval);\n }\n \n-extern \"C\" CDECL void\n-rust_task_weaken(rust_port_id chan) {\n-    rust_task *task = rust_get_current_task();\n-    task->kernel->weaken_task(chan);\n-}\n-\n-extern \"C\" CDECL void\n-rust_task_unweaken(rust_port_id chan) {\n-    rust_task *task = rust_get_current_task();\n-    task->kernel->unweaken_task(chan);\n-}\n-\n extern \"C\" void\n rust_task_inhibit_kill(rust_task *task) {\n     task->inhibit_kill();"}, {"sha": "c365f3cca1ef45dfd0755e8a1d3422e6c2bcc3eb", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "patch": "@@ -368,30 +368,6 @@ rust_kernel::unregister_task() {\n     }\n }\n \n-void\n-rust_kernel::weaken_task(rust_port_id chan) {\n-    {\n-        scoped_lock with(weak_task_lock);\n-        KLOG_(\"Weakening task with channel %\" PRIdPTR, chan);\n-        weak_task_chans.push_back(chan);\n-    }\n-    inc_weak_task_count();\n-}\n-\n-void\n-rust_kernel::unweaken_task(rust_port_id chan) {\n-    dec_weak_task_count();\n-    {\n-        scoped_lock with(weak_task_lock);\n-        KLOG_(\"Unweakening task with channel %\" PRIdPTR, chan);\n-        std::vector<rust_port_id>::iterator iter =\n-            std::find(weak_task_chans.begin(), weak_task_chans.end(), chan);\n-        if (iter != weak_task_chans.end()) {\n-            weak_task_chans.erase(iter);\n-        }\n-    }\n-}\n-\n void\n rust_kernel::inc_weak_task_count() {\n     uintptr_t new_non_weak_tasks = sync::decrement(non_weak_tasks);\n@@ -407,23 +383,6 @@ rust_kernel::dec_weak_task_count() {\n     KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n }\n \n-void\n-rust_kernel::end_weak_tasks() {\n-    std::vector<rust_port_id> chancopies;\n-    {\n-        scoped_lock with(weak_task_lock);\n-        chancopies = weak_task_chans;\n-        weak_task_chans.clear();\n-    }\n-    while (!chancopies.empty()) {\n-        rust_port_id chan = chancopies.back();\n-        chancopies.pop_back();\n-        KLOG_(\"Notifying weak task \" PRIdPTR, chan);\n-        uintptr_t token = 0;\n-        send_to_port(chan, &token);\n-    }\n-}\n-\n void\n rust_kernel::begin_shutdown() {\n     {\n@@ -439,7 +398,6 @@ rust_kernel::begin_shutdown() {\n \n     run_exit_functions();\n     allow_scheduler_exit();\n-    end_weak_tasks();\n }\n \n bool"}, {"sha": "c25cef9fef98c4f1cdd60691748c8a726ef1c9b8", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "patch": "@@ -119,14 +119,9 @@ class rust_kernel {\n \n     // An atomically updated count of the live, 'non-weak' tasks\n     uintptr_t non_weak_tasks;\n-    // Protects weak_task_chans\n-    lock_and_signal weak_task_lock;\n-    // A list of weak tasks that need to be told when to exit\n-    std::vector<rust_port_id> weak_task_chans;\n \n     rust_scheduler* get_scheduler_by_id_nolock(rust_sched_id id);\n     void allow_scheduler_exit();\n-    void end_weak_tasks();\n     void begin_shutdown();\n \n     lock_and_signal at_exit_lock;\n@@ -180,8 +175,6 @@ class rust_kernel {\n \n     void register_task();\n     void unregister_task();\n-    void weaken_task(rust_port_id chan);\n-    void unweaken_task(rust_port_id chan);\n     void inc_weak_task_count();\n     void dec_weak_task_count();\n "}, {"sha": "eb9db6c1d575563a16a6b4835b4794c35ebb24f1", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/cc9ab2c0339aa00566ee6c5d12383278c7bd7eef/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=cc9ab2c0339aa00566ee6c5d12383278c7bd7eef", "patch": "@@ -61,8 +61,6 @@ rust_task_yield\n rust_task_is_unwinding\n rust_get_task\n rust_get_stack_segment\n-rust_task_weaken\n-rust_task_unweaken\n rust_log_str\n start_task\n vec_reserve_shared_actual"}]}