{"sha": "c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "node_id": "C_kwDOAAsO6NoAKGM5YmI1MTk2MWNmOWIxMjRjOTc0ZjYxZWM0ZDBkYTU5ZTQ0NTljMGI", "commit": {"author": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-08-01T18:41:08Z"}, "committer": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-08-01T18:41:08Z"}, "message": "Misc Cleanups", "tree": {"sha": "aa9263bea4ca12bd34638a349530d5317f47ddca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9263bea4ca12bd34638a349530d5317f47ddca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "html_url": "https://github.com/rust-lang/rust/commit/c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9bb51961cf9b124c974f61ec4d0da59e4459c0b/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "html_url": "https://github.com/rust-lang/rust/commit/e0fab632f1bd7473a08d4bb682f1bcc329efe01f"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "7e9cbe1bba5c74afa52dda93a1e346be39e5ef06", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c9bb51961cf9b124c974f61ec4d0da59e4459c0b/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9bb51961cf9b124c974f61ec4d0da59e4459c0b/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "patch": "@@ -375,7 +375,7 @@ struct pthread_attr_t {\n }\n \n #[link(name = \"pthread\")]\n-#[cfg(not(target_env=\"msvc\"))]\n+#[cfg(unix)]\n extern \"C\" {\n     fn pthread_attr_init(attr: *mut pthread_attr_t) -> c_int;\n \n@@ -399,14 +399,14 @@ type LPVOID = *mut c_void;\n type HANDLE = *mut c_void;\n \n #[link(name = \"msvcrt\")]\n-#[cfg(target_env=\"msvc\")]\n+#[cfg(windows)]\n extern \"C\" {\n     fn WaitForSingleObject(\n         hHandle: LPVOID,\n         dwMilliseconds: DWORD\n     ) -> DWORD;\n \n-    fn  CreateThread(\n+    fn CreateThread(\n         lpThreadAttributes: LPVOID, // Technically LPSECURITY_ATTRIBUTES, but we don't use it anyway\n         dwStackSize: usize,\n         lpStartAddress: extern \"C\" fn(_: *mut c_void) -> *mut c_void,\n@@ -416,14 +416,16 @@ extern \"C\" {\n     ) -> HANDLE;\n }\n \n-enum Thread {\n-    Windows(HANDLE),\n-    Pthread(pthread_t)\n+struct Thread {\n+    #[cfg(windows)]\n+    handle: HANDLE,\n+    #[cfg(unix)]\n+    handle: pthread_t,\n }\n \n impl Thread {\n     unsafe fn create(f: extern \"C\" fn(_: *mut c_void) -> *mut c_void) -> Self {\n-        #[cfg(not(target_env=\"msvc\"))]\n+        #[cfg(unix)]\n         {\n             let mut attr: pthread_attr_t = zeroed();\n             let mut thread: pthread_t = 0;\n@@ -436,35 +438,38 @@ impl Thread {\n                 assert!(false);\n             }\n \n-            Thread::Pthread(thread)\n+            Thread {\n+                handle: thread,\n+            }\n         }\n \n-        #[cfg(target_env=\"msvc\")]\n+        #[cfg(windows)]\n         {\n             let handle = CreateThread(0 as *mut c_void, 0, f, 0 as *mut c_void, 0, 0 as *mut u32);\n \n             if (handle as u64) == 0 {\n                 assert!(false);\n             }\n \n-            Thread::Windows(handle)\n+            Thread {\n+                handle,\n+            }\n         }\n     }\n \n \n     unsafe fn join(self) {\n-        match self {\n-            #[cfg(not(target_env=\"msvc\"))]\n-            Thread::Pthread(thread) => {\n-                let mut res = 0 as *mut c_void;\n-                pthread_join(thread, &mut res);\n-            }\n-            #[cfg(target_env=\"msvc\")]\n-            Thread::Windows(handle) => {\n-                let wait_time = 5000; // in milliseconds\n-                assert!(WaitForSingleObject(handle, wait_time) == 0);\n-            }\n-            _ => assert!(false),\n+        #[cfg(unix)]\n+        {\n+            let mut res = 0 as *mut c_void;\n+            pthread_join(self.handle, &mut res);\n+        }\n+\n+        #[cfg(windows)]\n+        {\n+            // The INFINITE macro is used to signal operations that do not timeout.\n+            let infinite = 0xffffffff;\n+            assert!(WaitForSingleObject(self.handle, infinite) == 0);\n         }\n     }\n }"}]}