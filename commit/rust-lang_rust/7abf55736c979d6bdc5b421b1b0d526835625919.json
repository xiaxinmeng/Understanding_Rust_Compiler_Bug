{"sha": "7abf55736c979d6bdc5b421b1b0d526835625919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYmY1NTczNmM5NzlkNmJkYzViNDIxYjFiMGQ1MjY4MzU2MjU5MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-20T21:27:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-20T21:27:37Z"}, "message": "core: Move 'unreachable' to util. Improve docs", "tree": {"sha": "4bfeaaaba537c9c85ecd7e25b054dc1cddb3b116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bfeaaaba537c9c85ecd7e25b054dc1cddb3b116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7abf55736c979d6bdc5b421b1b0d526835625919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7abf55736c979d6bdc5b421b1b0d526835625919", "html_url": "https://github.com/rust-lang/rust/commit/7abf55736c979d6bdc5b421b1b0d526835625919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7abf55736c979d6bdc5b421b1b0d526835625919/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b0845a84c481488c11a9fb5892fc823a9ce66d", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b0845a84c481488c11a9fb5892fc823a9ce66d", "html_url": "https://github.com/rust-lang/rust/commit/77b0845a84c481488c11a9fb5892fc823a9ce66d"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "a7c3c2555ac78ca8c0181f2e5bcfccfb04050223", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=7abf55736c979d6bdc5b421b1b0d526835625919", "patch": "@@ -22,7 +22,7 @@ use ptr::Ptr;\n use to_str::ToStr;\n \n export Path, WindowsPath, PosixPath, GenericPath;\n-export Option, Some, None, unreachable;\n+export Option, Some, None;\n export Result, Ok, Err;\n export extensions;\n // The following exports are the extension impls for numeric types\n@@ -96,13 +96,3 @@ mod std {\n     extern mod std(vers = \"0.4\");\n     use std::test;\n }\n-\n-/**\n- * A standard function to use to indicate unreachable code. Because the\n- * function is guaranteed to fail typestate will correctly identify\n- * any code paths following the appearance of this function as unreachable.\n- */\n-fn unreachable() -> ! {\n-    fail ~\"Internal error: entered unreachable code\";\n-}\n-"}, {"sha": "52b5bdadc350d13c3ff1593fc7ecbc33b81ea481", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=7abf55736c979d6bdc5b421b1b0d526835625919", "patch": "@@ -206,7 +206,7 @@ impl Rng {\n                 return Some(item.item);\n             }\n         }\n-        unreachable();\n+        util::unreachable();\n     }\n \n     /**"}, {"sha": "e9ca27407ea1e39c89258cf33d1d6cfa0325f5ad", "filename": "src/libcore/util.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=7abf55736c979d6bdc5b421b1b0d526835625919", "patch": "@@ -64,6 +64,34 @@ struct NonCopyable {\n \n fn NonCopyable() -> NonCopyable { NonCopyable { i: () } }\n \n+/**\n+A utility function for indicating unreachable code. It will fail if\n+executed. This is occasionally useful to put after loops that never\n+terminate normally, but instead directly return from a function.\n+\n+# Example\n+\n+~~~\n+fn choose_weighted_item(v: &[Item]) -> Item {\n+    assert v.is_not_empty();\n+    let mut so_far = 0u;\n+    for v.each |item| {\n+        so_far += item.weight;\n+        if so_far > 100 {\n+            return item;\n+        }\n+    }\n+    // The above loop always returns, so we must hint to the\n+    // type checker that it isn't possible to get down here\n+    util::unreachable();\n+}\n+~~~\n+\n+*/\n+fn unreachable() -> ! {\n+    fail ~\"internal error: entered unreachable code\";\n+}\n+\n mod tests {\n     #[test]\n     fn identity_crisis() {"}, {"sha": "f115827b13634ff9b3785bcbe4e39ccb62351997", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=7abf55736c979d6bdc5b421b1b0d526835625919", "patch": "@@ -106,7 +106,7 @@ fn get_rpath_relative_to_output(os: session::os,\n     let prefix = match os {\n         session::os_linux | session::os_freebsd => \"$ORIGIN\",\n         session::os_macos => \"@executable_path\",\n-        session::os_win32 => core::unreachable()\n+        session::os_win32 => core::util::unreachable()\n     };\n \n     Path(prefix).push_rel(&get_relative_to(&os::make_absolute(output),"}, {"sha": "376e70fc6c5e85f60a78d9ee527987fd3de17d97", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf55736c979d6bdc5b421b1b0d526835625919/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=7abf55736c979d6bdc5b421b1b0d526835625919", "patch": "@@ -170,7 +170,7 @@ fn variant_opt(tcx: ty::ctxt, pat_id: ast::node_id) -> Opt {\n     for vec::each(*variants) |v| {\n         if vdef.var == v.id { return var(v.disr_val, vdef); }\n     }\n-    core::unreachable();\n+    core::util::unreachable();\n }\n \n enum TransBindingMode {"}]}