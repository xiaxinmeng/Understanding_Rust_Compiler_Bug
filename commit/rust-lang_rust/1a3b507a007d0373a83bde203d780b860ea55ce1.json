{"sha": "1a3b507a007d0373a83bde203d780b860ea55ce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhM2I1MDdhMDA3ZDAzNzNhODNiZGUyMDNkNzgwYjg2MGVhNTVjZTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T14:25:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T14:25:56Z"}, "message": "Merge #5034\n\n5034: Cleanup project.json deserialization r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fd9b9d3295963b17f65d2a0960189adeae38c3a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9b9d3295963b17f65d2a0960189adeae38c3a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a3b507a007d0373a83bde203d780b860ea55ce1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe82J0CRBK7hj4Ov3rIwAAdHIIAF1MgVC8m6S40Y1FYnvkPDq2\n59+LD17mz750TRSypZ2eORmbRLgV4MuGhCWs43dn1sJGC8qwcmK9xb+pJtFMyWjM\nIUpzQUlhKV6z2ECICqTyxtiff57WQqSbGBuu6wo0kjbgprOFtL2h/goR8F5asmfQ\nHgrUS9/orzl6G4HfsAVATXXCMj7aAcBbOgGkLuRkSzKdn4AaMGiWwqPN75sWKCIa\nviI0wc82yv0+biylUNQ2/TT4HAFGY++mwjf+23VLRMr/WSc/BHM5OiXXxSFxFh90\nDqVbvgJpuY138nOIta+mhIvN0TXIZZ/QiuxLnOGZPh+cK8VDB2+P9Pg/ZW11kiY=\n=h6ra\n-----END PGP SIGNATURE-----\n", "payload": "tree fd9b9d3295963b17f65d2a0960189adeae38c3a2\nparent 97c4d06258bace7c9caf211d3a307fff05bdb58e\nparent e6c61d5072e600372ba4a38ad8893af37aaa77e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593008756 +0000\ncommitter GitHub <noreply@github.com> 1593008756 +0000\n\nMerge #5034\n\n5034: Cleanup project.json deserialization r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3b507a007d0373a83bde203d780b860ea55ce1", "html_url": "https://github.com/rust-lang/rust/commit/1a3b507a007d0373a83bde203d780b860ea55ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a3b507a007d0373a83bde203d780b860ea55ce1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97c4d06258bace7c9caf211d3a307fff05bdb58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c4d06258bace7c9caf211d3a307fff05bdb58e", "html_url": "https://github.com/rust-lang/rust/commit/97c4d06258bace7c9caf211d3a307fff05bdb58e"}, {"sha": "e6c61d5072e600372ba4a38ad8893af37aaa77e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c61d5072e600372ba4a38ad8893af37aaa77e6", "html_url": "https://github.com/rust-lang/rust/commit/e6c61d5072e600372ba4a38ad8893af37aaa77e6"}], "stats": {"total": 361, "additions": 179, "deletions": 182}, "files": [{"sha": "7bd2144a7418ff424db4a22e15f7ab6afa87bab2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -1183,6 +1183,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n+ \"stdx\",\n ]\n \n [[package]]"}, {"sha": "b1b44dcf78d8c5f5dd4e6382b4b8d03a2f69d77e", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -19,6 +19,7 @@ ra_db = { path = \"../ra_db\" }\n ra_toolchain = { path = \"../ra_toolchain\" }\n ra_proc_macro =  { path = \"../ra_proc_macro\" }\n paths =  { path = \"../paths\" }\n+stdx =  { path = \"../stdx\" }\n \n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\""}, {"sha": "3b124020d2728f742801da8bf49157c0c45e507d", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -260,7 +260,7 @@ impl CargoWorkspace {\n             .copied()\n     }\n \n-    pub fn workspace_root(&self) -> &Path {\n+    pub fn workspace_root(&self) -> &AbsPath {\n         &self.workspace_root\n     }\n "}, {"sha": "ee2de4c2569165561ccaab17ac1d86f7c88ee4aa", "filename": "crates/ra_project_model/src/json_project.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/97c4d06258bace7c9caf211d3a307fff05bdb58e/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c4d06258bace7c9caf211d3a307fff05bdb58e/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs?ref=97c4d06258bace7c9caf211d3a307fff05bdb58e", "patch": "@@ -1,95 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use std::path::PathBuf;\n-\n-use rustc_hash::FxHashSet;\n-use serde::Deserialize;\n-\n-/// Roots and crates that compose this Rust project.\n-#[derive(Clone, Debug, Deserialize)]\n-pub struct JsonProject {\n-    pub(crate) roots: Vec<Root>,\n-    pub(crate) crates: Vec<Crate>,\n-}\n-\n-/// A root points to the directory which contains Rust crates. rust-analyzer watches all files in\n-/// all roots. Roots might be nested.\n-#[derive(Clone, Debug, Deserialize)]\n-#[serde(transparent)]\n-pub struct Root {\n-    pub(crate) path: PathBuf,\n-}\n-\n-/// A crate points to the root module of a crate and lists the dependencies of the crate. This is\n-/// useful in creating the crate graph.\n-#[derive(Clone, Debug, Deserialize)]\n-pub struct Crate {\n-    pub(crate) root_module: PathBuf,\n-    pub(crate) edition: Edition,\n-    pub(crate) deps: Vec<Dep>,\n-\n-    #[serde(default)]\n-    pub(crate) cfg: FxHashSet<String>,\n-\n-    pub(crate) out_dir: Option<PathBuf>,\n-    pub(crate) proc_macro_dylib_path: Option<PathBuf>,\n-}\n-\n-#[derive(Clone, Copy, Debug, Deserialize)]\n-#[serde(rename = \"edition\")]\n-pub enum Edition {\n-    #[serde(rename = \"2015\")]\n-    Edition2015,\n-    #[serde(rename = \"2018\")]\n-    Edition2018,\n-}\n-\n-/// Identifies a crate by position in the crates array.\n-#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd)]\n-#[serde(transparent)]\n-pub struct CrateId(pub usize);\n-\n-/// A dependency of a crate, identified by its id in the crates array and name.\n-#[derive(Clone, Debug, Deserialize)]\n-pub struct Dep {\n-    #[serde(rename = \"crate\")]\n-    pub(crate) krate: CrateId,\n-    pub(crate) name: String,\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use serde_json::json;\n-\n-    #[test]\n-    fn test_crate_deserialization() {\n-        let raw_json = json!(    {\n-            \"crate_id\": 2,\n-            \"root_module\": \"this/is/a/file/path.rs\",\n-            \"deps\": [\n-              {\n-                \"crate\": 1,\n-                \"name\": \"some_dep_crate\"\n-              },\n-            ],\n-            \"edition\": \"2015\",\n-            \"cfg\": [\n-              \"atom_1\",\n-              \"atom_2\",\n-              \"feature=feature_1\",\n-              \"feature=feature_2\",\n-              \"other=value\",\n-            ],\n-\n-        });\n-\n-        let krate: Crate = serde_json::from_value(raw_json).unwrap();\n-\n-        assert!(krate.cfg.contains(&\"atom_1\".to_string()));\n-        assert!(krate.cfg.contains(&\"atom_2\".to_string()));\n-        assert!(krate.cfg.contains(&\"feature=feature_1\".to_string()));\n-        assert!(krate.cfg.contains(&\"feature=feature_2\".to_string()));\n-        assert!(krate.cfg.contains(&\"other=value\".to_string()));\n-    }\n-}"}, {"sha": "8b85b4831f4e83c0707e8ff4493828dff87052b2", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 29, "deletions": 52, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -1,26 +1,25 @@\n //! FIXME: write short doc here\n \n mod cargo_workspace;\n-mod json_project;\n+mod project_json;\n mod sysroot;\n \n use std::{\n-    fs::{read_dir, File, ReadDir},\n-    io::{self, BufReader},\n+    fs::{self, read_dir, ReadDir},\n+    io,\n     path::Path,\n     process::{Command, Output},\n };\n \n use anyhow::{bail, Context, Result};\n use paths::{AbsPath, AbsPathBuf};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n use rustc_hash::{FxHashMap, FxHashSet};\n-use serde_json::from_reader;\n \n pub use crate::{\n     cargo_workspace::{CargoConfig, CargoWorkspace, Package, Target, TargetKind},\n-    json_project::JsonProject,\n+    project_json::{ProjectJson, ProjectJsonData},\n     sysroot::Sysroot,\n };\n pub use ra_proc_macro::ProcMacroClient;\n@@ -30,7 +29,7 @@ pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo { cargo: CargoWorkspace, sysroot: Sysroot },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: JsonProject, project_location: AbsPathBuf },\n+    Json { project: ProjectJson },\n }\n \n /// `PackageRoot` describes a package root folder.\n@@ -156,17 +155,15 @@ impl ProjectWorkspace {\n     ) -> Result<ProjectWorkspace> {\n         let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n-                let file = File::open(&project_json).with_context(|| {\n-                    format!(\"Failed to open json file {}\", project_json.display())\n+                let file = fs::read_to_string(&project_json).with_context(|| {\n+                    format!(\"Failed to read json file {}\", project_json.display())\n+                })?;\n+                let data = serde_json::from_str(&file).with_context(|| {\n+                    format!(\"Failed to deserialize json file {}\", project_json.display())\n                 })?;\n-                let reader = BufReader::new(file);\n                 let project_location = project_json.parent().unwrap().to_path_buf();\n-                ProjectWorkspace::Json {\n-                    project: from_reader(reader).with_context(|| {\n-                        format!(\"Failed to deserialize json file {}\", project_json.display())\n-                    })?,\n-                    project_location,\n-                }\n+                let project = ProjectJson::new(&project_location, data);\n+                ProjectWorkspace::Json { project }\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)\n@@ -198,11 +195,9 @@ impl ProjectWorkspace {\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n-            ProjectWorkspace::Json { project, project_location } => project\n-                .roots\n-                .iter()\n-                .map(|r| PackageRoot::new_member(project_location.join(&r.path)))\n-                .collect(),\n+            ProjectWorkspace::Json { project } => {\n+                project.roots.iter().map(|r| PackageRoot::new_member(r.path.clone())).collect()\n+            }\n             ProjectWorkspace::Cargo { cargo, sysroot } => cargo\n                 .packages()\n                 .map(|pkg| PackageRoot {\n@@ -219,11 +214,11 @@ impl ProjectWorkspace {\n \n     pub fn proc_macro_dylib_paths(&self) -> Vec<AbsPathBuf> {\n         match self {\n-            ProjectWorkspace::Json { project, project_location } => project\n+            ProjectWorkspace::Json { project } => project\n                 .crates\n                 .iter()\n                 .filter_map(|krate| krate.proc_macro_dylib_path.as_ref())\n-                .map(|it| project_location.join(it))\n+                .cloned()\n                 .collect(),\n             ProjectWorkspace::Cargo { cargo, sysroot: _sysroot } => cargo\n                 .packages()\n@@ -246,36 +241,18 @@ impl ProjectWorkspace {\n         &self,\n         target: Option<&str>,\n         proc_macro_client: &ProcMacroClient,\n-        load: &mut dyn FnMut(&Path) -> Option<FileId>,\n+        load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n-            ProjectWorkspace::Json { project, project_location } => {\n+            ProjectWorkspace::Json { project } => {\n                 let crates: FxHashMap<_, _> = project\n                     .crates\n                     .iter()\n                     .enumerate()\n                     .filter_map(|(seq_index, krate)| {\n-                        let file_path = project_location.join(&krate.root_module);\n+                        let file_path = &krate.root_module;\n                         let file_id = load(&file_path)?;\n-                        let edition = match krate.edition {\n-                            json_project::Edition::Edition2015 => Edition::Edition2015,\n-                            json_project::Edition::Edition2018 => Edition::Edition2018,\n-                        };\n-                        let cfg_options = {\n-                            let mut opts = CfgOptions::default();\n-                            for cfg in &krate.cfg {\n-                                match cfg.find('=') {\n-                                    None => opts.insert_atom(cfg.into()),\n-                                    Some(pos) => {\n-                                        let key = &cfg[..pos];\n-                                        let value = cfg[pos + 1..].trim_matches('\"');\n-                                        opts.insert_key_value(key.into(), value.into());\n-                                    }\n-                                }\n-                            }\n-                            opts\n-                        };\n \n                         let mut env = Env::default();\n                         if let Some(out_dir) = &krate.out_dir {\n@@ -290,13 +267,13 @@ impl ProjectWorkspace {\n                             .map(|it| proc_macro_client.by_dylib_path(&it));\n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         Some((\n-                            json_project::CrateId(seq_index),\n+                            CrateId(seq_index as u32),\n                             crate_graph.add_crate_root(\n                                 file_id,\n-                                edition,\n+                                krate.edition,\n                                 // FIXME json definitions can store the crate name\n                                 None,\n-                                cfg_options,\n+                                krate.cfg.clone(),\n                                 env,\n                                 proc_macro.unwrap_or_default(),\n                             ),\n@@ -306,8 +283,8 @@ impl ProjectWorkspace {\n \n                 for (id, krate) in project.crates.iter().enumerate() {\n                     for dep in &krate.deps {\n-                        let from_crate_id = json_project::CrateId(id);\n-                        let to_crate_id = dep.krate;\n+                        let from_crate_id = CrateId(id as u32);\n+                        let to_crate_id = dep.crate_id;\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n                         {\n@@ -523,15 +500,15 @@ impl ProjectWorkspace {\n         crate_graph\n     }\n \n-    pub fn workspace_root_for(&self, path: &Path) -> Option<&Path> {\n+    pub fn workspace_root_for(&self, path: &Path) -> Option<&AbsPath> {\n         match self {\n             ProjectWorkspace::Cargo { cargo, .. } => {\n                 Some(cargo.workspace_root()).filter(|root| path.starts_with(root))\n             }\n-            ProjectWorkspace::Json { project: JsonProject { roots, .. }, .. } => roots\n+            ProjectWorkspace::Json { project: ProjectJson { roots, .. }, .. } => roots\n                 .iter()\n                 .find(|root| path.starts_with(&root.path))\n-                .map(|root| root.path.as_ref()),\n+                .map(|root| root.path.as_path()),\n         }\n     }\n }"}, {"sha": "4b5dcd6340be51fab63c3f9f1d73c3ac4abefb18", "filename": "crates/ra_project_model/src/project_json.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -0,0 +1,117 @@\n+//! FIXME: write short doc here\n+\n+use std::path::PathBuf;\n+\n+use paths::{AbsPath, AbsPathBuf};\n+use ra_cfg::CfgOptions;\n+use ra_db::{CrateId, Dependency, Edition};\n+use rustc_hash::FxHashSet;\n+use serde::Deserialize;\n+use stdx::split_delim;\n+\n+/// Roots and crates that compose this Rust project.\n+#[derive(Clone, Debug)]\n+pub struct ProjectJson {\n+    pub(crate) roots: Vec<Root>,\n+    pub(crate) crates: Vec<Crate>,\n+}\n+\n+/// A root points to the directory which contains Rust crates. rust-analyzer watches all files in\n+/// all roots. Roots might be nested.\n+#[derive(Clone, Debug)]\n+pub struct Root {\n+    pub(crate) path: AbsPathBuf,\n+}\n+\n+/// A crate points to the root module of a crate and lists the dependencies of the crate. This is\n+/// useful in creating the crate graph.\n+#[derive(Clone, Debug)]\n+pub struct Crate {\n+    pub(crate) root_module: AbsPathBuf,\n+    pub(crate) edition: Edition,\n+    pub(crate) deps: Vec<Dependency>,\n+    pub(crate) cfg: CfgOptions,\n+    pub(crate) out_dir: Option<AbsPathBuf>,\n+    pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n+}\n+\n+impl ProjectJson {\n+    pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n+        ProjectJson {\n+            roots: data.roots.into_iter().map(|path| Root { path: base.join(path) }).collect(),\n+            crates: data\n+                .crates\n+                .into_iter()\n+                .map(|crate_data| Crate {\n+                    root_module: base.join(crate_data.root_module),\n+                    edition: crate_data.edition.into(),\n+                    deps: crate_data\n+                        .deps\n+                        .into_iter()\n+                        .map(|dep_data| Dependency {\n+                            crate_id: CrateId(dep_data.krate as u32),\n+                            name: dep_data.name.into(),\n+                        })\n+                        .collect::<Vec<_>>(),\n+                    cfg: {\n+                        let mut cfg = CfgOptions::default();\n+                        for entry in &crate_data.cfg {\n+                            match split_delim(entry, '=') {\n+                                Some((key, value)) => {\n+                                    cfg.insert_key_value(key.into(), value.into());\n+                                }\n+                                None => cfg.insert_atom(entry.into()),\n+                            }\n+                        }\n+                        cfg\n+                    },\n+                    out_dir: crate_data.out_dir.map(|it| base.join(it)),\n+                    proc_macro_dylib_path: crate_data.proc_macro_dylib_path.map(|it| base.join(it)),\n+                })\n+                .collect::<Vec<_>>(),\n+        }\n+    }\n+}\n+\n+#[derive(Deserialize)]\n+pub struct ProjectJsonData {\n+    roots: Vec<PathBuf>,\n+    crates: Vec<CrateData>,\n+}\n+\n+#[derive(Deserialize)]\n+struct CrateData {\n+    root_module: PathBuf,\n+    edition: EditionData,\n+    deps: Vec<DepData>,\n+    #[serde(default)]\n+    cfg: FxHashSet<String>,\n+    out_dir: Option<PathBuf>,\n+    proc_macro_dylib_path: Option<PathBuf>,\n+}\n+\n+#[derive(Deserialize)]\n+#[serde(rename = \"edition\")]\n+enum EditionData {\n+    #[serde(rename = \"2015\")]\n+    Edition2015,\n+    #[serde(rename = \"2018\")]\n+    Edition2018,\n+}\n+\n+impl From<EditionData> for Edition {\n+    fn from(data: EditionData) -> Self {\n+        match data {\n+            EditionData::Edition2015 => Edition::Edition2015,\n+            EditionData::Edition2018 => Edition::Edition2018,\n+        }\n+    }\n+}\n+\n+#[derive(Deserialize)]\n+struct DepData {\n+    /// Identifies a crate by position in the crates array.\n+    #[serde(rename = \"crate\")]\n+    krate: usize,\n+    name: String,\n+}"}, {"sha": "e98d0f86872199a106b49de208b221333eca8e85", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -1,8 +1,7 @@\n //! See `CargoTargetSpec`\n \n-use std::path::PathBuf;\n-\n use ra_cfg::CfgExpr;\n+use ra_db::AbsPathBuf;\n use ra_ide::{FileId, RunnableKind, TestId};\n use ra_project_model::{self, TargetKind};\n \n@@ -14,7 +13,7 @@ use crate::{global_state::GlobalStateSnapshot, Result};\n /// build/test/run the target.\n #[derive(Clone)]\n pub(crate) struct CargoTargetSpec {\n-    pub(crate) workspace_root: PathBuf,\n+    pub(crate) workspace_root: AbsPathBuf,\n     pub(crate) package: String,\n     pub(crate) target: String,\n     pub(crate) target_kind: TargetKind,"}, {"sha": "9c510bb629702c64e626fd5016b0b22ae3b4f36f", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -1,13 +1,13 @@\n //! Loads a Cargo project into a static instance of analysis, without support\n //! for incorporating changes.\n-use std::{convert::TryFrom, path::Path, sync::Arc};\n+use std::{path::Path, sync::Arc};\n \n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{AbsPathBuf, CrateGraph};\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace};\n-use vfs::loader::Handle;\n+use vfs::{loader::Handle, AbsPath};\n \n use crate::global_state::{ProjectFolders, SourceRootConfig};\n \n@@ -39,10 +39,9 @@ pub fn load_cargo(\n         ProcMacroClient::dummy()\n     };\n \n-    let crate_graph = ws.to_crate_graph(None, &proc_macro_client, &mut |path: &Path| {\n-        let path = AbsPathBuf::try_from(path.to_path_buf()).unwrap();\n-        let contents = loader.load_sync(&path);\n-        let path = vfs::VfsPath::from(path);\n+    let crate_graph = ws.to_crate_graph(None, &proc_macro_client, &mut |path: &AbsPath| {\n+        let contents = loader.load_sync(path);\n+        let path = vfs::VfsPath::from(path.to_path_buf());\n         vfs.set_file_contents(path.clone(), contents);\n         vfs.file_id(&path)\n     });"}, {"sha": "8f69de968f040ae711b58bc67e206b524b19cf83", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -14,7 +14,7 @@ use lsp_types::ClientCapabilities;\n use ra_db::AbsPathBuf;\n use ra_flycheck::FlycheckConfig;\n use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n-use ra_project_model::{CargoConfig, JsonProject, ProjectManifest};\n+use ra_project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use serde::Deserialize;\n \n #[derive(Debug, Clone)]\n@@ -47,7 +47,7 @@ pub struct Config {\n #[derive(Debug, Clone)]\n pub enum LinkedProject {\n     ProjectManifest(ProjectManifest),\n-    InlineJsonProject(JsonProject),\n+    InlineJsonProject(ProjectJson),\n }\n \n impl From<ProjectManifest> for LinkedProject {\n@@ -56,8 +56,8 @@ impl From<ProjectManifest> for LinkedProject {\n     }\n }\n \n-impl From<JsonProject> for LinkedProject {\n-    fn from(v: JsonProject) -> Self {\n+impl From<ProjectJson> for LinkedProject {\n+    fn from(v: ProjectJson) -> Self {\n         LinkedProject::InlineJsonProject(v)\n     }\n }\n@@ -273,19 +273,19 @@ impl Config {\n             self.lens = LensConfig::NO_LENS;\n         }\n \n-        if let Some(linked_projects) = get::<Vec<ManifestOrJsonProject>>(value, \"/linkedProjects\") {\n+        if let Some(linked_projects) = get::<Vec<ManifestOrProjectJson>>(value, \"/linkedProjects\") {\n             if !linked_projects.is_empty() {\n                 self.linked_projects.clear();\n                 for linked_project in linked_projects {\n                     let linked_project = match linked_project {\n-                        ManifestOrJsonProject::Manifest(it) => {\n+                        ManifestOrProjectJson::Manifest(it) => {\n                             let path = self.root_path.join(it);\n                             match ProjectManifest::from_manifest_file(path) {\n                                 Ok(it) => it.into(),\n                                 Err(_) => continue,\n                             }\n                         }\n-                        ManifestOrJsonProject::JsonProject(it) => it.into(),\n+                        ManifestOrProjectJson::ProjectJson(it) => ProjectJson::new(&self.root_path, it).into(),\n                     };\n                     self.linked_projects.push(linked_project);\n                 }\n@@ -371,7 +371,7 @@ impl Config {\n \n #[derive(Deserialize)]\n #[serde(untagged)]\n-enum ManifestOrJsonProject {\n+enum ManifestOrProjectJson {\n     Manifest(PathBuf),\n-    JsonProject(JsonProject),\n+    ProjectJson(ProjectJsonData),\n }"}, {"sha": "e7eeb60eea3c18434962e3109a070d4fb4bbd5a4", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -3,7 +3,7 @@\n //!\n //! Each tick provides an immutable snapshot of the state as `WorldSnapshot`.\n \n-use std::{convert::TryFrom, path::Path, sync::Arc};\n+use std::{convert::TryFrom, sync::Arc};\n \n use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n@@ -13,7 +13,7 @@ use ra_flycheck::{Flycheck, FlycheckConfig};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use stdx::format_to;\n-use vfs::{file_set::FileSetConfig, loader::Handle, AbsPathBuf};\n+use vfs::{file_set::FileSetConfig, loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::{\n     config::{Config, FilesWatcher},\n@@ -31,7 +31,7 @@ fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) ->\n     workspaces.iter().find_map(|w| match w {\n         ProjectWorkspace::Cargo { cargo, .. } => {\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            Some(Flycheck::new(config.clone(), cargo_project_root))\n+            Some(Flycheck::new(config.clone(), cargo_project_root.into()))\n         }\n         ProjectWorkspace::Json { .. } => {\n             log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n@@ -112,10 +112,9 @@ impl GlobalState {\n \n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n-        let mut load = |path: &Path| {\n-            let path = AbsPathBuf::try_from(path.to_path_buf()).ok()?;\n-            let contents = loader.load_sync(&path);\n-            let path = vfs::VfsPath::from(path);\n+        let mut load = |path: &AbsPath| {\n+            let contents = loader.load_sync(path);\n+            let path = vfs::VfsPath::from(path.to_path_buf());\n             vfs.set_file_contents(path.clone(), contents);\n             vfs.file_id(&path)\n         };"}, {"sha": "390c66dfca6ad986dda433890ad442d83bb8d83f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -114,10 +114,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                         .ok()\n                     }\n                     LinkedProject::InlineJsonProject(it) => {\n-                        Some(ra_project_model::ProjectWorkspace::Json {\n-                            project: it.clone(),\n-                            project_location: config.root_path.clone(),\n-                        })\n+                        Some(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n                     }\n                 })\n                 .collect::<Vec<_>>()"}, {"sha": "a1e2432cff52aeabfe56ab67446007ae6829567a", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -419,7 +419,7 @@ pub fn handle_runnables(\n                     location: None,\n                     kind: lsp_ext::RunnableKind::Cargo,\n                     args: lsp_ext::CargoRunnable {\n-                        workspace_root: Some(spec.workspace_root.clone()),\n+                        workspace_root: Some(spec.workspace_root.clone().into()),\n                         cargo_args: vec![\n                             cmd.to_string(),\n                             \"--package\".to_string(),"}, {"sha": "88d1c0d8ab6f613e7683c8b521dc99d6309e20ae", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -663,7 +663,7 @@ pub(crate) fn runnable(\n         location: Some(location),\n         kind: lsp_ext::RunnableKind::Cargo,\n         args: lsp_ext::CargoRunnable {\n-            workspace_root: workspace_root,\n+            workspace_root: workspace_root.map(|it| it.into()),\n             cargo_args,\n             executable_args,\n         },"}, {"sha": "5b4978285b55f899c54745bb374aaced08af254c", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -45,7 +45,7 @@ impl loader::Handle for LoaderHandle {\n     fn invalidate(&mut self, path: AbsPathBuf) {\n         self.sender.send(Message::Invalidate(path)).unwrap();\n     }\n-    fn load_sync(&mut self, path: &AbsPathBuf) -> Option<Vec<u8>> {\n+    fn load_sync(&mut self, path: &AbsPath) -> Option<Vec<u8>> {\n         read(path)\n     }\n }"}, {"sha": "052803dd9f6ee1404ded007fe45d4f7337541128", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -1,7 +1,7 @@\n //! Object safe interface for file watching and reading.\n use std::fmt;\n \n-use paths::AbsPathBuf;\n+use paths::{AbsPath, AbsPathBuf};\n \n #[derive(Debug)]\n pub enum Entry {\n@@ -28,7 +28,7 @@ pub trait Handle: fmt::Debug {\n         Self: Sized;\n     fn set_config(&mut self, config: Config);\n     fn invalidate(&mut self, path: AbsPathBuf);\n-    fn load_sync(&mut self, path: &AbsPathBuf) -> Option<Vec<u8>>;\n+    fn load_sync(&mut self, path: &AbsPath) -> Option<Vec<u8>>;\n }\n \n impl Entry {"}, {"sha": "0dc1dc2ae2fa183aad30fc6d291a472e8794e935", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3b507a007d0373a83bde203d780b860ea55ce1/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/1a3b507a007d0373a83bde203d780b860ea55ce1/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=1a3b507a007d0373a83bde203d780b860ea55ce1", "patch": "@@ -322,6 +322,8 @@ There are tree ways to feed `rust-project.json` to rust-analyzer:\n * Specify `\"rust-analyzer.linkedProjects\": [ \"path/to/rust-project.json\" ]` in the settings (and make sure that your LSP client sends settings as a part of initialize request).\n * Specify `\"rust-analyzer.linkedProjects\": [ { \"roots\": [...], \"crates\": [...] }]` inline.\n \n+Relative paths are interpreted relative to `rust-project.json` file location or (for inline JSON) relative to `rootUri`.\n+\n See https://github.com/rust-analyzer/rust-project.json-example for a small example.\n \n == Features"}]}