{"sha": "2e9139197e908435673c62a14381fbd4f8166319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOTEzOTE5N2U5MDg0MzU2NzNjNjJhMTQzODFmYmQ0ZjgxNjYzMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-23T00:36:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-23T00:36:56Z"}, "message": "Auto merge of #41559 - GuillaumeGomez:partial-eq-msg, r=estebank\n\nAdd better error message when == operator is badly used\n\nPart of #40660.\n\nWith the following code:\n\n```rust\nfn foo<T: PartialEq>(a: &T, b: T) {\n    a == b;\n}\n\nfn main() {\n    foo(&1, 1);\n}\n```\n\nIt prints:\n\n```\nerror[E0277]: the trait bound `&T: std::cmp::PartialEq<T>` is not satisfied\n --> test.rs:2:5\n  |\n2 |     a == b;\n  |     ^^^^^^ can't compare `&T` with `T`\n  |\n  = help: the trait `std::cmp::PartialEq<T>` is not implemented for `&T`\n  = help: consider adding a `where &T: std::cmp::PartialEq<T>` bound\n\nerror: aborting due to previous error\n```", "tree": {"sha": "19b77875f70eb6c04366ac3b21ae22636f21f1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b77875f70eb6c04366ac3b21ae22636f21f1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e9139197e908435673c62a14381fbd4f8166319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9139197e908435673c62a14381fbd4f8166319", "html_url": "https://github.com/rust-lang/rust/commit/2e9139197e908435673c62a14381fbd4f8166319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e9139197e908435673c62a14381fbd4f8166319/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81734e0e06d24cf580dd5352c64d10110e4d3b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/81734e0e06d24cf580dd5352c64d10110e4d3b7b", "html_url": "https://github.com/rust-lang/rust/commit/81734e0e06d24cf580dd5352c64d10110e4d3b7b"}, {"sha": "747287a2b3b6649d59cfd11be1fb32e667f71a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/747287a2b3b6649d59cfd11be1fb32e667f71a3f", "html_url": "https://github.com/rust-lang/rust/commit/747287a2b3b6649d59cfd11be1fb32e667f71a3f"}], "stats": {"total": 129, "additions": 72, "deletions": 57}, "files": [{"sha": "3c7761c6cd3bcf338373f2a5c278e5af96666048", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -559,6 +559,23 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             trait_ref.to_predicate(),\n                             post_message);\n \n+                        let unimplemented_note = self.on_unimplemented_note(trait_ref, obligation);\n+                        if let Some(ref s) = unimplemented_note {\n+                            // If it has a custom \"#[rustc_on_unimplemented]\"\n+                            // error message, let's display it as the label!\n+                            err.span_label(span, s.as_str());\n+                            err.help(&format!(\"{}the trait `{}` is not implemented for `{}`\",\n+                                              pre_message,\n+                                              trait_ref,\n+                                              trait_ref.self_ty()));\n+                        } else {\n+                            err.span_label(span,\n+                                           &*format!(\"{}the trait `{}` is not implemented for `{}`\",\n+                                                     pre_message,\n+                                                     trait_ref,\n+                                                     trait_ref.self_ty()));\n+                        }\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n                             self.predicate_can_apply(trait_ref) {\n@@ -571,21 +588,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // which is somewhat confusing.\n                             err.help(&format!(\"consider adding a `where {}` bound\",\n                                                 trait_ref.to_predicate()));\n-                        } else if let Some(s) = self.on_unimplemented_note(trait_ref, obligation) {\n-                            // If it has a custom \"#[rustc_on_unimplemented]\"\n-                            // error message, let's display it!\n-                            err.note(&s);\n-                        } else {\n+                        } else if unimplemented_note.is_none() {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n                             self.report_similar_impl_candidates(impl_candidates, &mut err);\n                         }\n \n-                        err.span_label(span,\n-                                       format!(\"{}the trait `{}` is not implemented for `{}`\",\n-                                                pre_message,\n-                                                trait_ref,\n-                                                trait_ref.self_ty()));\n                         err\n                     }\n "}, {"sha": "816d35295542785cc0c5ac9fb8c8c75299c2ca88", "filename": "src/test/compile-fail/E0277-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277-2.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -25,7 +25,6 @@ fn is_send<T: Send>() { }\n fn main() {\n     is_send::<Foo>();\n     //~^ ERROR the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n-    //~| NOTE within `Foo`, the trait `std::marker::Send` is not implemented for `*const u8`\n     //~| NOTE: `*const u8` cannot be sent between threads safely\n     //~| NOTE: required because it appears within the type `Baz`\n     //~| NOTE: required because it appears within the type `Bar`"}, {"sha": "8b34936419db587c2bf844fa54cb23069ccf38b2", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -20,7 +20,6 @@ fn some_func<T: Foo>(foo: T) {\n \n fn f(p: Path) { }\n //~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied in `std::path::Path`\n-//~| NOTE within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n //~| NOTE `[u8]` does not have a constant size known at compile-time\n //~| NOTE required because it appears within the type `std::path::Path`\n //~| NOTE all local variables must have a statically known size"}, {"sha": "4b212814ded2985249dcb8b004a70b1c2f462aa9", "filename": "src/test/compile-fail/const-unsized.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -12,25 +12,21 @@ use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Syn\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE the trait `std::marker::Sized` is not implemented for `str`\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Syn\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_BAR: str = *\"bar\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE the trait `std::marker::Sized` is not implemented for `str`\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n "}, {"sha": "8a5033e76478ba90e0347ff01578f9d25889a381", "filename": "src/test/compile-fail/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -26,15 +26,13 @@ fn send<T: Send>(_: T) {}\n fn main() {\n     send(before());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n     //~| NOTE required by `send`\n \n     send(after());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`"}, {"sha": "0df8c41ffe1a8e52ae7fa2f710305af478c78348", "filename": "src/test/compile-fail/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -42,17 +42,14 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| NOTE the trait `Index<u32>` is not implemented for `[i32]`\n     //~| NOTE trait message\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n-    //~| NOTE the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n     //~| NOTE on impl for Foo\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n-    //~| NOTE the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n     //~| NOTE on impl for Bar\n     //~| NOTE required by\n }"}, {"sha": "79021cd03ccc13e6fa12f35d6f1ab23c28338252", "filename": "src/test/compile-fail/on-unimplemented/on-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -31,7 +31,6 @@ impl Index<usize> for [i32] {\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| NOTE the trait `Index<u32>` is not implemented for `[i32]`\n     //~| NOTE a usize is required\n     //~| NOTE required by\n }"}, {"sha": "a8daef356a5ccb809565bac96259e955ece9d11a", "filename": "src/test/compile-fail/on-unimplemented/on-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -35,9 +35,8 @@ pub fn main() {\n     //~^ ERROR\n     //~^^ NOTE a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n     //~^^^ NOTE required by `collect`\n-    //~| NOTE the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n+\n     let x: String = foobar(); //~ ERROR\n     //~^ NOTE test error `std::string::String` with `u8` `_` `u32`\n     //~^^ NOTE required by `foobar`\n-    //~| NOTE the trait `Foo<u8, _, u32>` is not implemented for `std::string::String`\n }"}, {"sha": "5d30c2e982ef719e30a0894788cf32af3fa8bf4c", "filename": "src/test/compile-fail/on-unimplemented/slice-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -20,10 +20,8 @@ fn main() {\n     let x = &[1, 2, 3] as &[i32];\n     x[1i32]; //~ ERROR E0277\n              //~| NOTE slice indices are of type `usize` or ranges of `usize`\n-             //~| NOTE trait `std::slice::SliceIndex<[i32]>` is not implemented for `i32`\n              //~| NOTE required because of the requirements on the impl of `std::ops::Index<i32>`\n     x[..1i32]; //~ ERROR E0277\n                //~| NOTE slice indices are of type `usize` or ranges of `usize`\n-               //~| NOTE trait `std::slice::SliceIndex<[i32]>` is not implemented for `std::ops::RangeTo<i32>`\n                //~| NOTE requirements on the impl of `std::ops::Index<std::ops::RangeTo<i32>>`\n }"}, {"sha": "52c24473bd3cbc8a9a3cd7e81dbab4ab2da5d459", "filename": "src/test/compile-fail/partialeq_help.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fpartialeq_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Fpartialeq_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpartialeq_help.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<T: PartialEq>(a: &T, b: T) {\n+    a == b; //~ ERROR E0277\n+            //~| NOTE can't compare `&T` with `T`\n+            //~| HELP the trait `std::cmp::PartialEq<T>` is not implemented for `&T`\n+            //~| HELP consider adding a `where &T: std::cmp::PartialEq<T>` bound\n+}\n+\n+fn main() {\n+    foo(&1, 1);\n+}"}, {"sha": "2c38d8d2e28ba2e3e1f6355a79df3e80b8883d2d", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -16,51 +16,53 @@ fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n-    //~| NOTE the trait `std::marker::Sized` is not implemented for `U`\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required by `std::mem::size_of`\n+    //~| NOTE `U` does not have a constant size known at compile-time\n+    //~| HELP the trait `std::marker::Sized` is not implemented for `U`\n \n     mem::size_of::<Misc<U>>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n-    //~| NOTE the trait `std::marker::Sized` is not implemented for `U`\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required because it appears within the type `Misc<U>`\n     //~| NOTE required by `std::mem::size_of`\n+    //~| NOTE `U` does not have a constant size known at compile-time\n+    //~| HELP within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n \n     // ... even if T occurs as a type parameter\n \n     <u64 as From<T>>::from;\n     //~^ ERROR `u64: std::convert::From<T>` is not satisfied\n-    //~| NOTE the trait `std::convert::From<T>` is not implemented for `u64`\n     //~| HELP consider adding a `where u64: std::convert::From<T>` bound\n     //~| NOTE required by `std::convert::From::from`\n+    //~| NOTE the trait `std::convert::From<T>` is not implemented for `u64`\n \n     <u64 as From<<T as Iterator>::Item>>::from;\n     //~^ ERROR `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-    //~| NOTE the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented\n     //~| HELP consider adding a `where u64:\n     //~| NOTE required by `std::convert::From::from`\n+    //~| NOTE the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented\n \n     // ... but not if there are inference variables\n \n     <Misc<_> as From<T>>::from;\n     //~^ ERROR `Misc<_>: std::convert::From<T>` is not satisfied\n-    //~| NOTE the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n     //~| NOTE required by `std::convert::From::from`\n+    //~| NOTE the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n \n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n     //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n-    //~| NOTE the trait `std::marker::Sized` is not implemented for `[T]`\n     //~| NOTE `[T]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n+    //~| HELP the trait `std::marker::Sized` is not implemented for `[T]`\n \n     mem::size_of::<[&U]>();\n     //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n-    //~| NOTE the trait `std::marker::Sized` is not implemented for `[&U]`\n     //~| NOTE `[&U]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n+    //~| HELP the trait `std::marker::Sized` is not implemented for `[&U]`\n }\n \n fn main() {"}, {"sha": "08d9043f65ecd9d4a5e47b854e0629dbd149ca98", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -11,9 +11,9 @@ error[E0277]: the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n   --> $DIR/equality.rs:34:9\n    |\n 34 |         n + sum_to(n - 1)\n-   |         ^^^^^^^^^^^^^^^^^ the trait `std::ops::Add<impl Foo>` is not implemented for `u32`\n+   |         ^^^^^^^^^^^^^^^^^ no implementation for `u32 + impl Foo`\n    |\n-   = note: no implementation for `u32 + impl Foo`\n+   = help: the trait `std::ops::Add<impl Foo>` is not implemented for `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/equality.rs:53:18"}, {"sha": "773bf0593c51390f2ca205b19d14dac6425c0957", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -2,57 +2,57 @@ error[E0277]: the trait bound `{integer}: std::ops::Add<std::option::Option<{int\n   --> $DIR/binops.rs:12:5\n    |\n 12 |     1 + Some(1);\n-   |     ^^^^^^^^^^^ the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n+   |     ^^^^^^^^^^^ no implementation for `{integer} + std::option::Option<{integer}>`\n    |\n-   = note: no implementation for `{integer} + std::option::Option<{integer}>`\n+   = help: the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n \n error[E0277]: the trait bound `usize: std::ops::Sub<std::option::Option<{integer}>>` is not satisfied\n   --> $DIR/binops.rs:13:5\n    |\n 13 |     2 as usize - Some(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n+   |     ^^^^^^^^^^^^^^^^^^^^ no implementation for `usize - std::option::Option<{integer}>`\n    |\n-   = note: no implementation for `usize - std::option::Option<{integer}>`\n+   = help: the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n \n error[E0277]: the trait bound `{integer}: std::ops::Mul<()>` is not satisfied\n   --> $DIR/binops.rs:14:5\n    |\n 14 |     3 * ();\n-   |     ^^^^^^ the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n+   |     ^^^^^^ no implementation for `{integer} * ()`\n    |\n-   = note: no implementation for `{integer} * ()`\n+   = help: the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n \n error[E0277]: the trait bound `{integer}: std::ops::Div<&str>` is not satisfied\n   --> $DIR/binops.rs:15:5\n    |\n 15 |     4 / \"\";\n-   |     ^^^^^^ the trait `std::ops::Div<&str>` is not implemented for `{integer}`\n+   |     ^^^^^^ no implementation for `{integer} / &str`\n    |\n-   = note: no implementation for `{integer} / &str`\n+   = help: the trait `std::ops::Div<&str>` is not implemented for `{integer}`\n \n error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::string::String>` is not satisfied\n   --> $DIR/binops.rs:16:5\n    |\n 16 |     5 < String::new();\n-   |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::PartialEq<std::string::String>` is not implemented for `{integer}`\n+   |     ^^^^^^^^^^^^^^^^^ can't compare `{integer}` with `std::string::String`\n    |\n-   = note: can't compare `{integer}` with `std::string::String`\n+   = help: the trait `std::cmp::PartialEq<std::string::String>` is not implemented for `{integer}`\n \n error[E0277]: the trait bound `{integer}: std::cmp::PartialOrd<std::string::String>` is not satisfied\n   --> $DIR/binops.rs:16:5\n    |\n 16 |     5 < String::new();\n-   |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::PartialOrd<std::string::String>` is not implemented for `{integer}`\n+   |     ^^^^^^^^^^^^^^^^^ can't compare `{integer}` with `std::string::String`\n    |\n-   = note: can't compare `{integer}` with `std::string::String`\n+   = help: the trait `std::cmp::PartialOrd<std::string::String>` is not implemented for `{integer}`\n \n error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not satisfied\n   --> $DIR/binops.rs:17:5\n    |\n 17 |     6 == Ok(1);\n-   |     ^^^^^^^^^^ the trait `std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n+   |     ^^^^^^^^^^ can't compare `{integer}` with `std::result::Result<{integer}, _>`\n    |\n-   = note: can't compare `{integer}` with `std::result::Result<{integer}, _>`\n+   = help: the trait `std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "8853b35eb8b33d67ac4b266b14831426be5bda59", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -210,18 +210,18 @@ error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied\n   --> $DIR/cast-rfc0401.rs:63:13\n    |\n 63 |     let _ = fat_v as *const Foo;\n-   |             ^^^^^ the trait `std::marker::Sized` is not implemented for `[u8]`\n+   |             ^^^^^ `[u8]` does not have a constant size known at compile-time\n    |\n-   = note: `[u8]` does not have a constant size known at compile-time\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: required for the cast to the object type `Foo`\n \n error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n   --> $DIR/cast-rfc0401.rs:72:13\n    |\n 72 |     let _ = a as *const Foo;\n-   |             ^ the trait `std::marker::Sized` is not implemented for `str`\n+   |             ^ `str` does not have a constant size known at compile-time\n    |\n-   = note: `str` does not have a constant size known at compile-time\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: required for the cast to the object type `Foo`\n \n error: casting `&{float}` as `f32` is invalid"}, {"sha": "791b20725f3bcbb5d11ac164da22aa02812e56bf", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `I + 'static: std::marker::Sized` is not satisfied\n   --> $DIR/issue-5035-2.rs:14:8\n    |\n 14 | fn foo(_x: K) {} //~ ERROR: `I + 'static: std::marker::Sized` is not satisfied\n-   |        ^^ the trait `std::marker::Sized` is not implemented for `I + 'static`\n+   |        ^^ `I + 'static` does not have a constant size known at compile-time\n    |\n-   = note: `I + 'static` does not have a constant size known at compile-time\n+   = help: the trait `std::marker::Sized` is not implemented for `I + 'static`\n    = note: all local variables must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "44d5379648d5b7e6eceadc7bb1041f16cb107462", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -7,9 +7,9 @@ error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n 25 | |         bar(x,\n 26 | |\n 27 | |             y),\n-   | |______________^ the trait `std::ops::Add<()>` is not implemented for `u32`\n+   | |______________^ no implementation for `u32 + ()`\n    |\n-   = note: no implementation for `u32 + ()`\n+   = help: the trait `std::ops::Add<()>` is not implemented for `u32`\n \n error: aborting due to previous error\n "}]}