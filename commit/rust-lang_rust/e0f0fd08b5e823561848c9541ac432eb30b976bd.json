{"sha": "e0f0fd08b5e823561848c9541ac432eb30b976bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjBmZDA4YjVlODIzNTYxODQ4Yzk1NDFhYzQzMmViMzBiOTc2YmQ=", "commit": {"author": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-08-18T22:56:13Z"}, "committer": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-08-18T23:07:29Z"}, "message": "Correct has_root() on Redox", "tree": {"sha": "eb57e87e43eb724a62f23034aa5d95932239609a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb57e87e43eb724a62f23034aa5d95932239609a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f0fd08b5e823561848c9541ac432eb30b976bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEECYv1aaNg4jTOK4YaSSThDhmbWVkFAlmXczYACgkQSSThDhmb\nWVnYhQgAqQTVxOS0yB35PGs8GShnMGTVgTwO/KHkgeEL4z/If6w28YUZLZBxtpC+\nuo0VfwobNpVer9J/0bIvSvb6r7DnJjp2Ltkgd9h81mcBqPI0TXaOLsPkM+EkeAVg\npSCW3cTVf2rPiTiVtrbPYdXyDQUWFv3BwLYXoYVTSFq/cvK7AyNX/p9+YQ85e89a\nGJQDPxxu5YGAmqdIerqdUBuIGcqVFcOaFDKaLocTGBVe9AFiJOiwqQUQZbUv68Py\nL4RV1xhNJ6W1L57UXPlno0c4xSIIm//cXlQC07tY0/IyWDxCiaN34FAIfSmQNyI6\nGQBF6CZB8VvUp3URa8dDLqy8mO//4A==\n=4EIM\n-----END PGP SIGNATURE-----", "payload": "tree eb57e87e43eb724a62f23034aa5d95932239609a\nparent b272f6ca05e9210dbe6c605a301d5a16007f322f\nauthor Ian Douglas Scott <ian@iandouglasscott.com> 1503096973 -0700\ncommitter Ian Douglas Scott <ian@iandouglasscott.com> 1503097649 -0700\n\nCorrect has_root() on Redox\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f0fd08b5e823561848c9541ac432eb30b976bd", "html_url": "https://github.com/rust-lang/rust/commit/e0f0fd08b5e823561848c9541ac432eb30b976bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f0fd08b5e823561848c9541ac432eb30b976bd/comments", "author": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b272f6ca05e9210dbe6c605a301d5a16007f322f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b272f6ca05e9210dbe6c605a301d5a16007f322f", "html_url": "https://github.com/rust-lang/rust/commit/b272f6ca05e9210dbe6c605a301d5a16007f322f"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "5757d447c54d0d6a8ab2c4f2699a3cd11c0d7233", "filename": "src/libstd/path.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0f0fd08b5e823561848c9541ac432eb30b976bd/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f0fd08b5e823561848c9541ac432eb30b976bd/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e0f0fd08b5e823561848c9541ac432eb30b976bd", "patch": "@@ -323,6 +323,20 @@ unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n     mem::transmute(s)\n }\n \n+// Detect scheme on Redox\n+#[inline]\n+#[allow(unused_variables)]\n+fn has_scheme(s: &[u8]) -> bool {\n+    #[cfg(target_os = \"redox\")]\n+    {\n+        s.split(|b| *b == b'/').next().unwrap_or(b\"\").contains(&b':')\n+    }\n+    #[cfg(not(target_os = \"redox\"))]\n+    {\n+        false\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Cross-platform, iterator-independent parsing\n ////////////////////////////////////////////////////////////////////////////////\n@@ -605,6 +619,9 @@ pub struct Components<'a> {\n     // normalization, e.g.  \\\\server\\share == \\\\server\\share\\.\n     has_physical_root: bool,\n \n+    // For Redox\n+    has_scheme: bool,\n+\n     // The iterator is double-ended, and these two states keep track of what has\n     // been produced from either end\n     front: State,\n@@ -725,7 +742,7 @@ impl<'a> Components<'a> {\n \n     /// Is the *original* path rooted?\n     fn has_root(&self) -> bool {\n-        if self.has_physical_root {\n+        if self.has_physical_root || self.has_scheme {\n             return true;\n         }\n         if let Some(p) = self.prefix {\n@@ -1692,8 +1709,7 @@ impl Path {\n         #[cfg(target_os = \"redox\")]\n         {\n             // FIXME: Allow Redox prefixes\n-            use os::unix::ffi::OsStrExt;\n-            self.as_os_str().as_bytes().split(|b| *b == b'/').next().unwrap_or(b\"\").contains(&b':')\n+            has_scheme(self.as_u8_slice())\n         }\n     }\n \n@@ -2059,6 +2075,7 @@ impl Path {\n             path: self.as_u8_slice(),\n             prefix,\n             has_physical_root: has_physical_root(self.as_u8_slice(), prefix),\n+            has_scheme: has_scheme(self.as_u8_slice()),\n             front: State::Prefix,\n             back: State::Body,\n         }"}]}