{"sha": "40841e049a651f41e362f8dddbe509a159d318ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODQxZTA0OWE2NTFmNDFlMzYyZjhkZGRiZTUwOWExNTlkMzE4YmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-05T18:26:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-05T18:26:52Z"}, "message": "Rollup merge of #62110 - nnethercote:improve-Ztime-passes, r=Zoxc\n\nImprove -Ztime-passes\n\nTwo improvements that make `-Ztime-passes` more useful.\n\nr? @Zoxc", "tree": {"sha": "cc7857e90ed26f56544129b8f24b1ee8af163979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7857e90ed26f56544129b8f24b1ee8af163979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40841e049a651f41e362f8dddbe509a159d318ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdH5ZsCRBK7hj4Ov3rIwAAdHIIAB1TFIKwwNYor/uAdYzHgnct\n49AFBUPaXpA1Yd0x4YdY0MnQQBDEY3eHiEWqZzKpRaBF1K7iUbZRH3bK0mDyLfDG\nVskhrnPriT0Osp7yHJXkTBTmsbfj590MTYYGCvVP99dM2O2Yi3JvVAj1jJ1Qjj3C\n4gJklrPXhxK0iNGf3hrkpz5pkiTOjyxiWEpBmsLB5mfJVce7yErzGN1YQrB78SA5\n5/pv+ypbJ+Za9WQCXvJHrXgv+7GV31X85oNCqFUiFH2M83NPAYCmNomEV7lw8Gjx\nrxg2sAbED1IrXnU8xxdHksfvZQHfus1FnRiJpMrfG0LyeD/8iImFJX/zHFcd2io=\n=FDPp\n-----END PGP SIGNATURE-----\n", "payload": "tree cc7857e90ed26f56544129b8f24b1ee8af163979\nparent 485a084b45cbe03265593c502fa4c864f60961de\nparent 87b103d4a99193bf57a17866fb99596df7d31d8b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562351212 +0200\ncommitter GitHub <noreply@github.com> 1562351212 +0200\n\nRollup merge of #62110 - nnethercote:improve-Ztime-passes, r=Zoxc\n\nImprove -Ztime-passes\n\nTwo improvements that make `-Ztime-passes` more useful.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40841e049a651f41e362f8dddbe509a159d318ba", "html_url": "https://github.com/rust-lang/rust/commit/40841e049a651f41e362f8dddbe509a159d318ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40841e049a651f41e362f8dddbe509a159d318ba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485a084b45cbe03265593c502fa4c864f60961de", "url": "https://api.github.com/repos/rust-lang/rust/commits/485a084b45cbe03265593c502fa4c864f60961de", "html_url": "https://github.com/rust-lang/rust/commit/485a084b45cbe03265593c502fa4c864f60961de"}, {"sha": "87b103d4a99193bf57a17866fb99596df7d31d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b103d4a99193bf57a17866fb99596df7d31d8b", "html_url": "https://github.com/rust-lang/rust/commit/87b103d4a99193bf57a17866fb99596df7d31d8b"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "8e7936dae0976ca7563923d9531c427d6d193521", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=40841e049a651f41e362f8dddbe509a159d318ba", "patch": "@@ -170,7 +170,7 @@ pub fn time_ext<T, F>(do_it: bool, sess: Option<&Session>, what: &str, f: F) ->\n         }\n     }\n \n-    print_time_passes_entry_internal(what, dur);\n+    print_time_passes_entry(true, what, dur);\n \n     TIME_DEPTH.with(|slot| slot.set(old));\n \n@@ -182,18 +182,6 @@ pub fn print_time_passes_entry(do_it: bool, what: &str, dur: Duration) {\n         return\n     }\n \n-    let old = TIME_DEPTH.with(|slot| {\n-        let r = slot.get();\n-        slot.set(r + 1);\n-        r\n-    });\n-\n-    print_time_passes_entry_internal(what, dur);\n-\n-    TIME_DEPTH.with(|slot| slot.set(old));\n-}\n-\n-fn print_time_passes_entry_internal(what: &str, dur: Duration) {\n     let indentation = TIME_DEPTH.with(|slot| slot.get());\n \n     let mem_string = match get_resident() {"}, {"sha": "7bb2cc7c08977c0a03dd05a1f7e6225cf591437c", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=40841e049a651f41e362f8dddbe509a159d318ba", "patch": "@@ -1554,7 +1554,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n             let total_llvm_time = Instant::now().duration_since(llvm_start_time);\n             // This is the top-level timing for all of LLVM, set the time-depth\n             // to zero.\n-            set_time_depth(0);\n+            set_time_depth(1);\n             print_time_passes_entry(cgcx.time_passes,\n                                     \"LLVM passes\",\n                                     total_llvm_time);"}, {"sha": "a554bf7761c93cbfeeac7732c1b54447e231f037", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=40841e049a651f41e362f8dddbe509a159d318ba", "patch": "@@ -25,7 +25,7 @@ use rustc::ty::{self, Ty, TyCtxt, Instance};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{self, LinkagePreference};\n-use rustc::util::common::{time, print_time_passes_entry};\n+use rustc::util::common::{time, print_time_passes_entry, set_time_depth, time_depth};\n use rustc::session::config::{self, EntryFnType, Lto};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n@@ -639,9 +639,12 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Since the main thread is sometimes blocked during codegen, we keep track\n     // -Ztime-passes output manually.\n+    let time_depth = time_depth();\n+    set_time_depth(time_depth + 1);\n     print_time_passes_entry(tcx.sess.time_passes(),\n                             \"codegen to LLVM IR\",\n                             total_codegen_time);\n+    set_time_depth(time_depth);\n \n     ::rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n "}, {"sha": "e615f8a4846920915940dbbdd53e9863ffecba4c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=40841e049a651f41e362f8dddbe509a159d318ba", "patch": "@@ -37,7 +37,8 @@ use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::util::common::{time, ErrorReported, install_panic_hook};\n+use rustc::util::common::{ErrorReported, install_panic_hook, print_time_passes_entry};\n+use rustc::util::common::{set_time_depth, time};\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -53,11 +54,12 @@ use std::default::Default;\n use std::env;\n use std::ffi::OsString;\n use std::io::{self, Read, Write};\n+use std::mem;\n use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n-use std::mem;\n+use std::time::Instant;\n \n use syntax::ast;\n use syntax::source_map::FileLoader;\n@@ -71,7 +73,7 @@ pub mod pretty;\n /// Exit status code used for successful compilation and help output.\n pub const EXIT_SUCCESS: i32 = 0;\n \n-/// Exit status code used for compilation failures and  invalid flags.\n+/// Exit status code used for compilation failures and invalid flags.\n pub const EXIT_FAILURE: i32 = 1;\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n@@ -117,6 +119,18 @@ pub struct DefaultCallbacks;\n \n impl Callbacks for DefaultCallbacks {}\n \n+#[derive(Default)]\n+pub struct TimePassesCallbacks {\n+    time_passes: bool,\n+}\n+\n+impl Callbacks for TimePassesCallbacks {\n+    fn config(&mut self, config: &mut interface::Config) {\n+        self.time_passes =\n+            config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time;\n+    }\n+}\n+\n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n@@ -1168,18 +1182,24 @@ pub fn init_rustc_env_logger() {\n }\n \n pub fn main() {\n+    let start = Instant::now();\n     init_rustc_env_logger();\n+    let mut callbacks = TimePassesCallbacks::default();\n     let result = report_ices_to_stderr_if_any(|| {\n         let args = env::args_os().enumerate()\n             .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n                 early_error(ErrorOutputType::default(),\n                             &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n             }))\n             .collect::<Vec<_>>();\n-        run_compiler(&args, &mut DefaultCallbacks, None, None)\n+        run_compiler(&args, &mut callbacks, None, None)\n     }).and_then(|result| result);\n-    process::exit(match result {\n+    let exit_code = match result {\n         Ok(_) => EXIT_SUCCESS,\n         Err(_) => EXIT_FAILURE,\n-    });\n+    };\n+    // The extra `\\t` is necessary to align this label with the others.\n+    set_time_depth(0);\n+    print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n+    process::exit(exit_code);\n }"}, {"sha": "40388722bcac933aeb2006b0b5dbc9c333e0bc50", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40841e049a651f41e362f8dddbe509a159d318ba/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=40841e049a651f41e362f8dddbe509a159d318ba", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::{\n     ConstraintCategory, Local, Location,\n };\n use rustc::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n-use rustc::util::common::{self, ErrorReported};\n+use rustc::util::common::ErrorReported;\n use rustc_data_structures::binary_search_util;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -468,22 +468,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         errors_buffer: &mut Vec<Diagnostic>,\n-    ) -> Option<ClosureRegionRequirements<'tcx>> {\n-        common::time_ext(\n-            infcx.tcx.sess.time_extended(),\n-            Some(infcx.tcx.sess),\n-            &format!(\"solve_nll_region_constraints({:?})\", mir_def_id),\n-            || self.solve_inner(infcx, body, upvars, mir_def_id, errors_buffer),\n-        )\n-    }\n-\n-    fn solve_inner(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-        body: &Body<'tcx>,\n-        upvars: &[Upvar],\n-        mir_def_id: DefId,\n-        errors_buffer: &mut Vec<Diagnostic>,\n     ) -> Option<ClosureRegionRequirements<'tcx>> {\n         self.propagate_constraints(body);\n "}]}