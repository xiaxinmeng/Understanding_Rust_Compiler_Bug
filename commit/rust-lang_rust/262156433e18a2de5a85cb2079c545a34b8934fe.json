{"sha": "262156433e18a2de5a85cb2079c545a34b8934fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjE1NjQzM2UxOGEyZGU1YTg1Y2IyMDc5YzU0NWEzNGI4OTM0ZmU=", "commit": {"author": {"name": "Aaron Power", "email": "Aaronepower@users.noreply.github.com", "date": "2019-02-20T14:51:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-20T14:51:22Z"}, "message": "Update RELEASES.md", "tree": {"sha": "19bc32f15996a27a3d7c7b34cdb0040126fea1c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19bc32f15996a27a3d7c7b34cdb0040126fea1c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262156433e18a2de5a85cb2079c545a34b8934fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcbWlqCRBK7hj4Ov3rIwAAdHIIACjdCsJjnqlpTA82nAjHVn+4\nPFRF+WYcLGJbXsbDohVSCeaR1sft6H2RQ4ZAeYpvbd67+1+Z2O0yXnq4HD+6m96w\nYIpXlN1ccjGh7d/+2OarA0TR9r+9TF1171tyGmsseWu8qe72E3zQzxVH/poIalOh\nm2Hl2y1aPWn7WWhBukm0xhpezaHnEY/ARF+0ySfiFY+XfGPL4JC2EdfvU9qb6npF\nYqmBDCANA9AlaUk4cTZ6irbkw7OMXbn4no3B4OeB1S6NRafgzClXZSkei30n0969\nmBhy4BD+8xwqlPukCQrXWt6+nenG+MiUxSDBZx0h4HxqSphPZy/6+tC0byRQyTQ=\n=S19E\n-----END PGP SIGNATURE-----\n", "payload": "tree 19bc32f15996a27a3d7c7b34cdb0040126fea1c4\nparent a4964500a2a7cc680df40847267a1345090b8ed9\nauthor Aaron Power <Aaronepower@users.noreply.github.com> 1550674282 +0100\ncommitter GitHub <noreply@github.com> 1550674282 +0100\n\nUpdate RELEASES.md"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262156433e18a2de5a85cb2079c545a34b8934fe", "html_url": "https://github.com/rust-lang/rust/commit/262156433e18a2de5a85cb2079c545a34b8934fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262156433e18a2de5a85cb2079c545a34b8934fe/comments", "author": {"login": "Aaronepower", "id": 108753774, "node_id": "U_kgDOBntzbg", "avatar_url": "https://avatars.githubusercontent.com/u/108753774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaronepower", "html_url": "https://github.com/Aaronepower", "followers_url": "https://api.github.com/users/Aaronepower/followers", "following_url": "https://api.github.com/users/Aaronepower/following{/other_user}", "gists_url": "https://api.github.com/users/Aaronepower/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaronepower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaronepower/subscriptions", "organizations_url": "https://api.github.com/users/Aaronepower/orgs", "repos_url": "https://api.github.com/users/Aaronepower/repos", "events_url": "https://api.github.com/users/Aaronepower/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaronepower/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4964500a2a7cc680df40847267a1345090b8ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4964500a2a7cc680df40847267a1345090b8ed9", "html_url": "https://github.com/rust-lang/rust/commit/a4964500a2a7cc680df40847267a1345090b8ed9"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "659fa901a010187413b799a88b90aa9ef29e875a", "filename": "RELEASES.md", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/262156433e18a2de5a85cb2079c545a34b8934fe/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/262156433e18a2de5a85cb2079c545a34b8934fe/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=262156433e18a2de5a85cb2079c545a34b8934fe", "patch": "@@ -5,40 +5,44 @@ Language\n --------\n - [You can now use the `cfg(target_vendor)` attribute.][57465] E.g.\n   `#[cfg(target_vendor=\"linux\")] fn main() { println!(\"Hello Linux!\"); }`\n+- [Integer patterns such as in a match expression can now be exhaustive.][56362]\n+  E.g. You can have match statement on a `u8` that covers `0..=255` and\n+  you would no longer be required to have a `_ => unreachable!()` case. \n - [You can now have multiple patterns in `if let` and `while let`\n   expressions.][57532] You can do this with the same syntax as a `match`\n   expression. E.g.\n   ```rust\n   enum Creature {\n-    Crab(String),\n-    Person(String),\n+      Crab(String),\n+      Lobster(String),\n+      Person(String),\n   }\n \n   fn main() {\n-    let state = Creature::Crab(\"Ferris\");\n+      let state = Creature::Crab(\"Ferris\");\n \n-    if let Creature::Crab(name) | Creature::Person(name) = state {\n-      println!(\"This creature's name is: {}\", name);\n-    }\n+      if let Creature::Crab(name) | Creature::Person(name) = state {\n+        println!(\"This creature's name is: {}\", name);\n+      }\n   }\n   ```\n - [You can now have irrefutable `if let` and `while let` patterns.][57535] Using\n   this feature will by default produce a warning as this behaviour can be\n   unintuitive. E.g. `if let _ = 5 {}`\n - [You can now use `let` bindings, assignments, expression statements, and pattern destructuring in\n   const functions.][57175]\n-- [You can now specify multiple attributes in a `cfg_attr` attribute.][57332]\n-  E.g. `#[cfg_attr(all(), must_use, optimize)]`\n-- [You can now specify a specific alignment with the `#[repr(packed)]`\n-  attribute.][57049] E.g. `#[repr(packed(2))] struct Foo(i16, i32);` is a struct\n-  with an alignment of 2 bytes and a size of 6 bytes.\n-- [You can now call unsafe constant functions.][57067] E.g.\n+- [You can now call unsafe const functions.][57067] E.g.\n   ```rust\n   const unsafe fn foo() -> i32 { 5 }\n   const fn bar() -> i32 {\n     unsafe { foo() }\n   }\n   ```\n+- [You can now specify multiple attributes in a `cfg_attr` attribute.][57332]\n+  E.g. `#[cfg_attr(all(), must_use, optimize)]`\n+- [You can now specify a specific alignment with the `#[repr(packed)]`\n+  attribute.][57049] E.g. `#[repr(packed(2))] struct Foo(i16, i32);` is a struct\n+  with an alignment of 2 bytes and a size of 6 bytes.\n - [You can now import an item from a module as an `_`.][56303] This allows you to\n   import a trait's impls, and not have the name in the namespace. E.g.\n   ```rust\n@@ -64,13 +68,17 @@ Compiler\n \n Libraries\n ---------\n-- [The functions `overflowing_{add, sub, mul, shl, shr}` are now constant\n+- [The functions `overflowing_{add, sub, mul, shl, shr}` are now `const`\n   functions for all numeric types.][57566]\n-- [The `get` method for all `NonZero` types is now constant.][57167]\n+- [The functions `rotate_left`, `rotate_right`, and `wrapping_{add, sub, mul, shl, shr}`\n+  are now `const` functions for all numeric types.][57105]\n+- [The functions `is_positive` and `is_negative` are now `const` functions for\n+  all signed numeric types.][57105]\n+- [The `get` method for all `NonZero` types is now `const`.][57167]\n - [The functions `count_ones`, `count_zeros`, `leading_zeros`, `trailing_zeros`,\n-  `swap_bytes`, `from_be`, `from_le`, `to_be`, `to_le` are now const for all\n+  `swap_bytes`, `from_be`, `from_le`, `to_be`, `to_le` are now `const` for all\n   numeric types.][57234]\n-- [`Ipv4Addr::new` is now a const function][57234]\n+- [`Ipv4Addr::new` is now a `const` function][57234]\n \n Stabilized APIs\n ---------------\n@@ -80,17 +88,25 @@ Stabilized APIs\n - [`Result::transpose`]\n - [`convert::identity`]\n - [`pin::Pin`]\n+- [`marker::Unpin`]\n+- [`marker::PhantomPinned`]\n - [`Vec::resize_with`]\n - [`VecDeque::resize_with`]\n - [`Duration::as_millis`]\n - [`Duration::as_micros`]\n - [`Duration::as_nanos`]\n \n+\n Cargo\n -----\n - [Cargo should now rebuild a crate if a file was modified during the initial\n   build.][cargo/6484]\n \n+Compatibility Notes\n+-------------------\n+- The functions `str::{trim_left, trim_right, trim_left_matches, trim_right_matches}`\n+  are now offically deprecated, and their usage will now produce a warning. Please use the \n+  `str::{trim_start, trim_end, trim_start_matches, trim_end_matches}` functions instead.\n \n [57615]: https://github.com/rust-lang/rust/pull/57615/\n [57465]: https://github.com/rust-lang/rust/pull/57465/\n@@ -110,18 +126,21 @@ Cargo\n [56303]: https://github.com/rust-lang/rust/pull/56303/\n [56351]: https://github.com/rust-lang/rust/pull/56351/\n [55982]: https://github.com/rust-lang/rust/pull/55982/\n+[57105]: https://github.com/rust-lang/rust/pull/57105\n [cargo/6484]: https://github.com/rust-lang/cargo/pull/6484/\n-[`unix::FileExt::read_exact_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#read_exact_at\n-[`unix::FileExt::write_exact_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#write_exact_at\n-[`Option::transpose`]: https://doc.rust-lang.org/std/option/enum.Option.html#transpose\n-[`Result::transpose`]: https://doc.rust-lang.org/std/result/enum.Result.html#transpose\n+[`unix::FileExt::read_exact_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.read_exact_at\n+[`unix::FileExt::write_exact_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.write_exact_at\n+[`Option::transpose`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose\n+[`Result::transpose`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose\n [`convert::identity`]: https://doc.rust-lang.org/std/convert/fn.identity.html\n [`pin::Pin`]: https://doc.rust-lang.org/std/pin/struct.Pin.html\n-[`Vec::resize_with`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#resize_with\n-[`VecDeque::resize_with`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#resize_with\n-[`Duration::as_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#as_millis\n-[`Duration::as_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#as_micros\n-[`Duration::as_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#as_millis\n+[`marker::Unpin`]: https://doc.rust-lang.org/stable/std/marker/trait.Unpin.html\n+[`marker::PhantomPinned`]: https://doc.rust-lang.org/nightly/std/marker/struct.PhantomPinned.html\n+[`Vec::resize_with`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize_with\n+[`VecDeque::resize_with`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.resize_with\n+[`Duration::as_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_millis\n+[`Duration::as_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_micros\n+[`Duration::as_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_nanos\n [platform-support]: https://forge.rust-lang.org/platform-support.html\n \n Version 1.32.0 (2019-01-17)"}]}