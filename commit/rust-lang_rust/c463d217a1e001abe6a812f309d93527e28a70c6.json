{"sha": "c463d217a1e001abe6a812f309d93527e28a70c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjNkMjE3YTFlMDAxYWJlNmE4MTJmMzA5ZDkzNTI3ZTI4YTcwYzY=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-07T10:18:47Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-07T10:18:47Z"}, "message": "Add names for diagnostics and add a possibility to disable them", "tree": {"sha": "e72e74fe56971568b4b92ee4c5a38ea0bba3c844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e72e74fe56971568b4b92ee4c5a38ea0bba3c844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c463d217a1e001abe6a812f309d93527e28a70c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c463d217a1e001abe6a812f309d93527e28a70c6", "html_url": "https://github.com/rust-lang/rust/commit/c463d217a1e001abe6a812f309d93527e28a70c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c463d217a1e001abe6a812f309d93527e28a70c6/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d507270c7d915ef0177feca7b6745d95169ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d507270c7d915ef0177feca7b6745d95169ac8", "html_url": "https://github.com/rust-lang/rust/commit/f1d507270c7d915ef0177feca7b6745d95169ac8"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "1d28c24e888876893826fc2ad29ffce9a400212a", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c463d217a1e001abe6a812f309d93527e28a70c6/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c463d217a1e001abe6a812f309d93527e28a70c6/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=c463d217a1e001abe6a812f309d93527e28a70c6", "patch": "@@ -15,6 +15,9 @@ pub struct UnresolvedModule {\n }\n \n impl Diagnostic for UnresolvedModule {\n+    fn name(&self) -> String {\n+        \"unresolved-module\".to_string()\n+    }\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }"}, {"sha": "bf9fb081aae5bbce53ebd3e24952906f3f6d12a1", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c463d217a1e001abe6a812f309d93527e28a70c6/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c463d217a1e001abe6a812f309d93527e28a70c6/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=c463d217a1e001abe6a812f309d93527e28a70c6", "patch": "@@ -14,13 +14,14 @@\n //! subsystem provides a separate, non-query-based API which can walk all stored\n //! values and transform them into instances of `Diagnostic`.\n \n-use std::{any::Any, fmt};\n+use std::{any::Any, collections::HashSet, fmt};\n \n use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n \n use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n+    fn name(&self) -> String;\n     fn message(&self) -> String;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n@@ -49,10 +50,16 @@ pub struct DiagnosticSink<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n     filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n     default_callback: Box<dyn FnMut(&dyn Diagnostic) + 'a>,\n+    disabled_diagnostics: HashSet<String>,\n }\n \n impl<'a> DiagnosticSink<'a> {\n     pub fn push(&mut self, d: impl Diagnostic) {\n+        if self.disabled_diagnostics.contains(&d.name()) {\n+            // This diagnostic is disabled, ignore it completely.\n+            return;\n+        }\n+\n         let d: &dyn Diagnostic = &d;\n         self._push(d);\n     }\n@@ -76,11 +83,12 @@ impl<'a> DiagnosticSink<'a> {\n pub struct DiagnosticSinkBuilder<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n     filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n+    disabled_diagnostics: HashSet<String>,\n }\n \n impl<'a> DiagnosticSinkBuilder<'a> {\n     pub fn new() -> Self {\n-        Self { callbacks: Vec::new(), filters: Vec::new() }\n+        Self { callbacks: Vec::new(), filters: Vec::new(), disabled_diagnostics: HashSet::new() }\n     }\n \n     pub fn filter<F: FnMut(&dyn Diagnostic) -> bool + 'a>(mut self, cb: F) -> Self {\n@@ -100,11 +108,17 @@ impl<'a> DiagnosticSinkBuilder<'a> {\n         self\n     }\n \n+    pub fn disable_diagnostic(mut self, diagnostic: impl Into<String>) -> Self {\n+        self.disabled_diagnostics.insert(diagnostic.into());\n+        self\n+    }\n+\n     pub fn build<F: FnMut(&dyn Diagnostic) + 'a>(self, default_callback: F) -> DiagnosticSink<'a> {\n         DiagnosticSink {\n             callbacks: self.callbacks,\n             filters: self.filters,\n             default_callback: Box::new(default_callback),\n+            disabled_diagnostics: self.disabled_diagnostics,\n         }\n     }\n }"}, {"sha": "0b3e16ae7aed9cbca88593431891b3f56d140879", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c463d217a1e001abe6a812f309d93527e28a70c6/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c463d217a1e001abe6a812f309d93527e28a70c6/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=c463d217a1e001abe6a812f309d93527e28a70c6", "patch": "@@ -33,6 +33,10 @@ pub struct NoSuchField {\n }\n \n impl Diagnostic for NoSuchField {\n+    fn name(&self) -> String {\n+        \"no-such-field\".to_string()\n+    }\n+\n     fn message(&self) -> String {\n         \"no such field\".to_string()\n     }\n@@ -64,6 +68,9 @@ pub struct MissingFields {\n }\n \n impl Diagnostic for MissingFields {\n+    fn name(&self) -> String {\n+        \"missing-structure-fields\".to_string()\n+    }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n@@ -97,6 +104,9 @@ pub struct MissingPatFields {\n }\n \n impl Diagnostic for MissingPatFields {\n+    fn name(&self) -> String {\n+        \"missing-pat-fields\".to_string()\n+    }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n@@ -120,6 +130,9 @@ pub struct MissingMatchArms {\n }\n \n impl Diagnostic for MissingMatchArms {\n+    fn name(&self) -> String {\n+        \"missing-match-arm\".to_string()\n+    }\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n@@ -138,6 +151,9 @@ pub struct MissingOkInTailExpr {\n }\n \n impl Diagnostic for MissingOkInTailExpr {\n+    fn name(&self) -> String {\n+        \"missing-ok-in-tail-expr\".to_string()\n+    }\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n@@ -166,6 +182,9 @@ pub struct BreakOutsideOfLoop {\n }\n \n impl Diagnostic for BreakOutsideOfLoop {\n+    fn name(&self) -> String {\n+        \"break-outside-of-loop\".to_string()\n+    }\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n     }\n@@ -194,6 +213,9 @@ pub struct MissingUnsafe {\n }\n \n impl Diagnostic for MissingUnsafe {\n+    fn name(&self) -> String {\n+        \"missing-unsafe\".to_string()\n+    }\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n@@ -224,6 +246,9 @@ pub struct MismatchedArgCount {\n }\n \n impl Diagnostic for MismatchedArgCount {\n+    fn name(&self) -> String {\n+        \"mismatched-arg-count\".to_string()\n+    }\n     fn message(&self) -> String {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };\n         format!(\"Expected {} argument{}, found {}\", self.expected, s, self.found)"}]}