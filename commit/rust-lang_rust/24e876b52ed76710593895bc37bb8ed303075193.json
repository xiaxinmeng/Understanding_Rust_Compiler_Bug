{"sha": "24e876b52ed76710593895bc37bb8ed303075193", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZTg3NmI1MmVkNzY3MTA1OTM4OTViYzM3YmI4ZWQzMDMwNzUxOTM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-05T00:03:37Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-05T00:03:37Z"}, "message": "Intern more `TypeRef`s in generics\n\nSaves ~3 MB", "tree": {"sha": "c624f31447726b83b381067d2effc1e8849fd4a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c624f31447726b83b381067d2effc1e8849fd4a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24e876b52ed76710593895bc37bb8ed303075193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24e876b52ed76710593895bc37bb8ed303075193", "html_url": "https://github.com/rust-lang/rust/commit/24e876b52ed76710593895bc37bb8ed303075193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24e876b52ed76710593895bc37bb8ed303075193/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e09a4a54c75312aeaac04577f2d0e067463ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e09a4a54c75312aeaac04577f2d0e067463ab6", "html_url": "https://github.com/rust-lang/rust/commit/19e09a4a54c75312aeaac04577f2d0e067463ab6"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "e02ac2c2f32192996c85a603961a5e73a457bac0", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=24e876b52ed76710593895bc37bb8ed303075193", "patch": "@@ -18,6 +18,7 @@ use crate::{\n     child_by_source::ChildBySource,\n     db::DefDatabase,\n     dyn_map::DynMap,\n+    intern::Interned,\n     keys,\n     src::{HasChildSource, HasSource},\n     type_ref::{LifetimeRef, TypeBound, TypeRef},\n@@ -29,7 +30,7 @@ use crate::{\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct TypeParamData {\n     pub name: Option<Name>,\n-    pub default: Option<TypeRef>,\n+    pub default: Option<Interned<TypeRef>>,\n     pub provenance: TypeParamProvenance,\n }\n \n@@ -43,7 +44,7 @@ pub struct LifetimeParamData {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct ConstParamData {\n     pub name: Name,\n-    pub ty: TypeRef,\n+    pub ty: Interned<TypeRef>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -75,7 +76,7 @@ pub enum WherePredicate {\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum WherePredicateTypeTarget {\n-    TypeRef(TypeRef),\n+    TypeRef(Interned<TypeRef>),\n     /// For desugared where predicates that can directly refer to a type param.\n     TypeParam(LocalTypeParamId),\n }\n@@ -256,7 +257,8 @@ impl GenericParams {\n         for type_param in params.type_params() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n-            let default = type_param.default_type().map(|it| TypeRef::from_ast(lower_ctx, it));\n+            let default =\n+                type_param.default_type().map(|it| Interned::new(TypeRef::from_ast(lower_ctx, it)));\n             let param = TypeParamData {\n                 name: Some(name.clone()),\n                 default,\n@@ -280,7 +282,7 @@ impl GenericParams {\n         for const_param in params.const_params() {\n             let name = const_param.name().map_or_else(Name::missing, |it| it.as_name());\n             let ty = const_param.ty().map_or(TypeRef::Error, |it| TypeRef::from_ast(lower_ctx, it));\n-            let param = ConstParamData { name, ty };\n+            let param = ConstParamData { name, ty: Interned::new(ty) };\n             let param_id = self.consts.alloc(param);\n             sm.const_params.insert(param_id, const_param.clone());\n         }\n@@ -334,11 +336,11 @@ impl GenericParams {\n             (Either::Left(type_ref), bound) => match hrtb_lifetimes {\n                 Some(hrtb_lifetimes) => WherePredicate::ForLifetime {\n                     lifetimes: hrtb_lifetimes.clone(),\n-                    target: WherePredicateTypeTarget::TypeRef(type_ref),\n+                    target: WherePredicateTypeTarget::TypeRef(Interned::new(type_ref)),\n                     bound,\n                 },\n                 None => WherePredicate::TypeBound {\n-                    target: WherePredicateTypeTarget::TypeRef(type_ref),\n+                    target: WherePredicateTypeTarget::TypeRef(Interned::new(type_ref)),\n                     bound,\n                 },\n             },"}, {"sha": "f9c8328f06463bedaa7c1225ab81105bddb03fb3", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=24e876b52ed76710593895bc37bb8ed303075193", "patch": "@@ -122,7 +122,7 @@ impl ModPath {\n pub struct Path {\n     /// Type based path like `<T>::foo`.\n     /// Note that paths like `<Type as Trait>::foo` are desugard to `Trait::<Self=Type>::foo`.\n-    type_anchor: Option<Box<TypeRef>>,\n+    type_anchor: Option<Interned<TypeRef>>,\n     mod_path: Interned<ModPath>,\n     /// Invariant: the same len as `self.mod_path.segments`\n     generic_args: Vec<Option<Arc<GenericArgs>>>,"}, {"sha": "7b29d9d4fbad282781da6b315b34d86913fb1db8", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=24e876b52ed76710593895bc37bb8ed303075193", "patch": "@@ -69,7 +69,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                 match trait_ref {\n                     // <T>::foo\n                     None => {\n-                        type_anchor = Some(Box::new(self_type));\n+                        type_anchor = Some(Interned::new(self_type));\n                         kind = PathKind::Plain;\n                     }\n                     // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo"}, {"sha": "c85c328af003132d4bdd5e01094b7c88d4e2a820", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e876b52ed76710593895bc37bb8ed303075193/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=24e876b52ed76710593895bc37bb8ed303075193", "patch": "@@ -32,11 +32,10 @@ fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n         .filter_map(|pred| match pred {\n             WherePredicate::ForLifetime { target, bound, .. }\n             | WherePredicate::TypeBound { target, bound } => match target {\n-                WherePredicateTypeTarget::TypeRef(TypeRef::Path(p))\n-                    if p == &Path::from(name![Self]) =>\n-                {\n-                    bound.as_path()\n-                }\n+                WherePredicateTypeTarget::TypeRef(type_ref) => match &**type_ref {\n+                    TypeRef::Path(p) if p == &Path::from(name![Self]) => bound.as_path(),\n+                    _ => None,\n+                },\n                 WherePredicateTypeTarget::TypeParam(local_id) if Some(*local_id) == trait_self => {\n                     bound.as_path()\n                 }"}]}