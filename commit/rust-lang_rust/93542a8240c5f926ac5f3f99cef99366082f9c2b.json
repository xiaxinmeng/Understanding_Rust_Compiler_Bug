{"sha": "93542a8240c5f926ac5f3f99cef99366082f9c2b", "node_id": "C_kwDOAAsO6NoAKDkzNTQyYTgyNDBjNWY5MjZhYzVmM2Y5OWNlZjk5MzY2MDgyZjljMmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-20T14:12:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-20T14:12:29Z"}, "message": "Auto merge of #91066 - camelid:externs, r=jyn514,GuillaumeGomez\n\nrustdoc: Remove `Crate.externs` and compute on-demand instead\n\nr? `@GuillaumeGomez`\ncc `@jyn514`", "tree": {"sha": "a0afccea6ee27535ae8d9f731872b1e30d09e5e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0afccea6ee27535ae8d9f731872b1e30d09e5e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93542a8240c5f926ac5f3f99cef99366082f9c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93542a8240c5f926ac5f3f99cef99366082f9c2b", "html_url": "https://github.com/rust-lang/rust/commit/93542a8240c5f926ac5f3f99cef99366082f9c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93542a8240c5f926ac5f3f99cef99366082f9c2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d789740b09002e3d2be3ab1cf53fdca3995034c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d789740b09002e3d2be3ab1cf53fdca3995034c", "html_url": "https://github.com/rust-lang/rust/commit/3d789740b09002e3d2be3ab1cf53fdca3995034c"}, {"sha": "bbc3825d26c0cdef066ca6aa665f85241befc3d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc3825d26c0cdef066ca6aa665f85241befc3d0", "html_url": "https://github.com/rust-lang/rust/commit/bbc3825d26c0cdef066ca6aa665f85241befc3d0"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "bb5597b5758d2657432ef613465a5ac4414d00dc", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=93542a8240c5f926ac5f3f99cef99366082f9c2b", "patch": "@@ -117,7 +117,6 @@ impl From<DefId> for ItemId {\n #[derive(Clone, Debug)]\n crate struct Crate {\n     crate module: Item,\n-    crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     /// Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n@@ -126,7 +125,7 @@ crate struct Crate {\n \n // `Crate` is frequently moved by-value. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Crate, 104);\n+rustc_data_structures::static_assert_size!(Crate, 80);\n \n impl Crate {\n     crate fn name(&self, tcx: TyCtxt<'_>) -> Symbol {"}, {"sha": "9860b21e0a971e6fe93ca23cf3023bbda2e0bb15", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=93542a8240c5f926ac5f3f99cef99366082f9c2b", "patch": "@@ -7,6 +7,7 @@ use crate::clean::{\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n+use crate::visit_lib::LibEmbargoVisitor;\n \n use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n@@ -24,13 +25,9 @@ use std::mem;\n mod tests;\n \n crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n-    use crate::visit_lib::LibEmbargoVisitor;\n-\n     let module = crate::visit_ast::RustdocVisitor::new(cx).visit();\n \n-    let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates(()) {\n-        externs.push(ExternalCrate { crate_num: cnum });\n         // Analyze doc-reachability for extern items\n         LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n@@ -76,13 +73,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         }));\n     }\n \n-    Crate {\n-        module,\n-        externs,\n-        primitives,\n-        external_traits: cx.external_traits.clone(),\n-        collapsed: false,\n-    }\n+    Crate { module, primitives, external_traits: cx.external_traits.clone(), collapsed: false }\n }\n \n fn external_generic_args("}, {"sha": "c58310947d2825e934acdbb9148a10c41f968482", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=93542a8240c5f926ac5f3f99cef99366082f9c2b", "patch": "@@ -508,14 +508,12 @@ crate fn run_global_ctxt(\n         rustc_errors::FatalError.raise();\n     }\n \n-    let render_options = ctxt.render_options;\n-    let mut cache = ctxt.cache;\n-    krate = tcx.sess.time(\"create_format_cache\", || cache.populate(krate, tcx, &render_options));\n+    krate = tcx.sess.time(\"create_format_cache\", || Cache::populate(&mut ctxt, krate));\n \n     // The main crate doc comments are always collapsed.\n     krate.collapsed = true;\n \n-    (krate, render_options, cache)\n+    (krate, ctxt.render_options, ctxt.cache)\n }\n \n /// Due to <https://github.com/rust-lang/rust/pull/73566>,"}, {"sha": "db2b836de86e459b8b318425e5bb952418304094", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93542a8240c5f926ac5f3f99cef99366082f9c2b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=93542a8240c5f926ac5f3f99cef99366082f9c2b", "patch": "@@ -6,8 +6,8 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n-use crate::clean::{self, ItemId, PrimitiveType};\n-use crate::config::RenderOptions;\n+use crate::clean::{self, ExternalCrate, ItemId, PrimitiveType};\n+use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n@@ -136,46 +136,47 @@ impl Cache {\n \n     /// Populates the `Cache` with more data. The returned `Crate` will be missing some data that was\n     /// in `krate` due to the data being moved into the `Cache`.\n-    crate fn populate(\n-        &mut self,\n-        mut krate: clean::Crate,\n-        tcx: TyCtxt<'_>,\n-        render_options: &RenderOptions,\n-    ) -> clean::Crate {\n+    crate fn populate(cx: &mut DocContext<'_>, mut krate: clean::Crate) -> clean::Crate {\n+        let tcx = cx.tcx;\n+\n         // Crawl the crate to build various caches used for the output\n-        debug!(?self.crate_version);\n-        self.traits = krate.external_traits.take();\n-        let RenderOptions { extern_html_root_takes_precedence, output: dst, .. } = render_options;\n+        debug!(?cx.cache.crate_version);\n+        cx.cache.traits = krate.external_traits.take();\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n-        for &e in &krate.externs {\n+        for &crate_num in cx.tcx.crates(()) {\n+            let e = ExternalCrate { crate_num };\n+\n             let name = e.name(tcx);\n+            let render_options = &cx.render_options;\n             let extern_url =\n                 render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n-            let location = e.location(extern_url, *extern_html_root_takes_precedence, dst, tcx);\n-            self.extern_locations.insert(e.crate_num, location);\n-            self.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n+            let extern_url_takes_precedence = render_options.extern_html_root_takes_precedence;\n+            let dst = &render_options.output;\n+            let location = e.location(extern_url, extern_url_takes_precedence, dst, tcx);\n+            cx.cache.extern_locations.insert(e.crate_num, location);\n+            cx.cache.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n         }\n \n         // FIXME: avoid this clone (requires implementing Default manually)\n-        self.primitive_locations = PrimitiveType::primitive_locations(tcx).clone();\n-        for (prim, &def_id) in &self.primitive_locations {\n+        cx.cache.primitive_locations = PrimitiveType::primitive_locations(tcx).clone();\n+        for (prim, &def_id) in &cx.cache.primitive_locations {\n             let crate_name = tcx.crate_name(def_id.krate);\n             // Recall that we only allow primitive modules to be at the root-level of the crate.\n             // If that restriction is ever lifted, this will have to include the relative paths instead.\n-            self.external_paths.insert(\n+            cx.cache.external_paths.insert(\n                 def_id,\n                 (vec![crate_name.to_string(), prim.as_sym().to_string()], ItemType::Primitive),\n             );\n         }\n \n-        krate = CacheBuilder { tcx, cache: self }.fold_crate(krate);\n+        krate = CacheBuilder { tcx, cache: &mut cx.cache }.fold_crate(krate);\n \n-        for (trait_did, dids, impl_) in self.orphan_trait_impls.drain(..) {\n-            if self.traits.contains_key(&trait_did) {\n+        for (trait_did, dids, impl_) in cx.cache.orphan_trait_impls.drain(..) {\n+            if cx.cache.traits.contains_key(&trait_did) {\n                 for did in dids {\n-                    self.impls.entry(did).or_default().push(impl_.clone());\n+                    cx.cache.impls.entry(did).or_default().push(impl_.clone());\n                 }\n             }\n         }"}]}