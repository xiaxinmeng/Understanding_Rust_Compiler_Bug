{"sha": "b392781edc145d1d1592c6d1bba4c33fbc1f51d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOTI3ODFlZGMxNDVkMWQxNTkyYzZkMWJiYTRjMzNmYmMxZjUxZDU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-02T20:42:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:08Z"}, "message": "def_collector: `parent_def` is no longer optional", "tree": {"sha": "d3833624696b9f707ae9c7c2205b19569afb1283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3833624696b9f707ae9c7c2205b19569afb1283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b392781edc145d1d1592c6d1bba4c33fbc1f51d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b392781edc145d1d1592c6d1bba4c33fbc1f51d5", "html_url": "https://github.com/rust-lang/rust/commit/b392781edc145d1d1592c6d1bba4c33fbc1f51d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b392781edc145d1d1592c6d1bba4c33fbc1f51d5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2729460661c9bafb2e1862ddd0a63f75ae553e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2729460661c9bafb2e1862ddd0a63f75ae553e7", "html_url": "https://github.com/rust-lang/rust/commit/e2729460661c9bafb2e1862ddd0a63f75ae553e7"}], "stats": {"total": 48, "additions": 17, "deletions": 31}, "files": [{"sha": "6b93bd96a2718e435707c579835d9882ac52e419", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b392781edc145d1d1592c6d1bba4c33fbc1f51d5/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b392781edc145d1d1592c6d1bba4c33fbc1f51d5/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=b392781edc145d1d1592c6d1bba4c33fbc1f51d5", "patch": "@@ -11,13 +11,13 @@ use syntax_pos::Span;\n /// Creates `DefId`s for nodes in the AST.\n pub struct DefCollector<'a> {\n     definitions: &'a mut Definitions,\n-    parent_def: Option<DefIndex>,\n+    parent_def: DefIndex,\n     expansion: Mark,\n }\n \n impl<'a> DefCollector<'a> {\n     pub fn new(definitions: &'a mut Definitions, expansion: Mark) -> Self {\n-        let parent_def = Some(definitions.invocation_parent(expansion));\n+        let parent_def = definitions.invocation_parent(expansion);\n         DefCollector { definitions, parent_def, expansion }\n     }\n \n@@ -26,17 +26,15 @@ impl<'a> DefCollector<'a> {\n                   data: DefPathData,\n                   span: Span)\n                   -> DefIndex {\n-        let parent_def = self.parent_def.unwrap();\n+        let parent_def = self.parent_def;\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n-        self.definitions\n-            .create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n+        self.definitions.create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n     }\n \n     pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n-        let parent = self.parent_def;\n-        self.parent_def = Some(parent_def);\n+        let orig_parent_def = std::mem::replace(&mut self.parent_def, parent_def);\n         f(self);\n-        self.parent_def = parent;\n+        self.parent_def = orig_parent_def;\n     }\n \n     fn visit_async_fn(\n@@ -77,7 +75,7 @@ impl<'a> DefCollector<'a> {\n     }\n \n     fn visit_macro_invoc(&mut self, id: NodeId) {\n-        self.definitions.set_invocation_parent(id.placeholder_to_mark(), self.parent_def.unwrap());\n+        self.definitions.set_invocation_parent(id.placeholder_to_mark(), self.parent_def);\n     }\n }\n \n@@ -250,36 +248,24 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_expr(&mut self, expr: &'a Expr) {\n-        let parent_def = self.parent_def;\n-\n-        match expr.node {\n+        let parent_def = match expr.node {\n             ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id),\n             ExprKind::Closure(_, asyncness, ..) => {\n-                let closure_def = self.create_def(expr.id,\n-                                          DefPathData::ClosureExpr,\n-                                          expr.span);\n-                self.parent_def = Some(closure_def);\n-\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n-                if let IsAsync::Async { closure_id, .. } = asyncness {\n-                    let async_def = self.create_def(closure_id,\n-                                                    DefPathData::ClosureExpr,\n-                                                    expr.span);\n-                    self.parent_def = Some(async_def);\n+                let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);\n+                match asyncness {\n+                    IsAsync::Async { closure_id, .. } =>\n+                        self.create_def(closure_id, DefPathData::ClosureExpr, expr.span),\n+                    IsAsync::NotAsync => closure_def,\n                 }\n             }\n-            ExprKind::Async(_, async_id, _) => {\n-                let async_def = self.create_def(async_id,\n-                                                DefPathData::ClosureExpr,\n-                                                expr.span);\n-                self.parent_def = Some(async_def);\n-            }\n-            _ => {}\n+            ExprKind::Async(_, async_id, _) =>\n+                self.create_def(async_id, DefPathData::ClosureExpr, expr.span),\n+            _ => self.parent_def,\n         };\n \n-        visit::walk_expr(self, expr);\n-        self.parent_def = parent_def;\n+        self.with_parent(parent_def, |this| visit::walk_expr(this, expr));\n     }\n \n     fn visit_ty(&mut self, ty: &'a Ty) {"}]}