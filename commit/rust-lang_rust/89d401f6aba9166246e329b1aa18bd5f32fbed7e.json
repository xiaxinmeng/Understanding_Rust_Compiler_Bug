{"sha": "89d401f6aba9166246e329b1aa18bd5f32fbed7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDQwMWY2YWJhOTE2NjI0NmUzMjliMWFhMThiZDVmMzJmYmVkN2U=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-01T21:35:46Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:07Z"}, "message": "Address nits", "tree": {"sha": "750435bc97b3d390ba918ca002fc1bce507f8e46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/750435bc97b3d390ba918ca002fc1bce507f8e46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d401f6aba9166246e329b1aa18bd5f32fbed7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d401f6aba9166246e329b1aa18bd5f32fbed7e", "html_url": "https://github.com/rust-lang/rust/commit/89d401f6aba9166246e329b1aa18bd5f32fbed7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d401f6aba9166246e329b1aa18bd5f32fbed7e/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e7aa79f5280047a34e47628fb50c3eb3c898ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e7aa79f5280047a34e47628fb50c3eb3c898ad", "html_url": "https://github.com/rust-lang/rust/commit/15e7aa79f5280047a34e47628fb50c3eb3c898ad"}], "stats": {"total": 85, "additions": 0, "deletions": 85}, "files": [{"sha": "b80551c9972752d0149b163a8c216b136322bf2f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89d401f6aba9166246e329b1aa18bd5f32fbed7e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d401f6aba9166246e329b1aa18bd5f32fbed7e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=89d401f6aba9166246e329b1aa18bd5f32fbed7e", "patch": "@@ -1567,7 +1567,6 @@ pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n                 };\n \n                 // Keep going, outside-in.\n-                //\n                 let fully_expanded = fld.fold_ty(expanded_ty);\n                 fld.cx.bt_pop();\n "}, {"sha": "a5eb37b8cc3c6a6b47b0fc17a1be09f34317c8ad", "filename": "src/test/run-pass/type-macros.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Ftest%2Frun-pass%2Ftype-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Ftest%2Frun-pass%2Ftype-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros.rs?ref=15e7aa79f5280047a34e47628fb50c3eb3c898ad", "patch": "@@ -1,84 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::ops::*;\n-\n-#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n-struct Nil; // empty HList\n-#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n-struct Cons<H, T: HList>(H, T); // cons cell of HList\n-\n-// trait to classify valid HLists\n-trait HList {}\n-impl HList for Nil {}\n-impl<H, T: HList> HList for Cons<H, T> {}\n-\n-// term-level macro for HLists\n-macro_rules! hlist {\n-        {} => { Nil };\n-            { $head:expr } => { Cons($head, Nil) };\n-                { $head:expr, $($tail:expr),* } => { Cons($head, hlist!($($tail),*)) };\n-}\n-\n-// type-level macro for HLists\n-macro_rules! HList {\n-        {} => { Nil };\n-            { $head:ty } => { Cons<$head, Nil> };\n-                { $head:ty, $($tail:ty),* } => { Cons<$head, HList!($($tail),*)> };\n-}\n-\n-// nil case for HList append\n-impl<Ys: HList> Add<Ys> for Nil {\n-        type Output = Ys;\n-\n-            fn add(self, rhs: Ys) -> Ys {\n-                        rhs\n-                                }\n-}\n-\n-// cons case for HList append\n-impl<Rec: HList + Sized, X, Xs: HList, Ys: HList> Add<Ys> for Cons<X, Xs> where\n-    Xs: Add<Ys, Output = Rec>,\n-{\n-        type Output = Cons<X, Rec>;\n-\n-            fn add(self, rhs: Ys) -> Cons<X, Rec> {\n-                        Cons(self.0, self.1 + rhs)\n-                                }\n-}\n-\n-// type macro Expr allows us to expand the + operator appropriately\n-macro_rules! Expr {\n-        { ( $($LHS:tt)+ ) } => { Expr!($($LHS)+) };\n-        { HList ! [ $($LHS:tt)* ] + $($RHS:tt)+ } => {\n-            <Expr!(HList![$($LHS)*]) as Add<Expr!($($RHS)+)>>::Output\n-        };\n-        { $LHS:tt + $($RHS:tt)+ } => { <Expr!($LHS) as Add<Expr!($($RHS)+)>>::Output };\n-        { $LHS:ty } => { $LHS };\n-}\n-\n-// test demonstrating term level `xs + ys` and type level `Expr!(Xs + Ys)`\n-fn main() {\n-    fn aux<Xs: HList, Ys: HList>(xs: Xs, ys: Ys) -> Expr!(Xs + Ys)\n-        where Xs: Add<Ys> {\n-            xs + ys\n-        }\n-\n-    let xs: HList![&str, bool, Vec<u64>] = hlist![\"foo\", false, vec![]];\n-    let ys: HList![u64, [u8; 3], ()] = hlist![0, [0, 1, 2], ()];\n-\n-    // demonstrate recursive expansion of Expr!\n-    let zs: Expr!((HList![&str] + HList![bool] + HList![Vec<u64>]) +\n-                  (HList![u64] + HList![[u8; 3], ()]) +\n-                  HList![])\n-        = aux(xs, ys);\n-    assert_eq!(zs, hlist![\"foo\", false, vec![], 0, [0, 1, 2], ()])\n-}\n-"}]}