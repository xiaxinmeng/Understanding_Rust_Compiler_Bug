{"sha": "3eb84341506d4124290dc81f598334d774360408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYjg0MzQxNTA2ZDQxMjQyOTBkYzgxZjU5ODMzNGQ3NzQzNjA0MDg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-21T06:15:29Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-21T19:02:12Z"}, "message": "Get linkchecker clean\n\nThis affects the book, some missed things in the reference, the grammar,\nand the standard library. Whew!", "tree": {"sha": "cef53def9b729deab927f348b0af727de3fe362c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cef53def9b729deab927f348b0af727de3fe362c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb84341506d4124290dc81f598334d774360408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb84341506d4124290dc81f598334d774360408", "html_url": "https://github.com/rust-lang/rust/commit/3eb84341506d4124290dc81f598334d774360408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb84341506d4124290dc81f598334d774360408/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4305b67d316394da2483213fdbf80d321507bad2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4305b67d316394da2483213fdbf80d321507bad2", "html_url": "https://github.com/rust-lang/rust/commit/4305b67d316394da2483213fdbf80d321507bad2"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "103ec39aa38a50789f31d073d082eb3b5a6b04ca", "filename": "src/doc/book/src/attributes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -67,4 +67,4 @@ Rust attributes are used for a number of different things. There is a full list\n of attributes [in the reference][reference]. Currently, you are not allowed to\n create your own attributes, the Rust compiler defines them.\n \n-[reference]: ../reference.html#attributes\n+[reference]: ../reference/attributes.html"}, {"sha": "c05d808a947400202e8faa643807690c24123e8f", "filename": "src/doc/book/src/compiler-plugins.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -119,7 +119,7 @@ The advantages over a simple `fn(&str) -> u32` are:\n   a way to define new literal syntax for any data type.\n \n In addition to procedural macros, you can define new\n-[`derive`](../reference.html#derive)-like attributes and other kinds of\n+[`derive`](../reference/attributes.html#derive)-like attributes and other kinds of\n extensions.  See `Registry::register_syntax_extension` and the `SyntaxExtension`\n enum.  For a more involved macro example, see\n [`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n@@ -165,8 +165,8 @@ quasiquote as an ordinary plugin library.\n # Lint plugins\n \n Plugins can extend [Rust's lint\n-infrastructure](../reference.html#lint-check-attributes) with additional checks for\n-code style, safety, etc. Now let's write a plugin\n+infrastructure](../reference/attributes.html#lint-check-attributes) with\n+additional checks for code style, safety, etc. Now let's write a plugin\n [`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n that warns about any item named `lintme`.\n \n@@ -244,9 +244,10 @@ mostly use the same infrastructure as lint plugins, and provide examples of how\n to access type information.\n \n Lints defined by plugins are controlled by the usual [attributes and compiler\n-flags](../reference.html#lint-check-attributes), e.g. `#[allow(test_lint)]` or\n-`-A test-lint`. These identifiers are derived from the first argument to\n-`declare_lint!`, with appropriate case and punctuation conversion.\n+flags](../reference/attributes.html#lint-check-attributes), e.g.\n+`#[allow(test_lint)]` or `-A test-lint`. These identifiers are derived from the\n+first argument to `declare_lint!`, with appropriate case and punctuation\n+conversion.\n \n You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n including those provided by plugins loaded by `foo.rs`."}, {"sha": "93f63ddc0a562bd1583dbf9ffebddfc08667ddf7", "filename": "src/doc/book/src/macros.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -101,7 +101,7 @@ trees, at compile time. The semicolon is optional on the last (here, only)\n case. The \"pattern\" on the left-hand side of `=>` is known as a \u2018matcher\u2019.\n These have [their own little grammar] within the language.\n \n-[their own little grammar]: ../reference.html#macros\n+[their own little grammar]: ../reference/macros.html\n \n The matcher `$x:expr` will match any Rust expression, binding that syntax tree\n to the \u2018metavariable\u2019 `$x`. The identifier `expr` is a \u2018fragment specifier\u2019;\n@@ -363,7 +363,7 @@ fn main() {\n }\n ```\n \n-[items]: ../reference.html#items\n+[items]: ../reference/items.html\n \n # Recursive macros\n \n@@ -490,7 +490,7 @@ be forced to choose between parsing `$i` and parsing `$e`. Changing the\n invocation syntax to put a distinctive token in front can solve the problem. In\n this case, you can write `$(I $i:ident)* E $e:expr`.\n \n-[item]: ../reference.html#items\n+[item]: ../reference/items.html\n \n # Scoping and macro import/export\n \n@@ -565,7 +565,7 @@ When this library is loaded with `#[macro_use] extern crate`, only `m2` will\n be imported.\n \n The Rust Reference has a [listing of macro-related\n-attributes](../reference.html#macro-related-attributes).\n+attributes](../reference/attributes.html#macro-related-attributes).\n \n # The variable `$crate`\n "}, {"sha": "a06520f4ac2f31769eb18f95615e9944da7baad3", "filename": "src/doc/book/src/syntax-index.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -235,10 +235,10 @@\n [Primitive Types (Tuple Indexing)]: primitive-types.html#tuple-indexing\n [Primitive Types (Tuples)]: primitive-types.html#tuples\n [Raw Pointers]: raw-pointers.html\n-[Reference (Byte String Literals)]: ../reference.html#byte-string-literals\n-[Reference (Integer literals)]: ../reference.html#integer-literals\n-[Reference (Raw Byte String Literals)]: ../reference.html#raw-byte-string-literals\n-[Reference (Raw String Literals)]: ../reference.html#raw-string-literals\n+[Reference (Byte String Literals)]: ../reference/tokens.html/#byte-string-literals\n+[Reference (Integer literals)]: ../reference/tokens.html#integer-literals\n+[Reference (Raw Byte String Literals)]: ../reference/tokens.html#raw-byte-string-literals\n+[Reference (Raw String Literals)]: ../reference/tokens.html#raw-string-literals\n [References and Borrowing]: references-and-borrowing.html\n [Strings]: strings.html\n [Structs (Update syntax)]: structs.html#update-syntax"}, {"sha": "8e803aff4d6fe3a40b12d1da2ebef7f3ec48667b", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -187,7 +187,7 @@ literal : [ string_lit | char_lit | byte_string_lit | byte_lit | num_lit | bool_\n The optional `lit_suffix` production is only used for certain numeric literals,\n but is reserved for future extension. That is, the above gives the lexical\n grammar, but a Rust parser will reject everything but the 12 special cases\n-mentioned in [Number literals](reference.html#number-literals) in the\n+mentioned in [Number literals](reference/tokens.html#number-literals) in the\n reference.\n \n #### Character and string literals"}, {"sha": "da43e1cc057eb48e417db7fd5e99fecda15715fd", "filename": "src/doc/reference/src/attributes.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fattributes.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -46,7 +46,7 @@ type int8_t = i8;\n ## Crate-only attributes\n \n - `crate_name` - specify the crate's crate name.\n-- `crate_type` - see [linkage](#linkage).\n+- `crate_type` - see [linkage](linkage.html).\n - `feature` - see [compiler features](#compiler-features).\n - `no_builtins` - disable optimizing certain code patterns to invocations of\n                   library functions that are assumed to exist\n@@ -106,7 +106,7 @@ On an `extern` block, the following attributes are interpreted:\n - `link` - indicate that a native library should be linked to for the\n   declarations in this block to be linked correctly. `link` supports an optional\n   `kind` key with three possible values: `dylib`, `static`, and `framework`. See\n-  [external blocks](#external-blocks) for more about external blocks. Two\n+  [external blocks](items.html#external-blocks) for more about external blocks. Two\n   examples: `#[link(name = \"readline\")]` and\n   `#[link(name = \"CoreFoundation\", kind = \"framework\")]`.\n - `linked_from` - indicates what native library this block of FFI items is\n@@ -149,7 +149,7 @@ On `struct`s:\n   list of names `#[macro_use(foo, bar)]` restricts the import to just those\n   macros named.  The `extern crate` must appear at the crate root, not inside\n   `mod`, which ensures proper function of the [`$crate` macro\n-  variable](book/macros.html#The%20variable%20%24crate).\n+  variable](../book/macros.html#the-variable-crate).\n \n - `macro_reexport` on an `extern crate` \u2014 re-export the named macros.\n \n@@ -159,7 +159,7 @@ On `struct`s:\n   link it into the output.\n \n See the [macros section of the\n-book](book/macros.html#Scoping%20and%20macro%20import%2Fexport) for more information on\n+book](../book/macros.html#scoping-and-macro-importexport) for more information on\n macro scope.\n \n ## Miscellaneous attributes\n@@ -317,7 +317,8 @@ For any lint check `C`:\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.  [Compiler\n-plugins](book/compiler-plugins.html#lint-plugins) can provide additional lint checks.\n+plugins](../book/compiler-plugins.html#lint-plugins) can provide additional\n+lint checks.\n \n ```{.ignore}\n pub mod m1 {\n@@ -442,7 +443,7 @@ impl<T: PartialEq> PartialEq for Foo<T> {\n ```\n \n You can implement `derive` for your own type through [procedural\n-macros](#procedural-macros).\n+macros](procedural-macros.html).\n \n ### Compiler Features\n \n@@ -464,10 +465,10 @@ considered off, and using the features will result in a compiler error.\n \n The currently implemented features of the reference compiler are:\n \n-* `advanced_slice_patterns` - See the [match expressions](#match-expressions)\n-                              section for discussion; the exact semantics of\n-                              slice patterns are subject to change, so some types\n-                              are still unstable.\n+* `advanced_slice_patterns` - See the [match\n+                              expressions](expressions.html#match-expressions)\n+\t\t\t      section for discussion; the exact semantics of\n+slice patterns are subject to change, so some types are still unstable.\n \n * `slice_patterns` - OK, actually, slice patterns are just scary and\n                      completely unstable."}, {"sha": "c9c0496dac61c399e1e0b21a35818305a0a6a649", "filename": "src/doc/reference/src/expressions.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fexpressions.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fexpressions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fexpressions.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -85,7 +85,7 @@ be copied if its type implements `Copy`. All others are moved.\n \n ## Literal expressions\n \n-A _literal expression_ consists of one of the [literal](tokens.md#literals) forms\n+A _literal expression_ consists of one of the [literal](tokens.html#literals) forms\n described earlier. It directly describes a number, character, string, boolean\n value, or the unit value.\n \n@@ -124,19 +124,19 @@ comma:\n ## Struct expressions\n \n There are several forms of struct expressions. A _struct expression_\n-consists of the [path](#paths) of a [struct item](items.html#structs), followed\n+consists of the [path](paths.html) of a [struct item](items.html#structs), followed\n by a brace-enclosed list of zero or more comma-separated name-value pairs,\n providing the field values of a new instance of the struct. A field name can be\n any identifier, and is separated from its value expression by a colon.  The\n location denoted by a struct field is mutable if and only if the enclosing\n struct is mutable.\n \n-A _tuple struct expression_ consists of the [path](#paths) of a [struct\n+A _tuple struct expression_ consists of the [path](paths.html) of a [struct\n item](items.html#structs), followed by a parenthesized list of one or more\n comma-separated expressions (in other words, the path of a struct item followed\n by a tuple expression). The struct item must be a tuple struct item.\n \n-A _unit-like struct expression_ consists only of the [path](#paths) of a\n+A _unit-like struct expression_ consists only of the [path](paths.html) of a\n [struct item](items.html#structs).\n \n The following are examples of struct expressions:\n@@ -217,7 +217,8 @@ A _method call_ consists of an expression followed by a single dot, an\n identifier, and a parenthesized expression-list. Method calls are resolved to\n methods on specific traits, either statically dispatching to a method if the\n exact `self`-type of the left-hand-side is known, or dynamically dispatching if\n-the left-hand-side expression is an indirect [trait object](trait-objects.html).\n+the left-hand-side expression is an indirect [trait\n+object](types.html#trait-objects).\n \n ## Field expressions\n \n@@ -504,7 +505,7 @@ The `+`, `-`, `*`, `/`, `%`, `&`, `|`, `^`, `<<`, and `>>` operators may be\n composed with the `=` operator. The expression `lval OP= val` is equivalent to\n `lval = lval OP val`. For example, `x = x + 1` may be written as `x += 1`.\n \n-Any such expression always has the [`unit`](#tuple-types) type.\n+Any such expression always has the [`unit`](types.html#tuple-types) type.\n \n ### Operator precedence\n "}, {"sha": "de657e3e312d5f5e8d0eaa1727c72706f18b73a0", "filename": "src/doc/reference/src/identifiers.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fidentifiers.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fidentifiers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fidentifiers.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -13,12 +13,12 @@ Or\n    * The identifier is more than one character, `_` alone is not an identifier\n    * The remaining characters have property `XID_continue`\n \n-that does _not_ occur in the set of [keywords][keywords].\n+that does _not_ occur in the set of [keywords].\n \n > **Note**: `XID_start` and `XID_continue` as character properties cover the\n > character ranges used to form the more familiar C and Java language-family\n > identifiers.\n \n-keywords: ../grammar.html#keywords\n+[keywords]: ../grammar.html#keywords\n [^non_ascii_idents]: Non-ASCII characters in identifiers are currently feature\n-  gated. This is expected to improve soon.\n\\ No newline at end of file\n+  gated. This is expected to improve soon."}, {"sha": "ba3f4195ba62dd6ff2a93ffa49bb1b0c5df2b8da", "filename": "src/doc/reference/src/items.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fitems.md", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Fdoc%2Freference%2Fsrc%2Fitems.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fitems.md?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -5,7 +5,7 @@ nested set of [modules]. Every crate has a single \"outermost\"\n anonymous module; all further items within the crate have [paths]\n within the module tree of the crate.\n \n-[modules]: modules.html\n+[modules]: #modules\n [paths]: paths.html\n \n Items are entirely determined at compile-time, generally remain fixed during"}, {"sha": "12410c08f399b3f059126492196bda0e807d886d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -687,7 +687,7 @@ extern \"rust-intrinsic\" {\n     /// The [nomicon](../../nomicon/transmutes.html) has additional\n     /// documentation.\n     ///\n-    /// [ub]: ../../reference.html#behavior-considered-undefined\n+    /// [ub]: ../../reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "1e9eaaf5f3223761f172536c2b50ad4eb347b1f8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -36,7 +36,7 @@ use hash::Hasher;\n ///\n /// [`Rc`]: ../../std/rc/struct.Rc.html\n /// [arc]: ../../std/sync/struct.Arc.html\n-/// [ub]: ../../reference.html#behavior-considered-undefined\n+/// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n@@ -338,7 +338,7 @@ pub trait Copy : Clone {\n /// [mutex]: ../../std/sync/struct.Mutex.html\n /// [rwlock]: ../../std/sync/struct.RwLock.html\n /// [unsafecell]: ../cell/struct.UnsafeCell.html\n-/// [ub]: ../../reference.html#behavior-considered-undefined\n+/// [ub]: ../../reference/behavior-considered-undefined.html\n /// [transmute]: ../../std/mem/fn.transmute.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]"}, {"sha": "f4ce4697d7cf4108f8973119fc3b635bdfd904e5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -167,7 +167,7 @@ pub use intrinsics::transmute;\n /// [FFI]: ../../book/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n-/// [ub]: ../../reference.html#behavior-considered-undefined\n+/// [ub]: ../../reference/behavior-considered-undefined.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {\n@@ -318,7 +318,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n ///\n /// [uninit]: fn.uninitialized.html\n /// [FFI]: ../../book/ffi.html\n-/// [ub]: ../../reference.html#behavior-considered-undefined\n+/// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n ///\n@@ -417,7 +417,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n /// [`vec!`]: ../../std/macro.vec.html\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n-/// [ub]: ../../reference.html#behavior-considered-undefined\n+/// [ub]: ../../reference/behavior-considered-undefined.html\n /// [write]: ../ptr/fn.write.html\n /// [copy]: ../intrinsics/fn.copy.html\n /// [copy_no]: ../intrinsics/fn.copy_nonoverlapping.html\n@@ -626,7 +626,7 @@ pub fn drop<T>(_x: T) { }\n /// same size. This function triggers [undefined behavior][ub] if `U` is larger than\n /// `T`.\n ///\n-/// [ub]: ../../reference.html#behavior-considered-undefined\n+/// [ub]: ../../reference/behavior-considered-undefined.html\n /// [size_of]: fn.size_of.html\n ///\n /// # Examples"}, {"sha": "544f4f9ddbed3dc9b14c015bdea4a31a1355f443", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -264,7 +264,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    /// [floating-point]: ../reference.html#machine-types\n+    /// [floating-point]: ../reference/types.html#machine-types\n     #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n                issue = \"27752\")]\n     #[rustc_deprecated(since = \"1.11.0\","}, {"sha": "dd4bc253bed4b769fecc3abf0ca2c3a836e1db37", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -206,7 +206,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    /// [floating-point]: ../reference.html#machine-types\n+    /// [floating-point]: ../reference/types.html#machine-types\n     #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n                issue = \"27752\")]\n     #[rustc_deprecated(since = \"1.11.0\","}, {"sha": "a1f092621cb44f506c8e8b2e360e1fe5068f3c32", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb84341506d4124290dc81f598334d774360408/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb84341506d4124290dc81f598334d774360408/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=3eb84341506d4124290dc81f598334d774360408", "patch": "@@ -441,7 +441,7 @@ pub mod builtin {\n     /// leads to less duplicated code.\n     ///\n     /// The syntax given to this macro is the same syntax as [the `cfg`\n-    /// attribute](../reference.html#conditional-compilation).\n+    /// attribute](../book/conditional-compilation.html).\n     ///\n     /// # Examples\n     ///"}]}