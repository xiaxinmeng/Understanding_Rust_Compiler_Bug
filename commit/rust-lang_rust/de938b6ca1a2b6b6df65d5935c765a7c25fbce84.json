{"sha": "de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTM4YjZjYTFhMmI2YjZkZjY1ZDU5MzVjNzY1YTdjMjVmYmNlODQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T13:02:42Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T16:46:03Z"}, "message": "Remove Signed trait and add SignedInt trait\n\nThe methods have been moved into Float and SignedInt", "tree": {"sha": "f8b7c283989f7ac9a7694989cfd3a4be71e74dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b7c283989f7ac9a7694989cfd3a4be71e74dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "html_url": "https://github.com/rust-lang/rust/commit/de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "url": "https://api.github.com/repos/rust-lang/rust/commits/e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "html_url": "https://github.com/rust-lang/rust/commit/e965ba85ca689ad77f63b7f0af9d7e337dcb4825"}], "stats": {"total": 309, "additions": 179, "deletions": 130}, "files": [{"sha": "710092a3e5f37e168898774fcd7c8a806351fe2a", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -97,7 +97,7 @@ syn keyword rustTrait FromIterator IntoIterator Extend ExactSize\n syn keyword rustTrait Iterator DoubleEndedIterator\n syn keyword rustTrait RandomAccessIterator CloneableIterator\n syn keyword rustTrait OrdIterator MutableDoubleEndedIterator\n-syn keyword rustTrait NumCast Signed Int UnsignedInt Float\n+syn keyword rustTrait NumCast Int SignedInt UnsignedInt Float\n syn keyword rustTrait FloatMath ToPrimitive FromPrimitive\n syn keyword rustTrait Box\n syn keyword rustTrait GenericPath Path PosixPath WindowsPath"}, {"sha": "ec339d10e4bb9311f3b884422065b5480e187c04", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -19,6 +19,8 @@\n //! operators, you could do the following:\n //!\n //! ```rust\n+//! use core::num::SignedInt;\n+//!\n //! // Our type.\n //! struct SketchyNum {\n //!     num : int"}, {"sha": "380ca82783adb5829e46c6c469069f955de47880", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -620,7 +620,7 @@ impl<'a, T> Pointer for &'a mut T {\n macro_rules! floating(($ty:ident) => {\n     impl Float for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::{Float, Signed};\n+            use num::Float;\n \n             let digits = match fmt.precision {\n                 Some(i) => float::DigExact(i),\n@@ -641,7 +641,7 @@ macro_rules! floating(($ty:ident) => {\n \n     impl LowerExp for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::{Float, Signed};\n+            use num::Float;\n \n             let digits = match fmt.precision {\n                 Some(i) => float::DigExact(i),\n@@ -662,7 +662,7 @@ macro_rules! floating(($ty:ident) => {\n \n     impl UpperExp for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::{Float, Signed};\n+            use num::Float;\n \n             let digits = match fmt.precision {\n                 Some(i) => float::DigExact(i),"}, {"sha": "ae0acc32926405e4338d2e3f3e03cbae378f01c1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -573,6 +573,8 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use core::num::SignedInt;\n+    ///\n     /// let xs = [-3i, 0, 1, 5, -10];\n     /// assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n@@ -597,6 +599,8 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use core::num::SignedInt;\n+    ///\n     /// let xs = [-3i, 0, 1, 5, -10];\n     /// assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```"}, {"sha": "ba03bb8f3d5c1146b3dacfe38dccf4026cdb0eaa", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -242,6 +242,41 @@ impl Float for f32 {\n     #[inline]\n     fn fract(self) -> f32 { self - self.trunc() }\n \n+    /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n+    /// number is `Float::nan()`.\n+    #[inline]\n+    fn abs(self) -> f32 {\n+        unsafe { intrinsics::fabsf32(self) }\n+    }\n+\n+    /// Returns a number that represents the sign of `self`.\n+    ///\n+    /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n+    /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n+    /// - `Float::nan()` if the number is `Float::nan()`\n+    #[inline]\n+    fn signum(self) -> f32 {\n+        if self.is_nan() {\n+            Float::nan()\n+        } else {\n+            unsafe { intrinsics::copysignf32(1.0, self) }\n+        }\n+    }\n+\n+    /// Returns `true` if `self` is positive, including `+0.0` and\n+    /// `Float::infinity()`.\n+    #[inline]\n+    fn is_positive(self) -> bool {\n+        self > 0.0 || (1.0 / self) == Float::infinity()\n+    }\n+\n+    /// Returns `true` if `self` is negative, including `-0.0` and\n+    /// `Float::neg_infinity()`.\n+    #[inline]\n+    fn is_negative(self) -> bool {\n+        self < 0.0 || (1.0 / self) == Float::neg_infinity()\n+    }\n+\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than\n     /// a separate multiplication operation followed by an add.\n@@ -254,6 +289,7 @@ impl Float for f32 {\n     #[inline]\n     fn recip(self) -> f32 { 1.0 / self }\n \n+    #[inline]\n     fn powi(self, n: i32) -> f32 {\n         unsafe { intrinsics::powif32(self, n) }\n     }"}, {"sha": "f1af4f0272c6bba9db9d54d904c2ecca3b127551", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -248,6 +248,41 @@ impl Float for f64 {\n     #[inline]\n     fn fract(self) -> f64 { self - self.trunc() }\n \n+    /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n+    /// number is `Float::nan()`.\n+    #[inline]\n+    fn abs(self) -> f64 {\n+        unsafe { intrinsics::fabsf64(self) }\n+    }\n+\n+    /// Returns a number that represents the sign of `self`.\n+    ///\n+    /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n+    /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n+    /// - `Float::nan()` if the number is `Float::nan()`\n+    #[inline]\n+    fn signum(self) -> f64 {\n+        if self.is_nan() {\n+            Float::nan()\n+        } else {\n+            unsafe { intrinsics::copysignf64(1.0, self) }\n+        }\n+    }\n+\n+    /// Returns `true` if `self` is positive, including `+0.0` and\n+    /// `Float::infinity()`.\n+    #[inline]\n+    fn is_positive(self) -> bool {\n+        self > 0.0 || (1.0 / self) == Float::infinity()\n+    }\n+\n+    /// Returns `true` if `self` is negative, including `-0.0` and\n+    /// `Float::neg_infinity()`.\n+    #[inline]\n+    fn is_negative(self) -> bool {\n+        self < 0.0 || (1.0 / self) == Float::neg_infinity()\n+    }\n+\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than\n     /// a separate multiplication operation followed by an add."}, {"sha": "d15cff3a8a9e38731789ac1551ad4d6e54c688e3", "filename": "src/libcore/num/float_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat_macros.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -13,6 +13,7 @@\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({\n+        use num::Float;\n         let (a, b) = (&$a, &$b);\n         assert!((*a - *b).abs() < 1.0e-6,\n                 \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "216d140ac48974474b7ca081424bbf613ee8e161", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 74, "deletions": 116, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -33,113 +33,6 @@ pub fn div_rem<T: Div<T, T> + Rem<T, T>>(x: T, y: T) -> (T, T) {\n     (x / y, x % y)\n }\n \n-/// A built-in signed number.\n-pub trait Signed: Neg<Self> {\n-    /// Computes the absolute value of `self`.\n-    fn abs(self) -> Self;\n-\n-    /// Returns a number (either `-1`, `0` or `1`) representing sign of `self`.\n-    fn signum(self) -> Self;\n-\n-    /// Returns `true` if `self` is a positive value.\n-    fn is_positive(self) -> bool;\n-\n-    /// Returns `true` if `self` is a negative value.\n-    fn is_negative(self) -> bool;\n-}\n-\n-macro_rules! signed_int_impl {\n-    ($T:ty) => {\n-        impl Signed for $T {\n-            /// Computes the absolute value. `Int::min_value()` will be returned\n-            /// if the number is `Int::min_value()`.\n-            #[inline]\n-            fn abs(self) -> $T {\n-                if self.is_negative() { -self } else { self }\n-            }\n-\n-            /// # Returns\n-            ///\n-            /// - `0` if the number is zero\n-            /// - `1` if the number is positive\n-            /// - `-1` if the number is negative\n-            #[inline]\n-            fn signum(self) -> $T {\n-                match self {\n-                    n if n > 0 =>  1,\n-                    0          =>  0,\n-                    _          => -1,\n-                }\n-            }\n-\n-            /// Returns `true` if `self` is positive and `false` if the number\n-            /// is zero or negative.\n-            #[inline]\n-            fn is_positive(self) -> bool { self > 0 }\n-\n-            /// Returns `true` if `self` is negative and `false` if the number\n-            /// is zero or positive.\n-            #[inline]\n-            fn is_negative(self) -> bool { self < 0 }\n-        }\n-    }\n-}\n-\n-signed_int_impl!(i8)\n-signed_int_impl!(i16)\n-signed_int_impl!(i32)\n-signed_int_impl!(i64)\n-signed_int_impl!(int)\n-\n-macro_rules! signed_float_impl {\n-    ($T:ty, $fabs:path, $fcopysign:path) => {\n-        impl Signed for $T {\n-            /// Computes the absolute value. Returns `Float::nan()` if the\n-            /// number is `Float::nan()`.\n-            #[inline]\n-            fn abs(self) -> $T {\n-                unsafe { $fabs(self) }\n-            }\n-\n-            /// # Returns\n-            ///\n-            /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n-            /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n-            /// - `Float::nan()` if the number is `Float::nan()`\n-            #[inline]\n-            fn signum(self) -> $T {\n-                if self.is_nan() {\n-                    Float::nan()\n-                } else {\n-                    unsafe { $fcopysign(1.0, self) }\n-                }\n-            }\n-\n-            /// Returns `true` if the number is positive, including `+0.0` and\n-            /// `Float::infinity()`.\n-            #[inline]\n-            fn is_positive(self) -> bool {\n-                self > 0.0 || (1.0 / self) == Float::infinity()\n-            }\n-\n-            /// Returns `true` if the number is negative, including `-0.0` and\n-            /// `Float::neg_infinity()`.\n-            #[inline]\n-            fn is_negative(self) -> bool {\n-                self < 0.0 || (1.0 / self) == Float::neg_infinity()\n-            }\n-        }\n-    };\n-}\n-\n-signed_float_impl!(f32,\n-    intrinsics::fabsf32,\n-    intrinsics::copysignf32)\n-\n-signed_float_impl!(f64,\n-    intrinsics::fabsf64,\n-    intrinsics::copysignf64)\n-\n /// Raises a `base` to the power of `exp`, using exponentiation by squaring.\n ///\n /// # Example\n@@ -702,6 +595,63 @@ int_impl!(int = i64, u64, 64,\n     intrinsics::i64_sub_with_overflow,\n     intrinsics::i64_mul_with_overflow)\n \n+/// A built-in two's complement integer.\n+pub trait SignedInt\n+    : Int\n+    + Neg<Self>\n+{\n+    /// Computes the absolute value of `self`. `Int::min_value()` will be\n+    /// returned if the number is `Int::min_value()`.\n+    fn abs(self) -> Self;\n+\n+    /// Returns a number representing sign of `self`.\n+    ///\n+    /// - `0` if the number is zero\n+    /// - `1` if the number is positive\n+    /// - `-1` if the number is negative\n+    fn signum(self) -> Self;\n+\n+    /// Returns `true` if `self` is positive and `false` if the number\n+    /// is zero or negative.\n+    fn is_positive(self) -> bool;\n+\n+    /// Returns `true` if `self` is negative and `false` if the number\n+    /// is zero or positive.\n+    fn is_negative(self) -> bool;\n+}\n+\n+macro_rules! signed_int_impl {\n+    ($T:ty) => {\n+        impl SignedInt for $T {\n+            #[inline]\n+            fn abs(self) -> $T {\n+                if self.is_negative() { -self } else { self }\n+            }\n+\n+            #[inline]\n+            fn signum(self) -> $T {\n+                match self {\n+                    n if n > 0 =>  1,\n+                    0          =>  0,\n+                    _          => -1,\n+                }\n+            }\n+\n+            #[inline]\n+            fn is_positive(self) -> bool { self > 0 }\n+\n+            #[inline]\n+            fn is_negative(self) -> bool { self < 0 }\n+        }\n+    }\n+}\n+\n+signed_int_impl!(i8)\n+signed_int_impl!(i16)\n+signed_int_impl!(i32)\n+signed_int_impl!(i64)\n+signed_int_impl!(int)\n+\n /// A built-in unsigned integer.\n pub trait UnsignedInt: Int {\n     /// Returns `true` iff `self == 2^k` for some `k`.\n@@ -1257,7 +1207,7 @@ pub trait Float\n     + NumCast\n     + PartialOrd\n     + PartialEq\n-    + Signed\n+    + Neg<Self>\n     + Add<Self,Self>\n     + Sub<Self,Self>\n     + Mul<Self,Self>\n@@ -1327,6 +1277,22 @@ pub trait Float\n     /// Return the fractional part of a number.\n     fn fract(self) -> Self;\n \n+    /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n+    /// number is `Float::nan()`.\n+    fn abs(self) -> Self;\n+    /// Returns a number that represents the sign of `self`.\n+    ///\n+    /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n+    /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n+    /// - `Float::nan()` if the number is `Float::nan()`\n+    fn signum(self) -> Self;\n+    /// Returns `true` if `self` is positive, including `+0.0` and\n+    /// `Float::infinity()`.\n+    fn is_positive(self) -> bool;\n+    /// Returns `true` if `self` is negative, including `-0.0` and\n+    /// `Float::neg_infinity()`.\n+    fn is_negative(self) -> bool;\n+\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than\n     /// a separate multiplication operation followed by an add.\n@@ -1494,14 +1460,6 @@ one_impl!(i64, 1i64)\n one_impl!(f32, 1.0f32)\n one_impl!(f64, 1.0f64)\n \n-#[deprecated = \"Use `Signed::abs`\"]\n-pub fn abs<T: Signed>(value: T) -> T {\n-    value.abs()\n-}\n-#[deprecated = \"Use `Signed::signum`\"]\n-pub fn signum<T: Signed>(value: T) -> T {\n-    value.signum()\n-}\n #[deprecated = \"Use `UnsignedInt::next_power_of_two`\"]\n pub fn next_power_of_two<T: UnsignedInt>(n: T) -> T {\n     n.next_power_of_two()"}, {"sha": "60012ab149f2ad07bd1c454d32af253c1dc9fd85", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -51,7 +51,7 @@ pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n pub use iter::{FromIterator, Extend};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n-pub use num::{Signed, ToPrimitive, FromPrimitive};\n+pub use num::{ToPrimitive, FromPrimitive};\n pub use option::{Option, Some, None};\n pub use ptr::RawPtr;\n pub use result::{Result, Ok, Err};"}, {"sha": "716300f652d674c5a2a2cf2a401e4d66b1ded1c1", "filename": "src/libcoretest/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcoretest%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcoretest%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcmp.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -109,6 +109,8 @@ fn test_partial_max() {\n \n #[test]\n fn test_user_defined_eq() {\n+    use core::num::SignedInt;\n+\n     // Our type.\n     struct SketchyNum {\n         num : int"}, {"sha": "2f11307c461aa637bb083715721b4944ebd72310", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -10,6 +10,7 @@\n \n use core::iter::*;\n use core::iter::order::*;\n+use core::num::SignedInt;\n use core::uint;\n use core::cmp;\n use core::ops::Slice;"}, {"sha": "5e2530ef2a92b40692f965ed49288306e9ccdd70", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -15,7 +15,7 @@ macro_rules! int_module (($T:ty, $T_i:ident) => (\n mod tests {\n     use core::$T_i::*;\n     use core::int;\n-    use core::num::Int;\n+    use core::num::{Int, SignedInt};\n     use num;\n \n     #[test]"}, {"sha": "7d54422601b775f75ba3f991e39131e46ec7ceb4", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -23,7 +23,7 @@ that do not need to record state.\n #![experimental]\n \n use core::prelude::*;\n-use core::num::Int;\n+use core::num::{Float, Int};\n \n use {Rng, Rand};\n "}, {"sha": "055a4c5dff4deb9b8f2da21d3de91ee15281f87d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -37,6 +37,7 @@ use lint::{Context, LintPass, LintArray};\n \n use std::cmp;\n use std::collections::hash_map::{Occupied, Vacant};\n+use std::num::SignedInt;\n use std::slice;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::abi;"}, {"sha": "4b3727ead6148982e27545fefa86004caed1a741", "filename": "src/libstd/num/float_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -14,6 +14,7 @@\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({\n+        use num::Float;\n         let (a, b) = (&$a, &$b);\n         assert!((*a - *b).abs() < 1.0e-6,\n                 \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "0afc8ce0452c8cc05bf6e3950cdd1884afb37827", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -23,9 +23,8 @@ use option::Option;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n \n pub use core::num::{Num, div_rem, Zero, zero, One, one};\n-pub use core::num::{Signed, abs, signum};\n pub use core::num::{Unsigned, pow, Bounded};\n-pub use core::num::{Primitive, Int, UnsignedInt};\n+pub use core::num::{Primitive, Int, SignedInt, UnsignedInt};\n pub use core::num::{cast, FromPrimitive, NumCast, ToPrimitive};\n pub use core::num::{next_power_of_two, is_power_of_two};\n pub use core::num::{checked_next_power_of_two};"}, {"sha": "158e7a59f6dba381f0804ca32fbb6035a2c0dca8", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -67,7 +67,7 @@\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};\n #[doc(no_inline)] pub use iter::{OrdIterator, MutableDoubleEndedIterator};\n-#[doc(no_inline)] pub use num::{Signed, ToPrimitive, FromPrimitive};\n+#[doc(no_inline)] pub use num::{ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;\n #[doc(no_inline)] pub use option::{Option, Some, None};\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};"}, {"sha": "4db9e8a9df8b5a98a2c7a989df6c83773342b2b1", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -18,7 +18,7 @@\n extern crate libc;\n \n use num;\n-use num::Int;\n+use num::{Int, SignedInt};\n use prelude::*;\n use io::{mod, IoResult, IoError};\n use sys_common::mkerr_libc;\n@@ -117,7 +117,7 @@ pub fn decode_error_detailed(errno: i32) -> IoError {\n }\n \n #[inline]\n-pub fn retry<T: Signed + Int> (f: || -> T) -> T {\n+pub fn retry<T: SignedInt> (f: || -> T) -> T {\n     let one: T = Int::one();\n     loop {\n         let n = f();"}, {"sha": "11788483397104406d02f4522319b6a6a0924afd", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -60,7 +60,7 @@ use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n use std::io::{File, ChanReader, ChanWriter};\n use std::io;\n-use std::num::{Int, FloatMath};\n+use std::num::{Float, FloatMath, Int};\n use std::os;\n use std::string::String;\n use std::task::TaskBuilder;"}, {"sha": "adf58dc875c433f13e342af7e9b60abb568d2078", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -461,6 +461,7 @@ mod tests {\n \n     macro_rules! assert_approx_eq(\n         ($a:expr, $b:expr) => ({\n+            use std::num::Float;\n             let (a, b) = (&$a, &$b);\n             assert!((*a - *b).abs() < 1.0e-6,\n                     \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "03b5186eef73a22b7d102f49551841b45146c686", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -30,6 +30,7 @@ extern crate libc;\n use std::fmt::Show;\n use std::fmt;\n use std::io::BufReader;\n+use std::num::SignedInt;\n use std::string::String;\n use std::time::Duration;\n "}, {"sha": "34367f06793fce469405167f49829bc6cff05eb6", "filename": "src/test/compile-fail/implicit-method-bind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::num::SignedInt;\n+\n fn main() {\n     let _f = 10i.abs; //~ ERROR attempted to take value of method\n }"}, {"sha": "f4dba3f6c7f5ba51aa4c90438adc356eeaf26f27", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -12,6 +12,7 @@\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({\n+        use std::num::Float;\n         let (a, b) = (&$a, &$b);\n         assert!((*a - *b).abs() < 1.0e-6,\n                 \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "c3ba7ca12d02e83304b05627b8c2f19a0ebd928d", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -13,6 +13,7 @@\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({\n+        use std::num::Float;\n         let (a, b) = (&$a, &$b);\n         assert!((*a - *b).abs() < 1.0e-6,\n                 \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "96f1c940dcf2cdabaf617be2e50683e08ae178e0", "filename": "src/test/run-pass/trait-inheritance-self-in-supertype.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -10,6 +10,8 @@\n \n // Test for issue #4183: use of Self in supertraits.\n \n+use std::num::Float as StdFloat;\n+\n pub static FUZZY_EPSILON: f64 = 0.1;\n \n pub trait FuzzyEq<Eps> {"}, {"sha": "c99c394969cf34779fd41ff109e0d0fdd53ffba8", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de938b6ca1a2b6b6df65d5935c765a7c25fbce84/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=de938b6ca1a2b6b6df65d5935c765a7c25fbce84", "patch": "@@ -10,9 +10,10 @@\n //\n // ignore-lexer-test FIXME #15679\n \n-\n #![feature(non_ascii_idents)]\n \n+use std::num::Float;\n+\n pub fn main() {\n     let \u03b5 = 0.00001f64;\n     let \u03a0 = 3.14f64;"}]}