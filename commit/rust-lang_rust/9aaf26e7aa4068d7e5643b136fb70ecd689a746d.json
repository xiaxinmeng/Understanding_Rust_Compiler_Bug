{"sha": "9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYWYyNmU3YWE0MDY4ZDdlNTY0M2IxMzZmYjcwZWNkNjg5YTc0NmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-10T17:08:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-28T02:18:11Z"}, "message": "rustc: rework stability to be on-demand for type-directed lookup.", "tree": {"sha": "60fdabfe4a91fa16c2b24d8d310bc3ff50ca28cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60fdabfe4a91fa16c2b24d8d310bc3ff50ca28cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "html_url": "https://github.com/rust-lang/rust/commit/9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97c132cac79ef6bdf9f950b415c67bb43af387a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97c132cac79ef6bdf9f950b415c67bb43af387a", "html_url": "https://github.com/rust-lang/rust/commit/f97c132cac79ef6bdf9f950b415c67bb43af387a"}], "stats": {"total": 2632, "additions": 1774, "deletions": 858}, "files": [{"sha": "6642da858e551e2be5b4d6e552e3d4df58c1dfdd", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -37,8 +37,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n {error_deriving}\n struct Error;\n {code}\n@@ -106,7 +104,6 @@ def write_file(name, string):\n ALL = STRUCT | ENUM\n \n traits = {\n-    'Zero': (STRUCT, [], 1),\n     'Default': (STRUCT, [], 1),\n     'FromPrimitive': (0, [], 0), # only works for C-like enums\n \n@@ -116,7 +113,7 @@ def write_file(name, string):\n \n for (trait, supers, errs) in [('Clone', [], 1),\n                               ('PartialEq', [], 2),\n-                              ('PartialOrd', ['PartialEq'], 8),\n+                              ('PartialOrd', ['PartialEq'], 9),\n                               ('Eq', ['PartialEq'], 1),\n                               ('Ord', ['Eq', 'PartialOrd', 'PartialEq'], 1),\n                               ('Debug', [], 1),"}, {"sha": "397d61d5372e025a80bafdde754dff7f1e36a5b1", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -90,7 +90,7 @@ pub enum DepNode<D: Clone + Debug> {\n     RvalueCheck(D),\n     Reachability,\n     DeadCheck,\n-    StabilityCheck,\n+    StabilityCheck(D),\n     LateLintCheck,\n     TransCrate,\n     TransCrateItem(D),\n@@ -189,7 +189,6 @@ impl<D: Clone + Debug> DepNode<D> {\n             Privacy => Some(Privacy),\n             Reachability => Some(Reachability),\n             DeadCheck => Some(DeadCheck),\n-            StabilityCheck => Some(StabilityCheck),\n             LateLintCheck => Some(LateLintCheck),\n             TransCrate => Some(TransCrate),\n             TransWriteMetadata => Some(TransWriteMetadata),\n@@ -217,6 +216,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             Mir(ref d) => op(d).map(Mir),\n             BorrowCheck(ref d) => op(d).map(BorrowCheck),\n             RvalueCheck(ref d) => op(d).map(RvalueCheck),\n+            StabilityCheck(ref d) => op(d).map(StabilityCheck),\n             TransCrateItem(ref d) => op(d).map(TransCrateItem),\n             TransInlinedItem(ref d) => op(d).map(TransInlinedItem),\n             AssociatedItems(ref d) => op(d).map(AssociatedItems),"}, {"sha": "39d0ed9a67b09a2f8b9e77d4b065bc368df622d9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1362,7 +1362,8 @@ impl<'a> LoweringContext<'a> {\n                         } else {\n                             let fields = fields.into_iter().map(|&(s, e)| {\n                                 let expr = P(this.lower_expr(&e));\n-                                this.field(Symbol::intern(s), expr, e.span)\n+                                let unstable_span = this.allow_internal_unstable(\"...\", e.span);\n+                                this.field(Symbol::intern(s), expr, unstable_span)\n                             }).collect();\n                             let attrs = ast_expr.attrs.clone();\n "}, {"sha": "78d5067b273a5db1ef56f2bbbe209d8428018b5b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -211,6 +211,12 @@ declare_lint! {\n      not named `mod.rs`\"\n }\n \n+declare_lint! {\n+    pub DEPRECATED,\n+    Warn,\n+    \"detects use of deprecated items\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -250,7 +256,8 @@ impl LintPass for HardwiredLints {\n             SAFE_EXTERN_STATICS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n             EXTRA_REQUIREMENT_IN_IMPL,\n-            LEGACY_DIRECTORY_OWNERSHIP\n+            LEGACY_DIRECTORY_OWNERSHIP,\n+            DEPRECATED\n         )\n     }\n }"}, {"sha": "f5e18e13465d89f71cec22b6ddb7fff8162683eb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 215, "deletions": 297, "changes": 512, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -15,11 +15,10 @@ pub use self::StabilityLevel::*;\n \n use dep_graph::DepNode;\n use hir::map as hir_map;\n-use session::Session;\n use lint;\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, DefIndex, LOCAL_CRATE};\n-use ty::{self, TyCtxt, AdtKind};\n+use ty::TyCtxt;\n use middle::privacy::AccessLevels;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -30,9 +29,9 @@ use syntax::attr::{self, Stability, Deprecation};\n use util::nodemap::{DefIdMap, FxHashSet, FxHashMap};\n \n use hir;\n-use hir::{Item, Generics, StructField, Variant, PatKind};\n+use hir::{Item, Generics, StructField, Variant};\n use hir::intravisit::{self, Visitor};\n-use hir::pat_util::EnumerateAndAdjustIterator;\n+use hir::itemlikevisit::DeepVisitor;\n \n use std::mem::replace;\n use std::cmp::Ordering;\n@@ -101,7 +100,13 @@ pub struct Index<'tcx> {\n     depr_map: DefIdMap<Option<DeprecationEntry>>,\n \n     /// Maps for each crate whether it is part of the staged API.\n-    staged_api: FxHashMap<CrateNum, bool>\n+    staged_api: FxHashMap<CrateNum, bool>,\n+\n+    /// Features enabled for this crate.\n+    active_features: FxHashSet<Symbol>,\n+\n+    /// Features used by this crate. Updated before and during typeck.\n+    used_features: FxHashMap<Symbol, attr::StabilityLevel>\n }\n \n // A private tree-walker for producing an Index.\n@@ -110,7 +115,6 @@ struct Annotator<'a, 'tcx: 'a> {\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n     parent_depr: Option<DeprecationEntry>,\n-    access_levels: &'a AccessLevels,\n     in_trait_impl: bool,\n }\n \n@@ -183,20 +187,12 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                 self.parent_stab = orig_parent_stab;\n             } else {\n                 debug!(\"annotate: not found, parent = {:?}\", self.parent_stab);\n-                let mut is_error = kind == AnnotationKind::Required &&\n-                                   self.access_levels.is_reachable(id) &&\n-                                   !self.tcx.sess.opts.test;\n                 if let Some(stab) = self.parent_stab {\n                     if stab.level.is_unstable() {\n                         let def_id = self.tcx.map.local_def_id(id);\n                         self.index.stab_map.insert(def_id, Some(stab));\n-                        is_error = false;\n                     }\n                 }\n-                if is_error {\n-                    self.tcx.sess.span_err(item_sp, \"This node does not have \\\n-                                                     a stability attribute\");\n-                }\n                 visit_children(self);\n             }\n         } else {\n@@ -313,17 +309,88 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     }\n }\n \n+struct MissingStabilityAnnotations<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    access_levels: &'a AccessLevels,\n+}\n+\n+impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n+    fn check_missing_stability(&self, id: NodeId, span: Span) {\n+        let def_id = self.tcx.map.local_def_id(id);\n+        let is_error = !self.tcx.sess.opts.test &&\n+                        !self.tcx.stability.borrow().stab_map.contains_key(&def_id) &&\n+                        self.access_levels.is_reachable(id);\n+        if is_error {\n+            self.tcx.sess.span_err(span, \"This node does not have a stability attribute\");\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx, 'v> Visitor<'v> for MissingStabilityAnnotations<'a, 'tcx> {\n+    fn visit_item(&mut self, i: &Item) {\n+        match i.node {\n+            // Inherent impls and foreign modules serve only as containers for other items,\n+            // they don't have their own stability. They still can be annotated as unstable\n+            // and propagate this unstability to children, but this annotation is completely\n+            // optional. They inherit stability from their parents when unannotated.\n+            hir::ItemImpl(.., None, _, _) | hir::ItemForeignMod(..) => {}\n+\n+            _ => self.check_missing_stability(i.id, i.span)\n+        }\n+\n+        intravisit::walk_item(self, i)\n+    }\n+\n+    fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n+        self.check_missing_stability(ti.id, ti.span);\n+        intravisit::walk_trait_item(self, ti);\n+    }\n+\n+    fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n+        let impl_def_id = self.tcx.map.local_def_id(self.tcx.map.get_parent(ii.id));\n+        if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n+            self.check_missing_stability(ii.id, ii.span);\n+        }\n+        intravisit::walk_impl_item(self, ii);\n+    }\n+\n+    fn visit_variant(&mut self, var: &Variant, g: &Generics, item_id: NodeId) {\n+        self.check_missing_stability(var.node.data.id(), var.span);\n+        intravisit::walk_variant(self, var, g, item_id);\n+    }\n+\n+    fn visit_struct_field(&mut self, s: &StructField) {\n+        self.check_missing_stability(s.id, s.span);\n+        intravisit::walk_struct_field(self, s);\n+    }\n+\n+    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n+        self.check_missing_stability(i.id, i.span);\n+        intravisit::walk_foreign_item(self, i);\n+    }\n+\n+    fn visit_macro_def(&mut self, md: &hir::MacroDef) {\n+        if md.imported_from.is_none() {\n+            self.check_missing_stability(md.id, md.span);\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Index<'tcx> {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, access_levels: &AccessLevels) {\n+    pub fn build(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+        let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n+\n+        // Put the active features into a map for quick lookup\n+        self.active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n+\n         let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.map.krate();\n         let mut annotator = Annotator {\n             tcx: tcx,\n             index: self,\n             parent_stab: None,\n             parent_depr: None,\n-            access_levels: access_levels,\n             in_trait_impl: false,\n         };\n         annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnotationKind::Required,\n@@ -348,337 +415,174 @@ impl<'a, 'tcx> Index<'tcx> {\n             staged_api: staged_api,\n             stab_map: DefIdMap(),\n             depr_map: DefIdMap(),\n+            active_features: FxHashSet(),\n+            used_features: FxHashMap(),\n         }\n     }\n }\n \n /// Cross-references the feature names of unstable APIs with enabled\n-/// features and possibly prints errors. Returns a list of all\n-/// features used.\n-pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                                          -> FxHashMap<Symbol, attr::StabilityLevel> {\n-    let _task = tcx.dep_graph.in_task(DepNode::StabilityCheck);\n-    let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n-\n-    // Put the active features into a map for quick lookup\n-    let active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n-\n-    let mut checker = Checker {\n-        tcx: tcx,\n-        active_features: active_features,\n-        used_features: FxHashMap(),\n-    };\n-    intravisit::walk_crate(&mut checker, tcx.map.krate());\n-\n-    checker.used_features\n+/// features and possibly prints errors.\n+pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    let mut checker = Checker { tcx: tcx };\n+    tcx.visit_all_item_likes_in_krate(DepNode::StabilityCheck,\n+                                      &mut DeepVisitor::new(&mut checker));\n }\n \n struct Checker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    active_features: FxHashSet<Symbol>,\n-    used_features: FxHashMap<Symbol, attr::StabilityLevel>,\n }\n \n-impl<'a, 'tcx> Checker<'a, 'tcx> {\n-    fn check(&mut self, id: DefId, span: Span,\n-             stab: &Option<&Stability>, _depr: &Option<DeprecationEntry>) {\n-        if !is_staged_api(self.tcx, id) {\n+impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n+        if self.sess.codemap().span_allows_unstable(span) {\n+            debug!(\"stability: \\\n+                    skipping span={:?} since it is internal\", span);\n             return;\n         }\n+\n+        let lint_deprecated = |note: Option<Symbol>| {\n+            let msg = if let Some(note) = note {\n+                format!(\"use of deprecated item: {}\", note)\n+            } else {\n+                format!(\"use of deprecated item\")\n+            };\n+\n+            self.sess.add_lint(lint::builtin::DEPRECATED, id, span, msg);\n+        };\n+\n+        // Deprecated attributes apply in-crate and cross-crate.\n+        if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n+            let skip = if id == ast::DUMMY_NODE_ID {\n+                true\n+            } else {\n+                let parent_def_id = self.map.local_def_id(self.map.get_parent(id));\n+                self.lookup_deprecation_entry(parent_def_id).map_or(false, |parent_depr| {\n+                    parent_depr.same_origin(&depr_entry)\n+                })\n+            };\n+\n+            if !skip {\n+                lint_deprecated(depr_entry.attr.note);\n+            }\n+        }\n+\n+        let is_staged_api = *self.stability.borrow_mut().staged_api.entry(def_id.krate)\n+            .or_insert_with(|| self.sess.cstore.is_staged_api(def_id.krate));\n+        if !is_staged_api {\n+            return;\n+        }\n+\n+        let stability = self.lookup_stability(def_id);\n+        debug!(\"stability: \\\n+                inspecting def_id={:?} span={:?} of stability={:?}\", def_id, span, stability);\n+\n+        if let Some(&Stability{rustc_depr: Some(attr::RustcDeprecation { reason, .. }), ..})\n+                = stability {\n+            if id != ast::DUMMY_NODE_ID {\n+                lint_deprecated(Some(reason));\n+            }\n+        }\n+\n         // Only the cross-crate scenario matters when checking unstable APIs\n-        let cross_crate = !id.is_local();\n+        let cross_crate = !def_id.is_local();\n         if !cross_crate {\n             return\n         }\n \n-        match *stab {\n-            Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n-                self.used_features.insert(feature.clone(),\n-                                          attr::Unstable { reason: reason.clone(), issue: issue });\n+        if let Some(&Stability { ref level, ref feature, .. }) = stability {\n+            self.stability.borrow_mut().used_features.insert(feature.clone(), level.clone());\n+        }\n \n-                if !self.active_features.contains(feature) {\n+        match stability {\n+            Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n+                if !self.stability.borrow().active_features.contains(feature) {\n                     let msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n                                                &feature.as_str(), &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n-                    emit_feature_err(&self.tcx.sess.parse_sess, &feature.as_str(), span,\n+                    emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n                                      GateIssue::Library(Some(issue)), &msg);\n                 }\n             }\n-            Some(&Stability { ref level, ref feature, .. }) => {\n-                self.used_features.insert(feature.clone(), level.clone());\n-\n+            Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n-                // handled by a lint.\n+                // handled by the lint emitting logic above.\n             }\n             None => {\n                 // This is an 'unmarked' API, which should not exist\n                 // in the standard library.\n-                if self.tcx.sess.features.borrow().unmarked_api {\n-                    self.tcx.sess.struct_span_warn(span, \"use of unmarked library feature\")\n-                                 .span_note(span, \"this is either a bug in the library you are \\\n-                                                   using or a bug in the compiler - please \\\n-                                                   report it in both places\")\n-                                 .emit()\n+                if self.sess.features.borrow().unmarked_api {\n+                    self.sess.struct_span_warn(span, \"use of unmarked library feature\")\n+                             .span_note(span, \"this is either a bug in the library you are \\\n+                                               using or a bug in the compiler - please \\\n+                                               report it in both places\")\n+                             .emit()\n                 } else {\n-                    self.tcx.sess.struct_span_err(span, \"use of unmarked library feature\")\n-                                 .span_note(span, \"this is either a bug in the library you are \\\n-                                                   using or a bug in the compiler - please \\\n-                                                   report it in both places\")\n-                                 .span_note(span, \"use #![feature(unmarked_api)] in the \\\n-                                                   crate attributes to override this\")\n-                                 .emit()\n+                    self.sess.struct_span_err(span, \"use of unmarked library feature\")\n+                             .span_note(span, \"this is either a bug in the library you are \\\n+                                               using or a bug in the compiler - please \\\n+                                               report it in both places\")\n+                             .span_note(span, \"use #![feature(unmarked_api)] in the \\\n+                                               crate attributes to override this\")\n+                             .emit()\n                 }\n             }\n         }\n     }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n-    /// Because stability levels are scoped lexically, we want to walk\n-    /// nested items in the context of the outer item, so enable\n-    /// deep-walking.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n-    }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        // When compiling with --test we don't enforce stability on the\n-        // compiler-generated test module, demarcated with `DUMMY_SP` plus the\n-        // name `__test`\n-        if item.span == DUMMY_SP && item.name == \"__test\" { return }\n-\n-        check_item(self.tcx, item, true,\n-                   &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n-        intravisit::walk_item(self, item);\n-    }\n-\n-    fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n-        check_expr(self.tcx, ex,\n-                   &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n-        intravisit::walk_expr(self, ex);\n-    }\n-\n-    fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) {\n-        check_path(self.tcx, path,\n-                   &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n-        intravisit::walk_path(self, path)\n-    }\n-\n-    fn visit_pat(&mut self, pat: &'tcx hir::Pat) {\n-        check_pat(self.tcx, pat,\n-                  &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n-        intravisit::walk_pat(self, pat)\n-    }\n-\n-    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        check_ty(self.tcx, ty,\n-                 &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n-        intravisit::walk_ty(self, ty)\n-    }\n-}\n-\n-/// Helper for discovering nodes to check for stability\n-pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            item: &hir::Item,\n-                            warn_about_defns: bool,\n-                            cb: &mut FnMut(DefId, Span,\n-                                           &Option<&Stability>,\n-                                           &Option<DeprecationEntry>)) {\n-    match item.node {\n-        hir::ItemExternCrate(_) => {\n-            // compiler-generated `extern crate` items have a dummy span.\n-            if item.span == DUMMY_SP { return }\n-\n-            let cnum = match tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n-                Some(cnum) => cnum,\n-                None => return,\n-            };\n-            let id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n-            maybe_do_stability_check(tcx, id, item.span, cb);\n-        }\n-\n-        // For implementations of traits, check the stability of each item\n-        // individually as it's possible to have a stable trait with unstable\n-        // items.\n-        hir::ItemImpl(.., Some(ref t), _, ref impl_item_refs) => {\n-            let trait_did = t.path.def.def_id();\n-            for impl_item_ref in impl_item_refs {\n-                let impl_item = tcx.map.impl_item(impl_item_ref.id);\n-                let item = tcx.associated_items(trait_did)\n-                    .find(|item| item.name == impl_item.name).unwrap();\n-                if warn_about_defns {\n-                    maybe_do_stability_check(tcx, item.def_id, impl_item.span, cb);\n-                }\n+        match item.node {\n+            hir::ItemExternCrate(_) => {\n+                // compiler-generated `extern crate` items have a dummy span.\n+                if item.span == DUMMY_SP { return }\n+\n+                let cnum = match self.tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n+                    Some(cnum) => cnum,\n+                    None => return,\n+                };\n+                let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+                self.tcx.check_stability(def_id, item.id, item.span);\n             }\n-        }\n \n-        _ => (/* pass */)\n-    }\n-}\n-\n-/// Helper for discovering nodes to check for stability\n-pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n-                            cb: &mut FnMut(DefId, Span,\n-                                           &Option<&Stability>,\n-                                           &Option<DeprecationEntry>)) {\n-    let span;\n-    let id = match e.node {\n-        hir::ExprMethodCall(i, ..) => {\n-            span = i.span;\n-            let method_call = ty::MethodCall::expr(e.id);\n-            tcx.tables().method_map[&method_call].def_id\n-        }\n-        hir::ExprPath(ref qpath @ hir::QPath::TypeRelative(..)) => {\n-            span = e.span;\n-            tcx.tables().qpath_def(qpath, e.id).def_id()\n-        }\n-        hir::ExprField(ref base_e, ref field) => {\n-            span = field.span;\n-            match tcx.tables().expr_ty_adjusted(base_e).sty {\n-                ty::TyAdt(def, _) => {\n-                    def.struct_variant().field_named(field.node).did\n-                }\n-                _ => span_bug!(e.span,\n-                               \"stability::check_expr: named field access on non-ADT\")\n-            }\n-        }\n-        hir::ExprTupField(ref base_e, ref field) => {\n-            span = field.span;\n-            match tcx.tables().expr_ty_adjusted(base_e).sty {\n-                ty::TyAdt(def, _) => {\n-                    def.struct_variant().fields[field.node].did\n-                }\n-                ty::TyTuple(..) => return,\n-                _ => span_bug!(e.span,\n-                               \"stability::check_expr: unnamed field access on \\\n-                                something other than a tuple or struct\")\n-            }\n-        }\n-        hir::ExprStruct(_, ref expr_fields, _) => {\n-            match tcx.tables().expr_ty(e).sty {\n-                ty::TyAdt(adt, ..) => match adt.adt_kind() {\n-                    AdtKind::Struct | AdtKind::Union => {\n-                        // check the stability of each field that appears\n-                        // in the construction expression.\n-                        for field in expr_fields {\n-                            let did = adt.struct_variant().field_named(field.name.node).did;\n-                            maybe_do_stability_check(tcx, did, field.span, cb);\n+            // For implementations of traits, check the stability of each item\n+            // individually as it's possible to have a stable trait with unstable\n+            // items.\n+            hir::ItemImpl(.., Some(ref t), _, ref impl_item_refs) => {\n+                if let Def::Trait(trait_did) = t.path.def {\n+                    for impl_item_ref in impl_item_refs {\n+                        let impl_item = self.tcx.map.impl_item(impl_item_ref.id);\n+                        let trait_item_def_id = self.tcx.associated_items(trait_did)\n+                            .find(|item| item.name == impl_item.name).map(|item| item.def_id);\n+                        if let Some(def_id) = trait_item_def_id {\n+                            // Pass `DUMMY_NODE_ID` to skip deprecation warnings.\n+                            self.tcx.check_stability(def_id, ast::DUMMY_NODE_ID, impl_item.span);\n                         }\n-\n-                        // we're done.\n-                        return\n                     }\n-                    AdtKind::Enum => {\n-                        // we don't look at stability attributes on\n-                        // struct-like enums (yet...), but it's definitely not\n-                        // a bug to have construct one.\n-                        return\n-                    }\n-                },\n-                ref ty => span_bug!(e.span, \"stability::check_expr: struct \\\n-                                         construction of non-ADT type: {:?}\", ty)\n+                }\n             }\n-        }\n-        _ => return\n-    };\n-\n-    maybe_do_stability_check(tcx, id, span, cb);\n-}\n \n-pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            path: &hir::Path,\n-                            cb: &mut FnMut(DefId, Span,\n-                                           &Option<&Stability>,\n-                                           &Option<DeprecationEntry>)) {\n-    match path.def {\n-        Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}\n-        _ => maybe_do_stability_check(tcx, path.def.def_id(), path.span, cb)\n-    }\n-}\n-\n-pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n-                           cb: &mut FnMut(DefId, Span,\n-                                          &Option<&Stability>,\n-                                          &Option<DeprecationEntry>)) {\n-    debug!(\"check_pat(pat = {:?})\", pat);\n-    if is_internal(tcx, pat.span) { return; }\n-\n-    if let PatKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) = pat.node {\n-        let def_id = tcx.tables().qpath_def(qpath, pat.id).def_id();\n-        maybe_do_stability_check(tcx, def_id, pat.span, cb)\n-    }\n-\n-    let v = match tcx.tables().pat_ty_opt(pat).map(|ty| &ty.sty) {\n-        Some(&ty::TyAdt(adt, _)) if !adt.is_enum() => adt.struct_variant(),\n-        _ => return,\n-    };\n-    match pat.node {\n-        // Foo(a, b, c)\n-        PatKind::TupleStruct(_, ref pat_fields, ddpos) => {\n-            for (i, field) in pat_fields.iter().enumerate_and_adjust(v.fields.len(), ddpos) {\n-                maybe_do_stability_check(tcx, v.fields[i].did, field.span, cb)\n-            }\n-        }\n-        // Foo { a, b, c }\n-        PatKind::Struct(_, ref pat_fields, _) => {\n-            for field in pat_fields {\n-                let did = v.field_named(field.node.name).did;\n-                maybe_do_stability_check(tcx, did, field.span, cb);\n-            }\n+            _ => (/* pass */)\n         }\n-        // everything else is fine.\n-        _ => {}\n+        intravisit::walk_item(self, item);\n     }\n-}\n-\n-pub fn check_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: &hir::Ty,\n-                          cb: &mut FnMut(DefId, Span,\n-                                         &Option<&Stability>,\n-                                         &Option<DeprecationEntry>)) {\n-    debug!(\"check_ty(ty = {:?})\", ty);\n-    if is_internal(tcx, ty.span) { return; }\n \n-    if let hir::TyPath(hir::QPath::TypeRelative(..)) = ty.node {\n-        let def_id = tcx.tables().type_relative_path_defs[&ty.id].def_id();\n-        maybe_do_stability_check(tcx, def_id, ty.span, cb);\n+    fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) {\n+        match path.def {\n+            Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}\n+            _ => self.tcx.check_stability(path.def.def_id(), id, path.span)\n+        }\n+        intravisit::walk_path(self, path)\n     }\n }\n \n-fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                      id: DefId, span: Span,\n-                                      cb: &mut FnMut(DefId, Span,\n-                                                     &Option<&Stability>,\n-                                                     &Option<DeprecationEntry>)) {\n-    if is_internal(tcx, span) {\n-        debug!(\"maybe_do_stability_check: \\\n-                skipping span={:?} since it is internal\", span);\n-        return;\n-    }\n-    let (stability, deprecation) = if is_staged_api(tcx, id) {\n-        (tcx.lookup_stability(id), None)\n-    } else {\n-        (None, tcx.lookup_deprecation_entry(id))\n-    };\n-    debug!(\"maybe_do_stability_check: \\\n-            inspecting id={:?} span={:?} of stability={:?}\", id, span, stability);\n-    cb(id, span, &stability, &deprecation);\n-}\n-\n-fn is_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span) -> bool {\n-    tcx.sess.codemap().span_allows_unstable(span)\n-}\n-\n-fn is_staged_api<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> bool {\n-    *tcx.stability.borrow_mut().staged_api.entry(id.krate).or_insert_with(\n-        || tcx.sess.cstore.is_staged_api(id.krate))\n-}\n-\n-impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Lookup the stability for a node, loading external crate\n     /// metadata as necessary.\n-    pub fn lookup_stability(self, id: DefId) -> Option<&'tcx Stability> {\n+    pub fn lookup_stability(self, id: DefId) -> Option<&'gcx Stability> {\n         if let Some(st) = self.stability.borrow().stab_map.get(&id) {\n             return *st;\n         }\n@@ -702,7 +606,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         depr\n     }\n \n-    fn lookup_stability_uncached(self, id: DefId) -> Option<&'tcx Stability> {\n+    fn lookup_stability_uncached(self, id: DefId) -> Option<&'gcx Stability> {\n         debug!(\"lookup(id={:?})\", id);\n         if id.is_local() {\n             None // The stability cache is filled partially lazily\n@@ -724,9 +628,22 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n /// Given the list of enabled features that were not language features (i.e. that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features(sess: &Session,\n-                                       lib_features_used: &FxHashMap<Symbol,\n-                                                                     attr::StabilityLevel>) {\n+pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                 access_levels: &AccessLevels) {\n+    let sess = &tcx.sess;\n+\n+    if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n+        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n+        let krate = tcx.map.krate();\n+        let mut missing = MissingStabilityAnnotations {\n+            tcx: tcx,\n+            access_levels: access_levels,\n+        };\n+        missing.check_missing_stability(ast::CRATE_NODE_ID, krate.span);\n+        intravisit::walk_crate(&mut missing, krate);\n+        krate.visit_all_item_likes(&mut DeepVisitor::new(&mut missing));\n+    }\n+\n     let ref declared_lib_features = sess.features.borrow().declared_lib_features;\n     let mut remaining_lib_features: FxHashMap<Symbol, Span>\n         = declared_lib_features.clone().into_iter().collect();\n@@ -744,7 +661,8 @@ pub fn check_unused_or_stable_features(sess: &Session,\n                       format_stable_since_msg(version));\n     }\n \n-    for (used_lib_feature, level) in lib_features_used {\n+    let index = tcx.stability.borrow();\n+    for (used_lib_feature, level) in &index.used_features {\n         match remaining_lib_features.remove(used_lib_feature) {\n             Some(span) => {\n                 if let &attr::StabilityLevel::Stable { since: ref version } = level {"}, {"sha": "7dc71f8189b86f0d5f782ea08c676dbffad9d8cd", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -886,6 +886,14 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              \"load_dep_graph\",\n              || rustc_incremental::load_dep_graph(tcx, &incremental_hashes_map));\n \n+        time(time_passes, \"stability index\", || {\n+            tcx.stability.borrow_mut().build(tcx)\n+        });\n+\n+        time(time_passes,\n+             \"stability checking\",\n+             || stability::check_unstable_api_usage(tcx));\n+\n         // passes are timed inside typeck\n         analysis.hir_ty_to_ty =\n             try_with_f!(typeck::check_crate(tcx), (tcx, analysis, incremental_hashes_map));\n@@ -899,11 +907,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                 rustc_privacy::check_crate(tcx, &analysis.export_map)\n             });\n \n-        // Do not move this check past lint\n-        time(time_passes, \"stability index\", || {\n-            tcx.stability.borrow_mut().build(tcx, &analysis.access_levels)\n-        });\n-\n         time(time_passes,\n              \"intrinsic checking\",\n              || middle::intrinsicck::check_crate(tcx));\n@@ -972,14 +975,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             middle::dead::check_crate(tcx, &analysis.access_levels);\n         });\n \n-        let ref lib_features_used =\n-            time(time_passes,\n-                 \"stability checking\",\n-                 || stability::check_unstable_api_usage(tcx));\n-\n         time(time_passes, \"unused lib feature checking\", || {\n-            stability::check_unused_or_stable_features(&tcx.sess,\n-                                                       lib_features_used)\n+            stability::check_unused_or_stable_features(tcx, &analysis.access_levels)\n         });\n \n         time(time_passes,"}, {"sha": "f14fa7d4fdc23905040fae8defb277249456fcd1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 136, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -30,22 +30,20 @@\n \n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n-use middle::stability;\n use rustc::cfg;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::{self, Reveal};\n use rustc::hir::map as hir_map;\n use util::nodemap::NodeSet;\n-use lint::{Level, LateContext, LintContext, LintArray, Lint};\n+use lint::{Level, LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use std::collections::HashSet;\n \n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n-use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};\n@@ -607,139 +605,6 @@ impl LateLintPass for MissingDebugImplementations {\n     }\n }\n \n-declare_lint! {\n-    DEPRECATED,\n-    Warn,\n-    \"detects use of deprecated items\"\n-}\n-\n-/// Checks for use of items with `#[deprecated]` or `#[rustc_deprecated]` attributes\n-#[derive(Clone)]\n-pub struct Deprecated {\n-    /// Tracks the `NodeId` of the current item.\n-    ///\n-    /// This is required since not all node ids are present in the hir map.\n-    current_item: ast::NodeId,\n-}\n-\n-impl Deprecated {\n-    pub fn new() -> Deprecated {\n-        Deprecated { current_item: ast::CRATE_NODE_ID }\n-    }\n-\n-    fn lint(&self,\n-            cx: &LateContext,\n-            _id: DefId,\n-            span: Span,\n-            stability: &Option<&attr::Stability>,\n-            deprecation: &Option<stability::DeprecationEntry>) {\n-        // Deprecated attributes apply in-crate and cross-crate.\n-        if let Some(&attr::Stability{rustc_depr: Some(attr::RustcDeprecation{reason, ..}), ..})\n-                = *stability {\n-            output(cx, DEPRECATED, span, Some(reason))\n-        } else if let Some(ref depr_entry) = *deprecation {\n-            if let Some(parent_depr) = cx.tcx.lookup_deprecation_entry(self.parent_def(cx)) {\n-                if parent_depr.same_origin(depr_entry) {\n-                    return;\n-                }\n-            }\n-\n-            output(cx, DEPRECATED, span, depr_entry.attr.note)\n-        }\n-\n-        fn output(cx: &LateContext, lint: &'static Lint, span: Span, note: Option<Symbol>) {\n-            let msg = if let Some(note) = note {\n-                format!(\"use of deprecated item: {}\", note)\n-            } else {\n-                format!(\"use of deprecated item\")\n-            };\n-\n-            cx.span_lint(lint, span, &msg);\n-        }\n-    }\n-\n-    fn push_item(&mut self, item_id: ast::NodeId) {\n-        self.current_item = item_id;\n-    }\n-\n-    fn item_post(&mut self, cx: &LateContext, item_id: ast::NodeId) {\n-        assert_eq!(self.current_item, item_id);\n-        self.current_item = cx.tcx.map.get_parent(item_id);\n-    }\n-\n-    fn parent_def(&self, cx: &LateContext) -> DefId {\n-        cx.tcx.map.local_def_id(self.current_item)\n-    }\n-}\n-\n-impl LintPass for Deprecated {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED)\n-    }\n-}\n-\n-impl LateLintPass for Deprecated {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        self.push_item(item.id);\n-        stability::check_item(cx.tcx,\n-                              item,\n-                              false,\n-                              &mut |id, sp, stab, depr| self.lint(cx, id, sp, &stab, &depr));\n-    }\n-\n-    fn check_item_post(&mut self, cx: &LateContext, item: &hir::Item) {\n-        self.item_post(cx, item.id);\n-    }\n-\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        stability::check_expr(cx.tcx,\n-                              e,\n-                              &mut |id, sp, stab, depr| self.lint(cx, id, sp, &stab, &depr));\n-    }\n-\n-    fn check_path(&mut self, cx: &LateContext, path: &hir::Path, _: ast::NodeId) {\n-        stability::check_path(cx.tcx,\n-                              path,\n-                              &mut |id, sp, stab, depr| self.lint(cx, id, sp, &stab, &depr));\n-    }\n-\n-    fn check_pat(&mut self, cx: &LateContext, pat: &hir::Pat) {\n-        stability::check_pat(cx.tcx,\n-                             pat,\n-                             &mut |id, sp, stab, depr| self.lint(cx, id, sp, &stab, &depr));\n-    }\n-\n-    fn check_ty(&mut self, cx: &LateContext, ty: &hir::Ty) {\n-        stability::check_ty(cx.tcx, ty,\n-                            &mut |id, sp, stab, depr|\n-                               self.lint(cx, id, sp, &stab, &depr));\n-    }\n-\n-    fn check_impl_item(&mut self, _: &LateContext, item: &hir::ImplItem) {\n-        self.push_item(item.id);\n-    }\n-\n-    fn check_impl_item_post(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n-        self.item_post(cx, item.id);\n-    }\n-\n-    fn check_trait_item(&mut self, _: &LateContext, item: &hir::TraitItem) {\n-        self.push_item(item.id);\n-    }\n-\n-    fn check_trait_item_post(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        self.item_post(cx, item.id);\n-    }\n-\n-    fn check_foreign_item(&mut self, _: &LateContext, item: &hir::ForeignItem) {\n-        self.push_item(item.id);\n-    }\n-\n-    fn check_foreign_item_post(&mut self, cx: &LateContext, item: &hir::ForeignItem) {\n-        self.item_post(cx, item.id);\n-    }\n-}\n-\n declare_lint! {\n     DEPRECATED_ATTR,\n     Warn,"}, {"sha": "ec0a124770c48b91f04d969c5411a6e0f308439f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -145,7 +145,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  );\n \n     add_builtin_with_new!(sess,\n-                          Deprecated,\n                           TypeLimits,\n                           MissingDoc,\n                           MissingDebugImplementations,"}, {"sha": "8a8b34342940d70cf6365dbbd314b592bdd14824", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1258,6 +1258,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     // Will fail except for T::A and Self::A; i.e., if ty/ty_path_def are not a type\n     // parameter or Self.\n     pub fn associated_path_def_to_ty(&self,\n+                                     ref_id: ast::NodeId,\n                                      span: Span,\n                                      ty: Ty<'tcx>,\n                                      ty_path_def: Def,\n@@ -1339,7 +1340,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let ty = self.projected_ty_from_poly_trait_ref(span, bound, assoc_name);\n \n         let item = tcx.associated_items(trait_did).find(|i| i.name == assoc_name);\n-        (ty, Def::AssociatedTy(item.expect(\"missing associated type\").def_id))\n+        let def_id = item.expect(\"missing associated type\").def_id;\n+        tcx.check_stability(def_id, ref_id, span);\n+        (ty, Def::AssociatedTy(def_id))\n     }\n \n     fn qpath_to_ty(&self,\n@@ -1659,7 +1662,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 } else {\n                     Def::Err\n                 };\n-                let (ty, def) = self.associated_path_def_to_ty(ast_ty.span, ty, def, segment);\n+                let (ty, def) = self.associated_path_def_to_ty(ast_ty.id, ast_ty.span,\n+                                                               ty, def, segment);\n \n                 // Write back the new resolution.\n                 tcx.tables.borrow_mut().type_relative_path_defs.insert(ast_ty.id, def);"}, {"sha": "63e797a87ff2191fea50e7246cb2d83eea4cf9ab", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.demand_eqtype(pat.span, expected, pat_ty);\n \n         // Type check subpatterns.\n-        self.check_struct_pat_fields(pat_ty, pat.span, variant, fields, etc);\n+        self.check_struct_pat_fields(pat_ty, pat.id, pat.span, variant, fields, etc);\n         pat_ty\n     }\n \n@@ -603,6 +603,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(variant.fields.len(), ddpos) {\n                 let field_ty = self.field_ty(subpat.span, &variant.fields[i], substs);\n                 self.check_pat(&subpat, field_ty);\n+\n+                self.tcx.check_stability(variant.fields[i].did, pat.id, subpat.span);\n             }\n         } else {\n             let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n@@ -622,6 +624,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn check_struct_pat_fields(&self,\n                                adt_ty: Ty<'tcx>,\n+                               pat_id: ast::NodeId,\n                                span: Span,\n                                variant: ty::VariantDef<'tcx>,\n                                fields: &'gcx [Spanned<hir::FieldPat>],\n@@ -659,7 +662,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Vacant(vacant) => {\n                     vacant.insert(span);\n                     field_map.get(&field.name)\n-                        .map(|f| self.field_ty(span, f, substs))\n+                        .map(|f| {\n+                            self.tcx.check_stability(f.did, pat_id, span);\n+\n+                            self.field_ty(span, f, substs)\n+                        })\n                         .unwrap_or_else(|| {\n                             struct_span_err!(tcx.sess, span, E0026,\n                                              \"{} `{}` does not have a field named `{}`\","}, {"sha": "f2dcc174d55bbdbae342a63bb2e027ba8ca2e259", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -136,6 +136,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.tcx.used_trait_imports.borrow_mut().insert(import_id);\n         }\n \n+        self.tcx.check_stability(pick.item.def_id, call_expr.id, span);\n+\n         Ok(self.confirm_method(span,\n                                self_expr,\n                                call_expr,\n@@ -340,6 +342,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         let def = pick.item.def();\n+\n+        self.tcx.check_stability(def.def_id(), expr_id, span);\n+\n         if let probe::InherentImplPick = pick.kind {\n             if !pick.item.vis.is_accessible_from(self.body_id, &self.tcx.map) {\n                 let msg = format!(\"{} `{}` is private\", def.kind_name(), method_name);"}, {"sha": "76bd961ebd2fcab3d66445a22ab66f3c7868c84c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -2998,6 +2998,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if field.vis.is_accessible_from(self.body_id, &self.tcx().map) {\n                             autoderef.finalize(lvalue_pref, Some(base));\n                             self.write_autoderef_adjustment(base.id, autoderefs, base_t);\n+\n+                            self.tcx.check_stability(field.did, expr.id, expr.span);\n+\n                             return field_ty;\n                         }\n                         private_candidate = Some((base_def.did, field_ty));\n@@ -3100,6 +3103,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         private_candidate = Some((base_def.did, field_ty));\n                         if field.vis.is_accessible_from(self.body_id, &self.tcx().map) {\n+                            self.tcx.check_stability(field.did, expr.id, expr.span);\n                             Some(field_ty)\n                         } else {\n                             None\n@@ -3192,13 +3196,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn check_expr_struct_fields(&self,\n                                 adt_ty: Ty<'tcx>,\n+                                expr_id: ast::NodeId,\n                                 span: Span,\n                                 variant: ty::VariantDef<'tcx>,\n                                 ast_fields: &'gcx [hir::Field],\n                                 check_completeness: bool) {\n         let tcx = self.tcx;\n-        let (substs, kind_name) = match adt_ty.sty {\n-            ty::TyAdt(adt, substs) => (substs, adt.variant_descr()),\n+        let (substs, adt_kind, kind_name) = match adt_ty.sty {\n+            ty::TyAdt(adt, substs) => (substs, adt.adt_kind(), adt.variant_descr()),\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\")\n         };\n \n@@ -3219,6 +3224,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 expected_field_type = self.field_ty(field.span, v_field, substs);\n \n                 seen_fields.insert(field.name.node, field.span);\n+\n+                // we don't look at stability attributes on\n+                // struct-like enums (yet...), but it's definitely not\n+                // a bug to have construct one.\n+                if adt_kind != ty::AdtKind::Enum {\n+                    tcx.check_stability(v_field.did, expr_id, field.span);\n+                }\n             } else {\n                 error_happened = true;\n                 expected_field_type = tcx.types.err;\n@@ -3381,7 +3393,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir::QPath::TypeRelative(ref qself, _) => qself.span\n         };\n \n-        self.check_expr_struct_fields(struct_ty, path_span, variant, fields,\n+        self.check_expr_struct_fields(struct_ty, expr.id, path_span, variant, fields,\n                                       base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {\n             self.check_expr_has_type(base_expr, struct_ty);\n@@ -4012,7 +4024,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     Def::Err\n                 };\n-                let (ty, def) = AstConv::associated_path_def_to_ty(self, path_span,\n+                let (ty, def) = AstConv::associated_path_def_to_ty(self, node_id, path_span,\n                                                                    ty, def, segment);\n \n                 // Write back the new resolution."}, {"sha": "fca89e265e4edcfa710694532e46cc8f3d162c48", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -307,7 +307,7 @@ fn generate_test_harness(sess: &ParseSess,\n /// The expanded code calls some unstable functions in the test crate.\n fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n     let info = ExpnInfo {\n-        call_site: DUMMY_SP,\n+        call_site: sp,\n         callee: NameAndSpan {\n             format: MacroAttribute(Symbol::intern(\"test\")),\n             span: None,\n@@ -460,6 +460,7 @@ mod __test {\n \n fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n     let id_test = Ident::from_str(\"test\");\n+    let sp = ignored_span(cx, DUMMY_SP);\n     let (vi, vis, ident) = if cx.is_test_crate {\n         (ast::ItemKind::Use(\n             P(nospan(ast::ViewPathSimple(id_test,\n@@ -474,7 +475,7 @@ fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n         node: vi,\n         attrs: vec![],\n         vis: vis,\n-        span: DUMMY_SP\n+        span: sp\n     })\n }\n \n@@ -598,7 +599,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     // FIXME #15962: should be using quote_item, but that stringifies\n     // __test_reexports, causing it to be reinterned, losing the\n     // gensym information.\n-    let sp = DUMMY_SP;\n+    let sp = ignored_span(cx, DUMMY_SP);\n     let ecx = &cx.ext_cx;\n     let struct_type = ecx.ty_path(ecx.path(sp, vec![ecx.ident_of(\"self\"),\n                                                     ecx.ident_of(\"test\"),"}, {"sha": "7de6e58c784d57ad7083ae25409c538ad740e8d4", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -16,7 +16,7 @@\n //  which is a reduction of this code to more directly show the reason\n //  for the error message we see here.)\n \n-#![feature(const_fn)]\n+#![feature(const_fn, rustc_private)]\n \n extern crate arena;\n "}, {"sha": "30829847a3a229ce1e16858a71e78311b68e498c", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -19,6 +19,8 @@\n // (Also compare against dropck_tarena_cycle_checked.rs, from which\n // this was reduced to better understand its error message.)\n \n+#![feature(rustc_private)]\n+\n extern crate arena;\n \n use arena::TypedArena;"}, {"sha": "bb7478d9a5f6ebe2d93d4fb7c49654d47f48a447", "filename": "src/test/compile-fail-fulldeps/proc-macro/at-the-root.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fat-the-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fat-the-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fat-the-root.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n \n extern crate proc_macro;\n "}, {"sha": "abf11637631f46b4278e331ee4a2102174319b33", "filename": "src/test/compile-fail-fulldeps/proc-macro/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n \n extern crate proc_macro;\n "}, {"sha": "bdb3c09c4d723c9ef64b73feb431135599bd2de7", "filename": "src/test/compile-fail-fulldeps/proc-macro/define-two.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n \n extern crate proc_macro;\n "}, {"sha": "4751679ddb8cfe53adca9457ecd77ff5cce4f3a3", "filename": "src/test/compile-fail-fulldeps/proc-macro/error-on-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ferror-on-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ferror-on-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ferror-on-test.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: --test\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n \n extern crate proc_macro;\n "}, {"sha": "70c8db5ddd2ecb0c36c7ca2d0eebe469b03741a2", "filename": "src/test/compile-fail-fulldeps/proc-macro/illegal-proc-macro-derive-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fillegal-proc-macro-derive-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fillegal-proc-macro-derive-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fillegal-proc-macro-derive-use.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n \n extern crate proc_macro;\n "}, {"sha": "1bcd4b15eb86350b20993a49934c1967e26b582f", "filename": "src/test/compile-fail-fulldeps/proc-macro/shadow-builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow-builtin.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n \n extern crate proc_macro;\n "}, {"sha": "d9b19d1d85a7a47c62ff6e21612577ba6dc65e28", "filename": "src/test/compile-fail-fulldeps/proc-macro/signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_lib)]\n #![allow(warnings)]\n \n extern crate proc_macro;"}, {"sha": "fe7ee1c129f81d6493dc007fb73141478603a2e1", "filename": "src/test/compile-fail/E0254.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0254.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n //~^ NOTE previous import of `collections` here\n "}, {"sha": "95be48b5ff1b35ec80d820060d3c8c22c726a179", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections, libc)]\n+\n extern crate collections;\n //~^ NOTE previous import of `collections` here\n "}, {"sha": "ae018d2ada93c1e723210681b8cca70be061dd1e", "filename": "src/test/compile-fail/E0260.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2FE0260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2FE0260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0260.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n extern crate collections;\n //~^ NOTE previous import of `collections` here\n "}, {"sha": "e4eca7e7eceb4b1e6b23ffb5e0a5f45e52e3b324", "filename": "src/test/compile-fail/borrowck/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(box_syntax)]\n \n-extern crate collections;\n use std::collections::HashMap;\n \n fn main() {"}, {"sha": "ba1ae64ec330af6cda67d77fec86f81891ee1524", "filename": "src/test/compile-fail/borrowck/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_traits)]\n+\n // Ensure that invoking a closure counts as a unique immutable borrow\n \n type Fn<'a> = Box<FnMut() + 'a>;"}, {"sha": "8499ebb8ac370d0aabf6c9fe0e5be19c002cb5be", "filename": "src/test/compile-fail/borrowck/borrowck-insert-during-each.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-insert-during-each.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate collections;\n use std::collections::HashSet;\n \n struct Foo {"}, {"sha": "4c20688331b6dd8e26374053ff5c4a69605ef45e", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-call.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::ops::{Fn, FnMut, FnOnce};\n "}, {"sha": "0b73f5bebb23ced7f9fb4e3287a81ed2a08dade8", "filename": "src/test/compile-fail/derives-span-Clone-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs"}, {"sha": "6944ea38b37267e091c14227226245552ad3fcd1", "filename": "src/test/compile-fail/derives-span-Clone-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Clone-enum.rs"}, {"sha": "92bf148ccbd942e738838bd0fc73433ba8edc7c8", "filename": "src/test/compile-fail/derives-span-Clone-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Clone-struct.rs"}, {"sha": "21adfc90301b86fea62f61c931e566223095b0a6", "filename": "src/test/compile-fail/derives-span-Clone-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Clone-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs"}, {"sha": "da777e8a14b451039f5dbe2881b081fac0f90605", "filename": "src/test/compile-fail/derives-span-Debug-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs"}, {"sha": "bf5d3f2d81b29fb1de7cf877413e8cd9b8594040", "filename": "src/test/compile-fail/derives-span-Debug-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Show-enum.rs"}, {"sha": "b0b275fa2d347d1326fa6e959f2dea69fa7a8550", "filename": "src/test/compile-fail/derives-span-Debug-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Show-struct.rs"}, {"sha": "9689054a7be6db2d6c4ca868a19bef6fe3374573", "filename": "src/test/compile-fail/derives-span-Debug-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Debug-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs"}, {"sha": "68b99ed25b855eec33ea1ff494955472cf0eabb3", "filename": "src/test/compile-fail/derives-span-Default-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Default-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Default-struct.rs"}, {"sha": "822abe975a1ccc223a7b2c571eb3d22e975f1c4a", "filename": "src/test/compile-fail/derives-span-Default-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Default-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs"}, {"sha": "fdc74d5fef6b167e1b9926b1df50122a43fb836b", "filename": "src/test/compile-fail/derives-span-Eq-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs"}, {"sha": "4bf30fdf93f7711c2905e87220c2449db41d09c1", "filename": "src/test/compile-fail/derives-span-Eq-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs"}, {"sha": "685188f13378649fda75bd3614f6545237bc5e5a", "filename": "src/test/compile-fail/derives-span-Eq-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs"}, {"sha": "0e636d027dd3797248fe10a6dfea04bc7afe5a83", "filename": "src/test/compile-fail/derives-span-Eq-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Eq-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs"}, {"sha": "bfb6566223cb31582a596daad76bdd2f4f0461ba", "filename": "src/test/compile-fail/derives-span-Hash-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Hash-enum-struct-variant.rs"}, {"sha": "99f28b376dfe9712171541ef521940b41fc934cf", "filename": "src/test/compile-fail/derives-span-Hash-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Hash-enum.rs"}, {"sha": "acfd5aa7b2a7466453617951ef2690b7e4b36766", "filename": "src/test/compile-fail/derives-span-Hash-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Hash-struct.rs"}, {"sha": "3d76b29834f09bfd19f0cefc0e5e4344044c0b25", "filename": "src/test/compile-fail/derives-span-Hash-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Hash-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-Hash-tuple-struct.rs"}, {"sha": "06ee588e69f49e9c06570e6ffb6b43512d4b22ea", "filename": "src/test/compile-fail/derives-span-Ord-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs"}, {"sha": "af9cfbc911097af9cfa5757ba8e72538ea2449a2", "filename": "src/test/compile-fail/derives-span-Ord-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs"}, {"sha": "4477d933a6c7ae4316cfa6a9f09d05c304c70e3b", "filename": "src/test/compile-fail/derives-span-Ord-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs"}, {"sha": "ebc7518641289cbb8afc3cbe6dc1fffb6d0a387e", "filename": "src/test/compile-fail/derives-span-Ord-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-Ord-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs"}, {"sha": "7c98dcc2a6f1d90f4fba76efabc2b6ddac0d7d55", "filename": "src/test/compile-fail/derives-span-PartialEq-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialEq-enum-struct-variant.rs"}, {"sha": "fe6355e456cca1a028b559b95467b18b5bad2b63", "filename": "src/test/compile-fail/derives-span-PartialEq-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialEq-enum.rs"}, {"sha": "10d9d64277683c69477c976f9f1660657c550454", "filename": "src/test/compile-fail/derives-span-PartialEq-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialEq-struct.rs"}, {"sha": "c92eb0f63c4dafe5ffd0d6f7d3fc4ad4ebcbd8ef", "filename": "src/test/compile-fail/derives-span-PartialEq-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialEq-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n \n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialEq-tuple-struct.rs"}, {"sha": "898104d0ab29cb7c5818b76679784eef2110762d", "filename": "src/test/compile-fail/derives-span-PartialOrd-enum-struct-variant.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum-struct-variant.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialOrd-enum-struct-variant.rs"}, {"sha": "c0585999473b5e5dd5b80699be2482d80bd97d60", "filename": "src/test/compile-fail/derives-span-PartialOrd-enum.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialOrd-enum.rs"}, {"sha": "af05434af9de3d0eb0b72eb2374573ba967a1ddd", "filename": "src/test/compile-fail/derives-span-PartialOrd-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialOrd-struct.rs"}, {"sha": "1afb7bc2b4c4765bf71fab2ea03997d443f16f23", "filename": "src/test/compile-fail/derives-span-PartialOrd-tuple-struct.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-tuple-struct.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-extern crate rand;\n-\n #[derive(PartialEq)]\n struct Error;\n ", "previous_filename": "src/test/compile-fail/deriving-span-PartialOrd-tuple-struct.rs"}, {"sha": "521f122f8af0b57eec342d14cadd72fee2904610", "filename": "src/test/compile-fail/forget-init-unsafe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(core_intrinsics)]\n+\n use std::intrinsics::{init, forget};\n \n // Test that the `forget` and `init` intrinsics are really unsafe"}, {"sha": "1dd6763cbe50a580d8de917c4753ce15832dd2eb", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::{fmt, ops};\n "}, {"sha": "45bc5ee07a527f9ed2e6d59bd98f43e4fd71c531", "filename": "src/test/compile-fail/issue-17545.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_traits)]\n+\n pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n     bar.call((\n         &(), //~ ERROR borrowed value does not live long enough"}, {"sha": "da98f21e46138901aa3bdc83d983a235193ca459", "filename": "src/test/compile-fail/issue-20225.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n struct Foo;\n "}, {"sha": "dfa9520f38bb78c957c7de6fe93aa05ff87ca4a0", "filename": "src/test/compile-fail/issue-22034.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n fn main() {"}, {"sha": "805725dd749f521d9350280fef7f941b626423d1", "filename": "src/test/compile-fail/issue-2392.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2392.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(core, fnbox)]\n+\n use std::boxed::FnBox;\n \n struct FuncContainer {"}, {"sha": "3e3d898e3683da7b7811e0913cb0ac7e36b32b7d", "filename": "src/test/compile-fail/issue-28075.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -17,7 +17,6 @@\n extern crate lint_stability;\n \n use lint_stability::{unstable, deprecated}; //~ ERROR use of unstable library feature 'test_feature'\n-//~^ WARNING use of deprecated item\n \n use lint_stability::unstable::{self as u}; //~ ERROR use of unstable library feature 'test_feature'\n "}, {"sha": "d75ac0c7f2ef32d5e3f62f94f63406344ef953e6", "filename": "src/test/compile-fail/issue-36881.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand)]\n+\n fn main() {\n     extern crate rand;\n     use rand::Rng; //~ ERROR unresolved import"}, {"sha": "51f5fc5ee98e1f38a3e14c46908b23d66af9f48f", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_traits)]\n+\n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {"}, {"sha": "2f74325d19c7d587389ac654de1a3db14dece71b", "filename": "src/test/compile-fail/lint-output-format-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format-2.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -F unused_features\n+// aux-build:lint_output_format.rs\n+\n+#![feature(foo)] //~ ERROR unused or unknown feature\n+\n+#![feature(test_feature)]\n+\n+extern crate lint_output_format;\n+use lint_output_format::{foo, bar};\n+//~^ WARNING use of deprecated item: text,\n+\n+fn main() {\n+    let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n+    let _y = bar();\n+}"}, {"sha": "81e0b708b8739d764d298fe2e314859f22a3e96a", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -11,13 +11,12 @@\n // compile-flags: -F unused_features\n // aux-build:lint_output_format.rs\n \n-#![feature(foo)] //~ ERROR unused or unknown feature\n+#![allow(deprecated)]\n \n extern crate lint_output_format; //~ ERROR use of unstable library feature\n use lint_output_format::{foo, bar}; //~ ERROR use of unstable library feature\n-//~^ WARNING use of deprecated item: text,\n \n fn main() {\n-    let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n+    let _x = foo();\n     let _y = bar(); //~ ERROR use of unstable library feature\n }"}, {"sha": "77917ff3cd3e5c9c456d77898690106d0e1a6497", "filename": "src/test/compile-fail/lint-stability-2.rs", "status": "added", "additions": 423, "deletions": 0, "changes": 423, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-2.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -0,0 +1,423 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint_stability.rs\n+// aux-build:stability_cfg1.rs\n+\n+#![allow(deprecated)]\n+#![allow(dead_code)]\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[macro_use]\n+extern crate lint_stability;\n+\n+mod cross_crate {\n+    extern crate stability_cfg1;\n+\n+    use lint_stability::*;\n+\n+    fn test() {\n+        type Foo = MethodTester;\n+        let foo = MethodTester;\n+\n+        deprecated();\n+        foo.method_deprecated();\n+        Foo::method_deprecated(&foo);\n+        <Foo>::method_deprecated(&foo);\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+\n+        deprecated_text();\n+        foo.method_deprecated_text();\n+        Foo::method_deprecated_text(&foo);\n+        <Foo>::method_deprecated_text(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n+\n+        foo.method_deprecated_unstable();\n+        //~^ ERROR use of unstable library feature\n+        Foo::method_deprecated_unstable(&foo);\n+        //~^ ERROR use of unstable library feature\n+        <Foo>::method_deprecated_unstable(&foo);\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_deprecated_unstable();\n+        //~^ ERROR use of unstable library feature\n+        <Foo>::trait_deprecated_unstable(&foo);\n+        //~^ ERROR use of unstable library feature\n+\n+        foo.method_deprecated_unstable_text();\n+        //~^ ERROR use of unstable library feature\n+        Foo::method_deprecated_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature\n+        <Foo>::method_deprecated_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_deprecated_unstable_text();\n+        //~^ ERROR use of unstable library feature\n+        <Foo>::trait_deprecated_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature\n+\n+        foo.method_unstable(); //~ ERROR use of unstable library feature\n+        Foo::method_unstable(&foo); //~ ERROR use of unstable library feature\n+        <Foo>::method_unstable(&foo); //~ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+\n+        foo.method_unstable_text();\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        Foo::method_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        <Foo>::method_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        foo.trait_unstable_text();\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        <Foo>::trait_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+\n+        stable();\n+        foo.method_stable();\n+        Foo::method_stable(&foo);\n+        <Foo>::method_stable(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+\n+        stable_text();\n+        foo.method_stable_text();\n+        Foo::method_stable_text(&foo);\n+        <Foo>::method_stable_text(&foo);\n+        foo.trait_stable_text();\n+        Trait::trait_stable_text(&foo);\n+        <Foo>::trait_stable_text(&foo);\n+        <Foo as Trait>::trait_stable_text(&foo);\n+\n+        struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n+\n+        let _ = DeprecatedStruct {\n+            i: 0\n+        };\n+        let _ = StableStruct { i: 0 };\n+\n+        let _ = DeprecatedUnitStruct;\n+        let _ = StableUnitStruct;\n+\n+        let _ = Enum::DeprecatedVariant;\n+        let _ = Enum::StableVariant;\n+\n+        let _ = DeprecatedTupleStruct (1);\n+        let _ = StableTupleStruct (1);\n+\n+        // At the moment, the lint checker only checks stability in\n+        // in the arguments of macros.\n+        // Eventually, we will want to lint the contents of the\n+        // macro in the module *defining* it. Also, stability levels\n+        // on macros themselves are not yet linted.\n+        macro_test_arg!(deprecated_text());\n+        macro_test_arg!(macro_test_arg!(deprecated_text()));\n+    }\n+\n+    fn test_method_param<Foo: Trait>(foo: Foo) {\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n+        foo.trait_deprecated_unstable();\n+        //~^ ERROR use of unstable library feature\n+        <Foo>::trait_deprecated_unstable(&foo);\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_deprecated_unstable_text();\n+        //~^ ERROR use of unstable library feature\n+        <Foo>::trait_deprecated_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n+        foo.trait_unstable_text();\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        <Foo>::trait_unstable_text(&foo);\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+    }\n+\n+    fn test_method_object(foo: &Trait) {\n+        foo.trait_deprecated();\n+        foo.trait_deprecated_text();\n+        foo.trait_deprecated_unstable();\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_deprecated_unstable_text();\n+        //~^ ERROR use of unstable library feature\n+        foo.trait_unstable(); //~ ERROR use of unstable library feature\n+        foo.trait_unstable_text();\n+        //~^ ERROR use of unstable library feature 'test_feature': text\n+        foo.trait_stable();\n+    }\n+\n+    struct S;\n+\n+    impl DeprecatedTrait for S {}\n+    trait LocalTrait2 : DeprecatedTrait { }\n+}\n+\n+mod this_crate {\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub fn deprecated() {}\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub fn deprecated_text() {}\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub fn unstable() {}\n+    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    pub fn unstable_text() {}\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn stable() {}\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn stable_text() {}\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct MethodTester;\n+\n+    impl MethodTester {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        pub fn method_deprecated(&self) {}\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        pub fn method_deprecated_text(&self) {}\n+\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        pub fn method_unstable(&self) {}\n+        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        pub fn method_unstable_text(&self) {}\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn method_stable(&self) {}\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn method_stable_text(&self) {}\n+    }\n+\n+    pub trait Trait {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        fn trait_deprecated(&self) {}\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        fn trait_deprecated_text(&self) {}\n+\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        fn trait_unstable(&self) {}\n+        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        fn trait_unstable_text(&self) {}\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn trait_stable(&self) {}\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn trait_stable_text(&self) {}\n+    }\n+\n+    impl Trait for MethodTester {}\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub struct DeprecatedStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub struct UnstableStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct StableStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub struct DeprecatedUnitStruct;\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub struct UnstableUnitStruct;\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct StableUnitStruct;\n+\n+    pub enum Enum {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        DeprecatedVariant,\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        UnstableVariant,\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        StableVariant,\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub struct DeprecatedTupleStruct(isize);\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub struct UnstableTupleStruct(isize);\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct StableTupleStruct(isize);\n+\n+    fn test() {\n+        // Only the deprecated cases of the following should generate\n+        // errors, because other stability attributes now have meaning\n+        // only *across* crates, not within a single crate.\n+\n+        type Foo = MethodTester;\n+        let foo = MethodTester;\n+\n+        deprecated();\n+        foo.method_deprecated();\n+        Foo::method_deprecated(&foo);\n+        <Foo>::method_deprecated(&foo);\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+\n+        deprecated_text();\n+        foo.method_deprecated_text();\n+        Foo::method_deprecated_text(&foo);\n+        <Foo>::method_deprecated_text(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n+\n+        unstable();\n+        foo.method_unstable();\n+        Foo::method_unstable(&foo);\n+        <Foo>::method_unstable(&foo);\n+        foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n+\n+        unstable_text();\n+        foo.method_unstable_text();\n+        Foo::method_unstable_text(&foo);\n+        <Foo>::method_unstable_text(&foo);\n+        foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+\n+        stable();\n+        foo.method_stable();\n+        Foo::method_stable(&foo);\n+        <Foo>::method_stable(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+\n+        stable_text();\n+        foo.method_stable_text();\n+        Foo::method_stable_text(&foo);\n+        <Foo>::method_stable_text(&foo);\n+        foo.trait_stable_text();\n+        Trait::trait_stable_text(&foo);\n+        <Foo>::trait_stable_text(&foo);\n+        <Foo as Trait>::trait_stable_text(&foo);\n+\n+        let _ = DeprecatedStruct {\n+            i: 0\n+        };\n+        let _ = UnstableStruct { i: 0 };\n+        let _ = StableStruct { i: 0 };\n+\n+        let _ = DeprecatedUnitStruct;\n+        let _ = UnstableUnitStruct;\n+        let _ = StableUnitStruct;\n+\n+        let _ = Enum::DeprecatedVariant;\n+        let _ = Enum::UnstableVariant;\n+        let _ = Enum::StableVariant;\n+\n+        let _ = DeprecatedTupleStruct (1);\n+        let _ = UnstableTupleStruct (1);\n+        let _ = StableTupleStruct (1);\n+    }\n+\n+    fn test_method_param<Foo: Trait>(foo: Foo) {\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n+        foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n+        foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+    }\n+\n+    fn test_method_object(foo: &Trait) {\n+        foo.trait_deprecated();\n+        foo.trait_deprecated_text();\n+        foo.trait_unstable();\n+        foo.trait_unstable_text();\n+        foo.trait_stable();\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    fn test_fn_body() {\n+        fn fn_in_body() {}\n+        fn_in_body();\n+    }\n+\n+    impl MethodTester {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        fn test_method_body(&self) {\n+            fn fn_in_body() {}\n+            fn_in_body();\n+        }\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub trait DeprecatedTrait {\n+        fn dummy(&self) { }\n+    }\n+\n+    struct S;\n+\n+    impl DeprecatedTrait for S { }\n+\n+    trait LocalTrait : DeprecatedTrait { }\n+}\n+\n+fn main() {}"}, {"sha": "d8813b6a6101a377179e2fe1da648099f5085166", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "added", "additions": 467, "deletions": 0, "changes": 467, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -0,0 +1,467 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint_stability.rs\n+// aux-build:inherited_stability.rs\n+// aux-build:stability_cfg1.rs\n+// aux-build:stability_cfg2.rs\n+\n+#![deny(deprecated)]\n+#![allow(dead_code)]\n+#![feature(staged_api, test_feature)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[macro_use]\n+extern crate lint_stability;\n+\n+mod cross_crate {\n+    extern crate stability_cfg1;\n+    extern crate stability_cfg2;\n+\n+    use lint_stability::*;\n+\n+    fn test() {\n+        type Foo = MethodTester;\n+        let foo = MethodTester;\n+\n+        deprecated(); //~ ERROR use of deprecated item\n+        foo.method_deprecated(); //~ ERROR use of deprecated item\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+\n+        deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+\n+        deprecated_unstable(); //~ ERROR use of deprecated item\n+        foo.method_deprecated_unstable(); //~ ERROR use of deprecated item\n+        Foo::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        <Foo>::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+\n+        deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        foo.method_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        Foo::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+\n+        unstable();\n+        foo.method_unstable();\n+        Foo::method_unstable(&foo);\n+        <Foo>::method_unstable(&foo);\n+        foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n+\n+        unstable_text();\n+        foo.method_unstable_text();\n+        Foo::method_unstable_text(&foo);\n+        <Foo>::method_unstable_text(&foo);\n+        foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+\n+        stable();\n+        foo.method_stable();\n+        Foo::method_stable(&foo);\n+        <Foo>::method_stable(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+\n+        stable_text();\n+        foo.method_stable_text();\n+        Foo::method_stable_text(&foo);\n+        <Foo>::method_stable_text(&foo);\n+        foo.trait_stable_text();\n+        Trait::trait_stable_text(&foo);\n+        <Foo>::trait_stable_text(&foo);\n+        <Foo as Trait>::trait_stable_text(&foo);\n+\n+        struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n+        struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n+        //~^ ERROR use of deprecated item\n+\n+        let _ = DeprecatedStruct { //~ ERROR use of deprecated item\n+            i: 0 //~ ERROR use of deprecated item\n+        };\n+        let _ = DeprecatedUnstableStruct {\n+            //~^ ERROR use of deprecated item\n+            i: 0 //~ ERROR use of deprecated item\n+        };\n+        let _ = UnstableStruct { i: 0 };\n+        let _ = StableStruct { i: 0 };\n+\n+        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnstableUnitStruct; //~ ERROR use of deprecated item\n+        let _ = UnstableUnitStruct;\n+        let _ = StableUnitStruct;\n+\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::DeprecatedUnstableVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::UnstableVariant;\n+        let _ = Enum::StableVariant;\n+\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnstableTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = UnstableTupleStruct (1);\n+        let _ = StableTupleStruct (1);\n+\n+        // At the moment, the lint checker only checks stability in\n+        // in the arguments of macros.\n+        // Eventually, we will want to lint the contents of the\n+        // macro in the module *defining* it. Also, stability levels\n+        // on macros themselves are not yet linted.\n+        macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(deprecated_unstable_text()); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n+    }\n+\n+    fn test_method_param<Foo: Trait>(foo: Foo) {\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n+        foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+    }\n+\n+    fn test_method_object(foo: &Trait) {\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_unstable();\n+        foo.trait_unstable_text();\n+        foo.trait_stable();\n+    }\n+\n+    struct S;\n+\n+    impl UnstableTrait for S { }\n+    impl DeprecatedTrait for S {} //~ ERROR use of deprecated item: text\n+    trait LocalTrait : UnstableTrait { }\n+    trait LocalTrait2 : DeprecatedTrait { } //~ ERROR use of deprecated item: text\n+\n+    impl Trait for S {\n+        fn trait_stable(&self) {}\n+        fn trait_unstable(&self) {}\n+    }\n+}\n+\n+mod inheritance {\n+    extern crate inherited_stability;\n+    use self::inherited_stability::*;\n+\n+    fn test_inheritance() {\n+        unstable();\n+        stable();\n+\n+        stable_mod::unstable();\n+        stable_mod::stable();\n+\n+        unstable_mod::deprecated(); //~ ERROR use of deprecated item\n+        unstable_mod::unstable();\n+\n+        let _ = Unstable::UnstableVariant;\n+        let _ = Unstable::StableVariant;\n+\n+        let x: usize = 0;\n+        x.unstable();\n+        x.stable();\n+    }\n+}\n+\n+mod this_crate {\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub fn deprecated() {}\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub fn deprecated_text() {}\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub fn unstable() {}\n+    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    pub fn unstable_text() {}\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn stable() {}\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn stable_text() {}\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct MethodTester;\n+\n+    impl MethodTester {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        pub fn method_deprecated(&self) {}\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        pub fn method_deprecated_text(&self) {}\n+\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        pub fn method_unstable(&self) {}\n+        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        pub fn method_unstable_text(&self) {}\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn method_stable(&self) {}\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn method_stable_text(&self) {}\n+    }\n+\n+    pub trait Trait {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        fn trait_deprecated(&self) {}\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        fn trait_deprecated_text(&self) {}\n+\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        fn trait_unstable(&self) {}\n+        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        fn trait_unstable_text(&self) {}\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn trait_stable(&self) {}\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        fn trait_stable_text(&self) {}\n+    }\n+\n+    impl Trait for MethodTester {}\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub struct DeprecatedStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub struct UnstableStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct StableStruct {\n+        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub struct DeprecatedUnitStruct;\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub struct UnstableUnitStruct;\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct StableUnitStruct;\n+\n+    pub enum Enum {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        DeprecatedVariant,\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        UnstableVariant,\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        StableVariant,\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub struct DeprecatedTupleStruct(isize);\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    pub struct UnstableTupleStruct(isize);\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub struct StableTupleStruct(isize);\n+\n+    fn test() {\n+        // Only the deprecated cases of the following should generate\n+        // errors, because other stability attributes now have meaning\n+        // only *across* crates, not within a single crate.\n+\n+        type Foo = MethodTester;\n+        let foo = MethodTester;\n+\n+        deprecated(); //~ ERROR use of deprecated item\n+        foo.method_deprecated(); //~ ERROR use of deprecated item\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+\n+        deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+\n+        unstable();\n+        foo.method_unstable();\n+        Foo::method_unstable(&foo);\n+        <Foo>::method_unstable(&foo);\n+        foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n+\n+        unstable_text();\n+        foo.method_unstable_text();\n+        Foo::method_unstable_text(&foo);\n+        <Foo>::method_unstable_text(&foo);\n+        foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+\n+        stable();\n+        foo.method_stable();\n+        Foo::method_stable(&foo);\n+        <Foo>::method_stable(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+\n+        stable_text();\n+        foo.method_stable_text();\n+        Foo::method_stable_text(&foo);\n+        <Foo>::method_stable_text(&foo);\n+        foo.trait_stable_text();\n+        Trait::trait_stable_text(&foo);\n+        <Foo>::trait_stable_text(&foo);\n+        <Foo as Trait>::trait_stable_text(&foo);\n+\n+        let _ = DeprecatedStruct {\n+            //~^ ERROR use of deprecated item\n+            i: 0 //~ ERROR use of deprecated item\n+        };\n+        let _ = UnstableStruct { i: 0 };\n+        let _ = StableStruct { i: 0 };\n+\n+        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n+        let _ = UnstableUnitStruct;\n+        let _ = StableUnitStruct;\n+\n+        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::UnstableVariant;\n+        let _ = Enum::StableVariant;\n+\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = UnstableTupleStruct (1);\n+        let _ = StableTupleStruct (1);\n+    }\n+\n+    fn test_method_param<Foo: Trait>(foo: Foo) {\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n+        foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+        foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n+    }\n+\n+    fn test_method_object(foo: &Trait) {\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_unstable();\n+        foo.trait_unstable_text();\n+        foo.trait_stable();\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    fn test_fn_body() {\n+        fn fn_in_body() {}\n+        fn_in_body(); //~ ERROR use of deprecated item: text\n+    }\n+\n+    impl MethodTester {\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        fn test_method_body(&self) {\n+            fn fn_in_body() {}\n+            fn_in_body(); //~ ERROR use of deprecated item: text\n+        }\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub trait DeprecatedTrait {\n+        fn dummy(&self) { }\n+    }\n+\n+    struct S;\n+\n+    impl DeprecatedTrait for S { } //~ ERROR use of deprecated item\n+\n+    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item\n+}\n+\n+fn main() {}"}, {"sha": "5da3e1a930d7dd6e98fc7119fc506399f422fd72", "filename": "src/test/compile-fail/lint-stability-fields-deprecated.rs", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-fields-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-fields-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields-deprecated.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -0,0 +1,348 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint_stability_fields.rs\n+#![deny(deprecated)]\n+#![allow(dead_code)]\n+#![feature(staged_api, test_feature)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+mod cross_crate {\n+    extern crate lint_stability_fields;\n+\n+    use self::lint_stability_fields::*;\n+\n+    pub fn foo() {\n+        let x = Stable {\n+            inherit: 1,\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Stable {\n+            inherit: _,\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+        // all fine\n+        let Stable { .. } = x;\n+\n+        let x = Stable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Stable2(_,\n+                   _,\n+                   _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        // all fine\n+        let Stable2(..) = x;\n+\n+\n+        let x = Unstable {\n+            inherit: 1,\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Unstable {\n+            inherit: _,\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+\n+        let Unstable\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+\n+        let x = Unstable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Unstable2\n+            (_,\n+             _,\n+             _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        let Unstable2\n+            // the patterns are all fine:\n+            (..) = x;\n+\n+\n+        let x = Deprecated {\n+            //~^ ERROR use of deprecated item\n+            inherit: 1,\n+            //~^ ERROR use of deprecated item\n+            override1: 2,\n+            //~^ ERROR use of deprecated item\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.override1;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Deprecated {\n+            //~^ ERROR use of deprecated item\n+            inherit: _,\n+            //~^ ERROR use of deprecated item\n+            override1: _,\n+            //~^ ERROR use of deprecated item\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+\n+        let Deprecated\n+            //~^ ERROR use of deprecated item\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+        let x = Deprecated2(1, 2, 3);\n+        //~^ ERROR use of deprecated item\n+\n+        let _ = x.0;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.1;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+            (_,\n+             //~^ ERROR use of deprecated item\n+             _,\n+             //~^ ERROR use of deprecated item\n+             _)\n+             //~^ ERROR use of deprecated item\n+            = x;\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+            // the patterns are all fine:\n+            (..) = x;\n+    }\n+}\n+\n+mod this_crate {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    struct Stable {\n+        inherit: u8,\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        override1: u8,\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        override2: u8,\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    struct Stable2(u8,\n+                   #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n+                   #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                   #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    struct Unstable {\n+        inherit: u8,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        override1: u8,\n+        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        override2: u8,\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    struct Unstable2(u8,\n+                     #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n+                     #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    struct Deprecated {\n+        inherit: u8,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        override1: u8,\n+        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        override2: u8,\n+    }\n+\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    struct Deprecated2(u8,\n+                       #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n+                       #[unstable(feature = \"test_feature\", issue = \"0\")] u8);\n+\n+    pub fn foo() {\n+        let x = Stable {\n+            inherit: 1,\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Stable {\n+            inherit: _,\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+        // all fine\n+        let Stable { .. } = x;\n+\n+        let x = Stable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Stable2(_,\n+                   _,\n+                   _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        // all fine\n+        let Stable2(..) = x;\n+\n+\n+        let x = Unstable {\n+            inherit: 1,\n+            override1: 2,\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        let _ = x.override1;\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Unstable {\n+            inherit: _,\n+            override1: _,\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+\n+        let Unstable\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+\n+        let x = Unstable2(1, 2, 3);\n+\n+        let _ = x.0;\n+        let _ = x.1;\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Unstable2\n+            (_,\n+             _,\n+             _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        let Unstable2\n+            // the patterns are all fine:\n+            (..) = x;\n+\n+\n+        let x = Deprecated {\n+            //~^ ERROR use of deprecated item\n+            inherit: 1,\n+            //~^ ERROR use of deprecated item\n+            override1: 2,\n+            //~^ ERROR use of deprecated item\n+            override2: 3,\n+            //~^ ERROR use of deprecated item\n+        };\n+\n+        let _ = x.inherit;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.override1;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.override2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Deprecated {\n+            //~^ ERROR use of deprecated item\n+            inherit: _,\n+            //~^ ERROR use of deprecated item\n+            override1: _,\n+            //~^ ERROR use of deprecated item\n+            override2: _\n+            //~^ ERROR use of deprecated item\n+        } = x;\n+\n+        let Deprecated\n+            //~^ ERROR use of deprecated item\n+            // the patterns are all fine:\n+            { .. } = x;\n+\n+        let x = Deprecated2(1, 2, 3);\n+        //~^ ERROR use of deprecated item\n+\n+        let _ = x.0;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.1;\n+        //~^ ERROR use of deprecated item\n+        let _ = x.2;\n+        //~^ ERROR use of deprecated item\n+\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+            (_,\n+             //~^ ERROR use of deprecated item\n+             _,\n+             //~^ ERROR use of deprecated item\n+             _)\n+            //~^ ERROR use of deprecated item\n+            = x;\n+        let Deprecated2\n+        //~^ ERROR use of deprecated item\n+            // the patterns are all fine:\n+            (..) = x;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1b605bdb89396567f6fc4e34d929a1c01b02cb5f", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 27, "deletions": 115, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:lint_stability_fields.rs\n-#![deny(deprecated)]\n+#![allow(deprecated)]\n #![allow(dead_code)]\n #![feature(staged_api)]\n \n@@ -24,23 +24,17 @@ mod cross_crate {\n         let x = Stable {\n             inherit: 1,\n             override1: 2, //~ ERROR use of unstable\n-            override2: 3,\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+            override2: 3, //~ ERROR use of unstable\n         };\n \n         let _ = x.inherit;\n         let _ = x.override1; //~ ERROR use of unstable\n-        let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.override2; //~ ERROR use of unstable\n \n         let Stable {\n             inherit: _,\n             override1: _, //~ ERROR use of unstable\n-            override2: _\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+            override2: _ //~ ERROR use of unstable\n         } = x;\n         // all fine\n         let Stable { .. } = x;\n@@ -49,15 +43,11 @@ mod cross_crate {\n \n         let _ = x.0;\n         let _ = x.1; //~ ERROR use of unstable\n-        let _ = x.2;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.2; //~ ERROR use of unstable\n \n         let Stable2(_,\n                    _, //~ ERROR use of unstable\n-                   _)\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+                   _) //~ ERROR use of unstable\n             = x;\n         // all fine\n         let Stable2(..) = x;\n@@ -66,23 +56,17 @@ mod cross_crate {\n         let x = Unstable { //~ ERROR use of unstable\n             inherit: 1, //~ ERROR use of unstable\n             override1: 2,\n-            override2: 3,\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+            override2: 3, //~ ERROR use of unstable\n         };\n \n         let _ = x.inherit; //~ ERROR use of unstable\n         let _ = x.override1;\n-        let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.override2; //~ ERROR use of unstable\n \n         let Unstable { //~ ERROR use of unstable\n             inherit: _, //~ ERROR use of unstable\n             override1: _,\n-            override2: _\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+            override2: _ //~ ERROR use of unstable\n         } = x;\n \n         let Unstable  //~ ERROR use of unstable\n@@ -94,91 +78,50 @@ mod cross_crate {\n \n         let _ = x.0; //~ ERROR use of unstable\n         let _ = x.1;\n-        let _ = x.2;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.2; //~ ERROR use of unstable\n \n         let Unstable2  //~ ERROR use of unstable\n             (_, //~ ERROR use of unstable\n              _,\n-             _)\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+             _) //~ ERROR use of unstable\n             = x;\n         let Unstable2 //~ ERROR use of unstable\n             // the patterns are all fine:\n             (..) = x;\n \n \n-        let x = Deprecated {\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n-            inherit: 1,\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+        let x = Deprecated { //~ ERROR use of unstable\n+            inherit: 1, //~ ERROR use of unstable\n             override1: 2,\n-            //~^ ERROR use of deprecated item\n-            override2: 3,\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+            override2: 3, //~ ERROR use of unstable\n         };\n \n-        let _ = x.inherit;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.inherit; //~ ERROR use of unstable\n         let _ = x.override1;\n-        //~^ ERROR use of deprecated item\n-        let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.override2; //~ ERROR use of unstable\n \n-        let Deprecated {\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n-            inherit: _,\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+        let Deprecated { //~ ERROR use of unstable\n+            inherit: _, //~ ERROR use of unstable\n             override1: _,\n-            //~^ ERROR use of deprecated item\n-            override2: _\n-            //~^ ERROR use of unstable\n-            //~^^ ERROR use of deprecated item\n+            override2: _ //~ ERROR use of unstable\n         } = x;\n \n-        let Deprecated\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable\n+        let Deprecated //~ ERROR use of unstable\n             // the patterns are all fine:\n             { .. } = x;\n \n-        let x = Deprecated2(1, 2, 3);\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let x = Deprecated2(1, 2, 3); //~ ERROR use of unstable\n \n-        let _ = x.0;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.0; //~ ERROR use of unstable\n         let _ = x.1;\n-        //~^ ERROR use of deprecated item\n-        let _ = x.2;\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let _ = x.2; //~ ERROR use of unstable\n \n-        let Deprecated2\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n-            (_,\n-             //~^ ERROR use of deprecated item\n-             //~^^ ERROR use of unstable\n+        let Deprecated2 //~ ERROR use of unstable\n+            (_, //~ ERROR use of unstable\n              _,\n-             //~^ ERROR use of deprecated item\n-             _)\n-             //~^ ERROR use of deprecated item\n-             //~^^ ERROR use of unstable\n+             _) //~ ERROR use of unstable\n             = x;\n-        let Deprecated2\n-        //~^ ERROR use of deprecated item\n-        //~^^ ERROR use of unstable\n+        let Deprecated2 //~ ERROR use of unstable\n             // the patterns are all fine:\n             (..) = x;\n     }\n@@ -238,19 +181,16 @@ mod this_crate {\n             inherit: 1,\n             override1: 2,\n             override2: 3,\n-            //~^ ERROR use of deprecated item\n         };\n \n         let _ = x.inherit;\n         let _ = x.override1;\n         let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n \n         let Stable {\n             inherit: _,\n             override1: _,\n             override2: _\n-            //~^ ERROR use of deprecated item\n         } = x;\n         // all fine\n         let Stable { .. } = x;\n@@ -260,12 +200,10 @@ mod this_crate {\n         let _ = x.0;\n         let _ = x.1;\n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n \n         let Stable2(_,\n                    _,\n                    _)\n-            //~^ ERROR use of deprecated item\n             = x;\n         // all fine\n         let Stable2(..) = x;\n@@ -275,19 +213,16 @@ mod this_crate {\n             inherit: 1,\n             override1: 2,\n             override2: 3,\n-            //~^ ERROR use of deprecated item\n         };\n \n         let _ = x.inherit;\n         let _ = x.override1;\n         let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n \n         let Unstable {\n             inherit: _,\n             override1: _,\n             override2: _\n-            //~^ ERROR use of deprecated item\n         } = x;\n \n         let Unstable\n@@ -300,72 +235,49 @@ mod this_crate {\n         let _ = x.0;\n         let _ = x.1;\n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n \n         let Unstable2\n             (_,\n              _,\n              _)\n-            //~^ ERROR use of deprecated item\n             = x;\n         let Unstable2\n             // the patterns are all fine:\n             (..) = x;\n \n \n         let x = Deprecated {\n-            //~^ ERROR use of deprecated item\n             inherit: 1,\n-            //~^ ERROR use of deprecated item\n             override1: 2,\n-            //~^ ERROR use of deprecated item\n             override2: 3,\n-            //~^ ERROR use of deprecated item\n         };\n \n         let _ = x.inherit;\n-        //~^ ERROR use of deprecated item\n         let _ = x.override1;\n-        //~^ ERROR use of deprecated item\n         let _ = x.override2;\n-        //~^ ERROR use of deprecated item\n \n         let Deprecated {\n-            //~^ ERROR use of deprecated item\n             inherit: _,\n-            //~^ ERROR use of deprecated item\n             override1: _,\n-            //~^ ERROR use of deprecated item\n             override2: _\n-            //~^ ERROR use of deprecated item\n         } = x;\n \n         let Deprecated\n-            //~^ ERROR use of deprecated item\n             // the patterns are all fine:\n             { .. } = x;\n \n         let x = Deprecated2(1, 2, 3);\n-        //~^ ERROR use of deprecated item\n \n         let _ = x.0;\n-        //~^ ERROR use of deprecated item\n         let _ = x.1;\n-        //~^ ERROR use of deprecated item\n         let _ = x.2;\n-        //~^ ERROR use of deprecated item\n \n         let Deprecated2\n-        //~^ ERROR use of deprecated item\n             (_,\n-             //~^ ERROR use of deprecated item\n              _,\n-             //~^ ERROR use of deprecated item\n              _)\n-            //~^ ERROR use of deprecated item\n             = x;\n         let Deprecated2\n-        //~^ ERROR use of deprecated item\n             // the patterns are all fine:\n             (..) = x;\n     }"}, {"sha": "1ece7a0b8e33423fa8330ea213a79b733a82487a", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 90, "deletions": 150, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -13,7 +13,7 @@\n // aux-build:stability_cfg1.rs\n // aux-build:stability_cfg2.rs\n \n-#![deny(deprecated)]\n+#![allow(deprecated)]\n #![allow(dead_code)]\n #![feature(staged_api)]\n \n@@ -32,81 +32,46 @@ mod cross_crate {\n         type Foo = MethodTester;\n         let foo = MethodTester;\n \n-        deprecated(); //~ ERROR use of deprecated item\n-        foo.method_deprecated(); //~ ERROR use of deprecated item\n-        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-\n-        deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-\n-        deprecated_unstable(); //~ ERROR use of deprecated item\n+        deprecated();\n+        foo.method_deprecated();\n+        Foo::method_deprecated(&foo);\n+        <Foo>::method_deprecated(&foo);\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+\n+        deprecated_text();\n+        foo.method_deprecated_text();\n+        Foo::method_deprecated_text(&foo);\n+        <Foo>::method_deprecated_text(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n+\n+        deprecated_unstable();\n         //~^ ERROR use of unstable library feature\n-        foo.method_deprecated_unstable(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated_unstable(&foo);\n         //~^ ERROR use of unstable library feature\n-        Foo::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        <Foo>::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated_unstable(&foo);\n         //~^ ERROR use of unstable library feature\n \n-        deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ ERROR use of unstable library feature\n-        foo.method_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ ERROR use of unstable library feature\n-        Foo::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ ERROR use of unstable library feature\n-        <Foo>::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ ERROR use of unstable library feature\n-        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        deprecated_unstable_text();\n         //~^ ERROR use of unstable library feature\n-        Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature\n-        <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n-        //~^ ERROR use of unstable library feature\n-        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature\n \n         unstable(); //~ ERROR use of unstable library feature\n-        foo.method_unstable(); //~ ERROR use of unstable library feature\n-        Foo::method_unstable(&foo); //~ ERROR use of unstable library feature\n-        <Foo>::method_unstable(&foo); //~ ERROR use of unstable library feature\n-        foo.trait_unstable(); //~ ERROR use of unstable library feature\n         Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n-        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n \n         unstable_text();\n         //~^ ERROR use of unstable library feature 'test_feature': text\n-        foo.method_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n-        Foo::method_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n-        <Foo>::method_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n-        foo.trait_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n         Trait::trait_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature 'test_feature': text\n-        <Foo>::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature 'test_feature': text\n \n@@ -131,33 +96,31 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         //~^ ERROR use of unstable library feature\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n-        //~^ ERROR use of deprecated item\n \n-        let _ = DeprecatedStruct { //~ ERROR use of deprecated item\n-            i: 0 //~ ERROR use of deprecated item\n+        let _ = DeprecatedStruct {\n+            i: 0\n         };\n         let _ = DeprecatedUnstableStruct {\n-            //~^ ERROR use of deprecated item\n-            //~^^ ERROR use of unstable library feature\n-            i: 0 //~ ERROR use of deprecated item\n+            //~^ ERROR use of unstable library feature\n+            i: 0\n         };\n         let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable library feature\n         let _ = StableStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n-        let _ = DeprecatedUnstableUnitStruct; //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnitStruct;\n+        let _ = DeprecatedUnstableUnitStruct;\n         //~^ ERROR use of unstable library feature\n         let _ = UnstableUnitStruct; //~ ERROR use of unstable library feature\n         let _ = StableUnitStruct;\n \n-        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n-        let _ = Enum::DeprecatedUnstableVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::DeprecatedVariant;\n+        let _ = Enum::DeprecatedUnstableVariant;\n         //~^ ERROR use of unstable library feature\n         let _ = Enum::UnstableVariant; //~ ERROR use of unstable library feature\n         let _ = Enum::StableVariant;\n \n-        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n-        let _ = DeprecatedUnstableTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = DeprecatedTupleStruct (1);\n+        let _ = DeprecatedUnstableTupleStruct (1);\n         //~^ ERROR use of unstable library feature\n         let _ = UnstableTupleStruct (1); //~ ERROR use of unstable library feature\n         let _ = StableTupleStruct (1);\n@@ -167,47 +130,33 @@ mod cross_crate {\n         // Eventually, we will want to lint the contents of the\n         // macro in the module *defining* it. Also, stability levels\n         // on macros themselves are not yet linted.\n-        macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n-        macro_test_arg!(deprecated_unstable_text()); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(deprecated_text());\n+        macro_test_arg!(deprecated_unstable_text());\n         //~^ ERROR use of unstable library feature\n-        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(macro_test_arg!(deprecated_text()));\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n+        Trait::trait_deprecated_unstable(&foo);\n         //~^ ERROR use of unstable library feature\n-        Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_unstable(&foo);\n         //~^ ERROR use of unstable library feature\n-        <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature\n-        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature\n-        foo.trait_unstable(); //~ ERROR use of unstable library feature\n         Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n-        <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n-        foo.trait_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n         Trait::trait_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature 'test_feature': text\n-        <Foo>::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n         //~^ ERROR use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n@@ -217,24 +166,17 @@ mod cross_crate {\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n-        //~^ ERROR use of unstable library feature\n-        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n-        //~^ ERROR use of unstable library feature\n-        foo.trait_unstable(); //~ ERROR use of unstable library feature\n-        foo.trait_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        foo.trait_deprecated();\n+        foo.trait_deprecated_text();\n         foo.trait_stable();\n     }\n \n     struct S;\n \n     impl UnstableTrait for S { } //~ ERROR use of unstable library feature\n-    impl DeprecatedTrait for S {} //~ ERROR use of deprecated item: text\n+    impl DeprecatedTrait for S {}\n     trait LocalTrait : UnstableTrait { } //~ ERROR use of unstable library feature\n-    trait LocalTrait2 : DeprecatedTrait { } //~ ERROR use of deprecated item: text\n+    trait LocalTrait2 : DeprecatedTrait { }\n \n     impl Trait for S {\n         fn trait_stable(&self) {}\n@@ -253,14 +195,13 @@ mod inheritance {\n         stable_mod::unstable(); //~ ERROR use of unstable library feature\n         stable_mod::stable();\n \n-        unstable_mod::deprecated(); //~ ERROR use of deprecated item\n+        unstable_mod::deprecated();\n         unstable_mod::unstable(); //~ ERROR use of unstable library feature\n \n         let _ = Unstable::UnstableVariant; //~ ERROR use of unstable library feature\n         let _ = Unstable::StableVariant;\n \n         let x: usize = 0;\n-        x.unstable(); //~ ERROR use of unstable library feature\n         x.stable();\n     }\n }\n@@ -375,23 +316,23 @@ mod this_crate {\n         type Foo = MethodTester;\n         let foo = MethodTester;\n \n-        deprecated(); //~ ERROR use of deprecated item\n-        foo.method_deprecated(); //~ ERROR use of deprecated item\n-        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-\n-        deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        deprecated();\n+        foo.method_deprecated();\n+        Foo::method_deprecated(&foo);\n+        <Foo>::method_deprecated(&foo);\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+\n+        deprecated_text();\n+        foo.method_deprecated_text();\n+        Foo::method_deprecated_text(&foo);\n+        <Foo>::method_deprecated_text(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n \n         unstable();\n         foo.method_unstable();\n@@ -430,34 +371,33 @@ mod this_crate {\n         <Foo as Trait>::trait_stable_text(&foo);\n \n         let _ = DeprecatedStruct {\n-            //~^ ERROR use of deprecated item\n-            i: 0 //~ ERROR use of deprecated item\n+            i: 0\n         };\n         let _ = UnstableStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnitStruct;\n         let _ = UnstableUnitStruct;\n         let _ = StableUnitStruct;\n \n-        let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::DeprecatedVariant;\n         let _ = Enum::UnstableVariant;\n         let _ = Enum::StableVariant;\n \n-        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = DeprecatedTupleStruct (1);\n         let _ = UnstableTupleStruct (1);\n         let _ = StableTupleStruct (1);\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated();\n+        Trait::trait_deprecated(&foo);\n+        <Foo>::trait_deprecated(&foo);\n+        <Foo as Trait>::trait_deprecated(&foo);\n+        foo.trait_deprecated_text();\n+        Trait::trait_deprecated_text(&foo);\n+        <Foo>::trait_deprecated_text(&foo);\n+        <Foo as Trait>::trait_deprecated_text(&foo);\n         foo.trait_unstable();\n         Trait::trait_unstable(&foo);\n         <Foo>::trait_unstable(&foo);\n@@ -473,8 +413,8 @@ mod this_crate {\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated();\n+        foo.trait_deprecated_text();\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n         foo.trait_stable();\n@@ -484,15 +424,15 @@ mod this_crate {\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n-        fn_in_body(); //~ ERROR use of deprecated item: text\n+        fn_in_body();\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n-            fn_in_body(); //~ ERROR use of deprecated item: text\n+            fn_in_body();\n         }\n     }\n \n@@ -504,9 +444,9 @@ mod this_crate {\n \n     struct S;\n \n-    impl DeprecatedTrait for S { } //~ ERROR use of deprecated item\n+    impl DeprecatedTrait for S { }\n \n-    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item\n+    trait LocalTrait : DeprecatedTrait { }\n }\n \n fn main() {}"}, {"sha": "e24441c5497d512d1c605bb60c85fcf0365e21b0", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(box_syntax)]\n \n-extern crate collections;\n-\n use std::collections::HashMap;\n \n trait Map<K, V>"}, {"sha": "f3c9f29821ebb6c3b96f003270ad7b64c38c8f3b", "filename": "src/test/compile-fail/mir-dataflow/def-inits-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Fdef-inits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Fdef-inits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Fdef-inits-1.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -10,7 +10,7 @@\n \n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(rustc_attrs)]\n+#![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;\n use std::mem::{drop, replace};"}, {"sha": "8a5ab6e420adefb0ff83d298dc2f116844013cb7", "filename": "src/test/compile-fail/mir-dataflow/inits-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Finits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Finits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Finits-1.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -10,7 +10,7 @@\n \n // General test of maybe_inits state computed by MIR dataflow.\n \n-#![feature(rustc_attrs)]\n+#![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;\n use std::mem::{drop, replace};"}, {"sha": "8df66ea815c68800b80e2f6debc653fc74ba192c", "filename": "src/test/compile-fail/mir-dataflow/uninits-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-1.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -10,7 +10,7 @@\n \n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(rustc_attrs)]\n+#![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;\n use std::mem::{drop, replace};"}, {"sha": "2edd275e78691e59d73dd362ebdcf52d6c3f363f", "filename": "src/test/compile-fail/mir-dataflow/uninits-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-dataflow%2Funinits-2.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -10,7 +10,7 @@\n \n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(rustc_attrs)]\n+#![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;\n use std::mem::{drop, replace};"}, {"sha": "4383f3ede0db5a1b87e6d177492fe5b918a87dab", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n fn main() {"}, {"sha": "1b8284debb49a7e965bc0d4ce800148dd6ecc679", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "7113224664b1fc63326a403815c80831cae42a77", "filename": "src/test/compile-fail/overloaded-calls-nontuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-nontuple.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "1d1153e951b7b1a373974fdf433e10610eb0008d", "filename": "src/test/compile-fail/range_inclusive_gate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -16,10 +16,8 @@\n pub fn main() {\n     let _: std::ops::RangeInclusive<_> = { use std::intrinsics; 1 } ... { use std::intrinsics; 2 };\n     //~^ ERROR use of unstable library feature 'inclusive_range'\n-    //~^^ ERROR core_intrinsics\n-    //~^^^ ERROR core_intrinsics\n-    //~^^^^ WARN unused_imports\n-    //~^^^^^ WARN unused_imports\n+    //~| ERROR core_intrinsics\n+    //~| ERROR core_intrinsics\n }\n \n "}, {"sha": "47da97daaffda1b0ed92d68b5c75d2302b648a50", "filename": "src/test/compile-fail/reflect-assoc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(reflect_marker)]\n+\n // Test that types that appear in assoc bindings in an object\n // type are subject to the reflect check.\n "}, {"sha": "be0dbd801b7966efc2bbb3e090fbbccc41c2cd10", "filename": "src/test/compile-fail/reflect-object-param.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(reflect_marker)]\n+\n // Test that types that appear in input types in an object type are\n // subject to the reflect check.\n "}, {"sha": "28ff7c82c2e0a02af568b87698d7da66de131ddc", "filename": "src/test/compile-fail/reflect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(reflect_marker)]\n+\n // Test that there is no way to get a generic type `T` to be\n // considered as `Reflect` (or accessible via something that is\n // considered `Reflect`) without a reflect bound, but that any"}, {"sha": "59fe1ce3af1af7e87e1549662ce28f896a62a977", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_traits)]\n+\n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,\n }"}, {"sha": "530dc873f750430e37aec712e9077e02c9513e73", "filename": "src/test/compile-fail/resolve_self_super_hint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(collections)]\n+\n mod a {\n     extern crate collections;\n     use collections::HashMap;"}, {"sha": "0ddc3a8dcebb8cd8f64d676a070025057a827d81", "filename": "src/test/compile-fail/stability-attribute-sanity-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -23,9 +23,4 @@ fn f2() { }\n #[unstable(feature = \"a\", issue = \"no\")] //~ ERROR incorrect 'issue'\n fn f3() { }\n \n-#[macro_export]\n-macro_rules! mac { //~ ERROR This node does not have a stability attribute\n-    () => ()\n-}\n-\n fn main() { }"}, {"sha": "ddefd24b92fd9f8091167c65fdc6f9b633d0ef6b", "filename": "src/test/compile-fail/stability-attribute-sanity-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-3.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// More checks that stability attributes are used correctly\n+\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+\n+#[macro_export]\n+macro_rules! mac { //~ ERROR This node does not have a stability attribute\n+    () => ()\n+}\n+\n+fn main() { }"}, {"sha": "f52b128e7e54ad697236bad90c0a3465dbcb70ea", "filename": "src/test/compile-fail/static-mut-foreign-requires-unsafe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(libc)]\n+\n extern crate libc;\n \n extern {"}, {"sha": "d85717f8ce55e104419a2dd5543005b502bfc377", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rand)]\n+\n // ensure that the ThreadRng isn't/doesn't become accidentally sendable.\n \n use std::__rand::ThreadRng;"}, {"sha": "2e865b2aac8fc822fa415f145d70b1e454cbafff", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -11,7 +11,7 @@\n // Checks that the Fn trait hierarchy rules do not permit\n // Fn to be used where FnMut is implemented.\n \n-#![feature(unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n #![feature(overloaded_calls)]\n \n use std::ops::{Fn,FnMut,FnOnce};"}, {"sha": "bfb24c58722959d33329f3d06b32b81412fd04d0", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_traits)]\n+\n // That a closure whose expected argument types include two distinct\n // bound regions.\n "}, {"sha": "433c0c839c580f90208f96504543d7e6cc179e53", "filename": "src/test/compile-fail/unboxed-closures-recursive-fn-using-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core,unboxed_closures)]\n+#![feature(core, fn_traits, unboxed_closures)]\n \n use std::marker::PhantomData;\n "}, {"sha": "01269714c16caea165d15def498158beeae44903", "filename": "src/test/ui/span/issue-23827.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aaf26e7aa4068d7e5643b136fb70ecd689a746d/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs?ref=9aaf26e7aa4068d7e5643b136fb70ecd689a746d", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for #23827\n \n-#![feature(core, unboxed_closures)]\n+#![feature(core, fn_traits, unboxed_closures)]\n \n pub struct Prototype {\n     pub target: u32"}]}