{"sha": "f0cd09814bac7aff3259ff543bef5397743cd572", "node_id": "C_kwDOAAsO6NoAKGYwY2QwOTgxNGJhYzdhZmYzMjU5ZmY1NDNiZWY1Mzk3NzQzY2Q1NzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T18:38:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T18:38:37Z"}, "message": "Auto merge of #2470 - RalfJung:macos-env, r=RalfJung\n\nsupport current_exe and home_dir on macOS\n\nalso fix write_os_str length logic", "tree": {"sha": "1d7dd788eccc18d4e6c7f38ef393bf4a8f5cae2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7dd788eccc18d4e6c7f38ef393bf4a8f5cae2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0cd09814bac7aff3259ff543bef5397743cd572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0cd09814bac7aff3259ff543bef5397743cd572", "html_url": "https://github.com/rust-lang/rust/commit/f0cd09814bac7aff3259ff543bef5397743cd572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0cd09814bac7aff3259ff543bef5397743cd572/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f633537f3e4d47a2e1f96daee68e1063e0da17d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f633537f3e4d47a2e1f96daee68e1063e0da17d4", "html_url": "https://github.com/rust-lang/rust/commit/f633537f3e4d47a2e1f96daee68e1063e0da17d4"}, {"sha": "79d147edb75299f9d4789b689f9c7f34a7db7709", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d147edb75299f9d4789b689f9c7f34a7db7709", "html_url": "https://github.com/rust-lang/rust/commit/79d147edb75299f9d4789b689f9c7f34a7db7709"}], "stats": {"total": 132, "additions": 86, "deletions": 46}, "files": [{"sha": "67cbed4f826d838617e501196a172e93057de093", "filename": "ci.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -80,7 +80,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n-    MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec current_dir data_race env\n+    MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec data_race env/var\n     MIRI_TEST_TARGET=thumbv7em-none-eabihf MIRI_NO_STD=1 run_tests_minimal no_std # no_std embedded architecture\n     ;;\n   x86_64-apple-darwin)"}, {"sha": "d333e78e5240f86d2b206adc1530434a51a5cf04", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -18,11 +18,11 @@ fn windows_check_buffer_size((success, len): (bool, u64)) -> u32 {\n     if success {\n         // If the function succeeds, the return value is the number of characters stored in the target buffer,\n         // not including the terminating null character.\n-        u32::try_from(len).unwrap()\n+        u32::try_from(len.checked_sub(1).unwrap()).unwrap()\n     } else {\n         // If the target buffer was not large enough to hold the data, the return value is the buffer size, in characters,\n         // required to hold the string and its terminating null character.\n-        u32::try_from(len.checked_add(1).unwrap()).unwrap()\n+        u32::try_from(len).unwrap()\n     }\n }\n "}, {"sha": "f99e2d174b5318141f9d183b9328046eb303126a", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -92,7 +92,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// the Unix APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n     /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does not include the null terminator.\n+    /// string length returned does include the null terminator.\n     fn write_os_str_to_c_str(\n         &mut self,\n         os_str: &OsStr,\n@@ -103,7 +103,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n         let string_length = u64::try_from(bytes.len()).unwrap();\n-        if size <= string_length {\n+        let string_length = string_length.checked_add(1).unwrap();\n+        if size < string_length {\n             return Ok((false, string_length));\n         }\n         self.eval_context_mut()\n@@ -115,7 +116,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n     /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does not include the null terminator.\n+    /// string length returned does include the null terminator. Length is measured in units of\n+    /// `u16.`\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n@@ -157,7 +159,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             alloc\n                 .write_scalar(alloc_range(size2 * offset, size2), Scalar::from_u16(wchar).into())?;\n         }\n-        Ok((true, string_length - 1))\n+        Ok((true, string_length))\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes."}, {"sha": "6ea10de0b8a83157d5c69db66e6aa5ee64d11d00", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -553,6 +553,42 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_int(super::UID, dest)?;\n             }\n \n+            \"getpwuid_r\" if this.frame_in_std() => {\n+                let [uid, pwd, buf, buflen, result] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`getpwuid_r`\")?;\n+\n+                let uid = this.read_scalar(uid)?.to_u32()?;\n+                let pwd = this.deref_operand(pwd)?;\n+                let buf = this.read_pointer(buf)?;\n+                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n+                let result = this.deref_operand(result)?;\n+\n+                // Must be for \"us\".\n+                if uid != crate::shims::unix::UID {\n+                    throw_unsup_format!(\"`getpwuid_r` on other users is not supported\");\n+                }\n+\n+                // Reset all fields to `uninit` to make sure nobody reads them.\n+                // (This is a std-only shim so we are okay with such hacks.)\n+                this.write_uninit(&pwd.into())?;\n+\n+                // We only set the home_dir field.\n+                #[allow(deprecated)]\n+                let home_dir = std::env::home_dir().unwrap();\n+                let (written, _) = this.write_path_to_c_str(&home_dir, buf, buflen)?;\n+                let pw_dir = this.mplace_field_named(&pwd, \"pw_dir\")?;\n+                this.write_pointer(buf, &pw_dir.into())?;\n+\n+                if written {\n+                    this.write_pointer(pwd.ptr, &result.into())?;\n+                    this.write_null(dest)?;\n+                } else {\n+                    this.write_null(&result.into())?;\n+                    this.write_scalar(this.eval_libc(\"ERANGE\")?, dest)?;\n+                }\n+            }\n+\n             // Platform-specific shims\n             _ => {\n                 match this.tcx.sess.target.os.as_ref() {"}, {"sha": "951ddae2c14d0f1225d5d72f59dd2b40d3aad3f0", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -1380,11 +1380,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let name_place = this.mplace_field(&entry_place, 5)?;\n \n                 let file_name = dir_entry.file_name(); // not a Path as there are no separators!\n-                let (name_fits, file_name_len) = this.write_os_str_to_c_str(\n+                let (name_fits, file_name_buf_len) = this.write_os_str_to_c_str(\n                     &file_name,\n                     name_place.ptr,\n                     name_place.layout.size.bytes(),\n                 )?;\n+                let file_name_len = file_name_buf_len.checked_sub(1).unwrap();\n                 if !name_fits {\n                     throw_unsup_format!(\n                         \"a directory entry had a name too large to fit in libc::dirent\""}, {"sha": "bae3780b460c787bb1ff1cada8b9693824a62b91", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -155,41 +155,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            \"getpwuid_r\" if this.frame_in_std() => {\n-                let [uid, pwd, buf, buflen, result] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.check_no_isolation(\"`getpwuid_r`\")?;\n-\n-                let uid = this.read_scalar(uid)?.to_u32()?;\n-                let pwd = this.deref_operand(pwd)?;\n-                let buf = this.read_pointer(buf)?;\n-                let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n-                let result = this.deref_operand(result)?;\n-\n-                // Must be for \"us\".\n-                if uid != crate::shims::unix::UID {\n-                    throw_unsup_format!(\"`getpwuid_r` on other users is not supported\");\n-                }\n-\n-                // Reset all fields to `uninit` to make sure nobody reads them.\n-                this.write_uninit(&pwd.into())?;\n-\n-                // We only set the home_dir field.\n-                #[allow(deprecated)]\n-                let home_dir = std::env::home_dir().unwrap();\n-                let (written, _) = this.write_path_to_c_str(&home_dir, buf, buflen)?;\n-                let pw_dir = this.mplace_field_named(&pwd, \"pw_dir\")?;\n-                this.write_pointer(buf, &pw_dir.into())?;\n-\n-                if written {\n-                    this.write_pointer(pwd.ptr, &result.into())?;\n-                    this.write_null(dest)?;\n-                } else {\n-                    this.write_null(&result.into())?;\n-                    this.write_scalar(this.eval_libc(\"ERANGE\")?, dest)?;\n-                }\n-            }\n-\n             _ => return Ok(EmulateByNameResult::NotSupported),\n         };\n "}, {"sha": "35751d5818ab8167ac55eb7e4be5c4a29420da7d", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -117,6 +117,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     dest,\n                 )?;\n             }\n+            \"_NSGetExecutablePath\" => {\n+                let [buf, bufsize] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`_NSGetExecutablePath`\")?;\n+\n+                let buf_ptr = this.read_pointer(buf)?;\n+                let bufsize = this.deref_operand(bufsize)?;\n+\n+                // Using the host current_exe is a bit off, but consistent with Linux\n+                // (where stdlib reads /proc/self/exe).\n+                let path = std::env::current_exe().unwrap();\n+                let (written, size_needed) = this.write_path_to_c_str(\n+                    &path,\n+                    buf_ptr,\n+                    this.read_scalar(&bufsize.into())?.to_u32()?.into(),\n+                )?;\n+\n+                if written {\n+                    this.write_null(dest)?;\n+                } else {\n+                    this.write_scalar(\n+                        Scalar::from_u32(size_needed.try_into().unwrap()),\n+                        &bufsize.into(),\n+                    )?;\n+                    this.write_int(-1, dest)?;\n+                }\n+            }\n \n             // Thread-local storage\n             \"_tlv_atexit\" => {"}, {"sha": "0116dce4992dcab2c92df739ed408773f601ee99", "filename": "tests/pass/env/args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fargs.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/args.rs"}, {"sha": "9564f5a1aa056804e6b7f35d533c3a06afd76af9", "filename": "tests/pass/env/args.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fargs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fargs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fargs.stdout?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/args.stdout"}, {"sha": "069b462ab371aa148ef3fe76aaa129bc6d2df69f", "filename": "tests/pass/env/current_dir.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fcurrent_dir.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/current_dir.rs"}, {"sha": "9dbcfeae2d644d2642e819cc8b4071da6eff9165", "filename": "tests/pass/env/current_dir_with_isolation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_dir_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_dir_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fcurrent_dir_with_isolation.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/current_dir_with_isolation.rs"}, {"sha": "589ca65a1e47e410396d8f353e3909de7283b690", "filename": "tests/pass/env/current_dir_with_isolation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_dir_with_isolation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_dir_with_isolation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fcurrent_dir_with_isolation.stderr?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/current_dir_with_isolation.stderr"}, {"sha": "15ea6a52b7b6b6d12147e0625079e47e070824fe", "filename": "tests/pass/env/current_exe.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fcurrent_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fcurrent_exe.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -0,0 +1,9 @@\n+//@ignore-target-windows\n+//@only-on-host: the Linux std implementation opens /proc/self/exe, which doesn't work cross-target\n+//@compile-flags: -Zmiri-disable-isolation\n+use std::env;\n+\n+fn main() {\n+    // The actual value we get is a bit odd: we get the Miri binary that interprets us.\n+    env::current_exe().unwrap();\n+}"}, {"sha": "9eb9c3af569dd88e0b16ba61c99bda8faae63de9", "filename": "tests/pass/env/home.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fhome.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fhome.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fhome.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -1,4 +1,4 @@\n-//@only-target-linux: home_dir is only supported on Linux\n+//@ignore-target-windows: home_dir is not supported on Windows\n //@compile-flags: -Zmiri-disable-isolation\n use std::env;\n ", "previous_filename": "tests/pass/home.rs"}, {"sha": "14ad827463a4ea3ddddd0fd7c3e0e458d8a8b4b2", "filename": "tests/pass/env/var-exclude.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar-exclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar-exclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fvar-exclude.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/env-exclude.rs"}, {"sha": "da7730b00f089bacabda0c2977ac58fe0c541c60", "filename": "tests/pass/env/var-forward.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar-forward.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar-forward.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fvar-forward.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/env-forward.rs"}, {"sha": "3d7461eecfe88b3e4e3ab779ed66e961d1243a1d", "filename": "tests/pass/env/var-without-isolation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fvar-without-isolation.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/env-without-isolation.rs"}, {"sha": "23a3724ff7fd3117c7a9865b2dfaab52f828e978", "filename": "tests/pass/env/var.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fvar.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/env.rs"}, {"sha": "9a8f979598ebc0f3a3bee7fcb097b02a72acdcf9", "filename": "tests/pass/env/var.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Fenv%2Fvar.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv%2Fvar.stdout?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "previous_filename": "tests/pass/env.stdout"}, {"sha": "b5848560214848abaf5787204f6f131361c3e1e2", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0cd09814bac7aff3259ff543bef5397743cd572/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=f0cd09814bac7aff3259ff543bef5397743cd572", "patch": "@@ -88,7 +88,7 @@ fn test_posix_realpath_errors() {\n     assert_eq!(e.kind(), ErrorKind::NotFound);\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+#[cfg(any(target_os = \"linux\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n     use std::io::Write;\n@@ -452,7 +452,7 @@ fn test_posix_mkstemp() {\n }\n \n fn main() {\n-    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+    #[cfg(any(target_os = \"linux\"))]\n     test_posix_fadvise();\n \n     test_posix_gettimeofday();"}]}