{"sha": "1ea84961e81de8e0eebbb8353d7867a039ffa70f", "node_id": "C_kwDOAAsO6NoAKDFlYTg0OTYxZTgxZGU4ZTBlZWJiYjgzNTNkNzg2N2EwMzlmZmE3MGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-30T05:56:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T05:56:50Z"}, "message": "Rollup merge of #101022 - compiler-errors:issue-101020, r=jackh726\n\nErase late bound regions before comparing types in `suggest_dereferences`\n\nFixes #101020", "tree": {"sha": "391ce008029f9f70ed494067a781a1e6bb69cd1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391ce008029f9f70ed494067a781a1e6bb69cd1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea84961e81de8e0eebbb8353d7867a039ffa70f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDaaiCRBK7hj4Ov3rIwAAKC8IACivAoGVZfhKdyPPN8WE2vRh\nGYd7/QnrsGeuWROfRFScsnwdhYyesyU9ZWEB+fxQY1DLswztxPk1RvCKLVehu5sC\nBO3tCHWL5HbmYVyi1UFl0/pztdlIbZPyHAV4MmANaoMO9QtHTUBVJwHBz0dewGfV\nRI62wbXAIUFYMdzyk39yK9oUm+cgj6wozBSJq0W4rGG5BG4IuYmzmsGvueVoCohq\nCBRHO+D3wmytUEpBKQnEjVJ8Cl2gK0aYC/o3KGpbVhqhFtaj80lCBJhPHvIZsEeE\njrB16omgp31NdHv+LLpEOSzcbN/s4jxESgUTacbt8aKbTIXOicyjJ8MTpew4hek=\n=oKSc\n-----END PGP SIGNATURE-----\n", "payload": "tree 391ce008029f9f70ed494067a781a1e6bb69cd1e\nparent aa9bfdee322889eb6f419d3817d3d87060e91581\nparent 48b3d8aa829a5ac3ff317e18ff025ac75a7c9665\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661839010 +0530\ncommitter GitHub <noreply@github.com> 1661839010 +0530\n\nRollup merge of #101022 - compiler-errors:issue-101020, r=jackh726\n\nErase late bound regions before comparing types in `suggest_dereferences`\n\nFixes #101020\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea84961e81de8e0eebbb8353d7867a039ffa70f", "html_url": "https://github.com/rust-lang/rust/commit/1ea84961e81de8e0eebbb8353d7867a039ffa70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea84961e81de8e0eebbb8353d7867a039ffa70f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa9bfdee322889eb6f419d3817d3d87060e91581", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9bfdee322889eb6f419d3817d3d87060e91581", "html_url": "https://github.com/rust-lang/rust/commit/aa9bfdee322889eb6f419d3817d3d87060e91581"}, {"sha": "48b3d8aa829a5ac3ff317e18ff025ac75a7c9665", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b3d8aa829a5ac3ff317e18ff025ac75a7c9665", "html_url": "https://github.com/rust-lang/rust/commit/48b3d8aa829a5ac3ff317e18ff025ac75a7c9665"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "ecf75411e5f2f80669a26dcb2f80c2aa1458e4dd", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea84961e81de8e0eebbb8353d7867a039ffa70f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea84961e81de8e0eebbb8353d7867a039ffa70f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1ea84961e81de8e0eebbb8353d7867a039ffa70f", "patch": "@@ -2725,7 +2725,10 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        if (a.is_var() && b.is_free_or_static()) || (b.is_var() && a.is_free_or_static()) || a == b\n+        if (a.is_var() && b.is_free_or_static())\n+            || (b.is_var() && a.is_free_or_static())\n+            || (a.is_var() && b.is_var())\n+            || a == b\n         {\n             Ok(a)\n         } else {"}, {"sha": "54f01577c5e56e4b80cd7ec5aa8ad62981198d97", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ea84961e81de8e0eebbb8353d7867a039ffa70f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea84961e81de8e0eebbb8353d7867a039ffa70f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1ea84961e81de8e0eebbb8353d7867a039ffa70f", "patch": "@@ -690,13 +690,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 real_trait_pred = parent_trait_pred;\n             }\n \n-            // Skipping binder here, remapping below\n-            let real_ty = real_trait_pred.self_ty().skip_binder();\n-            if self.can_eq(obligation.param_env, real_ty, arg_ty).is_err() {\n+            let real_ty = real_trait_pred.self_ty();\n+            // We `erase_late_bound_regions` here because `make_subregion` does not handle\n+            // `ReLateBound`, and we don't particularly care about the regions.\n+            if self\n+                .can_eq(obligation.param_env, self.tcx.erase_late_bound_regions(real_ty), arg_ty)\n+                .is_err()\n+            {\n                 continue;\n             }\n \n-            if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n+            if let ty::Ref(region, base_ty, mutbl) = *real_ty.skip_binder().kind() {\n                 let mut autoderef = Autoderef::new(\n                     self,\n                     obligation.param_env,"}, {"sha": "51cabe21e6291dac748035c9deb9f46b9073f09a", "filename": "src/test/ui/generic-associated-types/issue-101020.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1ea84961e81de8e0eebbb8353d7867a039ffa70f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea84961e81de8e0eebbb8353d7867a039ffa70f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.rs?ref=1ea84961e81de8e0eebbb8353d7867a039ffa70f", "patch": "@@ -0,0 +1,37 @@\n+#![feature(generic_associated_types)]\n+\n+pub trait LendingIterator {\n+    type Item<'a>\n+    where\n+        Self: 'a;\n+\n+    fn consume<F>(self, _f: F)\n+    where\n+        Self: Sized,\n+        for<'a> Self::Item<'a>: FuncInput<'a, Self::Item<'a>>,\n+    {\n+    }\n+}\n+\n+impl<I: LendingIterator + ?Sized> LendingIterator for &mut I {\n+    type Item<'a> = I::Item<'a> where Self: 'a;\n+}\n+struct EmptyIter;\n+impl LendingIterator for EmptyIter {\n+    type Item<'a> = &'a mut () where Self:'a;\n+}\n+pub trait FuncInput<'a, F>\n+where\n+    F: Foo<Self>,\n+    Self: Sized,\n+{\n+}\n+impl<'a, T, F: 'a> FuncInput<'a, F> for T where F: Foo<T> {}\n+trait Foo<T> {}\n+\n+fn map_test() {\n+    (&mut EmptyIter).consume(());\n+    //~^ ERROR the trait bound `for<'a> &'a mut (): Foo<&'a mut ()>` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "7fde89eb75e51bd012e54a294e10851d5987f25e", "filename": "src/test/ui/generic-associated-types/issue-101020.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1ea84961e81de8e0eebbb8353d7867a039ffa70f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea84961e81de8e0eebbb8353d7867a039ffa70f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr?ref=1ea84961e81de8e0eebbb8353d7867a039ffa70f", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the trait bound `for<'a> &'a mut (): Foo<&'a mut ()>` is not satisfied\n+  --> $DIR/issue-101020.rs:33:5\n+   |\n+LL |     (&mut EmptyIter).consume(());\n+   |     ^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |     |\n+   |     the trait `for<'a> Foo<&'a mut ()>` is not implemented for `&'a mut ()`\n+   |\n+note: required for `&'a mut ()` to implement `for<'a> FuncInput<'a, &'a mut ()>`\n+  --> $DIR/issue-101020.rs:29:20\n+   |\n+LL | impl<'a, T, F: 'a> FuncInput<'a, F> for T where F: Foo<T> {}\n+   |                    ^^^^^^^^^^^^^^^^     ^\n+note: required by a bound in `LendingIterator::consume`\n+  --> $DIR/issue-101020.rs:11:33\n+   |\n+LL |     fn consume<F>(self, _f: F)\n+   |        ------- required by a bound in this\n+...\n+LL |         for<'a> Self::Item<'a>: FuncInput<'a, Self::Item<'a>>,\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `LendingIterator::consume`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}