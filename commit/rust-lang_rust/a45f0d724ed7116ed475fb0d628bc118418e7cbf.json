{"sha": "a45f0d724ed7116ed475fb0d628bc118418e7cbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NWYwZDcyNGVkNzExNmVkNDc1ZmIwZDYyOGJjMTE4NDE4ZTdjYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-29T23:28:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-29T23:28:28Z"}, "message": "Auto merge of #84729 - jackh726:rollup-dnm8kg5, r=jackh726\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #84451 (Use flex more consistently)\n - #84590 (Point out that behavior might be switched on 2015 and 2018 too one day)\n - #84682 (Don't rebind in `transitive_bounds_that_define_assoc_type`)\n - #84683 (Minor grammar tweaks for readability to btree internals)\n - #84688 (Remove unnecessary CSS rules for search results)\n - #84690 (Remove unneeded bottom margin on search results)\n - #84692 (Link between std::env::{var, var_os} and std::env::{vars, vars_os})\n - #84705 (make feature recommendations optional)\n - #84706 (Drop alias `reduce` for `fold` - we have a `reduce` function)\n - #84713 (Fix labels for regression issue template)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "48ffcab1d7d50cf9bb27a8e0337416322fff2017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ffcab1d7d50cf9bb27a8e0337416322fff2017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a45f0d724ed7116ed475fb0d628bc118418e7cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a45f0d724ed7116ed475fb0d628bc118418e7cbf", "html_url": "https://github.com/rust-lang/rust/commit/a45f0d724ed7116ed475fb0d628bc118418e7cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a45f0d724ed7116ed475fb0d628bc118418e7cbf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478a07df05e3fe8df964291d8b25dd80b7e0e76b", "url": "https://api.github.com/repos/rust-lang/rust/commits/478a07df05e3fe8df964291d8b25dd80b7e0e76b", "html_url": "https://github.com/rust-lang/rust/commit/478a07df05e3fe8df964291d8b25dd80b7e0e76b"}, {"sha": "087f9649358d34b2e088125a52ce6455f8c96432", "url": "https://api.github.com/repos/rust-lang/rust/commits/087f9649358d34b2e088125a52ce6455f8c96432", "html_url": "https://github.com/rust-lang/rust/commit/087f9649358d34b2e088125a52ce6455f8c96432"}], "stats": {"total": 167, "additions": 120, "deletions": 47}, "files": [{"sha": "c0e90824a710dfa73be33368854ee94d768bde41", "filename": ".github/ISSUE_TEMPLATE/regression.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/.github%2FISSUE_TEMPLATE%2Fregression.md", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/.github%2FISSUE_TEMPLATE%2Fregression.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fregression.md?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -1,7 +1,7 @@\n ---\n name: Regression\n about: Report something that unexpectedly changed between Rust versions.\n-labels: C-bug regression-untriaged\n+labels: C-bug, regression-untriaged\n ---\n <!--\n Thank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to."}, {"sha": "1cde4802a40b00e67a6beca539603033dca99f91", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -305,9 +305,7 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n                     Some(assoc_name),\n                 ));\n                 for (super_predicate, _) in super_predicates.predicates {\n-                    let bound_predicate = super_predicate.kind();\n-                    let subst_predicate = super_predicate\n-                        .subst_supertrait(tcx, &bound_predicate.rebind(trait_ref.skip_binder()));\n+                    let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);\n                     if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n                         stack.push(binder.value);\n                     }"}, {"sha": "92288c89827447ef0f6158b9450da7822c127952", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -59,6 +59,10 @@ impl FlagComputation {\n     {\n         let mut computation = FlagComputation::new();\n \n+        if !value.bound_vars().is_empty() {\n+            computation.flags = computation.flags | TypeFlags::HAS_RE_LATE_BOUND;\n+        }\n+\n         f(&mut computation, value.skip_binder());\n \n         self.add_flags(computation.flags);"}, {"sha": "6ea46f5c5289e04a1af8b3fee57420118f4ac691", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -487,7 +487,13 @@ impl<'a> Resolver<'a> {\n                         name\n                     ));\n                 }\n-                err.help(\"use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\");\n+\n+                if self.session.is_nightly_build() {\n+                    err.help(\n+                        \"use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` \\\n+                        to allow generic const expressions\"\n+                    );\n+                }\n \n                 err\n             }"}, {"sha": "d25dd9a6e830222451fad37af2ef27dc90e339ab", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -315,17 +315,20 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                         ),\n                     )\n                 } else {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            hir_ty.span,\n-                            &format!(\n-                                \"{} is forbidden as the type of a const generic parameter\",\n-                                unsupported_type\n-                            ),\n-                        )\n-                        .note(\"the only supported types are integers, `bool` and `char`\")\n-                        .help(\"more complex types are supported with `#![feature(const_generics)]`\")\n-                        .emit()\n+                    let mut err = tcx.sess.struct_span_err(\n+                        hir_ty.span,\n+                        &format!(\n+                            \"{} is forbidden as the type of a const generic parameter\",\n+                            unsupported_type\n+                        ),\n+                    );\n+                    err.note(\"the only supported types are integers, `bool` and `char`\");\n+                    if tcx.sess.is_nightly_build() {\n+                        err.help(\n+                            \"more complex types are supported with `#![feature(const_generics)]`\",\n+                        );\n+                    }\n+                    err.emit()\n                 }\n             };\n "}, {"sha": "af403496e38e937dd3e995a0203c4fe6b0f0253f", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -89,7 +89,7 @@ impl<K, V> LeafNode<K, V> {\n \n /// The underlying representation of internal nodes. As with `LeafNode`s, these should be hidden\n /// behind `BoxedNode`s to prevent dropping uninitialized keys and values. Any pointer to an\n-/// `InternalNode` can be directly casted to a pointer to the underlying `LeafNode` portion of the\n+/// `InternalNode` can be directly cast to a pointer to the underlying `LeafNode` portion of the\n /// node, allowing code to act on leaf and internal nodes generically without having to even check\n /// which of the two a pointer is pointing at. This property is enabled by the use of `repr(C)`.\n #[repr(C)]\n@@ -408,7 +408,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n }\n \n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n-    /// Temporarily takes out another, mutable reference to the same node. Beware, as\n+    /// Temporarily takes out another mutable reference to the same node. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n     ///\n@@ -759,15 +759,15 @@ impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n impl<BorrowType, K, V, NodeType, HandleType>\n     Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>\n {\n-    /// Temporarily takes out another, immutable handle on the same location.\n+    /// Temporarily takes out another immutable handle on the same location.\n     pub fn reborrow(&self) -> Handle<NodeRef<marker::Immut<'_>, K, V, NodeType>, HandleType> {\n         // We can't use Handle::new_kv or Handle::new_edge because we don't know our type\n         Handle { node: self.node.reborrow(), idx: self.idx, _marker: PhantomData }\n     }\n }\n \n impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n-    /// Temporarily takes out another, mutable handle on the same location. Beware, as\n+    /// Temporarily takes out another mutable handle on the same location. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n     ///"}, {"sha": "da9e5fde7ccec5aea202e2d907887b2dedc93c06", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -2133,7 +2133,6 @@ pub trait Iterator {\n     /// ```\n     ///\n     /// [`reduce()`]: Iterator::reduce\n-    #[doc(alias = \"reduce\")]\n     #[doc(alias = \"inject\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "821e7d4cfe7ad5e09bd099f3747120a6210c9d19", "filename": "library/std/src/env.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -124,6 +124,10 @@ pub fn vars() -> Vars {\n /// variables at the time of this invocation. Modifications to environment\n /// variables afterwards will not be reflected in the returned iterator.\n ///\n+/// Note that the returned iterator will not check if the environment variables\n+/// are valid Unicode. If you want to panic on invalid UTF-8,\n+/// use the [`vars`] function instead.\n+///\n /// # Examples\n ///\n /// ```\n@@ -180,8 +184,9 @@ impl fmt::Debug for VarsOs {\n ///\n /// # Errors\n ///\n-/// * Environment variable is not present\n-/// * Environment variable is not valid unicode\n+/// Errors if the environment variable is not present.\n+/// Errors if the environment variable is not valid Unicode. If this is not desired, consider using\n+/// [`var_os`].\n ///\n /// # Panics\n ///\n@@ -221,6 +226,10 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n /// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n /// character.\n ///\n+/// Note that the method will not check if the environment variable\n+/// is valid Unicode. If you want to have an error on invalid UTF-8,\n+/// use the [`var`] function instead.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "cd6b0b2d7ee7add100c291b2cd365016fc69aef1", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -553,8 +553,10 @@ mod prim_pointer {}\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement `IntoIterator` by value, so the method call\n-/// `array.into_iter()` auto-referenced into a slice iterator. That behavior is preserved in the\n-/// 2015 and 2018 editions of Rust for compatability, ignoring `IntoIterator` by value.\n+/// `array.into_iter()` auto-referenced into a slice iterator. Right now, the old behavior\n+/// is preserved in the 2015 and 2018 editions of Rust for compatibility, ignoring\n+/// `IntoIterator` by value. In the future, the behavior on the 2015 and 2018 edition\n+/// might be made consistent to the behavior of later editions.\n ///\n #[cfg_attr(bootstrap, doc = \"```rust,edition2018,ignore\")]\n #[cfg_attr(not(bootstrap), doc = \"```rust,edition2018\")]\n@@ -601,6 +603,49 @@ mod prim_pointer {}\n /// }\n /// ```\n ///\n+/// Future language versions might start treating the `array.into_iter()`\n+/// syntax on editions 2015 and 2018 the same as on edition 2021. So code using\n+/// those older editions should still be written with this change in mind, to\n+/// prevent breakage in the future. The safest way to accomplish this is to\n+/// avoid the `into_iter` syntax on those editions. If an edition update is not\n+/// viable/desired, there are multiple alternatives:\n+/// * use `iter`, equivalent to the old behavior, creating references\n+/// * use [`array::IntoIter`], equivalent to the post-2021 behavior (Rust 1.51+)\n+/// * replace `for ... in array.into_iter() {` with `for ... in array {`,\n+///   equivalent to the post-2021 behavior (Rust 1.53+)\n+///\n+#[cfg_attr(bootstrap, doc = \"```rust,edition2018,ignore\")]\n+#[cfg_attr(not(bootstrap), doc = \"```rust,edition2018\")]\n+/// use std::array::IntoIter;\n+///\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// // This iterates by reference:\n+/// for item in array.iter() {\n+///     let x: &i32 = item;\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // This iterates by value:\n+/// for item in IntoIter::new(array) {\n+///     let x: i32 = item;\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // This iterates by value:\n+/// for item in array {\n+///     let x: i32 = item;\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // IntoIter can also start a chain.\n+/// // This iterates by value:\n+/// for item in IntoIter::new(array).enumerate() {\n+///     let (i, x): (usize, i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+/// ```\n+///\n /// [slice]: prim@slice\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash"}, {"sha": "a95c90e999f98ca5c715cee40286dfa840f3e732", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -117,9 +117,12 @@ h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n }\n h1.fqn {\n \tdisplay: flex;\n-\twidth: 100%;\n \tborder-bottom: 1px dashed;\n \tmargin-top: 0;\n+\n+\t/* workaround to keep flex from breaking below 700 px width due to the float: right on the nav\n+\t   above the h1 */\n+\tpadding-left: 1px;\n }\n h1.fqn > .in-band > a:hover {\n \ttext-decoration: underline;\n@@ -385,17 +388,9 @@ nav.sub {\n \tposition: relative;\n }\n \n-#results {\n-\tposition: absolute;\n-\tright: 0;\n-\tleft: 0;\n-\toverflow: auto;\n-}\n-\n #results > table {\n \twidth: 100%;\n \ttable-layout: fixed;\n-\tmargin-bottom: 40px;\n }\n \n .content pre.line-numbers {\n@@ -453,20 +448,14 @@ nav.sub {\n }\n \n .content .out-of-band {\n-\tfloat: right;\n+\tflex-grow: 0;\n+\ttext-align: right;\n \tfont-size: 23px;\n \tmargin: 0px;\n-\tpadding: 0px;\n+\tpadding: 0 0 0 12px;\n \tfont-weight: normal;\n }\n \n-h1.fqn > .out-of-band {\n-\tfloat: unset;\n-\tflex: 1;\n-\ttext-align: right;\n-\tmargin-left: 8px;\n-}\n-\n h3.impl > .out-of-band {\n \tfont-size: 21px;\n }\n@@ -486,6 +475,7 @@ h4 > code, h3 > code, .invisible > code {\n }\n \n .content .in-band {\n+\tflex-grow: 1;\n \tmargin: 0px;\n \tpadding: 0px;\n }\n@@ -1484,10 +1474,6 @@ h4 > .notable-traits {\n \t\tdisplay: none !important;\n \t}\n \n-\th1.fqn {\n-\t\toverflow: initial;\n-\t}\n-\n \t.theme-picker {\n \t\tleft: 10px;\n \t\ttop: 54px;"}, {"sha": "c496a3556c84e2b1647afd42d2b6250b6ceae2fc", "filename": "src/test/ui/lifetimes/issue-83737-erasing-bound-vars.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/src%2Ftest%2Fui%2Flifetimes%2Fissue-83737-erasing-bound-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/src%2Ftest%2Fui%2Flifetimes%2Fissue-83737-erasing-bound-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-83737-erasing-bound-vars.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+// compile-flags: --edition 2018\n+// compile-flags: --crate-type rlib\n+\n+use std::future::Future;\n+\n+async fn handle<F>(slf: &F)\n+where\n+    F: Fn(&()) -> Box<dyn for<'a> Future<Output = ()> + Unpin>,\n+{\n+    (slf)(&()).await;\n+}\n+\n+fn main() {}"}, {"sha": "df8368da0a09a0a1fcab45e6ffce638f487492cf", "filename": "src/test/ui/lifetimes/issue-84604.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a45f0d724ed7116ed475fb0d628bc118418e7cbf/src%2Ftest%2Fui%2Flifetimes%2Fissue-84604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45f0d724ed7116ed475fb0d628bc118418e7cbf/src%2Ftest%2Fui%2Flifetimes%2Fissue-84604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-84604.rs?ref=a45f0d724ed7116ed475fb0d628bc118418e7cbf", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+// compile-flags: -Zsymbol-mangling-version=v0\n+\n+pub fn f<T: ?Sized>() {}\n+pub trait Frob<T: ?Sized> {}\n+fn main() {\n+    f::<dyn Frob<str>>();\n+    f::<dyn for<'a> Frob<str>>();\n+}"}]}