{"sha": "8af87b1126319721c79af6bb65a9fa0caeaf28aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjg3YjExMjYzMTk3MjFjNzlhZjZiYjY1YTlmYTBjYWVhZjI4YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-23T03:44:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-23T03:44:28Z"}, "message": "Auto merge of #71312 - wesleywiser:const_prop_bitset, r=Mark-Simulacrum\n\n[ConstProp] Use a `BitSet<Local>` instead of `IndexVec<Local, bool>`", "tree": {"sha": "b36a18b5d923035e2699847c97d8ed8d8eab91e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b36a18b5d923035e2699847c97d8ed8d8eab91e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af87b1126319721c79af6bb65a9fa0caeaf28aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af87b1126319721c79af6bb65a9fa0caeaf28aa", "html_url": "https://github.com/rust-lang/rust/commit/8af87b1126319721c79af6bb65a9fa0caeaf28aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af87b1126319721c79af6bb65a9fa0caeaf28aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc145e19d05e8f2ee0aad77a0eba93292ebd3887", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc145e19d05e8f2ee0aad77a0eba93292ebd3887", "html_url": "https://github.com/rust-lang/rust/commit/fc145e19d05e8f2ee0aad77a0eba93292ebd3887"}, {"sha": "c183b4c13fe17d630cc29492161aea3aa80759c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c183b4c13fe17d630cc29492161aea3aa80759c8", "html_url": "https://github.com/rust-lang/rust/commit/c183b4c13fe17d630cc29492161aea3aa80759c8"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "271c746aa0feff7ca13063bc87458f0247d93abf", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8af87b1126319721c79af6bb65a9fa0caeaf28aa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af87b1126319721c79af6bb65a9fa0caeaf28aa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8af87b1126319721c79af6bb65a9fa0caeaf28aa", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_middle::mir::visit::{\n@@ -775,15 +776,15 @@ enum ConstPropMode {\n struct CanConstProp {\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n     // false at the beginning, once set, there are not allowed to be any more assignments\n-    found_assignment: IndexVec<Local, bool>,\n+    found_assignment: BitSet<Local>,\n }\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n     fn check(body: &Body<'_>) -> IndexVec<Local, ConstPropMode> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(ConstPropMode::FullConstProp, &body.local_decls),\n-            found_assignment: IndexVec::from_elem(false, &body.local_decls),\n+            found_assignment: BitSet::new_empty(body.local_decls.len()),\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n             // cannot use args at all\n@@ -811,11 +812,9 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // FIXME(oli-obk): we could be more powerful here, if the multiple writes\n             // only occur in independent execution paths\n             MutatingUse(MutatingUseContext::Store) => {\n-                if self.found_assignment[local] {\n+                if !self.found_assignment.insert(local) {\n                     trace!(\"local {:?} can't be propagated because of multiple assignments\", local);\n                     self.can_const_prop[local] = ConstPropMode::NoPropagation;\n-                } else {\n-                    self.found_assignment[local] = true\n                 }\n             }\n             // Reading constants is allowed an arbitrary number of times"}]}