{"sha": "88a86d4ff985265e8b1501dc4ea33e1572670666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTg2ZDRmZjk4NTI2NWU4YjE1MDFkYzRlYTMzZTE1NzI2NzA2NjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-29T15:35:37Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-30T13:04:04Z"}, "message": "Fix deduction of `dyn Fn` closure parameter types", "tree": {"sha": "5cefff002701d0cdeb40d311831659609aa73a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cefff002701d0cdeb40d311831659609aa73a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a86d4ff985265e8b1501dc4ea33e1572670666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a86d4ff985265e8b1501dc4ea33e1572670666", "html_url": "https://github.com/rust-lang/rust/commit/88a86d4ff985265e8b1501dc4ea33e1572670666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a86d4ff985265e8b1501dc4ea33e1572670666/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13cbe64a5908cfc36629687a302be9568a06afa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/13cbe64a5908cfc36629687a302be9568a06afa4", "html_url": "https://github.com/rust-lang/rust/commit/13cbe64a5908cfc36629687a302be9568a06afa4"}], "stats": {"total": 160, "additions": 139, "deletions": 21}, "files": [{"sha": "60328481950ca9f502f00174e6406773ce27e241", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=88a86d4ff985265e8b1501dc4ea33e1572670666", "patch": "@@ -2,10 +2,7 @@\n //! HIR back into source code, and just displaying them for debugging/testing\n //! purposes.\n \n-use std::{\n-    array,\n-    fmt::{self, Debug},\n-};\n+use std::fmt::{self, Debug};\n \n use chalk_ir::BoundVar;\n use hir_def::{\n@@ -23,12 +20,16 @@ use hir_def::{\n use hir_expand::{hygiene::Hygiene, name::Name};\n \n use crate::{\n-    const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n-    from_placeholder_idx, lt_from_placeholder_idx, mapping::from_chalk, primitive, subst_prefix,\n-    to_assoc_type_id, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, Const,\n-    ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, LifetimeData,\n-    LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt, QuantifiedWhereClause,\n-    Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n+    const_from_placeholder_idx,\n+    db::HirDatabase,\n+    from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, lt_from_placeholder_idx,\n+    mapping::from_chalk,\n+    primitive, subst_prefix, to_assoc_type_id,\n+    utils::{self, generics},\n+    AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, Const, ConstValue, DomainGoal, GenericArg,\n+    ImplTraitId, Interner, Lifetime, LifetimeData, LifetimeOutlives, Mutability, OpaqueTy,\n+    ProjectionTy, ProjectionTyExt, QuantifiedWhereClause, Scalar, TraitRef, TraitRefExt, Ty, TyExt,\n+    TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {\n@@ -706,12 +707,7 @@ impl HirDisplay for CallableSig {\n \n fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = TraitId> {\n     let krate = trait_.lookup(db).container.krate();\n-    let fn_traits = [\n-        db.lang_item(krate, \"fn\".into()),\n-        db.lang_item(krate, \"fn_mut\".into()),\n-        db.lang_item(krate, \"fn_once\".into()),\n-    ];\n-    array::IntoIter::new(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n+    utils::fn_traits(db, krate)\n }\n \n pub fn write_bounds_like_dyn_trait_with_prefix("}, {"sha": "1ca7105f245c5fcc53250fc209e7e36fa32c030d", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=88a86d4ff985265e8b1501dc4ea33e1572670666", "patch": "@@ -52,6 +52,7 @@ mod path;\n mod expr;\n mod pat;\n mod coerce;\n+mod closure;\n \n /// The entry point of type inference.\n pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {"}, {"sha": "b4ce22b9eb054277f440c141c50da7297afb54a0", "filename": "crates/hir_ty/src/infer/closure.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fclosure.rs?ref=88a86d4ff985265e8b1501dc4ea33e1572670666", "patch": "@@ -0,0 +1,93 @@\n+//! Inference of closure parameter types based on the closure's expected type.\n+\n+use chalk_ir::{fold::Shift, AliasTy, FnSubst, WhereClause};\n+use hir_def::HasModule;\n+use smallvec::SmallVec;\n+\n+use crate::{\n+    to_chalk_trait_id, utils, ChalkTraitId, DynTy, FnPointer, FnSig, Interner, Substitution, Ty,\n+    TyKind,\n+};\n+\n+use super::{Expectation, InferenceContext};\n+\n+impl InferenceContext<'_> {\n+    pub(super) fn deduce_closure_type_from_expectations(\n+        &mut self,\n+        closure_ty: &Ty,\n+        sig_ty: &Ty,\n+        expectation: &Expectation,\n+    ) {\n+        let expected_ty = match expectation.to_option(&mut self.table) {\n+            Some(ty) => ty,\n+            None => return,\n+        };\n+\n+        // Deduction from where-clauses in scope, as well as fn-pointer coercion are handled here.\n+        self.coerce(closure_ty, &expected_ty);\n+\n+        // Deduction based on the expected `dyn Fn` is done separately.\n+        if let TyKind::Dyn(dyn_ty) = expected_ty.kind(&Interner) {\n+            if let Some(sig) = self.deduce_sig_from_dyn_ty(dyn_ty) {\n+                let expected_sig_ty = TyKind::Function(sig).intern(&Interner);\n+\n+                self.unify(sig_ty, &expected_sig_ty);\n+            }\n+        }\n+    }\n+\n+    fn deduce_sig_from_dyn_ty(&self, dyn_ty: &DynTy) -> Option<FnPointer> {\n+        // Search for predicates like `$self: FnX<Args>` and `<$self as FnOnce<...>>::Output == Ret`\n+\n+        let fn_traits: SmallVec<[ChalkTraitId; 3]> =\n+            utils::fn_traits(self.db.upcast(), self.owner.module(self.db.upcast()).krate())\n+                .map(|tid| to_chalk_trait_id(tid))\n+                .collect();\n+\n+        for bound in dyn_ty.bounds.map_ref(|b| b.iter(&Interner)) {\n+            let bound = bound.map(|b| b.clone()).fuse_binders(&Interner);\n+            match bound.skip_binders() {\n+                WhereClause::AliasEq(eq) => match &eq.alias {\n+                    AliasTy::Projection(projection) => {\n+                        let assoc_data = self.db.associated_ty_data(projection.associated_ty_id);\n+                        if !fn_traits.contains(&assoc_data.trait_id) {\n+                            return None;\n+                        }\n+\n+                        // Skip `Self`, get the type argument.\n+                        let arg = projection.substitution.as_slice(&Interner).get(1)?;\n+                        match arg.ty(&Interner)?.kind(&Interner) {\n+                            TyKind::Tuple(_, subst) => {\n+                                let generic_args = subst.as_slice(&Interner);\n+                                let mut sig_tys = Vec::new();\n+                                for arg in generic_args {\n+                                    sig_tys.push(arg.ty(&Interner)?.clone());\n+                                }\n+                                sig_tys.push(eq.ty.clone());\n+\n+                                cov_mark::hit!(dyn_fn_param_informs_call_site_closure_signature);\n+                                return Some(FnPointer {\n+                                    num_binders: 0,\n+                                    sig: FnSig {\n+                                        abi: (),\n+                                        safety: chalk_ir::Safety::Safe,\n+                                        variadic: false,\n+                                    },\n+                                    substitution: FnSubst(\n+                                        Substitution::from_iter(&Interner, sig_tys.clone())\n+                                            .shifted_in(&Interner),\n+                                    ),\n+                                });\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                    AliasTy::Opaque(_) => {}\n+                },\n+                _ => {}\n+            }\n+        }\n+\n+        None\n+    }\n+}"}, {"sha": "2f109297b5549ec7dbc3ddf7a6a48d687f76446d", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=88a86d4ff985265e8b1501dc4ea33e1572670666", "patch": "@@ -278,15 +278,13 @@ impl<'a> InferenceContext<'a> {\n                 .intern(&Interner);\n                 let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();\n                 let closure_ty =\n-                    TyKind::Closure(closure_id, Substitution::from1(&Interner, sig_ty))\n+                    TyKind::Closure(closure_id, Substitution::from1(&Interner, sig_ty.clone()))\n                         .intern(&Interner);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to\n                 // infer the body.\n-                if let Some(t) = expected.only_has_type(&mut self.table) {\n-                    self.coerce(&closure_ty, &t);\n-                }\n+                self.deduce_closure_type_from_expectations(&closure_ty, &sig_ty, expected);\n \n                 // Now go through the argument patterns\n                 for (arg_pat, arg_ty) in args.iter().zip(sig_tys) {"}, {"sha": "9db30d9f98becc269c36be626de533a8ecc3b2b0", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=88a86d4ff985265e8b1501dc4ea33e1572670666", "patch": "@@ -2829,6 +2829,26 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn dyn_fn_param_informs_call_site_closure_signature() {\n+    cov_mark::check!(dyn_fn_param_informs_call_site_closure_signature);\n+    check_types(\n+        r#\"\n+//- minicore: fn, coerce_unsized\n+struct S;\n+impl S {\n+    fn inherent(&self) -> u8 { 0 }\n+}\n+fn take_dyn_fn(f: &dyn Fn(S)) {}\n+\n+fn f() {\n+    take_dyn_fn(&|x| { x.inherent(); });\n+                     //^^^^^^^^^^^^ u8\n+}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn infer_fn_trait_arg() {\n     check_infer_with_mismatches("}, {"sha": "076b2c8cba3352626eba287884eca2d17c8a02da", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a86d4ff985265e8b1501dc4ea33e1572670666/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=88a86d4ff985265e8b1501dc4ea33e1572670666", "patch": "@@ -1,8 +1,9 @@\n //! Helper functions for working with def, which don't need to be a separate\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n \n-use std::iter;\n+use std::{array, iter};\n \n+use base_db::CrateId;\n use chalk_ir::{fold::Shift, BoundVar, DebruijnIndex};\n use hir_def::{\n     db::DefDatabase,\n@@ -23,6 +24,15 @@ use crate::{\n     WhereClause,\n };\n \n+pub(crate) fn fn_traits(db: &dyn DefDatabase, krate: CrateId) -> impl Iterator<Item = TraitId> {\n+    let fn_traits = [\n+        db.lang_item(krate, \"fn\".into()),\n+        db.lang_item(krate, \"fn_mut\".into()),\n+        db.lang_item(krate, \"fn_once\".into()),\n+    ];\n+    array::IntoIter::new(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n+}\n+\n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n     // returning the iterator directly doesn't easily work because of"}]}