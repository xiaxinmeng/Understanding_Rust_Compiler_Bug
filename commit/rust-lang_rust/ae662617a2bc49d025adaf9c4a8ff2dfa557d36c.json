{"sha": "ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNjYyNjE3YTJiYzQ5ZDAyNWFkYWY5YzRhOGZmMmRmYTU1N2QzNmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-16T18:23:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-16T21:02:11Z"}, "message": "Separate persistent mutable state from config\n\nThat way, we clearly see which things are not change, and we also\nclearly see which things are persistent.", "tree": {"sha": "f321ad0a529283bbb276095da7644d8f1ba663d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f321ad0a529283bbb276095da7644d8f1ba663d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "html_url": "https://github.com/rust-lang/rust/commit/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9b6320e66cb764b9683a38c284a06b7c35aab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9b6320e66cb764b9683a38c284a06b7c35aab6", "html_url": "https://github.com/rust-lang/rust/commit/2e9b6320e66cb764b9683a38c284a06b7c35aab6"}], "stats": {"total": 145, "additions": 80, "deletions": 65}, "files": [{"sha": "83b1acf677097d700d719f5ed88f647611a2b2a2", "filename": "editors/code/src/commands/server_version.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -5,7 +5,7 @@ import { spawnSync } from 'child_process';\n \n export function serverVersion(ctx: Ctx): Cmd {\n     return async () => {\n-        const binaryPath = await ensureServerBinary(ctx.config);\n+        const binaryPath = await ensureServerBinary(ctx.config, ctx.state);\n \n         if (binaryPath == null) {\n             throw new Error("}, {"sha": "bd8096dd6e236d3b89e0a9a904da81763279fd2c", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -182,13 +182,6 @@ export class Config {\n         return this.createGithubReleaseSource(\"rust-analyzer.vsix\", NIGHTLY_TAG);\n     }\n \n-    readonly installedNightlyExtensionReleaseDate = new DateStorage(\n-        \"installed-nightly-extension-release-date\",\n-        this.ctx.globalState\n-    );\n-    readonly serverReleaseDate = new DateStorage(\"server-release-date\", this.ctx.globalState);\n-    readonly serverReleaseTag = new Storage<null | string>(\"server-release-tag\", this.ctx.globalState, null);\n-\n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n     // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n@@ -232,37 +225,3 @@ export class Config {\n     // for internal use\n     get withSysroot() { return this.cfg.get(\"withSysroot\", true) as boolean; }\n }\n-\n-export class Storage<T> {\n-    constructor(\n-        private readonly key: string,\n-        private readonly storage: vscode.Memento,\n-        private readonly defaultVal: T\n-    ) { }\n-\n-    get(): T {\n-        const val = this.storage.get(this.key, this.defaultVal);\n-        log.debug(this.key, \"==\", val);\n-        return val;\n-    }\n-    async set(val: T) {\n-        log.debug(this.key, \"=\", val);\n-        await this.storage.update(this.key, val);\n-    }\n-}\n-export class DateStorage {\n-    inner: Storage<null | string>;\n-\n-    constructor(key: string, storage: vscode.Memento) {\n-        this.inner = new Storage(key, storage, null);\n-    }\n-\n-    get(): null | Date {\n-        const dateStr = this.inner.get();\n-        return dateStr ? new Date(dateStr) : null;\n-    }\n-\n-    async set(date: null | Date) {\n-        await this.inner.set(date ? date.toString() : null);\n-    }\n-}"}, {"sha": "c929ab0632d8de9d90ddae45d4759e1d22a9a70c", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -4,19 +4,21 @@ import * as lc from 'vscode-languageclient';\n import { Config } from './config';\n import { createClient } from './client';\n import { isRustEditor, RustEditor } from './util';\n+import { PersistentState } from './persistent_state';\n \n export class Ctx {\n     private constructor(\n         readonly config: Config,\n+        readonly state: PersistentState,\n         private readonly extCtx: vscode.ExtensionContext,\n         readonly client: lc.LanguageClient\n     ) {\n \n     }\n \n-    static async create(config: Config, extCtx: vscode.ExtensionContext, serverPath: string): Promise<Ctx> {\n+    static async create(config: Config, state: PersistentState, extCtx: vscode.ExtensionContext, serverPath: string): Promise<Ctx> {\n         const client = await createClient(config, serverPath);\n-        const res = new Ctx(config, extCtx, client);\n+        const res = new Ctx(config, state, extCtx, client);\n         res.pushCleanup(client.start());\n         await client.onReady();\n         return res;"}, {"sha": "a1db96f052bf7e383914b85b3308c2fdf442a862", "filename": "editors/code/src/installation/extension.ts", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -7,14 +7,15 @@ import { Config, UpdatesChannel } from \"../config\";\n import { ArtifactReleaseInfo, ArtifactSource } from \"./interfaces\";\n import { downloadArtifactWithProgressUi } from \"./downloads\";\n import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n+import { PersistentState } from \"../persistent_state\";\n \n const HEURISTIC_NIGHTLY_RELEASE_PERIOD_IN_HOURS = 25;\n \n /**\n  * Installs `stable` or latest `nightly` version or does nothing if the current\n  * extension version is what's needed according to `desiredUpdateChannel`.\n  */\n-export async function ensureProperExtensionVersion(config: Config): Promise<never | void> {\n+export async function ensureProperExtensionVersion(config: Config, state: PersistentState): Promise<never | void> {\n     // User has built lsp server from sources, she should manage updates manually\n     if (config.serverSource?.type === ArtifactSource.Type.ExplicitPath) return;\n \n@@ -23,7 +24,7 @@ export async function ensureProperExtensionVersion(config: Config): Promise<neve\n \n     if (currentUpdChannel === UpdatesChannel.Stable) {\n         // Release date is present only when we are on nightly\n-        await config.installedNightlyExtensionReleaseDate.set(null);\n+        await state.installedNightlyExtensionReleaseDate.set(null);\n     }\n \n     if (desiredUpdChannel === UpdatesChannel.Stable) {\n@@ -39,10 +40,10 @@ export async function ensureProperExtensionVersion(config: Config): Promise<neve\n     if (currentUpdChannel === UpdatesChannel.Stable) {\n         if (!await askToDownloadProperExtensionVersion(config)) return;\n \n-        return await tryDownloadNightlyExtension(config);\n+        return await tryDownloadNightlyExtension(config, state);\n     }\n \n-    const currentExtReleaseDate = config.installedNightlyExtensionReleaseDate.get();\n+    const currentExtReleaseDate = state.installedNightlyExtensionReleaseDate.get();\n \n     if (currentExtReleaseDate === null) {\n         void vscode.window.showErrorMessage(\n@@ -66,9 +67,9 @@ export async function ensureProperExtensionVersion(config: Config): Promise<neve\n         return;\n     }\n \n-    await tryDownloadNightlyExtension(config, releaseInfo => {\n+    await tryDownloadNightlyExtension(config, state, releaseInfo => {\n         assert(\n-            currentExtReleaseDate.getTime() === config.installedNightlyExtensionReleaseDate.get()?.getTime(),\n+            currentExtReleaseDate.getTime() === state.installedNightlyExtensionReleaseDate.get()?.getTime(),\n             \"Other active VSCode instance has reinstalled the extension\"\n         );\n \n@@ -111,6 +112,7 @@ async function askToDownloadProperExtensionVersion(config: Config, reason = \"\")\n  */\n const tryDownloadNightlyExtension = notReentrant(async (\n     config: Config,\n+    state: PersistentState,\n     shouldDownload: (releaseInfo: ArtifactReleaseInfo) => boolean = () => true\n ): Promise<never | void> => {\n     const vsixSource = config.nightlyVsixSource;\n@@ -124,7 +126,7 @@ const tryDownloadNightlyExtension = notReentrant(async (\n         const vsixPath = path.join(vsixSource.dir, vsixSource.file);\n \n         await vscodeInstallExtensionFromVsix(vsixPath);\n-        await config.installedNightlyExtensionReleaseDate.set(releaseInfo.releaseDate);\n+        await state.installedNightlyExtensionReleaseDate.set(releaseInfo.releaseDate);\n         await fs.unlink(vsixPath);\n \n         await vscodeReloadWindow(); // never returns"}, {"sha": "05d32613158bcd90b40571cc4c42ce9eab721c7b", "filename": "editors/code/src/installation/server.ts", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -7,8 +7,9 @@ import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n import { downloadArtifactWithProgressUi } from \"./downloads\";\n import { log, assert, notReentrant } from \"../util\";\n import { Config, NIGHTLY_TAG } from \"../config\";\n+import { PersistentState } from \"../persistent_state\";\n \n-export async function ensureServerBinary(config: Config): Promise<null | string> {\n+export async function ensureServerBinary(config: Config, state: PersistentState): Promise<null | string> {\n     const source = config.serverSource;\n \n     if (!source) {\n@@ -37,7 +38,7 @@ export async function ensureServerBinary(config: Config): Promise<null | string>\n             return null;\n         }\n         case ArtifactSource.Type.GithubRelease: {\n-            if (!shouldDownloadServer(source, config)) {\n+            if (!shouldDownloadServer(state, source)) {\n                 return path.join(source.dir, source.file);\n             }\n \n@@ -50,24 +51,24 @@ export async function ensureServerBinary(config: Config): Promise<null | string>\n                 if (userResponse !== \"Download now\") return null;\n             }\n \n-            return await downloadServer(source, config);\n+            return await downloadServer(state, source);\n         }\n     }\n }\n \n function shouldDownloadServer(\n+    state: PersistentState,\n     source: ArtifactSource.GithubRelease,\n-    config: Config\n ): boolean {\n     if (!isBinaryAvailable(path.join(source.dir, source.file))) return true;\n \n     const installed = {\n-        tag: config.serverReleaseTag.get(),\n-        date: config.serverReleaseDate.get()\n+        tag: state.serverReleaseTag.get(),\n+        date: state.serverReleaseDate.get()\n     };\n     const required = {\n         tag: source.tag,\n-        date: config.installedNightlyExtensionReleaseDate.get()\n+        date: state.installedNightlyExtensionReleaseDate.get()\n     };\n \n     log.debug(\"Installed server:\", installed, \"required:\", required);\n@@ -86,16 +87,16 @@ function shouldDownloadServer(\n  * Enforcing no reentrancy for this is best-effort.\n  */\n const downloadServer = notReentrant(async (\n+    state: PersistentState,\n     source: ArtifactSource.GithubRelease,\n-    config: Config,\n ): Promise<null | string> => {\n     try {\n         const releaseInfo = await fetchArtifactReleaseInfo(source.repo, source.file, source.tag);\n \n         await downloadArtifactWithProgressUi(releaseInfo, source.file, source.dir, \"language server\");\n         await Promise.all([\n-            config.serverReleaseTag.set(releaseInfo.releaseName),\n-            config.serverReleaseDate.set(releaseInfo.releaseDate)\n+            state.serverReleaseTag.set(releaseInfo.releaseName),\n+            state.serverReleaseDate.set(releaseInfo.releaseDate)\n         ]);\n     } catch (err) {\n         log.downloadError(err, \"language server\", source.repo.name);"}, {"sha": "94ecd4dab64f1976be43031f6643e3fec8b8eab1", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -9,6 +9,7 @@ import { ensureServerBinary } from './installation/server';\n import { Config } from './config';\n import { log } from './util';\n import { ensureProperExtensionVersion } from './installation/extension';\n+import { PersistentState } from './persistent_state';\n \n let ctx: Ctx | undefined;\n \n@@ -34,13 +35,14 @@ export async function activate(context: vscode.ExtensionContext) {\n     context.subscriptions.push(defaultOnEnter);\n \n     const config = new Config(context);\n+    const state = new PersistentState(context);\n \n-    vscode.workspace.onDidChangeConfiguration(() => ensureProperExtensionVersion(config).catch(log.error));\n+    vscode.workspace.onDidChangeConfiguration(() => ensureProperExtensionVersion(config, state).catch(log.error));\n \n     // Don't await the user response here, otherwise we will block the lsp server bootstrap\n-    void ensureProperExtensionVersion(config).catch(log.error);\n+    void ensureProperExtensionVersion(config, state).catch(log.error);\n \n-    const serverPath = await ensureServerBinary(config);\n+    const serverPath = await ensureServerBinary(config, state);\n \n     if (serverPath == null) {\n         throw new Error(\n@@ -53,7 +55,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     // registers its `onDidChangeDocument` handler before us.\n     //\n     // This a horribly, horribly wrong way to deal with this problem.\n-    ctx = await Ctx.create(config, context, serverPath);\n+    ctx = await Ctx.create(config, state, context, serverPath);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand('reload', (ctx) => {"}, {"sha": "13095b806584f5dc1a76fe9e8bccd4f1590d2044", "filename": "editors/code/src/persistent_state.ts", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ae662617a2bc49d025adaf9c4a8ff2dfa557d36c/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=ae662617a2bc49d025adaf9c4a8ff2dfa557d36c", "patch": "@@ -0,0 +1,49 @@\n+import * as vscode from 'vscode';\n+import { log } from \"./util\";\n+\n+export class PersistentState {\n+    constructor(private readonly ctx: vscode.ExtensionContext) {\n+    }\n+\n+    readonly installedNightlyExtensionReleaseDate = new DateStorage(\n+        \"installed-nightly-extension-release-date\",\n+        this.ctx.globalState\n+    );\n+    readonly serverReleaseDate = new DateStorage(\"server-release-date\", this.ctx.globalState);\n+    readonly serverReleaseTag = new Storage<null | string>(\"server-release-tag\", this.ctx.globalState, null);\n+}\n+\n+\n+export class Storage<T> {\n+    constructor(\n+        private readonly key: string,\n+        private readonly storage: vscode.Memento,\n+        private readonly defaultVal: T\n+    ) { }\n+\n+    get(): T {\n+        const val = this.storage.get(this.key, this.defaultVal);\n+        log.debug(this.key, \"==\", val);\n+        return val;\n+    }\n+    async set(val: T) {\n+        log.debug(this.key, \"=\", val);\n+        await this.storage.update(this.key, val);\n+    }\n+}\n+export class DateStorage {\n+    inner: Storage<null | string>;\n+\n+    constructor(key: string, storage: vscode.Memento) {\n+        this.inner = new Storage(key, storage, null);\n+    }\n+\n+    get(): null | Date {\n+        const dateStr = this.inner.get();\n+        return dateStr ? new Date(dateStr) : null;\n+    }\n+\n+    async set(date: null | Date) {\n+        await this.inner.set(date ? date.toString() : null);\n+    }\n+}"}]}