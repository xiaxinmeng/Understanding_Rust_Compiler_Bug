{"sha": "0cf3ce4739568414da15ee018024e339d2c61af4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjNjZTQ3Mzk1Njg0MTRkYTE1ZWUwMTgwMjRlMzM5ZDJjNjFhZjQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-26T18:08:48Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-26T18:59:30Z"}, "message": "build-manifest: refactor checksum generation into a struct", "tree": {"sha": "cc589a7b11885298c259682516742a5552fccede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc589a7b11885298c259682516742a5552fccede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf3ce4739568414da15ee018024e339d2c61af4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+XHJMACgkQPgar6Auq\n8ZwqGA/+Jiahxsbtx965DWbGzOLOkl344eMBZ4burvD+l4ol2D7wwHgtXHA/0+V0\nSi2O+t6ugow2b/s87NrFy8Ya5YvKD1OtJqBIREoSDeeTkCjI5uUKsG5fQf4coLJ4\nSYl36/npa3/GhTfUEZaOoqOwXkQoG8xjHvOADXU8AqtNmN7a9Mg5y1d+8LSLdfR8\nt7hTipV8GH8SzvlCHV9Nx/d3ewaGFDaDMTvyZYUjao0amfAvCY77FQTWSZSLvmS7\ndRA/Zjv/BdCcfegDwA7yX1Q715QM+nApG6J9UAmPsJInIc4zQZx1tLxyzeaPIiAw\nYeNCMuRx4Ic9zLKD1QYZG8G8VHm+K8jp4hyHULDRsdjGSou9oi/YVcdX60RbTTyk\naXoRKfCjGIAAnKpoLKNivYMpTImN0A2TCMI22OElFi3FCaw2zDSzUdInUB5ZnPyV\nu3b+MVZRY2qUt1lNDSIe9uqcDrCVegQhEj43vMlGGxCDl6kL8l1WLXx0o1lT2yQ4\nntZb67jouPNyiqOr4k1CO44XDAp5VEcB2cFS1sOptheuwMHwbaWY9oSpyggi25K2\nlUTTB80JUN91y3V1JDCcK2UsBvAnZjIKjKk5G91584D/vUWiEYzaTl5lWTPrA/5C\nqXt9c/qbnXcmEfUlMeJ08DbRCTEzQ/GyLZIyaxSSPSWTlW61B+w=\n=Blmb\n-----END PGP SIGNATURE-----", "payload": "tree cc589a7b11885298c259682516742a5552fccede\nparent 0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6\nauthor Pietro Albini <pietro@pietroalbini.org> 1603735728 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1603738770 +0100\n\nbuild-manifest: refactor checksum generation into a struct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf3ce4739568414da15ee018024e339d2c61af4", "html_url": "https://github.com/rust-lang/rust/commit/0cf3ce4739568414da15ee018024e339d2c61af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf3ce4739568414da15ee018024e339d2c61af4/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "html_url": "https://github.com/rust-lang/rust/commit/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6"}], "stats": {"total": 132, "additions": 82, "deletions": 50}, "files": [{"sha": "10c34b856a2efd9c92194d172d5aa9e9d3eacd3b", "filename": "src/tools/build-manifest/src/checksum.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0cf3ce4739568414da15ee018024e339d2c61af4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fchecksum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf3ce4739568414da15ee018024e339d2c61af4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fchecksum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fchecksum.rs?ref=0cf3ce4739568414da15ee018024e339d2c61af4", "patch": "@@ -0,0 +1,75 @@\n+use crate::manifest::{FileHash, Manifest};\n+use rayon::prelude::*;\n+use sha2::{Digest, Sha256};\n+use std::collections::{HashMap, HashSet};\n+use std::error::Error;\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::path::{Path, PathBuf};\n+use std::sync::Mutex;\n+use std::time::Instant;\n+\n+pub(crate) struct Checksums {\n+    collected: Mutex<HashMap<PathBuf, String>>,\n+}\n+\n+impl Checksums {\n+    pub(crate) fn new() -> Self {\n+        Checksums { collected: Mutex::new(HashMap::new()) }\n+    }\n+\n+    pub(crate) fn fill_missing_checksums(&mut self, manifest: &mut Manifest) {\n+        let need_checksums = self.find_missing_checksums(manifest);\n+        if !need_checksums.is_empty() {\n+            self.collect_checksums(&need_checksums);\n+        }\n+        self.replace_checksums(manifest);\n+    }\n+\n+    fn find_missing_checksums(&mut self, manifest: &mut Manifest) -> HashSet<PathBuf> {\n+        let mut need_checksums = HashSet::new();\n+        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n+            if let FileHash::Missing(path) = file_hash {\n+                need_checksums.insert(path.clone());\n+            }\n+        });\n+        need_checksums\n+    }\n+\n+    fn replace_checksums(&mut self, manifest: &mut Manifest) {\n+        let collected = self.collected.lock().unwrap();\n+        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n+            if let FileHash::Missing(path) = file_hash {\n+                match collected.get(path) {\n+                    Some(hash) => *file_hash = FileHash::Present(hash.clone()),\n+                    None => panic!(\"missing hash for file {}\", path.display()),\n+                }\n+            }\n+        });\n+    }\n+\n+    fn collect_checksums(&mut self, files: &HashSet<PathBuf>) {\n+        let collection_start = Instant::now();\n+        println!(\n+            \"collecting hashes for {} tarballs across {} threads\",\n+            files.len(),\n+            rayon::current_num_threads().min(files.len()),\n+        );\n+\n+        files.par_iter().for_each(|path| match hash(path) {\n+            Ok(hash) => {\n+                self.collected.lock().unwrap().insert(path.clone(), hash);\n+            }\n+            Err(err) => eprintln!(\"error while fetching the hash for {}: {}\", path.display(), err),\n+        });\n+\n+        println!(\"collected {} hashes in {:.2?}\", files.len(), collection_start.elapsed());\n+    }\n+}\n+\n+fn hash(path: &Path) -> Result<String, Box<dyn Error>> {\n+    let mut file = BufReader::new(File::open(path)?);\n+    let mut sha256 = Sha256::default();\n+    std::io::copy(&mut file, &mut sha256)?;\n+    Ok(hex::encode(sha256.finalize()))\n+}"}, {"sha": "1debd85beb34fb4487e3175d08cc0be637cc9c7e", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 7, "deletions": 50, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0cf3ce4739568414da15ee018024e339d2c61af4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf3ce4739568414da15ee018024e339d2c61af4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=0cf3ce4739568414da15ee018024e339d2c61af4", "patch": "@@ -4,22 +4,19 @@\n //! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n //! by rustbuild (in `src/bootstrap/dist.rs`).\n \n+mod checksum;\n mod manifest;\n mod versions;\n \n-use crate::manifest::{Component, FileHash, Manifest, Package, Rename, Target};\n+use crate::checksum::Checksums;\n+use crate::manifest::{Component, Manifest, Package, Rename, Target};\n use crate::versions::{PkgType, Versions};\n-use rayon::prelude::*;\n-use sha2::Digest;\n use std::collections::{BTreeMap, HashMap, HashSet};\n use std::env;\n-use std::error::Error;\n use std::fs::{self, File};\n-use std::io::{self, BufReader, Read, Write};\n+use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n-use std::sync::Mutex;\n-use std::time::Instant;\n \n static HOSTS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n@@ -186,6 +183,7 @@ macro_rules! t {\n \n struct Builder {\n     versions: Versions,\n+    checksums: Checksums,\n     shipped_files: HashSet<String>,\n \n     input: PathBuf,\n@@ -240,6 +238,7 @@ fn main() {\n \n     Builder {\n         versions: Versions::new(&channel, &input).unwrap(),\n+        checksums: Checksums::new(),\n         shipped_files: HashSet::new(),\n \n         input,\n@@ -321,7 +320,7 @@ impl Builder {\n         self.add_renames_to(&mut manifest);\n         manifest.pkg.insert(\"rust\".to_string(), self.rust_package(&manifest));\n \n-        self.fill_missing_hashes(&mut manifest);\n+        self.checksums.fill_missing_checksums(&mut manifest);\n \n         manifest\n     }\n@@ -595,41 +594,6 @@ impl Builder {\n         assert!(t!(child.wait()).success());\n     }\n \n-    fn fill_missing_hashes(&self, manifest: &mut Manifest) {\n-        // First collect all files that need hashes\n-        let mut need_hashes = HashSet::new();\n-        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n-            if let FileHash::Missing(path) = file_hash {\n-                need_hashes.insert(path.clone());\n-            }\n-        });\n-\n-        let collected = Mutex::new(HashMap::new());\n-        let collection_start = Instant::now();\n-        println!(\n-            \"collecting hashes for {} tarballs across {} threads\",\n-            need_hashes.len(),\n-            rayon::current_num_threads().min(need_hashes.len()),\n-        );\n-        need_hashes.par_iter().for_each(|path| match fetch_hash(path) {\n-            Ok(hash) => {\n-                collected.lock().unwrap().insert(path, hash);\n-            }\n-            Err(err) => eprintln!(\"error while fetching the hash for {}: {}\", path.display(), err),\n-        });\n-        let collected = collected.into_inner().unwrap();\n-        println!(\"collected {} hashes in {:.2?}\", collected.len(), collection_start.elapsed());\n-\n-        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n-            if let FileHash::Missing(path) = file_hash {\n-                match collected.get(path) {\n-                    Some(hash) => *file_hash = FileHash::Present(hash.clone()),\n-                    None => panic!(\"missing hash for file {}\", path.display()),\n-                }\n-            }\n-        })\n-    }\n-\n     fn write_channel_files(&mut self, channel_name: &str, manifest: &Manifest) {\n         self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n         self.write(&manifest.date, channel_name, \"-date.txt\");\n@@ -660,10 +624,3 @@ impl Builder {\n         t!(std::fs::write(path, content.as_bytes()));\n     }\n }\n-\n-fn fetch_hash(path: &Path) -> Result<String, Box<dyn Error>> {\n-    let mut file = BufReader::new(File::open(path)?);\n-    let mut sha256 = sha2::Sha256::default();\n-    std::io::copy(&mut file, &mut sha256)?;\n-    Ok(hex::encode(sha256.finalize()))\n-}"}]}