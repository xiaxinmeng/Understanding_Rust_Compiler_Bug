{"sha": "d51fee092c76016f973a4a73e52a14e44c92b1c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MWZlZTA5MmM3NjAxNmY5NzNhNGE3M2U1MmExNGU0NGM5MmIxYzc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-16T22:30:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-16T22:30:25Z"}, "message": "Inline and remove `iterate_until_fixed_point()`.\n\nThe commit also removes the debug statement, because they annoyed me.\nThis change wins another 1% on `unicode_normalization`, at least partly\nbecause it no longer needs to increment `iteration`.", "tree": {"sha": "ea74b12e6cc2080f3f24af0bec57608d34bbcb73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea74b12e6cc2080f3f24af0bec57608d34bbcb73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51fee092c76016f973a4a73e52a14e44c92b1c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51fee092c76016f973a4a73e52a14e44c92b1c7", "html_url": "https://github.com/rust-lang/rust/commit/d51fee092c76016f973a4a73e52a14e44c92b1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51fee092c76016f973a4a73e52a14e44c92b1c7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b136d532460d2e35456d303726be736a3adb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b136d532460d2e35456d303726be736a3adb3d", "html_url": "https://github.com/rust-lang/rust/commit/70b136d532460d2e35456d303726be736a3adb3d"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "f30f19d41509dae6fc66849778fd9e27185437b5", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 28, "deletions": 39, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d51fee092c76016f973a4a73e52a14e44c92b1c7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51fee092c76016f973a4a73e52a14e44c92b1c7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d51fee092c76016f973a4a73e52a14e44c92b1c7", "patch": "@@ -304,8 +304,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        self.iterate_until_fixed_point(|constraint| {\n-            debug!(\"expansion: constraint={:?}\", constraint);\n+        let mut process_constraint = |constraint: &Constraint<'tcx>| {\n             let (a_region, b_vid, b_data, retain) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n@@ -331,7 +330,33 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n             let changed = self.expand_node(a_region, b_vid, b_data);\n             (changed, retain)\n-        })\n+        };\n+\n+        // Using bitsets to track the remaining elements is faster than using a\n+        // `Vec` by itself (which requires removing elements, which requires\n+        // element shuffling, which is slow).\n+        let constraints: Vec<_> = self.data.constraints.keys().collect();\n+        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n+        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n+        let mut changed = true;\n+        while changed {\n+            changed = false;\n+            for index in live_indices.iter() {\n+                let constraint = constraints[index];\n+                let (edge_changed, retain) = process_constraint(constraint);\n+                if edge_changed {\n+                    changed = true;\n+                }\n+                if !retain {\n+                    let changed = killed_indices.insert(index);\n+                    debug_assert!(changed);\n+                }\n+            }\n+            live_indices.subtract(&killed_indices);\n+\n+            // We could clear `killed_indices` here, but we don't need to and\n+            // it's cheaper not to.\n+        }\n     }\n \n     // This function is very hot in some workloads. There's a single callsite\n@@ -866,42 +891,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    fn iterate_until_fixed_point<F>(&self, mut body: F)\n-    where\n-        F: FnMut(&Constraint<'tcx>) -> (bool, bool),\n-    {\n-        // Using bitsets to track the remaining elements is faster than using a\n-        // `Vec` by itself (which requires removing elements, which requires\n-        // element shuffling, which is slow).\n-        let constraints: Vec<_> = self.data.constraints.keys().collect();\n-        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n-        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n-        let mut iteration = 0;\n-        let mut changed = true;\n-        while changed {\n-            changed = false;\n-            iteration += 1;\n-            debug!(\"---- Expansion iteration {}\", iteration);\n-            for index in live_indices.iter() {\n-                let constraint = constraints[index];\n-                let (edge_changed, retain) = body(constraint);\n-                if edge_changed {\n-                    debug!(\"updated due to constraint {:?}\", constraint);\n-                    changed = true;\n-                }\n-                if !retain {\n-                    let changed = killed_indices.insert(index);\n-                    debug_assert!(changed);\n-                }\n-            }\n-            live_indices.subtract(&killed_indices);\n-\n-            // We could clear `killed_indices` here, but we don't need to and\n-            // it's cheaper not to.\n-        }\n-        debug!(\"---- Expansion complete after {} iteration(s)\", iteration);\n-    }\n-\n     fn bound_is_met(\n         &self,\n         bound: &VerifyBound<'tcx>,"}]}