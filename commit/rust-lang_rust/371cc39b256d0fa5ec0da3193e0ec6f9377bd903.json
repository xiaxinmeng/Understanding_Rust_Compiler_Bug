{"sha": "371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWNjMzliMjU2ZDBmYTVlYzBkYTMxOTNlMGVjNmY5Mzc3YmQ5MDM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-18T22:10:58Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-22T11:21:16Z"}, "message": "rustc_metadata: use a table for impl_trait_ref.", "tree": {"sha": "480170b816371ecb0caeb8387ab8c353de450d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/480170b816371ecb0caeb8387ab8c353de450d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "html_url": "https://github.com/rust-lang/rust/commit/371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a80a11a83f1b00e750f3d1c235b67ef8ab70c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a80a11a83f1b00e750f3d1c235b67ef8ab70c29", "html_url": "https://github.com/rust-lang/rust/commit/7a80a11a83f1b00e750f3d1c235b67ef8ab70c29"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "1333e3fb3ce3ee64471b78417303115e3a73bd5d", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "patch": "@@ -711,7 +711,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    fn get_impl_data(&self, id: DefIndex) -> ImplData<'tcx> {\n+    fn get_impl_data(&self, id: DefIndex) -> ImplData {\n         match self.kind(id) {\n             EntryKind::Impl(data) => data.decode(self),\n             _ => bug!(),\n@@ -738,7 +738,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     crate fn get_impl_trait(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {\n-        self.get_impl_data(id).trait_ref.map(|tr| tr.decode((self, tcx)))\n+        self.root.per_def.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))\n     }\n \n     /// Iterates over all the stability attributes in the given crate."}, {"sha": "0dc9f91ae00e1c78bdc7f89a3304af52ca8e3eea", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "patch": "@@ -72,6 +72,7 @@ struct PerDefTables<'tcx> {\n \n     ty: PerDefTable<Lazy<Ty<'tcx>>>,\n     fn_sig: PerDefTable<Lazy<ty::PolyFnSig<'tcx>>>,\n+    impl_trait_ref: PerDefTable<Lazy<ty::TraitRef<'tcx>>>,\n     inherent_impls: PerDefTable<Lazy<[DefIndex]>>,\n     variances: PerDefTable<Lazy<[ty::Variance]>>,\n     generics: PerDefTable<Lazy<ty::Generics>>,\n@@ -511,6 +512,7 @@ impl<'tcx> EncodeContext<'tcx> {\n \n             ty: self.per_def.ty.encode(&mut self.opaque),\n             fn_sig: self.per_def.fn_sig.encode(&mut self.opaque),\n+            impl_trait_ref: self.per_def.impl_trait_ref.encode(&mut self.opaque),\n             inherent_impls: self.per_def.inherent_impls.encode(&mut self.opaque),\n             variances: self.per_def.variances.encode(&mut self.opaque),\n             generics: self.per_def.generics.encode(&mut self.opaque),\n@@ -1152,7 +1154,6 @@ impl EncodeContext<'tcx> {\n                     defaultness,\n                     parent_impl: parent,\n                     coerce_unsized_info,\n-                    trait_ref: trait_ref.map(|trait_ref| self.lazy(trait_ref)),\n                 };\n \n                 EntryKind::Impl(self.lazy(data))\n@@ -1226,6 +1227,11 @@ impl EncodeContext<'tcx> {\n         if let hir::ItemKind::Fn(..) = item.kind {\n             record!(self.per_def.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n+        if let hir::ItemKind::Impl(..) = item.kind {\n+            if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {\n+                record!(self.per_def.impl_trait_ref[def_id] <- trait_ref);\n+            }\n+        }\n         self.encode_inherent_implementations(def_id);\n         match item.kind {\n             hir::ItemKind::Enum(..) |"}, {"sha": "ad39aa34fd5c8d3f1695d4936ad1749518bed1d8", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371cc39b256d0fa5ec0da3193e0ec6f9377bd903/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=371cc39b256d0fa5ec0da3193e0ec6f9377bd903", "patch": "@@ -239,6 +239,7 @@ crate struct LazyPerDefTables<'tcx> {\n \n     pub ty: Lazy!(PerDefTable<Lazy!(Ty<'tcx>)>),\n     pub fn_sig: Lazy!(PerDefTable<Lazy!(ty::PolyFnSig<'tcx>)>),\n+    pub impl_trait_ref: Lazy!(PerDefTable<Lazy!(ty::TraitRef<'tcx>)>),\n     pub inherent_impls: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n     pub variances: Lazy!(PerDefTable<Lazy<[ty::Variance]>>),\n     pub generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n@@ -276,7 +277,7 @@ crate enum EntryKind<'tcx> {\n     Closure,\n     Generator(Lazy!(GeneratorData<'tcx>)),\n     Trait(Lazy<TraitData>),\n-    Impl(Lazy!(ImplData<'tcx>)),\n+    Impl(Lazy<ImplData>),\n     Method(Lazy<MethodData>),\n     AssocType(AssocContainer),\n     AssocOpaqueTy(AssocContainer),\n@@ -330,14 +331,14 @@ crate struct TraitData {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct ImplData<'tcx> {\n+crate struct ImplData {\n     pub polarity: ty::ImplPolarity,\n     pub defaultness: hir::Defaultness,\n     pub parent_impl: Option<DefId>,\n \n     /// This is `Some` only for impls of `CoerceUnsized`.\n+    // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n     pub coerce_unsized_info: Option<ty::adjustment::CoerceUnsizedInfo>,\n-    pub trait_ref: Option<Lazy!(ty::TraitRef<'tcx>)>,\n }\n \n "}]}