{"sha": "6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOWRmNTVhNzgyYzUzNzNjNzVkZmEyM2U2YmE1MGY4YjQyMzE4ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T15:03:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T15:03:52Z"}, "message": "Auto merge of #85700 - Bobo1239:dso_local_ppc64, r=nagisa\n\nFix static relocation model for PowerPC64\n\nWe now also use `should_assume_dso_local()` for declarations and port two\nadditional cases from clang:\n- Exclude PPC64 [1]\n- Exclude thread-local variables [2]\n\n[1]: https://github.com/llvm/llvm-project/blob/033138ea452f5f493fb5095e5963419905ad12e1/clang/lib/CodeGen/CodeGenModule.cpp#L1038-L1040\n[2]: https://github.com/llvm/llvm-project/blob/033138ea452f5f493fb5095e5963419905ad12e1/clang/lib/CodeGen/CodeGenModule.cpp#L1048-L1050\n\nTbh I don't know enough about PowerPC(64) to explain why the TOC (table of contents; like the GOT in x86?) is still needed even with the static relocation model. But with these changes [Rust-For-Linux](https://github.com/Rust-for-Linux/linux) runs again on ppc64le. (instead of [getting loaded successfully but crashing](https://github.com/Bobo1239/linux/runs/2646478783?check_suite_focus=true#step:47:358))\n\nr? `@nagisa`", "tree": {"sha": "6bd6e3ebc2dc34ae95699d2b2ae73757c7a1a115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bd6e3ebc2dc34ae95699d2b2ae73757c7a1a115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "html_url": "https://github.com/rust-lang/rust/commit/6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0d64e03ef9875e0935bb60e989542b7ec29579", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0d64e03ef9875e0935bb60e989542b7ec29579", "html_url": "https://github.com/rust-lang/rust/commit/ce0d64e03ef9875e0935bb60e989542b7ec29579"}, {"sha": "4a76934aa7e46acad5f150ff394601c0b6d6d53f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a76934aa7e46acad5f150ff394601c0b6d6d53f", "html_url": "https://github.com/rust-lang/rust/commit/4a76934aa7e46acad5f150ff394601c0b6d6d53f"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "893c909b204166eb09dd226a830bb0197ae2fdbe", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "patch": "@@ -218,27 +218,3 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n         Visibility::Protected => llvm::Visibility::Protected,\n     }\n }\n-\n-pub fn linkage_from_llvm(linkage: llvm::Linkage) -> Linkage {\n-    match linkage {\n-        llvm::Linkage::ExternalLinkage => Linkage::External,\n-        llvm::Linkage::AvailableExternallyLinkage => Linkage::AvailableExternally,\n-        llvm::Linkage::LinkOnceAnyLinkage => Linkage::LinkOnceAny,\n-        llvm::Linkage::LinkOnceODRLinkage => Linkage::LinkOnceODR,\n-        llvm::Linkage::WeakAnyLinkage => Linkage::WeakAny,\n-        llvm::Linkage::WeakODRLinkage => Linkage::WeakODR,\n-        llvm::Linkage::AppendingLinkage => Linkage::Appending,\n-        llvm::Linkage::InternalLinkage => Linkage::Internal,\n-        llvm::Linkage::PrivateLinkage => Linkage::Private,\n-        llvm::Linkage::ExternalWeakLinkage => Linkage::ExternalWeak,\n-        llvm::Linkage::CommonLinkage => Linkage::Common,\n-    }\n-}\n-\n-pub fn visibility_from_llvm(linkage: llvm::Visibility) -> Visibility {\n-    match linkage {\n-        llvm::Visibility::Default => Visibility::Default,\n-        llvm::Visibility::Hidden => Visibility::Hidden,\n-        llvm::Visibility::Protected => Visibility::Protected,\n-    }\n-}"}, {"sha": "bb16c90cd12f1ca0932a62e99b8635bfd1f97cd6", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "patch": "@@ -14,7 +14,6 @@ use tracing::debug;\n \n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n-use rustc_target::spec::RelocModel;\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes.\n@@ -181,7 +180,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }\n \n-            if cx.tcx.sess.relocation_model() == RelocModel::Static {\n+            if cx.should_assume_dso_local(llfn, true) {\n                 llvm::LLVMRustSetDSOLocal(llfn, true);\n             }\n         }"}, {"sha": "e50d5506e222f5794f7c9ebd194521df8d53e4b7", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_target::abi::{AddressSpace, Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size};\n-use rustc_target::spec::RelocModel;\n use tracing::debug;\n \n pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll Value {\n@@ -283,8 +282,8 @@ impl CodegenCx<'ll, 'tcx> {\n             }\n         }\n \n-        if self.tcx.sess.relocation_model() == RelocModel::Static {\n-            unsafe {\n+        unsafe {\n+            if self.should_assume_dso_local(g, true) {\n                 llvm::LLVMRustSetDSOLocal(g, true);\n             }\n         }\n@@ -370,9 +369,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             set_global_alignment(&self, g, self.align_of(ty));\n             llvm::LLVMSetInitializer(g, v);\n \n-            let linkage = base::linkage_from_llvm(llvm::LLVMRustGetLinkage(g));\n-            let visibility = base::visibility_from_llvm(llvm::LLVMRustGetVisibility(g));\n-            if self.should_assume_dso_local(linkage, visibility) {\n+            if self.should_assume_dso_local(g, true) {\n                 llvm::LLVMRustSetDSOLocal(g, true);\n             }\n "}, {"sha": "8b1dcea3fa262ae6d8550279df85bb4bee37e691", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "patch": "@@ -72,7 +72,7 @@ pub enum Linkage {\n \n // LLVMRustVisibility\n #[repr(C)]\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Visibility {\n     Default = 0,\n     Hidden = 1,\n@@ -1035,6 +1035,7 @@ extern \"C\" {\n     pub fn LLVMDeleteGlobal(GlobalVar: &Value);\n     pub fn LLVMGetInitializer(GlobalVar: &Value) -> Option<&Value>;\n     pub fn LLVMSetInitializer(GlobalVar: &'a Value, ConstantVal: &'a Value);\n+    pub fn LLVMIsThreadLocal(GlobalVar: &Value) -> Bool;\n     pub fn LLVMSetThreadLocal(GlobalVar: &Value, IsThreadLocal: Bool);\n     pub fn LLVMSetThreadLocalMode(GlobalVar: &Value, Mode: ThreadLocalMode);\n     pub fn LLVMIsGlobalConstant(GlobalVar: &Value) -> Bool;"}, {"sha": "93456443aa015d0da18951b6685dcbf0b0cfc3d6", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "patch": "@@ -37,7 +37,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe {\n             llvm::LLVMRustSetLinkage(g, base::linkage_to_llvm(linkage));\n             llvm::LLVMRustSetVisibility(g, base::visibility_to_llvm(visibility));\n-            if self.should_assume_dso_local(linkage, visibility) {\n+            if self.should_assume_dso_local(g, false) {\n                 llvm::LLVMRustSetDSOLocal(g, true);\n             }\n         }\n@@ -85,7 +85,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         attributes::from_fn_attrs(self, lldecl, instance);\n \n         unsafe {\n-            if self.should_assume_dso_local(linkage, visibility) {\n+            if self.should_assume_dso_local(lldecl, false) {\n                 llvm::LLVMRustSetDSOLocal(lldecl, true);\n             }\n         }\n@@ -95,28 +95,48 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n }\n \n impl CodegenCx<'ll, 'tcx> {\n-    /// Whether a definition (NB: not declaration!) can be assumed to be local to a group of\n+    /// Whether a definition or declaration can be assumed to be local to a group of\n     /// libraries that form a single DSO or executable.\n     pub(crate) unsafe fn should_assume_dso_local(\n         &self,\n-        linkage: Linkage,\n-        visibility: Visibility,\n+        llval: &llvm::Value,\n+        is_declaration: bool,\n     ) -> bool {\n-        if matches!(linkage, Linkage::Internal | Linkage::Private) {\n+        let linkage = llvm::LLVMRustGetLinkage(llval);\n+        let visibility = llvm::LLVMRustGetVisibility(llval);\n+\n+        if matches!(linkage, llvm::Linkage::InternalLinkage | llvm::Linkage::PrivateLinkage) {\n             return true;\n         }\n \n-        if visibility != Visibility::Default && linkage != Linkage::ExternalWeak {\n+        if visibility != llvm::Visibility::Default && linkage != llvm::Linkage::ExternalWeakLinkage\n+        {\n             return true;\n         }\n \n-        // Static relocation model should force copy relocations everywhere.\n-        if self.tcx.sess.relocation_model() == RelocModel::Static {\n+        // Symbols from executables can't really be imported any further.\n+        let all_exe = self.tcx.sess.crate_types().iter().all(|ty| *ty == CrateType::Executable);\n+        let is_declaration_for_linker =\n+            is_declaration || linkage == llvm::Linkage::AvailableExternallyLinkage;\n+        if all_exe && !is_declaration_for_linker {\n             return true;\n         }\n \n-        // Symbols from executables can't really be imported any further.\n-        if self.tcx.sess.crate_types().iter().all(|ty| *ty == CrateType::Executable) {\n+        // PowerPC64 prefers TOC indirection to avoid copy relocations.\n+        if matches!(&*self.tcx.sess.target.arch, \"powerpc64\" | \"powerpc64le\") {\n+            return false;\n+        }\n+\n+        // Thread-local variables generally don't support copy relocations.\n+        let is_thread_local_var = llvm::LLVMIsAGlobalVariable(llval)\n+            .map(|v| llvm::LLVMIsThreadLocal(v) == llvm::True)\n+            .unwrap_or(false);\n+        if is_thread_local_var {\n+            return false;\n+        }\n+\n+        // Static relocation model should force copy relocations everywhere.\n+        if self.tcx.sess.relocation_model() == RelocModel::Static {\n             return true;\n         }\n "}, {"sha": "2cd74a01c8424d8fcbf7bacad59e3e876976d747", "filename": "src/test/assembly/static-relocation-model.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9df55a782c5373c75dfa23e6ba50f8b42318ef/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs?ref=6f9df55a782c5373c75dfa23e6ba50f8b42318ef", "patch": "@@ -1,9 +1,10 @@\n // min-llvm-version: 12.0.0\n-// needs-llvm-components: aarch64 x86\n-// revisions:x64 A64\n+// needs-llvm-components: aarch64 x86 powerpc\n+// revisions: x64 A64 ppc64le\n // assembly-output: emit-asm\n // [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=static\n // [A64] compile-flags: --target aarch64-unknown-linux-gnu -Crelocation-model=static\n+// [ppc64le] compile-flags: --target powerpc64le-unknown-linux-gnu -Crelocation-model=static\n \n #![feature(no_core, lang_items)]\n #![no_core]\n@@ -75,3 +76,9 @@ pub fn mango() -> u8 {\n pub fn orange() -> &'static u8 {\n     &PIERIS\n }\n+\n+// For ppc64 we need to make sure to generate TOC entries even with the static relocation model\n+// ppc64le: .tc chaenomeles[TC],chaenomeles\n+// ppc64le: .tc banana[TC],banana\n+// ppc64le: .tc EXOCHORDA[TC],EXOCHORDA\n+// ppc64le: .tc PIERIS[TC],PIERIS"}]}