{"sha": "4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNWFiN2Y2YmNkMmQzNDE4ZTIxYmEyZWRjZjk0YjgxMzg5ZjZlYWI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-16T10:25:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-16T10:25:43Z"}, "message": "Rollup merge of #54209 - petrochenkov:mexpr, r=pnkfelix\n\nPartially revert 674a5db \"Fix undesirable fallout [from macro modularization]\"\n\nPartially revert https://github.com/rust-lang/rust/commit/674a5db1a50e25dd60a8ee6669edee9a366c9fab\n\n~~Closes~~ (see pnkfelix comments below) https://github.com/rust-lang/rust/issues/53675", "tree": {"sha": "bd511cc264268728fed9b091b09e260b5b10ed37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd511cc264268728fed9b091b09e260b5b10ed37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbni+oCRBK7hj4Ov3rIwAAdHIIAGk2aDMwT7gmLC8pBSFjxMeL\njPfm4bv3Qk5uFk2jpoR4E1KcRjolZIkHuDHaBNeajrNx80FdZ5AcHJJsVAeqI1I3\nAbiOCF8mei9+GP9t1++7hm+3xG28Czf80hitLotcC2pJOJw6EPq0vbN9scdw1N1L\nPtw3gDo9b0NFUaEaJWj/ZMkF9pU+JTSng2APNHYCI5WFF0UxKY8Gh2fIqLgUAuCv\ngp58Lfi/caPp+gFiPI/Vxy5F31+2I3XbRYfI9nQCXztR1BaOoO+ow9C+CiUK6Gl+\nZOvp8C19krl+zpEw0CjHpyESXjRrFqF2BUnTF+fzvHsKkyBq2gzdteFr2Qp9vnc=\n=W52L\n-----END PGP SIGNATURE-----\n", "payload": "tree bd511cc264268728fed9b091b09e260b5b10ed37\nparent 54a1d2b1314530c71831b777aabba8b117f14c5b\nparent 0a0d642f38f8e4f69997dd48dd96e364471d90bf\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1537093543 +0200\ncommitter GitHub <noreply@github.com> 1537093543 +0200\n\nRollup merge of #54209 - petrochenkov:mexpr, r=pnkfelix\n\nPartially revert 674a5db \"Fix undesirable fallout [from macro modularization]\"\n\nPartially revert https://github.com/rust-lang/rust/commit/674a5db1a50e25dd60a8ee6669edee9a366c9fab\n\n~~Closes~~ (see pnkfelix comments below) https://github.com/rust-lang/rust/issues/53675\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab", "html_url": "https://github.com/rust-lang/rust/commit/4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54a1d2b1314530c71831b777aabba8b117f14c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a1d2b1314530c71831b777aabba8b117f14c5b", "html_url": "https://github.com/rust-lang/rust/commit/54a1d2b1314530c71831b777aabba8b117f14c5b"}, {"sha": "0a0d642f38f8e4f69997dd48dd96e364471d90bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0d642f38f8e4f69997dd48dd96e364471d90bf", "html_url": "https://github.com/rust-lang/rust/commit/0a0d642f38f8e4f69997dd48dd96e364471d90bf"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "f674123aac7a2684c73d3f183c46cf9b01a40d41", "filename": "src/test/ui/run-pass/macros/macro-comma-support.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fmacros%2Fmacro-comma-support.rs?ref=4f5ab7f6bcd2d3418e21ba2edcf94b81389f6eab", "patch": "@@ -62,30 +62,30 @@ fn assert_ne() {\n \n #[test]\n fn cfg() {\n-    cfg!(pants);\n-    cfg!(pants,);\n-    cfg!(pants = \"pants\");\n-    cfg!(pants = \"pants\",);\n-    cfg!(all(pants));\n-    cfg!(all(pants),);\n-    cfg!(all(pants,));\n-    cfg!(all(pants,),);\n+    let _ = cfg!(pants);\n+    let _ = cfg!(pants,);\n+    let _ = cfg!(pants = \"pants\");\n+    let _ = cfg!(pants = \"pants\",);\n+    let _ = cfg!(all(pants));\n+    let _ = cfg!(all(pants),);\n+    let _ = cfg!(all(pants,));\n+    let _ = cfg!(all(pants,),);\n }\n \n #[test]\n fn column() {\n-    column!();\n+    let _ = column!();\n }\n \n // compile_error! is in a companion to this test in compile-fail\n \n #[test]\n fn concat() {\n-    concat!();\n-    concat!(\"hello\");\n-    concat!(\"hello\",);\n-    concat!(\"hello\", \" world\");\n-    concat!(\"hello\", \" world\",);\n+    let _ = concat!();\n+    let _ = concat!(\"hello\");\n+    let _ = concat!(\"hello\",);\n+    let _ = concat!(\"hello\", \" world\");\n+    let _ = concat!(\"hello\", \" world\",);\n }\n \n #[test]\n@@ -131,10 +131,10 @@ fn debug_assert_ne() {\n \n #[test]\n fn env() {\n-    env!(\"PATH\");\n-    env!(\"PATH\",);\n-    env!(\"PATH\", \"not found\");\n-    env!(\"PATH\", \"not found\",);\n+    let _ = env!(\"PATH\");\n+    let _ = env!(\"PATH\",);\n+    let _ = env!(\"PATH\", \"not found\");\n+    let _ = env!(\"PATH\", \"not found\",);\n }\n \n #[cfg(std)]\n@@ -158,58 +158,58 @@ fn eprintln() {\n \n #[test]\n fn file() {\n-    file!();\n+    let _ = file!();\n }\n \n #[cfg(std)]\n #[test]\n fn format() {\n-    format!(\"hello\");\n-    format!(\"hello\",);\n-    format!(\"hello {}\", \"world\");\n-    format!(\"hello {}\", \"world\",);\n+    let _ = format!(\"hello\");\n+    let _ = format!(\"hello\",);\n+    let _ = format!(\"hello {}\", \"world\");\n+    let _ = format!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn format_args() {\n-    format_args!(\"hello\");\n-    format_args!(\"hello\",);\n-    format_args!(\"hello {}\", \"world\");\n-    format_args!(\"hello {}\", \"world\",);\n+    let _ = format_args!(\"hello\");\n+    let _ = format_args!(\"hello\",);\n+    let _ = format_args!(\"hello {}\", \"world\");\n+    let _ = format_args!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn include() {\n-    include!(\"auxiliary/macro-comma-support.rs\");\n-    include!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_bytes() {\n-    include_bytes!(\"auxiliary/macro-comma-support.rs\");\n-    include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_str() {\n-    include_str!(\"auxiliary/macro-comma-support.rs\");\n-    include_str!(\"auxiliary/macro-comma-support.rs\",);\n+    let _ = include_str!(\"auxiliary/macro-comma-support.rs\");\n+    let _ = include_str!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn line() {\n-    line!();\n+    let _ = line!();\n }\n \n #[test]\n fn module_path() {\n-    module_path!();\n+    let _ = module_path!();\n }\n \n #[test]\n fn option_env() {\n-    option_env!(\"PATH\");\n-    option_env!(\"PATH\",);\n+    let _ = option_env!(\"PATH\");\n+    let _ = option_env!(\"PATH\",);\n }\n \n #[test]\n@@ -309,10 +309,10 @@ fn unreachable() {\n #[test]\n fn vec() {\n     let _: Vec<()> = vec![];\n-    vec![0];\n-    vec![0,];\n-    vec![0, 1];\n-    vec![0, 1,];\n+    let _ = vec![0];\n+    let _ = vec![0,];\n+    let _ = vec![0, 1];\n+    let _ = vec![0, 1,];\n }\n \n // give a test body access to a fmt::Formatter, which seems\n@@ -340,21 +340,21 @@ macro_rules! test_with_formatter {\n test_with_formatter! {\n     #[test]\n     fn write(f: &mut fmt::Formatter) {\n-        write!(f, \"hello\");\n-        write!(f, \"hello\",);\n-        write!(f, \"hello {}\", \"world\");\n-        write!(f, \"hello {}\", \"world\",);\n+        let _ = write!(f, \"hello\");\n+        let _ = write!(f, \"hello\",);\n+        let _ = write!(f, \"hello {}\", \"world\");\n+        let _ = write!(f, \"hello {}\", \"world\",);\n     }\n }\n \n test_with_formatter! {\n     #[test]\n     fn writeln(f: &mut fmt::Formatter) {\n-        writeln!(f);\n-        writeln!(f,);\n-        writeln!(f, \"hello\");\n-        writeln!(f, \"hello\",);\n-        writeln!(f, \"hello {}\", \"world\");\n-        writeln!(f, \"hello {}\", \"world\",);\n+        let _ = writeln!(f);\n+        let _ = writeln!(f,);\n+        let _ = writeln!(f, \"hello\");\n+        let _ = writeln!(f, \"hello\",);\n+        let _ = writeln!(f, \"hello {}\", \"world\");\n+        let _ = writeln!(f, \"hello {}\", \"world\",);\n     }\n }"}]}