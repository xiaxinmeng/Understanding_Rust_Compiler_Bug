{"sha": "b569c9dc57ee22b6ff94563af856909763dfa24b", "node_id": "C_kwDOAAsO6NoAKGI1NjljOWRjNTdlZTIyYjZmZjk0NTYzYWY4NTY5MDk3NjNkZmEyNGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T20:19:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T20:19:22Z"}, "message": "Auto merge of #105979 - matthiaskrgr:rollup-2luw3mx, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #105791 (docs: add long error explanation for error E0472)\n - #105897 (Fix an opaque type ICE)\n - #105904 (Fix arch flag on i686-apple-darwin)\n - #105949 (Bump `cfg-if` to `1.0` in rustc crates)\n - #105964 (rustdoc: prevent CSS layout of line numbers shrinking into nothing)\n - #105972 (rustdoc: simplify section anchor CSS)\n - #105973 (Avoid going through the happy path in case of non-fn builtin calls)\n - #105976 (Remove unused `check-stage2-T-arm-linux-androideabi-H-x86_64-unknown-linux-gnu` make rule)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "957ab02e2bbeec80ad6f75886cbe71c8e5dffc9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/957ab02e2bbeec80ad6f75886cbe71c8e5dffc9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b569c9dc57ee22b6ff94563af856909763dfa24b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b569c9dc57ee22b6ff94563af856909763dfa24b", "html_url": "https://github.com/rust-lang/rust/commit/b569c9dc57ee22b6ff94563af856909763dfa24b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b569c9dc57ee22b6ff94563af856909763dfa24b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8207df49e45edd654965a52ebbad19b30093cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8207df49e45edd654965a52ebbad19b30093cff", "html_url": "https://github.com/rust-lang/rust/commit/a8207df49e45edd654965a52ebbad19b30093cff"}, {"sha": "ae90226896b61b734c7d360e4b1d48665b0ba53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae90226896b61b734c7d360e4b1d48665b0ba53d", "html_url": "https://github.com/rust-lang/rust/commit/ae90226896b61b734c7d360e4b1d48665b0ba53d"}], "stats": {"total": 307, "additions": 235, "deletions": 72}, "files": [{"sha": "3d09068dbdf3321fff92db3780d976065416d8af", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -3590,7 +3590,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"bitflags\",\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n@@ -4374,7 +4374,7 @@ dependencies = [\n name = \"rustc_span\"\n version = \"0.0.0\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"md-5\",\n  \"rustc_arena\",\n  \"rustc_data_structures\","}, {"sha": "bcc8afbfd952d15763d32cd6239c5c129ee8f35b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -18,11 +18,11 @@ use rustc_infer::infer::{\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n use rustc_middle::ty::{self, RegionVid, Ty};\n+use rustc_middle::ty::{Region, TyCtxt};\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use crate::borrowck_errors;\n use crate::session_diagnostics::{\n@@ -70,7 +70,25 @@ impl<'tcx> ConstraintDescription for ConstraintCategory<'tcx> {\n ///\n /// Usually we expect this to either be empty or contain a small number of items, so we can avoid\n /// allocation most of the time.\n-pub(crate) type RegionErrors<'tcx> = Vec<RegionErrorKind<'tcx>>;\n+pub(crate) struct RegionErrors<'tcx>(Vec<RegionErrorKind<'tcx>>, TyCtxt<'tcx>);\n+\n+impl<'tcx> RegionErrors<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        Self(vec![], tcx)\n+    }\n+    #[track_caller]\n+    pub fn push(&mut self, val: impl Into<RegionErrorKind<'tcx>>) {\n+        let val = val.into();\n+        self.1.sess.delay_span_bug(DUMMY_SP, \"{val:?}\");\n+        self.0.push(val);\n+    }\n+    pub fn is_empty(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+    pub fn into_iter(self) -> impl Iterator<Item = RegionErrorKind<'tcx>> {\n+        self.0.into_iter()\n+    }\n+}\n \n #[derive(Clone, Debug)]\n pub(crate) enum RegionErrorKind<'tcx> {"}, {"sha": "308f6e19a73e86b2277985a092a5748a77827bd2", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -562,7 +562,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mir_def_id = body.source.def_id();\n         self.propagate_constraints(body);\n \n-        let mut errors_buffer = RegionErrors::new();\n+        let mut errors_buffer = RegionErrors::new(infcx.tcx);\n \n         // If this is a closure, we can propagate unsatisfied\n         // `outlives_requirements` to our creator, so create a vector\n@@ -1647,26 +1647,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let longer_fr_scc = self.constraint_sccs.scc(longer_fr);\n         debug!(\"check_bound_universal_region: longer_fr_scc={:?}\", longer_fr_scc,);\n \n-        // If we have some bound universal region `'a`, then the only\n-        // elements it can contain is itself -- we don't know anything\n-        // else about it!\n-        let Some(error_element) = ({\n-            self.scc_values.elements_contained_in(longer_fr_scc).find(|element| match element {\n-                RegionElement::Location(_) => true,\n-                RegionElement::RootUniversalRegion(_) => true,\n-                RegionElement::PlaceholderRegion(placeholder1) => placeholder != *placeholder1,\n-            })\n-        }) else {\n-            return;\n-        };\n-        debug!(\"check_bound_universal_region: error_element = {:?}\", error_element);\n+        for error_element in self.scc_values.elements_contained_in(longer_fr_scc) {\n+            match error_element {\n+                RegionElement::Location(_) | RegionElement::RootUniversalRegion(_) => {}\n+                // If we have some bound universal region `'a`, then the only\n+                // elements it can contain is itself -- we don't know anything\n+                // else about it!\n+                RegionElement::PlaceholderRegion(placeholder1) => {\n+                    if placeholder == placeholder1 {\n+                        continue;\n+                    }\n+                }\n+            }\n \n-        // Find the region that introduced this `error_element`.\n-        errors_buffer.push(RegionErrorKind::BoundUniversalRegionError {\n-            longer_fr,\n-            error_element,\n-            placeholder,\n-        });\n+            errors_buffer.push(RegionErrorKind::BoundUniversalRegionError {\n+                longer_fr,\n+                error_element,\n+                placeholder,\n+            });\n+\n+            // Stop after the first error, it gets too noisy otherwise, and does not provide more information.\n+            break;\n+        }\n+        debug!(\"check_bound_universal_region: all bounds satisfied\");\n     }\n \n     #[instrument(level = \"debug\", skip(self, infcx, errors_buffer))]"}, {"sha": "247607ff29e20717196020ee862ae279fbb268b6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1153,27 +1153,31 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n+        trace!(?annotated_type);\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n \n         let tcx = self.infcx.tcx;\n \n         for proj in &user_ty.projs {\n+            if let ty::Alias(ty::Opaque, ..) = curr_projected_ty.ty.kind() {\n+                // There is nothing that we can compare here if we go through an opaque type.\n+                // We're always in its defining scope as we can otherwise not project through\n+                // it, so we're constraining it anyways.\n+                return Ok(());\n+            }\n             let projected_ty = curr_projected_ty.projection_ty_core(\n                 tcx,\n                 self.param_env,\n                 proj,\n-                |this, field, _| {\n+                |this, field, ()| {\n                     let ty = this.field_ty(tcx, field);\n                     self.normalize(ty, locations)\n                 },\n                 |_, _| unreachable!(),\n             );\n             curr_projected_ty = projected_ty;\n         }\n-        debug!(\n-            \"user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}\",\n-            user_ty.base, annotated_type, user_ty.projs, curr_projected_ty\n-        );\n+        trace!(?curr_projected_ty);\n \n         let ty = curr_projected_ty.ty;\n         self.relate_types(ty, v.xform(ty::Variance::Contravariant), a, locations, category)?;"}, {"sha": "0366fb0a148c7c1c6e22f33e2171c520b7579f44", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -8,7 +8,7 @@ edition = \"2021\"\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n bitflags = \"1.2.1\"\n-cfg-if = \"0.1.2\"\n+cfg-if = \"1.0\"\n ena = \"0.14\"\n indexmap = { version = \"1.9.1\" }\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n@@ -21,7 +21,11 @@ rustc-hash = \"1.1.0\"\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n-smallvec = { version = \"1.8.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.8.1\", features = [\n+    \"const_generics\",\n+    \"union\",\n+    \"may_dangle\",\n+] }\n stable_deref_trait = \"1.0.0\"\n stacker = \"0.1.15\"\n tempfile = \"3.2\""}, {"sha": "276f83f1f237dd93a0f84ecc3f45ab4d28a40ce9", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -249,6 +249,7 @@ E0464: include_str!(\"./error_codes/E0464.md\"),\n E0466: include_str!(\"./error_codes/E0466.md\"),\n E0468: include_str!(\"./error_codes/E0468.md\"),\n E0469: include_str!(\"./error_codes/E0469.md\"),\n+E0472: include_str!(\"./error_codes/E0472.md\"),\n E0477: include_str!(\"./error_codes/E0477.md\"),\n E0478: include_str!(\"./error_codes/E0478.md\"),\n E0482: include_str!(\"./error_codes/E0482.md\"),\n@@ -599,7 +600,6 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0467, // removed\n //  E0470, // removed\n //  E0471, // constant evaluation error (in pattern)\n-    E0472, // llvm_asm! is unsupported on this target\n //  E0473, // dereference of reference outside its lifetime\n //  E0474, // captured variable `..` does not outlive the enclosing closure\n //  E0475, // index of slice outside its lifetime"}, {"sha": "0005cd41911a9295c8047b920b36e2a6e42b39d6", "filename": "compiler/rustc_error_codes/src/error_codes/E0472.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0472.md", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0472.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0472.md?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -0,0 +1,31 @@\n+Inline assembly (`asm!`) is not supported on this target.\n+\n+Example of erroneous code:\n+\n+```ignore (cannot-change-target)\n+// compile-flags: --target sparc64-unknown-linux-gnu\n+#![no_std]\n+\n+use core::arch::asm;\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\"); // error: inline assembly is not supported on this target\n+    }\n+}\n+```\n+\n+The Rust compiler does not support inline assembly, with the `asm!` macro\n+(previously `llvm_asm!`), for all targets. All Tier 1 targets do support this\n+macro but support among Tier 2 and 3 targets is not guaranteed (even when they\n+have `std` support). Note that this error is related to\n+`error[E0658]: inline assembly is not stable yet on this architecture`, but\n+distinct in that with `E0472` support is not planned or in progress.\n+\n+There is no way to easily fix this issue, however:\n+ * Consider if you really need inline assembly, is there some other way to\n+   achieve your goal (intrinsics, etc)?\n+ * Consider writing your assembly externally, linking with it and calling it\n+   from Rust.\n+ * Consider contributing to <https://github.com/rust-lang/rust> and help\n+   integrate support for your target!"}, {"sha": "4ec71a78a003146d8a8da6c45b9eddcfea4608d3", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -4,7 +4,7 @@ use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n \n use crate::type_error_struct;\n use rustc_ast::util::parser::PREC_POSTFIX;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n@@ -424,21 +424,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n-\n-                // This is the \"default\" function signature, used in case of error.\n-                // In that case, we check each argument against \"error\" in order to\n-                // set up all the node type bindings.\n-                (\n-                    ty::Binder::dummy(self.tcx.mk_fn_sig(\n-                        self.err_args(arg_exprs.len()).into_iter(),\n-                        self.tcx.ty_error(),\n-                        false,\n-                        hir::Unsafety::Normal,\n-                        abi::Abi::Rust,\n-                    )),\n-                    None,\n-                )\n+                let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n+\n+                return self.tcx.ty_error_with_guaranteed(err);\n             }\n         };\n \n@@ -591,7 +579,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_expr: &'tcx hir::Expr<'tcx>,\n         callee_ty: Ty<'tcx>,\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let mut unit_variant = None;\n         if let hir::ExprKind::Path(qpath) = &callee_expr.kind\n             && let Res::Def(def::DefKind::Ctor(kind, CtorKind::Const), _)\n@@ -720,7 +708,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(span, label);\n             }\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     fn confirm_deferred_closure_call("}, {"sha": "599f0b9d3fab4de99f30f25ba9fd1bf6774ed3ab", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -32,8 +32,9 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// not carry a `Ty` for `T`.)\n     ///\n     /// Note that the resulting type has not been normalized.\n+    #[instrument(level = \"debug\", skip(tcx), ret)]\n     pub fn field_ty(self, tcx: TyCtxt<'tcx>, f: Field) -> Ty<'tcx> {\n-        let answer = match self.ty.kind() {\n+        match self.ty.kind() {\n             ty::Adt(adt_def, substs) => {\n                 let variant_def = match self.variant_index {\n                     None => adt_def.non_enum_variant(),\n@@ -47,9 +48,7 @@ impl<'tcx> PlaceTy<'tcx> {\n             }\n             ty::Tuple(tys) => tys[f.index()],\n             _ => bug!(\"extracting field of non-tuple non-adt: {:?}\", self),\n-        };\n-        debug!(\"field_ty self: {:?} f: {:?} yields: {:?}\", self, f, answer);\n-        answer\n+        }\n     }\n \n     /// Convenience wrapper around `projection_ty_core` for"}, {"sha": "2071d01027266581542ae273550c10b668235376", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -400,6 +400,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn type_at(&self, i: usize) -> Ty<'tcx> {\n         if let GenericArgKind::Type(ty) = self[i].unpack() {\n             ty\n@@ -409,6 +410,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {\n         if let GenericArgKind::Lifetime(lt) = self[i].unpack() {\n             lt\n@@ -418,6 +420,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn const_at(&self, i: usize) -> ty::Const<'tcx> {\n         if let GenericArgKind::Const(ct) = self[i].unpack() {\n             ct\n@@ -427,6 +430,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn type_for_def(&self, def: &ty::GenericParamDef) -> GenericArg<'tcx> {\n         self.type_at(def.index as usize).into()\n     }"}, {"sha": "1d96893c7a3ea966aecc4852e79ea01fba386200", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -66,14 +66,14 @@ pub fn as_constant_inner<'tcx>(\n \n             let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n-            Constant { span, user_ty: user_ty, literal }\n+            Constant { span, user_ty, literal }\n         }\n         ExprKind::ZstLiteral { ref user_ty } => {\n             let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n \n             let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n-            Constant { span, user_ty: user_ty, literal }\n+            Constant { span, user_ty, literal }\n         }\n         ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n             let user_ty = user_ty.as_ref().map(push_cuta).flatten();"}, {"sha": "f90aba80bf3cf574f17fb3b0571cac22b5b4d6d2", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -2210,7 +2210,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             BindingMode::ByValue => ty::BindingMode::BindByValue(mutability),\n             BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability),\n         };\n-        let local = LocalDecl::<'tcx> {\n+        let local = LocalDecl {\n             mutability,\n             ty: var_ty,\n             user_ty: if user_ty.is_empty() { None } else { Some(Box::new(user_ty)) },"}, {"sha": "5ce2577b63c1d81cfd46150dffeb5e039ee00b0c", "filename": "compiler/rustc_span/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_span%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/compiler%2Frustc_span%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2FCargo.toml?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -13,7 +13,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_arena = { path = \"../rustc_arena\" }\n scoped-tls = \"1.0\"\n unicode-width = \"0.1.4\"\n-cfg-if = \"0.1.2\"\n+cfg-if = \"1.0\"\n tracing = \"0.1\"\n sha1 = { package = \"sha-1\", version = \"0.10.0\" }\n sha2 = \"0.10.1\""}, {"sha": "5b2aba9aa2dc814863c41bc679a1183e5df091b8", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -57,11 +57,6 @@ tidy:\n prepare:\n \t$(Q)$(BOOTSTRAP) build --stage 2 nonexistent/path/to/trigger/cargo/metadata\n \n-check-stage2-T-arm-linux-androideabi-H-x86_64-unknown-linux-gnu:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 --target arm-linux-androideabi\n-check-stage2-T-x86_64-unknown-linux-musl-H-x86_64-unknown-linux-gnu:\n-\t$(Q)$(BOOTSTRAP) test --stage 2 --target x86_64-unknown-linux-musl\n-\n TESTS_IN_2 := \\\n \tsrc/test/ui \\\n \tsrc/tools/linkchecker"}, {"sha": "68f917d3528593e164b6d90b4ceddf44444b06d0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -600,6 +600,9 @@ fn configure_cmake(\n             if target.starts_with(\"aarch64\") {\n                 // macOS uses a different name for building arm64\n                 cfg.define(\"CMAKE_OSX_ARCHITECTURES\", \"arm64\");\n+            } else if target.starts_with(\"i686\") {\n+                // macOS uses a different name for building i386\n+                cfg.define(\"CMAKE_OSX_ARCHITECTURES\", \"i386\");\n             } else {\n                 cfg.define(\"CMAKE_OSX_ARCHITECTURES\", target.triple.split('-').next().unwrap());\n             }"}, {"sha": "b2f220b057110b578c2caea9fddb0c9ef284f594", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -543,6 +543,7 @@ ul.block, .block li {\n .rustdoc .example-wrap > pre.example-line-numbers,\n .rustdoc .example-wrap > pre.src-line-numbers {\n \tflex-grow: 0;\n+\tmin-width: fit-content; /* prevent collapsing into nothing in truncated scraped examples */\n \toverflow: initial;\n \ttext-align: right;\n \t-webkit-user-select: none;\n@@ -689,14 +690,10 @@ a {\n \tposition: relative;\n }\n \n-.small-section-header:hover > .anchor {\n+.small-section-header:hover > .anchor, .impl:hover > .anchor,\n+.trait-impl:hover > .anchor, .variant:hover > .anchor {\n \tdisplay: initial;\n }\n-\n-.impl:hover > .anchor, .trait-impl:hover > .anchor, .variant:hover > .anchor {\n-\tdisplay: inline-block;\n-\tposition: absolute;\n-}\n .anchor {\n \tdisplay: none;\n \tposition: absolute;"}, {"sha": "988c911b7839a63f1f10f9823c8f14da3b342260", "filename": "src/test/rustdoc-gui/scrape-examples-layout.goml", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-layout.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-layout.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-layout.goml?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -0,0 +1,35 @@\n+// Check that the line number column has the correct layout.\n+goto: \"file://\" + |DOC_PATH| + \"/scrape_examples/fn.test_many.html\"\n+\n+// Check that it's not zero.\n+assert-property-false: (\n+    \".more-scraped-examples .scraped-example .code-wrapper .src-line-numbers\",\n+    {\"clientWidth\": \"0\"}\n+)\n+\n+// Check that examples with very long lines have the same width as ones that don't.\n+store-property: (\n+    clientWidth,\n+    \".more-scraped-examples .scraped-example:nth-child(1) .code-wrapper .src-line-numbers\",\n+    \"clientWidth\"\n+)\n+\n+assert-property: (\n+    \".more-scraped-examples .scraped-example:nth-child(2) .code-wrapper .src-line-numbers\",\n+    {\"clientWidth\": |clientWidth|}\n+)\n+\n+assert-property: (\n+    \".more-scraped-examples .scraped-example:nth-child(3) .code-wrapper .src-line-numbers\",\n+    {\"clientWidth\": |clientWidth|}\n+)\n+\n+assert-property: (\n+    \".more-scraped-examples .scraped-example:nth-child(4) .code-wrapper .src-line-numbers\",\n+    {\"clientWidth\": |clientWidth|}\n+)\n+\n+assert-property: (\n+    \".more-scraped-examples .scraped-example:nth-child(5) .code-wrapper .src-line-numbers\",\n+    {\"clientWidth\": |clientWidth|}\n+)"}, {"sha": "81a48ac50c8139fc6f2f0952e1a7c501a7a9868a", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-1.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-1.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n+    // all examples have same line count\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n     scrape_examples::test_many();\n }"}, {"sha": "c9fdf68d3be0c214bd89958672f5a545ba904dc6", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-2.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-2.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n-    scrape_examples::test_many();\n+    // ignore-tidy-linelength\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n }"}, {"sha": "c9fdf68d3be0c214bd89958672f5a545ba904dc6", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-3.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-3.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n-    scrape_examples::test_many();\n+    // ignore-tidy-linelength\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n+    scrape_examples::test_many(); /* Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. */\n }"}, {"sha": "81a48ac50c8139fc6f2f0952e1a7c501a7a9868a", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-4.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-4.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n+    // all examples have same line count\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n     scrape_examples::test_many();\n }"}, {"sha": "81a48ac50c8139fc6f2f0952e1a7c501a7a9868a", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-5.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-5.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n+    // all examples have same line count\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n     scrape_examples::test_many();\n }"}, {"sha": "81a48ac50c8139fc6f2f0952e1a7c501a7a9868a", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-6.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-6.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n+    // all examples have same line count\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n     scrape_examples::test_many();\n }"}, {"sha": "81a48ac50c8139fc6f2f0952e1a7c501a7a9868a", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check-many-7.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck-many-7.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -1,3 +1,13 @@\n fn main() {\n+    // all examples have same line count\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n+    scrape_examples::test_many();\n     scrape_examples::test_many();\n }"}, {"sha": "d7af296152f7904fe13c9c316f2c00223746864e", "filename": "src/test/ui/asm/bad-arch.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Fui%2Fasm%2Fbad-arch.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Fui%2Fasm%2Fbad-arch.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.mirunsafeck.stderr?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -14,3 +14,4 @@ LL | global_asm!(\"\");\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0472`."}, {"sha": "d7af296152f7904fe13c9c316f2c00223746864e", "filename": "src/test/ui/asm/bad-arch.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Fui%2Fasm%2Fbad-arch.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Fui%2Fasm%2Fbad-arch.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.thirunsafeck.stderr?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -14,3 +14,4 @@ LL | global_asm!(\"\");\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0472`."}, {"sha": "b752e58380a897e43aab7fd81123af3a03515242", "filename": "src/test/ui/type-alias-impl-trait/destructuring.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdestructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569c9dc57ee22b6ff94563af856909763dfa24b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdestructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdestructuring.rs?ref=b569c9dc57ee22b6ff94563af856909763dfa24b", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+// issue: https://github.com/rust-lang/rust/issues/104551\n+\n+fn main() {\n+    type T = impl Sized;\n+    let (_a, _b): T = (1u32, 2u32);\n+}"}]}