{"sha": "134cf707dfb8f37d735d20ff261366b7c2d916a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNGNmNzA3ZGZiOGYzN2Q3MzVkMjBmZjI2MTM2NmI3YzJkOTE2YTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-31T14:16:56Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-02T18:38:32Z"}, "message": "register snapshots", "tree": {"sha": "af32e703eb9a1f1564a803bde5c97e372184017f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af32e703eb9a1f1564a803bde5c97e372184017f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134cf707dfb8f37d735d20ff261366b7c2d916a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134cf707dfb8f37d735d20ff261366b7c2d916a6", "html_url": "https://github.com/rust-lang/rust/commit/134cf707dfb8f37d735d20ff261366b7c2d916a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134cf707dfb8f37d735d20ff261366b7c2d916a6/comments", "author": null, "committer": null, "parents": [{"sha": "eaf4c5c784637f3df8bdebc6ec21dbd4bc69420a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf4c5c784637f3df8bdebc6ec21dbd4bc69420a", "html_url": "https://github.com/rust-lang/rust/commit/eaf4c5c784637f3df8bdebc6ec21dbd4bc69420a"}], "stats": {"total": 207, "additions": 12, "deletions": 195}, "files": [{"sha": "affa4898010063b64fb868a6f34719a5530fa639", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -98,9 +98,6 @@ use core::iter::{range_step, MultiplicativeIterator};\n use core::marker::Sized;\n use core::mem::size_of;\n use core::mem;\n-#[cfg(stage0)]\n-use core::ops::{FnMut, FullRange};\n-#[cfg(not(stage0))]\n use core::ops::FnMut;\n use core::option::Option::{self, Some, None};\n use core::ptr::PtrExt;\n@@ -1512,9 +1509,6 @@ mod tests {\n     use core::prelude::{Some, None, range, Clone};\n     use core::prelude::{Iterator, IteratorExt};\n     use core::prelude::{AsSlice};\n-    #[cfg(stage0)]\n-    use core::prelude::{Ord, FullRange};\n-    #[cfg(not(stage0))]\n     use core::prelude::Ord;\n     use core::default::Default;\n     use core::mem;"}, {"sha": "43b5d14cc86e5c45d3a1f769ee7b3c38015061b4", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -61,11 +61,6 @@ use core::clone::Clone;\n use core::iter::AdditiveIterator;\n use core::iter::{Iterator, IteratorExt};\n use core::ops::Index;\n-#[cfg(stage0)]\n-use core::ops::FullRange as RangeFull;\n-#[cfg(stage0)]\n-use core::ops::FullRange;\n-#[cfg(not(stage0))]\n use core::ops::RangeFull;\n use core::option::Option::{self, Some, None};\n use core::result::Result;"}, {"sha": "d0b89cfa2c360d0e9178e05ba7b5aefedd47301a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -877,16 +877,6 @@ impl ops::Index<ops::RangeFrom<uint>> for String {\n         &self[][*index]\n     }\n }\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl ops::Index<ops::FullRange> for String {\n-    type Output = str;\n-    #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &str {\n-        unsafe { mem::transmute(self.vec.as_slice()) }\n-    }\n-}\n-#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Index<ops::RangeFull> for String {\n     type Output = str;\n@@ -1011,8 +1001,6 @@ mod tests {\n     use str::Utf8Error;\n     use core::iter::repeat;\n     use super::{as_string, CowString};\n-    #[cfg(stage0)]\n-    use core::ops::FullRange;\n \n     #[test]\n     fn test_as_string() {"}, {"sha": "82c1c37ab6abd983c76faf9d4a1886079d11868a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -1318,16 +1318,6 @@ impl<T> ops::Index<ops::RangeFrom<uint>> for Vec<T> {\n         self.as_slice().index(index)\n     }\n }\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::Index<ops::FullRange> for Vec<T> {\n-    type Output = [T];\n-    #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &[T] {\n-        self.as_slice()\n-    }\n-}\n-#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n     type Output = [T];\n@@ -1361,16 +1351,6 @@ impl<T> ops::IndexMut<ops::RangeFrom<uint>> for Vec<T> {\n         self.as_mut_slice().index_mut(index)\n     }\n }\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::IndexMut<ops::FullRange> for Vec<T> {\n-    type Output = [T];\n-    #[inline]\n-    fn index_mut(&mut self, _index: &ops::FullRange) -> &mut [T] {\n-        self.as_mut_slice()\n-    }\n-}\n-#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n     type Output = [T];\n@@ -1934,8 +1914,6 @@ mod tests {\n     use prelude::*;\n     use core::mem::size_of;\n     use core::iter::repeat;\n-    #[cfg(stage0)]\n-    use core::ops::FullRange;\n     use test::Bencher;\n     use super::as_vec;\n "}, {"sha": "5c4567e567b0daa9f880559994473760a69bbc2b", "filename": "src/libcore/array.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -20,9 +20,6 @@ use fmt;\n use hash::{Hash, Hasher, self};\n use iter::IntoIterator;\n use marker::Copy;\n-#[cfg(stage0)]\n-use ops::{Deref, FullRange};\n-#[cfg(not(stage0))]\n use ops::Deref;\n use option::Option;\n use slice::{Iter, IterMut, SliceExt};"}, {"sha": "694888bb2bc1a9ccff96b3d84b9d0d21f4afb8f7", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -38,7 +38,6 @@ mod float;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(hidden)]\n pub mod rt {\n-    #[cfg(stage0)] pub use self::v1::*;\n     pub mod v1;\n }\n \n@@ -191,46 +190,13 @@ impl<'a> Arguments<'a> {\n         }\n     }\n \n-    /// When using the format_args!() macro, this function is used to generate the\n-    /// Arguments structure.\n-    #[doc(hidden)] #[inline]\n-    #[cfg(stage0)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(pieces: &'a [&'a str],\n-               args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n-        Arguments {\n-            pieces: pieces,\n-            fmt: None,\n-            args: args\n-        }\n-    }\n-\n     /// This function is used to specify nonstandard formatting parameters.\n     /// The `pieces` array must be at least as long as `fmt` to construct\n     /// a valid Arguments structure. Also, any `Count` within `fmt` that is\n     /// `CountIsParam` or `CountIsNextParam` has to point to an argument\n     /// created with `argumentuint`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[cfg(stage0)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn with_placeholders(pieces: &'a [&'a str],\n-                             fmt: &'a [rt::v1::Argument],\n-                             args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n-        Arguments {\n-            pieces: pieces,\n-            fmt: Some(fmt),\n-            args: args\n-        }\n-    }\n-    /// This function is used to specify nonstandard formatting parameters.\n-    /// The `pieces` array must be at least as long as `fmt` to construct\n-    /// a valid Arguments structure. Also, any `Count` within `fmt` that is\n-    /// `CountIsParam` or `CountIsNextParam` has to point to an argument\n-    /// created with `argumentuint`. However, failing to do so doesn't cause\n-    /// unsafety, but will ignore invalid .\n-    #[doc(hidden)] #[inline]\n-    #[cfg(not(stage0))]\n     pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {\n@@ -684,25 +650,6 @@ impl Display for Error {\n     }\n }\n \n-/// This is a function which calls are emitted to by the compiler itself to\n-/// create the Argument structures that are passed into the `format` function.\n-#[doc(hidden)] #[inline]\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn argument<'a, T>(f: fn(&T, &mut Formatter) -> Result,\n-                       t: &'a T) -> ArgumentV1<'a> {\n-    ArgumentV1::new(t, f)\n-}\n-\n-/// When the compiler determines that the type of an argument *must* be a uint\n-/// (such as for width and precision), then it invokes this method.\n-#[doc(hidden)] #[inline]\n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn argumentuint<'a>(s: &'a uint) -> ArgumentV1<'a> {\n-    ArgumentV1::from_uint(s)\n-}\n-\n // Implementations of the core formatting traits\n \n macro_rules! fmt_refs {"}, {"sha": "0c9bb6316e0d805ecbcc08a05c1c6bb2fa67bc5e", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -16,19 +16,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)] pub use self::Position::*;\n-\n-#[cfg(stage0)] pub use self::Alignment::Left as AlignLeft;\n-#[cfg(stage0)] pub use self::Alignment::Right as AlignRight;\n-#[cfg(stage0)] pub use self::Alignment::Center as AlignCenter;\n-#[cfg(stage0)] pub use self::Alignment::Unknown as AlignUnknown;\n-#[cfg(stage0)] pub use self::Count::Is as CountIs;\n-#[cfg(stage0)] pub use self::Count::Implied as CountImplied;\n-#[cfg(stage0)] pub use self::Count::Param as CountIsParam;\n-#[cfg(stage0)] pub use self::Count::NextParam as CountIsNextParam;\n-#[cfg(stage0)] pub use self::Position::Next as ArgumentNext;\n-#[cfg(stage0)] pub use self::Position::At as ArgumentIs;\n-\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Argument {"}, {"sha": "7af94c73f324d80324fdacec9a44edd95df61698", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -947,28 +947,11 @@ pub trait IndexMut<Index: ?Sized> {\n }\n \n /// An unbounded range.\n-#[cfg(stage0)]\n-#[derive(Copy, Clone, PartialEq, Eq)]\n-#[lang=\"full_range\"]\n-#[unstable(feature = \"core\", reason  = \"may be renamed to RangeFull\")]\n-pub struct FullRange;\n-\n-/// An unbounded range.\n-#[cfg(not(stage0))]\n #[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"range_full\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n-#[cfg(stage0)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Debug for FullRange {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(\"..\", fmt)\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for RangeFull {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "f4b1a0633de5ceecf1d122fdce30ffd0bec80707", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -26,9 +26,6 @@\n \n // Reexported core operators\n pub use marker::{Copy, Send, Sized, Sync};\n-#[cfg(stage0)]\n-pub use ops::{Drop, Fn, FnMut, FnOnce, FullRange};\n-#[cfg(not(stage0))]\n pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions"}, {"sha": "a750e81bf596b7fd9aeebbec55822b0146c0956d", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -43,9 +43,6 @@ use default::Default;\n use iter::*;\n use num::Int;\n use ops::{FnMut, self, Index};\n-#[cfg(stage0)]\n-use ops::FullRange as RangeFull;\n-#[cfg(not(stage0))]\n use ops::RangeFull;\n use option::Option;\n use option::Option::{None, Some};\n@@ -769,16 +766,6 @@ impl<'a, T> ops::Index<ops::RangeFrom<uint>> for Iter<'a, T> {\n     }\n }\n \n-#[cfg(stage0)]\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::FullRange> for Iter<'a, T> {\n-    type Output = [T];\n-    #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &[T] {\n-        self.as_slice()\n-    }\n-}\n-#[cfg(not(stage0))]\n #[unstable(feature = \"core\")]\n impl<'a, T> ops::Index<RangeFull> for Iter<'a, T> {\n     type Output = [T];"}, {"sha": "026f708b30553f229949bde7ab1df351748f12a4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -1266,16 +1266,6 @@ mod traits {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl ops::Index<ops::FullRange> for str {\n-        type Output = str;\n-        #[inline]\n-        fn index(&self, _index: &ops::FullRange) -> &str {\n-            self\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl ops::Index<ops::RangeFull> for str {\n         type Output = str;"}, {"sha": "fc8d18df81523a6889f4216ccbc935fe9dbe4959", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -24,7 +24,6 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![cfg_attr(stage0, feature(core))]\n #![feature(int_uint)]\n #![feature(slicing_syntax)]\n #![feature(staged_api)]"}, {"sha": "61cc47375b265a84252e57793cbd511a2d7e790a", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -82,17 +82,6 @@ impl OsString {\n     }\n }\n \n-#[cfg(stage0)]\n-impl ops::Index<ops::FullRange> for OsString {\n-    type Output = OsStr;\n-\n-    #[inline]\n-    fn index(&self, _index: &ops::FullRange) -> &OsStr {\n-        unsafe { mem::transmute(self.inner.as_slice()) }\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n impl ops::Index<ops::RangeFull> for OsString {\n     type Output = OsStr;\n "}, {"sha": "47f5d64e2607cb11a024c488bb9a0c5f4137fa34", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -413,10 +413,6 @@ pub use core::fmt::{LowerExp, UpperExp};\n pub use core::fmt::Error;\n pub use core::fmt::{ArgumentV1, Arguments, write, radix, Radix, RadixFmt};\n \n-#[doc(hidden)]\n-#[cfg(stage0)]\n-pub use core::fmt::{argument, argumentuint};\n-\n /// The format function takes a precompiled format string and a list of\n /// arguments, to return the resulting formatted string.\n ///"}, {"sha": "f0981145af727d23f899d7b48ace55f06ebd0d96", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -120,7 +120,7 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![cfg_attr(not(stage0), feature(macro_reexport))]\n+#![feature(macro_reexport)]\n #![cfg_attr(test, feature(test))]\n \n // Don't link to std. We are std."}, {"sha": "74b8757f6a95326b6bd05aafbf41b98de06fd2a9", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -68,8 +68,6 @@ use fmt;\n use iter::IteratorExt;\n use option::Option;\n use option::Option::{None, Some};\n-#[cfg(stage0)]\n-use ops::FullRange;\n use str;\n use str::StrExt;\n use string::{String, CowString};"}, {"sha": "7ddd919c11e1fd858559bf78ec93edfd4e61886f", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -25,8 +25,6 @@ use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;\n use option::Option::{self, Some, None};\n-#[cfg(stage0)]\n-use ops::FullRange;\n use result::Result::{self, Ok, Err};\n use slice::{SliceExt, SliceConcatExt};\n use str::{SplitTerminator, FromStr, StrExt};"}, {"sha": "2398485afefb7ab481eaa38a0c18bd59ab941691", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -18,10 +18,6 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-#[cfg(stage0)]\n-#[unstable(feature = \"std_misc\")]\n-#[doc(no_inline)] pub use ops::FullRange;\n-\n // Reexported functions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use mem::drop;"}, {"sha": "757aecaaaff39db28384601e4950f74e28cd4ac8", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -160,7 +160,7 @@ pub fn panicking() -> bool {\n // An uninlined, unmangled function upon which to slap yer breakpoints\n #[inline(never)]\n #[no_mangle]\n-#[cfg_attr(not(stage0), allow(private_no_mangle_fns))]\n+#[allow(private_no_mangle_fns)]\n fn rust_panic(cause: Box<Any + Send>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n@@ -238,7 +238,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n-    #[cfg_attr(not(stage0), allow(private_no_mangle_fns))]\n+    #[allow(private_no_mangle_fns)]\n     extern fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,"}, {"sha": "1a898e73cda879e6c7fb2c01e5ea4e0b90c8cc9a", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -680,17 +680,6 @@ impl ops::Index<ops::RangeTo<usize>> for Wtf8 {\n     }\n }\n \n-#[cfg(stage0)]\n-impl ops::Index<ops::FullRange> for Wtf8 {\n-    type Output = Wtf8;\n-\n-    #[inline]\n-    fn index(&self, _range: &ops::FullRange) -> &Wtf8 {\n-        self\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n impl ops::Index<ops::RangeFull> for Wtf8 {\n     type Output = Wtf8;\n "}, {"sha": "058e2e6bf7f28680c60817ed391389e5590bb4a5", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/134cf707dfb8f37d735d20ff261366b7c2d916a6/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=134cf707dfb8f37d735d20ff261366b7c2d916a6", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-31 474b324\n+  freebsd-x86_64 c5b55eb488790ff8425d74afa3b37c49517bc55f\n+  linux-i386 319f2f3573c058cb2c4dfc75faaf8ea3ae86ef11\n+  linux-x86_64 7e71108be890adfecc7644ab6ad183e8a657dc97\n+  macos-i386 b0b2676681c6d8ec8cb85700428555761c7bdbb8\n+  macos-x86_64 381dd1587920388e2f71e120a1eabac2648d9672\n+  winnt-i386 5f99509f88355437824a746f7f90fc22233edb9b\n+  winnt-x86_64 382aa20518b1a19d374f06a038025619ba00b77d\n+\n S 2015-01-28 a45e117\n   freebsd-x86_64 08a3ce7331fd1a52466acc0598cf745a009f86f6\n   linux-i386 66e36a3461c12e2102a7f7f241d1b0e242c704d0"}]}