{"sha": "32c8ea93074286f3111317fe3077698c0afe929f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYzhlYTkzMDc0Mjg2ZjMxMTEzMTdmZTMwNzc2OThjMGFmZTkyOWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T09:44:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T09:44:26Z"}, "message": "Move atom edit to libsyntax2", "tree": {"sha": "e388b0fad293968c1b5ef0163de7a81408ad1367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e388b0fad293968c1b5ef0163de7a81408ad1367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32c8ea93074286f3111317fe3077698c0afe929f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32c8ea93074286f3111317fe3077698c0afe929f", "html_url": "https://github.com/rust-lang/rust/commit/32c8ea93074286f3111317fe3077698c0afe929f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32c8ea93074286f3111317fe3077698c0afe929f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cd57d56aeafa1117a6163249d210f39efe8f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cd57d56aeafa1117a6163249d210f39efe8f28", "html_url": "https://github.com/rust-lang/rust/commit/87cd57d56aeafa1117a6163249d210f39efe8f28"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "dcf1ee81eb971e373dd6eeba3cf41efe2eef3b9e", "filename": "crates/libeditor/src/edit.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/32c8ea93074286f3111317fe3077698c0afe929f/crates%2Flibeditor%2Fsrc%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c8ea93074286f3111317fe3077698c0afe929f/crates%2Flibeditor%2Fsrc%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fedit.rs?ref=32c8ea93074286f3111317fe3077698c0afe929f", "patch": "@@ -1,16 +1,11 @@\n use {TextRange, TextUnit};\n+use libsyntax2::AtomEdit;\n \n #[derive(Debug, Clone)]\n pub struct Edit {\n     atoms: Vec<AtomEdit>,\n }\n \n-#[derive(Debug, Clone)]\n-pub struct AtomEdit {\n-    pub delete: TextRange,\n-    pub insert: String,\n-}\n-\n #[derive(Debug)]\n pub struct EditBuilder {\n     atoms: Vec<AtomEdit>\n@@ -21,23 +16,23 @@ impl EditBuilder {\n         EditBuilder { atoms: Vec::new() }\n     }\n \n-    pub fn replace(&mut self, range: TextRange, replacement: String) {\n-        self.atoms.push(AtomEdit { delete: range, insert: replacement })\n+    pub fn replace(&mut self, range: TextRange, replace_with: String) {\n+        self.atoms.push(AtomEdit::replace(range, replace_with))\n     }\n \n     pub fn delete(&mut self, range: TextRange) {\n-        self.replace(range, String::new());\n+        self.atoms.push(AtomEdit::delete(range))\n     }\n \n     pub fn insert(&mut self, offset: TextUnit, text: String) {\n-        self.replace(TextRange::offset_len(offset, 0.into()), text)\n+        self.atoms.push(AtomEdit::insert(offset, text))\n     }\n \n     pub fn finish(self) -> Edit {\n         let mut atoms = self.atoms;\n         atoms.sort_by_key(|a| a.delete.start());\n         for (a1, a2) in atoms.iter().zip(atoms.iter().skip(1)) {\n-            assert!(a1.end() <= a2.start())\n+            assert!(a1.delete.end() <= a2.delete.start())\n         }\n         Edit { atoms }\n     }\n@@ -52,16 +47,18 @@ impl Edit {\n         let mut total_len = text.len();\n         for atom in self.atoms.iter() {\n             total_len += atom.insert.len();\n-            total_len -= atom.end() - atom.start();\n+            total_len -= u32::from(atom.delete.end() - atom.delete.start()) as usize;\n         }\n         let mut buf = String::with_capacity(total_len);\n         let mut prev = 0;\n         for atom in self.atoms.iter() {\n-            if atom.start() > prev {\n-                buf.push_str(&text[prev..atom.start()]);\n+            let start = u32::from(atom.delete.start()) as usize;\n+            let end = u32::from(atom.delete.end()) as usize;\n+            if start > prev {\n+                buf.push_str(&text[prev..start]);\n             }\n             buf.push_str(&atom.insert);\n-            prev = atom.end();\n+            prev = end;\n         }\n         buf.push_str(&text[prev..text.len()]);\n         assert_eq!(buf.len(), total_len);\n@@ -83,13 +80,3 @@ impl Edit {\n         Some(res)\n     }\n }\n-\n-impl AtomEdit {\n-    fn start(&self) -> usize {\n-        u32::from(self.delete.start()) as usize\n-    }\n-\n-    fn end(&self) -> usize {\n-        u32::from(self.delete.end()) as usize\n-    }\n-}"}, {"sha": "55302265f529b5402bed5f85906ea7d8a9ff6802", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32c8ea93074286f3111317fe3077698c0afe929f/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c8ea93074286f3111317fe3077698c0afe929f/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=32c8ea93074286f3111317fe3077698c0afe929f", "patch": "@@ -15,11 +15,12 @@ use libsyntax2::{\n     algo::{walk, find_leaf_at_offset},\n     SyntaxKind::{self, *},\n };\n+pub use libsyntax2::AtomEdit;\n pub use self::{\n     line_index::{LineIndex, LineCol},\n     extend_selection::extend_selection,\n     symbols::{StructureNode, file_structure, FileSymbol, file_symbols},\n-    edit::{EditBuilder, Edit, AtomEdit},\n+    edit::{EditBuilder, Edit},\n     code_actions::{\n         ActionResult, find_node,\n         flip_comma, add_derive, add_impl,"}, {"sha": "86fdbd23f084b9772591b41433e966fdebaaf23a", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32c8ea93074286f3111317fe3077698c0afe929f/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c8ea93074286f3111317fe3077698c0afe929f/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=32c8ea93074286f3111317fe3077698c0afe929f", "patch": "@@ -64,7 +64,7 @@ impl File {\n         validate_block_structure(root.borrowed());\n         File { root }\n     }\n-    pub fn parse(text: &str) -> Self {\n+    pub fn parse(text: &str) -> File {\n         let tokens = tokenize(&text);\n         let (root, errors) = parser_impl::parse::<yellow::GreenBuilder>(text, &tokens);\n         File::new(root, errors)\n@@ -112,3 +112,23 @@ fn validate_block_structure(root: SyntaxNodeRef) {\n         }\n     }\n }\n+\n+#[derive(Debug, Clone)]\n+pub struct AtomEdit {\n+    pub delete: TextRange,\n+    pub insert: String,\n+}\n+\n+impl AtomEdit {\n+    pub fn replace(range: TextRange, replace_with: String) -> AtomEdit {\n+        AtomEdit { delete: range, insert: replace_with }\n+    }\n+\n+    pub fn delete(range: TextRange) -> AtomEdit {\n+        AtomEdit::replace(range, String::new())\n+    }\n+\n+    pub fn insert(offset: TextUnit, text: String) -> AtomEdit {\n+        AtomEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n+    }\n+}"}]}