{"sha": "41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxY2IzZmQ3NTg3ZjQxOGFkMThiNmEzNjcyMjExZTBiZmEzMDRjZmI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-09T19:28:53Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-09T19:28:53Z"}, "message": "Rename Description to ShortLabel", "tree": {"sha": "45326ded696223bab885bde3fbef5aaefae1f407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45326ded696223bab885bde3fbef5aaefae1f407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "html_url": "https://github.com/rust-lang/rust/commit/41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "358ad0efca0fe76b040b47d199e166feb6128ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/358ad0efca0fe76b040b47d199e166feb6128ac0", "html_url": "https://github.com/rust-lang/rust/commit/358ad0efca0fe76b040b47d199e166feb6128ac0"}], "stats": {"total": 266, "additions": 133, "deletions": 133}, "files": [{"sha": "7a8734a75cad705817fb7e3e56a072bee0f88ca7", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "patch": "@@ -4,15 +4,15 @@\n mod function_signature;\n mod navigation_target;\n mod structure;\n-mod description;\n+mod short_label;\n \n use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n \n pub use navigation_target::NavigationTarget;\n pub use structure::{StructureNode, file_structure};\n pub use function_signature::FunctionSignature;\n \n-pub(crate) use description::Description;\n+pub(crate) use short_label::ShortLabel;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()"}, {"sha": "4f6b0a8588829c8db335c2a279d0ce8283ebba90", "filename": "crates/ra_ide_api/src/display/description.rs", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/358ad0efca0fe76b040b47d199e166feb6128ac0/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fdescription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358ad0efca0fe76b040b47d199e166feb6128ac0/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fdescription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fdescription.rs?ref=358ad0efca0fe76b040b47d199e166feb6128ac0", "patch": "@@ -1,92 +0,0 @@\n-use ra_syntax::{\n-    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, AstNode},\n-};\n-\n-pub(crate) trait Description {\n-    fn description(&self) -> Option<String>;\n-}\n-\n-impl Description for ast::FnDef {\n-    fn description(&self) -> Option<String> {\n-        Some(crate::display::function_label(self))\n-    }\n-}\n-\n-impl Description for ast::StructDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_node(self, \"struct \")\n-    }\n-}\n-\n-impl Description for ast::EnumDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_node(self, \"enum \")\n-    }\n-}\n-\n-impl Description for ast::TraitDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_node(self, \"trait \")\n-    }\n-}\n-\n-impl Description for ast::Module {\n-    fn description(&self) -> Option<String> {\n-        description_from_node(self, \"mod \")\n-    }\n-}\n-\n-impl Description for ast::TypeAliasDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_node(self, \"type \")\n-    }\n-}\n-\n-impl Description for ast::ConstDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_ascribed_node(self, \"const \")\n-    }\n-}\n-\n-impl Description for ast::StaticDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_ascribed_node(self, \"static \")\n-    }\n-}\n-\n-impl Description for ast::NamedFieldDef {\n-    fn description(&self) -> Option<String> {\n-        description_from_ascribed_node(self, \"\")\n-    }\n-}\n-\n-impl Description for ast::EnumVariant {\n-    fn description(&self) -> Option<String> {\n-        Some(self.name()?.text().to_string())\n-    }\n-}\n-\n-fn description_from_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n-where\n-    T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n-{\n-    let mut string = description_from_node(node, prefix)?;\n-\n-    if let Some(type_ref) = node.ascribed_type() {\n-        string.push_str(\": \");\n-        type_ref.syntax().text().push_to(&mut string);\n-    }\n-\n-    Some(string)\n-}\n-\n-fn description_from_node<T>(node: &T, label: &str) -> Option<String>\n-where\n-    T: NameOwner + VisibilityOwner,\n-{\n-    let mut string =\n-        node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n-    string.push_str(label);\n-    string.push_str(node.name()?.text().as_str());\n-    Some(string)\n-}"}, {"sha": "9b17d6adc115087e18a6afcebfc24b056f71b069", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n use hir::{ModuleSource, FieldSource, ImplItem};\n \n use crate::{FileSymbol, db::RootDatabase};\n-use super::description::Description;\n+use super::short_label::ShortLabel;\n \n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n@@ -142,7 +142,7 @@ impl NavigationTarget {\n                 None,\n                 node.syntax(),\n                 node.doc_comment_text(),\n-                node.description(),\n+                node.short_label(),\n             ),\n         }\n     }\n@@ -157,7 +157,7 @@ impl NavigationTarget {\n                 None,\n                 source.syntax(),\n                 source.doc_comment_text(),\n-                source.description(),\n+                source.short_label(),\n             );\n         }\n         NavigationTarget::from_module(db, module)\n@@ -169,7 +169,7 @@ impl NavigationTarget {\n             file_id.original_file(db),\n             &*fn_def,\n             fn_def.doc_comment_text(),\n-            fn_def.description(),\n+            fn_def.short_label(),\n         )\n     }\n \n@@ -178,7 +178,7 @@ impl NavigationTarget {\n         let file_id = file_id.original_file(db);\n         match field {\n             FieldSource::Named(it) => {\n-                NavigationTarget::from_named(file_id, &*it, it.doc_comment_text(), it.description())\n+                NavigationTarget::from_named(file_id, &*it, it.doc_comment_text(), it.short_label())\n             }\n             FieldSource::Pos(it) => {\n                 NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax(), None, None)\n@@ -194,7 +194,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::AdtDef::Union(s) => {\n@@ -203,7 +203,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::AdtDef::Enum(s) => {\n@@ -212,7 +212,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n         }\n@@ -231,7 +231,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::Union(s) => {\n@@ -240,7 +240,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::Const(s) => {\n@@ -249,7 +249,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::Static(s) => {\n@@ -258,7 +258,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::Enum(e) => {\n@@ -267,7 +267,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::EnumVariant(var) => {\n@@ -276,7 +276,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::Trait(e) => {\n@@ -285,7 +285,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::TypeAlias(e) => {\n@@ -294,7 +294,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             hir::ModuleDef::BuiltinType(..) => {\n@@ -328,7 +328,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n             ImplItem::TypeAlias(a) => {\n@@ -337,7 +337,7 @@ impl NavigationTarget {\n                     file_id.original_file(db),\n                     &*node,\n                     node.doc_comment_text(),\n-                    node.description(),\n+                    node.short_label(),\n                 )\n             }\n         }\n@@ -446,15 +446,15 @@ fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<Str\n     // FIXME: After type inference is done, add type information to improve the output\n \n     visitor()\n-        .visit(|node: &ast::FnDef| node.description())\n-        .visit(|node: &ast::StructDef| node.description())\n-        .visit(|node: &ast::EnumDef| node.description())\n-        .visit(|node: &ast::TraitDef| node.description())\n-        .visit(|node: &ast::Module| node.description())\n-        .visit(|node: &ast::TypeAliasDef| node.description())\n-        .visit(|node: &ast::ConstDef| node.description())\n-        .visit(|node: &ast::StaticDef| node.description())\n-        .visit(|node: &ast::NamedFieldDef| node.description())\n-        .visit(|node: &ast::EnumVariant| node.description())\n+        .visit(|node: &ast::FnDef| node.short_label())\n+        .visit(|node: &ast::StructDef| node.short_label())\n+        .visit(|node: &ast::EnumDef| node.short_label())\n+        .visit(|node: &ast::TraitDef| node.short_label())\n+        .visit(|node: &ast::Module| node.short_label())\n+        .visit(|node: &ast::TypeAliasDef| node.short_label())\n+        .visit(|node: &ast::ConstDef| node.short_label())\n+        .visit(|node: &ast::StaticDef| node.short_label())\n+        .visit(|node: &ast::NamedFieldDef| node.short_label())\n+        .visit(|node: &ast::EnumVariant| node.short_label())\n         .accept(&node)?\n }"}, {"sha": "6acb2ab925e67a2852c4320481fc388dffb9318a", "filename": "crates/ra_ide_api/src/display/short_label.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "patch": "@@ -0,0 +1,92 @@\n+use ra_syntax::{\n+    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, AstNode},\n+};\n+\n+pub(crate) trait ShortLabel {\n+    fn short_label(&self) -> Option<String>;\n+}\n+\n+impl ShortLabel for ast::FnDef {\n+    fn short_label(&self) -> Option<String> {\n+        Some(crate::display::function_label(self))\n+    }\n+}\n+\n+impl ShortLabel for ast::StructDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"struct \")\n+    }\n+}\n+\n+impl ShortLabel for ast::EnumDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"enum \")\n+    }\n+}\n+\n+impl ShortLabel for ast::TraitDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"trait \")\n+    }\n+}\n+\n+impl ShortLabel for ast::Module {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"mod \")\n+    }\n+}\n+\n+impl ShortLabel for ast::TypeAliasDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"type \")\n+    }\n+}\n+\n+impl ShortLabel for ast::ConstDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_ascribed_node(self, \"const \")\n+    }\n+}\n+\n+impl ShortLabel for ast::StaticDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_ascribed_node(self, \"static \")\n+    }\n+}\n+\n+impl ShortLabel for ast::NamedFieldDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_ascribed_node(self, \"\")\n+    }\n+}\n+\n+impl ShortLabel for ast::EnumVariant {\n+    fn short_label(&self) -> Option<String> {\n+        Some(self.name()?.text().to_string())\n+    }\n+}\n+\n+fn short_label_from_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+where\n+    T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+{\n+    let mut string = short_label_from_node(node, prefix)?;\n+\n+    if let Some(type_ref) = node.ascribed_type() {\n+        string.push_str(\": \");\n+        type_ref.syntax().text().push_to(&mut string);\n+    }\n+\n+    Some(string)\n+}\n+\n+fn short_label_from_node<T>(node: &T, label: &str) -> Option<String>\n+where\n+    T: NameOwner + VisibilityOwner,\n+{\n+    let mut string =\n+        node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+    string.push_str(label);\n+    string.push_str(node.name()?.text().as_str());\n+    Some(string)\n+}"}, {"sha": "325a5a4f3b1edc93e62b456ba12add0782103375", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cb3fd7587f418ad18b6a3672211e0bfa304cfb/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=41cb3fd7587f418ad18b6a3672211e0bfa304cfb", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     db::RootDatabase,\n     RangeInfo,\n     name_ref_kind::{NameRefKind::*, classify_name_ref},\n-    display::Description,\n+    display::ShortLabel,\n };\n \n pub(crate) fn goto_definition(\n@@ -116,34 +116,34 @@ pub(crate) fn name_definition(\n fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n     visitor()\n         .visit(|node: &ast::StructDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::EnumDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::EnumVariant| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::FnDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::TypeAliasDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::ConstDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::StaticDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::TraitDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::NamedFieldDef| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::Module| {\n-            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.description())\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n         })\n         .visit(|node: &ast::MacroCall| {\n             NavigationTarget::from_named(file_id, node, node.doc_comment_text(), None)"}]}