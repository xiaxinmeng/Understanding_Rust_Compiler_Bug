{"sha": "d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDRmYzkxOTZjOWM4MGUxYzI5YTA0ZWYwMmQxMTY1YWQyY2Q3NjA=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-09T23:48:31Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-10T19:23:16Z"}, "message": "An attempt at a macro to support HTML literals", "tree": {"sha": "e35060d40bb8b032dd30aef8f3d9825f982b0c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e35060d40bb8b032dd30aef8f3d9825f982b0c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "html_url": "https://github.com/rust-lang/rust/commit/d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d704fc9196c9c80e1c29a04ef02d1165ad2cd760/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96fdad2fb7210c73c1608c6d90f94a2b4335e0b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/96fdad2fb7210c73c1608c6d90f94a2b4335e0b7", "html_url": "https://github.com/rust-lang/rust/commit/96fdad2fb7210c73c1608c6d90f94a2b4335e0b7"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "2d6e4ec8c92e1f54bcba6ce91833f350f8624065", "filename": "src/test/run-pass/html-literals.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d704fc9196c9c80e1c29a04ef02d1165ad2cd760/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704fc9196c9c80e1c29a04ef02d1165ad2cd760/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=d704fc9196c9c80e1c29a04ef02d1165ad2cd760", "patch": "@@ -0,0 +1,68 @@\n+// A test of the macro system. Can we do HTML literals?\n+\n+// xfail-pretty\n+// xfail-test\n+\n+macro_rules! html {\n+    { $($body:tt)* } => {\n+        let builder = HTMLBuilder();\n+        build_html!{builder := $($body)*};\n+        builder.getDoc()\n+    }\n+}\n+\n+macro_rules! build_html {\n+    { $builder:expr := </$tag:ident> $($rest:tt)* } => {\n+        $builder.endTag(stringify!($tag));\n+        build_html!{ $builder := $($rest)* };\n+    };\n+\n+    { $builder:expr := <$tag:ident> $($rest:tt)* } => {\n+        $builder.beginTag(stringify!($tag));\n+        build_html!{ $builder := $($rest)* };\n+    };\n+\n+    { $builder:expr := . $($rest:tt)* } => {\n+        $builder.addText(~\".\");\n+        build_html!{ $builder := $($rest)* };\n+    };\n+\n+    { $builder:expr := $word:ident $($rest:tt)* } => {\n+        $builder.addText(stringify!($word));\n+        build_html!{ $builder := $($rest)* };\n+    };\n+\n+    { $builder:expr := } => { }\n+}\n+\n+fn main() {\n+\n+    let page = html! {\n+        <html>\n+            <head><title>This is the title.</title></head>\n+            <body>\n+            <p>This is some text</p>\n+            </body>\n+        </html>\n+    };\n+\n+    // When we can do this, we are successful:\n+    //\n+    //let page = tag(~\"html\", ~[tag(~\"head\", ~[...])])\n+\n+}\n+\n+enum HTMLFragment {    \n+}\n+\n+struct HTMLBuilder {\n+    bar: ();\n+    fn getDoc() -> HTMLFragment { fail }\n+    fn beginTag(tag: ~str) { }\n+    fn endTag(tag: ~str) { }\n+    fn addText(test: ~str) { }\n+}\n+\n+fn HTMLBuilder() -> HTMLBuilder {\n+    HTMLBuilder { bar: () }\n+}\n\\ No newline at end of file"}]}