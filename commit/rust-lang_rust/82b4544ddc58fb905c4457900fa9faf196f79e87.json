{"sha": "82b4544ddc58fb905c4457900fa9faf196f79e87", "node_id": "C_kwDOAAsO6NoAKDgyYjQ1NDRkZGM1OGZiOTA1YzQ0NTc5MDBmYTlmYWYxOTZmNzllODc", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-05T00:01:14Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-09T19:54:00Z"}, "message": "add benchmarks and tests for Hash and Eq impls on Path\n\nThe tests check for consistency between Ord, Eq and Hash", "tree": {"sha": "f207df873619f102f79958476477f6768e610177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f207df873619f102f79958476477f6768e610177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b4544ddc58fb905c4457900fa9faf196f79e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b4544ddc58fb905c4457900fa9faf196f79e87", "html_url": "https://github.com/rust-lang/rust/commit/82b4544ddc58fb905c4457900fa9faf196f79e87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b4544ddc58fb905c4457900fa9faf196f79e87/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "html_url": "https://github.com/rust-lang/rust/commit/07acdb48a0e0b22d08a45e3ced0378e0027b40eb"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "2bf499e1ab823b656aefaab444a876fdcdd08b8a", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/82b4544ddc58fb905c4457900fa9faf196f79e87/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b4544ddc58fb905c4457900fa9faf196f79e87/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=82b4544ddc58fb905c4457900fa9faf196f79e87", "patch": "@@ -1,6 +1,8 @@\n use super::*;\n \n-use crate::collections::BTreeSet;\n+use crate::collections::hash_map::DefaultHasher;\n+use crate::collections::{BTreeSet, HashSet};\n+use crate::hash::Hasher;\n use crate::rc::Rc;\n use crate::sync::Arc;\n use core::hint::black_box;\n@@ -1632,7 +1634,25 @@ fn into_rc() {\n fn test_ord() {\n     macro_rules! ord(\n         ($ord:ident, $left:expr, $right:expr) => ( {\n-            assert_eq!(Path::new($left).cmp(&Path::new($right)), core::cmp::Ordering::$ord);\n+            use core::cmp::Ordering;\n+\n+            let left = Path::new($left);\n+            let right = Path::new($right);\n+            assert_eq!(left.cmp(&right), Ordering::$ord);\n+            if (core::cmp::Ordering::$ord == Ordering::Equal) {\n+                assert_eq!(left, right);\n+\n+                let mut hasher = DefaultHasher::new();\n+                left.hash(&mut hasher);\n+                let left_hash = hasher.finish();\n+                hasher = DefaultHasher::new();\n+                right.hash(&mut hasher);\n+                let right_hash = hasher.finish();\n+\n+                assert_eq!(left_hash, right_hash, \"hashes for {:?} and {:?} must match\", left, right);\n+            } else {\n+                assert_ne!(left, right);\n+            }\n         });\n     );\n \n@@ -1693,3 +1713,59 @@ fn bench_path_cmp_fast_path_short(b: &mut test::Bencher) {\n         set.insert(paths[500].as_path());\n     });\n }\n+\n+#[bench]\n+fn bench_path_hashset(b: &mut test::Bencher) {\n+    let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n+    let paths: Vec<_> =\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+\n+    let mut set = HashSet::new();\n+\n+    paths.iter().for_each(|p| {\n+        set.insert(p.as_path());\n+    });\n+\n+    b.iter(|| {\n+        set.remove(paths[500].as_path());\n+        set.insert(black_box(paths[500].as_path()))\n+    });\n+}\n+\n+#[bench]\n+fn bench_path_hashset_miss(b: &mut test::Bencher) {\n+    let prefix = \"/my/home/is/my/castle/and/my/castle/has/a/rusty/workbench/\";\n+    let paths: Vec<_> =\n+        (0..1000).map(|num| PathBuf::from(prefix).join(format!(\"file {}.rs\", num))).collect();\n+\n+    let mut set = HashSet::new();\n+\n+    paths.iter().for_each(|p| {\n+        set.insert(p.as_path());\n+    });\n+\n+    let probe = PathBuf::from(prefix).join(\"other\");\n+\n+    b.iter(|| set.remove(black_box(probe.as_path())));\n+}\n+\n+#[bench]\n+fn bench_hash_path_short(b: &mut test::Bencher) {\n+    let mut hasher = DefaultHasher::new();\n+    let path = Path::new(\"explorer.exe\");\n+\n+    b.iter(|| black_box(path).hash(&mut hasher));\n+\n+    black_box(hasher.finish());\n+}\n+\n+#[bench]\n+fn bench_hash_path_long(b: &mut test::Bencher) {\n+    let mut hasher = DefaultHasher::new();\n+    let path =\n+        Path::new(\"/aaaaa/aaaaaa/./../aaaaaaaa/bbbbbbbbbbbbb/ccccccccccc/ddddddddd/eeeeeee.fff\");\n+\n+    b.iter(|| black_box(path).hash(&mut hasher));\n+\n+    black_box(hasher.finish());\n+}"}]}