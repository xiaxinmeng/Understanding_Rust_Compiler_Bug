{"sha": "264af16757e3aab5abc6606e016c10faf204380a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NGFmMTY3NTdlM2FhYjVhYmM2NjA2ZTAxNmMxMGZhZjIwNDM4MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-22T09:54:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-22T09:54:21Z"}, "message": "Auto merge of #46752 - Yoric:nll, r=arielb1\n\nIssue #46589 - Kill borrows on a local variable whenever we assign ov\u2026\n\n\u2026er this variable\n\nThis is a first patch for the issue, handling the simple case while I figure out the data structures involved in the more complex cases.", "tree": {"sha": "8b86372d61ace0202c683d6645fd6ae765ef3f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b86372d61ace0202c683d6645fd6ae765ef3f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264af16757e3aab5abc6606e016c10faf204380a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264af16757e3aab5abc6606e016c10faf204380a", "html_url": "https://github.com/rust-lang/rust/commit/264af16757e3aab5abc6606e016c10faf204380a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264af16757e3aab5abc6606e016c10faf204380a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ecab112131b10894f2930b7b152cfcbdda43e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ecab112131b10894f2930b7b152cfcbdda43e9", "html_url": "https://github.com/rust-lang/rust/commit/c2ecab112131b10894f2930b7b152cfcbdda43e9"}, {"sha": "fcb10908b0e01f0757efaff29c7ffea1183d57e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb10908b0e01f0757efaff29c7ffea1183d57e1", "html_url": "https://github.com/rust-lang/rust/commit/fcb10908b0e01f0757efaff29c7ffea1183d57e1"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "1e8a67929630ee9ca90f5f45911312886d22b4a2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/264af16757e3aab5abc6606e016c10faf204380a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264af16757e3aab5abc6606e016c10faf204380a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=264af16757e3aab5abc6606e016c10faf204380a", "patch": "@@ -338,15 +338,10 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n \n         match stmt.kind {\n             StatementKind::Assign(ref lhs, ref rhs) => {\n-                // NOTE: NLL RFC calls for *shallow* write; using Deep\n-                // for short-term compat w/ AST-borrowck. Also, switch\n-                // to shallow requires to dataflow: \"if this is an\n-                // assignment `place = <rvalue>`, then any loan for some\n-                // path P of which `place` is a prefix is killed.\"\n                 self.mutate_place(\n                     ContextKind::AssignLhs.new(location),\n                     (lhs, span),\n-                    Deep,\n+                    Shallow(None),\n                     JustWrite,\n                     flow_state,\n                 );"}, {"sha": "c39ae10371cdd605a910ab2cb4dbfe31bef0f8c6", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/264af16757e3aab5abc6606e016c10faf204380a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264af16757e3aab5abc6606e016c10faf204380a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=264af16757e3aab5abc6606e016c10faf204380a", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n@@ -362,6 +363,14 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             }\n \n             mir::StatementKind::Assign(ref lhs, ref rhs) => {\n+                // Make sure there are no remaining borrows for variables\n+                // that are assigned over.\n+                if let Place::Local(ref local) = *lhs {\n+                    // FIXME: Handle the case in which we're assigning over\n+                    // a projection (`foo.bar`).\n+                    self.kill_borrows_on_local(sets, local, is_activations);\n+                }\n+\n                 // NOTE: if/when the Assign case is revised to inspect\n                 // the assigned_place here, make sure to also\n                 // re-consider the current implementations of the\n@@ -404,16 +413,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::StorageDead(local) => {\n                 // Make sure there are no remaining borrows for locals that\n                 // are gone out of scope.\n-                //\n-                // FIXME: expand this to variables that are assigned over.\n-                if let Some(borrow_indexes) = self.local_map.get(&local) {\n-                    sets.kill_all(borrow_indexes.iter()\n-                                  .map(|b| ReserveOrActivateIndex::reserved(*b)));\n-                    if is_activations {\n-                        sets.kill_all(borrow_indexes.iter()\n-                                      .map(|b| ReserveOrActivateIndex::active(*b)));\n-                    }\n-                }\n+                self.kill_borrows_on_local(sets, &local, is_activations)\n             }\n \n             mir::StatementKind::InlineAsm { .. } |\n@@ -425,6 +425,21 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn kill_borrows_on_local(&self,\n+                             sets: &mut BlockSets<ReserveOrActivateIndex>,\n+                             local: &rustc::mir::Local,\n+                             is_activations: bool)\n+    {\n+        if let Some(borrow_indexes) = self.local_map.get(local) {\n+            sets.kill_all(borrow_indexes.iter()\n+                            .map(|b| ReserveOrActivateIndex::reserved(*b)));\n+            if is_activations {\n+                sets.kill_all(borrow_indexes.iter()\n+                                .map(|b| ReserveOrActivateIndex::active(*b)));\n+            }\n+        }\n+    }\n+\n     /// Models terminator effect in Reservations and ActiveBorrows\n     /// flow analyses; `is activations` tells us if we are in the\n     /// latter case."}, {"sha": "71c1d63cf5af3d41c2e688c7d6049c61b9d955bd", "filename": "src/test/compile-fail/issue-25579.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/264af16757e3aab5abc6606e016c10faf204380a/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264af16757e3aab5abc6606e016c10faf204380a/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs?ref=264af16757e3aab5abc6606e016c10faf204380a", "patch": "@@ -11,21 +11,22 @@\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n \n+#![feature(rustc_attrs)]\n+\n enum Sexpression {\n     Num(()),\n     Cons(&'static mut Sexpression)\n }\n \n-fn causes_ice(mut l: &mut Sexpression) {\n+fn causes_error_in_ast(mut l: &mut Sexpression) {\n     loop { match l {\n         &mut Sexpression::Num(ref mut n) => {},\n         &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n-                                                  //[mir]~^ ERROR [E0499]\n             l = &mut **expr; //[ast]~ ERROR [E0506]\n-                             //[mir]~^ ERROR [E0506]\n         }\n     }}\n }\n \n-fn main() {\n+#[rustc_error]\n+fn main() { //[mir]~ ERROR compilation successful\n }"}, {"sha": "043f1215ea5722e53e6bda070e78125e7b84a67f", "filename": "src/test/run-pass/borrowck/borrowck-nll-iterating-and-updating.rs", "status": "renamed", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/264af16757e3aab5abc6606e016c10faf204380a/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-nll-iterating-and-updating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264af16757e3aab5abc6606e016c10faf204380a/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-nll-iterating-and-updating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-nll-iterating-and-updating.rs?ref=264af16757e3aab5abc6606e016c10faf204380a", "patch": "@@ -10,30 +10,25 @@\n \n // compile-flags: -Z borrowck=mir -Z nll\n \n-#![allow(warnings)]\n+// This example comes from the NLL RFC.\n \n-struct Foo<T> {\n-    t: T,\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n }\n \n-impl<T: 'static + Copy> Copy for Foo<T> {}\n-impl<T: 'static + Copy> Clone for Foo<T> {\n-    fn clone(&self) -> Self {\n-        *self\n+fn to_refs<T>(list: &mut List<T>) -> Vec<&mut T> {\n+    let mut list = list;\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            list = n;\n+        } else {\n+            return result;\n+        }\n     }\n }\n \n fn main() {\n-    let mut x = 22;\n-\n-    {\n-        let p = &x;\n-        //~^ ERROR `x` does not live long enough\n-        let w = Foo { t: p };\n-\n-        let v = [w; 22];\n-    }\n-\n-    x += 1;\n-    //~^ ERROR cannot assign to `x` because it is borrowed [E0506]\n }", "previous_filename": "src/test/compile-fail/nll/where_clauses_in_repeat_rvalue.rs"}]}