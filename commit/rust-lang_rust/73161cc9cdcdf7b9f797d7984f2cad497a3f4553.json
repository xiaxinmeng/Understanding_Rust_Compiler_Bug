{"sha": "73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTYxY2M5Y2RjZGY3YjlmNzk3ZDc5ODRmMmNhZDQ5N2EzZjQ1NTM=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-27T19:23:09Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-27T19:23:09Z"}, "message": "do not use associated types placeholder for inlay hint #6191\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "52064fcade70bad4c25974bef717c5574354fa4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52064fcade70bad4c25974bef717c5574354fa4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "html_url": "https://github.com/rust-lang/rust/commit/73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a03f00476683f0e6e373c71e8ac788795029acb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03f00476683f0e6e373c71e8ac788795029acb3", "html_url": "https://github.com/rust-lang/rust/commit/a03f00476683f0e6e373c71e8ac788795029acb3"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "43db24882b751dcf0f2676dbf6610aee0a1fed0c", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "patch": "@@ -390,11 +390,27 @@ impl HirDisplay for ApplicationTy {\n                 };\n                 let trait_ = f.db.trait_data(trait_);\n                 let type_alias = f.db.type_alias_data(type_alias);\n-                write!(f, \"{}::{}\", trait_.name, type_alias.name)?;\n-                if self.parameters.len() > 0 {\n-                    write!(f, \"<\")?;\n-                    f.write_joined(&*self.parameters.0, \", \")?;\n-                    write!(f, \">\")?;\n+\n+                // Use placeholder associated types when the target is source code (https://rust-lang.github.io/chalk/book/clauses/type_equality.html#placeholder-associated-types)\n+                if f.display_target.is_source_code() || self.parameters.len() > 1 {\n+                    write!(f, \"{}::{}\", trait_.name, type_alias.name)?;\n+                    if self.parameters.len() > 0 {\n+                        write!(f, \"<\")?;\n+                        f.write_joined(&*self.parameters.0, \", \")?;\n+                        write!(f, \">\")?;\n+                    }\n+                } else {\n+                    if self.parameters.len() == 1 {\n+                        write!(\n+                            f,\n+                            \"<{} as {}>::{}\",\n+                            self.parameters.as_single().display(f.db),\n+                            trait_.name,\n+                            type_alias.name\n+                        )?;\n+                    } else {\n+                        write!(f, \"{}::{}\", trait_.name, type_alias.name)?;\n+                    }\n                 }\n             }\n             TypeCtor::ForeignType(type_alias) => {"}, {"sha": "66e171f2463f53c3a4de67ec945f95daa55a2889", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "patch": "@@ -831,11 +831,11 @@ fn issue_4966() {\n             356..362 'repeat': Repeat<Map<|&f64| -> f64>>\n             365..390 'Repeat...nner }': Repeat<Map<|&f64| -> f64>>\n             383..388 'inner': Map<|&f64| -> f64>\n-            401..404 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n-            407..416 'from_iter': fn from_iter<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n-            407..424 'from_i...epeat)': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            401..404 'vec': Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n+            407..416 'from_iter': fn from_iter<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n+            407..424 'from_i...epeat)': Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n             417..423 'repeat': Repeat<Map<|&f64| -> f64>>\n-            431..434 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            431..434 'vec': Vec<<Repeat<Map<|&f64| -> f64>> as IntoIterator>::Item>\n             431..444 'vec.foo_bar()': {unknown}\n         \"#]],\n     );"}, {"sha": "7ad8b5830c102deb32bd1fa297e6b9ebd772ad5b", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73161cc9cdcdf7b9f797d7984f2cad497a3f4553/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=73161cc9cdcdf7b9f797d7984f2cad497a3f4553", "patch": "@@ -384,12 +384,12 @@ fn infer_project_associated_type() {\n             108..261 '{     ...ter; }': ()\n             118..119 'x': u32\n             145..146 '1': u32\n-            156..157 'y': Iterable::Item<T>\n-            183..192 'no_matter': Iterable::Item<T>\n-            202..203 'z': Iterable::Item<T>\n-            215..224 'no_matter': Iterable::Item<T>\n-            234..235 'a': Iterable::Item<T>\n-            249..258 'no_matter': Iterable::Item<T>\n+            156..157 'y': <T as Iterable>::Item\n+            183..192 'no_matter': <T as Iterable>::Item\n+            202..203 'z': <T as Iterable>::Item\n+            215..224 'no_matter': <T as Iterable>::Item\n+            234..235 'a': <T as Iterable>::Item\n+            249..258 'no_matter': <T as Iterable>::Item\n         \"#]],\n     );\n }\n@@ -908,7 +908,6 @@ fn test<T: Trait>(t: T) { (*t); }\n \n #[test]\n fn associated_type_placeholder() {\n-    // inside the generic function, the associated type gets normalized to a placeholder `ApplL::Out<T>` [https://rust-lang.github.io/rustc-guide/traits/associated-types.html#placeholder-associated-types].\n     check_types(\n         r#\"\n pub trait ApplyL {\n@@ -924,7 +923,7 @@ impl<T> ApplyL for RefMutL<T> {\n fn test<T: ApplyL>() {\n     let y: <RefMutL<T> as ApplyL>::Out = no_matter;\n     y;\n-} //^ ApplyL::Out<T>\n+} //^ <T as ApplyL>::Out\n \"#,\n     );\n }\n@@ -941,7 +940,7 @@ fn foo<T: ApplyL>(t: T) -> <T as ApplyL>::Out;\n fn test<T: ApplyL>(t: T) {\n     let y = foo(t);\n     y;\n-} //^ ApplyL::Out<T>\n+} //^ <T as ApplyL>::Out\n \"#,\n     );\n }\n@@ -2120,7 +2119,7 @@ fn unselected_projection_on_impl_self() {\n         \"#,\n         expect![[r#\"\n             40..44 'self': &Self\n-            46..47 'x': Trait::Item<Self>\n+            46..47 'x': <Self as Trait>::Item\n             126..130 'self': &S\n             132..133 'x': u32\n             147..161 '{ let y = x; }': ()\n@@ -3151,3 +3150,30 @@ fn test() {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn infer_call_method_return_associated_types_with_generic() {\n+    check_infer(\n+        r#\"\n+        pub trait Default {\n+            fn default() -> Self;\n+        }\n+        pub trait Foo {\n+            type Bar: Default;\n+        }\n+\n+        pub fn quux<T: Foo>() -> T::Bar {\n+            let y = Default::default();\n+\n+            y\n+        }\n+        \"#,\n+        expect![[r#\"\n+            122..164 '{     ...   y }': <T as Foo>::Bar\n+            132..133 'y': <T as Foo>::Bar\n+            136..152 'Defaul...efault': fn default<<T as Foo>::Bar>() -> <T as Foo>::Bar\n+            136..154 'Defaul...ault()': <T as Foo>::Bar\n+            161..162 'y': <T as Foo>::Bar\n+        \"#]],\n+    );\n+}"}]}