{"sha": "f552f170db6da0133fb5452ea22cf80551dbc875", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTJmMTcwZGI2ZGEwMTMzZmI1NDUyZWEyMmNmODA1NTFkYmM4NzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-03T17:19:17Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:50:18Z"}, "message": "Rustup to rustc 1.16.0-nightly (468227129 2017-01-03): Fix various type errors for rustup", "tree": {"sha": "e8083c1f604b9fa789032ae8eee44877b0f29c43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8083c1f604b9fa789032ae8eee44877b0f29c43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f552f170db6da0133fb5452ea22cf80551dbc875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f552f170db6da0133fb5452ea22cf80551dbc875", "html_url": "https://github.com/rust-lang/rust/commit/f552f170db6da0133fb5452ea22cf80551dbc875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f552f170db6da0133fb5452ea22cf80551dbc875/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ab332303a2c7c41779436ec1964be07b576062", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ab332303a2c7c41779436ec1964be07b576062", "html_url": "https://github.com/rust-lang/rust/commit/e0ab332303a2c7c41779436ec1964be07b576062"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "7fdd8d21205f39e188ac5d2fd330c3ed8d8f8dcb", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -172,8 +172,8 @@ fn is_relevant_impl(cx: &LateContext, item: &ImplItem) -> bool {\n \n fn is_relevant_trait(cx: &LateContext, item: &TraitItem) -> bool {\n     match item.node {\n-        MethodTraitItem(_, None) => true,\n-        MethodTraitItem(_, Some(eid)) => is_relevant_expr(cx, cx.tcx.map.expr(eid)),\n+        TraitItemKind::Method(_, None) => true,\n+        TraitItemKind::Method(_, Some(eid)) => is_relevant_expr(cx, cx.tcx.map.expr(eid)),\n         _ => false,\n     }\n }"}, {"sha": "34cd40a8fdf15da82d5ffac43032cddeb754c9f5", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CyclomaticComplexity {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n-        if let MethodTraitItem(_, Some(eid)) = item.node {\n+        if let TraitItemKind::Method(_, Some(eid)) = item.node {\n             self.check(cx, cx.tcx.map.expr(eid), item.span);\n         }\n     }"}, {"sha": "eb666dcc5109df5c1f49dafebf56bb4b95e9618e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n-        if let hir::MethodTraitItem(ref sig, eid) = item.node {\n+        if let hir::TraitItemKind::Method(ref sig, eid) = item.node {\n             // don't lint extern functions decls, it's not their fault\n             if sig.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span);"}, {"sha": "ff19a59b5abea8db80ca15ee6e3ac2e1805cbc34", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItem]) {\n     fn is_named_self(item: &TraitItem, name: &str) -> bool {\n         &*item.name.as_str() == name &&\n-        if let MethodTraitItem(ref sig, _) = item.node {\n+        if let TraitItemKind::Method(ref sig, _) = item.node {\n             if sig.decl.has_self() {\n                 sig.decl.inputs.len() == 1\n             } else {"}, {"sha": "2a258ff5db77ade56507ee8405fbf5cea4ac4c3f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n-        if let MethodTraitItem(ref sig, _) = item.node {\n+        if let TraitItemKind::Method(ref sig, _) = item.node {\n             check_fn_inner(cx, &sig.decl, &sig.generics, item.span);\n         }\n     }"}, {"sha": "6d9860d92fdf53fe727a83ecf0f035c16326f3e6", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -1,7 +1,6 @@\n use rustc::hir;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::const_qualif::ConstQualif;\n use rustc::ty;\n use rustc::hir::def::Def;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n@@ -638,15 +637,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let item = cx.tcx.map.expect_item(parent);\n         if_let_chain! {[\n             let hir::ImplItemKind::Method(ref sig, _) = implitem.node,\n-            let Some(explicit_self) = sig.decl.inputs.get(0).and_then(hir::Arg::to_self),\n+            let Some(first_arg) = sig.decl.inputs.get(0),\n             let hir::ItemImpl(_, _, _, None, _, _) = item.node,\n         ], {\n             // check missing trait implementations\n             for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                 if &*name.as_str() == method_name &&\n                    sig.decl.inputs.len() == n_args &&\n                    out_type.matches(&sig.decl.output) &&\n-                   self_kind.matches(&explicit_self, false) {\n+                   self_kind.matches(&first_arg, false) {\n                     span_lint(cx, SHOULD_IMPLEMENT_TRAIT, implitem.span, &format!(\n                         \"defining a method called `{}` on this type; consider implementing \\\n                          the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -752,11 +751,12 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     ) {\n         // don't lint for constant values\n         // FIXME: can we `expect` here instead of match?\n-        if let Some(qualif) = cx.tcx.const_qualif_map.borrow().get(&arg.id) {\n-            if !qualif.contains(ConstQualif::NOT_CONST) {\n-                return;\n-            }\n+        let promotable = cx.tcx().rvalue_promotable_to_static.borrow()\n+                             .get(&arg.id).cloned().unwrap_or(true);\n+        if !promotable {\n+            return;\n         }\n+\n         // (path, fn_has_argument, methods, suffix)\n         let know_types: &[(&[_], _, &[_], _)] =\n             &[(&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n@@ -1347,7 +1347,10 @@ enum SelfKind {\n }\n \n impl SelfKind {\n-    fn matches(self, slf: &hir::ExplicitSelf, allow_value_for_ref: bool) -> bool {\n+    fn matches(self, slf: &hir::Arg, allow_value_for_ref: bool) -> bool {\n+        if !slf.has_self() {\n+            return self == No;\n+        }\n         match (self, &slf.node) {\n             (SelfKind::Value, &hir::SelfKind::Value(_)) |\n             (SelfKind::Ref, &hir::SelfKind::Region(_, hir::Mutability::MutImmutable)) |"}, {"sha": "d5be44e8c2b93ec01dc3b9a8e06bc2ede9f330d7", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -136,9 +136,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx hir::TraitItem) {\n         let desc = match trait_item.node {\n-            hir::ConstTraitItem(..) => \"an associated constant\",\n-            hir::MethodTraitItem(..) => \"a trait method\",\n-            hir::TypeTraitItem(..) => \"an associated type\",\n+            hir::TraitItemKind::Const(..) => \"an associated constant\",\n+            hir::TraitItemKind::Method(..) => \"a trait method\",\n+            hir::TraitItemKind::Type(..) => \"an associated type\",\n         };\n \n         self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, desc);"}, {"sha": "0b7bf3c3096365f75a4c3221702040b3ca060c4a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n-        if let MethodTraitItem(ref sig, _) = item.node {\n+        if let TraitItemKind::Method(ref sig, _) = item.node {\n             check_fn(cx, &sig.decl, item.id);\n         }\n     }"}, {"sha": "327e638d9b849b14581fc8ceabae818ab6d08549", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f552f170db6da0133fb5452ea22cf80551dbc875/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f552f170db6da0133fb5452ea22cf80551dbc875", "patch": "@@ -87,9 +87,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &TraitItem) {\n         match item.node {\n-            ConstTraitItem(ref ty, _) |\n-            TypeTraitItem(_, Some(ref ty)) => check_ty(cx, ty),\n-            MethodTraitItem(ref sig, _) => check_fn_decl(cx, &sig.decl),\n+            TraitItemKind::Const(ref ty, _) |\n+            TraitItemKind::Type(_, Some(ref ty)) => check_ty(cx, ty),\n+            TraitItemKind::Method(ref sig, _) => check_fn_decl(cx, &sig.decl),\n             _ => (),\n         }\n     }\n@@ -624,9 +624,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         match item.node {\n-            ConstTraitItem(ref ty, _) |\n-            TypeTraitItem(_, Some(ref ty)) => self.check_type(cx, ty),\n-            MethodTraitItem(MethodSig { ref decl, .. }, None) => self.check_fndecl(cx, decl),\n+            TraitItemKind::Const(ref ty, _) |\n+            TraitItemKind::Type(_, Some(ref ty)) => self.check_type(cx, ty),\n+            TraitItemKind::Method(MethodSig { ref decl, .. }, None) => self.check_fndecl(cx, decl),\n             // methods with default impl are covered by check_fn\n             _ => (),\n         }"}]}