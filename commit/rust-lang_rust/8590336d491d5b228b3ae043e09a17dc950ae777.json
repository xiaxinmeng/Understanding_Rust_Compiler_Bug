{"sha": "8590336d491d5b228b3ae043e09a17dc950ae777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1OTAzMzZkNDkxZDViMjI4YjNhZTA0M2UwOWExN2RjOTUwYWU3Nzc=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-21T11:54:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:09Z"}, "message": "Generalized RealPredicate", "tree": {"sha": "e45d8b09eb6f6c2f3c7cd2876169c2625c674aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e45d8b09eb6f6c2f3c7cd2876169c2625c674aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8590336d491d5b228b3ae043e09a17dc950ae777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8590336d491d5b228b3ae043e09a17dc950ae777", "html_url": "https://github.com/rust-lang/rust/commit/8590336d491d5b228b3ae043e09a17dc950ae777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8590336d491d5b228b3ae043e09a17dc950ae777/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51b7f2739b4fcf1c40335b59a15b1105df27f743", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b7f2739b4fcf1c40335b59a15b1105df27f743", "html_url": "https://github.com/rust-lang/rust/commit/51b7f2739b4fcf1c40335b59a15b1105df27f743"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "f8b9c794086261bc44028f63ac2c805fe28587d1", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=8590336d491d5b228b3ae043e09a17dc950ae777", "patch": "@@ -75,7 +75,7 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use traits::{IntPredicate, BuilderMethods};\n+use traits::{IntPredicate, RealPredicate, BuilderMethods};\n use llvm::BasicBlock;\n \n use std::any::Any;\n@@ -143,14 +143,14 @@ pub fn bin_op_to_icmp_predicate(op: hir::BinOpKind,\n     }\n }\n \n-pub fn bin_op_to_fcmp_predicate(op: hir::BinOpKind) -> llvm::RealPredicate {\n+pub fn bin_op_to_fcmp_predicate(op: hir::BinOpKind) -> RealPredicate {\n     match op {\n-        hir::BinOpKind::Eq => llvm::RealOEQ,\n-        hir::BinOpKind::Ne => llvm::RealUNE,\n-        hir::BinOpKind::Lt => llvm::RealOLT,\n-        hir::BinOpKind::Le => llvm::RealOLE,\n-        hir::BinOpKind::Gt => llvm::RealOGT,\n-        hir::BinOpKind::Ge => llvm::RealOGE,\n+        hir::BinOpKind::Eq => RealPredicate::RealOEQ,\n+        hir::BinOpKind::Ne => RealPredicate::RealUNE,\n+        hir::BinOpKind::Lt => RealPredicate::RealOLT,\n+        hir::BinOpKind::Le => RealPredicate::RealOLE,\n+        hir::BinOpKind::Gt => RealPredicate::RealOGT,\n+        hir::BinOpKind::Ge => RealPredicate::RealOGE,\n         op => {\n             bug!(\"comparison_op_to_fcmp_predicate: expected comparison operator, \\\n                   found {:?}\","}, {"sha": "488b1a2ff4e322a180ca1d7aa7f5dcf8cd12fb66", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=8590336d491d5b228b3ae043e09a17dc950ae777", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::{RealPredicate, False, OperandBundleDef};\n+use llvm::{False, OperandBundleDef};\n use llvm::{self, BasicBlock};\n use common::*;\n use type_::Type;\n@@ -697,7 +697,7 @@ impl BuilderMethods<'a, 'll, 'tcx, Value, BasicBlock>\n         }\n     }\n \n-    fn fcmp(&self, op: RealPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n+    fn fcmp(&self, op: traits::RealPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         self.count_insn(\"fcmp\");\n         unsafe {\n             llvm::LLVMBuildFCmp(self.llbuilder, op as c_uint, lhs, rhs, noname())"}, {"sha": "37fa2e46b28bf235ff5becc5b602458ff8dc7614", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=8590336d491d5b228b3ae043e09a17dc950ae777", "patch": "@@ -181,6 +181,29 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n+impl traits::RealPredicateMethods for RealPredicate {\n+    fn convert_to_backend_specific(realpred: traits::RealPredicate) -> Self {\n+        match realpred {\n+            traits::RealPredicate::RealPredicateFalse => RealPredicate::RealPredicateFalse,\n+            traits::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n+            traits::RealPredicate::RealOGT => RealPredicate::RealOGT,\n+            traits::RealPredicate::RealOGE => RealPredicate::RealOGE,\n+            traits::RealPredicate::RealOLT => RealPredicate::RealOLT,\n+            traits::RealPredicate::RealOLE => RealPredicate::RealOLE,\n+            traits::RealPredicate::RealONE => RealPredicate::RealONE,\n+            traits::RealPredicate::RealORD => RealPredicate::RealORD,\n+            traits::RealPredicate::RealUNO => RealPredicate::RealUNO,\n+            traits::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n+            traits::RealPredicate::RealUGT => RealPredicate::RealUGT,\n+            traits::RealPredicate::RealUGE => RealPredicate::RealUGE,\n+            traits::RealPredicate::RealULT => RealPredicate::RealULT,\n+            traits::RealPredicate::RealULE => RealPredicate::RealULE,\n+            traits::RealPredicate::RealUNE => RealPredicate::RealUNE,\n+            traits::RealPredicate::RealPredicateTrue => RealPredicate::RealPredicateTrue\n+        }\n+    }\n+}\n+\n /// LLVMTypeKind\n #[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]"}, {"sha": "05c775522318c13539560521bdf7d9a5fd3e21d5", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=8590336d491d5b228b3ae043e09a17dc950ae777", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm;\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::{self, LayoutOf};\n@@ -28,7 +27,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n \n-use traits::{IntPredicate,BuilderMethods};\n+use traits::{IntPredicate, RealPredicate, BuilderMethods};\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};\n@@ -962,8 +961,8 @@ fn cast_float_to_int(bx: &Builder<'_, 'll, '_>,\n     // negation, and the negation can be merged into the select. Therefore, it not necessarily any\n     // more expensive than a ordered (\"normal\") comparison. Whether these optimizations will be\n     // performed is ultimately up to the backend, but at least x86 does perform them.\n-    let less_or_nan = bx.fcmp(llvm::RealULT, x, f_min);\n-    let greater = bx.fcmp(llvm::RealOGT, x, f_max);\n+    let less_or_nan = bx.fcmp(RealPredicate::RealULT, x, f_min);\n+    let greater = bx.fcmp(RealPredicate::RealOGT, x, f_max);\n     let int_max = C_uint_big(int_ty, int_max(signed, int_ty));\n     let int_min = C_uint_big(int_ty, int_min(signed, int_ty) as u128);\n     let s0 = bx.select(less_or_nan, int_min, fptosui_result);\n@@ -974,7 +973,7 @@ fn cast_float_to_int(bx: &Builder<'_, 'll, '_>,\n     // Therefore we only need to execute this step for signed integer types.\n     if signed {\n         // LLVM has no isNaN predicate, so we use (x == x) instead\n-        bx.select(bx.fcmp(llvm::RealOEQ, x, x), s1, C_uint(int_ty, 0))\n+        bx.select(bx.fcmp(RealPredicate::RealOEQ, x, x), s1, C_uint(int_ty, 0))\n     } else {\n         s1\n     }"}, {"sha": "0c53d0eaf90423f2fc288327d1ba834a4f162035", "filename": "src/librustc_codegen_llvm/traits.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8590336d491d5b228b3ae043e09a17dc950ae777/src%2Flibrustc_codegen_llvm%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftraits.rs?ref=8590336d491d5b228b3ae043e09a17dc950ae777", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n-use llvm::{RealPredicate, OperandBundleDef};\n+use llvm::OperandBundleDef;\n use common::*;\n use type_::Type;\n use libc::c_char;\n@@ -38,6 +38,30 @@ pub trait IntPredicateMethods {\n     fn convert_to_backend_specific(intpre : IntPredicate) -> Self;\n }\n \n+#[allow(dead_code)]\n+pub enum RealPredicate {\n+    RealPredicateFalse,\n+    RealOEQ,\n+    RealOGT,\n+    RealOGE,\n+    RealOLT,\n+    RealOLE,\n+    RealONE,\n+    RealORD,\n+    RealUNO,\n+    RealUEQ,\n+    RealUGT,\n+    RealUGE,\n+    RealULT,\n+    RealULE,\n+    RealUNE,\n+    RealPredicateTrue,\n+}\n+\n+pub trait RealPredicateMethods {\n+    fn convert_to_backend_specific(realpred : RealPredicate) -> Self;\n+}\n+\n \n pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll,\n     Value : ?Sized,"}]}