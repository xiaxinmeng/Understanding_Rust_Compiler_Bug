{"sha": "147a001fd30b86b2810ff1ac5d1f353316dc0688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0N2EwMDFmZDMwYjg2YjI4MTBmZjFhYzVkMWYzNTMzMTZkYzA2ODg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-26T02:09:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T02:09:00Z"}, "message": "Rollup merge of #78126 - shepmaster:aarch64-apple-darwin-valist, r=nagisa\n\nProperly define va_arg and va_list for aarch64-apple-darwin\n\nFrom [Apple][]:\n\n> Because of these changes, the type `va_list` is an alias for `char*`,\n> and not for the struct type in the generic procedure call standard.\n\nWith this change `/x.py test --stage 1 src/test/ui/abi/variadic-ffi`\npasses.\n\nFixes #78092\n\n[Apple]: https://developer.apple.com/documentation/xcode/writing_arm64_code_for_apple_platforms", "tree": {"sha": "07cb9eae21c4b9280b2b7bb9eea6c59dd3566a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07cb9eae21c4b9280b2b7bb9eea6c59dd3566a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147a001fd30b86b2810ff1ac5d1f353316dc0688", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfli+9CRBK7hj4Ov3rIwAAdHIIAIRS8Kz1lugZA72Ver3ucRYG\nSMoPQRHqOORHMeXsmZP81mBA4/RA0fpRLFOqKI7qY6O/nGzKJ8bQbxnAoZD8UI4T\ng/S/mkDsC6Z1gzmNQPBTmIINIZzbmSEVWkoZbls/3VOZH53UczMfOPpOsosNAsWD\nRf2wMe4Jw5pNf3wI+Js8wU0KqNUI40wvR7PjqyGNao7vsG2n+0RgK9Dd7bUiOEtj\nMBzorkxtEa8dm9a4M1ofatBsY+pYn6tXG6NvYXh70m6z/86u3sGsWEQCqTGIHcZQ\nvbujtZT0h6X1Kxg57lAHDBMd2E9NkfzA7t7eh4AIEkWPM744poGJih2L5Ez7MbM=\n=2ffv\n-----END PGP SIGNATURE-----\n", "payload": "tree 07cb9eae21c4b9280b2b7bb9eea6c59dd3566a02\nparent 98852320197c44e13be3759fc46bd8add5f24087\nparent 0a91755ff4b6899e1c0675c48b4652e890ce63aa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1603678140 +0100\ncommitter GitHub <noreply@github.com> 1603678140 +0100\n\nRollup merge of #78126 - shepmaster:aarch64-apple-darwin-valist, r=nagisa\n\nProperly define va_arg and va_list for aarch64-apple-darwin\n\nFrom [Apple][]:\n\n> Because of these changes, the type `va_list` is an alias for `char*`,\n> and not for the struct type in the generic procedure call standard.\n\nWith this change `/x.py test --stage 1 src/test/ui/abi/variadic-ffi`\npasses.\n\nFixes #78092\n\n[Apple]: https://developer.apple.com/documentation/xcode/writing_arm64_code_for_apple_platforms\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147a001fd30b86b2810ff1ac5d1f353316dc0688", "html_url": "https://github.com/rust-lang/rust/commit/147a001fd30b86b2810ff1ac5d1f353316dc0688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147a001fd30b86b2810ff1ac5d1f353316dc0688/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98852320197c44e13be3759fc46bd8add5f24087", "url": "https://api.github.com/repos/rust-lang/rust/commits/98852320197c44e13be3759fc46bd8add5f24087", "html_url": "https://github.com/rust-lang/rust/commit/98852320197c44e13be3759fc46bd8add5f24087"}, {"sha": "0a91755ff4b6899e1c0675c48b4652e890ce63aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a91755ff4b6899e1c0675c48b4652e890ce63aa", "html_url": "https://github.com/rust-lang/rust/commit/0a91755ff4b6899e1c0675c48b4652e890ce63aa"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "b6a0516b8bc9cb1a44f1af9a4ce15a89af539c27", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/147a001fd30b86b2810ff1ac5d1f353316dc0688/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147a001fd30b86b2810ff1ac5d1f353316dc0688/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=147a001fd30b86b2810ff1ac5d1f353316dc0688", "patch": "@@ -173,26 +173,24 @@ pub(super) fn emit_va_arg(\n     // is lacking in some instances, so we should only use it as a fallback.\n     let target = &bx.cx.tcx.sess.target;\n     let arch = &bx.cx.tcx.sess.target.arch;\n-    match (&**arch, target.options.is_like_windows) {\n+    match &**arch {\n         // Windows x86\n-        (\"x86\", true) => {\n+        \"x86\" if target.options.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), false)\n         }\n         // Generic x86\n-        (\"x86\", _) => {\n-            emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), true)\n-        }\n+        \"x86\" => emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), true),\n         // Windows AArch64\n-        (\"aarch64\", true) => {\n+        \"aarch64\" if target.options.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), false)\n         }\n-        // iOS AArch64\n-        (\"aarch64\", _) if target.target_os == \"ios\" => {\n+        // macOS / iOS AArch64\n+        \"aarch64\" if target.options.is_like_osx => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n-        (\"aarch64\", _) => emit_aapcs_va_arg(bx, addr, target_ty),\n+        \"aarch64\" => emit_aapcs_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n-        (\"x86_64\", true) => {\n+        \"x86_64\" if target.options.is_like_windows => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect: bool = target_ty_size > 8 || !target_ty_size.is_power_of_two();\n             emit_ptr_va_arg(bx, addr, target_ty, indirect, Align::from_bytes(8).unwrap(), false)"}, {"sha": "4b303acfd3bfb922cd5da041e97c600d620d1d46", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/147a001fd30b86b2810ff1ac5d1f353316dc0688/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147a001fd30b86b2810ff1ac5d1f353316dc0688/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=147a001fd30b86b2810ff1ac5d1f353316dc0688", "patch": "@@ -62,7 +62,7 @@ impl fmt::Debug for c_void {\n // The name is WIP, using `VaListImpl` for now.\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n-    all(target_arch = \"aarch64\", target_os = \"ios\"),\n+    all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_arch = \"wasm32\",\n     target_arch = \"asmjs\",\n     windows\n@@ -85,7 +85,7 @@ pub struct VaListImpl<'f> {\n \n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n-    all(target_arch = \"aarch64\", target_os = \"ios\"),\n+    all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_arch = \"wasm32\",\n     target_arch = \"asmjs\",\n     windows\n@@ -107,7 +107,11 @@ impl<'f> fmt::Debug for VaListImpl<'f> {\n ///\n /// [AArch64 Procedure Call Standard]:\n /// http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\n-#[cfg(all(target_arch = \"aarch64\", not(target_os = \"ios\"), not(windows)))]\n+#[cfg(all(\n+    target_arch = \"aarch64\",\n+    not(any(target_os = \"macos\", target_os = \"ios\")),\n+    not(windows)\n+))]\n #[repr(C)]\n #[derive(Debug)]\n #[unstable(\n@@ -181,7 +185,7 @@ pub struct VaList<'a, 'f: 'a> {\n             not(target_arch = \"powerpc\"),\n             not(target_arch = \"x86_64\")\n         ),\n-        all(target_arch = \"aarch64\", target_os = \"ios\"),\n+        all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n         target_arch = \"wasm32\",\n         target_arch = \"asmjs\",\n         windows\n@@ -190,7 +194,7 @@ pub struct VaList<'a, 'f: 'a> {\n \n     #[cfg(all(\n         any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n-        any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n+        any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n         not(target_arch = \"wasm32\"),\n         not(target_arch = \"asmjs\"),\n         not(windows)\n@@ -202,7 +206,7 @@ pub struct VaList<'a, 'f: 'a> {\n \n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n-    all(target_arch = \"aarch64\", target_os = \"ios\"),\n+    all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_arch = \"wasm32\",\n     target_arch = \"asmjs\",\n     windows\n@@ -223,7 +227,7 @@ impl<'f> VaListImpl<'f> {\n \n #[cfg(all(\n     any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n-    any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n+    any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n     not(target_arch = \"wasm32\"),\n     not(target_arch = \"asmjs\"),\n     not(windows)"}]}