{"sha": "7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b", "node_id": "C_kwDOAAsO6NoAKDdiYjJmN2RiYTA3YWMwNjZkNDE1MGVmODNjYmM2YzZhNmQ1ZjE0NWI", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-09-19T19:43:13Z"}, "committer": {"name": "Mike Leany", "email": "55358344+mikeleany@users.noreply.github.com", "date": "2021-10-13T14:14:13Z"}, "message": "x86_64-unknown-none: Add target documentation\n\nIn particular, document the default properties and assumptions of code\nbuilt for the target.\n\n(Work on this target sponsored by Profian.)", "tree": {"sha": "ad1fb81c1403a5a61ae20bd21002898ff4b11b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1fb81c1403a5a61ae20bd21002898ff4b11b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b", "html_url": "https://github.com/rust-lang/rust/commit/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeleany", "id": 55358344, "node_id": "MDQ6VXNlcjU1MzU4MzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/55358344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeleany", "html_url": "https://github.com/mikeleany", "followers_url": "https://api.github.com/users/mikeleany/followers", "following_url": "https://api.github.com/users/mikeleany/following{/other_user}", "gists_url": "https://api.github.com/users/mikeleany/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeleany/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeleany/subscriptions", "organizations_url": "https://api.github.com/users/mikeleany/orgs", "repos_url": "https://api.github.com/users/mikeleany/repos", "events_url": "https://api.github.com/users/mikeleany/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeleany/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2037cee7012480ea84851bd1e85fc9693b321651", "url": "https://api.github.com/repos/rust-lang/rust/commits/2037cee7012480ea84851bd1e85fc9693b321651", "html_url": "https://github.com/rust-lang/rust/commit/2037cee7012480ea84851bd1e85fc9693b321651"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "6b0c336b3c7994f47555de6327d7f7fcd4a89e81", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b", "patch": "@@ -285,7 +285,7 @@ target | std | host | notes\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n `x86_64-unknown-hermit` | ? |  |\n `x86_64-unknown-l4re-uclibc` | ? |  |\n-`x86_64-unknown-none` | * |  | Freestanding/bare-metal x86_64, softfloat\n+[`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * |  | Freestanding/bare-metal x86_64, softfloat\n `x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n `x86_64-unknown-openbsd` | \u2713 | \u2713 | 64-bit OpenBSD"}, {"sha": "967956b3c3174696c5475fdc528ad986ad95699d", "filename": "src/doc/rustc/src/platform-support/x86_64-unknown-none.md", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64-unknown-none.md", "raw_url": "https://github.com/rust-lang/rust/raw/7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64-unknown-none.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64-unknown-none.md?ref=7bb2f7dba07ac066d4150ef83cbc6c6a6d5f145b", "patch": "@@ -0,0 +1,76 @@\n+# `x86_64-unknown-none`\n+\n+**Tier: 3**\n+\n+Freestanding/bare-metal x86-64 binaries in ELF format: firmware, kernels, etc.\n+\n+## Target maintainers\n+\n+Harald Hoyer <harald@profian.com>, https://github.com/haraldh\n+Mike Leany, https://github.com/mikeleany\n+\n+## Requirements\n+\n+This target is cross-compiled. There is no support for `std`. There is no\n+default allocator, but it's possible to use `alloc` by supplying an allocator.\n+\n+By default, Rust code generated for this target does not use any vector or\n+floating-point registers (e.g. SSE, AVX). This allows the generated code to run\n+in environments, such as kernels, which may need to avoid the use of such\n+registers or which may have special considerations about the use of such\n+registers (e.g. saving and restoring them to avoid breaking userspace code\n+using the same registers). You can change code generation to use additional CPU\n+features via the `-C target-feature=` codegen options to rustc, or via the\n+`#[target_feature]` mechanism within Rust code.\n+\n+By default, code generated with this target should run on any `x86_64`\n+hardware; enabling additional target features may raise this baseline.\n+\n+Code generated with this target will use the `kernel` code model by default.\n+You can change this using the `-C code-model=` option to rustc.\n+\n+On `x86_64-unknown-none`, `extern \"C\"` uses the [standard System V calling\n+convention](https://gitlab.com/x86-psABIs/x86-64-ABI), without red zones.\n+\n+This target generated binaries in the ELF format. Any alternate formats or\n+special considerations for binary layout will require linker options or linker\n+scripts.\n+\n+## Building the target\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml`:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"x86_64-unknown-none\"]\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+As `x86_64-unknown-none` supports a variety of different environments and does\n+not support `std`, this target does not support running the Rust testsuite.\n+\n+## Cross-compilation toolchains and C code\n+\n+If you want to compile C code along with Rust (such as for Rust crates with C\n+dependencies), you will need an appropriate `x86_64` toolchain.\n+\n+Rust *may* be able to use an `x86_64-linux-gnu-` toolchain with appropriate\n+standalone flags to build for this toolchain (depending on the assumptions of\n+that toolchain, see below), or you may wish to use a separate\n+`x86_64-unknown-none` (or `x86_64-elf-`) toolchain.\n+\n+On some `x86_64` hosts that use ELF binaries, you *may* be able to use the host\n+C toolchain, if it does not introduce assumptions about the host environment\n+that don't match the expectations of a standalone environment. Otherwise, you\n+may need a separate toolchain for standalone/freestanding development, just as\n+when cross-compiling from a non-`x86_64` platform."}]}