{"sha": "3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "node_id": "C_kwDOAAsO6NoAKDMwODdjNGRmYjdiYTFjMTE3ZjZmMmZlYzdhNzIwNmVlYjAyNmU2ZmE", "commit": {"author": {"name": "chordtoll", "email": "git@chordtoll.com", "date": "2022-01-01T21:32:04Z"}, "committer": {"name": "chordtoll", "email": "git@chordtoll.com", "date": "2022-01-04T06:08:08Z"}, "message": "Suggest changing quotes when str/char type mismatch", "tree": {"sha": "3cf5061b64fee1999b6408603a85a4862d7f8790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf5061b64fee1999b6408603a85a4862d7f8790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpY3nxsja8fiSLk0qbzOVC0R1V3AFAmHT5J8ACgkQbzOVC0R1\nV3AHeA//SpzqgO/wuID1OvNPMMLYYbpWgGWbIs2WKtk2SPl68GCi0b36aKwR/Yqd\nJAh6b0Gk5wj3HfIqDeB8ccR+3HfSsWR7FWedv9wiit/cgdHgLvuFnMv+9lyHdAK1\n5tfVXGsmyFy/6vLAG1MSfACAKtM5P4TkDkdWEmJ3ev93HxkcCEUDNoEyXgHo0kYc\nK6219z64QJsgDZfanm2DwNLYnoFxeWSwZuh9507pyQVI0oc+YGnZ3x7OTTQICaYE\ndr+1+WM3dKJzMCBTrnkYnHHD1pMN8E9Va12mA3KlOyGwxj5Stvj4t8IOMZJn5YR+\n3PERLOAmT7qy3egeePa3BAZwPu+j5kEgG6YmAscMq1vUTeqerEo0RZwppwqyXsOQ\nnY7ZdyJPeQxcWZ5Qk8QccHPwQ4YLjghA/pn0NAQpV4xwjQjxEMa6GTrkdLK4oW41\nuX+VkqvmL+C2DXvD9M/kZG1B41aVX2KzpIuSP82en4UPH1goxWSAGQEvMet0bLZP\nPiZdD8t+t2uknl6Qho3owdserW4muT1EDwr2I6WmIcekRNWYli6e7rmk02xhbtbX\n70BG6QbHYaHac4EDtcFGCy0g8CTjUZUW2VFJ66puPJS5P2v5GW/9GdBEeGCcb3OG\nwnTBoyvbkdG1oGJPQgK1CYzP0E0LVjgQj4Ojd/rm+6AylpF6aXY=\n=uBRl\n-----END PGP SIGNATURE-----", "payload": "tree 3cf5061b64fee1999b6408603a85a4862d7f8790\nparent 4f49627c6fe2a32d1fed6310466bb0e1c535c0c0\nauthor chordtoll <git@chordtoll.com> 1641072724 -0800\ncommitter chordtoll <git@chordtoll.com> 1641276488 -0800\n\nSuggest changing quotes when str/char type mismatch\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "html_url": "https://github.com/rust-lang/rust/commit/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/comments", "author": {"login": "chordtoll", "id": 542193, "node_id": "MDQ6VXNlcjU0MjE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/542193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordtoll", "html_url": "https://github.com/chordtoll", "followers_url": "https://api.github.com/users/chordtoll/followers", "following_url": "https://api.github.com/users/chordtoll/following{/other_user}", "gists_url": "https://api.github.com/users/chordtoll/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordtoll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordtoll/subscriptions", "organizations_url": "https://api.github.com/users/chordtoll/orgs", "repos_url": "https://api.github.com/users/chordtoll/repos", "events_url": "https://api.github.com/users/chordtoll/events{/privacy}", "received_events_url": "https://api.github.com/users/chordtoll/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordtoll", "id": 542193, "node_id": "MDQ6VXNlcjU0MjE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/542193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordtoll", "html_url": "https://github.com/chordtoll", "followers_url": "https://api.github.com/users/chordtoll/followers", "following_url": "https://api.github.com/users/chordtoll/following{/other_user}", "gists_url": "https://api.github.com/users/chordtoll/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordtoll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordtoll/subscriptions", "organizations_url": "https://api.github.com/users/chordtoll/orgs", "repos_url": "https://api.github.com/users/chordtoll/repos", "events_url": "https://api.github.com/users/chordtoll/events{/privacy}", "received_events_url": "https://api.github.com/users/chordtoll/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "html_url": "https://github.com/rust-lang/rust/commit/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "f0c73d0c2f3691f5e8983488bccdbf3bfb3ac8de", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -2041,11 +2041,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if let ValuePairs::Types(ty::error::ExpectedFound { expected, found }) =\n                     trace.values\n                 {\n-                    // If a tuple of length one was expected and the found expression has\n-                    // parentheses around it, perhaps the user meant to write `(expr,)` to\n-                    // build a tuple (issue #86100)\n                     match (expected.kind(), found.kind()) {\n                         (ty::Tuple(_), ty::Tuple(_)) => {}\n+                        // If a tuple of length one was expected and the found expression has\n+                        // parentheses around it, perhaps the user meant to write `(expr,)` to\n+                        // build a tuple (issue #86100)\n                         (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n                             if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n                                 if let Some(code) =\n@@ -2060,6 +2060,41 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 }\n                             }\n                         }\n+                        // If a character was expected and the found expression is a string literal\n+                        // containing a single character, perhaps the user meant to write `'c'` to\n+                        // specify a character literal (issue #92479)\n+                        (ty::Char, ty::Ref(_, r, _)) if r.is_str() => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if let Some(code) =\n+                                    code.strip_prefix('\"').and_then(|s| s.strip_suffix('\"'))\n+                                {\n+                                    if code.chars().nth(1).is_none() {\n+                                        err.span_suggestion(\n+                                            span,\n+                                            \"if you meant to write a `char` literal, use single quotes\",\n+                                            format!(\"'{}'\", code),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        // If a string was expected and the found expression is a character literal,\n+                        // perhaps the user meant to write `\"s\"` to specify a string literal.\n+                        (ty::Ref(_, r, _), ty::Char) if r.is_str() => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if let Some(code) =\n+                                    code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n+                                {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"if you meant to write a `str` literal, use double quotes\",\n+                                        format!(\"\\\"{}\\\"\", code),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                            }\n+                        }\n                         _ => {}\n                     }\n                 }"}, {"sha": "21bbc6f20b294341ca41140e956ff44a9f154caf", "filename": "src/test/ui/inference/char-as-str-multi.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,6 @@\n+// When a MULTI-character string literal is used where a char should be,\n+// DO NOT suggest changing to single quotes.\n+\n+fn main() {\n+    let _: char = \"foo\"; //~ ERROR mismatched types\n+}"}, {"sha": "c3ba17a5579ad55978a625e643626d21bc0fa646", "filename": "src/test/ui/inference/char-as-str-multi.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-multi.rs:5:19\n+   |\n+LL |     let _: char = \"foo\";\n+   |            ----   ^^^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e401492a830b46d9fba1829b300df2ee99bc334b", "filename": "src/test/ui/inference/char-as-str-single.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,11 @@\n+// When a SINGLE-character string literal is used where a char should be,\n+// suggest changing to single quotes.\n+\n+// Testing both single-byte and multi-byte characters, as we should handle both.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: char = 'a'; //~ ERROR mismatched types\n+    let _: char = '\u4eba'; //~ ERROR mismatched types\n+}"}, {"sha": "4f23cea5354c3818046830496f2dc1abf83edc5c", "filename": "src/test/ui/inference/char-as-str-single.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,11 @@\n+// When a SINGLE-character string literal is used where a char should be,\n+// suggest changing to single quotes.\n+\n+// Testing both single-byte and multi-byte characters, as we should handle both.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: char = \"a\"; //~ ERROR mismatched types\n+    let _: char = \"\u4eba\"; //~ ERROR mismatched types\n+}"}, {"sha": "29075c15414b223c37db00418bf785a71922979e", "filename": "src/test/ui/inference/char-as-str-single.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-single.rs:9:19\n+   |\n+LL |     let _: char = \"a\";\n+   |            ----   ^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `char` literal, use single quotes\n+   |\n+LL |     let _: char = 'a';\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-single.rs:10:19\n+   |\n+LL |     let _: char = \"\u4eba\";\n+   |            ----   ^^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `char` literal, use single quotes\n+   |\n+LL |     let _: char = '\u4eba';\n+   |                   ~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "09f3dec5a17554837b696b10f8da0f2a2776b9c1", "filename": "src/test/ui/inference/str-as-char.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,8 @@\n+// When a char literal is used where a str should be,\n+// suggest changing to double quotes.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: &str = \"a\"; //~ ERROR mismatched types\n+}"}, {"sha": "7092a61244255fc46a25ebd5f22545bf69545ba0", "filename": "src/test/ui/inference/str-as-char.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,8 @@\n+// When a char literal is used where a str should be,\n+// suggest changing to double quotes.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: &str = 'a'; //~ ERROR mismatched types\n+}"}, {"sha": "ebbe7c80f77196d6e9b84593a0d974484df646e4", "filename": "src/test/ui/inference/str-as-char.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/str-as-char.rs:7:19\n+   |\n+LL |     let _: &str = 'a';\n+   |            ----   ^^^ expected `&str`, found `char`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _: &str = \"a\";\n+   |                   ~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e065e17c280f9ae5946707807d13dbdd13c51abd", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "patch": "@@ -12,6 +12,11 @@ error[E0308]: mismatched types\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n    |                             ^^^ expected `&str`, found `char`\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let v: Vec(&str) = vec![\"1\", '2'];\n+   |                             ~~~\n \n error: aborting due to 2 previous errors\n "}]}