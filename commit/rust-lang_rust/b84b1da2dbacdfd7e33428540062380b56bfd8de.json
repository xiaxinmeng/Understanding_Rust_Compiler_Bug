{"sha": "b84b1da2dbacdfd7e33428540062380b56bfd8de", "node_id": "C_kwDOAAsO6NoAKGI4NGIxZGEyZGJhY2RmZDdlMzM0Mjg1NDAwNjIzODBiNTZiZmQ4ZGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-17T19:29:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T14:28:14Z"}, "message": "Canonicalize trait solver response inside probe", "tree": {"sha": "a0014b1eeb45cd0d983990924a900f1fc013cee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0014b1eeb45cd0d983990924a900f1fc013cee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b84b1da2dbacdfd7e33428540062380b56bfd8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b84b1da2dbacdfd7e33428540062380b56bfd8de", "html_url": "https://github.com/rust-lang/rust/commit/b84b1da2dbacdfd7e33428540062380b56bfd8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b84b1da2dbacdfd7e33428540062380b56bfd8de/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f72129ffe5e8c495113f9a2d4e1730f7fad3209", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f72129ffe5e8c495113f9a2d4e1730f7fad3209", "html_url": "https://github.com/rust-lang/rust/commit/1f72129ffe5e8c495113f9a2d4e1730f7fad3209"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "c8611294449e97f0a30d1f2e2ba18970c60e045b", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=b84b1da2dbacdfd7e33428540062380b56bfd8de", "patch": "@@ -1,7 +1,7 @@\n //! Code shared by trait and projection goals for candidate assembly.\n \n use super::infcx_ext::InferCtxtExt;\n-use super::{CanonicalResponse, Certainty, EvalCtxt, Goal};\n+use super::{CanonicalResponse, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::TypeFoldable;\n@@ -89,18 +89,18 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         impl_def_id: DefId,\n-    ) -> Result<Certainty, NoSolution>;\n+    ) -> QueryResult<'tcx>;\n \n     fn consider_builtin_sized_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n-    ) -> Result<Certainty, NoSolution>;\n+    ) -> QueryResult<'tcx>;\n \n     fn consider_assumption(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n-    ) -> Result<Certainty, NoSolution>;\n+    ) -> QueryResult<'tcx>;\n }\n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     pub(super) fn assemble_and_evaluate_candidates<G: GoalKind<'tcx>>(\n@@ -180,9 +180,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         tcx.for_each_relevant_impl(\n             goal.predicate.trait_def_id(tcx),\n             goal.predicate.self_ty(),\n-            |impl_def_id| match G::consider_impl_candidate(self, goal, impl_def_id)\n-                .and_then(|certainty| self.make_canonical_response(certainty))\n-            {\n+            |impl_def_id| match G::consider_impl_candidate(self, goal, impl_def_id) {\n                 Ok(result) => candidates\n                     .push(Candidate { source: CandidateSource::Impl(impl_def_id), result }),\n                 Err(NoSolution) => (),\n@@ -203,7 +201,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             Err(NoSolution)\n         };\n \n-        match result.and_then(|certainty| self.make_canonical_response(certainty)) {\n+        match result {\n             Ok(result) => {\n                 candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result })\n             }\n@@ -217,9 +215,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         candidates: &mut Vec<Candidate<'tcx>>,\n     ) {\n         for (i, assumption) in goal.param_env.caller_bounds().iter().enumerate() {\n-            match G::consider_assumption(self, goal, assumption)\n-                .and_then(|certainty| self.make_canonical_response(certainty))\n-            {\n+            match G::consider_assumption(self, goal, assumption) {\n                 Ok(result) => {\n                     candidates.push(Candidate { source: CandidateSource::ParamEnv(i), result })\n                 }\n@@ -268,9 +264,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             .subst_iter_copied(self.tcx(), alias_ty.substs)\n             .enumerate()\n         {\n-            match G::consider_assumption(self, goal, assumption)\n-                .and_then(|certainty| self.make_canonical_response(certainty))\n-            {\n+            match G::consider_assumption(self, goal, assumption) {\n                 Ok(result) => {\n                     candidates.push(Candidate { source: CandidateSource::AliasBound(i), result })\n                 }"}, {"sha": "32eb84635b53684c0d122f746192eefd8ee25d22", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=b84b1da2dbacdfd7e33428540062380b56bfd8de", "patch": "@@ -313,6 +313,13 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             }\n         })\n     }\n+\n+    fn evaluate_all_and_make_canonical_response(\n+        &mut self,\n+        goals: Vec<Goal<'tcx, ty::Predicate<'tcx>>>,\n+    ) -> QueryResult<'tcx> {\n+        self.evaluate_all(goals).and_then(|certainty| self.make_canonical_response(certainty))\n+    }\n }\n \n #[instrument(level = \"debug\", skip(infcx), ret)]"}, {"sha": "1d85d31705ad420051ca8a46bd43206bb7ffeeeb", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=b84b1da2dbacdfd7e33428540062380b56bfd8de", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n         impl_def_id: DefId,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         let tcx = ecx.tcx();\n \n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n@@ -229,7 +229,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 impl_def_id\n             )? else {\n                 let certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n-                return Ok(trait_ref_certainty.unify_and(certainty));\n+                return ecx.make_canonical_response(trait_ref_certainty.unify_and(certainty));\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {\n@@ -286,22 +286,22 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             let rhs_certainty =\n                 ecx.evaluate_all(nested_goals).expect(\"failed to unify with unconstrained term\");\n \n-            Ok(trait_ref_certainty.unify_and(rhs_certainty))\n+            ecx.make_canonical_response(trait_ref_certainty.unify_and(rhs_certainty))\n         })\n     }\n \n     fn consider_builtin_sized_candidate(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         bug!(\"`Sized` does not have an associated type: {:?}\", goal);\n     }\n \n     fn consider_assumption(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         _goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         if let Some(_poly_projection_pred) = assumption.to_opt_poly_projection_pred() {\n             unimplemented!()\n         } else {"}, {"sha": "111758c77d99c86e951315efca89560e816d9d84", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84b1da2dbacdfd7e33428540062380b56bfd8de/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=b84b1da2dbacdfd7e33428540062380b56bfd8de", "patch": "@@ -4,7 +4,7 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n@@ -29,7 +29,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, TraitPredicate<'tcx>>,\n         impl_def_id: DefId,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         let tcx = ecx.tcx();\n \n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n@@ -53,22 +53,22 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 .into_iter()\n                 .map(|pred| goal.with(tcx, pred));\n             nested_goals.extend(where_clause_bounds);\n-            ecx.evaluate_all(nested_goals)\n+            ecx.evaluate_all_and_make_canonical_response(nested_goals)\n         })\n     }\n \n     fn consider_builtin_sized_candidate(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         _goal: Goal<'tcx, Self>,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         unimplemented!();\n     }\n \n     fn consider_assumption(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         _goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         if let Some(_poly_trait_pred) = assumption.to_opt_poly_trait_pred() {\n             unimplemented!()\n         } else {"}]}