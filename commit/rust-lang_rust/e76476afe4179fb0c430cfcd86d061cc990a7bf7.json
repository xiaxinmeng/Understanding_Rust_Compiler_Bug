{"sha": "e76476afe4179fb0c430cfcd86d061cc990a7bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NjQ3NmFmZTQxNzlmYjBjNDMwY2ZjZDg2ZDA2MWNjOTkwYTdiZjc=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-04T06:58:33Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-16T23:40:47Z"}, "message": "Cleanup", "tree": {"sha": "65164a5f07f9ffb0ed49e917350471f3f3f2233a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65164a5f07f9ffb0ed49e917350471f3f3f2233a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e76476afe4179fb0c430cfcd86d061cc990a7bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e76476afe4179fb0c430cfcd86d061cc990a7bf7", "html_url": "https://github.com/rust-lang/rust/commit/e76476afe4179fb0c430cfcd86d061cc990a7bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e76476afe4179fb0c430cfcd86d061cc990a7bf7/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876192e8cda7d9a557326527328423587747ca88", "url": "https://api.github.com/repos/rust-lang/rust/commits/876192e8cda7d9a557326527328423587747ca88", "html_url": "https://github.com/rust-lang/rust/commit/876192e8cda7d9a557326527328423587747ca88"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "2b6b0759981baf5a254763bf282b90bea95b88c0", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -9,7 +9,7 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    let new = tcx.anonymize_late_bound_regions(pred.kind());\n+    let new = tcx.anonymize_late_bound_regions(pred.bound_atom());\n     tcx.reuse_or_mk_predicate(pred, new)\n }\n "}, {"sha": "4d11804e2b4b2abf244556c0681620752ab76104", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -46,7 +46,7 @@ impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for Ty<'tcx> {\n impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for ty::Predicate<'tcx> {\n     type Variant = ty::Binder<ty::PredicateAtom<'tcx>>;\n     fn variant(&self) -> &Self::Variant {\n-        self.kind_ref()\n+        self.bound_atom_ref()\n     }\n }\n "}, {"sha": "e9b5b71f9c3bd24d7d61716e0050f91156990ada", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -133,13 +133,13 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     #[inline(never)]\n-    fn intern_predicate(&self, kind: Binder<PredicateAtom<'tcx>>) -> &'tcx PredicateInner<'tcx> {\n+    fn intern_predicate(&self, binder: Binder<PredicateAtom<'tcx>>) -> &'tcx PredicateInner<'tcx> {\n         self.predicate\n-            .intern(kind, |kind| {\n-                let flags = super::flags::FlagComputation::for_predicate(kind);\n+            .intern(binder, |binder| {\n+                let flags = super::flags::FlagComputation::for_predicate(binder);\n \n                 let predicate_struct = PredicateInner {\n-                    kind,\n+                    binder,\n                     flags: flags.flags,\n                     outer_exclusive_binder: flags.outer_exclusive_binder,\n                 };\n@@ -1936,21 +1936,21 @@ impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n // N.B., an `Interned<PredicateInner>` compares and hashes as a `PredicateKind`.\n impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {\n-        self.0.kind == other.0.kind\n+        self.0.binder == other.0.binder\n     }\n }\n \n impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}\n \n impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        self.0.kind.hash(s)\n+        self.0.binder.hash(s)\n     }\n }\n \n impl<'tcx> Borrow<Binder<PredicateAtom<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a Binder<PredicateAtom<'tcx>> {\n-        &self.0.kind\n+        &self.0.binder\n     }\n }\n \n@@ -2085,18 +2085,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_predicate(self, kind: Binder<PredicateAtom<'tcx>>) -> Predicate<'tcx> {\n-        let inner = self.interners.intern_predicate(kind);\n+    pub fn mk_predicate(self, binder: Binder<PredicateAtom<'tcx>>) -> Predicate<'tcx> {\n+        let inner = self.interners.intern_predicate(binder);\n         Predicate { inner }\n     }\n \n     #[inline]\n     pub fn reuse_or_mk_predicate(\n         self,\n         pred: Predicate<'tcx>,\n-        kind: Binder<PredicateAtom<'tcx>>,\n+        binder: Binder<PredicateAtom<'tcx>>,\n     ) -> Predicate<'tcx> {\n-        if pred.kind() != kind { self.mk_predicate(kind) } else { pred }\n+        if pred.bound_atom() != binder { self.mk_predicate(binder) } else { pred }\n     }\n \n     pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> {"}, {"sha": "e25320634d0adfa506cb30a801f7b5c687417eeb", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -22,9 +22,9 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate(kind: ty::Binder<ty::PredicateAtom<'_>>) -> FlagComputation {\n+    pub fn for_predicate(binder: ty::Binder<ty::PredicateAtom<'_>>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n-        result.add_predicate_kind(kind);\n+        result.add_predicate(binder);\n         result\n     }\n \n@@ -204,7 +204,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_predicate_kind(&mut self, binder: ty::Binder<ty::PredicateAtom<'_>>) {\n+    fn add_predicate(&mut self, binder: ty::Binder<ty::PredicateAtom<'_>>) {\n         self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));\n     }\n "}, {"sha": "fc5a7b618bd125c688d4fdc46da7d2d9c50b4bd6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -1030,7 +1030,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n \n #[derive(Debug)]\n crate struct PredicateInner<'tcx> {\n-    kind: Binder<PredicateAtom<'tcx>>,\n+    binder: Binder<PredicateAtom<'tcx>>,\n     flags: TypeFlags,\n     /// See the comment for the corresponding field of [TyS].\n     outer_exclusive_binder: ty::DebruijnIndex,\n@@ -1060,25 +1060,14 @@ impl Hash for Predicate<'_> {\n impl<'tcx> Eq for Predicate<'tcx> {}\n \n impl<'tcx> Predicate<'tcx> {\n-    #[inline(always)]\n-    pub fn kind(self) -> Binder<PredicateAtom<'tcx>> {\n-        self.inner.kind\n-    }\n-\n-    #[inline(always)]\n-    pub fn kind_ref(&self) -> &Binder<PredicateAtom<'tcx>> {\n-        &self.inner.kind\n-    }\n-\n     /// Returns the inner `PredicateAtom`.\n     ///\n     /// The returned atom may contain unbound variables bound to binders skipped in this method.\n     /// It is safe to reapply binders to the given atom.\n     ///\n     /// Note that this method panics in case this predicate has unbound variables.\n     pub fn skip_binders(self) -> PredicateAtom<'tcx> {\n-        let binder = self.kind();\n-        binder.skip_binder()\n+        self.inner.binder.skip_binder()\n     }\n \n     /// Returns the inner `PredicateAtom`.\n@@ -1088,37 +1077,38 @@ impl<'tcx> Predicate<'tcx> {\n     /// Rebinding the returned atom can causes the previously bound variables\n     /// to end up at the wrong binding level.\n     pub fn skip_binders_unchecked(self) -> PredicateAtom<'tcx> {\n-        let binder = self.kind();\n-        binder.skip_binder()\n+        self.inner.binder.skip_binder()\n     }\n \n     /// Converts this to a `Binder<PredicateAtom<'tcx>>`. If the value was an\n     /// `Atom`, then it is not allowed to contain escaping bound vars.\n     pub fn bound_atom(self) -> Binder<PredicateAtom<'tcx>> {\n-        let binder = self.kind();\n-        binder\n+        self.inner.binder\n+    }\n+\n+    pub fn bound_atom_ref(self) -> &'tcx Binder<PredicateAtom<'tcx>> {\n+        &self.inner.binder\n     }\n \n     /// Allows using a `Binder<PredicateAtom<'tcx>>` even if the given predicate previously\n     /// contained unbound variables by shifting these variables outwards.\n     pub fn bound_atom_with_opt_escaping(self, _tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n-        let binder = self.kind();\n-        binder\n+        self.inner.binder\n     }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let PredicateInner {\n-            ref kind,\n+            ref binder,\n \n             // The other fields just provide fast access to information that is\n             // also contained in `kind`, so no need to hash them.\n             flags: _,\n             outer_exclusive_binder: _,\n         } = self.inner;\n \n-        kind.hash_stable(hcx, hasher);\n+        binder.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "fbfc8a40faf0284f9d50745480bdbd0b4d40948f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -2068,7 +2068,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::Predicate<'tcx> {\n-        let binder = self.kind();\n+        let binder = self.bound_atom();\n         p!(print(binder))\n     }\n "}, {"sha": "1abb4fd32bf5114b643545ec7ce02c562c489f26", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -224,7 +224,7 @@ impl fmt::Debug for ty::ProjectionPredicate<'tcx> {\n \n impl fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self.kind())\n+        write!(f, \"{:?}\", self.bound_atom())\n     }\n }\n \n@@ -1017,12 +1017,12 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        let new = self.inner.kind.fold_with(folder);\n+        let new = self.inner.binder.fold_with(folder);\n         folder.tcx().reuse_or_mk_predicate(self, new)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.inner.kind.super_visit_with(visitor)\n+        self.inner.binder.visit_with(visitor)\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {"}, {"sha": "86c5209354c8577e1a3c6bed0dca0e7d2a1d82de", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -345,7 +345,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n         let infcx = self.selcx.infcx();\n \n-        let binder = obligation.predicate.kind();\n+        let binder = obligation.predicate.bound_atom();\n         if binder.skip_binder().has_escaping_bound_vars() {\n             match binder.skip_binder() {\n                 // Evaluation will discard candidates using the leak check."}, {"sha": "dc2eaf82d092c51566e4d69e6320224c1e461190", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -94,7 +94,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // region relationships.\n         implied_bounds.extend(obligations.into_iter().flat_map(|obligation| {\n             assert!(!obligation.has_escaping_bound_vars());\n-            let binder = obligation.predicate.kind();\n+            let binder = obligation.predicate.bound_atom();\n             if binder.skip_binder().has_escaping_bound_vars() {\n                 vec![]\n             } else {"}, {"sha": "437d19e35f5e94a1c88056c71d6f90ff29fde3e5", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -31,7 +31,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n                     let mut pred: Vec<String> = predicates\n                         .iter()\n                         .map(|(out_pred, _)| {\n-                            let binder = out_pred.kind();\n+                            let binder = out_pred.bound_atom();\n                             match binder.skip_binder() {\n                                 ty::PredicateAtom::RegionOutlives(p) => p.to_string(),\n                                 ty::PredicateAtom::TypeOutlives(p) => p.to_string(),"}, {"sha": "9306b198051c260d72134d767942cfbd547a9a7c", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76476afe4179fb0c430cfcd86d061cc990a7bf7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76476afe4179fb0c430cfcd86d061cc990a7bf7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e76476afe4179fb0c430cfcd86d061cc990a7bf7", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                let binder = obligation.predicate.kind();\n+                let binder = obligation.predicate.bound_atom();\n                 match binder.skip_binder() {\n                     ty::PredicateAtom::Trait(pred, _) if !binder.has_escaping_bound_vars() => {\n                         if pred.def_id() == sized_trait {"}]}