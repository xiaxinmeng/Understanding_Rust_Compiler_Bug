{"sha": "6383252cc2770545505d40217732f14e93a396c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzODMyNTJjYzI3NzA1NDU1MDVkNDAyMTc3MzJmMTRlOTNhMzk2YzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T12:48:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T12:48:54Z"}, "message": "internal: unified missing fields diagnostic", "tree": {"sha": "c68f9e02b8ef19b6d4bb70451c202bccbf5858f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68f9e02b8ef19b6d4bb70451c202bccbf5858f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6383252cc2770545505d40217732f14e93a396c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6383252cc2770545505d40217732f14e93a396c4", "html_url": "https://github.com/rust-lang/rust/commit/6383252cc2770545505d40217732f14e93a396c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6383252cc2770545505d40217732f14e93a396c4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6509a4592b67acc4a99a7ffd6dd688bc6cd29be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6509a4592b67acc4a99a7ffd6dd688bc6cd29be", "html_url": "https://github.com/rust-lang/rust/commit/c6509a4592b67acc4a99a7ffd6dd688bc6cd29be"}], "stats": {"total": 236, "additions": 94, "deletions": 142}, "files": [{"sha": "158626dc007f5ca849e0e381d0c9866de03e0558", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6383252cc2770545505d40217732f14e93a396c4/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6383252cc2770545505d40217732f14e93a396c4/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=6383252cc2770545505d40217732f14e93a396c4", "patch": "@@ -6,6 +6,7 @@\n use std::any::Any;\n \n use cfg::{CfgExpr, CfgOptions, DnfExpr};\n+use either::Either;\n use hir_def::path::ModPath;\n use hir_expand::{name::Name, HirFileId, InFile};\n use stdx::format_to;\n@@ -324,60 +325,11 @@ impl Diagnostic for MissingUnsafe {\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n-    pub field_list_parent: AstPtr<ast::RecordExpr>,\n+    pub field_list_parent: Either<AstPtr<ast::RecordExpr>, AstPtr<ast::RecordPat>>,\n     pub field_list_parent_path: Option<AstPtr<ast::Path>>,\n     pub missed_fields: Vec<Name>,\n }\n \n-// Diagnostic: missing-pat-fields\n-//\n-// This diagnostic is triggered if pattern lacks some fields that exist in the corresponding structure.\n-//\n-// Example:\n-//\n-// ```rust\n-// struct A { a: u8, b: u8 }\n-//\n-// let a = A { a: 10, b: 20 };\n-//\n-// if let A { a } = a {\n-//     // ...\n-// }\n-// ```\n-#[derive(Debug)]\n-pub struct MissingPatFields {\n-    pub file: HirFileId,\n-    pub field_list_parent: AstPtr<ast::RecordPat>,\n-    pub field_list_parent_path: Option<AstPtr<ast::Path>>,\n-    pub missed_fields: Vec<Name>,\n-}\n-\n-impl Diagnostic for MissingPatFields {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"missing-pat-fields\")\n-    }\n-    fn message(&self) -> String {\n-        let mut buf = String::from(\"Missing structure fields:\\n\");\n-        for field in &self.missed_fields {\n-            format_to!(buf, \"- {}\\n\", field);\n-        }\n-        buf\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile {\n-            file_id: self.file,\n-            value: self\n-                .field_list_parent_path\n-                .clone()\n-                .map(SyntaxNodePtr::from)\n-                .unwrap_or_else(|| self.field_list_parent.clone().into()),\n-        }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n // Diagnostic: replace-filter-map-next-with-find-map\n //\n // This diagnostic is triggered when `.filter_map(..).next()` is used, rather than the more concise `.find_map(..)`."}, {"sha": "373134f62652477319e9df363a4ed98e929f4e61", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 60, "deletions": 57, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/6383252cc2770545505d40217732f14e93a396c4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6383252cc2770545505d40217732f14e93a396c4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6383252cc2770545505d40217732f14e93a396c4", "patch": "@@ -88,9 +88,9 @@ pub use crate::{\n     diagnostics::{\n         AnyDiagnostic, BreakOutsideOfLoop, InactiveCode, InternalBailedOut, MacroError,\n         MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n-        MissingPatFields, MissingUnsafe, NoSuchField, RemoveThisSemicolon,\n-        ReplaceFilterMapNextWithFindMap, UnimplementedBuiltinMacro, UnresolvedExternCrate,\n-        UnresolvedImport, UnresolvedMacroCall, UnresolvedModule, UnresolvedProcMacro,\n+        MissingUnsafe, NoSuchField, RemoveThisSemicolon, ReplaceFilterMapNextWithFindMap,\n+        UnimplementedBuiltinMacro, UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall,\n+        UnresolvedModule, UnresolvedProcMacro,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope},\n@@ -1098,67 +1098,70 @@ impl Function {\n             BodyValidationDiagnostic::collect(db, self.id.into(), internal_diagnostics)\n         {\n             match diagnostic {\n-                BodyValidationDiagnostic::RecordLiteralMissingFields {\n-                    record_expr,\n+                BodyValidationDiagnostic::RecordMissingFields {\n+                    record,\n                     variant,\n                     missed_fields,\n-                } => match source_map.expr_syntax(record_expr) {\n-                    Ok(source_ptr) => {\n-                        let root = source_ptr.file_syntax(db.upcast());\n-                        if let ast::Expr::RecordExpr(record_expr) = &source_ptr.value.to_node(&root)\n-                        {\n-                            if let Some(_) = record_expr.record_expr_field_list() {\n-                                let variant_data = variant.variant_data(db.upcast());\n-                                let missed_fields = missed_fields\n-                                    .into_iter()\n-                                    .map(|idx| variant_data.fields()[idx].name.clone())\n-                                    .collect();\n-                                acc.push(\n-                                    MissingFields {\n-                                        file: source_ptr.file_id,\n-                                        field_list_parent: AstPtr::new(record_expr),\n-                                        field_list_parent_path: record_expr\n-                                            .path()\n-                                            .map(|path| AstPtr::new(&path)),\n-                                        missed_fields,\n+                } => {\n+                    let variant_data = variant.variant_data(db.upcast());\n+                    let missed_fields = missed_fields\n+                        .into_iter()\n+                        .map(|idx| variant_data.fields()[idx].name.clone())\n+                        .collect();\n+\n+                    match record {\n+                        Either::Left(record_expr) => match source_map.expr_syntax(record_expr) {\n+                            Ok(source_ptr) => {\n+                                let root = source_ptr.file_syntax(db.upcast());\n+                                if let ast::Expr::RecordExpr(record_expr) =\n+                                    &source_ptr.value.to_node(&root)\n+                                {\n+                                    if let Some(_) = record_expr.record_expr_field_list() {\n+                                        acc.push(\n+                                            MissingFields {\n+                                                file: source_ptr.file_id,\n+                                                field_list_parent: Either::Left(AstPtr::new(\n+                                                    record_expr,\n+                                                )),\n+                                                field_list_parent_path: record_expr\n+                                                    .path()\n+                                                    .map(|path| AstPtr::new(&path)),\n+                                                missed_fields,\n+                                            }\n+                                            .into(),\n+                                        )\n                                     }\n-                                    .into(),\n-                                )\n+                                }\n                             }\n-                        }\n-                    }\n-                    Err(SyntheticSyntax) => (),\n-                },\n-                BodyValidationDiagnostic::RecordPatMissingFields {\n-                    record_pat,\n-                    variant,\n-                    missed_fields,\n-                } => match source_map.pat_syntax(record_pat) {\n-                    Ok(source_ptr) => {\n-                        if let Some(expr) = source_ptr.value.as_ref().left() {\n-                            let root = source_ptr.file_syntax(db.upcast());\n-                            if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n-                                if let Some(_) = record_pat.record_pat_field_list() {\n-                                    let variant_data = variant.variant_data(db.upcast());\n-                                    let missed_fields = missed_fields\n-                                        .into_iter()\n-                                        .map(|idx| variant_data.fields()[idx].name.clone())\n-                                        .collect();\n-                                    sink.push(MissingPatFields {\n-                                        file: source_ptr.file_id,\n-                                        field_list_parent: AstPtr::new(&record_pat),\n-                                        field_list_parent_path: record_pat\n-                                            .path()\n-                                            .map(|path| AstPtr::new(&path)),\n-                                        missed_fields,\n-                                    })\n+                            Err(SyntheticSyntax) => (),\n+                        },\n+                        Either::Right(record_pat) => match source_map.pat_syntax(record_pat) {\n+                            Ok(source_ptr) => {\n+                                if let Some(expr) = source_ptr.value.as_ref().left() {\n+                                    let root = source_ptr.file_syntax(db.upcast());\n+                                    if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n+                                        if let Some(_) = record_pat.record_pat_field_list() {\n+                                            acc.push(\n+                                                MissingFields {\n+                                                    file: source_ptr.file_id,\n+                                                    field_list_parent: Either::Right(AstPtr::new(\n+                                                        &record_pat,\n+                                                    )),\n+                                                    field_list_parent_path: record_pat\n+                                                        .path()\n+                                                        .map(|path| AstPtr::new(&path)),\n+                                                    missed_fields,\n+                                                }\n+                                                .into(),\n+                                            )\n+                                        }\n+                                    }\n                                 }\n                             }\n-                        }\n+                            Err(SyntheticSyntax) => (),\n+                        },\n                     }\n-                    Err(SyntheticSyntax) => (),\n-                },\n-\n+                }\n                 BodyValidationDiagnostic::ReplaceFilterMapNextWithFindMap { method_call_expr } => {\n                     if let Ok(next_source_ptr) = source_map.expr_syntax(method_call_expr) {\n                         sink.push(ReplaceFilterMapNextWithFindMap {"}, {"sha": "2a211fd8e67b9a25078fea98f1a81c3fea8adf28", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6383252cc2770545505d40217732f14e93a396c4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6383252cc2770545505d40217732f14e93a396c4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=6383252cc2770545505d40217732f14e93a396c4", "patch": "@@ -8,6 +8,7 @@ use hir_def::{\n     expr::Statement, path::path, resolver::HasResolver, AssocItemId, DefWithBodyId, HasModule,\n };\n use hir_expand::name;\n+use itertools::Either;\n use rustc_hash::FxHashSet;\n \n use crate::{\n@@ -26,13 +27,8 @@ pub(crate) use hir_def::{\n };\n \n pub enum BodyValidationDiagnostic {\n-    RecordLiteralMissingFields {\n-        record_expr: ExprId,\n-        variant: VariantId,\n-        missed_fields: Vec<LocalFieldId>,\n-    },\n-    RecordPatMissingFields {\n-        record_pat: PatId,\n+    RecordMissingFields {\n+        record: Either<ExprId, PatId>,\n         variant: VariantId,\n         missed_fields: Vec<LocalFieldId>,\n     },\n@@ -95,8 +91,8 @@ impl ExprValidator {\n             if let Some((variant, missed_fields, true)) =\n                 record_literal_missing_fields(db, &self.infer, id, expr)\n             {\n-                self.diagnostics.push(BodyValidationDiagnostic::RecordLiteralMissingFields {\n-                    record_expr: id,\n+                self.diagnostics.push(BodyValidationDiagnostic::RecordMissingFields {\n+                    record: Either::Left(id),\n                     variant,\n                     missed_fields,\n                 });\n@@ -116,8 +112,8 @@ impl ExprValidator {\n             if let Some((variant, missed_fields, true)) =\n                 record_pattern_missing_fields(db, &self.infer, id, pat)\n             {\n-                self.diagnostics.push(BodyValidationDiagnostic::RecordPatMissingFields {\n-                    record_pat: id,\n+                self.diagnostics.push(BodyValidationDiagnostic::RecordMissingFields {\n+                    record: Either::Right(id),\n                     variant,\n                     missed_fields,\n                 });"}, {"sha": "3307e240b7391abe2da0e0a93e5efa646dc2c482", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6383252cc2770545505d40217732f14e93a396c4/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6383252cc2770545505d40217732f14e93a396c4/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=6383252cc2770545505d40217732f14e93a396c4", "patch": "@@ -1055,20 +1055,6 @@ fn main() {\n         ));\n     }\n \n-    #[test]\n-    fn missing_record_pat_field_diagnostic() {\n-        check_diagnostics(\n-            r#\"\n-struct S { foo: i32, bar: () }\n-fn baz(s: S) {\n-    let S { foo: _ } = s;\n-      //^ Missing structure fields:\n-      //| - bar\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn missing_record_pat_field_no_diagnostic_if_not_exhaustive() {\n         check_diagnostics("}, {"sha": "66575f713cf4cada5ce1ebcf63d67fd3c9d4715d", "filename": "crates/ide/src/diagnostics/missing_fields.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6383252cc2770545505d40217732f14e93a396c4/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6383252cc2770545505d40217732f14e93a396c4/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs?ref=6383252cc2770545505d40217732f14e93a396c4", "patch": "@@ -1,3 +1,4 @@\n+use either::Either;\n use hir::{db::AstDatabase, InFile};\n use ide_assists::Assist;\n use ide_db::source_change::SourceChange;\n@@ -7,7 +8,7 @@ use text_edit::TextEdit;\n \n use crate::diagnostics::{fix, Diagnostic, DiagnosticsContext};\n \n-// Diagnostic: missing-structure-fields\n+// Diagnostic: missing-fields\n //\n // This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n //\n@@ -29,15 +30,11 @@ pub(super) fn missing_fields(ctx: &DiagnosticsContext<'_>, d: &hir::MissingField\n         d.field_list_parent_path\n             .clone()\n             .map(SyntaxNodePtr::from)\n-            .unwrap_or_else(|| d.field_list_parent.clone().into()),\n+            .unwrap_or_else(|| d.field_list_parent.clone().either(|it| it.into(), |it| it.into())),\n     );\n \n-    Diagnostic::new(\n-        \"missing-structure-fields\",\n-        message,\n-        ctx.sema.diagnostics_display_range(ptr).range,\n-    )\n-    .with_fixes(fixes(ctx, d))\n+    Diagnostic::new(\"missing-fields\", message, ctx.sema.diagnostics_display_range(ptr).range)\n+        .with_fixes(fixes(ctx, d))\n }\n \n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Assist>> {\n@@ -51,7 +48,11 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     }\n \n     let root = ctx.sema.db.parse_or_expand(d.file)?;\n-    let field_list_parent = d.field_list_parent.to_node(&root);\n+    let field_list_parent = match &d.field_list_parent {\n+        Either::Left(record_expr) => record_expr.to_node(&root),\n+        // FIXE: patterns should be fixable as well.\n+        Either::Right(_) => return None,\n+    };\n     let old_field_list = field_list_parent.record_expr_field_list()?;\n     let new_field_list = old_field_list.clone_for_update();\n     for f in d.missed_fields.iter() {\n@@ -76,7 +77,21 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n \n #[cfg(test)]\n mod tests {\n-    use crate::diagnostics::tests::{check_fix, check_no_diagnostics};\n+    use crate::diagnostics::tests::{check_diagnostics, check_fix, check_no_diagnostics};\n+\n+    #[test]\n+    fn missing_record_pat_field_diagnostic() {\n+        check_diagnostics(\n+            r#\"\n+struct S { foo: i32, bar: () }\n+fn baz(s: S) {\n+    let S { foo: _ } = s;\n+      //^ Missing structure fields:\n+      //| - bar\n+}\n+\"#,\n+        );\n+    }\n \n     #[test]\n     fn test_fill_struct_fields_empty() {"}]}