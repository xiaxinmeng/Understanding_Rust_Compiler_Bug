{"sha": "24894aca3162d654ee051f591a920ef1525d821f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ODk0YWNhMzE2MmQ2NTRlZTA1MWY1OTFhOTIwZWYxNTI1ZDgyMWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:12:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:12:49Z"}, "message": "Remove more duplication in test fixtures", "tree": {"sha": "900d53ca0b8cb1e99f1a8c526f13eb712808ca7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/900d53ca0b8cb1e99f1a8c526f13eb712808ca7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24894aca3162d654ee051f591a920ef1525d821f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24894aca3162d654ee051f591a920ef1525d821f", "html_url": "https://github.com/rust-lang/rust/commit/24894aca3162d654ee051f591a920ef1525d821f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24894aca3162d654ee051f591a920ef1525d821f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f", "html_url": "https://github.com/rust-lang/rust/commit/dcdcc9e4c8e24f8b643a0cc5c70e8e4dd624289f"}], "stats": {"total": 80, "additions": 18, "deletions": 62}, "files": [{"sha": "43194037e895143f3aa279bcf61626be57951e23", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=24894aca3162d654ee051f591a920ef1525d821f", "patch": "@@ -6,12 +6,12 @@\n mod generated;\n \n use hir::mock::MockDatabase;\n-use ra_db::FileRange;\n+use ra_db::{fixture::WithFixture, FileRange};\n use test_utils::{assert_eq_text, extract_range_or_offset};\n \n fn check(assist_id: &str, before: &str, after: &str) {\n     let (selection, before) = extract_range_or_offset(before);\n-    let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+    let (db, file_id) = MockDatabase::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let (_assist_id, action) = crate::assists(&db, frange)"}, {"sha": "13db37d29a72fd6d1c918dff7db9e52b6cb8a437", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=24894aca3162d654ee051f591a920ef1525d821f", "patch": "@@ -147,7 +147,7 @@ mod assists {\n #[cfg(test)]\n mod helpers {\n     use hir::mock::MockDatabase;\n-    use ra_db::FileRange;\n+    use ra_db::{fixture::WithFixture, FileRange};\n     use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n@@ -159,7 +159,7 @@ mod helpers {\n         after: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -187,7 +187,7 @@ mod helpers {\n         after: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -209,7 +209,7 @@ mod helpers {\n         target: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -229,7 +229,7 @@ mod helpers {\n         target: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -247,7 +247,7 @@ mod helpers {\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n@@ -259,7 +259,7 @@ mod helpers {\n         before: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n@@ -269,15 +269,15 @@ mod helpers {\n #[cfg(test)]\n mod tests {\n     use hir::mock::MockDatabase;\n-    use ra_db::FileRange;\n+    use ra_db::{fixture::WithFixture, FileRange};\n     use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n \n     #[test]\n     fn assist_order_field_struct() {\n         let before = \"struct Foo { <|>bar: u32 }\";\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assists = super::assists(&db, frange);\n@@ -298,7 +298,7 @@ mod tests {\n             }\n         }\";\n         let (range, before) = extract_range(before);\n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = MockDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();"}, {"sha": "f7196b7409eef9f81ae005d86c96c4a89cc71734", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=24894aca3162d654ee051f591a920ef1525d821f", "patch": "@@ -174,7 +174,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n \n #[cfg(test)]\n mod tests {\n-    use ra_db::SourceDatabase;\n+    use ra_db::{fixture::WithFixture, SourceDatabase};\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, extract_offset};\n \n@@ -191,7 +191,7 @@ mod tests {\n             buf\n         };\n \n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&code);\n+        let (db, file_id) = MockDatabase::with_single_file(&code);\n         let file = db.parse(file_id).ok().unwrap();\n         let marker: ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n@@ -288,7 +288,7 @@ mod tests {\n     fn do_check_local_name(code: &str, expected_offset: u32) {\n         let (off, code) = extract_offset(code);\n \n-        let (db, _source_root, file_id) = MockDatabase::with_single_file(&code);\n+        let (db, file_id) = MockDatabase::with_single_file(&code);\n         let file = db.parse(file_id).ok().unwrap();\n         let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n             .expect(\"failed to find a name at the target offset\");"}, {"sha": "94aff93deff4ec17cf723d4a625f55c9eb5b22da", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=24894aca3162d654ee051f591a920ef1525d821f", "patch": "@@ -5,10 +5,9 @@ use std::{panic, sync::Arc};\n use hir_def::{db::DefDatabase2, ModuleId};\n use hir_expand::diagnostics::DiagnosticSink;\n use parking_lot::Mutex;\n-use ra_cfg::CfgOptions;\n use ra_db::{\n-    salsa, CrateGraph, CrateId, Edition, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n-    RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n+    salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase,\n+    SourceRootId,\n };\n use rustc_hash::FxHashMap;\n \n@@ -63,14 +62,6 @@ impl HirDebugHelper for MockDatabase {\n }\n \n impl MockDatabase {\n-    pub fn with_single_file(text: &str) -> (MockDatabase, SourceRoot, FileId) {\n-        let mut db = MockDatabase::default();\n-        let mut source_root = SourceRoot::default();\n-        let file_id = db.add_file(WORKSPACE, \"/\", &mut source_root, \"/main.rs\", text);\n-        db.set_source_root(WORKSPACE, Arc::new(source_root.clone()));\n-        (db, source_root, file_id)\n-    }\n-\n     pub fn file_id_of(&self, path: &str) -> FileId {\n         match self.files.get(path) {\n             Some(it) => *it,\n@@ -96,41 +87,6 @@ impl MockDatabase {\n         }\n         buf\n     }\n-\n-    fn add_file(\n-        &mut self,\n-        source_root_id: SourceRootId,\n-        source_root_prefix: &str,\n-        source_root: &mut SourceRoot,\n-        path: &str,\n-        text: &str,\n-    ) -> FileId {\n-        assert!(source_root_prefix.starts_with('/'));\n-        assert!(source_root_prefix.ends_with('/'));\n-        assert!(path.starts_with(source_root_prefix));\n-        let rel_path = RelativePathBuf::from_path(&path[source_root_prefix.len()..]).unwrap();\n-\n-        let is_crate_root = rel_path == \"lib.rs\" || rel_path == \"/main.rs\";\n-\n-        let file_id = FileId(self.files.len() as u32);\n-\n-        let prev = self.files.insert(path.to_string(), file_id);\n-        assert!(prev.is_none(), \"duplicate files in the text fixture\");\n-        Arc::make_mut(&mut self.file_paths).insert(file_id, path.to_string());\n-\n-        let text = Arc::new(text.to_string());\n-        self.set_file_text(file_id, text);\n-        self.set_file_relative_path(file_id, rel_path.clone());\n-        self.set_file_source_root(file_id, source_root_id);\n-        source_root.insert_file(rel_path, file_id);\n-\n-        if is_crate_root {\n-            let mut crate_graph = CrateGraph::default();\n-            crate_graph.add_crate_root(file_id, Edition::Edition2018, CfgOptions::default());\n-            self.set_crate_graph(Arc::new(crate_graph));\n-        }\n-        file_id\n-    }\n }\n \n impl salsa::Database for MockDatabase {"}, {"sha": "4af2fe0b469712d60910833c695fadb74227411b", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24894aca3162d654ee051f591a920ef1525d821f/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=24894aca3162d654ee051f591a920ef1525d821f", "patch": "@@ -4665,7 +4665,7 @@ fn type_at(content: &str) -> String {\n }\n \n fn infer(content: &str) -> String {\n-    let (db, _, file_id) = MockDatabase::with_single_file(content);\n+    let (db, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id).ok().unwrap();\n \n     let mut acc = String::new();"}]}