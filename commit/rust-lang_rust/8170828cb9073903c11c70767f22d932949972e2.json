{"sha": "8170828cb9073903c11c70767f22d932949972e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNzA4MjhjYjkwNzM5MDNjMTFjNzA3NjdmMjJkOTMyOTQ5OTcyZTI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-08T16:17:58Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-11T23:01:33Z"}, "message": "Capture time spent blocked waiting on queries\n\nThis captures time spent blocked when a query is waiting for another\nquery to finish executing in another thread.", "tree": {"sha": "481dddea137e10639437fd62e1da5757a57d60d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481dddea137e10639437fd62e1da5757a57d60d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8170828cb9073903c11c70767f22d932949972e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8170828cb9073903c11c70767f22d932949972e2", "html_url": "https://github.com/rust-lang/rust/commit/8170828cb9073903c11c70767f22d932949972e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8170828cb9073903c11c70767f22d932949972e2/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae044ee893edca63488fe020900b88909bae9832", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae044ee893edca63488fe020900b88909bae9832", "html_url": "https://github.com/rust-lang/rust/commit/ae044ee893edca63488fe020900b88909bae9832"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "f1408400dee28a8b954f6a0aa61caf51b34cbec2", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8170828cb9073903c11c70767f22d932949972e2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8170828cb9073903c11c70767f22d932949972e2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=8170828cb9073903c11c70767f22d932949972e2", "patch": "@@ -124,7 +124,15 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             let job = match lock.active.entry((*key).clone()) {\n                 Entry::Occupied(entry) => {\n                     match *entry.get() {\n-                        QueryResult::Started(ref job) => job.clone(),\n+                        QueryResult::Started(ref job) => {\n+                            //For parallel queries, we'll block and wait until the query running\n+                            //in another thread has completed. Record how long we wait in the\n+                            //self-profiler\n+                            #[cfg(parallel_compiler)]\n+                            tcx.sess.profiler(|p| p.query_blocked_start(Q::NAME, Q::CATEGORY));\n+\n+                            job.clone()\n+                        },\n                         QueryResult::Poisoned => FatalError.raise(),\n                     }\n                 }\n@@ -160,7 +168,10 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             // thread\n             #[cfg(parallel_compiler)]\n             {\n-                if let Err(cycle) = job.r#await(tcx, span) {\n+                let result = job.r#await(tcx, span);\n+                tcx.sess.profiler(|p| p.query_blocked_end(Q::NAME, Q::CATEGORY));\n+\n+                if let Err(cycle) = result {\n                     return TryGetJob::JobCompleted(Err(cycle));\n                 }\n             }"}, {"sha": "a43b618ca90e205efcd453d4d7d64fd926eff02e", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8170828cb9073903c11c70767f22d932949972e2/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8170828cb9073903c11c70767f22d932949972e2/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=8170828cb9073903c11c70767f22d932949972e2", "patch": "@@ -27,6 +27,8 @@ pub enum ProfilerEvent {\n     QueryCount { query_name: &'static str, category: ProfileCategory, count: usize },\n     IncrementalLoadResultStart { query_name: &'static str, time: Instant },\n     IncrementalLoadResultEnd { query_name: &'static str, time: Instant },\n+    QueryBlockedStart { query_name: &'static str, category: ProfileCategory, time: Instant },\n+    QueryBlockedEnd { query_name: &'static str, category: ProfileCategory, time: Instant },\n }\n \n impl ProfilerEvent {\n@@ -36,13 +38,15 @@ impl ProfilerEvent {\n         match self {\n             QueryStart { .. } |\n             GenericActivityStart { .. } |\n-            IncrementalLoadResultStart { .. } => true,\n+            IncrementalLoadResultStart { .. } |\n+            QueryBlockedStart { .. } => true,\n \n             QueryEnd { .. } |\n             GenericActivityEnd { .. } |\n             QueryCacheHit { .. } |\n             QueryCount { .. } |\n-            IncrementalLoadResultEnd { .. } => false,\n+            IncrementalLoadResultEnd { .. } |\n+            QueryBlockedEnd { .. } => false,\n         }\n     }\n }\n@@ -249,6 +253,24 @@ impl SelfProfiler {\n         })\n     }\n \n+    #[inline]\n+    pub fn query_blocked_start(&mut self, query_name: &'static str, category: ProfileCategory) {\n+        self.record(ProfilerEvent::QueryBlockedStart {\n+            query_name,\n+            category,\n+            time: Instant::now(),\n+        })\n+    }\n+\n+    #[inline]\n+    pub fn query_blocked_end(&mut self, query_name: &'static str, category: ProfileCategory) {\n+        self.record(ProfilerEvent::QueryBlockedEnd {\n+            query_name,\n+            category,\n+            time: Instant::now(),\n+        })\n+    }\n+\n     #[inline]\n     fn record(&mut self, event: ProfilerEvent) {\n         let thread_id = std::thread::current().id();\n@@ -343,6 +365,8 @@ impl SelfProfiler {\n                 },\n                 //we don't summarize incremental load result events in the simple output mode\n                 IncrementalLoadResultStart { .. } | IncrementalLoadResultEnd { .. } => { },\n+                //we don't summarize parallel query blocking in the simple output mode\n+                QueryBlockedStart { .. } | QueryBlockedEnd { .. } => { },\n             }\n         }\n "}]}