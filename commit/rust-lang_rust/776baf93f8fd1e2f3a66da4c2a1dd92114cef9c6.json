{"sha": "776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "node_id": "C_kwDOAAsO6NoAKDc3NmJhZjkzZjhmZDFlMmYzYTY2ZGE0YzJhMWRkOTIxMTRjZWY5YzY", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-12-09T10:41:16Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-01-02T16:06:06Z"}, "message": "refactor: update json emitter to better handle errors (#3953)", "tree": {"sha": "ade823d90fbe4e247913d36cd3fa27950617ace4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ade823d90fbe4e247913d36cd3fa27950617ace4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "html_url": "https://github.com/rust-lang/rust/commit/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34263cd6bdb29df23258a96ea18fe986efe8dad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/34263cd6bdb29df23258a96ea18fe986efe8dad0", "html_url": "https://github.com/rust-lang/rust/commit/34263cd6bdb29df23258a96ea18fe986efe8dad0"}], "stats": {"total": 173, "additions": 80, "deletions": 93}, "files": [{"sha": "7c0f862cbc63f12e9b681a73b3238bf8ec5d6055", "filename": "src/emitter/json.rs", "status": "modified", "additions": 78, "deletions": 91, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/src%2Femitter%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/src%2Femitter%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fjson.rs?ref=776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "patch": "@@ -6,10 +6,10 @@ use std::io::{self, Write};\n \n #[derive(Debug, Default)]\n pub(crate) struct JsonEmitter {\n-    num_files: u32,\n+    mismatched_files: Vec<MismatchedFile>,\n }\n \n-#[derive(Debug, Default, Serialize)]\n+#[derive(Debug, Default, PartialEq, Serialize)]\n struct MismatchedBlock {\n     original_begin_line: u32,\n     original_end_line: u32,\n@@ -19,26 +19,20 @@ struct MismatchedBlock {\n     expected: String,\n }\n \n-#[derive(Debug, Default, Serialize)]\n+#[derive(Debug, Default, PartialEq, Serialize)]\n struct MismatchedFile {\n     name: String,\n     mismatches: Vec<MismatchedBlock>,\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_header(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n-        write!(output, \"[\")?;\n-        Ok(())\n-    }\n-\n     fn emit_footer(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n-        write!(output, \"]\")?;\n-        Ok(())\n+        writeln!(output, \"{}\", &to_json_string(&self.mismatched_files)?)\n     }\n \n     fn emit_formatted_file(\n         &mut self,\n-        output: &mut dyn Write,\n+        _output: &mut dyn Write,\n         FormattedFile {\n             filename,\n             original_text,\n@@ -50,66 +44,61 @@ impl Emitter for JsonEmitter {\n         let has_diff = !diff.is_empty();\n \n         if has_diff {\n-            output_json_file(output, filename, diff, self.num_files)?;\n-            self.num_files += 1;\n+            self.add_misformatted_file(filename, diff)?;\n         }\n \n         Ok(EmitterResult { has_diff })\n     }\n }\n \n-fn output_json_file<T>(\n-    mut writer: T,\n-    filename: &FileName,\n-    diff: Vec<Mismatch>,\n-    num_emitted_files: u32,\n-) -> Result<(), io::Error>\n-where\n-    T: Write,\n-{\n-    let mut mismatches = vec![];\n-    for mismatch in diff {\n-        let original_begin_line = mismatch.line_number_orig;\n-        let expected_begin_line = mismatch.line_number;\n-        let mut original_end_line = original_begin_line;\n-        let mut expected_end_line = expected_begin_line;\n-        let mut original_line_counter = 0;\n-        let mut expected_line_counter = 0;\n-        let mut original_lines = vec![];\n-        let mut expected_lines = vec![];\n+impl JsonEmitter {\n+    fn add_misformatted_file(\n+        &mut self,\n+        filename: &FileName,\n+        diff: Vec<Mismatch>,\n+    ) -> Result<(), io::Error> {\n+        let mut mismatches = vec![];\n+        for mismatch in diff {\n+            let original_begin_line = mismatch.line_number_orig;\n+            let expected_begin_line = mismatch.line_number;\n+            let mut original_end_line = original_begin_line;\n+            let mut expected_end_line = expected_begin_line;\n+            let mut original_line_counter = 0;\n+            let mut expected_line_counter = 0;\n+            let mut original_lines = vec![];\n+            let mut expected_lines = vec![];\n \n-        for line in mismatch.lines {\n-            match line {\n-                DiffLine::Expected(msg) => {\n-                    expected_end_line = expected_begin_line + expected_line_counter;\n-                    expected_line_counter += 1;\n-                    expected_lines.push(msg)\n-                }\n-                DiffLine::Resulting(msg) => {\n-                    original_end_line = original_begin_line + original_line_counter;\n-                    original_line_counter += 1;\n-                    original_lines.push(msg)\n+            for line in mismatch.lines {\n+                match line {\n+                    DiffLine::Expected(msg) => {\n+                        expected_end_line = expected_begin_line + expected_line_counter;\n+                        expected_line_counter += 1;\n+                        expected_lines.push(msg)\n+                    }\n+                    DiffLine::Resulting(msg) => {\n+                        original_end_line = original_begin_line + original_line_counter;\n+                        original_line_counter += 1;\n+                        original_lines.push(msg)\n+                    }\n+                    DiffLine::Context(_) => continue,\n                 }\n-                DiffLine::Context(_) => continue,\n             }\n-        }\n \n-        mismatches.push(MismatchedBlock {\n-            original_begin_line,\n-            original_end_line,\n-            expected_begin_line,\n-            expected_end_line,\n-            original: original_lines.join(\"\\n\"),\n-            expected: expected_lines.join(\"\\n\"),\n+            mismatches.push(MismatchedBlock {\n+                original_begin_line,\n+                original_end_line,\n+                expected_begin_line,\n+                expected_end_line,\n+                original: original_lines.join(\"\\n\"),\n+                expected: expected_lines.join(\"\\n\"),\n+            });\n+        }\n+        self.mismatched_files.push(MismatchedFile {\n+            name: format!(\"{}\", filename),\n+            mismatches,\n         });\n+        Ok(())\n     }\n-    let json = to_json_string(&MismatchedFile {\n-        name: format!(\"{}\", filename),\n-        mismatches,\n-    })?;\n-    let prefix = if num_emitted_files > 0 { \",\" } else { \"\" };\n-    write!(writer, \"{}{}\", prefix, &json)?;\n-    Ok(())\n }\n \n #[cfg(test)]\n@@ -120,6 +109,9 @@ mod tests {\n \n     #[test]\n     fn expected_line_range_correct_when_single_line_split() {\n+        let mut emitter = JsonEmitter {\n+            mismatched_files: vec![],\n+        };\n         let file = \"foo/bar.rs\";\n         let mismatched_file = MismatchedFile {\n             name: String::from(file),\n@@ -144,19 +136,19 @@ mod tests {\n             ],\n         };\n \n-        let mut writer = Vec::new();\n-        let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(\n-            &mut writer,\n-            &FileName::Real(PathBuf::from(file)),\n-            vec![mismatch],\n-            0,\n-        );\n-        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+        let _ = emitter\n+            .add_misformatted_file(&FileName::Real(PathBuf::from(file)), vec![mismatch])\n+            .unwrap();\n+\n+        assert_eq!(emitter.mismatched_files.len(), 1);\n+        assert_eq!(emitter.mismatched_files[0], mismatched_file);\n     }\n \n     #[test]\n     fn context_lines_ignored() {\n+        let mut emitter = JsonEmitter {\n+            mismatched_files: vec![],\n+        };\n         let file = \"src/lib.rs\";\n         let mismatched_file = MismatchedFile {\n             name: String::from(file),\n@@ -189,15 +181,12 @@ mod tests {\n             ],\n         };\n \n-        let mut writer = Vec::new();\n-        let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(\n-            &mut writer,\n-            &FileName::Real(PathBuf::from(file)),\n-            vec![mismatch],\n-            0,\n-        );\n-        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+        let _ = emitter\n+            .add_misformatted_file(&FileName::Real(PathBuf::from(file)), vec![mismatch])\n+            .unwrap();\n+\n+        assert_eq!(emitter.mismatched_files.len(), 1);\n+        assert_eq!(emitter.mismatched_files[0], mismatched_file);\n     }\n \n     #[test]\n@@ -217,7 +206,7 @@ mod tests {\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n         assert_eq!(result.has_diff, false);\n-        assert_eq!(&writer[..], \"[]\".as_bytes());\n+        assert_eq!(&writer[..], \"[]\\n\".as_bytes());\n     }\n \n     #[test]\n@@ -263,7 +252,7 @@ mod tests {\n             )\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n-        let exp_json = to_json_string(&MismatchedFile {\n+        let exp_json = to_json_string(&vec![MismatchedFile {\n             name: String::from(file_name),\n             mismatches: vec![\n                 MismatchedBlock {\n@@ -287,10 +276,10 @@ mod tests {\n                     ),\n                 },\n             ],\n-        })\n+        }])\n         .unwrap();\n         assert_eq!(result.has_diff, true);\n-        assert_eq!(&writer[..], format!(\"[{}]\", exp_json).as_bytes());\n+        assert_eq!(&writer[..], format!(\"{}\\n\", exp_json).as_bytes());\n     }\n \n     #[test]\n@@ -325,7 +314,7 @@ mod tests {\n             )\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n-        let exp_bin_json = to_json_string(&MismatchedFile {\n+        let exp_bin = MismatchedFile {\n             name: String::from(bin_file),\n             mismatches: vec![MismatchedBlock {\n                 original_begin_line: 2,\n@@ -335,9 +324,9 @@ mod tests {\n                 original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n                 expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n             }],\n-        })\n-        .unwrap();\n-        let exp_lib_json = to_json_string(&MismatchedFile {\n+        };\n+\n+        let exp_lib = MismatchedFile {\n             name: String::from(lib_file),\n             mismatches: vec![MismatchedBlock {\n                 original_begin_line: 2,\n@@ -347,11 +336,9 @@ mod tests {\n                 original: String::from(\"println!(\\\"Greetings!\\\");\"),\n                 expected: String::from(\"    println!(\\\"Greetings!\\\");\"),\n             }],\n-        })\n-        .unwrap();\n-        assert_eq!(\n-            &writer[..],\n-            format!(\"[{},{}]\", exp_bin_json, exp_lib_json).as_bytes()\n-        );\n+        };\n+\n+        let exp_json = to_json_string(&vec![exp_bin, exp_lib]).unwrap();\n+        assert_eq!(&writer[..], format!(\"{}\\n\", exp_json).as_bytes());\n     }\n }"}, {"sha": "acb33dea7ef39b7ae29b6f94d8ca541dc605025a", "filename": "tests/writemode/target/output.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/tests%2Fwritemode%2Ftarget%2Foutput.json", "raw_url": "https://github.com/rust-lang/rust/raw/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/tests%2Fwritemode%2Ftarget%2Foutput.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Foutput.json?ref=776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "patch": "@@ -1 +1 @@\n-[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\",\"expected\":\"fn foo_expr() { 1 }\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\",\"expected\":\"fn foo_stmt() { foo(); }\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\",\"expected\":\"fn foo_decl_local() { let z = 5; }\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\",\"expected\":\"fn empty() {}\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\",\"expected\":\"fn lots_of_space() { 1 }\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\",\"expected\":\"    fn dummy(&self) {}\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"}]}]\n\\ No newline at end of file\n+[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\",\"expected\":\"fn foo_expr() { 1 }\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\",\"expected\":\"fn foo_stmt() { foo(); }\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\",\"expected\":\"fn foo_decl_local() { let z = 5; }\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\",\"expected\":\"fn empty() {}\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\",\"expected\":\"fn lots_of_space() { 1 }\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\",\"expected\":\"    fn dummy(&self) {}\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"}]}]"}, {"sha": "ae6796863e5e971a1fe2eaece95db8a588404b91", "filename": "tests/writemode/target/stdin.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/tests%2Fwritemode%2Ftarget%2Fstdin.json", "raw_url": "https://github.com/rust-lang/rust/raw/776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6/tests%2Fwritemode%2Ftarget%2Fstdin.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fstdin.json?ref=776baf93f8fd1e2f3a66da4c2a1dd92114cef9c6", "patch": "@@ -1 +1 @@\n-[{\"name\":\"stdin\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\",\"expected\":\"fn some() {}\\nfn main() {}\"}]}]\n\\ No newline at end of file\n+[{\"name\":\"stdin\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\",\"expected\":\"fn some() {}\\nfn main() {}\"}]}]"}]}