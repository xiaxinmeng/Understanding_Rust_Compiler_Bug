{"sha": "16156d766dd8a5624d9455ffded6358fe879c416", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MTU2ZDc2NmRkOGE1NjI0ZDk0NTVmZmRlZDYzNThmZTg3OWM0MTY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-23T05:18:28Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-23T05:19:01Z"}, "message": "Add macro call support for type_of", "tree": {"sha": "5e76885085a5a566cb1f946afd20bc5d2547334e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e76885085a5a566cb1f946afd20bc5d2547334e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16156d766dd8a5624d9455ffded6358fe879c416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16156d766dd8a5624d9455ffded6358fe879c416", "html_url": "https://github.com/rust-lang/rust/commit/16156d766dd8a5624d9455ffded6358fe879c416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16156d766dd8a5624d9455ffded6358fe879c416/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60aa4d12f95477565d5b01f122d2c9dd845015b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/60aa4d12f95477565d5b01f122d2c9dd845015b4", "html_url": "https://github.com/rust-lang/rust/commit/60aa4d12f95477565d5b01f122d2c9dd845015b4"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "2c602a79eee211dd6d306316ae756fad5a1d407c", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=16156d766dd8a5624d9455ffded6358fe879c416", "patch": "@@ -73,6 +73,24 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn add_explicit_type_works_for_macro_call() {\n+        check_assist(\n+            add_explicit_type,\n+            \"macro_rules! v { () => {0u64} } fn f() { let a<|> = v!(); }\",\n+            \"macro_rules! v { () => {0u64} } fn f() { let a<|>: u64 = v!(); }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_works_for_macro_call_recursive() {\n+        check_assist(\n+            add_explicit_type,\n+            \"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|> = v!(); }\",\n+            \"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|>: u64 = v!(); }\",\n+        );\n+    }\n+\n     #[test]\n     fn add_explicit_type_not_applicable_if_ty_not_inferred() {\n         check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|> = None; }\");"}, {"sha": "3af477818a3b228a3b2e6743528318107b933c00", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=16156d766dd8a5624d9455ffded6358fe879c416", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n     nameres::ModuleSource,\n     path::path,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    AssocItemId, DefWithBodyId,\n+    AssocItemId, DefWithBodyId, Expander,\n };\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n@@ -216,7 +216,14 @@ impl SourceAnalyzer {\n     }\n \n     pub fn type_of(&self, db: &impl HirDatabase, expr: &ast::Expr) -> Option<Type> {\n-        let expr_id = self.expr_id(expr)?;\n+        let expr_id = if let Some(macro_call) = ast::MacroCall::cast(expr.syntax().clone()) {\n+            let mut expander = Expander::new(db, self.file_id, self.body_owner?.module(db).id);\n+            let expr = expand_macro_call_to_expr(db, &mut expander, macro_call)?;\n+            self.body_source_map.as_ref()?.node_expr(expr.as_ref())?\n+        } else {\n+            self.expr_id(expr)?\n+        };\n+\n         let ty = self.infer.as_ref()?[expr_id].clone();\n         let environment = TraitEnvironment::lower(db, &self.resolver);\n         Some(Type { krate: self.resolver.krate()?, ty: InEnvironment { value: ty, environment } })\n@@ -501,6 +508,21 @@ fn scope_for_offset(\n         })\n }\n \n+fn expand_macro_call_to_expr(\n+    db: &impl HirDatabase,\n+    expander: &mut Expander,\n+    macro_call: ast::MacroCall,\n+) -> Option<InFile<ast::Expr>> {\n+    let (mark, expr): (_, ast::Expr) = expander.enter_expand(db, macro_call)?;\n+    let expr = if let Some(child) = ast::MacroCall::cast(expr.syntax().clone()) {\n+        expand_macro_call_to_expr(db, expander, child)\n+    } else {\n+        Some(expander.to_source(expr))\n+    };\n+    expander.exit(db, mark);\n+    expr\n+}\n+\n // XXX: during completion, cursor might be outside of any particular\n // expression. Try to figure out the correct scope...\n fn adjust("}, {"sha": "8ab92b23a86b833b4cf43b0b95843d8d52a578a2", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=16156d766dd8a5624d9455ffded6358fe879c416", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n-pub(crate) struct Expander {\n+pub struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n@@ -35,18 +35,14 @@ pub(crate) struct Expander {\n }\n \n impl Expander {\n-    pub(crate) fn new(\n-        db: &impl DefDatabase,\n-        current_file_id: HirFileId,\n-        module: ModuleId,\n-    ) -> Expander {\n+    pub fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module }\n     }\n \n-    pub(crate) fn enter_expand<T: ast::AstNode, DB: DefDatabase>(\n+    pub fn enter_expand<T: ast::AstNode, DB: DefDatabase>(\n         &mut self,\n         db: &DB,\n         macro_call: ast::MacroCall,\n@@ -84,14 +80,14 @@ impl Expander {\n         None\n     }\n \n-    pub(crate) fn exit(&mut self, db: &impl DefDatabase, mut mark: Mark) {\n+    pub fn exit(&mut self, db: &impl DefDatabase, mut mark: Mark) {\n         self.hygiene = Hygiene::new(db, mark.file_id);\n         self.current_file_id = mark.file_id;\n         self.ast_id_map = mem::take(&mut mark.ast_id_map);\n         mark.bomb.defuse();\n     }\n \n-    pub(crate) fn to_source<T>(&self, value: T) -> InFile<T> {\n+    pub fn to_source<T>(&self, value: T) -> InFile<T> {\n         InFile { file_id: self.current_file_id, value }\n     }\n \n@@ -116,7 +112,7 @@ impl Expander {\n     }\n }\n \n-pub(crate) struct Mark {\n+pub struct Mark {\n     file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     bomb: DropBomb,"}, {"sha": "f58ce9a955c0587380338ce99aee1349dd8e4671", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16156d766dd8a5624d9455ffded6358fe879c416/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=16156d766dd8a5624d9455ffded6358fe879c416", "patch": "@@ -48,7 +48,7 @@ use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::{ast, AstNode};\n \n-use crate::body::Expander;\n+pub use crate::body::Expander;\n use crate::builtin_type::BuiltinType;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}]}