{"sha": "7a75d2bec402b76688da35402575aa7d8e61d91c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNzVkMmJlYzQwMmI3NjY4OGRhMzU0MDI1NzVhYTdkOGU2MWQ5MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-04T04:49:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-04T04:49:59Z"}, "message": "Auto merge of #43012 - scottmcm:delete-range-step-by, r=alexcrichton\n\nDelete deprecated & unstable range-specific `step_by`\n\nUsing the new one is annoying while this one exists, since the inherent method hides the one on iterator.\n\nTracking issue: #27741\nReplacement: #41439\nDeprecation: #42310 for 1.19\nFixes #41477", "tree": {"sha": "b23284ad5e9ac1971e2ec9e7cdf6826f8e7499fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23284ad5e9ac1971e2ec9e7cdf6826f8e7499fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a75d2bec402b76688da35402575aa7d8e61d91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a75d2bec402b76688da35402575aa7d8e61d91c", "html_url": "https://github.com/rust-lang/rust/commit/7a75d2bec402b76688da35402575aa7d8e61d91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a75d2bec402b76688da35402575aa7d8e61d91c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1ef191b5de05e0515ba6e1246908e2b3771617", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1ef191b5de05e0515ba6e1246908e2b3771617", "html_url": "https://github.com/rust-lang/rust/commit/ed1ef191b5de05e0515ba6e1246908e2b3771617"}, {"sha": "dcd332ed94fb3dd6bf2f5789c8dd42f509337992", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd332ed94fb3dd6bf2f5789c8dd42f509337992", "html_url": "https://github.com/rust-lang/rust/commit/dcd332ed94fb3dd6bf2f5789c8dd42f509337992"}], "stats": {"total": 271, "additions": 20, "deletions": 251}, "files": [{"sha": "f2935c05d4f7a90ac3112b0481fdac7057562652", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -510,8 +510,7 @@ fn test_from_iter() {\n     let u: Vec<_> = deq.iter().cloned().collect();\n     assert_eq!(u, v);\n \n-    // FIXME #27741: Remove `.skip(0)` when Range::step_by is fully removed\n-    let seq = (0..).skip(0).step_by(2).take(256);\n+    let seq = (0..).step_by(2).take(256);\n     let deq: VecDeque<_> = seq.collect();\n     for (i, &x) in deq.iter().enumerate() {\n         assert_eq!(2 * i, x);"}, {"sha": "decd718d65e15c6e8af03368024be64c69d9bae3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -314,12 +314,6 @@ pub use self::iterator::Iterator;\n            reason = \"likely to be replaced by finer-grained traits\",\n            issue = \"42168\")]\n pub use self::range::Step;\n-#[unstable(feature = \"step_by\", reason = \"recent addition\",\n-           issue = \"27741\")]\n-#[rustc_deprecated(since = \"1.19.0\",\n-                   reason = \"replaced by `iter::StepBy`\")]\n-#[allow(deprecated)]\n-pub use self::range::StepBy as DeprecatedStepBy;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{Repeat, repeat};"}, {"sha": "1dad8157948958f6a94e544fe24e9cbbb305b7e7", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 0, "deletions": 213, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -244,219 +244,6 @@ step_impl_signed!(i64);\n step_impl_no_between!(u64 i64);\n step_impl_no_between!(u128 i128);\n \n-/// An adapter for stepping range iterators by a custom amount.\n-///\n-/// The resulting iterator handles overflow by stopping. The `A`\n-/// parameter is the type being iterated over, while `R` is the range\n-/// type (usually one of `std::ops::{Range, RangeFrom, RangeInclusive}`.\n-#[derive(Clone, Debug)]\n-#[unstable(feature = \"step_by\", reason = \"recent addition\",\n-           issue = \"27741\")]\n-#[rustc_deprecated(since = \"1.19.0\",\n-                   reason = \"replaced by `iter::StepBy`\")]\n-#[allow(deprecated)]\n-pub struct StepBy<A, R> {\n-    step_by: A,\n-    range: R,\n-}\n-\n-impl<A: Step> ops::RangeFrom<A> {\n-    /// Creates an iterator starting at the same point, but stepping by\n-    /// the given amount at each iteration.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(step_by)]\n-    /// fn main() {\n-    ///     let result: Vec<_> = (0..).step_by(2).take(5).collect();\n-    ///     assert_eq!(result, vec![0, 2, 4, 6, 8]);\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n-               issue = \"27741\")]\n-    #[rustc_deprecated(since = \"1.19.0\",\n-                       reason = \"replaced by `Iterator::step_by`\")]\n-    #[allow(deprecated)]\n-    pub fn step_by(self, by: A) -> StepBy<A, Self> {\n-        StepBy {\n-            step_by: by,\n-            range: self\n-        }\n-    }\n-}\n-\n-impl<A: Step> ops::Range<A> {\n-    /// Creates an iterator with the same range, but stepping by the\n-    /// given amount at each iteration.\n-    ///\n-    /// The resulting iterator handles overflow by stopping.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(step_by)]\n-    /// fn main() {\n-    ///     let result: Vec<_> = (0..10).step_by(2).collect();\n-    ///     assert_eq!(result, vec![0, 2, 4, 6, 8]);\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n-               issue = \"27741\")]\n-    #[rustc_deprecated(since = \"1.19.0\",\n-                       reason = \"replaced by `Iterator::step_by`\")]\n-    #[allow(deprecated)]\n-    pub fn step_by(self, by: A) -> StepBy<A, Self> {\n-        StepBy {\n-            step_by: by,\n-            range: self\n-        }\n-    }\n-}\n-\n-impl<A: Step> ops::RangeInclusive<A> {\n-    /// Creates an iterator with the same range, but stepping by the\n-    /// given amount at each iteration.\n-    ///\n-    /// The resulting iterator handles overflow by stopping.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(step_by, inclusive_range_syntax)]\n-    ///\n-    /// let result: Vec<_> = (0...10).step_by(2).collect();\n-    /// assert_eq!(result, vec![0, 2, 4, 6, 8, 10]);\n-    /// ```\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n-               issue = \"27741\")]\n-    #[rustc_deprecated(since = \"1.19.0\",\n-                       reason = \"replaced by `Iterator::step_by`\")]\n-    #[allow(deprecated)]\n-    pub fn step_by(self, by: A) -> StepBy<A, Self> {\n-        StepBy {\n-            step_by: by,\n-            range: self\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"step_by\", reason = \"recent addition\",\n-           issue = \"27741\")]\n-#[allow(deprecated)]\n-impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n-    A: Clone,\n-    for<'a> &'a A: Add<&'a A, Output = A>\n-{\n-    type Item = A;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<A> {\n-        let mut n = &self.range.start + &self.step_by;\n-        mem::swap(&mut n, &mut self.range.start);\n-        Some(n)\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (usize::MAX, None) // Too bad we can't specify an infinite lower bound\n-    }\n-}\n-\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n-#[allow(deprecated)]\n-impl<A> FusedIterator for StepBy<A, ops::RangeFrom<A>>\n-    where A: Clone, for<'a> &'a A: Add<&'a A, Output = A> {}\n-\n-#[unstable(feature = \"step_by\", reason = \"recent addition\",\n-           issue = \"27741\")]\n-#[allow(deprecated)]\n-impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n-    type Item = A;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<A> {\n-        let rev = self.step_by.is_negative();\n-        if (rev && self.range.start > self.range.end) ||\n-           (!rev && self.range.start < self.range.end)\n-        {\n-            match self.range.start.step(&self.step_by) {\n-                Some(mut n) => {\n-                    mem::swap(&mut self.range.start, &mut n);\n-                    Some(n)\n-                },\n-                None => {\n-                    let mut n = self.range.end.clone();\n-                    mem::swap(&mut self.range.start, &mut n);\n-                    Some(n)\n-                }\n-            }\n-        } else {\n-            None\n-        }\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        match Step::steps_between(&self.range.start,\n-                                  &self.range.end,\n-                                  &self.step_by) {\n-            Some(hint) => (hint, Some(hint)),\n-            None       => (0, None)\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n-#[allow(deprecated)]\n-impl<A: Step + Clone> FusedIterator for StepBy<A, ops::Range<A>> {}\n-\n-#[unstable(feature = \"inclusive_range\",\n-           reason = \"recently added, follows RFC\",\n-           issue = \"28237\")]\n-#[allow(deprecated)]\n-impl<A: Step + Clone> Iterator for StepBy<A, ops::RangeInclusive<A>> {\n-    type Item = A;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<A> {\n-        let rev = self.step_by.is_negative();\n-\n-        if (rev && self.range.start >= self.range.end) ||\n-           (!rev && self.range.start <= self.range.end)\n-        {\n-            match self.range.start.step(&self.step_by) {\n-                Some(n) => {\n-                    Some(mem::replace(&mut self.range.start, n))\n-                },\n-                None => {\n-                    let last = self.range.start.replace_one();\n-                    self.range.end.replace_zero();\n-                    self.step_by.replace_one();\n-                    Some(last)\n-                },\n-            }\n-        }\n-        else {\n-            None\n-        }\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        match Step::steps_between(&self.range.start,\n-                                  &self.range.end,\n-                                  &self.step_by) {\n-            Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n-            None       => (0, None)\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n-#[allow(deprecated)]\n-impl<A: Step + Clone> FusedIterator for StepBy<A, ops::RangeInclusive<A>> {}\n-\n macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "14f0260f57129391b0da27fb5c9fd96bca77627f", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -12,15 +12,6 @@ use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n \n-// FIXME #27741: This is here to simplify calling Iterator::step_by. Remove\n-// once Range::step_by is completely gone (not just deprecated).\n-trait IterEx: Sized {\n-    fn iter_step_by(self, n: usize) -> StepBy<Self>;\n-}\n-impl<I:Iterator> IterEx for I {\n-    fn iter_step_by(self, n: usize) -> StepBy<Self> { self.step_by(n) }\n-}\n-\n #[test]\n fn test_lt() {\n     let empty: [isize; 0] = [];\n@@ -76,7 +67,7 @@ fn test_multi_iter() {\n \n #[test]\n fn test_counter_from_iter() {\n-    let it = (0..).iter_step_by(5).take(10);\n+    let it = (0..).step_by(5).take(10);\n     let xs: Vec<isize> = FromIterator::from_iter(it);\n     assert_eq!(xs, [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n }\n@@ -94,7 +85,7 @@ fn test_iterator_chain() {\n     }\n     assert_eq!(i, expected.len());\n \n-    let ys = (30..).iter_step_by(10).take(4);\n+    let ys = (30..).step_by(10).take(4);\n     let it = xs.iter().cloned().chain(ys);\n     let mut i = 0;\n     for x in it {\n@@ -156,13 +147,13 @@ fn test_iterator_chain_find() {\n #[test]\n fn test_iterator_step_by() {\n     // Identity\n-    let mut it = (0..).iter_step_by(1).take(3);\n+    let mut it = (0..).step_by(1).take(3);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(1));\n     assert_eq!(it.next(), Some(2));\n     assert_eq!(it.next(), None);\n \n-    let mut it = (0..).iter_step_by(3).take(4);\n+    let mut it = (0..).step_by(3).take(4);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(3));\n     assert_eq!(it.next(), Some(6));\n@@ -173,7 +164,7 @@ fn test_iterator_step_by() {\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {\n-    let mut it = (0..).iter_step_by(0);\n+    let mut it = (0..).step_by(0);\n     it.next();\n }\n \n@@ -252,7 +243,7 @@ fn test_iterator_step_by_size_hint() {\n \n #[test]\n fn test_filter_map() {\n-    let it = (0..).iter_step_by(1).take(10)\n+    let it = (0..).step_by(1).take(10)\n         .filter_map(|x| if x % 2 == 0 { Some(x*x) } else { None });\n     assert_eq!(it.collect::<Vec<usize>>(), [0*0, 2*2, 4*4, 6*6, 8*8]);\n }\n@@ -654,7 +645,7 @@ fn test_iterator_scan() {\n fn test_iterator_flat_map() {\n     let xs = [0, 3, 6];\n     let ys = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    let it = xs.iter().flat_map(|&x| (x..).iter_step_by(1).take(3));\n+    let it = xs.iter().flat_map(|&x| (x..).step_by(1).take(3));\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, ys[i]);\n@@ -680,13 +671,13 @@ fn test_inspect() {\n #[test]\n fn test_cycle() {\n     let cycle_len = 3;\n-    let it = (0..).iter_step_by(1).take(cycle_len).cycle();\n+    let it = (0..).step_by(1).take(cycle_len).cycle();\n     assert_eq!(it.size_hint(), (usize::MAX, None));\n     for (i, x) in it.take(100).enumerate() {\n         assert_eq!(i % cycle_len, x);\n     }\n \n-    let mut it = (0..).iter_step_by(1).take(0).cycle();\n+    let mut it = (0..).step_by(1).take(0).cycle();\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n }\n@@ -765,7 +756,7 @@ fn test_iterator_min() {\n \n #[test]\n fn test_iterator_size_hint() {\n-    let c = (0..).iter_step_by(1);\n+    let c = (0..).step_by(1);\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let v2 = &[10, 11, 12];\n     let vi = v.iter();\n@@ -1090,22 +1081,21 @@ fn test_range_step() {\n     #![allow(deprecated)]\n \n     assert_eq!((0..20).step_by(5).collect::<Vec<isize>>(), [0, 5, 10, 15]);\n-    assert_eq!((20..0).step_by(-5).collect::<Vec<isize>>(), [20, 15, 10, 5]);\n-    assert_eq!((20..0).step_by(-6).collect::<Vec<isize>>(), [20, 14, 8, 2]);\n+    assert_eq!((1..21).rev().step_by(5).collect::<Vec<isize>>(), [20, 15, 10, 5]);\n+    assert_eq!((1..21).rev().step_by(6).collect::<Vec<isize>>(), [20, 14, 8, 2]);\n     assert_eq!((200..255).step_by(50).collect::<Vec<u8>>(), [200, 250]);\n     assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n     assert_eq!((200..200).step_by(1).collect::<Vec<isize>>(), []);\n \n     assert_eq!((0..20).step_by(1).size_hint(), (20, Some(20)));\n     assert_eq!((0..20).step_by(21).size_hint(), (1, Some(1)));\n     assert_eq!((0..20).step_by(5).size_hint(), (4, Some(4)));\n-    assert_eq!((20..0).step_by(-5).size_hint(), (4, Some(4)));\n-    assert_eq!((20..0).step_by(-6).size_hint(), (4, Some(4)));\n+    assert_eq!((1..21).rev().step_by(5).size_hint(), (4, Some(4)));\n+    assert_eq!((1..21).rev().step_by(6).size_hint(), (4, Some(4)));\n     assert_eq!((20..-5).step_by(1).size_hint(), (0, Some(0)));\n     assert_eq!((20..20).step_by(1).size_hint(), (0, Some(0)));\n-    assert_eq!((0..1).step_by(0).size_hint(), (0, None));\n-    assert_eq!((i8::MAX..i8::MIN).step_by(i8::MIN).size_hint(), (2, Some(2)));\n-    assert_eq!((i16::MIN..i16::MAX).step_by(i16::MAX).size_hint(), (3, Some(3)));\n+    assert_eq!((i8::MIN..i8::MAX).step_by(-(i8::MIN as i32) as usize).size_hint(), (2, Some(2)));\n+    assert_eq!((i16::MIN..i16::MAX).step_by(i16::MAX as usize).size_hint(), (3, Some(3)));\n     assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n "}, {"sha": "8d3e367d2379adf5d387df9047fea55a1588ecd4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -35,7 +35,6 @@\n #![feature(slice_rotate)]\n #![feature(sort_internals)]\n #![feature(specialization)]\n-#![feature(step_by)]\n #![feature(step_trait)]\n #![feature(test)]\n #![feature(trusted_len)]"}, {"sha": "5e56b0d8ab16cf0f9d02b79234a2cc74dff47923", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -31,7 +31,7 @@\n             issue = \"27703\")]\n #![feature(core_intrinsics)]\n #![feature(staged_api)]\n-#![feature(step_by)]\n+#![feature(iterator_step_by)]\n #![feature(custom_attribute)]\n #![feature(specialization)]\n #![allow(unused_attributes)]"}, {"sha": "f6119e709990a534d0382c16ed4f9247ebf73bfe", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -10,7 +10,7 @@\n \n // Test inclusive range syntax.\n \n-#![feature(inclusive_range_syntax, inclusive_range, step_by)]\n+#![feature(inclusive_range_syntax, inclusive_range, iterator_step_by)]\n \n use std::ops::{RangeInclusive, RangeToInclusive};\n "}, {"sha": "c11a0d391a4694f241ae6a34d3cf9b794a9f1a68", "filename": "src/test/run-pass/sync-send-iterators-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a75d2bec402b76688da35402575aa7d8e61d91c/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs?ref=7a75d2bec402b76688da35402575aa7d8e61d91c", "patch": "@@ -14,7 +14,7 @@\n #![feature(iter_empty)]\n #![feature(iter_once)]\n #![feature(iter_unfold)]\n-#![feature(step_by)]\n+#![feature(iterator_step_by)]\n #![feature(str_escape)]\n \n use std::iter::{empty, once, repeat};"}]}