{"sha": "46d55d65491ab57e6373d6424f432295eb2eb672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDU1ZDY1NDkxYWI1N2U2MzczZDY0MjRmNDMyMjk1ZWIyZWI2NzI=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-15T10:58:23Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-15T11:06:17Z"}, "message": "Warn about unused pub fields in non-pub structs", "tree": {"sha": "a9121299e5f8a3fd351f7decc8d3b7df22e44de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9121299e5f8a3fd351f7decc8d3b7df22e44de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d55d65491ab57e6373d6424f432295eb2eb672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d55d65491ab57e6373d6424f432295eb2eb672", "html_url": "https://github.com/rust-lang/rust/commit/46d55d65491ab57e6373d6424f432295eb2eb672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d55d65491ab57e6373d6424f432295eb2eb672/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60", "html_url": "https://github.com/rust-lang/rust/commit/c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60"}], "stats": {"total": 109, "additions": 87, "deletions": 22}, "files": [{"sha": "bd142677cf9ed9596a0feee0b56f23eab71d5c60", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/46d55d65491ab57e6373d6424f432295eb2eb672/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d55d65491ab57e6373d6424f432295eb2eb672/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=46d55d65491ab57e6373d6424f432295eb2eb672", "patch": "@@ -44,6 +44,7 @@ struct MarkSymbolVisitor<'tcx> {\n     repr_has_repr_c: bool,\n     in_pat: bool,\n     inherited_pub_visibility: bool,\n+    pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<hir::HirId, hir::HirId>,\n@@ -188,27 +189,33 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     fn visit_node(&mut self, node: Node<'tcx>) {\n         let had_repr_c = self.repr_has_repr_c;\n-        self.repr_has_repr_c = false;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n+        let had_pub_visibility = self.pub_visibility;\n+        self.repr_has_repr_c = false;\n         self.inherited_pub_visibility = false;\n+        self.pub_visibility = false;\n         match node {\n-            Node::Item(item) => match item.kind {\n-                hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n-                    let def = self.tcx.adt_def(item.def_id);\n-                    self.repr_has_repr_c = def.repr.c();\n+            Node::Item(item) => {\n+                self.pub_visibility = item.vis.node.is_pub();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::Enum(..) => {\n-                    self.inherited_pub_visibility = item.vis.node.is_pub();\n+                match item.kind {\n+                    hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n+                        let def = self.tcx.adt_def(item.def_id);\n+                        self.repr_has_repr_c = def.repr.c();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::ForeignMod { .. } => {}\n-                _ => {\n-                    intravisit::walk_item(self, &item);\n+                        intravisit::walk_item(self, &item);\n+                    }\n+                    hir::ItemKind::Enum(..) => {\n+                        self.inherited_pub_visibility = self.pub_visibility;\n+\n+                        intravisit::walk_item(self, &item);\n+                    }\n+                    hir::ItemKind::ForeignMod { .. } => {}\n+                    _ => {\n+                        intravisit::walk_item(self, &item);\n+                    }\n                 }\n-            },\n+            }\n             Node::TraitItem(trait_item) => {\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n@@ -220,8 +227,9 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n             _ => {}\n         }\n-        self.repr_has_repr_c = had_repr_c;\n+        self.pub_visibility = had_pub_visibility;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n+        self.repr_has_repr_c = had_repr_c;\n     }\n \n     fn mark_as_used_if_union(&mut self, adt: &ty::AdtDef, fields: &[hir::ExprField<'_>]) {\n@@ -259,10 +267,10 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     ) {\n         let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n-        let live_fields = def\n-            .fields()\n-            .iter()\n-            .filter(|f| has_repr_c || inherited_pub_visibility || f.vis.node.is_pub());\n+        let pub_visibility = self.pub_visibility;\n+        let live_fields = def.fields().iter().filter(|f| {\n+            has_repr_c || (pub_visibility && (inherited_pub_visibility || f.vis.node.is_pub()))\n+        });\n         self.live_symbols.extend(live_fields.map(|f| f.hir_id));\n \n         intravisit::walk_struct_def(self, def);\n@@ -500,6 +508,7 @@ fn find_live<'tcx>(\n         repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,\n+        pub_visibility: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n     };"}, {"sha": "b5c4a775296648a051fc29c20e782ed698958452", "filename": "src/test/ui/cast/issue-84213.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed?ref=46d55d65491ab57e6373d6424f432295eb2eb672", "patch": "@@ -6,6 +6,7 @@ struct Something {\n \n fn main() {\n     let mut something = Something { field: 1337 };\n+    let _ = something.field;\n \n     let _pointer_to_something = &something as *const Something;\n     //~^ ERROR: non-primitive cast"}, {"sha": "6eb81291abc7fb3292336934776bc59d9ae24b8a", "filename": "src/test/ui/cast/issue-84213.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs?ref=46d55d65491ab57e6373d6424f432295eb2eb672", "patch": "@@ -6,6 +6,7 @@ struct Something {\n \n fn main() {\n     let mut something = Something { field: 1337 };\n+    let _ = something.field;\n \n     let _pointer_to_something = something as *const Something;\n     //~^ ERROR: non-primitive cast"}, {"sha": "1b71d4db511b5a3c3d46ead8834ecc6d5875859d", "filename": "src/test/ui/cast/issue-84213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr?ref=46d55d65491ab57e6373d6424f432295eb2eb672", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `Something` as `*const Something`\n-  --> $DIR/issue-84213.rs:10:33\n+  --> $DIR/issue-84213.rs:11:33\n    |\n LL |     let _pointer_to_something = something as *const Something;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,7 +10,7 @@ LL |     let _pointer_to_something = &something as *const Something;\n    |                                 ^\n \n error[E0605]: non-primitive cast: `Something` as `*mut Something`\n-  --> $DIR/issue-84213.rs:13:37\n+  --> $DIR/issue-84213.rs:14:37\n    |\n LL |     let _mut_pointer_to_something = something as *mut Something;\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast"}, {"sha": "9a4d9fbad35ba603d3a0067f021dbae1ed78b30a", "filename": "src/test/ui/lint/dead-code/issue-85255.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=46d55d65491ab57e6373d6424f432295eb2eb672", "patch": "@@ -0,0 +1,22 @@\n+// Unused `pub` fields in non-`pub` structs should also trigger dead code warnings.\n+// check-pass\n+\n+#![warn(dead_code)]\n+\n+struct Foo {\n+    a: i32, //~ WARNING: field is never read\n+    pub b: i32, //~ WARNING: field is never read\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+}\n+\n+\n+fn main() {\n+    let _ = Foo { a: 1, b: 2 };\n+    let _ = Bar;\n+}"}, {"sha": "73646439295338f1220860cbf2d4cc63bbae6507", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46d55d65491ab57e6373d6424f432295eb2eb672/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=46d55d65491ab57e6373d6424f432295eb2eb672", "patch": "@@ -0,0 +1,32 @@\n+warning: field is never read: `a`\n+  --> $DIR/issue-85255.rs:7:5\n+   |\n+LL |     a: i32,\n+   |     ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-85255.rs:4:9\n+   |\n+LL | #![warn(dead_code)]\n+   |         ^^^^^^^^^\n+\n+warning: field is never read: `b`\n+  --> $DIR/issue-85255.rs:8:5\n+   |\n+LL |     pub b: i32,\n+   |     ^^^^^^^^^^\n+\n+warning: associated function is never used: `a`\n+  --> $DIR/issue-85255.rs:14:8\n+   |\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+\n+warning: associated function is never used: `b`\n+  --> $DIR/issue-85255.rs:15:12\n+   |\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n+warning: 4 warnings emitted\n+"}]}