{"sha": "37f30173a017c7c5fdfb98697daa087fa5ce50c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjMwMTczYTAxN2M3YzVmZGZiOTg2OTdkYWEwODdmYTVjZTUwYzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T10:31:15Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T10:31:24Z"}, "message": "Rollup merge of #35618 - jseyfried:ast_view_path_refactor, r=eddyb\n\nRefactor `PathListItem`s\n\nThis refactors away variant `Mod` of `ast::PathListItemKind` and refactors the remaining variant `Ident` to a struct `ast::PathListItem_`.", "tree": {"sha": "61fac466a104c67e5f5fce102a91b150da9e949c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61fac466a104c67e5f5fce102a91b150da9e949c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f30173a017c7c5fdfb98697daa087fa5ce50c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f30173a017c7c5fdfb98697daa087fa5ce50c7", "html_url": "https://github.com/rust-lang/rust/commit/37f30173a017c7c5fdfb98697daa087fa5ce50c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f30173a017c7c5fdfb98697daa087fa5ce50c7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b833e8d0a0f964b5e4708531ab579ef5454a5066", "url": "https://api.github.com/repos/rust-lang/rust/commits/b833e8d0a0f964b5e4708531ab579ef5454a5066", "html_url": "https://github.com/rust-lang/rust/commit/b833e8d0a0f964b5e4708531ab579ef5454a5066"}, {"sha": "9d99fe98ad1980b8bc00678f27b2e324e584bea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d99fe98ad1980b8bc00678f27b2e324e584bea9", "html_url": "https://github.com/rust-lang/rust/commit/9d99fe98ad1980b8bc00678f27b2e324e584bea9"}], "stats": {"total": 274, "additions": 82, "deletions": 192}, "files": [{"sha": "e3b9b51ce6c0ea818b0d50865b94d35fc151f6ed", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -271,16 +271,10 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n                     ViewPathList(fld.fold_path(path),\n                                  path_list_idents.move_map(|path_list_ident| {\n                                      Spanned {\n-                                         node: match path_list_ident.node {\n-                                             PathListIdent { id, name, rename } => PathListIdent {\n-                                                 id: fld.new_id(id),\n-                                                 name: name,\n-                                                 rename: rename,\n-                                             },\n-                                             PathListMod { id, rename } => PathListMod {\n-                                                 id: fld.new_id(id),\n-                                                 rename: rename,\n-                                             },\n+                                         node: PathListItem_ {\n+                                             id: fld.new_id(path_list_ident.node.id),\n+                                             name: path_list_ident.node.name,\n+                                             rename: path_list_ident.node.rename,\n                                          },\n                                          span: fld.new_span(path_list_ident.span),\n                                      }"}, {"sha": "bc1dff7c6fc312e27e08d3fa10b2792ebc110e8d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -444,12 +444,12 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     }\n }\n \n-pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                               _prefix: &'v Path,\n-                                               item: &'v PathListItem) {\n-    visitor.visit_id(item.node.id());\n-    walk_opt_name(visitor, item.span, item.node.name());\n-    walk_opt_name(visitor, item.span, item.node.rename());\n+pub fn walk_path_list_item<'v, V>(visitor: &mut V, _prefix: &'v Path, item: &'v PathListItem)\n+    where V: Visitor<'v>,\n+{\n+    visitor.visit_id(item.node.id);\n+    visitor.visit_name(item.span, item.node.name);\n+    walk_opt_name(visitor, item.span, item.node.rename);\n }\n \n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,"}, {"sha": "4ac0bde2835ee10994fe883541ed9d76c9bf0c21", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -218,16 +218,10 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_path_list_item(&mut self, path_list_ident: &PathListItem) -> hir::PathListItem {\n         Spanned {\n-            node: match path_list_ident.node {\n-                PathListItemKind::Ident { id, name, rename } => hir::PathListIdent {\n-                    id: id,\n-                    name: name.name,\n-                    rename: rename.map(|x| x.name),\n-                },\n-                PathListItemKind::Mod { id, rename } => hir::PathListMod {\n-                    id: id,\n-                    rename: rename.map(|x| x.name),\n-                },\n+            node: hir::PathListItem_ {\n+                id: path_list_ident.node.id,\n+                name: path_list_ident.node.name.name,\n+                rename: path_list_ident.node.rename.map(|rename| rename.name),\n             },\n             span: path_list_ident.span,\n         }"}, {"sha": "280c0f304856990810b38169af7f76a4d43b7848", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -120,7 +120,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                     match view_path.node {\n                         ViewPathList(_, ref paths) => {\n                             for path in paths {\n-                                this.insert(path.node.id(), NodeItem(i));\n+                                this.insert(path.node.id, NodeItem(i));\n                             }\n                         }\n                         _ => ()"}, {"sha": "295a49d26d0fed82b8a3046d7bfe276557e3d014", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -20,7 +20,6 @@ pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n pub use self::Mutability::*;\n-pub use self::PathListItem_::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n pub use self::TraitItem_::*;\n@@ -1307,39 +1306,11 @@ pub struct Variant_ {\n pub type Variant = Spanned<Variant_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum PathListItem_ {\n-    PathListIdent {\n-        name: Name,\n-        /// renamed in list, eg `use foo::{bar as baz};`\n-        rename: Option<Name>,\n-        id: NodeId,\n-    },\n-    PathListMod {\n-        /// renamed in list, eg `use foo::{self as baz};`\n-        rename: Option<Name>,\n-        id: NodeId,\n-    },\n-}\n-\n-impl PathListItem_ {\n-    pub fn id(&self) -> NodeId {\n-        match *self {\n-            PathListIdent { id, .. } | PathListMod { id, .. } => id,\n-        }\n-    }\n-\n-    pub fn name(&self) -> Option<Name> {\n-        match *self {\n-            PathListIdent { name, .. } => Some(name),\n-            PathListMod { .. } => None,\n-        }\n-    }\n-\n-    pub fn rename(&self) -> Option<Name> {\n-        match *self {\n-            PathListIdent { rename, .. } | PathListMod { rename, .. } => rename,\n-        }\n-    }\n+pub struct PathListItem_ {\n+    pub name: Name,\n+    /// renamed in list, eg `use foo::{bar as baz};`\n+    pub rename: Option<Name>,\n+    pub id: NodeId,\n }\n \n pub type PathListItem = Spanned<PathListItem_>;"}, {"sha": "893d6708ead4b4993582017fb347a3e0150b88c7", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -2134,16 +2134,7 @@ impl<'a> State<'a> {\n                     self.print_path(path, false, 0)?;\n                     word(&mut self.s, \"::{\")?;\n                 }\n-                self.commasep(Inconsistent, &segments[..], |s, w| {\n-                    match w.node {\n-                        hir::PathListIdent { name, .. } => {\n-                            s.print_name(name)\n-                        }\n-                        hir::PathListMod { .. } => {\n-                            word(&mut s.s, \"self\")\n-                        }\n-                    }\n-                })?;\n+                self.commasep(Inconsistent, &segments[..], |s, w| s.print_name(w.node.name))?;\n                 word(&mut self.s, \"}\")\n             }\n         }"}, {"sha": "17bdac982d21aa6e00c871cf845713cb53cf6b5d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -294,7 +294,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn visit_path_list_item(&mut self, path: &hir::Path, item: &hir::PathListItem) {\n-        self.lookup_and_handle_definition(item.node.id());\n+        self.lookup_and_handle_definition(item.node.id);\n         intravisit::walk_path_list_item(self, path, item);\n     }\n }"}, {"sha": "6a57f510cdd9a2a94a80ba8b96f73d00b30504dd", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -631,7 +631,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n                                                      &Option<DeprecationEntry>)) {\n-    match tcx.expect_def(item.node.id()) {\n+    match tcx.expect_def(item.node.id) {\n         Def::PrimTy(..) => {}\n         def => {\n             maybe_do_stability_check(tcx, def.def_id(), item.span, cb);"}, {"sha": "1ec0bba5f5bcdfafe48434b806840092885a7c3e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -20,6 +20,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n use syntax::ast;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n+use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n@@ -392,13 +393,9 @@ impl LateLintPass for UnusedImportBraces {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n         if let hir::ItemUse(ref view_path) = item.node {\n             if let hir::ViewPathList(_, ref items) = view_path.node {\n-                if items.len() == 1 {\n-                    if let hir::PathListIdent {ref name, ..} = items[0].node {\n-                        let m = format!(\"braces around {} is unnecessary\",\n-                                        name);\n-                        cx.span_lint(UNUSED_IMPORT_BRACES, item.span,\n-                                     &m[..]);\n-                    }\n+                if items.len() == 1 && items[0].node.name != keywords::SelfValue.name() {\n+                    let msg = format!(\"braces around {} is unnecessary\", items[0].node.name);\n+                    cx.span_lint(UNUSED_IMPORT_BRACES, item.span, &msg);\n                 }\n             }\n         }"}, {"sha": "12c55b3ac172c9351501d636f9b7234b95007f3b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -32,9 +32,9 @@ use syntax::parse::token;\n \n use syntax::ast::{Block, Crate};\n use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n-use syntax::ast::{Mutability, PathListItemKind};\n-use syntax::ast::{StmtKind, TraitItemKind};\n+use syntax::ast::{Mutability, StmtKind, TraitItemKind};\n use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n+use syntax::parse::token::keywords;\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n@@ -130,9 +130,10 @@ impl<'b> Resolver<'b> {\n                     ViewPathList(_, ref source_items) => {\n                         // Make sure there's at most one `mod` import in the list.\n                         let mod_spans = source_items.iter().filter_map(|item| {\n-                            match item.node {\n-                                PathListItemKind::Mod { .. } => Some(item.span),\n-                                _ => None,\n+                            if item.node.name.name == keywords::SelfValue.name() {\n+                                Some(item.span)\n+                            } else {\n+                                None\n                             }\n                         }).collect::<Vec<Span>>();\n \n@@ -147,10 +148,12 @@ impl<'b> Resolver<'b> {\n                         }\n \n                         for source_item in source_items {\n-                            let (module_path, name, rename) = match source_item.node {\n-                                PathListItemKind::Ident { name, rename, .. } =>\n-                                    (module_path.clone(), name.name, rename.unwrap_or(name).name),\n-                                PathListItemKind::Mod { rename, .. } => {\n+                            let node = source_item.node;\n+                            let (module_path, name, rename) = {\n+                                if node.name.name != keywords::SelfValue.name() {\n+                                    let rename = node.rename.unwrap_or(node.name).name;\n+                                    (module_path.clone(), node.name.name, rename)\n+                                } else {\n                                     let name = match module_path.last() {\n                                         Some(name) => *name,\n                                         None => {\n@@ -164,12 +167,12 @@ impl<'b> Resolver<'b> {\n                                         }\n                                     };\n                                     let module_path = module_path.split_last().unwrap().1;\n-                                    let rename = rename.map(|i| i.name).unwrap_or(name);\n+                                    let rename = node.rename.map(|i| i.name).unwrap_or(name);\n                                     (module_path.to_vec(), name, rename)\n                                 }\n                             };\n                             let subclass = ImportDirectiveSubclass::single(rename, name);\n-                            let (span, id) = (source_item.span, source_item.node.id());\n+                            let (span, id) = (source_item.span, source_item.node.id);\n                             self.add_import_directive(module_path, subclass, span, id, vis);\n                         }\n                     }"}, {"sha": "bc923ba29ca475356bae86488580d516c736ecdc", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n \n                     ViewPathList(_, ref list) => {\n                         for i in list {\n-                            self.check_import(i.node.id(), i.span);\n+                            self.check_import(i.node.id, i.span);\n                         }\n                     }\n                     ViewPathGlob(_) => {"}, {"sha": "dbe956f021e4c3a90edc04d41231bd4fe28829ce", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -1102,18 +1102,11 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                     }\n                     ast::ViewPathList(ref path, ref list) => {\n                         for plid in list {\n-                            match plid.node {\n-                                ast::PathListItemKind::Ident { id, .. } => {\n-                                    let scope = self.cur_scope;\n-                                    if let Some(def_id) = self.lookup_type_ref(id) {\n-                                        self.process_def_kind(id,\n-                                                              plid.span,\n-                                                              Some(plid.span),\n-                                                              def_id,\n-                                                              scope);\n-                                    }\n-                                }\n-                                ast::PathListItemKind::Mod { .. } => (),\n+                            let scope = self.cur_scope;\n+                            let id = plid.node.id;\n+                            if let Some(def_id) = self.lookup_type_ref(id) {\n+                                let span = plid.span;\n+                                self.process_def_kind(id, span, Some(span), def_id, scope);\n                             }\n                         }\n "}, {"sha": "f66f15b238e73fd8eba05395546d54cad68b8cd3", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n                 }\n                 hir::ViewPathList(_, ref path_list) => {\n                     for path_item in path_list {\n-                        self.check_import(path_item.node.id(), path_item.span);\n+                        self.check_import(path_item.node.id, path_item.span);\n                     }\n                 }\n             }"}, {"sha": "61f7a9db3dd86e03a3d71b20a85f3981b5249865", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -2551,7 +2551,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 let remaining = if !denied {\n                     let mut remaining = vec![];\n                     for path in list {\n-                        match inline::try_inline(cx, path.node.id(), path.node.rename()) {\n+                        match inline::try_inline(cx, path.node.id, path.node.rename) {\n                             Some(items) => {\n                                 ret.extend(items);\n                             }\n@@ -2619,17 +2619,10 @@ pub struct ViewListIdent {\n \n impl Clean<ViewListIdent> for hir::PathListItem {\n     fn clean(&self, cx: &DocContext) -> ViewListIdent {\n-        match self.node {\n-            hir::PathListIdent { id, name, rename } => ViewListIdent {\n-                name: name.clean(cx),\n-                rename: rename.map(|r| r.clean(cx)),\n-                source: resolve_def(cx, id)\n-            },\n-            hir::PathListMod { id, rename } => ViewListIdent {\n-                name: \"self\".to_string(),\n-                rename: rename.map(|r| r.clean(cx)),\n-                source: resolve_def(cx, id)\n-            }\n+        ViewListIdent {\n+            name: self.node.name.clean(cx),\n+            rename: self.node.rename.map(|r| r.clean(cx)),\n+            source: resolve_def(cx, self.node.id)\n         }\n     }\n }"}, {"sha": "d2da97666af07be8b49d78b057e1ebf39d0b0f69", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             }\n             hir::ViewPathList(p, paths) => {\n                 let mine = paths.into_iter().filter(|path| {\n-                    !self.maybe_inline_local(path.node.id(), path.node.rename(),\n+                    !self.maybe_inline_local(path.node.id, path.node.rename,\n                                              false, om, please_inline)\n                 }).collect::<hir::HirVec<hir::PathListItem>>();\n "}, {"sha": "b7cbb1e17c045a74ceac92eb6284072473b267ae", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -1626,42 +1626,14 @@ pub struct Variant_ {\n pub type Variant = Spanned<Variant_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum PathListItemKind {\n-    Ident {\n-        name: Ident,\n-        /// renamed in list, e.g. `use foo::{bar as baz};`\n-        rename: Option<Ident>,\n-        id: NodeId\n-    },\n-    Mod {\n-        /// renamed in list, e.g. `use foo::{self as baz};`\n-        rename: Option<Ident>,\n-        id: NodeId\n-    }\n-}\n-\n-impl PathListItemKind {\n-    pub fn id(&self) -> NodeId {\n-        match *self {\n-            PathListItemKind::Ident { id, .. } | PathListItemKind::Mod { id, .. } => id\n-        }\n-    }\n-\n-    pub fn name(&self) -> Option<Ident> {\n-        match *self {\n-            PathListItemKind::Ident { name, .. } => Some(name),\n-            PathListItemKind::Mod { .. } => None,\n-        }\n-    }\n-\n-    pub fn rename(&self) -> Option<Ident> {\n-        match *self {\n-            PathListItemKind::Ident { rename, .. } | PathListItemKind::Mod { rename, .. } => rename\n-        }\n-    }\n+pub struct PathListItem_ {\n+    pub name: Ident,\n+    /// renamed in list, e.g. `use foo::{bar as baz};`\n+    pub rename: Option<Ident>,\n+    pub id: NodeId,\n }\n \n-pub type PathListItem = Spanned<PathListItemKind>;\n+pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n "}, {"sha": "5d22930c4d59c2a6fa6e9c9b302cd3fc9d348ff0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -1178,7 +1178,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn item_use_list(&self, sp: Span, vis: ast::Visibility,\n                      path: Vec<ast::Ident>, imports: &[ast::Ident]) -> P<ast::Item> {\n         let imports = imports.iter().map(|id| {\n-            let item = ast::PathListItemKind::Ident {\n+            let item = ast::PathListItem_ {\n                 name: *id,\n                 rename: None,\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "504883811e266ebd1bc7bd56633a3bf86f73d1b9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -307,18 +307,10 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n                 ViewPathList(fld.fold_path(path),\n                              path_list_idents.move_map(|path_list_ident| {\n                                 Spanned {\n-                                    node: match path_list_ident.node {\n-                                        PathListItemKind::Ident { id, name, rename } =>\n-                                            PathListItemKind::Ident {\n-                                                id: fld.new_id(id),\n-                                                rename: rename,\n-                                                name: name\n-                                            },\n-                                        PathListItemKind::Mod { id, rename } =>\n-                                            PathListItemKind::Mod {\n-                                                id: fld.new_id(id),\n-                                                rename: rename\n-                                            }\n+                                    node: PathListItem_ {\n+                                        id: fld.new_id(path_list_ident.node.id),\n+                                        rename: path_list_ident.node.rename,\n+                                        name: path_list_ident.node.name,\n                                     },\n                                     span: fld.new_span(path_list_ident.span)\n                                 }"}, {"sha": "d5d108084d6f937121de1a756068c1a4f29253da", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -6040,13 +6040,16 @@ impl<'a> Parser<'a> {\n                                  &token::CloseDelim(token::Brace),\n                                  SeqSep::trailing_allowed(token::Comma), |this| {\n             let lo = this.span.lo;\n-            let node = if this.eat_keyword(keywords::SelfValue) {\n-                let rename = this.parse_rename()?;\n-                ast::PathListItemKind::Mod { id: ast::DUMMY_NODE_ID, rename: rename }\n+            let ident = if this.eat_keyword(keywords::SelfValue) {\n+                keywords::SelfValue.ident()\n             } else {\n-                let ident = this.parse_ident()?;\n-                let rename = this.parse_rename()?;\n-                ast::PathListItemKind::Ident { name: ident, rename: rename, id: ast::DUMMY_NODE_ID }\n+                this.parse_ident()?\n+            };\n+            let rename = this.parse_rename()?;\n+            let node = ast::PathListItem_ {\n+                name: ident,\n+                rename: rename,\n+                id: ast::DUMMY_NODE_ID\n             };\n             let hi = this.last_span.hi;\n             Ok(spanned(lo, hi, node))"}, {"sha": "668bf89d3c6a175530dd8b42310ad287a7229d82", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -2879,26 +2879,13 @@ impl<'a> State<'a> {\n                     try!(word(&mut self.s, \"::{\"));\n                 }\n                 try!(self.commasep(Inconsistent, &idents[..], |s, w| {\n-                    match w.node {\n-                        ast::PathListItemKind::Ident { name, rename, .. } => {\n-                            try!(s.print_ident(name));\n-                            if let Some(ident) = rename {\n-                                try!(space(&mut s.s));\n-                                try!(s.word_space(\"as\"));\n-                                try!(s.print_ident(ident));\n-                            }\n-                            Ok(())\n-                        },\n-                        ast::PathListItemKind::Mod { rename, .. } => {\n-                            try!(word(&mut s.s, \"self\"));\n-                            if let Some(ident) = rename {\n-                                try!(space(&mut s.s));\n-                                try!(s.word_space(\"as\"));\n-                                try!(s.print_ident(ident));\n-                            }\n-                            Ok(())\n-                        }\n+                    try!(s.print_ident(w.node.name));\n+                    if let Some(ident) = w.node.rename {\n+                        try!(space(&mut s.s));\n+                        try!(s.word_space(\"as\"));\n+                        try!(s.print_ident(ident));\n                     }\n+                    Ok(())\n                 }));\n                 word(&mut self.s, \"}\")\n             }"}, {"sha": "1124a5414b86da2c6cf842eb4f604ea8fdd9c564", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f30173a017c7c5fdfb98697daa087fa5ce50c7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=37f30173a017c7c5fdfb98697daa087fa5ce50c7", "patch": "@@ -367,8 +367,8 @@ pub fn walk_path<V: Visitor>(visitor: &mut V, path: &Path) {\n }\n \n pub fn walk_path_list_item<V: Visitor>(visitor: &mut V, _prefix: &Path, item: &PathListItem) {\n-    walk_opt_ident(visitor, item.span, item.node.name());\n-    walk_opt_ident(visitor, item.span, item.node.rename());\n+    visitor.visit_ident(item.span, item.node.name);\n+    walk_opt_ident(visitor, item.span, item.node.rename);\n }\n \n pub fn walk_path_segment<V: Visitor>(visitor: &mut V, path_span: Span, segment: &PathSegment) {"}]}