{"sha": "faaec86ff0cf10dbd822a7abbeb381b3b5578141", "node_id": "C_kwDOAAsO6NoAKGZhYWVjODZmZjBjZjEwZGJkODIyYTdhYmJlYjM4MWIzYjU1NzgxNDE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-11T22:21:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T22:21:57Z"}, "message": "Merge #11964\n\n11964: internal: Show more project building errors to the user r=Veykril a=Veykril\n\nSomething very fishy is going on with the `rustc_workspace` handling, which caused this bug to only manifest in the `std` library but not other library crate... So there is either a bug there or just the fact that we seem to add duplicate dependencies (I think this is what we are doing with this right?) might be tripping something up somewhere.\r\n\r\ncc https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Rust-analyzer.20use.20inside.20stdlib\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4a1e3dba7fa58c1ec435d3ab5a5d17b5779626ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1e3dba7fa58c1ec435d3ab5a5d17b5779626ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faaec86ff0cf10dbd822a7abbeb381b3b5578141", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVKoFCRBK7hj4Ov3rIwAAxeQIAKg96qs+JV7GL7/IDc/aiYZn\n0XIlwOvtwcDTTe0UMbNxsZGwAJ/HzC6ILsMLZSd8IhpNHAQe6j9BvFjueSirOA06\nkRSnHNB6IqZIlNXYVYyf2HJJTkmygqQSGtmjgHYYhrknPpKwTO1fb/DCVZqx9Kup\nvv/CW1bgdZHkEEH65YFq7C5ns0JTjEVG0d0Uf87y/B8OTpqfJqCca+fhGYnBNluP\nO3fKwbIB/+t90LAk7DwRkpfneO0LsID8TmosAwWr3glFtF7gVPma9vVd0O4Fga71\nGKgX/vA2HI9AjJX1Y5nD79aqqwYCYcj63lBG4+28cl1e/meaJei6+c4cZNZjOBQ=\n=Yq7J\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a1e3dba7fa58c1ec435d3ab5a5d17b5779626ba\nparent 5d25d24d27abfaaa7b193eb00855bc8d7708ccdd\nparent 24af94b4748593dc7450b0c7d972d774c601e677\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649715717 +0000\ncommitter GitHub <noreply@github.com> 1649715717 +0000\n\nMerge #11964\n\n11964: internal: Show more project building errors to the user r=Veykril a=Veykril\n\nSomething very fishy is going on with the `rustc_workspace` handling, which caused this bug to only manifest in the `std` library but not other library crate... So there is either a bug there or just the fact that we seem to add duplicate dependencies (I think this is what we are doing with this right?) might be tripping something up somewhere.\r\n\r\ncc https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Rust-analyzer.20use.20inside.20stdlib\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faaec86ff0cf10dbd822a7abbeb381b3b5578141", "html_url": "https://github.com/rust-lang/rust/commit/faaec86ff0cf10dbd822a7abbeb381b3b5578141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faaec86ff0cf10dbd822a7abbeb381b3b5578141/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d25d24d27abfaaa7b193eb00855bc8d7708ccdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d25d24d27abfaaa7b193eb00855bc8d7708ccdd", "html_url": "https://github.com/rust-lang/rust/commit/5d25d24d27abfaaa7b193eb00855bc8d7708ccdd"}, {"sha": "24af94b4748593dc7450b0c7d972d774c601e677", "url": "https://api.github.com/repos/rust-lang/rust/commits/24af94b4748593dc7450b0c7d972d774c601e677", "html_url": "https://github.com/rust-lang/rust/commit/24af94b4748593dc7450b0c7d972d774c601e677"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "8c08fdcd2ea3814379b8bfba63a4cef6084240f4", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faaec86ff0cf10dbd822a7abbeb381b3b5578141/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faaec86ff0cf10dbd822a7abbeb381b3b5578141/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=faaec86ff0cf10dbd822a7abbeb381b3b5578141", "patch": "@@ -263,7 +263,7 @@ fn parse_macro_expansion(\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\");\n \n-        tracing::warn!(\n+        tracing::debug!(\n             \"fail on macro_parse: (reason: {:?} macro_call: {:#}) parents: {}\",\n             err,\n             node.value,"}, {"sha": "3ceb04693940be56d41e361671568f6adb591a53", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/faaec86ff0cf10dbd822a7abbeb381b3b5578141/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faaec86ff0cf10dbd822a7abbeb381b3b5578141/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=faaec86ff0cf10dbd822a7abbeb381b3b5578141", "patch": "@@ -663,6 +663,7 @@ fn cargo_to_crate_graph(\n                 load,\n                 &mut crate_graph,\n                 &cfg_options,\n+                override_cfg,\n                 load_proc_macro,\n                 &mut pkg_to_lib_crate,\n                 &public_deps,\n@@ -723,6 +724,7 @@ fn handle_rustc_crates(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     crate_graph: &mut CrateGraph,\n     cfg_options: &CfgOptions,\n+    override_cfg: &CfgOverrides,\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &SysrootPublicDeps,\n@@ -749,6 +751,28 @@ fn handle_rustc_crates(\n             for dep in &rustc_workspace[pkg].dependencies {\n                 queue.push_back(dep.pkg);\n             }\n+\n+            let mut cfg_options = cfg_options;\n+            let mut replaced_cfg_options;\n+\n+            let overrides = match override_cfg {\n+                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n+                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n+            };\n+\n+            if let Some(overrides) = overrides {\n+                // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n+                // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n+                // working on rust-lang/rust as that's the only time it appears outside sysroot).\n+                //\n+                // A more ideal solution might be to reanalyze crates based on where the cursor is and\n+                // figure out the set of cfgs that would have to apply to make it active.\n+\n+                replaced_cfg_options = cfg_options.clone();\n+                replaced_cfg_options.apply_diff(overrides.clone());\n+                cfg_options = &replaced_cfg_options;\n+            };\n+\n             for &tgt in rustc_workspace[pkg].targets.iter() {\n                 if rustc_workspace[tgt].kind != TargetKind::Lib {\n                     continue;"}, {"sha": "e305212165ca4c0fe1b5088d64967d13fe2a7933", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faaec86ff0cf10dbd822a7abbeb381b3b5578141/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faaec86ff0cf10dbd822a7abbeb381b3b5578141/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=faaec86ff0cf10dbd822a7abbeb381b3b5578141", "patch": "@@ -190,7 +190,7 @@ impl GlobalState {\n         // NOTE: don't count blocking select! call as a loop-turn time\n         let _p = profile::span(\"GlobalState::handle_event\");\n \n-        tracing::info!(\"handle_event({:?})\", event);\n+        tracing::debug!(\"handle_event({:?})\", event);\n         let task_queue_len = self.task_pool.handle.len();\n         if task_queue_len > 0 {\n             tracing::info!(\"task queue len: {}\", task_queue_len);"}]}