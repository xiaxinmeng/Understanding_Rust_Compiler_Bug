{"sha": "ca262fbab80dd74fd585544b9e6ce99e394dc573", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMjYyZmJhYjgwZGQ3NGZkNTg1NTQ0YjllNmNlOTllMzk0ZGM1NzM=", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2019-03-18T08:03:10Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2019-03-18T08:03:10Z"}, "message": "Only replace NamedFieldList and add test for preserving Self", "tree": {"sha": "cf9349e059db7b45dcc045901d2eada17cd04342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf9349e059db7b45dcc045901d2eada17cd04342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca262fbab80dd74fd585544b9e6ce99e394dc573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca262fbab80dd74fd585544b9e6ce99e394dc573", "html_url": "https://github.com/rust-lang/rust/commit/ca262fbab80dd74fd585544b9e6ce99e394dc573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca262fbab80dd74fd585544b9e6ce99e394dc573/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d47e004b806555a39151e3227a1cc6800eb77e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d47e004b806555a39151e3227a1cc6800eb77e9", "html_url": "https://github.com/rust-lang/rust/commit/8d47e004b806555a39151e3227a1cc6800eb77e9"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "90ce9c5775f8b9ea5791e303fda42c96c0c139c3", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ca262fbab80dd74fd585544b9e6ce99e394dc573/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca262fbab80dd74fd585544b9e6ce99e394dc573/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=ca262fbab80dd74fd585544b9e6ce99e394dc573", "patch": "@@ -3,39 +3,34 @@ use std::fmt::Write;\n use hir::{AdtDef, Ty, source_binder};\n use hir::db::HirDatabase;\n \n-use ra_syntax::ast::{self, AstNode, Expr};\n+use ra_syntax::ast::{self, AstNode};\n \n use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let struct_lit = ctx.node_at_offset::<ast::StructLit>()?;\n+    let named_field_list = struct_lit.named_field_list()?;\n \n     // If we already have existing struct fields, don't provide the assist.\n-    match struct_lit.named_field_list() {\n-        Some(named_field_list) if named_field_list.fields().count() > 0 => {\n-            return None;\n-        }\n-        _ => {}\n+    if named_field_list.fields().count() > 0 {\n+        return None;\n     }\n \n-    let expr: &Expr = struct_lit.into();\n     let function =\n         source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, struct_lit.syntax())?;\n \n     let infer_result = function.infer(ctx.db);\n     let source_map = function.body_source_map(ctx.db);\n-    let node_expr = source_map.node_expr(expr)?;\n+    let node_expr = source_map.node_expr(struct_lit.into())?;\n     let struct_lit_ty = infer_result[node_expr].clone();\n     let struct_def = match struct_lit_ty {\n         Ty::Adt { def_id: AdtDef::Struct(s), .. } => s,\n         _ => return None,\n     };\n \n-    let struct_name = struct_def.name(ctx.db)?;\n     let db = ctx.db;\n-\n     ctx.add_action(AssistId(\"fill_struct_fields\"), \"fill struct fields\", |edit| {\n-        let mut buf = format!(\"{} {{\\n\", struct_name);\n+        let mut buf = String::from(\"{\\n\");\n         let struct_fields = struct_def.fields(db);\n         for field in struct_fields {\n             let field_name = field.name(db).to_string();\n@@ -44,8 +39,8 @@ pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n         buf.push_str(\"}\");\n \n         edit.target(struct_lit.syntax().range());\n-        edit.set_cursor(expr.syntax().range().start());\n-        edit.replace_node_and_indent(struct_lit.syntax(), buf);\n+        edit.set_cursor(struct_lit.syntax().range().start());\n+        edit.replace_node_and_indent(named_field_list.syntax(), buf);\n     });\n \n     ctx.build()\n@@ -116,4 +111,41 @@ mod tests {\n             \"S {}\",\n         );\n     }\n+\n+    #[test]\n+    fn fill_struct_fields_preserve_self() {\n+        check_assist(\n+            fill_struct_fields,\n+            r#\"\n+            struct Foo {\n+                foo: u8,\n+                bar: String,\n+                baz: i128,\n+            }\n+\n+            impl Foo {\n+                pub fn new() -> Self {\n+                    Self <|>{}\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            struct Foo {\n+                foo: u8,\n+                bar: String,\n+                baz: i128,\n+            }\n+\n+            impl Foo {\n+                pub fn new() -> Self {\n+                    <|>Self {\n+                        foo: (),\n+                        bar: (),\n+                        baz: (),\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n }"}]}