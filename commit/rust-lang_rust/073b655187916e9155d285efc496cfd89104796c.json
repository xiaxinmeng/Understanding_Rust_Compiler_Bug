{"sha": "073b655187916e9155d285efc496cfd89104796c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2I2NTUxODc5MTZlOTE1NWQyODVlZmM0OTZjZmQ4OTEwNDc5NmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-09T08:17:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-09T08:17:41Z"}, "message": "std: Move byteswap functions to mem", "tree": {"sha": "72ab55665fbbf93ec91a4869e7952deb256817eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ab55665fbbf93ec91a4869e7952deb256817eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073b655187916e9155d285efc496cfd89104796c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073b655187916e9155d285efc496cfd89104796c", "html_url": "https://github.com/rust-lang/rust/commit/073b655187916e9155d285efc496cfd89104796c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073b655187916e9155d285efc496cfd89104796c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "html_url": "https://github.com/rust-lang/rust/commit/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "ec6a5c5cb9bc9939754c889958eea23bc66247f4", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -15,7 +15,6 @@ use std::libc;\n use std::mem;\n use std::rt::rtio;\n use std::sync::arc::UnsafeArc;\n-use std::unstable::intrinsics;\n \n use super::{IoResult, retry};\n use super::file::keep_going;\n@@ -28,10 +27,10 @@ use super::file::keep_going;\n #[cfg(unix)]    pub type sock_t = super::file::fd_t;\n \n pub fn htons(u: u16) -> u16 {\n-    intrinsics::to_be16(u as i16) as u16\n+    mem::to_be16(u as i16) as u16\n }\n pub fn ntohs(u: u16) -> u16 {\n-    intrinsics::from_be16(u as i16) as u16\n+    mem::from_be16(u as i16) as u16\n }\n \n enum InAddr {"}, {"sha": "1b3f5ec947d7f9dcce98154f0eefd9dd3878d054", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -22,7 +22,7 @@ use extra::hex::ToHex;\n /// format.\n fn write_u32_be(dst: &mut[u8], input: u32) {\n     use std::cast::transmute;\n-    use std::unstable::intrinsics::to_be32;\n+    use std::mem::to_be32;\n     assert!(dst.len() == 4);\n     unsafe {\n         let x: *mut i32 = transmute(dst.unsafe_mut_ref(0));\n@@ -33,7 +33,7 @@ fn write_u32_be(dst: &mut[u8], input: u32) {\n /// Read a vector of bytes into a vector of u32s. The values are read in big-endian format.\n fn read_u32v_be(dst: &mut[u32], input: &[u8]) {\n     use std::cast::transmute;\n-    use std::unstable::intrinsics::to_be32;\n+    use std::mem::to_be32;\n     assert!(dst.len() * 4 == input.len());\n     unsafe {\n         let mut x: *mut i32 = transmute(dst.unsafe_mut_ref(0));"}, {"sha": "87fadbba176f6bbf3206fb1c7fd533c9e1f2295e", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -17,7 +17,6 @@ use std::mem;\n use std::ptr;\n use std::rt::rtio;\n use std::rt::task::BlockedTask;\n-use std::unstable::intrinsics;\n \n use access::Access;\n use homing::{HomingIO, HomeHandle};\n@@ -33,8 +32,8 @@ use uvll;\n /// Generic functions related to dealing with sockaddr things\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub fn htons(u: u16) -> u16 { intrinsics::to_be16(u as i16) as u16 }\n-pub fn ntohs(u: u16) -> u16 { intrinsics::from_be16(u as i16) as u16 }\n+pub fn htons(u: u16) -> u16 { mem::to_be16(u as i16) as u16 }\n+pub fn ntohs(u: u16) -> u16 { mem::from_be16(u as i16) as u16 }\n \n pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n                         len: uint) -> ip::SocketAddr {"}, {"sha": "f08f943306fcf5a10d163d2f87a38a722ada64bd", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -132,7 +132,7 @@ pub mod reader {\n \n     pub fn vuint_at(data: &[u8], start: uint) -> Res {\n         use std::ptr::offset;\n-        use std::unstable::intrinsics::from_be32;\n+        use std::mem::from_be32;\n \n         if data.len() - start < 4 {\n             return vuint_at_slow(data, start);"}, {"sha": "240f4c65501dc29fe024be036abe50c7692a2133", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -51,7 +51,7 @@ impl<'r, R: Reader> Iterator<u8> for Bytes<'r, R> {\n }\n \n pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n-    use unstable::intrinsics::{to_le16, to_le32, to_le64};\n+    use mem::{to_le16, to_le32, to_le64};\n     use cast::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_le* intrinsics\n@@ -77,7 +77,7 @@ pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n }\n \n pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n-    use unstable::intrinsics::{to_be16, to_be32, to_be64};\n+    use mem::{to_be16, to_be32, to_be64};\n     use cast::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_be* intrinsics\n@@ -105,7 +105,7 @@ pub fn u64_from_be_bytes(data: &[u8],\n                          size: uint)\n                       -> u64 {\n     use ptr::{copy_nonoverlapping_memory, offset, mut_offset};\n-    use unstable::intrinsics::from_be64;\n+    use mem::from_be64;\n     use vec::MutableVector;\n \n     assert!(size <= 8u);"}, {"sha": "c7425d5b2b727a0583558d5e36be25aec680b058", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -10,7 +10,10 @@\n \n //! Functions relating to memory layout\n \n+#[allow(missing_doc)]; // FIXME\n+\n use unstable::intrinsics;\n+use unstable::intrinsics::{bswap16, bswap32, bswap64};\n \n /// Returns the size of a type\n #[inline]\n@@ -91,6 +94,34 @@ pub unsafe fn move_val_init<T>(dst: &mut T, src: T) {\n     intrinsics::move_val_init(dst, src)\n }\n \n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be64(x: i64) -> i64 { x }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n+\n \n #[cfg(test)]\n mod tests {"}, {"sha": "105236b5f4c732d84bb82d8bb3316ec99e7b2466", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -439,33 +439,6 @@ extern \"rust-intrinsic\" {\n     pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n }\n \n-#[cfg(target_endian = \"little\")] #[inline] pub fn to_le16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn to_le32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn to_le64(x: i64) -> i64 { x }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-\n-#[cfg(target_endian = \"little\")] #[inline] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be64(x: i64) -> i64 { x }\n-\n-#[cfg(target_endian = \"little\")] #[inline] pub fn from_le16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn from_le32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn from_le64(x: i64) -> i64 { x }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-\n-#[cfg(target_endian = \"little\")] #[inline] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"little\")] #[inline] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n \n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and"}, {"sha": "36b267c7eb74173b3a405b1cff3f2f6541bd8897", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/073b655187916e9155d285efc496cfd89104796c/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b655187916e9155d285efc496cfd89104796c/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=073b655187916e9155d285efc496cfd89104796c", "patch": "@@ -203,7 +203,7 @@ impl Uuid {\n     /// * `d3` A 16-bit word\n     /// * `d4` Array of 8 octets\n     pub fn from_fields(d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Uuid {\n-        use std::unstable::intrinsics::{to_be16, to_be32};\n+        use std::mem::{to_be16, to_be32};\n \n         // First construct a temporary field-based struct\n         let mut fields = UuidFields {\n@@ -329,7 +329,7 @@ impl Uuid {\n     ///\n     /// Example: `550e8400-e29b-41d4-a716-446655440000`\n     pub fn to_hyphenated_str(&self) -> ~str {\n-        use std::unstable::intrinsics::{to_be16, to_be32};\n+        use std::mem::{to_be16, to_be32};\n         // Convert to field-based struct as it matches groups in output.\n         // Ensure fields are in network byte order, as per RFC.\n         let mut uf: UuidFields;"}]}