{"sha": "cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZTFlMzMwYjVhNTYzMmYzMTFiYjRiNDU2MTliMWE4ZDAyODc4ZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-27T21:39:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-27T21:39:38Z"}, "message": "Rollup merge of #70434 - Centril:fix-34421, r=estebank\n\nsuggest `;` on expr `mac!()` which is good as stmt `mac!()`\n\nFixes https://github.com/rust-lang/rust/issues/34421 by implementing @jseyfried's suggestion in https://github.com/rust-lang/rust/issues/34421#issuecomment-301578683.\n\nr? @petrochenkov", "tree": {"sha": "95cc73dc489da12f7feaa2dd03e4d5616e0b5392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95cc73dc489da12f7feaa2dd03e4d5616e0b5392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefnKaCRBK7hj4Ov3rIwAAdHIIAA3/hFEFbtexxTZ7s0EBDfbA\nwESL8Sq2jyyz+zyh8UdOke5hAognd2vPNqjrJOjLTXY0z71xV9VxLLV395vDwYWq\ni+vTm7MJ8VsFuMu/0eOK1BT9TgkN5WLhUNHxvA7KBXOjKiJVcKh46bSziiQOj0j0\n6F3/lY6d8FK67Ej3HTb6J2FgnPr39Tsw/KeqTPpmVbep0WHUCyxVtKxUePZqcA3k\n6SdIhC5c9u1hFhRLwi6mJfeOCMEAvPJTDpj2u1/8nYN4R6k0WHe4NweZp5gPIwWo\nDFu/FoLNnnsn/zKukg6S4HNqomYeq2aqjEo3uaQgDVLdmU8A0AGXwOC+Pb4NhLQ=\n=qsf3\n-----END PGP SIGNATURE-----\n", "payload": "tree 95cc73dc489da12f7feaa2dd03e4d5616e0b5392\nparent 08e867cc3a30f8fb3339cfcc3dbb4daff6da3dcc\nparent 6c643a070c1f725159e626697f13b45b72f23069\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585345178 +0100\ncommitter GitHub <noreply@github.com> 1585345178 +0100\n\nRollup merge of #70434 - Centril:fix-34421, r=estebank\n\nsuggest `;` on expr `mac!()` which is good as stmt `mac!()`\n\nFixes https://github.com/rust-lang/rust/issues/34421 by implementing @jseyfried's suggestion in https://github.com/rust-lang/rust/issues/34421#issuecomment-301578683.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "html_url": "https://github.com/rust-lang/rust/commit/cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e867cc3a30f8fb3339cfcc3dbb4daff6da3dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e867cc3a30f8fb3339cfcc3dbb4daff6da3dcc", "html_url": "https://github.com/rust-lang/rust/commit/08e867cc3a30f8fb3339cfcc3dbb4daff6da3dcc"}, {"sha": "6c643a070c1f725159e626697f13b45b72f23069", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c643a070c1f725159e626697f13b45b72f23069", "html_url": "https://github.com/rust-lang/rust/commit/6c643a070c1f725159e626697f13b45b72f23069"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "0e70fdbd9c146f1657a3c05190b53d0b611d9e96", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "patch": "@@ -86,6 +86,7 @@ fn suggest_slice_pat(e: &mut DiagnosticBuilder<'_>, site_span: Span, parser: &Pa\n fn emit_frag_parse_err(\n     mut e: DiagnosticBuilder<'_>,\n     parser: &Parser<'_>,\n+    orig_parser: &mut Parser<'_>,\n     site_span: Span,\n     macro_ident: ast::Ident,\n     arm_span: Span,\n@@ -118,6 +119,21 @@ fn emit_frag_parse_err(\n         AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n             suggest_slice_pat(&mut e, site_span, parser);\n         }\n+        // Try a statement if an expression is wanted but failed and suggest adding `;` to call.\n+        AstFragmentKind::Expr => match parse_ast_fragment(orig_parser, AstFragmentKind::Stmts) {\n+            Err(mut err) => err.cancel(),\n+            Ok(_) => {\n+                e.note(\n+                    \"the macro call doesn't expand to an expression, but it can expand to a statement\",\n+                );\n+                e.span_suggestion_verbose(\n+                    site_span.shrink_to_hi(),\n+                    \"add `;` to interpret the expansion as a statement\",\n+                    \";\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        },\n         _ => annotate_err_with_kind(&mut e, kind, site_span),\n     };\n     e.emit();\n@@ -126,10 +142,11 @@ fn emit_frag_parse_err(\n impl<'a> ParserAnyMacro<'a> {\n     crate fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n+        let snapshot = &mut parser.clone();\n         let fragment = match parse_ast_fragment(parser, kind) {\n             Ok(f) => f,\n             Err(err) => {\n-                emit_frag_parse_err(err, parser, site_span, macro_ident, arm_span, kind);\n+                emit_frag_parse_err(err, parser, snapshot, site_span, macro_ident, arm_span, kind);\n                 return kind.dummy(site_span);\n             }\n         };"}, {"sha": "d78139365549a546b5093dff80615b87e1dea043", "filename": "src/test/ui/macros/issue-34421-mac-expr-bad-stmt-good-add-semi.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.rs?ref=cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "patch": "@@ -0,0 +1,15 @@\n+macro_rules! make_item {\n+    ($a:ident) => {\n+        struct $a;\n+    }; //~^ ERROR expected expression\n+       //~| ERROR expected expression\n+}\n+\n+fn a() {\n+    make_item!(A)\n+}\n+fn b() {\n+    make_item!(B)\n+}\n+\n+fn main() {}"}, {"sha": "c8d69640071c686dfefb088ad76cfb3be05cf824", "filename": "src/test/ui/macros/issue-34421-mac-expr-bad-stmt-good-add-semi.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.stderr?ref=cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "patch": "@@ -0,0 +1,34 @@\n+error: expected expression, found keyword `struct`\n+  --> $DIR/issue-34421-mac-expr-bad-stmt-good-add-semi.rs:3:9\n+   |\n+LL |         struct $a;\n+   |         ^^^^^^ expected expression\n+...\n+LL |     make_item!(A)\n+   |     ------------- in this macro invocation\n+   |\n+   = note: the macro call doesn't expand to an expression, but it can expand to a statement\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: add `;` to interpret the expansion as a statement\n+   |\n+LL |     make_item!(A);\n+   |                  ^\n+\n+error: expected expression, found keyword `struct`\n+  --> $DIR/issue-34421-mac-expr-bad-stmt-good-add-semi.rs:3:9\n+   |\n+LL |         struct $a;\n+   |         ^^^^^^ expected expression\n+...\n+LL |     make_item!(B)\n+   |     ------------- in this macro invocation\n+   |\n+   = note: the macro call doesn't expand to an expression, but it can expand to a statement\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: add `;` to interpret the expansion as a statement\n+   |\n+LL |     make_item!(B);\n+   |                  ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8f9660963937f9cb2a795cf8d6bdcf7f00514493", "filename": "src/test/ui/macros/macro-in-expression-context-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfe1e330b5a5632f311bb4b45619b1a8d02878ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr?ref=cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! empty { () => () }\n ...\n LL |         _ => { empty!() }\n    |                ^^^^^^^^ expected expression\n+   |\n+   = note: the macro call doesn't expand to an expression, but it can expand to a statement\n+help: add `;` to interpret the expansion as a statement\n+   |\n+LL |         _ => { empty!(); }\n+   |                        ^\n \n error: aborting due to previous error\n "}]}