{"sha": "fc82376bc437d4494832b171d924e2f116174578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjODIzNzZiYzQzN2Q0NDk0ODMyYjE3MWQ5MjRlMmYxMTYxNzQ1Nzg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T23:43:17Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:10:16Z"}, "message": "Make QueryAccessor::dep_kind an associated const.", "tree": {"sha": "8d18af9e9f11a75a08ed6d7ddad5319aef09d492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d18af9e9f11a75a08ed6d7ddad5319aef09d492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc82376bc437d4494832b171d924e2f116174578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc82376bc437d4494832b171d924e2f116174578", "html_url": "https://github.com/rust-lang/rust/commit/fc82376bc437d4494832b171d924e2f116174578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc82376bc437d4494832b171d924e2f116174578/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf5cae489e828a6678cab5144e638ae909d7b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf5cae489e828a6678cab5144e638ae909d7b93", "html_url": "https://github.com/rust-lang/rust/commit/0bf5cae489e828a6678cab5144e638ae909d7b93"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "5a05acc90e43fe4e629d4371a9ea2434f652ac3c", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc82376bc437d4494832b171d924e2f116174578/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc82376bc437d4494832b171d924e2f116174578/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=fc82376bc437d4494832b171d924e2f116174578", "patch": "@@ -28,6 +28,7 @@ pub trait QueryConfig<'tcx> {\n pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     const ANON: bool;\n     const EVAL_ALWAYS: bool;\n+    const DEP_KIND: DepKind;\n \n     type Cache: QueryCache<Self::Key, Self::Value>;\n \n@@ -38,8 +39,6 @@ pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n \n     fn to_dep_node(tcx: TyCtxt<'tcx>, key: &Self::Key) -> DepNode;\n \n-    fn dep_kind() -> DepKind;\n-\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value;\n "}, {"sha": "603c4fd9b72c365afca6d17eb2383f2d7e6acac5", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc82376bc437d4494832b171d924e2f116174578/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc82376bc437d4494832b171d924e2f116174578/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=fc82376bc437d4494832b171d924e2f116174578", "patch": "@@ -154,7 +154,7 @@ impl<'tcx, Q: QueryDescription<'tcx>> JobOwner<'tcx, Q> {\n                         };\n \n                         // Create the id of the job we're waiting for\n-                        let id = QueryJobId::new(job.id, lookup.shard, Q::dep_kind());\n+                        let id = QueryJobId::new(job.id, lookup.shard, Q::DEP_KIND);\n \n                         (job.latch(id), _query_blocked_prof_timer)\n                     }\n@@ -169,7 +169,7 @@ impl<'tcx, Q: QueryDescription<'tcx>> JobOwner<'tcx, Q> {\n                 lock.jobs = id;\n                 let id = QueryShardJobId(NonZeroU32::new(id).unwrap());\n \n-                let global_id = QueryJobId::new(id, lookup.shard, Q::dep_kind());\n+                let global_id = QueryJobId::new(id, lookup.shard, Q::DEP_KIND);\n \n                 let job = tls::with_related_context(tcx, |icx| QueryJob::new(id, span, icx.query));\n \n@@ -498,7 +498,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n                 self.start_query(job.id, diagnostics, |tcx| {\n-                    tcx.dep_graph.with_anon_task(Q::dep_kind(), || Q::compute(tcx, key))\n+                    tcx.dep_graph.with_anon_task(Q::DEP_KIND, || Q::compute(tcx, key))\n                 })\n             });\n \n@@ -873,7 +873,7 @@ macro_rules! define_queries_inner {\n                                     job: job.id,\n                                     shard:  u16::try_from(shard_id).unwrap(),\n                                     kind:\n-                                        <queries::$name<'tcx> as QueryAccessors<'tcx>>::dep_kind(),\n+                                        <queries::$name<'tcx> as QueryAccessors<'tcx>>::DEP_KIND,\n                                 };\n                                 let info = QueryInfo {\n                                     span: job.span,\n@@ -961,6 +961,7 @@ macro_rules! define_queries_inner {\n         impl<$tcx> QueryAccessors<$tcx> for queries::$name<$tcx> {\n             const ANON: bool = is_anon!([$($modifiers)*]);\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n+            const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$node;\n \n             type Cache = query_storage!([$($modifiers)*][$K, $V]);\n \n@@ -980,11 +981,6 @@ macro_rules! define_queries_inner {\n                 DepConstructor::$node(tcx, *key)\n             }\n \n-            #[inline(always)]\n-            fn dep_kind() -> dep_graph::DepKind {\n-                dep_graph::DepKind::$node\n-            }\n-\n             #[inline]\n             fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 let provider = tcx.queries.providers.get(key.query_crate())"}]}