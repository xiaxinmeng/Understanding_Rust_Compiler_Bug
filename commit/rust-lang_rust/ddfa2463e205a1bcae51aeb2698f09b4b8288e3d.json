{"sha": "ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "node_id": "C_kwDOAAsO6NoAKGRkZmEyNDYzZTIwNWExYmNhZTUxYWViMjY5OGYwOWI0YjgyODhlM2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-24T19:09:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-21T21:34:59Z"}, "message": "Evaluate place expression in `PlaceMention`.", "tree": {"sha": "487800ef8affe998dcbe5672d3f2f471e2a054f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487800ef8affe998dcbe5672d3f2f471e2a054f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "html_url": "https://github.com/rust-lang/rust/commit/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409661936f929b254ffc8adb644cf35d1f9765c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/409661936f929b254ffc8adb644cf35d1f9765c4", "html_url": "https://github.com/rust-lang/rust/commit/409661936f929b254ffc8adb644cf35d1f9765c4"}], "stats": {"total": 178, "additions": 159, "deletions": 19}, "files": [{"sha": "6259722b6940f1d3f2de5a2f34989e087e856a2a", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -52,12 +52,16 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n \n+        // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n+        // contain dangling references.\n+        PlaceContext::NonUse(NonUseContext::PlaceMention) |\n+        PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n+\n         PlaceContext::MutatingUse(MutatingUseContext::AddressOf) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) |\n-        PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n         PlaceContext::MutatingUse(MutatingUseContext::Retag) =>\n             Some(DefUse::Use),\n \n@@ -72,8 +76,6 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         PlaceContext::MutatingUse(MutatingUseContext::Drop) =>\n             Some(DefUse::Drop),\n \n-        // This statement exists to help unsafeck. It does not require the place to be live.\n-        PlaceContext::NonUse(NonUseContext::PlaceMention) => None,\n         // Debug info is neither def nor use.\n         PlaceContext::NonUse(NonUseContext::VarDebugInfo) => None,\n "}, {"sha": "06986f848bfeb75331abea476e244364dd2deb32", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -79,7 +79,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n             // Only relevant for mir typeck\n             StatementKind::AscribeUserType(..)\n-            // Only relevant for unsafeck\n+            // Only relevant for liveness and unsafeck\n             | StatementKind::PlaceMention(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)"}, {"sha": "5bf3e7632ac21d7dce301fbf51cf39a3bb51a969", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -665,7 +665,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             }\n             // Only relevant for mir typeck\n             StatementKind::AscribeUserType(..)\n-            // Only relevant for unsafeck\n+            // Only relevant for liveness and unsafeck\n             | StatementKind::PlaceMention(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)"}, {"sha": "f9c15c505137f9980dcfbc23a5972e687436a00c", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -113,8 +113,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Intrinsic(box intrinsic) => self.emulate_nondiverging_intrinsic(intrinsic)?,\n \n-            // Statements we do not track.\n-            PlaceMention(..) | AscribeUserType(..) => {}\n+            // Evaluate the place expression, without reading from it.\n+            PlaceMention(box place) => {\n+                let _ = self.eval_place(*place)?;\n+            }\n+\n+            // This exists purely to guide borrowck lifetime inference, and does not have\n+            // an operational effect.\n+            AscribeUserType(..) => {}\n \n             // Currently, Miri discards Coverage statements. Coverage statements are only injected\n             // via an optional compile time MIR pass and have no side effects. Since Coverage"}, {"sha": "303c120f795cf332dce7e11fe64c5de7de558c06", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -331,7 +331,8 @@ pub enum StatementKind<'tcx> {\n     /// This is especially useful for `let _ = PLACE;` bindings that desugar to a single\n     /// `PlaceMention(PLACE)`.\n     ///\n-    /// When executed at runtime this is a nop.\n+    /// When executed at runtime, this computes the given place, but then discards\n+    /// it without doing a load. It is UB if the place is not pointing to live memory.\n     ///\n     /// Disallowed after drop elaboration.\n     PlaceMention(Box<Place<'tcx>>),"}, {"sha": "35ce89c79864997d89152fe2c6152b2038debc27", "filename": "src/tools/clippy/tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -25,7 +25,7 @@ fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n     let _ = string.map_or(0, |s| s.len());\n     let _ = num.as_ref().map_or(&0, |s| s);\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });\n@@ -34,7 +34,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         s += 1;\n         s\n     });\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });"}, {"sha": "c8683e5aae2d0a2fa298f6c62982442bb0cced67", "filename": "src/tools/clippy/tests/ui/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -33,7 +33,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n     let _ = if let Some(ref s) = num { s } else { &0 };\n     let _ = if let Some(mut s) = num {\n@@ -46,7 +46,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n }\n "}, {"sha": "f5e4affb67229cd8019736e61b54381a76158b5a", "filename": "src/tools/clippy/tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -30,13 +30,13 @@ LL |       let _ = if let Some(s) = &mut num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });\n@@ -76,13 +76,13 @@ LL |       let _ = if let Some(ref mut s) = num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });"}, {"sha": "3b2aba67a686c92b2501ebd85d82114514883082", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref_underscore.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -0,0 +1,11 @@\n+// Make sure we find these even with many checks disabled.\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+\n+fn main() {\n+    let p = {\n+        let b = Box::new(42);\n+        &*b as *const i32\n+    };\n+    let _ = unsafe { *p }; //~ ERROR: dereferenced after this allocation got freed\n+    panic!(\"this should never print\");\n+}"}, {"sha": "e047c3287b558ddf12531b9b5511c15b9d848bc6", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref_underscore.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dangling_pointer_deref_underscore.rs:LL:CC\n+   |\n+LL |     let _ = unsafe { *p };\n+   |                      ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/dangling_pointer_deref_underscore.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "835cd20798f06b413dc2a6eb49a43b8bdc05012c", "filename": "tests/ui/borrowck/let_underscore_temporary.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// check-fail\n \n fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n     let _ = if let Some(s) = *string { s.len() } else { 0 };\n@@ -8,6 +8,7 @@ fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n         s\n     } else {\n         &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n     };\n     let _ = if let Some(ref s) = num { s } else { &0 };\n     let _ = if let Some(mut s) = num {\n@@ -21,6 +22,33 @@ fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n         s\n     } else {\n         &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n+    };\n+}\n+\n+fn let_ascribe(string: &Option<&str>, mut num: Option<i32>) {\n+    let _: _ = if let Some(s) = *string { s.len() } else { 0 };\n+    let _: _ = if let Some(s) = &num { s } else { &0 };\n+    let _: _ = if let Some(s) = &mut num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n+    };\n+    let _: _ = if let Some(ref s) = num { s } else { &0 };\n+    let _: _ = if let Some(mut s) = num {\n+        s += 1;\n+        s\n+    } else {\n+        0\n+    };\n+    let _: _ = if let Some(ref mut s) = num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n     };\n }\n "}, {"sha": "74f3598c4d001fc9159a102300520d6f6f68c042", "filename": "tests/ui/borrowck/let_underscore_temporary.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.stderr?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -0,0 +1,79 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:10:14\n+   |\n+LL |       let _ = if let Some(s) = &mut num {\n+   |  _____________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:24:14\n+   |\n+LL |       let _ = if let Some(ref mut s) = num {\n+   |  _____________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:36:14\n+   |\n+LL |       let _: _ = if let Some(s) = &mut num {\n+   |  ________________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:50:14\n+   |\n+LL |       let _: _ = if let Some(ref mut s) = num {\n+   |  ________________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "c825cc8d668659a2a584fd29ff3eb536e6e36aff", "filename": "tests/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "patch": "@@ -25,8 +25,6 @@ LL |     };\n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:31:25\n    |\n-LL |     let (_tx, rx) = {\n-   |          --- borrow later used here\n LL |         let x = 1;\n    |             - binding `x` declared here\n LL |         let (tx, rx) = mpsc::channel();"}]}