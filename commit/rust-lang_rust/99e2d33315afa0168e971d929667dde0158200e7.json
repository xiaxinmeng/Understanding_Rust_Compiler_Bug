{"sha": "99e2d33315afa0168e971d929667dde0158200e7", "node_id": "C_kwDOAAsO6NoAKDk5ZTJkMzMzMTVhZmEwMTY4ZTk3MWQ5Mjk2NjdkZGUwMTU4MjAwZTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-29T18:15:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-03T16:42:04Z"}, "message": "Compute `object_lifetime_default` per parameter.", "tree": {"sha": "69f942a9d02081a34c214df877ed8c0e63bdc9f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f942a9d02081a34c214df877ed8c0e63bdc9f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e2d33315afa0168e971d929667dde0158200e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e2d33315afa0168e971d929667dde0158200e7", "html_url": "https://github.com/rust-lang/rust/commit/99e2d33315afa0168e971d929667dde0158200e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e2d33315afa0168e971d929667dde0158200e7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "236ccce79e71020350b8e2d7a263807f02eb6e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/236ccce79e71020350b8e2d7a263807f02eb6e8e", "html_url": "https://github.com/rust-lang/rust/commit/236ccce79e71020350b8e2d7a263807f02eb6e8e"}], "stats": {"total": 177, "additions": 68, "deletions": 109}, "files": [{"sha": "14a28cf7d3f89a7303d5ab90a9f078fa968c7bc7", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -199,6 +199,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     codegen_fn_attrs => { table }\n     impl_trait_ref => { table }\n     const_param_default => { table }\n+    object_lifetime_default => { table }\n     thir_abstract_const => { table }\n     optimized_mir => { table }\n     mir_for_ctfe => { table }"}, {"sha": "50a309f8785cbecf472051bd7231fec79f120a31", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -1044,6 +1044,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     record_array!(self.tables.inferred_outlives_of[def_id] <- inferred_outlives);\n                 }\n             }\n+            if let DefKind::TyParam | DefKind::ConstParam = def_kind {\n+                if let Some(default) = self.tcx.object_lifetime_default(def_id) {\n+                    record!(self.tables.object_lifetime_default[def_id] <- default);\n+                }\n+            }\n             if let DefKind::Trait | DefKind::TraitAlias = def_kind {\n                 record!(self.tables.super_predicates_of[def_id] <- self.tcx.super_predicates_of(def_id));\n             }"}, {"sha": "2f3493d1b19d1f5d5877d122a5122ac1800f7e94", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -16,6 +16,7 @@ use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n+use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::mir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n@@ -357,6 +358,7 @@ define_tables! {\n     codegen_fn_attrs: Table<DefIndex, LazyValue<CodegenFnAttrs>>,\n     impl_trait_ref: Table<DefIndex, LazyValue<ty::TraitRef<'static>>>,\n     const_param_default: Table<DefIndex, LazyValue<rustc_middle::ty::Const<'static>>>,\n+    object_lifetime_default: Table<DefIndex, LazyValue<ObjectLifetimeDefault>>,\n     optimized_mir: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     promoted_mir: Table<DefIndex, LazyValue<IndexVec<mir::Promoted, mir::Body<'static>>>>,"}, {"sha": "ff296116a1ff66341cff2b988490b1f866d0fed5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -1579,8 +1579,9 @@ rustc_queries! {\n     /// for each parameter if a trait object were to be passed for that parameter.\n     /// For example, for `struct Foo<'a, T, U>`, this would be `['static, 'static]`.\n     /// For `struct Foo<'a, T: 'a, U>`, this would instead be `['a, 'static]`.\n-    query object_lifetime_defaults(_: LocalDefId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n-        desc { \"looking up lifetime defaults for a region on an item\" }\n+    query object_lifetime_default(key: DefId) -> Option<ObjectLifetimeDefault> {\n+        desc { \"looking up lifetime defaults for generic parameter `{:?}`\", key }\n+        separate_provide_extern\n     }\n     query late_bound_vars_map(_: LocalDefId)\n         -> Option<&'tcx FxHashMap<ItemLocalId, Vec<ty::BoundVariableKind>>> {"}, {"sha": "d6a55af51e5238975669126332d222c5692cc50f", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -1,4 +1,3 @@\n-use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::ty;\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::EarlyBinder;\n@@ -13,7 +12,7 @@ use super::{EarlyBoundRegion, InstantiatedPredicates, ParamConst, ParamTy, Predi\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum GenericParamDefKind {\n     Lifetime,\n-    Type { has_default: bool, object_lifetime_default: ObjectLifetimeDefault, synthetic: bool },\n+    Type { has_default: bool, synthetic: bool },\n     Const { has_default: bool },\n }\n "}, {"sha": "067ad927a0358b8193e929b4836a6e23679e8aa3", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -53,6 +53,7 @@ trivially_parameterized_over_tcx! {\n     crate::metadata::ModChild,\n     crate::middle::codegen_fn_attrs::CodegenFnAttrs,\n     crate::middle::exported_symbols::SymbolExportInfo,\n+    crate::middle::resolve_lifetime::ObjectLifetimeDefault,\n     crate::mir::ConstQualifs,\n     ty::Generics,\n     ty::ImplPolarity,"}, {"sha": "33ab2e12eddcaaa62b6f4b654c9d414823e1d44d", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_hir::{MethodKind, Target};\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n@@ -171,6 +172,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::no_implicit_prelude => {\n                     self.check_generic_attr(hir_id, attr, target, &[Target::Mod])\n                 }\n+                sym::rustc_object_lifetime_default => {\n+                    self.check_object_lifetime_default(hir_id, span)\n+                }\n                 _ => {}\n             }\n \n@@ -402,6 +406,30 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Debugging aid for `object_lifetime_default` query.\n+    fn check_object_lifetime_default(&self, hir_id: HirId, span: Span) {\n+        let tcx = self.tcx;\n+        if let Some(generics) = tcx.hir().get_generics(tcx.hir().local_def_id(hir_id)) {\n+            let object_lifetime_default_reprs: String = generics\n+                .params\n+                .iter()\n+                .filter_map(|p| {\n+                    let param_id = tcx.hir().local_def_id(p.hir_id);\n+                    let default = tcx.object_lifetime_default(param_id)?;\n+                    Some(match default {\n+                        ObjectLifetimeDefault::Empty => \"BaseDefault\".to_owned(),\n+                        ObjectLifetimeDefault::Static => \"'static\".to_owned(),\n+                        ObjectLifetimeDefault::Param(def_id) => tcx.item_name(def_id).to_string(),\n+                        ObjectLifetimeDefault::Ambiguous => \"Ambiguous\".to_owned(),\n+                    })\n+                })\n+                .collect::<Vec<String>>()\n+                .join(\",\");\n+\n+            tcx.sess.span_err(span, &object_lifetime_default_reprs);\n+        }\n+    }\n+\n     /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n     fn check_track_caller(\n         &self,"}, {"sha": "52980f15971cc9ba2a6f32ff13eb467d406b1983", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 24, "deletions": 84, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -18,11 +18,10 @@ use rustc_middle::bug;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n-use rustc_middle::ty::{self, GenericParamDefKind, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n-use std::borrow::Cow;\n use std::fmt;\n \n trait RegionExt {\n@@ -290,7 +289,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n         named_region_map: |tcx, id| resolve_lifetimes_for(tcx, id).defs.get(&id),\n         is_late_bound_map,\n-        object_lifetime_defaults,\n+        object_lifetime_default,\n         late_bound_vars_map: |tcx, id| resolve_lifetimes_for(tcx, id).late_bound_vars.get(&id),\n \n         ..*providers\n@@ -1264,87 +1263,36 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n }\n \n-fn object_lifetime_defaults<'tcx>(\n+fn object_lifetime_default<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-) -> Option<&'tcx [ObjectLifetimeDefault]> {\n-    let hir::Node::Item(item) = tcx.hir().get_by_def_id(def_id) else { return None; };\n-    match item.kind {\n-        hir::ItemKind::Struct(_, ref generics)\n-        | hir::ItemKind::Union(_, ref generics)\n-        | hir::ItemKind::Enum(_, ref generics)\n-        | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-            ref generics,\n-            origin: hir::OpaqueTyOrigin::TyAlias,\n-            ..\n-        })\n-        | hir::ItemKind::TyAlias(_, ref generics)\n-        | hir::ItemKind::Trait(_, _, ref generics, ..) => {\n-            let result = object_lifetime_defaults_for_item(tcx, generics);\n-\n-            // Debugging aid.\n-            let attrs = tcx.hir().attrs(item.hir_id());\n-            if tcx.sess.contains_name(attrs, sym::rustc_object_lifetime_default) {\n-                let object_lifetime_default_reprs: String = result\n-                    .iter()\n-                    .map(|set| match *set {\n-                        ObjectLifetimeDefault::Empty => \"BaseDefault\".into(),\n-                        ObjectLifetimeDefault::Static => \"'static\".into(),\n-                        ObjectLifetimeDefault::Param(def_id) => {\n-                            let def_id = def_id.expect_local();\n-                            tcx.hir().ty_param_name(def_id).to_string().into()\n-                        }\n-                        ObjectLifetimeDefault::Ambiguous => \"Ambiguous\".into(),\n-                    })\n-                    .collect::<Vec<Cow<'static, str>>>()\n-                    .join(\",\");\n-                tcx.sess.span_err(item.span, &object_lifetime_default_reprs);\n-            }\n-\n-            Some(result)\n-        }\n-        _ => None,\n-    }\n-}\n-\n-/// Scan the bounds and where-clauses on parameters to extract bounds\n-/// of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n-/// for each type parameter.\n-fn object_lifetime_defaults_for_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    generics: &hir::Generics<'_>,\n-) -> &'tcx [ObjectLifetimeDefault] {\n-    fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::GenericBound<'_>]) {\n-        for bound in bounds {\n-            if let hir::GenericBound::Outlives(ref lifetime) = *bound {\n-                set.insert(lifetime.name.normalize_to_macros_2_0());\n-            }\n-        }\n-    }\n-\n-    let process_param = |param: &hir::GenericParam<'_>| match param.kind {\n+    param_def_id: DefId,\n+) -> Option<ObjectLifetimeDefault> {\n+    let param_def_id = param_def_id.expect_local();\n+    let parent_def_id = tcx.local_parent(param_def_id);\n+    let generics = tcx.hir().get_generics(parent_def_id)?;\n+    let param_hir_id = tcx.local_def_id_to_hir_id(param_def_id);\n+    let param = generics.params.iter().find(|p| p.hir_id == param_hir_id)?;\n+\n+    // Scan the bounds and where-clauses on parameters to extract bounds\n+    // of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n+    // for each type parameter.\n+    match param.kind {\n         GenericParamKind::Lifetime { .. } => None,\n         GenericParamKind::Type { .. } => {\n             let mut set = Set1::Empty;\n \n-            let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-            for predicate in generics.predicates {\n-                // Look for `type: ...` where clauses.\n-                let hir::WherePredicate::BoundPredicate(ref data) = *predicate else { continue };\n-\n+            // Look for `type: ...` where clauses.\n+            for bound in generics.bounds_for_param(param_def_id) {\n                 // Ignore `for<'a> type: ...` as they can change what\n                 // lifetimes mean (although we could \"just\" handle it).\n-                if !data.bound_generic_params.is_empty() {\n+                if !bound.bound_generic_params.is_empty() {\n                     continue;\n                 }\n \n-                let res = match data.bounded_ty.kind {\n-                    hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => path.res,\n-                    _ => continue,\n-                };\n-\n-                if res == Res::Def(DefKind::TyParam, param_def_id.to_def_id()) {\n-                    add_bounds(&mut set, &data.bounds);\n+                for bound in bound.bounds {\n+                    if let hir::GenericBound::Outlives(ref lifetime) = *bound {\n+                        set.insert(lifetime.name.normalize_to_macros_2_0());\n+                    }\n                 }\n             }\n \n@@ -1364,9 +1312,7 @@ fn object_lifetime_defaults_for_item<'tcx>(\n             // in an arbitrary order.\n             Some(ObjectLifetimeDefault::Empty)\n         }\n-    };\n-\n-    tcx.arena.alloc_from_iter(generics.params.iter().filter_map(process_param))\n+    }\n }\n \n impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n@@ -1744,13 +1690,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             generics\n                 .params\n                 .iter()\n-                .filter_map(|param| match param.kind {\n-                    GenericParamDefKind::Type { object_lifetime_default, .. } => {\n-                        Some(object_lifetime_default)\n-                    }\n-                    GenericParamDefKind::Const { .. } => Some(ObjectLifetimeDefault::Empty),\n-                    GenericParamDefKind::Lifetime => None,\n-                })\n+                .filter_map(|param| self.tcx.object_lifetime_default(param.def_id))\n                 .map(set_to_region)\n                 .collect()\n         });"}, {"sha": "0ec2acafd07ff39fcd5cae9f06bdcaa3512a950d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e2d33315afa0168e971d929667dde0158200e7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=99e2d33315afa0168e971d929667dde0158200e7", "patch": "@@ -34,7 +34,6 @@ use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n-use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -1598,7 +1597,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n-                            object_lifetime_default: ObjectLifetimeDefault::Empty,\n                             synthetic: false,\n                         },\n                     });\n@@ -1642,8 +1640,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         kind: ty::GenericParamDefKind::Lifetime,\n     }));\n \n-    let object_lifetime_defaults = tcx.object_lifetime_defaults(hir_id.owner);\n-\n     // Now create the real type and const parameters.\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n@@ -1668,13 +1664,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 }\n             }\n \n-            let kind = ty::GenericParamDefKind::Type {\n-                has_default: default.is_some(),\n-                object_lifetime_default: object_lifetime_defaults\n-                    .as_ref()\n-                    .map_or(ObjectLifetimeDefault::Empty, |o| o[i]),\n-                synthetic,\n-            };\n+            let kind = ty::GenericParamDefKind::Type { has_default: default.is_some(), synthetic };\n \n             let param_def = ty::GenericParamDef {\n                 index: type_start + i as u32,\n@@ -1726,11 +1716,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             name: Symbol::intern(arg),\n             def_id,\n             pure_wrt_drop: false,\n-            kind: ty::GenericParamDefKind::Type {\n-                has_default: false,\n-                object_lifetime_default: ObjectLifetimeDefault::Empty,\n-                synthetic: false,\n-            },\n+            kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n         }));\n     }\n \n@@ -1743,11 +1729,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 name: Symbol::intern(\"<const_ty>\"),\n                 def_id,\n                 pure_wrt_drop: false,\n-                kind: ty::GenericParamDefKind::Type {\n-                    has_default: false,\n-                    object_lifetime_default: ObjectLifetimeDefault::Empty,\n-                    synthetic: false,\n-                },\n+                kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n             });\n         }\n     }"}]}