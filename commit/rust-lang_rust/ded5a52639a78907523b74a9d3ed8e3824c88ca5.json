{"sha": "ded5a52639a78907523b74a9d3ed8e3824c88ca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZDVhNTI2MzlhNzg5MDc1MjNiNzRhOWQzZWQ4ZTM4MjRjODhjYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-14T08:00:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-14T08:00:51Z"}, "message": "Auto merge of #1174 - RalfJung:rusutp, r=RalfJung\n\nRustup", "tree": {"sha": "75372601c104538df1ab40bc554321393ddc8398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75372601c104538df1ab40bc554321393ddc8398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded5a52639a78907523b74a9d3ed8e3824c88ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded5a52639a78907523b74a9d3ed8e3824c88ca5", "html_url": "https://github.com/rust-lang/rust/commit/ded5a52639a78907523b74a9d3ed8e3824c88ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded5a52639a78907523b74a9d3ed8e3824c88ca5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49aafadfb870f172a14e3428a5e05d57d27fb080", "url": "https://api.github.com/repos/rust-lang/rust/commits/49aafadfb870f172a14e3428a5e05d57d27fb080", "html_url": "https://github.com/rust-lang/rust/commit/49aafadfb870f172a14e3428a5e05d57d27fb080"}, {"sha": "a61596d3332c9b2103404d6ee4f0b47fd6d569a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61596d3332c9b2103404d6ee4f0b47fd6d569a5", "html_url": "https://github.com/rust-lang/rust/commit/a61596d3332c9b2103404d6ee4f0b47fd6d569a5"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "a0f512a7270013fd8a25f0533f25b877ff1f20e1", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded5a52639a78907523b74a9d3ed8e3824c88ca5/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ded5a52639a78907523b74a9d3ed8e3824c88ca5/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ded5a52639a78907523b74a9d3ed8e3824c88ca5", "patch": "@@ -1 +1 @@\n-2d2be570970d784db5539a1d309cd22b85be910a\n+21ed50522ddb998f5367229984a4510af578899f"}, {"sha": "5d933fe8a7f607657b001a7da76340b91b5e819b", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ded5a52639a78907523b74a9d3ed8e3824c88ca5", "patch": "@@ -219,7 +219,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     fn assert_panic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         span: Span,\n-        msg: &AssertMessage<'tcx>,\n+        msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         ecx.assert_panic(span, msg, unwind)"}, {"sha": "8860b949fe94246c861c294d0b908e925b227041", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=ded5a52639a78907523b74a9d3ed8e3824c88ca5", "patch": "@@ -105,7 +105,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n         let offset = offset\n             .checked_mul(pointee_size)\n-            .ok_or_else(|| err_panic!(Overflow(mir::BinOp::Mul)))?;\n+            .ok_or_else(|| err_ub_format!(\"overflow during offset comutation for inbounds pointer arithmetic\"))?;\n         // We do this first, to rule out overflows.\n         let offset_ptr = ptr.ptr_signed_offset(offset, self)?;\n         // What we need to check is that starting at `min(ptr, offset_ptr)`,"}, {"sha": "4a1d62d3567e89ed452ad70bfd46ab42b2a23cc8", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ded5a52639a78907523b74a9d3ed8e3824c88ca5", "patch": "@@ -177,7 +177,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let items = this.read_scalar(args[0])?.to_machine_usize(this)?;\n                 let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n                 let size =\n-                    items.checked_mul(len).ok_or_else(|| err_panic!(Overflow(mir::BinOp::Mul)))?;\n+                    items.checked_mul(len).ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n                 let res = this.malloc(size, /*zero_init:*/ true, MiriMemoryKind::C);\n                 this.write_scalar(res, dest)?;\n             }"}, {"sha": "880932ae0472256c0046e2abe70ab475a8ef28a2", "filename": "src/shims/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5a52639a78907523b74a9d3ed8e3824c88ca5/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=ded5a52639a78907523b74a9d3ed8e3824c88ca5", "patch": "@@ -153,10 +153,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn assert_panic(\n         &mut self,\n         span: Span,\n-        msg: &AssertMessage<'tcx>,\n+        msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        use rustc::mir::interpret::PanicInfo::*;\n+        use rustc::mir::AssertKind::*;\n         let this = self.eval_context_mut();\n \n         match msg {"}]}