{"sha": "37d7de337903a558dbeb1e82c844fe915ab8ff25", "node_id": "C_kwDOAAsO6NoAKDM3ZDdkZTMzNzkwM2E1NThkYmViMWU4MmM4NDRmZTkxNWFiOGZmMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T10:38:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-12T10:38:31Z"}, "message": "Auto merge of #105252 - bjorn3:codegen_less_pair_values, r=nagisa\n\nUse struct types during codegen in less places\n\nThis makes it easier to use cg_ssa from a backend like Cranelift that doesn't have any struct types at all. After this PR struct types are still used for function arguments and return values. Removing those usages is harder but should still be doable.", "tree": {"sha": "d4919a64af3b34d516f096975fb26454240aeaa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4919a64af3b34d516f096975fb26454240aeaa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25", "html_url": "https://github.com/rust-lang/rust/commit/37d7de337903a558dbeb1e82c844fe915ab8ff25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a", "html_url": "https://github.com/rust-lang/rust/commit/2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a"}, {"sha": "262ace528425e6e22ccc0a5afd6321a566ab18d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/262ace528425e6e22ccc0a5afd6321a566ab18d7", "html_url": "https://github.com/rust-lang/rust/commit/262ace528425e6e22ccc0a5afd6321a566ab18d7"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "effb2de4827518c08360bed61995f5ffe3c86a58", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -1119,18 +1119,18 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n-        let field1 = self.context.new_field(None, self.u8_type.make_pointer(), \"landing_pad_field_1\");\n-        let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n-        let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n-        self.current_func().new_local(None, struct_type.as_type(), \"landing_pad\")\n-            .to_rvalue()\n+    fn cleanup_landing_pad(&mut self, _pers_fn: RValue<'gcc>) -> (RValue<'gcc>, RValue<'gcc>) {\n+        (\n+            self.current_func().new_local(None, self.u8_type.make_pointer(), \"landing_pad0\")\n+                .to_rvalue(),\n+            self.current_func().new_local(None, self.i32_type, \"landing_pad1\").to_rvalue(),\n+        )\n         // TODO(antoyo): Properly implement unwinding.\n         // the above is just to make the compilation work as it seems\n         // rustc_codegen_ssa now calls the unwinding builder methods even on panic=abort.\n     }\n \n-    fn resume(&mut self, _exn: RValue<'gcc>) {\n+    fn resume(&mut self, _exn0: RValue<'gcc>, _exn1: RValue<'gcc>) {\n         // TODO(bjorn3): Properly implement unwinding.\n         self.unreachable();\n     }"}, {"sha": "853a8b82853f43400a223804c629bd7b0b9c0e75", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -979,15 +979,20 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn cleanup_landing_pad(&mut self, ty: &'ll Type, pers_fn: &'ll Value) -> &'ll Value {\n+    fn cleanup_landing_pad(&mut self, pers_fn: &'ll Value) -> (&'ll Value, &'ll Value) {\n+        let ty = self.type_struct(&[self.type_i8p(), self.type_i32()], false);\n         let landing_pad = self.landing_pad(ty, pers_fn, 1 /* FIXME should this be 0? */);\n         unsafe {\n             llvm::LLVMSetCleanup(landing_pad, llvm::True);\n         }\n-        landing_pad\n+        (self.extract_value(landing_pad, 0), self.extract_value(landing_pad, 1))\n     }\n \n-    fn resume(&mut self, exn: &'ll Value) {\n+    fn resume(&mut self, exn0: &'ll Value, exn1: &'ll Value) {\n+        let ty = self.type_struct(&[self.type_i8p(), self.type_i32()], false);\n+        let mut exn = self.const_undef(ty);\n+        exn = self.insert_value(exn, exn0, 0);\n+        exn = self.insert_value(exn, exn1, 1);\n         unsafe {\n             llvm::LLVMBuildResume(self.llbuilder, exn);\n         }"}, {"sha": "907517bf6ce950b148bed7f1916c847d0b80c5bd", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -424,7 +424,9 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n         typeid: &'ll Value,\n     ) -> Self::Value {\n         let vtable_byte_offset = self.const_i32(vtable_byte_offset as i32);\n-        self.call_intrinsic(\"llvm.type.checked.load\", &[llvtable, vtable_byte_offset, typeid])\n+        let type_checked_load =\n+            self.call_intrinsic(\"llvm.type.checked.load\", &[llvtable, vtable_byte_offset, typeid]);\n+        self.extract_value(type_checked_load, 0)\n     }\n \n     fn va_start(&mut self, va_list: &'ll Value) -> &'ll Value {"}, {"sha": "d96ca921f1f4d90d931a01c5945e1c9dd584728b", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -31,8 +31,7 @@ impl<'a, 'tcx> VirtualIndex {\n             let typeid =\n                 bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)));\n             let vtable_byte_offset = self.0 * bx.data_layout().pointer_size.bytes();\n-            let type_checked_load = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n-            let func = bx.extract_value(type_checked_load, 0);\n+            let func = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n             bx.pointercast(func, llty)\n         } else {\n             let ptr_align = bx.tcx().data_layout.pointer_align.abi;"}, {"sha": "58dfd17fb363546dfcd17a386e653a1165e52bea", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -289,16 +289,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             bx.cleanup_ret(funclet, None);\n         } else {\n             let slot = self.get_personality_slot(bx);\n-            let lp0 = slot.project_field(bx, 0);\n-            let lp0 = bx.load_operand(lp0).immediate();\n-            let lp1 = slot.project_field(bx, 1);\n-            let lp1 = bx.load_operand(lp1).immediate();\n+            let exn0 = slot.project_field(bx, 0);\n+            let exn0 = bx.load_operand(exn0).immediate();\n+            let exn1 = slot.project_field(bx, 1);\n+            let exn1 = bx.load_operand(exn1).immediate();\n             slot.storage_dead(bx);\n \n-            let mut lp = bx.const_undef(self.landing_pad_type());\n-            lp = bx.insert_value(lp, lp0, 0);\n-            lp = bx.insert_value(lp, lp1, 1);\n-            bx.resume(lp);\n+            bx.resume(exn0, exn1);\n         }\n     }\n \n@@ -1636,24 +1633,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let mut cleanup_bx = Bx::build(self.cx, cleanup_llbb);\n \n             let llpersonality = self.cx.eh_personality();\n-            let llretty = self.landing_pad_type();\n-            let lp = cleanup_bx.cleanup_landing_pad(llretty, llpersonality);\n+            let (exn0, exn1) = cleanup_bx.cleanup_landing_pad(llpersonality);\n \n             let slot = self.get_personality_slot(&mut cleanup_bx);\n             slot.storage_live(&mut cleanup_bx);\n-            Pair(cleanup_bx.extract_value(lp, 0), cleanup_bx.extract_value(lp, 1))\n-                .store(&mut cleanup_bx, slot);\n+            Pair(exn0, exn1).store(&mut cleanup_bx, slot);\n \n             cleanup_bx.br(llbb);\n             cleanup_llbb\n         }\n     }\n \n-    fn landing_pad_type(&self) -> Bx::Type {\n-        let cx = self.cx;\n-        cx.type_struct(&[cx.type_i8p(), cx.type_i32()], false)\n-    }\n-\n     fn unreachable_block(&mut self) -> Bx::BasicBlock {\n         self.unreachable_block.unwrap_or_else(|| {\n             let llbb = Bx::append_block(self.cx, self.llfn, \"unreachable\");\n@@ -1673,8 +1663,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             self.set_debug_loc(&mut bx, mir::SourceInfo::outermost(self.mir.span));\n \n             let llpersonality = self.cx.eh_personality();\n-            let llretty = self.landing_pad_type();\n-            bx.cleanup_landing_pad(llretty, llpersonality);\n+            bx.cleanup_landing_pad(llpersonality);\n \n             let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicNoUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);"}, {"sha": "23196c8cbaea1ebf4f3d9c9e9d82ab681d9aa5b6", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 assert!(bx.cx().tcx().is_static(def_id));\n                 let static_ = bx.get_static(def_id);\n                 let layout = bx.layout_of(bx.cx().tcx().static_ptr_ty(def_id));\n-                OperandRef::from_immediate_or_packed_pair(bx, static_, layout)\n+                OperandRef { val: OperandValue::Immediate(static_), layout }\n             }\n             mir::Rvalue::Use(ref operand) => self.codegen_operand(bx, operand),\n             mir::Rvalue::Repeat(..) | mir::Rvalue::Aggregate(..) => {"}, {"sha": "194768d946674e4ae28c1a1bf7abb352def8dd63", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d7de337903a558dbeb1e82c844fe915ab8ff25/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=37d7de337903a558dbeb1e82c844fe915ab8ff25", "patch": "@@ -271,8 +271,8 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn set_personality_fn(&mut self, personality: Self::Value);\n \n     // These are used by everyone except msvc\n-    fn cleanup_landing_pad(&mut self, ty: Self::Type, pers_fn: Self::Value) -> Self::Value;\n-    fn resume(&mut self, exn: Self::Value);\n+    fn cleanup_landing_pad(&mut self, pers_fn: Self::Value) -> (Self::Value, Self::Value);\n+    fn resume(&mut self, exn0: Self::Value, exn1: Self::Value);\n \n     // These are used only by msvc\n     fn cleanup_pad(&mut self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;"}]}