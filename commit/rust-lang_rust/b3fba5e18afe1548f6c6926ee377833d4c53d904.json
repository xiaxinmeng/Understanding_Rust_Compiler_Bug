{"sha": "b3fba5e18afe1548f6c6926ee377833d4c53d904", "node_id": "C_kwDOAAsO6NoAKGIzZmJhNWUxOGFmZTE1NDhmNmM2OTI2ZWUzNzc4MzNkNGM1M2Q5MDQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-10T20:19:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T18:39:44Z"}, "message": "Remove unnecessary code and account for turbofish suggestion\n\nRemove previously existing fallback that tried to give a good turbofish\nsuggestion, `need_type_info` is already good enough.\n\nSpecial case `::<Vec<_>` suggestion for `Iterator::collect`.", "tree": {"sha": "a38124936f89fb07ee9c9dfce1cd165811624ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38124936f89fb07ee9c9dfce1cd165811624ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3fba5e18afe1548f6c6926ee377833d4c53d904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3fba5e18afe1548f6c6926ee377833d4c53d904", "html_url": "https://github.com/rust-lang/rust/commit/b3fba5e18afe1548f6c6926ee377833d4c53d904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3fba5e18afe1548f6c6926ee377833d4c53d904/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "html_url": "https://github.com/rust-lang/rust/commit/9d5e7d3c042f73153cf8f009400569ff9e8e12a8"}], "stats": {"total": 130, "additions": 43, "deletions": 87}, "files": [{"sha": "41e7a0608afbfb056ff343ce51bc5eb6aba887a0", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b3fba5e18afe1548f6c6926ee377833d4c53d904/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3fba5e18afe1548f6c6926ee377833d4c53d904/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b3fba5e18afe1548f6c6926ee377833d4c53d904", "patch": "@@ -461,33 +461,39 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     parent_name,\n                 });\n \n-                let args = fmt_printer(self, Namespace::TypeNS)\n-                    .comma_sep(generic_args.iter().copied().map(|arg| {\n-                        if arg.is_suggestable(self.tcx, true) {\n-                            return arg;\n-                        }\n+                let args = if self.infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn)\n+                    == Some(generics_def_id)\n+                {\n+                    \"Vec<_>\".to_string()\n+                } else {\n+                    fmt_printer(self, Namespace::TypeNS)\n+                        .comma_sep(generic_args.iter().copied().map(|arg| {\n+                            if arg.is_suggestable(self.tcx, true) {\n+                                return arg;\n+                            }\n \n-                        match arg.unpack() {\n-                            GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n-                            GenericArgKind::Type(_) => self\n-                                .next_ty_var(TypeVariableOrigin {\n-                                    span: rustc_span::DUMMY_SP,\n-                                    kind: TypeVariableOriginKind::MiscVariable,\n-                                })\n-                                .into(),\n-                            GenericArgKind::Const(arg) => self\n-                                .next_const_var(\n-                                    arg.ty(),\n-                                    ConstVariableOrigin {\n+                            match arg.unpack() {\n+                                GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n+                                GenericArgKind::Type(_) => self\n+                                    .next_ty_var(TypeVariableOrigin {\n                                         span: rustc_span::DUMMY_SP,\n-                                        kind: ConstVariableOriginKind::MiscVariable,\n-                                    },\n-                                )\n-                                .into(),\n-                        }\n-                    }))\n-                    .unwrap()\n-                    .into_buffer();\n+                                        kind: TypeVariableOriginKind::MiscVariable,\n+                                    })\n+                                    .into(),\n+                                GenericArgKind::Const(arg) => self\n+                                    .next_const_var(\n+                                        arg.ty(),\n+                                        ConstVariableOrigin {\n+                                            span: rustc_span::DUMMY_SP,\n+                                            kind: ConstVariableOriginKind::MiscVariable,\n+                                        },\n+                                    )\n+                                    .into(),\n+                            }\n+                        }))\n+                        .unwrap()\n+                        .into_buffer()\n+                };\n \n                 if !have_turbofish {\n                     infer_subdiags.push(SourceKindSubdiag::GenericSuggestion {"}, {"sha": "28351d5ff882313d49e8af5073edc6306b40d4df", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 54, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b3fba5e18afe1548f6c6926ee377833d4c53d904/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3fba5e18afe1548f6c6926ee377833d4c53d904/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b3fba5e18afe1548f6c6926ee377833d4c53d904", "patch": "@@ -42,7 +42,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::sym;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use std::iter;\n@@ -2198,60 +2198,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n                 }\n \n-                if let ObligationCauseCode::ItemObligation(def_id) | ObligationCauseCode::ExprItemObligation(def_id, ..) = *obligation.cause.code() {\n-                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n-                } else if let Ok(snippet) = &self.tcx.sess.source_map().span_to_snippet(span)\n-                    && let ObligationCauseCode::BindingObligation(def_id, _) | ObligationCauseCode::ExprBindingObligation(def_id, ..)\n-                        = *obligation.cause.code()\n+                if let ObligationCauseCode::ItemObligation(def_id)\n+                | ObligationCauseCode::ExprItemObligation(def_id, ..) = *obligation.cause.code()\n                 {\n-                    let generics = self.tcx.generics_of(def_id);\n-                    if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n-                        && !snippet.ends_with('>')\n-                        && !generics.has_impl_trait()\n-                        && !self.tcx.is_fn_trait(def_id)\n-                    {\n-                        // FIXME: To avoid spurious suggestions in functions where type arguments\n-                        // where already supplied, we check the snippet to make sure it doesn't\n-                        // end with a turbofish. Ideally we would have access to a `PathSegment`\n-                        // instead. Otherwise we would produce the following output:\n-                        //\n-                        // error[E0283]: type annotations needed\n-                        //   --> $DIR/issue-54954.rs:3:24\n-                        //    |\n-                        // LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-                        //    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-                        //    |                        |\n-                        //    |                        cannot infer type\n-                        //    |                        help: consider specifying the type argument\n-                        //    |                        in the function call:\n-                        //    |                        `Tt::const_val::<[i8; 123]>::<T>`\n-                        // ...\n-                        // LL |     const fn const_val<T: Sized>() -> usize {\n-                        //    |                        - required by this bound in `Tt::const_val`\n-                        //    |\n-                        //    = note: cannot satisfy `_: Tt`\n-\n-                        // Clear any more general suggestions in favor of our specific one\n-                        err.clear_suggestions();\n-\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_hi(),\n-                            &format!(\n-                                \"consider specifying the type argument{} in the function call\",\n-                                pluralize!(generics.params.len()),\n-                            ),\n-                            format!(\n-                                \"::<{}>\",\n-                                generics\n-                                    .params\n-                                    .iter()\n-                                    .map(|p| p.name.to_string())\n-                                    .collect::<Vec<String>>()\n-                                    .join(\", \")\n-                            ),\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n+                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 }\n \n                 if let (Some(body_id), Some(ty::subst::GenericArgKind::Type(_))) ="}, {"sha": "fa4b91cacef7261c169b3692128daa38199f88af", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3fba5e18afe1548f6c6926ee377833d4c53d904/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3fba5e18afe1548f6c6926ee377833d4c53d904/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=b3fba5e18afe1548f6c6926ee377833d4c53d904", "patch": "@@ -59,7 +59,7 @@ note: required by a bound in `bfnr`\n    |\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n    |                              ^^^^ required by this bound in `bfnr`\n-help: consider specifying the type arguments in the function call\n+help: consider specifying the generic arguments\n    |\n LL |     bfnr::<U, V, W>(x);\n    |         +++++++++++"}, {"sha": "9be18286480113cb04682887824884706c221faf", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3fba5e18afe1548f6c6926ee377833d4c53d904/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3fba5e18afe1548f6c6926ee377833d4c53d904/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=b3fba5e18afe1548f6c6926ee377833d4c53d904", "patch": "@@ -10,10 +10,10 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n    |                 ^^^^^^^ required by this bound in `foo`\n-help: consider specifying the type arguments in the function call\n+help: consider giving `foo` an explicit type, where the type for type parameter `W` is specified\n    |\n-LL |     let foo = foo::<T, K, W, Z>(1, \"\");\n-   |                  ++++++++++++++\n+LL |     let foo: Foo<i32, &str, W, Z> = foo(1, \"\");\n+   |            ++++++++++++++++++++++\n \n error[E0283]: type annotations needed for `Bar<i32, &str, Z>`\n   --> $DIR/erase-type-params-in-label.rs:5:9\n@@ -27,10 +27,10 @@ note: required by a bound in `bar`\n    |\n LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n    |                 ^^^^^^^ required by this bound in `bar`\n-help: consider specifying the type arguments in the function call\n+help: consider giving `bar` an explicit type, where the type for type parameter `Z` is specified\n    |\n-LL |     let bar = bar::<T, K, Z>(1, \"\");\n-   |                  +++++++++++\n+LL |     let bar: Bar<i32, &str, Z> = bar(1, \"\");\n+   |            +++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "87bba3166be6a3cde426e54f1b4f57c8023bd791", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3fba5e18afe1548f6c6926ee377833d4c53d904/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3fba5e18afe1548f6c6926ee377833d4c53d904/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=b3fba5e18afe1548f6c6926ee377833d4c53d904", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n    |           ^^^^^^^^^^^^ required by this bound in `foo`\n-help: consider specifying the type argument in the function call\n+help: consider specifying the generic argument\n    |\n LL |     foo::<T>(42);\n    |        +++++"}]}