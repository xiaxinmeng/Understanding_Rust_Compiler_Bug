{"sha": "7a7b853120f84c90702802b96cfdb243a08d4cc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2I4NTMxMjBmODRjOTA3MDI4MDJiOTZjZmRiMjQzYTA4ZDRjYzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-26T12:43:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-28T20:46:56Z"}, "message": "adjust for rustc changes", "tree": {"sha": "27c9151e26792528042ac96cc583afc5353a42d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27c9151e26792528042ac96cc583afc5353a42d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7b853120f84c90702802b96cfdb243a08d4cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7b853120f84c90702802b96cfdb243a08d4cc0", "html_url": "https://github.com/rust-lang/rust/commit/7a7b853120f84c90702802b96cfdb243a08d4cc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7b853120f84c90702802b96cfdb243a08d4cc0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c930e48e139767f16871e1a1e99316a04e0403d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c930e48e139767f16871e1a1e99316a04e0403d", "html_url": "https://github.com/rust-lang/rust/commit/3c930e48e139767f16871e1a1e99316a04e0403d"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "dc43c65240962551cdba7cf959ab09f55d709990", "filename": "src/fn_call.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a7b853120f84c90702802b96cfdb243a08d4cc0/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7b853120f84c90702802b96cfdb243a08d4cc0/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=7a7b853120f84c90702802b96cfdb243a08d4cc0", "patch": "@@ -607,11 +607,12 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n                 let dtor = match this.read_scalar(args[1])?.not_undef()? {\n                     Scalar::Ptr(dtor_ptr) => Some(this.memory().get_fn(dtor_ptr)?),\n-                    Scalar::Bits { bits: 0, size } => {\n+                    Scalar::Raw { data: 0, size } => {\n+                        // NULL pointer\n                         assert_eq!(size as u64, this.memory().pointer_size().bytes());\n                         None\n                     },\n-                    Scalar::Bits { .. } => return err!(ReadBytesAsPointer),\n+                    Scalar::Raw { .. } => return err!(ReadBytesAsPointer),\n                 };\n \n                 // Figure out how large a pthread TLS key actually is."}, {"sha": "28d0d7c960959cd870bb0345527229ce064bf22a", "filename": "src/operator.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a7b853120f84c90702802b96cfdb243a08d4cc0/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7b853120f84c90702802b96cfdb243a08d4cc0/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=7a7b853120f84c90702802b96cfdb243a08d4cc0", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n     ) -> EvalResult<'tcx, bool> {\n         let size = self.pointer_size();\n         Ok(match (left, right) {\n-            (Scalar::Bits { .. }, Scalar::Bits { .. }) =>\n+            (Scalar::Raw { .. }, Scalar::Raw { .. }) =>\n                 left.to_bits(size)? == right.to_bits(size)?,\n             (Scalar::Ptr(left), Scalar::Ptr(right)) => {\n                 // Comparison illegal if one of them is out-of-bounds, *unless* they\n@@ -165,10 +165,10 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 }\n             }\n             // Comparing ptr and integer.\n-            (Scalar::Ptr(ptr), Scalar::Bits { bits, size }) |\n-            (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n+            (Scalar::Ptr(ptr), Scalar::Raw { data, size }) |\n+            (Scalar::Raw { data, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n-                let bits = bits as u64;\n+                let bits = data as u64;\n \n                 // Case I: Comparing real pointers with \"small\" integers.\n                 // Really we should only do this for NULL, but pragmatically speaking on non-bare-metal systems,\n@@ -262,7 +262,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).\n                     (value << shift) >> shift\n                 };\n-                let ptr_size = self.memory().pointer_size().bytes() as u8;\n+                let ptr_size = self.memory().pointer_size();\n                 trace!(\"ptr BitAnd, align {}, operand {:#010x}, base_mask {:#010x}\",\n                     ptr_base_align, right, base_mask);\n                 if right & base_mask == base_mask {\n@@ -278,7 +278,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     )\n                 } else if right & base_mask == 0 {\n                     // Case 2: the base address bits are all taken away, i.e., right is all-0 there.\n-                    (Scalar::Bits { bits: (left.offset.bytes() as u128) & right, size: ptr_size }, false)\n+                    let v = Scalar::from_uint((left.offset.bytes() as u128) & right, ptr_size);\n+                    (v, false)\n                 } else {\n                     return err!(ReadPointerAsBytes);\n                 }\n@@ -289,18 +290,15 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 // (Intuition: modulo a divisor leaks less information.)\n                 let ptr_base_align = self.memory().get(left.alloc_id)?.align.bytes();\n                 let right = right as u64;\n-                let ptr_size = self.memory().pointer_size().bytes() as u8;\n+                let ptr_size = self.memory().pointer_size();\n                 if right == 1 {\n                     // Modulo 1 is always 0.\n-                    (Scalar::Bits { bits: 0, size: ptr_size }, false)\n+                    (Scalar::from_uint(0u32, ptr_size), false)\n                 } else if ptr_base_align % right == 0 {\n                     // The base address would be cancelled out by the modulo operation, so we can\n                     // just take the modulo of the offset.\n                     (\n-                        Scalar::Bits {\n-                            bits: (left.offset.bytes() % right) as u128,\n-                            size: ptr_size\n-                        },\n+                        Scalar::from_uint((left.offset.bytes() % right) as u128, ptr_size),\n                         false,\n                     )\n                 } else {"}]}