{"sha": "861872bc453bde79b83ff99d443d035225f10e87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MTg3MmJjNDUzYmRlNzliODNmZjk5ZDQ0M2QwMzUyMjVmMTBlODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T01:25:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T01:25:43Z"}, "message": "Auto merge of #82953 - JohnTitor:rollup-8rtk5g2, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #77511 (Add StatementKind::CopyNonOverlapping)\n - #79208 (Stabilize `unsafe_op_in_unsafe_fn` lint)\n - #82411 (Fixes to ExitStatus and its docs)\n - #82733 (Add powerpc-unknown-openbsd target)\n - #82802 (Build rustdoc for run-make tests, not just run-make-fulldeps)\n - #82849 (Add Option::get_or_default)\n - #82908 (:arrow_up: rust-analyzer)\n - #82937 (Update README.md to use the correct cmake version number)\n - #82938 (Bump tracing-tree dependency)\n - #82942 (Don't hardcode the `v1` prelude in diagnostics, to allow for new preludes.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fd570f707b6a801d7f1e7fd6b72fc983184daa04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd570f707b6a801d7f1e7fd6b72fc983184daa04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861872bc453bde79b83ff99d443d035225f10e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861872bc453bde79b83ff99d443d035225f10e87", "html_url": "https://github.com/rust-lang/rust/commit/861872bc453bde79b83ff99d443d035225f10e87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861872bc453bde79b83ff99d443d035225f10e87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5d45f68cadc8fff4fbb557780f92b403b19c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5d45f68cadc8fff4fbb557780f92b403b19c19", "html_url": "https://github.com/rust-lang/rust/commit/3a5d45f68cadc8fff4fbb557780f92b403b19c19"}, {"sha": "9dc82face341121e3464a59665bc7c5b394cacc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc82face341121e3464a59665bc7c5b394cacc0", "html_url": "https://github.com/rust-lang/rust/commit/9dc82face341121e3464a59665bc7c5b394cacc0"}], "stats": {"total": 628, "additions": 439, "deletions": 189}, "files": [{"sha": "25039b5cbd92ad10b05db9d97c92fc89aab433d1", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -5460,9 +5460,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-tree\"\n-version = \"0.1.8\"\n+version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1a60657cfbf397c603257a8230b3f427e6a2a4e5911a59331b9bb4dffff5b608\"\n+checksum = \"1712b40907f8d9bc2bc66763ab61dec914b7123d7149e59feb0d4e2a95fc4967\"\n dependencies = [\n  \"ansi_term 0.12.1\",\n  \"atty\","}, {"sha": "cc073875cde571cb098f2b35a46ebe4c3ac1ee0d", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -31,7 +31,7 @@ by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n    * `g++` 5.1 or later or `clang++` 3.5 or later\n    * `python` 3 or 2.7\n    * GNU `make` 3.81 or later\n-   * `cmake` 3.4.3 or later\n+   * `cmake` 3.13.4 or later\n    * `ninja`\n    * `curl`\n    * `git`"}, {"sha": "8b5ae9e0541ade6210bfd3436f2c9b9228085328", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -832,6 +832,27 @@ fn codegen_stmt<'tcx>(\n             }\n         }\n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n+        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+          src,\n+          dst,\n+          count,\n+        }) => {\n+            let dst = codegen_operand(fx, dst);\n+            let pointee = dst\n+              .layout()\n+              .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+              .expect(\"Expected pointer\");\n+            let dst = dst.load_scalar(fx);\n+            let src = codegen_operand(fx, src).load_scalar(fx);\n+            let count = codegen_operand(fx, count).load_scalar(fx);\n+            let elem_size: u64 = pointee.size.bytes();\n+            let bytes = if elem_size != 1 {\n+               fx.bcx.ins().imul_imm(count, elem_size as i64)\n+            } else {\n+               count\n+            };\n+            fx.bcx.call_memcpy(fx.cx.module.target_config(), dst, src, bytes);\n+        }\n     }\n }\n "}, {"sha": "2c2330409fd709b51bd3c0195e2353713cb76fc5", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -9,6 +9,7 @@\n #![feature(or_patterns)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n+#![feature(box_syntax)]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "e148ed7ad3bcecb0697cf6bfd552a05741032478", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 60, "deletions": 54, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -641,67 +641,73 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        if intrinsic.is_some() && intrinsic != Some(sym::drop_in_place) {\n-            let intrinsic = intrinsic.unwrap();\n-            let dest = match ret_dest {\n-                _ if fn_abi.ret.is_indirect() => llargs[0],\n-                ReturnDest::Nothing => {\n-                    bx.const_undef(bx.type_ptr_to(bx.arg_memory_ty(&fn_abi.ret)))\n-                }\n-                ReturnDest::IndirectOperand(dst, _) | ReturnDest::Store(dst) => dst.llval,\n-                ReturnDest::DirectOperand(_) => {\n-                    bug!(\"Cannot use direct operand with an intrinsic call\")\n-                }\n-            };\n+        match intrinsic {\n+            None | Some(sym::drop_in_place) => {}\n+            Some(sym::copy_nonoverlapping) => unreachable!(),\n+            Some(intrinsic) => {\n+                let dest = match ret_dest {\n+                    _ if fn_abi.ret.is_indirect() => llargs[0],\n+                    ReturnDest::Nothing => {\n+                        bx.const_undef(bx.type_ptr_to(bx.arg_memory_ty(&fn_abi.ret)))\n+                    }\n+                    ReturnDest::IndirectOperand(dst, _) | ReturnDest::Store(dst) => dst.llval,\n+                    ReturnDest::DirectOperand(_) => {\n+                        bug!(\"Cannot use direct operand with an intrinsic call\")\n+                    }\n+                };\n \n-            let args: Vec<_> = args\n-                .iter()\n-                .enumerate()\n-                .map(|(i, arg)| {\n-                    // The indices passed to simd_shuffle* in the\n-                    // third argument must be constant. This is\n-                    // checked by const-qualification, which also\n-                    // promotes any complex rvalues to constants.\n-                    if i == 2 && intrinsic.as_str().starts_with(\"simd_shuffle\") {\n-                        if let mir::Operand::Constant(constant) = arg {\n-                            let c = self.eval_mir_constant(constant);\n-                            let (llval, ty) = self.simd_shuffle_indices(\n-                                &bx,\n-                                constant.span,\n-                                constant.literal.ty,\n-                                c,\n-                            );\n-                            return OperandRef { val: Immediate(llval), layout: bx.layout_of(ty) };\n-                        } else {\n-                            span_bug!(span, \"shuffle indices must be constant\");\n+                let args: Vec<_> = args\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, arg)| {\n+                        // The indices passed to simd_shuffle* in the\n+                        // third argument must be constant. This is\n+                        // checked by const-qualification, which also\n+                        // promotes any complex rvalues to constants.\n+                        if i == 2 && intrinsic.as_str().starts_with(\"simd_shuffle\") {\n+                            if let mir::Operand::Constant(constant) = arg {\n+                                let c = self.eval_mir_constant(constant);\n+                                let (llval, ty) = self.simd_shuffle_indices(\n+                                    &bx,\n+                                    constant.span,\n+                                    constant.literal.ty,\n+                                    c,\n+                                );\n+                                return OperandRef {\n+                                    val: Immediate(llval),\n+                                    layout: bx.layout_of(ty),\n+                                };\n+                            } else {\n+                                span_bug!(span, \"shuffle indices must be constant\");\n+                            }\n                         }\n-                    }\n \n-                    self.codegen_operand(&mut bx, arg)\n-                })\n-                .collect();\n+                        self.codegen_operand(&mut bx, arg)\n+                    })\n+                    .collect();\n+\n+                Self::codegen_intrinsic_call(\n+                    &mut bx,\n+                    *instance.as_ref().unwrap(),\n+                    &fn_abi,\n+                    &args,\n+                    dest,\n+                    span,\n+                );\n \n-            Self::codegen_intrinsic_call(\n-                &mut bx,\n-                *instance.as_ref().unwrap(),\n-                &fn_abi,\n-                &args,\n-                dest,\n-                span,\n-            );\n+                if let ReturnDest::IndirectOperand(dst, _) = ret_dest {\n+                    self.store_return(&mut bx, ret_dest, &fn_abi.ret, dst.llval);\n+                }\n \n-            if let ReturnDest::IndirectOperand(dst, _) = ret_dest {\n-                self.store_return(&mut bx, ret_dest, &fn_abi.ret, dst.llval);\n-            }\n+                if let Some((_, target)) = *destination {\n+                    helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n+                    helper.funclet_br(self, &mut bx, target);\n+                } else {\n+                    bx.unreachable();\n+                }\n \n-            if let Some((_, target)) = *destination {\n-                helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-                helper.funclet_br(self, &mut bx, target);\n-            } else {\n-                bx.unreachable();\n+                return;\n             }\n-\n-            return;\n         }\n \n         // Split the rust-call tupled arguments off."}, {"sha": "8502309b90e5a1e7bfab7d1bd54cdc16b7d229e4", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -125,19 +125,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let offset = args[1].immediate();\n                 bx.gep(ptr, &[offset])\n             }\n-\n-            sym::copy_nonoverlapping => {\n-                copy_intrinsic(\n-                    bx,\n-                    false,\n-                    false,\n-                    substs.type_at(0),\n-                    args[1].immediate(),\n-                    args[0].immediate(),\n-                    args[2].immediate(),\n-                );\n-                return;\n-            }\n             sym::copy => {\n                 copy_intrinsic(\n                     bx,"}, {"sha": "5523e5f2e8604d737f86987380b657182de113c0", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -115,6 +115,26 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_coverage(&mut bx, coverage.clone());\n                 bx\n             }\n+            mir::StatementKind::CopyNonOverlapping(box mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                let dst_val = self.codegen_operand(&mut bx, dst);\n+                let src_val = self.codegen_operand(&mut bx, src);\n+                let count = self.codegen_operand(&mut bx, count).immediate();\n+                let pointee_layout = dst_val\n+                    .layout\n+                    .pointee_info_at(&mut bx, rustc_target::abi::Size::ZERO)\n+                    .expect(\"Expected pointer\");\n+                let bytes = bx.mul(count, bx.const_usize(pointee_layout.size.bytes()));\n+\n+                let align = pointee_layout.align;\n+                let dst = dst_val.immediate();\n+                let src = src_val.immediate();\n+                bx.memcpy(dst, align, src, align, bytes, crate::MemFlags::empty());\n+                bx\n+            }\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)"}, {"sha": "93c6ec04e4fd676696075b83f93ff636dfff699a", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -12,7 +12,7 @@ libc = \"0.2\"\n atty = \"0.2\"\n tracing = { version = \"0.1.25\" }\n tracing-subscriber = { version = \"0.2.16\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n-tracing-tree = \"0.1.8\"\n+tracing-tree = \"0.1.9\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "9902b6cc9e84209d436d8c77fa650380dd348c13", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -275,6 +275,8 @@ declare_features! (\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n     /// The smallest useful subset of `const_generics`.\n     (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n+    /// The `unsafe_op_in_unsafe_fn` lint (allowed by default): no longer treat an unsafe function as an unsafe block.\n+    (accepted, unsafe_block_in_unsafe_fn, \"1.51.0\", Some(71668), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "9cb06684c0fd0768d60c3bb81838860fcff00bf7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -557,9 +557,6 @@ declare_features! (\n     /// Allows the use of `#[ffi_const]` on foreign functions.\n     (active, ffi_const, \"1.45.0\", Some(58328), None),\n \n-    /// No longer treat an unsafe function as an unsafe block.\n-    (active, unsafe_block_in_unsafe_fn, \"1.45.0\", Some(71668), None),\n-\n     /// Allows `extern \"avr-interrupt\" fn()` and `extern \"avr-non-blocking-interrupt\" fn()`.\n     (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n "}, {"sha": "af48f6c2a5d9920823188802c1a3a26240865150", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -8,7 +8,6 @@\n \n use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n-use rustc_span::symbol::sym;\n \n declare_lint! {\n     /// The `forbidden_lint_groups` lint detects violations of\n@@ -2489,16 +2488,11 @@ declare_lint! {\n \n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n-    /// functions without an explicit unsafe block. This lint only works on\n-    /// the [**nightly channel**] with the\n-    /// `#![feature(unsafe_block_in_unsafe_fn)]` feature.\n-    ///\n-    /// [**nightly channel**]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+    /// functions without an explicit unsafe block.\n     ///\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![feature(unsafe_block_in_unsafe_fn)]\n     /// #![deny(unsafe_op_in_unsafe_fn)]\n     ///\n     /// unsafe fn foo() {}\n@@ -2536,7 +2530,6 @@ declare_lint! {\n     pub UNSAFE_OP_IN_UNSAFE_FN,\n     Allow,\n     \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n-    @feature_gate = sym::unsafe_block_in_unsafe_fn;\n }\n \n declare_lint! {"}, {"sha": "f6952667494db5d12f12cdea90484e84e6469dca", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1541,6 +1541,11 @@ pub enum StatementKind<'tcx> {\n     /// counter varible at runtime, each time the code region is executed.\n     Coverage(Box<Coverage>),\n \n+    /// Denotes a call to the intrinsic function copy_overlapping, where `src_dst` denotes the\n+    /// memory being read from and written to(one field to save memory), and size\n+    /// indicates how many bytes are being copied over.\n+    CopyNonOverlapping(Box<CopyNonOverlapping<'tcx>>),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -1659,6 +1664,13 @@ impl Debug for Statement<'_> {\n                     write!(fmt, \"Coverage::{:?}\", coverage.kind)\n                 }\n             }\n+            CopyNonOverlapping(box crate::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                write!(fmt, \"copy_nonoverlapping(src={:?}, dst={:?}, count={:?})\", src, dst, count)\n+            }\n             Nop => write!(fmt, \"nop\"),\n         }\n     }\n@@ -1670,6 +1682,14 @@ pub struct Coverage {\n     pub code_region: Option<CodeRegion>,\n }\n \n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+pub struct CopyNonOverlapping<'tcx> {\n+    pub src: Operand<'tcx>,\n+    pub dst: Operand<'tcx>,\n+    /// Number of elements to copy from src to dest, not bytes.\n+    pub count: Operand<'tcx>,\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Places\n "}, {"sha": "bde480180136bc9d192e3eb87fd40e7c65d3620b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -28,11 +28,9 @@ pub enum UnsafetyViolationKind {\n     BorrowPacked,\n     /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n-    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n     UnsafeFn,\n     /// Borrow of packed field in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n-    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n     UnsafeFnBorrowPacked,\n }\n "}, {"sha": "4e81612c0b9dee5f76d55668cd7d51730f879905", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -436,6 +436,15 @@ macro_rules! make_mir_visitor {\n                             location\n                         )\n                     }\n+                    StatementKind::CopyNonOverlapping(box crate::mir::CopyNonOverlapping{\n+                      ref $($mutability)? src,\n+                      ref $($mutability)? dst,\n+                      ref $($mutability)? count,\n+                    }) => {\n+                      self.visit_operand(src, location);\n+                      self.visit_operand(dst, location);\n+                      self.visit_operand(count, location)\n+                    }\n                     StatementKind::Nop => {}\n                 }\n             }"}, {"sha": "17c4f3c649460226e7739494576d458c1f5832a0", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -92,6 +92,15 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     self.consume_operand(location, input);\n                 }\n             }\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                self.consume_operand(location, src);\n+                self.consume_operand(location, dst);\n+                self.consume_operand(location, count);\n+            }\n             StatementKind::Nop\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..)"}, {"sha": "5b8bb7257e2303ed7b41cd0e51073b0eea6f4b77", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -626,6 +626,15 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                     self.consume_operand(location, (input, span), flow_state);\n                 }\n             }\n+\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ..\n+            }) => {\n+                span_bug!(\n+                    span,\n+                    \"Unexpected CopyNonOverlapping, should only appear after lower_intrinsics\",\n+                )\n+            }\n             StatementKind::Nop\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..)"}, {"sha": "ab7e75bf4f10c7f282d59ae2ff9fe847c97e534e", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1520,6 +1520,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ..\n+            }) => span_bug!(\n+                stmt.source_info.span,\n+                \"Unexpected StatementKind::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n+            ),\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)"}, {"sha": "f24d0f0266d9f835c754d1b9277c7d4c814fdc90", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -305,6 +305,7 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n+            | mir::StatementKind::CopyNonOverlapping(..)\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "792664597fd9aabc07b1f89dc2dea83b9111b021", "filename": "compiler/rustc_mir/src/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -149,6 +149,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             | StatementKind::FakeRead(..)\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::StorageLive(..) => {}\n         }\n     }"}, {"sha": "1ddd81e779b1587211d18fb8fc90e38b47195535", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -318,6 +318,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "25c3c2c632d8166f3de9c4730ac35e3ecc63b766", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -323,28 +323,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n-            sym::copy | sym::copy_nonoverlapping => {\n-                let elem_ty = instance.substs.type_at(0);\n-                let elem_layout = self.layout_of(elem_ty)?;\n-                let count = self.read_scalar(&args[2])?.to_machine_usize(self)?;\n-                let elem_align = elem_layout.align.abi;\n-\n-                let size = elem_layout.size.checked_mul(count, self).ok_or_else(|| {\n-                    err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name)\n-                })?;\n-                let src = self.read_scalar(&args[0])?.check_init()?;\n-                let src = self.memory.check_ptr_access(src, size, elem_align)?;\n-                let dest = self.read_scalar(&args[1])?.check_init()?;\n-                let dest = self.memory.check_ptr_access(dest, size, elem_align)?;\n-\n-                if let (Some(src), Some(dest)) = (src, dest) {\n-                    self.memory.copy(\n-                        src,\n-                        dest,\n-                        size,\n-                        intrinsic_name == sym::copy_nonoverlapping,\n-                    )?;\n-                }\n+            sym::copy => {\n+                self.copy(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n             sym::offset => {\n                 let ptr = self.read_scalar(&args[0])?.check_init()?;"}, {"sha": "0f365eaa41dded3249298f7d1d35770af198a063", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -2,6 +2,7 @@\n //!\n //! The main entry point is the `step` method.\n \n+use crate::interpret::OpTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_target::abi::LayoutOf;\n@@ -113,6 +114,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 M::retag(self, *kind, &dest)?;\n             }\n \n+            // Call CopyNonOverlapping\n+            CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n+                let count = self.eval_operand(count, None)?;\n+\n+                let src = self.eval_operand(src, None)?;\n+                let dst = self.eval_operand(dst, None)?;\n+                self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n+            }\n+\n             // Statements we do not track.\n             AscribeUserType(..) => {}\n \n@@ -140,6 +150,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    pub(crate) fn copy(\n+        &mut self,\n+        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        nonoverlapping: bool,\n+    ) -> InterpResult<'tcx> {\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        let (size, align) = (layout.size, layout.align.abi);\n+        let src =\n+            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n+\n+        let dst =\n+            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n+\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\"overflow computing total size of `copy_nonoverlapping`\")\n+        })?;\n+\n+        if let (Some(src), Some(dst)) = (src, dst) {\n+            self.memory.copy(src, dst, size, nonoverlapping)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Evaluate an assignment statement.\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue"}, {"sha": "bbfcec5a76a4352166d075b76c5bf0736a0f179f", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -25,6 +25,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]\n+#![feature(option_get_or_default)]\n #![feature(or_patterns)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]"}, {"sha": "1ad7b8fbbd5edde87dcb2e8cca714d6ba7e1bbe4", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -808,6 +808,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "532d201e056d178e47d6ad08de1fa013edf14552", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -123,6 +123,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 UnsafetyViolationKind::General,\n                 UnsafetyViolationDetails::UseOfInlineAssembly,\n             ),\n+            StatementKind::CopyNonOverlapping(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n     }\n@@ -340,7 +341,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 false\n             }\n             // With the RFC 2585, no longer allow `unsafe` operations in `unsafe fn`s\n-            Safety::FnUnsafe if self.tcx.features().unsafe_block_in_unsafe_fn => {\n+            Safety::FnUnsafe => {\n                 for violation in violations {\n                     let mut violation = *violation;\n \n@@ -355,8 +356,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n-            // `unsafe` function bodies allow unsafe without additional unsafe blocks (before RFC 2585)\n-            Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n+            Safety::BuiltinUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {"}, {"sha": "8ad0d133b17e142f90e671fe0a49b5756f0794a2", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -392,10 +392,7 @@ impl BasicCoverageBlockData {\n             }\n         }\n         let operand = counter_kind.as_operand_id();\n-        if let Some(replaced) = self\n-            .edge_from_bcbs\n-            .get_or_insert_with(FxHashMap::default)\n-            .insert(from_bcb, counter_kind)\n+        if let Some(replaced) = self.edge_from_bcbs.get_or_default().insert(from_bcb, counter_kind)\n         {\n             Error::from_string(format!(\n                 \"attempt to set an edge counter more than once; from_bcb: \\"}, {"sha": "e7097ce861902ab7ca565f873578642267c8cd48", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -687,6 +687,7 @@ pub(super) fn filtered_statement_span(\n \n         // Retain spans from all other statements\n         StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n         | StatementKind::LlvmInlineAsm(_)"}, {"sha": "6656deac967b696edc74d2b45bae2e8db5868f06", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -587,6 +587,7 @@ impl Conflicts<'a> {\n             | StatementKind::FakeRead(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "f299b6ecc28dc09ee56cfa2890e46795863b6b5b", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1454,6 +1454,7 @@ impl Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "d6a733606160818b6727fb1d7667dbffc8b31b05", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -40,6 +40,27 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    sym::copy_nonoverlapping => {\n+                        let target = destination.unwrap().1;\n+                        let mut args = args.drain(..);\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::CopyNonOverlapping(\n+                                box rustc_middle::mir::CopyNonOverlapping {\n+                                    src: args.next().unwrap(),\n+                                    dst: args.next().unwrap(),\n+                                    count: args.next().unwrap(),\n+                                },\n+                            ),\n+                        });\n+                        assert_eq!(\n+                            args.next(),\n+                            None,\n+                            \"Extra argument for copy_non_overlapping intrinsic\"\n+                        );\n+                        drop(args);\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n                     sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n                         if let Some((destination, target)) = *destination {\n                             let lhs;"}, {"sha": "5347846a4b3341a83e1d65d4fa1e1f39bf78aca3", "filename": "compiler/rustc_mir/src/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -55,6 +55,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n                 | StatementKind::LlvmInlineAsm { .. }\n+                | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "a5764d9bf4e3dfbb6c2dc77cce3d2cc4bf5c40bd", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -428,6 +428,7 @@ impl Visitor<'_> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::LlvmInlineAsm(..)\n+            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)"}, {"sha": "d009b0b1b238425386c8c026a565ca4e8cbcb17f", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -294,7 +294,49 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            _ => {}\n+            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ref src,\n+                ref dst,\n+                ref count,\n+            }) => {\n+                let src_ty = src.ty(&self.body.local_decls, self.tcx);\n+                let op_src_ty = if let Some(src_deref) = src_ty.builtin_deref(true) {\n+                    src_deref.ty\n+                } else {\n+                    self.fail(\n+                        location,\n+                        format!(\"Expected src to be ptr in copy_nonoverlapping, got: {}\", src_ty),\n+                    );\n+                    return;\n+                };\n+                let dst_ty = dst.ty(&self.body.local_decls, self.tcx);\n+                let op_dst_ty = if let Some(dst_deref) = dst_ty.builtin_deref(true) {\n+                    dst_deref.ty\n+                } else {\n+                    self.fail(\n+                        location,\n+                        format!(\"Expected dst to be ptr in copy_nonoverlapping, got: {}\", dst_ty),\n+                    );\n+                    return;\n+                };\n+                // since CopyNonOverlapping is parametrized by 1 type,\n+                // we only need to check that they are equal and not keep an extra parameter.\n+                if op_src_ty != op_dst_ty {\n+                    self.fail(location, format!(\"bad arg ({:?} != {:?})\", op_src_ty, op_dst_ty));\n+                }\n+\n+                let op_cnt_ty = count.ty(&self.body.local_decls, self.tcx);\n+                if op_cnt_ty != self.tcx.types.usize {\n+                    self.fail(location, format!(\"bad arg ({:?} != usize)\", op_cnt_ty))\n+                }\n+            }\n+            StatementKind::SetDiscriminant { .. }\n+            | StatementKind::StorageLive(..)\n+            | StatementKind::StorageDead(..)\n+            | StatementKind::LlvmInlineAsm(..)\n+            | StatementKind::Retag(_, _)\n+            | StatementKind::Coverage(_)\n+            | StatementKind::Nop => {}\n         }\n \n         self.super_statement(statement, location);"}, {"sha": "a9a30e407b4b091cc972b04d0d598387ea2f5492", "filename": "compiler/rustc_mir/src/util/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -245,6 +245,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         Retag(..) => \"Retag\",\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n+        CopyNonOverlapping(..) => \"CopyNonOverlapping\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "e7b3d45976611ff5dfee7834c6eece780f2133df", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -334,7 +334,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 .lookup_import_candidates(ident, ns, &self.parent_scope, is_enum_variant)\n                 .into_iter()\n                 .map(|suggestion| import_candidate_to_enum_paths(&suggestion))\n-                .filter(|(_, enum_ty_path)| enum_ty_path != \"std::prelude::v1\")\n+                .filter(|(_, enum_ty_path)| !enum_ty_path.starts_with(\"std::prelude::\"))\n                 .collect();\n             if !enum_candidates.is_empty() {\n                 if let (PathSource::Type, Some(span)) ="}, {"sha": "09400a1d13066a627b175b7faef8acd08aaad1b0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -694,6 +694,7 @@ supported_targets! {\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"sparc64-unknown-openbsd\", sparc64_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n+    (\"powerpc-unknown-openbsd\", powerpc_unknown_openbsd),\n \n     (\"aarch64-unknown-netbsd\", aarch64_unknown_netbsd),\n     (\"armv6-unknown-netbsd-eabihf\", armv6_unknown_netbsd_eabihf),"}, {"sha": "c17183faa7ae0a67312f852cf35955bab9e5fefb", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_openbsd.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -0,0 +1,16 @@\n+use crate::abi::Endian;\n+use crate::spec::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::openbsd_base::opts();\n+    base.endian = Endian::Big;\n+    base.max_atomic_width = Some(32);\n+\n+    Target {\n+        llvm_target: \"powerpc-unknown-openbsd\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n+        arch: \"powerpc\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "f9f67769e96a41d475960d1493492354c9626eeb", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -200,7 +200,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n                         let variant_path = self.tcx.def_path_str(variant.def_id);\n                         // FIXME #56861: DRYer prelude filtering\n-                        Some(variant_path.trim_start_matches(\"std::prelude::v1::\").to_string())\n+                        if let Some(path) = variant_path.strip_prefix(\"std::prelude::\") {\n+                            if let Some((_, path)) = path.split_once(\"::\") {\n+                                return Some(path.to_string());\n+                            }\n+                        }\n+                        Some(variant_path)\n                     } else {\n                         None\n                     }"}, {"sha": "a70812bd13c060f908fb0852e9cef3fdcd09cc11", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -133,7 +133,7 @@\n #![feature(trusted_len)]\n #![feature(unboxed_closures)]\n #![feature(unicode_internals)]\n-#![feature(unsafe_block_in_unsafe_fn)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsize)]\n #![feature(unsized_fn_params)]\n #![feature(allocator_internals)]"}, {"sha": "e10e1738de55c3856db27a6d2168aaf5a0130397", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -164,8 +164,8 @@\n #![feature(const_caller_location)]\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n-#![feature(unsafe_block_in_unsafe_fn)]\n #![feature(int_error_matching)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]"}, {"sha": "9478e7f06bdf3a80885ebf2e42103bb0731afbcb", "filename": "library/core/src/option.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -854,6 +854,34 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n+    /// Inserts the default value into the option if it is [`None`], then\n+    /// returns a mutable reference to the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_get_or_default)]\n+    ///\n+    /// let mut x = None;\n+    ///\n+    /// {\n+    ///     let y: &mut u32 = x.get_or_default();\n+    ///     assert_eq!(y, &0);\n+    ///\n+    ///     *y = 7;\n+    /// }\n+    ///\n+    /// assert_eq!(x, Some(7));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_get_or_default\", issue = \"82901\")]\n+    pub fn get_or_default(&mut self) -> &mut T\n+    where\n+        T: Default,\n+    {\n+        self.get_or_insert_with(Default::default)\n+    }\n+\n     /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///"}, {"sha": "b7fcc740363811be50261b16948b3488328c771f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -72,16 +72,16 @@\n #![feature(peekable_peek_mut)]\n #![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n #![feature(once_cell)]\n-#![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsized_tuple_coercion)]\n #![feature(int_bits_const)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n #![feature(integer_atomics)]\n #![feature(slice_group_by)]\n #![feature(trusted_random_access)]\n-#![deny(unsafe_op_in_unsafe_fn)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![cfg_attr(not(bootstrap), feature(unsize))]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;\n "}, {"sha": "247d39743bef5046c443ba3b7fcb4472e17e2a2b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -327,7 +327,7 @@\n #![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_block_in_unsafe_fn)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsafe_cell_raw_get)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]"}, {"sha": "15ac9e402c589243b2b8720efbba4f186bb4496e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -885,7 +885,7 @@ impl Command {\n     }\n \n     /// Executes a command as a child process, waiting for it to finish and\n-    /// collecting its exit status.\n+    /// collecting its status.\n     ///\n     /// By default, stdin, stdout and stderr are inherited from the parent.\n     ///\n@@ -899,7 +899,7 @@ impl Command {\n     ///                      .status()\n     ///                      .expect(\"failed to execute process\");\n     ///\n-    /// println!(\"process exited with: {}\", status);\n+    /// println!(\"process finished with: {}\", status);\n     ///\n     /// assert!(status.success());\n     /// ```\n@@ -1368,11 +1368,17 @@ impl From<fs::File> for Stdio {\n \n /// Describes the result of a process after it has terminated.\n ///\n-/// This `struct` is used to represent the exit status of a child process.\n+/// This `struct` is used to represent the exit status or other termination of a child process.\n /// Child processes are created via the [`Command`] struct and their exit\n /// status is exposed through the [`status`] method, or the [`wait`] method\n /// of a [`Child`] process.\n ///\n+/// An `ExitStatus` represents every possible disposition of a process.  On Unix this\n+/// is the **wait status**.  It is *not* simply an *exit status* (a value passed to `exit`).\n+///\n+/// For proper error reporting of failed processes, print the value of `ExitStatus` using its\n+/// implementation of [`Display`](crate::fmt::Display).\n+///\n /// [`status`]: Command::status\n /// [`wait`]: Child::wait\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n@@ -1400,7 +1406,7 @@ impl ExitStatus {\n     /// if status.success() {\n     ///     println!(\"'projects/' directory created\");\n     /// } else {\n-    ///     println!(\"failed to create 'projects/' directory\");\n+    ///     println!(\"failed to create 'projects/' directory: {}\", status);\n     /// }\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -1410,9 +1416,14 @@ impl ExitStatus {\n \n     /// Returns the exit code of the process, if any.\n     ///\n-    /// On Unix, this will return `None` if the process was terminated\n-    /// by a signal; `std::os::unix` provides an extension trait for\n-    /// extracting the signal and other details from the `ExitStatus`.\n+    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n+    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n+    /// bits, and that values that didn't come from a program's call to `exit` may be invented the\n+    /// runtime system (often, for example, 255, 254, 127 or 126).\n+    ///\n+    /// On Unix, this will return `None` if the process was terminated by a signal.\n+    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt) is an\n+    /// extension trait for extracting any such signal, and other details, from the `ExitStatus`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "4e170a8bb1cb3adf8819ccfc09f745c4c3168b33", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -188,12 +188,20 @@ impl CommandExt for process::Command {\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n ///\n+/// On Unix, `ExitStatus` **does not necessarily represent an exit status**, as passed to the\n+/// `exit` system call or returned by [`ExitStatus::code()`](crate::process::ExitStatus::code).\n+/// It represents **any wait status**, as returned by one of the `wait` family of system calls.\n+///\n+/// This is because a Unix wait status (a Rust `ExitStatus`) can represent a Unix exit status, but\n+/// can also represent other kinds of process event.\n+///\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt: Sealed {\n-    /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n-    /// a process.\n+    /// Creates a new `ExitStatus` from the raw underlying integer status value from `wait`\n+    ///\n+    /// The value should be a **wait status, not an exit status**.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n \n@@ -222,6 +230,8 @@ pub trait ExitStatusExt: Sealed {\n     fn continued(&self) -> bool;\n \n     /// Returns the underlying raw `wait` status.\n+    ///\n+    /// The returned integer is a **wait status, not an exit status**.\n     #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n     fn into_raw(self) -> i32;\n }"}, {"sha": "2fdbabae2775fb7575150add9c722e7e215b0c7c", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -527,9 +527,22 @@ impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit code: {}\", code)\n+        } else if let Some(signal) = self.signal() {\n+            if self.core_dumped() {\n+                write!(f, \"signal: {} (core dumped)\", signal)\n+            } else {\n+                write!(f, \"signal: {}\", signal)\n+            }\n+        } else if let Some(signal) = self.stopped_signal() {\n+            write!(f, \"stopped (not terminated) by signal: {}\", signal)\n+        } else if self.continued() {\n+            write!(f, \"continued (WIFCONTINUED)\")\n         } else {\n-            let signal = self.signal().unwrap();\n-            write!(f, \"signal: {}\", signal)\n+            write!(f, \"unrecognised wait status: {} {:#x}\", self.0, self.0)\n         }\n     }\n }\n+\n+#[cfg(test)]\n+#[path = \"process_unix/tests.rs\"]\n+mod tests;"}, {"sha": "5819d2c2a5a26944784b787c13356f7fea1be449", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -0,0 +1,30 @@\n+#[test]\n+fn exitstatus_display_tests() {\n+    // In practice this is the same on every Unix.\n+    // If some weird platform turns out to be different, and this test fails, use #[cfg].\n+    use crate::os::unix::process::ExitStatusExt;\n+    use crate::process::ExitStatus;\n+\n+    let t = |v, s| assert_eq!(s, format!(\"{}\", <ExitStatus as ExitStatusExt>::from_raw(v)));\n+\n+    t(0x0000f, \"signal: 15\");\n+    t(0x0008b, \"signal: 11 (core dumped)\");\n+    t(0x00000, \"exit code: 0\");\n+    t(0x0ff00, \"exit code: 255\");\n+\n+    // On MacOS, 0x0137f is WIFCONTINUED, not WIFSTOPPED.  Probably *BSD is similar.\n+    //   https://github.com/rust-lang/rust/pull/82749#issuecomment-790525956\n+    // The purpose of this test is to test our string formatting, not our understanding of the wait\n+    // status magic numbers.  So restrict these to Linux.\n+    if cfg!(target_os = \"linux\") {\n+        t(0x0137f, \"stopped (not terminated) by signal: 19\");\n+        t(0x0ffff, \"continued (WIFCONTINUED)\");\n+    }\n+\n+    // Testing \"unrecognised wait status\" is hard because the wait.h macros typically\n+    // assume that the value came from wait and isn't mad.  With the glibc I have here\n+    // this works:\n+    if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n+        t(0x000ff, \"unrecognised wait status: 255 0xff\");\n+    }\n+}"}, {"sha": "5d836c6bb623214d6c18a8f489880f6a703f5926", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1076,7 +1076,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         // Avoid depending on rustdoc when we don't need it.\n         if mode == \"rustdoc\"\n-            || (mode == \"run-make\" && suite.ends_with(\"fulldeps\"))\n+            || mode == \"run-make\"\n             || (mode == \"ui\" && is_rustdoc)\n             || mode == \"js-doc-test\"\n             || mode == \"rustdoc-json\""}, {"sha": "ee17fcac45c3694be28c1ac2a2bf0570ac773613", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -198,6 +198,7 @@ target | std | host | notes\n `powerpc-unknown-linux-gnuspe` | \u2713 |  | PowerPC SPE Linux\n `powerpc-unknown-linux-musl` | ? |  |\n `powerpc-unknown-netbsd` | \u2713 | \u2713 |\n+`powerpc-unknown-openbsd` | ? |  |\n `powerpc-wrs-vxworks` | ? |  |\n `powerpc-wrs-vxworks-spe` | ? |  |\n `powerpc64-unknown-freebsd` | \u2713 | \u2713 | PPC64 FreeBSD (ELFv1 and ELFv2)"}, {"sha": "2d0722396fcf373d62693a575f5ee538ed27abc8", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -20,7 +20,7 @@ itertools = \"0.9\"\n regex = \"1\"\n rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n tracing = \"0.1\"\n-tracing-tree = \"0.1.6\"\n+tracing-tree = \"0.1.9\"\n \n [dependencies.tracing-subscriber]\n version = \"0.2.13\""}, {"sha": "61e512a12a18d117e3a05c326fe3e20acf3a1853", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a5d45f68cadc8fff4fbb557780f92b403b19c19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5d45f68cadc8fff4fbb557780f92b403b19c19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs?ref=3a5d45f68cadc8fff4fbb557780f92b403b19c19", "patch": "@@ -1,6 +0,0 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-//~^ ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n-//~| ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n-//~| ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n-\n-fn main() {}"}, {"sha": "c5cad4a98d9ca29172af13b5a6a539831f1e010e", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3a5d45f68cadc8fff4fbb557780f92b403b19c19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a5d45f68cadc8fff4fbb557780f92b403b19c19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr?ref=3a5d45f68cadc8fff4fbb557780f92b403b19c19", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n-   |\n-LL | #![deny(unsafe_op_in_unsafe_fn)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n-   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n-\n-error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n-   |\n-LL | #![deny(unsafe_op_in_unsafe_fn)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n-   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n-\n-error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n-   |\n-LL | #![deny(unsafe_op_in_unsafe_fn)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n-   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "c8400a6fc4d0d43269f814521a9549ce2ceeca8f", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1,4 +1,3 @@\n-#![feature(unsafe_block_in_unsafe_fn)]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(unused_unsafe)]\n "}, {"sha": "3157783acb6af08c9f40bfdbb9ad840cadae5082", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1,90 +1,90 @@\n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:10:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:9:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:1:9\n    |\n LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:11:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:13:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:17:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:3:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:24:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:23:8\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:22:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:28:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:30:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:45:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:44:14\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ------   ^^^^^^ unnecessary `unsafe` block\n    |     |\n    |     because it's nested under this `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:56:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:55:5\n    |\n LL | unsafe fn allow_level() {\n    | ----------------------- because it's nested under this `unsafe` fn\n@@ -93,7 +93,7 @@ LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:68:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:67:9\n    |\n LL | unsafe fn nested_allow_level() {\n    | ------------------------------ because it's nested under this `unsafe` fn\n@@ -102,15 +102,15 @@ LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:74:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:73:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:77:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function"}, {"sha": "1391f7505e27cc3655ec67b9b8ad7661ce322c4d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861872bc453bde79b83ff99d443d035225f10e87/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -210,14 +210,21 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n         StatementKind::Assign(box (place, rval)) => {\n             check_place(tcx, *place, span, body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n-        },\n+        }\n \n         StatementKind::FakeRead(_, place) |\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n         StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n \n+        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping{\n+          dst, src, count,\n+        }) => {\n+          check_operand(tcx, dst, span, body)?;\n+          check_operand(tcx, src, span, body)?;\n+          check_operand(tcx, count, span, body)\n+        }\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}, {"sha": "d54e1157b66017e4aae38328cd213286e39ca130", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=861872bc453bde79b83ff99d443d035225f10e87", "patch": "@@ -1 +1 @@\n-Subproject commit 5df3ee8274fdb7cdeb2b0871b4efea8cbf4724a1\n+Subproject commit d54e1157b66017e4aae38328cd213286e39ca130"}]}