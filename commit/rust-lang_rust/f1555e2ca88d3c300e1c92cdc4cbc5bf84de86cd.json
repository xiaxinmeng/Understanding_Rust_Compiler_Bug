{"sha": "f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNTU1ZTJjYTg4ZDNjMzAwZTFjOTJjZGM0Y2JjNWJmODRkZTg2Y2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T23:45:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-03T05:11:46Z"}, "message": "Rename ty_istr to ty_str. Issue #855", "tree": {"sha": "d993d819f17a9d95b274015d504a073e7915e671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d993d819f17a9d95b274015d504a073e7915e671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "html_url": "https://github.com/rust-lang/rust/commit/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6217ce958e4b1007ca9e49751dba1aa1b68fbe67", "url": "https://api.github.com/repos/rust-lang/rust/commits/6217ce958e4b1007ca9e49751dba1aa1b68fbe67", "html_url": "https://github.com/rust-lang/rust/commit/6217ce958e4b1007ca9e49751dba1aa1b68fbe67"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "680b422f402a7d8c56d40b77def5bd06c7e7d36d", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -286,7 +286,7 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n \n fn mk_main(cx: &test_ctxt) -> @ast::item {\n \n-    let args_mt: ast::mt = {ty: @nospan(ast::ty_istr), mut: ast::imm};\n+    let args_mt: ast::mt = {ty: @nospan(ast::ty_str), mut: ast::imm};\n     let args_ty: ast::ty = nospan(ast::ty_vec(args_mt));\n \n     let args_arg: ast::arg ="}, {"sha": "d44e60c194bbe7d172933b1bf061429daa202cee", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -113,7 +113,7 @@ fn enc_sty(w: &io::writer, cx: &@ctxt, st: &ty::sty) {\n         }\n       }\n       ty::ty_char. { w.write_char('c'); }\n-      ty::ty_istr. { w.write_char('S'); }\n+      ty::ty_str. { w.write_char('S'); }\n       ty::ty_tag(def, tys) {\n         w.write_str(\"t[\");\n         w.write_str(cx.ds(def));"}, {"sha": "a808528031d36e6ac53b11815dedc79a1088b611", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -294,7 +294,7 @@ fn check_for(cx: &ctx, local: &@ast::local, seq: &@ast::expr, blk: &ast::blk,\n     let seq_t = ty::expr_ty(cx.tcx, seq);\n     alt ty::struct(cx.tcx, seq_t) {\n       ty::ty_vec(mt) { if mt.mut != ast::imm { unsafe = some(seq_t); } }\n-      ty::ty_istr. {/* no-op */ }\n+      ty::ty_str. {/* no-op */ }\n       _ {\n         cx.tcx.sess.span_unimpl(seq.span,\n                                 \"unknown seq type \" +"}, {"sha": "4ce93f7737a0b2abe9a5afd2cfed055cc58c4b37", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -105,7 +105,7 @@ fn add_gc_root(cx: &@block_ctxt, llval: ValueRef, ty: ty::t) -> @block_ctxt {\n fn type_is_gc_relevant(cx: &ty::ctxt, ty: ty::t) -> bool {\n     alt ty::struct(cx, ty) {\n       ty::ty_nil. | ty::ty_bot. | ty::ty_bool. | ty::ty_int. | ty::ty_float. |\n-      ty::ty_uint. | ty::ty_machine(_) | ty::ty_char. | ty::ty_istr. |\n+      ty::ty_uint. | ty::ty_machine(_) | ty::ty_char. | ty::ty_str. |\n       ty::ty_type. | ty::ty_native(_) | ty::ty_ptr(_) | ty::ty_type. |\n       ty::ty_native(_) {\n         ret false;"}, {"sha": "080018df961b655989a646341e07fa9e8f37332f", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -324,7 +324,7 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t, ty_param_map: &[uint]) -> [u8] {\n \n \n \n-      ty::ty_istr. {\n+      ty::ty_str. {\n         s += [shape_vec];\n         add_bool(s, true); // type is POD\n         let unit_ty = ty::mk_mach(ccx.tcx, ast::ty_u8);"}, {"sha": "013625917945e66d1ac40e41cf6e827f2d56ba50", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -196,7 +196,7 @@ fn type_of_inner(cx: &@crate_ctxt, sp: &span, t: ty::t) -> TypeRef {\n         }\n       }\n       ty::ty_char. { llty = T_char(); }\n-      ty::ty_istr. { llty = T_ptr(T_vec(T_i8())); }\n+      ty::ty_str. { llty = T_ptr(T_vec(T_i8())); }\n       ty::ty_tag(did, _) { llty = type_of_tag(cx, sp, did, t); }\n       ty::ty_box(mt) { llty = T_ptr(T_box(type_of_inner(cx, sp, mt.ty))); }\n       ty::ty_uniq(t) { llty = T_ptr(type_of_inner(cx, sp, t)); }\n@@ -1393,7 +1393,7 @@ fn make_drop_glue(bcx: &@block_ctxt, v0: ValueRef, t: ty::t) {\n     let ccx = bcx_ccx(bcx);\n     let bcx = alt ty::struct(ccx.tcx, t) {\n       ty::ty_vec(_) { tvec::make_drop_glue(bcx, v0, t) }\n-      ty::ty_istr. { tvec::make_drop_glue(bcx, v0, t) }\n+      ty::ty_str. { tvec::make_drop_glue(bcx, v0, t) }\n       ty::ty_box(_) { decr_refcnt_maybe_free(bcx, v0, v0, t) }\n       ty::ty_uniq(_) {\n         let vptr = Load(bcx, v0);\n@@ -1823,7 +1823,7 @@ fn iter_sequence(cx: @block_ctxt, v: ValueRef, t: ty::t, f: &val_and_ty_fn) ->\n \n     alt ty::struct(bcx_tcx(cx), t) {\n       ty::ty_vec(elt) { ret iter_sequence_body(cx, v, elt.ty, f, false); }\n-      ty::ty_istr. {\n+      ty::ty_str. {\n         let et = ty::mk_mach(bcx_tcx(cx), ast::ty_u8);\n         ret iter_sequence_body(cx, v, et, f, true);\n       }"}, {"sha": "b6b7f604bbd2d9a5798a8df965394e87d5b73a43", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -145,7 +145,7 @@ fn trans_append(cx: &@block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,\n     }\n     let strings =\n         alt ty::struct(bcx_tcx(cx), vec_ty) {\n-          ty::ty_istr. { true }\n+          ty::ty_str. { true }\n           ty::ty_vec(_) { false }\n         };\n \n@@ -215,7 +215,7 @@ fn trans_add(bcx: &@block_ctxt, vec_ty: ty::t, lhs: ValueRef, rhs: ValueRef)\n    -> result {\n     let strings =\n         alt ty::struct(bcx_tcx(bcx), vec_ty) {\n-          ty::ty_istr. { true }\n+          ty::ty_str. { true }\n           ty::ty_vec(_) { false }\n         };\n     let unit_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);"}, {"sha": "90a743349850b92220446ee13d6c4b9b22e5e7ba", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -121,7 +121,7 @@ export ty_fn_abi;\n export ty_fn_proto;\n export ty_fn_ret;\n export ty_int;\n-export ty_istr;\n+export ty_str;\n export ty_vec;\n export ty_machine;\n export ty_native;\n@@ -249,7 +249,7 @@ tag sty {\n     ty_uint;\n     ty_machine(ast::ty_mach);\n     ty_char;\n-    ty_istr;\n+    ty_str;\n     ty_tag(def_id, [t]);\n     ty_box(mt);\n     ty_uniq(t);\n@@ -363,7 +363,7 @@ fn populate_type_store(cx: &ctxt) {\n     intern(cx, ty_machine(ast::ty_f32), none);\n     intern(cx, ty_machine(ast::ty_f64), none);\n     intern(cx, ty_char, none);\n-    intern(cx, ty_istr, none);\n+    intern(cx, ty_str, none);\n     intern(cx, ty_type, none);\n     intern(cx, ty_bot, none);\n     assert (vec::len(cx.ts.vect) == idx_first_others);\n@@ -442,7 +442,7 @@ fn mk_raw_ty(cx: &ctxt, st: &sty, _in_cname: &option::t<str>) -> @raw_t {\n       ty_uint. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_istr. {/* no-op */ }\n+      ty_str. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n       ty_param(_, _) { has_params = true; }\n@@ -612,7 +612,7 @@ fn walk_ty(cx: &ctxt, walker: ty_walk, ty: t) {\n       ty_float. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_istr. {/* no-op */ }\n+      ty_str. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n       ty_box(tm) { walk_ty(cx, walker, tm.ty); }\n@@ -675,7 +675,7 @@ fn fold_ty(cx: &ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_float. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_istr. {/* no-op */ }\n+      ty_str. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n       ty_box(tm) {\n@@ -817,19 +817,19 @@ fn type_is_copyable(cx: &ctxt, ty: t) -> bool {\n \n fn type_is_sequence(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n-      ty_istr. { ret true; }\n+      ty_str. { ret true; }\n       ty_vec(_) { ret true; }\n       _ { ret false; }\n     }\n }\n \n fn type_is_str(cx: &ctxt, ty: t) -> bool {\n-    alt struct(cx, ty) { ty_istr. { ret true; } _ { ret false; } }\n+    alt struct(cx, ty) { ty_str. { ret true; } _ { ret false; } }\n }\n \n fn sequence_element_type(cx: &ctxt, ty: t) -> t {\n     alt struct(cx, ty) {\n-      ty_istr. { ret mk_mach(cx, ast::ty_u8); }\n+      ty_str. { ret mk_mach(cx, ast::ty_u8); }\n       ty_vec(mt) { ret mt.ty; }\n       _ { cx.sess.bug(\"sequence_element_type called on non-sequence value\"); }\n     }\n@@ -870,7 +870,7 @@ fn type_is_boxed(cx: &ctxt, ty: t) -> bool {\n fn type_is_vec(cx: &ctxt, ty: t) -> bool {\n     ret alt struct(cx, ty) {\n           ty_vec(_) { true }\n-          ty_istr. { true }\n+          ty_str. { true }\n           _ { false }\n         };\n }\n@@ -879,7 +879,7 @@ fn type_is_unique(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       ty_uniq(_) { ret true; }\n       ty_vec(_) { true }\n-      ty_istr. { true }\n+      ty_str. { true }\n       _ { ret false; }\n     }\n }\n@@ -985,7 +985,7 @@ fn type_kind(cx: &ctxt, ty: t) -> ast::kind {\n \n \n       // A handful of other built-in are unique too.\n-      ty_type. | ty_istr. | ty_native_fn(_, _, _) {\n+      ty_type. | ty_str. | ty_native_fn(_, _, _) {\n         // no-op\n       }\n \n@@ -1228,7 +1228,7 @@ fn type_is_pod(cx: &ctxt, ty: t) -> bool {\n \n \n       // Boxed types\n-      ty_istr. | ty_box(_) | ty_vec(_) | ty_fn(_, _, _, _, _) |\n+      ty_str. | ty_box(_) | ty_vec(_) | ty_fn(_, _, _, _, _) |\n       ty_native_fn(_, _, _) | ty_obj(_) {\n         result = false;\n       }\n@@ -1382,7 +1382,7 @@ fn hash_type_structure(st: &sty) -> uint {\n         }\n       }\n       ty_char. { ret 15u; }\n-      ty_istr. { ret 17u; }\n+      ty_str. { ret 17u; }\n       ty_tag(did, tys) {\n         let h = hash_def(18u, did);\n         for typ: t in tys { h += h << 5u + hash_ty(typ); }\n@@ -2141,7 +2141,7 @@ mod unify {\n           ty::ty_machine(_) { ret struct_cmp(cx, expected, actual); }\n           ty::ty_float. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_char. { ret struct_cmp(cx, expected, actual); }\n-          ty::ty_istr. { ret struct_cmp(cx, expected, actual); }\n+          ty::ty_str. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_type. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_native(ex_id) {\n             alt struct(cx.tcx, actual) {\n@@ -2740,7 +2740,7 @@ fn is_binopable(cx: &ctxt, ty: t, op: ast::binop) -> bool {\n           ty_machine(ast::ty_f64.) { tycat_float }\n           ty_char. { tycat_int }\n           ty_ptr(_) { tycat_int }\n-          ty_istr. { tycat_str }\n+          ty_str. { tycat_str }\n           ty_vec(_) { tycat_vec }\n           ty_rec(_) { tycat_struct }\n           ty_tup(_) { tycat_struct }"}, {"sha": "a83e426d4b383f26c2f526f7a6cce092da7fb2ec", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -326,7 +326,7 @@ fn ast_ty_to_ty(tcx: &ty::ctxt, getter: &ty_getter, ast_ty: &@ast::ty) ->\n       ast::ty_float. { typ = ty::mk_float(tcx); }\n       ast::ty_machine(tm) { typ = ty::mk_mach(tcx, tm); }\n       ast::ty_char. { typ = ty::mk_char(tcx); }\n-      ast::ty_istr. { typ = ty::mk_istr(tcx); }\n+      ast::ty_str. { typ = ty::mk_istr(tcx); }\n       ast::ty_box(mt) {\n         typ = ty::mk_box(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n@@ -1952,7 +1952,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         let ety = expr_ty(tcx, seq);\n         alt structure_of(fcx, expr.span, ety) {\n           ty::ty_vec(vec_elt_ty) { elt_ty = vec_elt_ty.ty; }\n-          ty::ty_istr. { elt_ty = ty::mk_mach(tcx, ast::ty_u8); }\n+          ty::ty_str. { elt_ty = ty::mk_mach(tcx, ast::ty_u8); }\n           _ {\n             tcx.sess.span_fatal(\n                 expr.span,\n@@ -2267,7 +2267,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         }\n         alt structure_of(fcx, expr.span, base_t) {\n           ty::ty_vec(mt) { write::ty_only_fixup(fcx, id, mt.ty); }\n-          ty::ty_istr. {\n+          ty::ty_str. {\n             let typ = ty::mk_mach(tcx, ast::ty_u8);\n             write::ty_only_fixup(fcx, id, typ);\n           }\n@@ -2731,7 +2731,7 @@ fn arg_is_argv_ty(tcx: &ty::ctxt, a: &ty::arg) -> bool {\n       ty::ty_vec(mt) {\n         if mt.mut != ast::imm { ret false; }\n         alt ty::struct(tcx, mt.ty) {\n-          ty::ty_istr. { ret true; }\n+          ty::ty_str. { ret true; }\n           _ { ret false; }\n         }\n       }"}, {"sha": "aecd78262ef15bee06df798e8724cdf6bb503cc2", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -302,7 +302,7 @@ tag ty_ {\n     ty_float;\n     ty_machine(ty_mach);\n     ty_char;\n-    ty_istr;\n+    ty_str;\n     ty_box(mt);\n     ty_vec(mt);\n     ty_ptr(mt);"}, {"sha": "9e45df8d11182138f8a222660fc70e4173c90f08", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -486,7 +486,7 @@ fn parse_ty(p: &parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, \"float\") {\n         t = ast::ty_float;\n     } else if eat_word(p, \"str\") {\n-        t = ast::ty_istr;\n+        t = ast::ty_str;\n     } else if eat_word(p, \"char\") {\n         t = ast::ty_char;\n         /*"}, {"sha": "442756a790d410478449f0fd917e26a3482a0607", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -275,7 +275,7 @@ fn print_type(s: &ps, ty: &@ast::ty) {\n       ast::ty_float. { word(s.s, \"float\"); }\n       ast::ty_machine(tm) { word(s.s, ast_util::ty_mach_to_str(tm)); }\n       ast::ty_char. { word(s.s, \"char\"); }\n-      ast::ty_istr. { word(s.s, \"str\"); }\n+      ast::ty_str. { word(s.s, \"str\"); }\n       ast::ty_box(mt) { word(s.s, \"@\"); print_mt(s, mt); }\n       ast::ty_vec(mt) {\n         word(s.s, \"[\");"}, {"sha": "e075b1d821c288ef7d09878f0fa7a503eb03a444", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -120,7 +120,7 @@ fn visit_ty<E>(t: &@ty, e: &E, v: &vt<E>) {\n       ty_uint. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_istr. {/* no-op */ }\n+      ty_str. {/* no-op */ }\n       ty_box(mt) { v.visit_ty(mt.ty, e, v); }\n       ty_vec(mt) { v.visit_ty(mt.ty, e, v); }\n       ty_ptr(mt) { v.visit_ty(mt.ty, e, v); }"}, {"sha": "7b2ce09451833a500fd43febb191e1c36e0f72a5", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=f1555e2ca88d3c300e1c92cdc4cbc5bf84de86cd", "patch": "@@ -107,7 +107,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n           ty_uint. { \"uint\" }\n           ty_machine(tm) { ty_mach_to_str(tm) }\n           ty_char. { \"char\" }\n-          ty_istr. { \"str\" }\n+          ty_str. { \"str\" }\n           ty_box(tm) { \"@\" + mt_to_str(cx, tm) }\n           ty_uniq(t) { \"~\" + ty_to_str(cx, t) }\n           ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }"}]}