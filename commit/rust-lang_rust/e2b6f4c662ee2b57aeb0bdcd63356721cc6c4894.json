{"sha": "e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjZmNGM2NjJlZTJiNTdhZWIwYmRjZDYzMzU2NzIxY2M2YzQ4OTQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-12T11:10:55Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-26T22:51:34Z"}, "message": "Move top-level Clean impl to function\n\nThis allows us to pass it a `&mut DocContext` which will allow removal\nof RefCells, etc. in the following commits. It's also somewhat a unique\nClean impl in that it previously ignored `self` (re-retriveing\nhir::Crate), which it no longer needs to do.", "tree": {"sha": "63c188234ee9377ac674f1c07f828b6742d065ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63c188234ee9377ac674f1c07f828b6742d065ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "html_url": "https://github.com/rust-lang/rust/commit/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77247acb1bbecff8acedefce3c6cc06d7787311", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77247acb1bbecff8acedefce3c6cc06d7787311", "html_url": "https://github.com/rust-lang/rust/commit/a77247acb1bbecff8acedefce3c6cc06d7787311"}], "stats": {"total": 170, "additions": 83, "deletions": 87}, "files": [{"sha": "19cb5ddb91e86d4863744d2eaf165557d55a12e6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 80, "deletions": 84, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "patch": "@@ -136,94 +136,90 @@ pub struct Crate {\n     pub collapsed: bool,\n }\n \n-impl Clean<Crate> for hir::Crate {\n-    // note that self here is ignored in favor of `cx.tcx.hir().krate()` since\n-    // that gets around tying self's lifetime to the '_ in cx.\n-    fn clean(&self, cx: &DocContext<'_>) -> Crate {\n-        use crate::visit_lib::LibEmbargoVisitor;\n-\n-        let v = crate::visit_ast::RustdocVisitor::new(&cx);\n-        let module = v.visit(cx.tcx.hir().krate());\n-\n-        {\n-            let mut r = cx.renderinfo.borrow_mut();\n-            r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n-            r.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n-            r.owned_box_did = cx.tcx.lang_items().owned_box();\n-        }\n-\n-        let mut externs = Vec::new();\n-        for &cnum in cx.tcx.crates().iter() {\n-            externs.push((cnum, cnum.clean(cx)));\n-            // Analyze doc-reachability for extern items\n-            LibEmbargoVisitor::new(cx).visit_lib(cnum);\n-        }\n-        externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n-\n-        // Clean the crate, translating the entire libsyntax AST to one that is\n-        // understood by rustdoc.\n-        let mut module = module.clean(cx);\n-        let mut masked_crates = FxHashSet::default();\n-\n-        match module.inner {\n-            ModuleItem(ref module) => {\n-                for it in &module.items {\n-                    // `compiler_builtins` should be masked too, but we can't apply\n-                    // `#[doc(masked)]` to the injected `extern crate` because it's unstable.\n-                    if it.is_extern_crate()\n-                        && (it.attrs.has_doc_flag(sym::masked)\n-                            || cx.tcx.is_compiler_builtins(it.def_id.krate))\n-                    {\n-                        masked_crates.insert(it.def_id.krate);\n-                    }\n-                }\n-            }\n-            _ => unreachable!(),\n-        }\n+pub fn krate(cx: &mut DocContext<'a>) -> Crate {\n+    use crate::visit_lib::LibEmbargoVisitor;\n \n-        let ExternalCrate { name, src, primitives, keywords, .. } = LOCAL_CRATE.clean(cx);\n-        {\n-            let m = match module.inner {\n-                ModuleItem(ref mut m) => m,\n-                _ => unreachable!(),\n-            };\n-            m.items.extend(primitives.iter().map(|&(def_id, prim, ref attrs)| {\n-                Item {\n-                    source: Span::empty(),\n-                    name: Some(prim.to_url_str().to_string()),\n-                    attrs: attrs.clone(),\n-                    visibility: Some(Public),\n-                    stability: get_stability(cx, def_id),\n-                    deprecation: get_deprecation(cx, def_id),\n-                    def_id,\n-                    inner: PrimitiveItem(prim),\n-                }\n-            }));\n-            m.items.extend(keywords.into_iter().map(|(def_id, kw, attrs)| {\n-                Item {\n-                    source: Span::empty(),\n-                    name: Some(kw.clone()),\n-                    attrs: attrs,\n-                    visibility: Some(Public),\n-                    stability: get_stability(cx, def_id),\n-                    deprecation: get_deprecation(cx, def_id),\n-                    def_id,\n-                    inner: KeywordItem(kw),\n+    let v = crate::visit_ast::RustdocVisitor::new(&cx);\n+    let module = v.visit(cx.tcx.hir().krate());\n+\n+    {\n+        let mut r = cx.renderinfo.borrow_mut();\n+        r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n+        r.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n+        r.owned_box_did = cx.tcx.lang_items().owned_box();\n+    }\n+\n+    let mut externs = Vec::new();\n+    for &cnum in cx.tcx.crates().iter() {\n+        externs.push((cnum, cnum.clean(cx)));\n+        // Analyze doc-reachability for extern items\n+        LibEmbargoVisitor::new(cx).visit_lib(cnum);\n+    }\n+    externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n+\n+    // Clean the crate, translating the entire libsyntax AST to one that is\n+    // understood by rustdoc.\n+    let mut module = module.clean(cx);\n+    let mut masked_crates = FxHashSet::default();\n+\n+    match module.inner {\n+        ModuleItem(ref module) => {\n+            for it in &module.items {\n+                // `compiler_builtins` should be masked too, but we can't apply\n+                // `#[doc(masked)]` to the injected `extern crate` because it's unstable.\n+                if it.is_extern_crate()\n+                    && (it.attrs.has_doc_flag(sym::masked)\n+                        || cx.tcx.is_compiler_builtins(it.def_id.krate))\n+                {\n+                    masked_crates.insert(it.def_id.krate);\n                 }\n-            }));\n+            }\n         }\n+        _ => unreachable!(),\n+    }\n \n-        Crate {\n-            name,\n-            version: None,\n-            src,\n-            module: Some(module),\n-            externs,\n-            primitives,\n-            external_traits: cx.external_traits.clone(),\n-            masked_crates,\n-            collapsed: false,\n-        }\n+    let ExternalCrate { name, src, primitives, keywords, .. } = LOCAL_CRATE.clean(cx);\n+    {\n+        let m = match module.inner {\n+            ModuleItem(ref mut m) => m,\n+            _ => unreachable!(),\n+        };\n+        m.items.extend(primitives.iter().map(|&(def_id, prim, ref attrs)| {\n+            Item {\n+                source: Span::empty(),\n+                name: Some(prim.to_url_str().to_string()),\n+                attrs: attrs.clone(),\n+                visibility: Some(Public),\n+                stability: get_stability(cx, def_id),\n+                deprecation: get_deprecation(cx, def_id),\n+                def_id,\n+                inner: PrimitiveItem(prim),\n+            }\n+        }));\n+        m.items.extend(keywords.into_iter().map(|(def_id, kw, attrs)| {\n+            Item {\n+                source: Span::empty(),\n+                name: Some(kw.clone()),\n+                attrs: attrs,\n+                visibility: Some(Public),\n+                stability: get_stability(cx, def_id),\n+                deprecation: get_deprecation(cx, def_id),\n+                def_id,\n+                inner: KeywordItem(kw),\n+            }\n+        }));\n+    }\n+\n+    Crate {\n+        name,\n+        version: None,\n+        src,\n+        module: Some(module),\n+        externs,\n+        primitives,\n+        external_traits: cx.external_traits.clone(),\n+        masked_crates,\n+        collapsed: false,\n     }\n }\n "}, {"sha": "45ebaa115063a7c91ca07cdb1bb53aacdf36aae1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "patch": "@@ -30,7 +30,7 @@ use std::rc::Rc;\n \n use crate::config::{Options as RustdocOptions, RenderOptions};\n use crate::clean;\n-use crate::clean::{Clean, MAX_DEF_ID, AttributesExt};\n+use crate::clean::{MAX_DEF_ID, AttributesExt};\n use crate::html::render::RenderInfo;\n \n use crate::passes;\n@@ -363,7 +363,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut renderinfo = RenderInfo::default();\n             renderinfo.access_levels = access_levels;\n \n-            let ctxt = DocContext {\n+            let mut ctxt = DocContext {\n                 tcx,\n                 resolver,\n                 cstore: compiler.cstore().clone(),\n@@ -383,7 +383,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             };\n             debug!(\"crate: {:?}\", tcx.hir().krate());\n \n-            let mut krate = tcx.hir().krate().clean(&ctxt);\n+            let mut krate = clean::krate(&mut ctxt);\n \n             fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n                 let mut msg = diag.struct_warn(&format!(\"the `#![doc({})]` attribute is \\"}]}