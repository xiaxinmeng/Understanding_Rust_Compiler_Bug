{"sha": "0ec4513d5fe23fabe353e4773682ddb341c9d20f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzQ1MTNkNWZlMjNmYWJlMzUzZTQ3NzM2ODJkZGIzNDFjOWQyMGY=", "commit": {"author": {"name": "Stephen Crane", "email": "sjc@immunant.com", "date": "2019-09-25T18:45:38Z"}, "committer": {"name": "Stephen Crane", "email": "sjc@immunant.com", "date": "2019-09-26T00:45:15Z"}, "message": "Fix format macro expansions spans to be macro-generated\n\nNew Exprs generated as part of the format macro expansion should get the macro\nexpansion span which has an expansion context, not the span of the format string\nwhich does not.", "tree": {"sha": "eadfee784797a1ef47e4db0f3397260355d4a368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eadfee784797a1ef47e4db0f3397260355d4a368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec4513d5fe23fabe353e4773682ddb341c9d20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4513d5fe23fabe353e4773682ddb341c9d20f", "html_url": "https://github.com/rust-lang/rust/commit/0ec4513d5fe23fabe353e4773682ddb341c9d20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4513d5fe23fabe353e4773682ddb341c9d20f/comments", "author": {"login": "rinon", "id": 970543, "node_id": "MDQ6VXNlcjk3MDU0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/970543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rinon", "html_url": "https://github.com/rinon", "followers_url": "https://api.github.com/users/rinon/followers", "following_url": "https://api.github.com/users/rinon/following{/other_user}", "gists_url": "https://api.github.com/users/rinon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rinon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rinon/subscriptions", "organizations_url": "https://api.github.com/users/rinon/orgs", "repos_url": "https://api.github.com/users/rinon/repos", "events_url": "https://api.github.com/users/rinon/events{/privacy}", "received_events_url": "https://api.github.com/users/rinon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rinon", "id": 970543, "node_id": "MDQ6VXNlcjk3MDU0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/970543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rinon", "html_url": "https://github.com/rinon", "followers_url": "https://api.github.com/users/rinon/followers", "following_url": "https://api.github.com/users/rinon/following{/other_user}", "gists_url": "https://api.github.com/users/rinon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rinon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rinon/subscriptions", "organizations_url": "https://api.github.com/users/rinon/orgs", "repos_url": "https://api.github.com/users/rinon/repos", "events_url": "https://api.github.com/users/rinon/events{/privacy}", "received_events_url": "https://api.github.com/users/rinon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2c29c43206d6e2f1091fa278d2792ea10e3659", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2c29c43206d6e2f1091fa278d2792ea10e3659", "html_url": "https://github.com/rust-lang/rust/commit/6c2c29c43206d6e2f1091fa278d2792ea10e3659"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "8fc64021b51fcc50af8f0cfda4a62bcd9768ede5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4513d5fe23fabe353e4773682ddb341c9d20f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4513d5fe23fabe353e4773682ddb341c9d20f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=0ec4513d5fe23fabe353e4773682ddb341c9d20f", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Now create a vector containing all the arguments\n         let args = locals.into_iter().chain(counts.into_iter());\n \n-        let args_array = self.ecx.expr_vec(self.fmtsp, args.collect());\n+        let args_array = self.ecx.expr_vec(self.macsp, args.collect());\n \n         // Constructs an AST equivalent to:\n         //\n@@ -724,12 +724,12 @@ impl<'a, 'b> Context<'a, 'b> {\n         //\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n-        let pat = self.ecx.pat_tuple(self.fmtsp, pats);\n-        let arm = self.ecx.arm(self.fmtsp, pat, args_array);\n-        let head = self.ecx.expr(self.fmtsp, ast::ExprKind::Tup(heads));\n-        let result = self.ecx.expr_match(self.fmtsp, head, vec![arm]);\n+        let pat = self.ecx.pat_tuple(self.macsp, pats);\n+        let arm = self.ecx.arm(self.macsp, pat, args_array);\n+        let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n+        let result = self.ecx.expr_match(self.macsp, head, vec![arm]);\n \n-        let args_slice = self.ecx.expr_addr_of(self.fmtsp, result);\n+        let args_slice = self.ecx.expr_addr_of(self.macsp, result);\n \n         // Now create the fmt::Arguments struct with all our locals we created.\n         let (fn_name, fn_args) = if self.all_pieces_simple {"}, {"sha": "88f70f584022d39d520079b39b6fe613233fbde6", "filename": "src/test/ui/issues/issue-27592.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4513d5fe23fabe353e4773682ddb341c9d20f/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4513d5fe23fabe353e4773682ddb341c9d20f/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs?ref=0ec4513d5fe23fabe353e4773682ddb341c9d20f", "patch": "@@ -15,5 +15,5 @@ impl ::std::fmt::Write for Stream {\n fn main() {\n     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n     //~^ ERROR cannot return value referencing temporary value\n-    //~| ERROR cannot return value referencing temporary value\n+    //~| ERROR cannot return reference to temporary value\n }"}, {"sha": "c8649d82d7451c9a2cfe8fe5debe645744558e39", "filename": "src/test/ui/issues/issue-27592.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4513d5fe23fabe353e4773682ddb341c9d20f/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4513d5fe23fabe353e4773682ddb341c9d20f/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr?ref=0ec4513d5fe23fabe353e4773682ddb341c9d20f", "patch": "@@ -7,14 +7,11 @@ LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              |                  temporary value created here\n    |              returns a value referencing data owned by the current function\n \n-error[E0515]: cannot return value referencing temporary value\n+error[E0515]: cannot return reference to temporary value\n   --> $DIR/issue-27592.rs:16:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |              ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |            |\n-   |              |            temporary value created here\n-   |              returns a value referencing data owned by the current function\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n "}]}