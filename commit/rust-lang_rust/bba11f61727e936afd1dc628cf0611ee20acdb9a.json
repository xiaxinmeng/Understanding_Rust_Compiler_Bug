{"sha": "bba11f61727e936afd1dc628cf0611ee20acdb9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYTExZjYxNzI3ZTkzNmFmZDFkYzYyOGNmMDYxMWVlMjBhY2RiOWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:37:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-26T09:37:21Z"}, "message": "Merge pull request #646 from bjorn3/wip_checked_binops2\n\nImplement checked add and sub", "tree": {"sha": "f77ff990d44133e29c96ef03f825d9a9e1f46db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f77ff990d44133e29c96ef03f825d9a9e1f46db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba11f61727e936afd1dc628cf0611ee20acdb9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOsnRCRBK7hj4Ov3rIwAAdHIIABUoauRk6rf0x6T8BC7DepCe\nFoX84xTxaxmU7cCrh9gi5Z67ZViDEEe24yVMF2tl0XMAP+7LE2G31yTMgPOspZoa\nRsQsr1itnJOCQGUz4I0vEplYJ8XK6eoXiJCzYUPJU92i/6QQm25tVjdzHL6V77He\nO/u9Eq/nJtOTYjXz7uO3/4n3DU2NnG3ZfGGz0Urk0Exs5uSUBwjS+BGNwBr4187U\naR879mciAPi+vSHF3ffGLeCxs/s1XZvEq35bamXFDnxvyz5mun47oMeixPuv6eCm\nBQXF1gCsKOvZFawk6+NlUheXkUAhz9LVVGKPJc2pB/msuf4qddQJwKjflRhNVHQ=\n=VYTR\n-----END PGP SIGNATURE-----\n", "payload": "tree f77ff990d44133e29c96ef03f825d9a9e1f46db1\nparent 92f2b6243d717b6ff711fdf9fe9d579d41669ee1\nparent bf3ec3be3e595780d842ac3069bb07f3c50f54b8\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1564133841 +0200\ncommitter GitHub <noreply@github.com> 1564133841 +0200\n\nMerge pull request #646 from bjorn3/wip_checked_binops2\n\nImplement checked add and sub"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba11f61727e936afd1dc628cf0611ee20acdb9a", "html_url": "https://github.com/rust-lang/rust/commit/bba11f61727e936afd1dc628cf0611ee20acdb9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba11f61727e936afd1dc628cf0611ee20acdb9a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f2b6243d717b6ff711fdf9fe9d579d41669ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f2b6243d717b6ff711fdf9fe9d579d41669ee1", "html_url": "https://github.com/rust-lang/rust/commit/92f2b6243d717b6ff711fdf9fe9d579d41669ee1"}, {"sha": "bf3ec3be3e595780d842ac3069bb07f3c50f54b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ec3be3e595780d842ac3069bb07f3c50f54b8", "html_url": "https://github.com/rust-lang/rust/commit/bf3ec3be3e595780d842ac3069bb07f3c50f54b8"}], "stats": {"total": 130, "additions": 119, "deletions": 11}, "files": [{"sha": "8c372450abd803ee1b8e996471496920c90e178c", "filename": "example/mini_core.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bba11f61727e936afd1dc628cf0611ee20acdb9a/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba11f61727e936afd1dc628cf0611ee20acdb9a/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=bba11f61727e936afd1dc628cf0611ee20acdb9a", "patch": "@@ -128,6 +128,14 @@ impl Add for u8 {\n     }\n }\n \n+impl Add for i8 {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        self + rhs\n+    }\n+}\n+\n impl Add for usize {\n     type Output = Self;\n \n@@ -151,6 +159,30 @@ impl Sub for usize {\n     }\n }\n \n+impl Sub for u8 {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: Self) -> Self {\n+        self - rhs\n+    }\n+}\n+\n+impl Sub for i8 {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: Self) -> Self {\n+        self - rhs\n+    }\n+}\n+\n+impl Sub for i16 {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: Self) -> Self {\n+        self - rhs\n+    }\n+}\n+\n #[lang = \"bitor\"]\n pub trait BitOr<RHS = Self> {\n     type Output;\n@@ -270,6 +302,22 @@ pub trait Neg {\n     fn neg(self) -> Self::Output;\n }\n \n+impl Neg for i8 {\n+    type Output = i8;\n+\n+    fn neg(self) -> i8 {\n+        -self\n+    }\n+}\n+\n+impl Neg for i16 {\n+    type Output = i16;\n+\n+    fn neg(self) -> i16 {\n+        -self\n+    }\n+}\n+\n impl Neg for isize {\n     type Output = isize;\n "}, {"sha": "15f0442b624ec87cefa6865d88f6d44285a0a840", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bba11f61727e936afd1dc628cf0611ee20acdb9a/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba11f61727e936afd1dc628cf0611ee20acdb9a/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=bba11f61727e936afd1dc628cf0611ee20acdb9a", "patch": "@@ -236,4 +236,21 @@ fn main() {\n     unsafe { assert_eq!(ABC as usize, 0); }\n \n     &mut (|| Some(0 as *const ())) as &mut FnMut() -> Option<*const ()>;\n+\n+    // checked binops\n+    let zeroi8 = 0i8;\n+    let oneu8 = 1u8;\n+    let onei8 = 1i8;\n+    zeroi8 - 1;\n+    oneu8 - 1;\n+    zeroi8 - -2i8;\n+    #[allow(unreachable_code)]\n+    {\n+        if false {\n+            let minustwoi8 = -2i8;\n+            oneu8 + 255;\n+            onei8 + 127;\n+            minustwoi8 - 127;\n+        }\n+    }\n }"}, {"sha": "7b29d15e56b1ae8f6e27e968d60a5a5cb642fb6c", "filename": "src/base.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/bba11f61727e936afd1dc628cf0611ee20acdb9a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba11f61727e936afd1dc628cf0611ee20acdb9a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bba11f61727e936afd1dc628cf0611ee20acdb9a", "patch": "@@ -241,7 +241,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                 } else {\n                     fx.bcx.ins().brz(cond, target, &[]);\n                 };\n-                trap_panic(fx, format!(\"[panic] Assert {:?} failed.\", msg));\n+                trap_panic(fx, format!(\"[panic] Assert {:?} failed at {:?}.\", msg, bb_data.terminator().source_info.span));\n             }\n \n             TerminatorKind::SwitchInt {\n@@ -948,17 +948,62 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n \n     let lhs = in_lhs.load_scalar(fx);\n     let rhs = in_rhs.load_scalar(fx);\n-    let res = match bin_op {\n-        BinOp::Add => fx.bcx.ins().iadd(lhs, rhs),\n-        BinOp::Sub => fx.bcx.ins().isub(lhs, rhs),\n-        BinOp::Mul => fx.bcx.ins().imul(lhs, rhs),\n-        BinOp::Shl => fx.bcx.ins().ishl(lhs, rhs),\n+    let (res, has_overflow) = match bin_op {\n+        BinOp::Add => {\n+            /*let (val, c_out) = fx.bcx.ins().iadd_cout(lhs, rhs);\n+            (val, c_out)*/\n+            // FIXME(CraneStation/cranelift#849) legalize iadd_cout for i8 and i16\n+            let val = fx.bcx.ins().iadd(lhs, rhs);\n+            let has_overflow = if !signed {\n+                fx.bcx.ins().icmp(IntCC::UnsignedLessThan, val, lhs)\n+            } else {\n+                let rhs_is_negative = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, rhs, 0);\n+                let slt = fx.bcx.ins().icmp(IntCC::SignedLessThan, val, lhs);\n+                fx.bcx.ins().bxor(rhs_is_negative, slt)\n+            };\n+            (val, has_overflow)\n+        }\n+        BinOp::Sub => {\n+            /*let (val, b_out) = fx.bcx.ins().isub_bout(lhs, rhs);\n+            (val, b_out)*/\n+            // FIXME(CraneStation/cranelift#849) legalize isub_bout for i8 and i16\n+            let val = fx.bcx.ins().isub(lhs, rhs);\n+            let has_overflow = if !signed {\n+                fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, val, lhs)\n+            } else {\n+                let rhs_is_negative = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, rhs, 0);\n+                let sgt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, val, lhs);\n+                fx.bcx.ins().bxor(rhs_is_negative, sgt)\n+            };\n+            (val, has_overflow)\n+        }\n+        BinOp::Mul => {\n+            let val = fx.bcx.ins().imul(lhs, rhs);\n+            /*let val_hi = if !signed {\n+                fx.bcx.ins().umulhi(lhs, rhs)\n+            } else {\n+                fx.bcx.ins().smulhi(lhs, rhs)\n+            };\n+            let has_overflow = fx.bcx.ins().icmp_imm(IntCC::NotEqual, val_hi, 0);*/\n+            // TODO: check for overflow\n+            let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n+            (val, has_overflow)\n+        }\n+        BinOp::Shl => {\n+            let val = fx.bcx.ins().ishl(lhs, rhs);\n+            // TODO: check for overflow\n+            let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n+            (val, has_overflow)\n+        }\n         BinOp::Shr => {\n-            if !signed {\n+            let val = if !signed {\n                 fx.bcx.ins().ushr(lhs, rhs)\n             } else {\n                 fx.bcx.ins().sshr(lhs, rhs)\n-            }\n+            };\n+            // TODO: check for overflow\n+            let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n+            (val, has_overflow)\n         }\n         _ => bug!(\n             \"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\",\n@@ -968,9 +1013,7 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n         ),\n     };\n \n-    // TODO: check for overflow\n-    let has_overflow = fx.bcx.ins().iconst(types::I8, 0);\n-\n+    let has_overflow = fx.bcx.ins().bint(types::I8, has_overflow);\n     let out_place = CPlace::new_stack_slot(fx, out_ty);\n     let out_layout = out_place.layout();\n     out_place.write_cvalue(fx, CValue::by_val_pair(res, has_overflow, out_layout));"}]}