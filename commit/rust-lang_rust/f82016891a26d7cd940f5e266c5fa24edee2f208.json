{"sha": "f82016891a26d7cd940f5e266c5fa24edee2f208", "node_id": "C_kwDOAAsO6NoAKGY4MjAxNjg5MWEyNmQ3Y2Q5NDBmNWUyNjZjNWZhMjRlZGVlMmYyMDg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T12:58:33Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T12:58:33Z"}, "message": "Fix cpuid replacement shim", "tree": {"sha": "0cf58d8da324875f7f97290c5fe4b97c674fb336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf58d8da324875f7f97290c5fe4b97c674fb336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82016891a26d7cd940f5e266c5fa24edee2f208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82016891a26d7cd940f5e266c5fa24edee2f208", "html_url": "https://github.com/rust-lang/rust/commit/f82016891a26d7cd940f5e266c5fa24edee2f208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82016891a26d7cd940f5e266c5fa24edee2f208/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "241eae76e209b578b75b916e0e9a7d6ea24deb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/241eae76e209b578b75b916e0e9a7d6ea24deb43", "html_url": "https://github.com/rust-lang/rust/commit/241eae76e209b578b75b916e0e9a7d6ea24deb43"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "3fcc84d39295f42328b1f1aa515ea7f0932ea543", "filename": "src/inline_asm.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f82016891a26d7cd940f5e266c5fa24edee2f208/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82016891a26d7cd940f5e266c5fa24edee2f208/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=f82016891a26d7cd940f5e266c5fa24edee2f208", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         }\n \n         // Used by stdarch\n-        if template[0] == InlineAsmTemplatePiece::String(\"movq %rbx, \".to_string())\n+        if template[0] == InlineAsmTemplatePiece::String(\"mov \".to_string())\n             && matches!(\n                 template[1],\n                 InlineAsmTemplatePiece::Placeholder {\n@@ -36,24 +36,26 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                     span: _\n                 }\n             )\n-            && template[2] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n-            && template[3] == InlineAsmTemplatePiece::String(\"cpuid\".to_string())\n-            && template[4] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n-            && template[5] == InlineAsmTemplatePiece::String(\"xchgq %rbx, \".to_string())\n+            && template[2] == InlineAsmTemplatePiece::String(\", rbx\".to_string())\n+            && template[3] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n+            && template[4] == InlineAsmTemplatePiece::String(\"cpuid\".to_string())\n+            && template[5] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n+            && template[6] == InlineAsmTemplatePiece::String(\"xchg \".to_string())\n             && matches!(\n-                template[6],\n+                template[7],\n                 InlineAsmTemplatePiece::Placeholder {\n                     operand_idx: 0,\n                     modifier: Some('r'),\n                     span: _\n                 }\n             )\n+            && template[8] == InlineAsmTemplatePiece::String(\", rbx\".to_string())\n         {\n             assert_eq!(operands.len(), 4);\n             let (leaf, eax_place) = match operands[1] {\n                 InlineAsmOperand::InOut {\n                     reg: InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::ax)),\n-                    late: true,\n+                    late: _,\n                     ref in_value,\n                     out_place: Some(out_place),\n                 } => (\n@@ -68,15 +70,15 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                         InlineAsmRegOrRegClass::RegClass(InlineAsmRegClass::X86(\n                             X86InlineAsmRegClass::reg,\n                         )),\n-                    late: true,\n+                    late: _,\n                     place: Some(place),\n                 } => crate::base::codegen_place(fx, place),\n                 _ => unreachable!(),\n             };\n             let (sub_leaf, ecx_place) = match operands[2] {\n                 InlineAsmOperand::InOut {\n                     reg: InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::cx)),\n-                    late: true,\n+                    late: _,\n                     ref in_value,\n                     out_place: Some(out_place),\n                 } => (\n@@ -88,7 +90,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n             let edx_place = match operands[3] {\n                 InlineAsmOperand::Out {\n                     reg: InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::dx)),\n-                    late: true,\n+                    late: _,\n                     place: Some(place),\n                 } => crate::base::codegen_place(fx, place),\n                 _ => unreachable!(),"}]}