{"sha": "0047e250909dd4739fcd20e77a49685f45490987", "node_id": "C_kwDOAAsO6NoAKDAwNDdlMjUwOTA5ZGQ0NzM5ZmNkMjBlNzdhNDk2ODVmNDU0OTA5ODc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T12:38:34Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T15:47:56Z"}, "message": "Add some docs to `bug`, `span_bug` and `delay_span_bug`", "tree": {"sha": "0d8d558e4ad845bf20ed47600c417a8c0a7c5be2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8d558e4ad845bf20ed47600c417a8c0a7c5be2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0047e250909dd4739fcd20e77a49685f45490987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0047e250909dd4739fcd20e77a49685f45490987", "html_url": "https://github.com/rust-lang/rust/commit/0047e250909dd4739fcd20e77a49685f45490987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0047e250909dd4739fcd20e77a49685f45490987/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e5fcb0b758fcf7f149cc9206155dcfa18ec909", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e5fcb0b758fcf7f149cc9206155dcfa18ec909", "html_url": "https://github.com/rust-lang/rust/commit/e5e5fcb0b758fcf7f149cc9206155dcfa18ec909"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "9ed31d9419ce778375297f4dc4797da0ddbe1c17", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0047e250909dd4739fcd20e77a49685f45490987", "patch": "@@ -973,6 +973,7 @@ impl Handler {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n \n+    /// For documentation on this, see `Session::delay_span_bug`.\n     #[track_caller]\n     pub fn delay_span_bug(\n         &self,\n@@ -1518,6 +1519,7 @@ impl HandlerInner {\n         self.emit_diagnostic(diag.set_span(sp));\n     }\n \n+    /// For documentation on this, see `Session::delay_span_bug`.\n     #[track_caller]\n     fn delay_span_bug(\n         &mut self,"}, {"sha": "5ca4d260179ceff29f982033a0a3cb4e171e089d", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=0047e250909dd4739fcd20e77a49685f45490987", "patch": "@@ -1,3 +1,13 @@\n+/// A macro for triggering an ICE.\n+/// Calling `bug` instead of panicking will result in a nicer error message and should\n+/// therefore be prefered over `panic`/`unreachable` or others.\n+///\n+/// If you have a span available, you should use [`span_bug`] instead.\n+///\n+/// If the bug should only be emitted when compilation didn't fail, [`Session::delay_span_bug`] may be useful.\n+///\n+/// [`Session::delay_span_bug`]: rustc_session::Session::delay_span_bug\n+/// [`span_bug`]: crate::span_bug\n #[macro_export]\n macro_rules! bug {\n     () => ( $crate::bug!(\"impossible case reached\") );\n@@ -8,6 +18,14 @@ macro_rules! bug {\n     });\n }\n \n+/// A macro for triggering an ICE with a span.\n+/// Calling `span_bug!` instead of panicking will result in a nicer error message and point\n+/// at the code the compiler was compiling when it ICEd. This is the preferred way to trigger\n+/// ICEs.\n+///\n+/// If the bug should only be emitted when compilation didn't fail, [`Session::delay_span_bug`] may be useful.\n+///\n+/// [`Session::delay_span_bug`]: rustc_session::Session::delay_span_bug\n #[macro_export]\n macro_rules! span_bug {\n     ($span:expr, $msg:expr) => ({ $crate::util::bug::span_bug_fmt($span, ::std::format_args!($msg)) });"}, {"sha": "b73ae593905353a8d99c97dff746f4db9c375870", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=0047e250909dd4739fcd20e77a49685f45490987", "patch": "@@ -35,8 +35,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n             (None, _) => panic_any(msg),\n         }\n-    });\n-    unreachable!();\n+    })\n }\n \n /// A query to trigger a `delay_span_bug`. Clearly, if one has a `tcx` one can already trigger a"}, {"sha": "1b2e8d9dc707bdd60673f4b2d859057899227588", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0047e250909dd4739fcd20e77a49685f45490987/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=0047e250909dd4739fcd20e77a49685f45490987", "patch": "@@ -590,7 +590,19 @@ impl Session {\n     pub fn warn(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().warn(msg)\n     }\n-    /// Delay a span_bug() call until abort_if_errors()\n+\n+    /// Ensures that compilation cannot succeed.\n+    ///\n+    /// If this function has been called but no errors have been emitted and\n+    /// compilation succeeds, it will cause an internal compiler error (ICE).\n+    ///\n+    /// This can be used in code paths that should never run on successful compilations.\n+    /// For example, it can be used to create an [`ErrorGuaranteed`]\n+    /// (but you should prefer threading through the [`ErrorGuaranteed`] from an error emission directly).\n+    ///\n+    /// If no span is available, use [`DUMMY_SP`].\n+    ///\n+    /// [`DUMMY_SP`]: rustc_span::DUMMY_SP\n     #[track_caller]\n     pub fn delay_span_bug<S: Into<MultiSpan>>(\n         &self,"}]}