{"sha": "1e112e94c3cd71f792e59318f7f7197999e30cf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMTEyZTk0YzNjZDcxZjc5MmU1OTMxOGY3ZjcxOTc5OTllMzBjZjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T10:48:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-04T15:04:51Z"}, "message": "Move `typeck` logically in the module tree out to the root and clamp\ndown on its exports. Remove some dead code that is revealed.", "tree": {"sha": "b5437ef4e9e20f9ff756d9f57525776e4e496314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5437ef4e9e20f9ff756d9f57525776e4e496314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e112e94c3cd71f792e59318f7f7197999e30cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e112e94c3cd71f792e59318f7f7197999e30cf6", "html_url": "https://github.com/rust-lang/rust/commit/1e112e94c3cd71f792e59318f7f7197999e30cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e112e94c3cd71f792e59318f7f7197999e30cf6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55470abe720114bd93e55bc7fa79d454186e9f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/55470abe720114bd93e55bc7fa79d454186e9f02", "html_url": "https://github.com/rust-lang/rust/commit/55470abe720114bd93e55bc7fa79d454186e9f02"}], "stats": {"total": 198, "additions": 90, "deletions": 108}, "files": [{"sha": "aa31144182dc2d43d028e55be83c2565462afbd5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -95,10 +95,12 @@ pub mod middle {\n     pub mod traits;\n     pub mod ty;\n     pub mod ty_fold;\n-    pub mod typeck;\n     pub mod weak_lang_items;\n }\n \n+#[path=\"middle/typeck/mod.rs\"]\n+pub mod typeck;\n+\n pub mod metadata;\n \n pub mod session;"}, {"sha": "2327bc957e617b7b2ebbe277485c5978fe04717e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -6192,3 +6192,29 @@ impl<'tcx> Repr<'tcx> for vtable_origin<'tcx> {\n         }\n     }\n }\n+\n+pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                            trait_ref: &ty::TraitRef<'tcx>,\n+                                            method: &ty::Method<'tcx>)\n+                                            -> subst::Substs<'tcx>\n+{\n+    /*!\n+     * Substitutes the values for the receiver's type parameters\n+     * that are found in method, leaving the method's type parameters\n+     * intact.\n+     */\n+\n+    let meth_tps: Vec<Ty> =\n+        method.generics.types.get_slice(subst::FnSpace)\n+              .iter()\n+              .map(|def| ty::mk_param_from_def(tcx, def))\n+              .collect();\n+    let meth_regions: Vec<ty::Region> =\n+        method.generics.regions.get_slice(subst::FnSpace)\n+              .iter()\n+              .map(|def| ty::ReEarlyBound(def.def_id.node, def.space,\n+                                          def.index, def.name))\n+              .collect();\n+    trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n+}\n+"}, {"sha": "f35b4d6602298ed3db77449455f43b6f935208da", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -54,11 +54,10 @@ use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, AssocSpace, SelfSpace, Subst, Substs};\n use middle::subst::{VecPerParamSpace};\n use middle::ty::{mod, Ty};\n-use middle::typeck::lookup_def_tcx;\n-use middle::typeck::rscope::{UnelidableRscope, RegionScope, SpecificRscope,\n-                             ShiftedRscope, BindingRscope};\n-use middle::typeck::rscope;\n-use middle::typeck::TypeAndSubsts;\n+use typeck::lookup_def_tcx;\n+use typeck::rscope::{mod, UnelidableRscope, RegionScope, SpecificRscope,\n+                     ShiftedRscope, BindingRscope};\n+use typeck::TypeAndSubsts;\n use util::common::ErrorReported;\n use util::nodemap::DefIdMap;\n use util::ppaux::{mod, Repr, UserString};"}, {"sha": "acc06cbd1cc87be59dab6462d53de07ac5eee4cd", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -12,10 +12,10 @@ use middle::def;\n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::subst::{Subst, Substs};\n use middle::ty::{mod, Ty};\n-use middle::typeck::check::{check_expr, check_expr_has_type, demand, FnCtxt};\n-use middle::typeck::check::{instantiate_path, structurally_resolved_type, valid_range_bounds};\n+use typeck::check::{check_expr, check_expr_has_type, demand, FnCtxt};\n+use typeck::check::{instantiate_path, structurally_resolved_type, valid_range_bounds};\n use middle::infer::{mod, resolve};\n-use middle::typeck::require_same_types;\n+use typeck::require_same_types;\n use util::nodemap::FnvHashMap;\n \n use std::cmp;"}, {"sha": "37059dec30f05507ffed71cc79446d0343dd229b", "filename": "src/librustc/middle/typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -17,8 +17,8 @@ use super::FnCtxt;\n use middle::infer;\n use middle::subst;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv;\n-use middle::typeck::rscope::RegionScope;\n+use typeck::astconv;\n+use typeck::rscope::RegionScope;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "694ed890d76e1a89eed9648ae8d7ced1184b79b9", "filename": "src/librustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -10,7 +10,7 @@\n \n \n use middle::ty::{mod, Ty};\n-use middle::typeck::check::FnCtxt;\n+use typeck::check::FnCtxt;\n use middle::infer;\n use middle::infer::resolve_type;\n use middle::infer::resolve::try_resolve_tvar_shallow;\n@@ -29,12 +29,6 @@ pub fn suptype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n         |sp, e, a, s| { fcx.report_mismatched_types(sp, e, a, s) })\n }\n \n-pub fn subtype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n-                         expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-    suptype_with_fn(fcx, sp, true, actual, expected,\n-        |sp, a, e, s| { fcx.report_mismatched_types(sp, e, a, s) })\n-}\n-\n pub fn suptype_with_fn<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                  sp: Span,\n                                  b_is_expected: bool,"}, {"sha": "078f4b64ac42bbd00d6f0f35c06b885bb659471f", "filename": "src/librustc/middle/typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -15,7 +15,7 @@ use middle::traits;\n use middle::ty::{mod, Ty};\n use middle::ty::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n                  MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n-use middle::typeck::check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n+use typeck::check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n use middle::infer;\n use middle::infer::InferCtxt;\n use middle::ty_fold::HigherRankedFoldable;"}, {"sha": "117eb385eff48788d8609c9761552ef34748a97e", "filename": "src/librustc/middle/typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -15,11 +15,11 @@ use middle::subst::{Subst};\n use middle::traits;\n use middle::ty::*;\n use middle::ty;\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::{FnCtxt};\n-use middle::typeck::check::{impl_self_ty};\n-use middle::typeck::check::vtable;\n-use middle::typeck::check::vtable::select_new_fcx_obligations;\n+use typeck::astconv::AstConv;\n+use typeck::check::{FnCtxt};\n+use typeck::check::{impl_self_ty};\n+use typeck::check::vtable;\n+use typeck::check::vtable::select_new_fcx_obligations;\n use middle::infer;\n use util::ppaux::{Repr, UserString};\n "}, {"sha": "73e7c5c663500c952a02867ca97f81282702e132", "filename": "src/librustc/middle/typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -19,8 +19,8 @@ use middle::traits;\n use middle::ty::{mod, Ty};\n use middle::ty::{MethodObject};\n use middle::ty_fold::HigherRankedFoldable;\n-use middle::typeck::check;\n-use middle::typeck::check::{FnCtxt, NoPreference};\n+use typeck::check;\n+use typeck::check::{FnCtxt, NoPreference};\n use middle::infer;\n use middle::infer::InferCtxt;\n use syntax::ast;"}, {"sha": "e2ec9ba1ccb42ced98aafc164e30e8ecda5a7af6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -96,11 +96,11 @@ use middle::ty::{mod, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n use middle::ty_fold::TypeFolder;\n-use middle::typeck::astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n-use middle::typeck::check::_match::pat_ctxt;\n-use middle::typeck::rscope::RegionScope;\n-use middle::typeck::{CrateCtxt, lookup_def_ccx, no_params, require_same_types};\n-use middle::typeck::TypeAndSubsts;\n+use typeck::astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n+use typeck::check::_match::pat_ctxt;\n+use typeck::rscope::RegionScope;\n+use typeck::{CrateCtxt, lookup_def_ccx, no_params, require_same_types};\n+use typeck::TypeAndSubsts;\n use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n@@ -1873,13 +1873,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Fetch type of `expr` after applying adjustments that have been recorded in the fcx.\n-    pub fn expr_ty_adjusted(&self, expr: &ast::Expr) -> Ty<'tcx> {\n-        let adjustments = self.inh.adjustments.borrow();\n-        let adjustment = adjustments.get(&expr.id);\n-        self.adjust_expr_ty(expr, adjustment)\n-    }\n-\n     /// Apply `adjustment` to the type of `expr`\n     pub fn adjust_expr_ty(&self,\n                           expr: &ast::Expr,\n@@ -1932,16 +1925,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         infer::mk_subty(self.infcx(), a_is_expected, origin, sub, sup)\n     }\n \n-    pub fn can_mk_subty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>)\n-                        -> Result<(), ty::type_err<'tcx>> {\n-        infer::can_mk_subty(self.infcx(), sub, sup)\n-    }\n-\n-    pub fn can_mk_eqty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>)\n-                       -> Result<(), ty::type_err<'tcx>> {\n-        infer::can_mk_eqty(self.infcx(), sub, sup)\n-    }\n-\n     pub fn mk_assignty(&self,\n                        expr: &ast::Expr,\n                        sub: Ty<'tcx>,"}, {"sha": "bb5f6a4cf48728443de779f8b931b4e292e021e5", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -120,10 +120,10 @@ use middle::region::CodeExtent;\n use middle::traits;\n use middle::ty::{ReScope};\n use middle::ty::{mod, Ty, MethodCall};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::FnCtxt;\n-use middle::typeck::check::regionmanip;\n-use middle::typeck::check::vtable;\n+use typeck::astconv::AstConv;\n+use typeck::check::FnCtxt;\n+use typeck::check::regionmanip;\n+use typeck::check::vtable;\n use middle::infer::resolve_and_force_all_but_regions;\n use middle::infer::resolve_type;\n use middle::infer;"}, {"sha": "46b21825854de0e6e4b00a4c54251b2ce8b2bc15", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -15,7 +15,7 @@ use middle::traits::{Obligation, obligation_for_builtin_bound};\n use middle::traits::{FulfillmentError, CodeSelectionError, CodeAmbiguity};\n use middle::traits::{ObligationCause};\n use middle::ty::{mod, Ty};\n-use middle::typeck::check::{FnCtxt,\n+use typeck::check::{FnCtxt,\n                             structurally_resolved_type};\n use middle::infer;\n use std::rc::Rc;"}, {"sha": "290658650ab3d5aaa0d9bbe47ecf9840d9c130ce", "filename": "src/librustc/middle/typeck/check/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -15,9 +15,9 @@ use middle::traits;\n use middle::ty::{mod, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::{FnCtxt, Inherited, blank_fn_ctxt, vtable, regionck};\n-use middle::typeck::CrateCtxt;\n+use typeck::astconv::AstConv;\n+use typeck::check::{FnCtxt, Inherited, blank_fn_ctxt, vtable, regionck};\n+use typeck::CrateCtxt;\n use util::ppaux::Repr;\n \n use std::collections::HashSet;"}, {"sha": "318e4a8fa6b6b00c4846fe4e9f558c4ecf655aa6", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -17,13 +17,13 @@ use middle::def;\n use middle::pat_util;\n use middle::ty::{mod, Ty, MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::check::FnCtxt;\n+use typeck::astconv::AstConv;\n+use typeck::check::FnCtxt;\n use middle::infer::{force_all, resolve_all, resolve_region};\n use middle::infer::resolve_type;\n use middle::infer;\n-use middle::typeck::write_substs_to_tcx;\n-use middle::typeck::write_ty_to_tcx;\n+use typeck::write_substs_to_tcx;\n+use typeck::write_ty_to_tcx;\n use util::ppaux::Repr;\n \n use std::cell::Cell;"}, {"sha": "d353ccf0b582741c9d3c5b4ec4626cb0814c4b59", "filename": "src/librustc/middle/typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -19,7 +19,6 @@\n use metadata::csearch::{each_impl, get_impl_trait};\n use metadata::csearch;\n use middle::subst;\n-use middle::subst::{Substs};\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{TypeTraitItemId, lookup_item_type};\n use middle::ty::{Ty, ty_bool, ty_char, ty_enum, ty_err};\n@@ -31,7 +30,7 @@ use middle::ty::{ty_closure};\n use middle::ty::type_is_ty_var;\n use middle::subst::Subst;\n use middle::ty;\n-use middle::typeck::CrateCtxt;\n+use typeck::CrateCtxt;\n use middle::infer::combine::Combine;\n use middle::infer::InferCtxt;\n use middle::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n@@ -477,27 +476,6 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     }\n }\n \n-/// Substitutes the values for the receiver's type parameters that are found in method, leaving the\n-/// method's type parameters intact.\n-pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                            trait_ref: &ty::TraitRef<'tcx>,\n-                                            method: &ty::Method<'tcx>)\n-                                            -> subst::Substs<'tcx>\n-{\n-    let meth_tps: Vec<Ty> =\n-        method.generics.types.get_slice(subst::FnSpace)\n-              .iter()\n-              .map(|def| ty::mk_param_from_def(tcx, def))\n-              .collect();\n-    let meth_regions: Vec<ty::Region> =\n-        method.generics.regions.get_slice(subst::FnSpace)\n-              .iter()\n-              .map(|def| ty::ReEarlyBound(def.def_id.node, def.space,\n-                                          def.index, def.name))\n-              .collect();\n-    trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n-}\n-\n fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                            impl_id: ast::DefId,\n                                            impl_poly_type: &ty::Polytype<'tcx>,\n@@ -507,7 +485,7 @@ fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                            provided_source: Option<ast::DefId>)\n                                            -> ty::Method<'tcx>\n {\n-    let combined_substs = make_substs_for_receiver_types(tcx, trait_ref, method);\n+    let combined_substs = ty::make_substs_for_receiver_types(tcx, trait_ref, method);\n \n     debug!(\"subst_receiver_types_in_method_ty: combined_substs={}\",\n            combined_substs.repr(tcx));"}, {"sha": "6b4df1f1dc9ad042e358d95f52931e4f6a9de086", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -43,13 +43,13 @@ use middle::ty::{ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{Polytype};\n use middle::ty::{mod, Ty};\n use middle::ty_fold::TypeFolder;\n-use middle::typeck::astconv::{AstConv, ty_of_arg};\n-use middle::typeck::astconv::{ast_ty_to_ty, ast_region_to_region};\n-use middle::typeck::astconv;\n+use typeck::astconv::{AstConv, ty_of_arg};\n+use typeck::astconv::{ast_ty_to_ty, ast_region_to_region};\n+use typeck::astconv;\n use middle::infer;\n-use middle::typeck::rscope::*;\n-use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n-use middle::typeck;\n+use typeck::rscope::*;\n+use typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n+use typeck;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux;\n use util::ppaux::{Repr,UserString};"}, {"sha": "c2b3fe1f00894e70a66ef64316c7c71ba0de08d0", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -76,32 +76,32 @@ use syntax::codemap::Span;\n use syntax::print::pprust::*;\n use syntax::{ast, ast_map, abi};\n \n-pub mod check;\n-pub mod rscope;\n-pub mod astconv;\n-pub mod collect;\n-pub mod coherence;\n-pub mod variance;\n-\n-pub struct TypeAndSubsts<'tcx> {\n+mod check;\n+mod rscope;\n+mod astconv;\n+mod collect;\n+mod coherence;\n+mod variance;\n+\n+struct TypeAndSubsts<'tcx> {\n     pub substs: subst::Substs<'tcx>,\n     pub ty: Ty<'tcx>,\n }\n \n-pub struct CrateCtxt<'a, 'tcx: 'a> {\n+struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: resolve::TraitMap,\n     tcx: &'a ty::ctxt<'tcx>\n }\n \n // Functions that write types into the node type table\n-pub fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n+fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n     debug!(\"write_ty_to_tcx({}, {})\", node_id, ppaux::ty_to_string(tcx, ty));\n     assert!(!ty::type_needs_infer(ty));\n     tcx.node_types.borrow_mut().insert(node_id, ty);\n }\n \n-pub fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                  node_id: ast::NodeId,\n                                  item_substs: ty::ItemSubsts<'tcx>) {\n     if !item_substs.is_noop() {\n@@ -114,7 +114,7 @@ pub fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,\n         tcx.item_substs.borrow_mut().insert(node_id, item_substs);\n     }\n }\n-pub fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n+fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n     match tcx.def_map.borrow().get(&id) {\n         Some(x) => x.clone(),\n         _ => {\n@@ -123,20 +123,20 @@ pub fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> def::Def {\n     }\n }\n \n-pub fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)\n+fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)\n                    -> def::Def {\n     lookup_def_tcx(ccx.tcx, sp, id)\n }\n \n-pub fn no_params<'tcx>(t: Ty<'tcx>) -> ty::Polytype<'tcx> {\n+fn no_params<'tcx>(t: Ty<'tcx>) -> ty::Polytype<'tcx> {\n     ty::Polytype {\n         generics: ty::Generics {types: VecPerParamSpace::empty(),\n                                 regions: VecPerParamSpace::empty()},\n         ty: t\n     }\n }\n \n-pub fn require_same_types<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n+fn require_same_types<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n                                     maybe_infcx: Option<&infer::InferCtxt<'a, 'tcx>>,\n                                     t1_is_expected: bool,\n                                     span: Span,"}, {"sha": "3888d5b0f53a9869608363779369b3fae2521c67", "filename": "src/librustc_trans/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -18,12 +18,13 @@ use lint;\n use llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n use metadata::creader;\n-use middle::{stability, ty, typeck, reachable};\n+use middle::{stability, ty, reachable};\n use middle::dependency_format;\n use middle;\n use plugin::load::Plugins;\n use plugin::registry::Registry;\n use plugin;\n+use rustc::typeck;\n use trans;\n \n use util::common::time;"}, {"sha": "746109ef1134690d2edf704d9832a3f77834383f", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e112e94c3cd71f792e59318f7f7197999e30cf6/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=1e112e94c3cd71f792e59318f7f7197999e30cf6", "patch": "@@ -50,7 +50,6 @@ use trans::type_::Type;\n use trans::type_of;\n use middle::ty::{mod, Ty};\n use middle::ty::MethodCall;\n-use middle::typeck::coherence::make_substs_for_receiver_types;\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n \n@@ -573,7 +572,7 @@ pub fn trans_fn_ref_with_substs<'blk, 'tcx>(\n \n                     // Compute the first substitution\n                     let first_subst =\n-                        make_substs_for_receiver_types(tcx, &*trait_ref, &*method)\n+                        ty::make_substs_for_receiver_types(tcx, &*trait_ref, &*method)\n                         .erase_regions();\n \n                     // And compose them"}]}