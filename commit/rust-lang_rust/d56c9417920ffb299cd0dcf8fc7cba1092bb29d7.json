{"sha": "d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "node_id": "C_kwDOAAsO6NoAKGQ1NmM5NDE3OTIwZmZiMjk5Y2QwZGNmOGZjN2NiYTEwOTJiYjI5ZDc", "commit": {"author": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-03-22T10:15:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T10:15:23Z"}, "message": "Merge branch 'rust-lang:master' into clear-with-drain", "tree": {"sha": "f792ddf1111a116d270c23539c40407d42e5d53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f792ddf1111a116d270c23539c40407d42e5d53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGtU7CRBK7hj4Ov3rIwAAG0AIAHTG4SFKE8FHMM6Ub/qF6nwA\niCABJisLqoFuHgLue//FPBy3AzQsaWeZLB6pD2mFfAfe0DpzFlpgZhW8+OUY4bPR\nwlv0mbZQqVqjdCfyfYaWy0BsyUZqHA/mSsJpipwr9riBwVyHP4TikYjHMrrtqS+U\nVqsKZ0Pr7rb/IFVO7bMCCfqgEw1HNw+2hqD/QVHQ0w54HxoUBWqhCdMhgz0C14sz\nQ8tNes9VLfi+dMGvRTSZ0CTUKn6FuWTQp+/WyJqycrAeiw43an+qZR2ruhdJkOUt\n62dbfg8c1GToS24rZ9EF4CXCeGgV2ELO2y3+1kR1zX0tvTOm8ue6Q8x8/1IhWoA=\n=pUn7\n-----END PGP SIGNATURE-----\n", "payload": "tree f792ddf1111a116d270c23539c40407d42e5d53e\nparent e8ec242a61e7fcadf1a8cb3c6f7ec162b5e2726e\nparent 583962150ba80745d5b54c0c1ea4902311259db8\nauthor bluthej <joffrey.bluthe@e.email> 1679480123 +0100\ncommitter GitHub <noreply@github.com> 1679480123 +0100\n\nMerge branch 'rust-lang:master' into clear-with-drain\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "html_url": "https://github.com/rust-lang/rust/commit/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/comments", "author": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ec242a61e7fcadf1a8cb3c6f7ec162b5e2726e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ec242a61e7fcadf1a8cb3c6f7ec162b5e2726e", "html_url": "https://github.com/rust-lang/rust/commit/e8ec242a61e7fcadf1a8cb3c6f7ec162b5e2726e"}, {"sha": "583962150ba80745d5b54c0c1ea4902311259db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/583962150ba80745d5b54c0c1ea4902311259db8", "html_url": "https://github.com/rust-lang/rust/commit/583962150ba80745d5b54c0c1ea4902311259db8"}], "stats": {"total": 153, "additions": 147, "deletions": 6}, "files": [{"sha": "2d30e77d55dedf146f2fce6bcc7ed2b233b851e4", "filename": "clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.69.0\"]\n     pub REDUNDANT_ASYNC_BLOCK,\n-    complexity,\n+    nursery,\n     \"`async { future.await }` can be replaced by `future`\"\n }\n declare_lint_pass!(RedundantAsyncBlock => [REDUNDANT_ASYNC_BLOCK]);\n@@ -48,6 +48,11 @@ impl EarlyLintPass for RedundantAsyncBlock {\n             !future.span.from_expansion() &&\n             !await_in_expr(future)\n         {\n+            if captures_value(last) {\n+                // If the async block captures variables then there is no equivalence.\n+                return;\n+            }\n+\n             span_lint_and_sugg(\n                 cx,\n                 REDUNDANT_ASYNC_BLOCK,\n@@ -82,3 +87,33 @@ impl<'ast> AstVisitor<'ast> for AwaitDetector {\n         }\n     }\n }\n+\n+/// Check whether an expression may have captured a local variable.\n+/// This is done by looking for paths with only one segment, except as\n+/// a prefix of `.await` since this would be captured by value.\n+///\n+/// This function will sometimes return `true` even tough there are no\n+/// captures happening: at the AST level, it is impossible to\n+/// dinstinguish a function call from a call to a closure which comes\n+/// from the local environment.\n+fn captures_value(expr: &Expr) -> bool {\n+    let mut detector = CaptureDetector::default();\n+    detector.visit_expr(expr);\n+    detector.capture_found\n+}\n+\n+#[derive(Default)]\n+struct CaptureDetector {\n+    capture_found: bool,\n+}\n+\n+impl<'ast> AstVisitor<'ast> for CaptureDetector {\n+    fn visit_expr(&mut self, ex: &'ast Expr) {\n+        match (&ex.kind, self.capture_found) {\n+            (ExprKind::Await(fut), _) if matches!(fut.kind, ExprKind::Path(..)) => (),\n+            (ExprKind::Path(_, path), _) if path.segments.len() == 1 => self.capture_found = true,\n+            (_, false) => rustc_ast::visit::walk_expr(self, ex),\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "d26b7a332cbbf6095681174cf3d051db232db0ee", "filename": "tests/ui/redundant_async_block.fixed", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/tests%2Fui%2Fredundant_async_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/tests%2Fui%2Fredundant_async_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.fixed?ref=d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "patch": "@@ -3,6 +3,8 @@\n #![allow(unused)]\n #![warn(clippy::redundant_async_block)]\n \n+use std::future::Future;\n+\n async fn func1(n: usize) -> usize {\n     n + 1\n }\n@@ -62,3 +64,48 @@ fn main() {\n     let fut = async_await_parameter_in_macro!(func2());\n     let fut = async_await_in_macro!(std::convert::identity);\n }\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_local() -> impl Future<Output = i32> {\n+    // Lint\n+    let fut = async { 17 };\n+    fut\n+}\n+\n+fn capture_local_closure(s: &str) -> impl Future<Output = &str> {\n+    let f = move || std::future::ready(s);\n+    // Do not lint: `f` would not live long enough\n+    async move { f().await }\n+}\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_arg(s: &str) -> impl Future<Output = &str> {\n+    // Lint\n+    let fut = async move { s };\n+    fut\n+}\n+\n+#[derive(Debug, Clone)]\n+struct F {}\n+\n+impl F {\n+    async fn run(&self) {}\n+}\n+\n+pub async fn run() {\n+    let f = F {};\n+    let c = f.clone();\n+    // Do not lint: `c` would not live long enough\n+    spawn(async move { c.run().await });\n+    let _f = f;\n+}\n+\n+fn spawn<F: Future + 'static>(_: F) {}\n+\n+async fn work(_: &str) {}\n+\n+fn capture() {\n+    let val = \"Hello World\".to_owned();\n+    // Do not lint: `val` would not live long enough\n+    spawn(async { work(&{ val }).await });\n+}"}, {"sha": "04726e6280508d11650049b90a33094a0f37e631", "filename": "tests/ui/redundant_async_block.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/tests%2Fui%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/tests%2Fui%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.rs?ref=d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "patch": "@@ -3,6 +3,8 @@\n #![allow(unused)]\n #![warn(clippy::redundant_async_block)]\n \n+use std::future::Future;\n+\n async fn func1(n: usize) -> usize {\n     n + 1\n }\n@@ -62,3 +64,48 @@ fn main() {\n     let fut = async_await_parameter_in_macro!(func2());\n     let fut = async_await_in_macro!(std::convert::identity);\n }\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_local() -> impl Future<Output = i32> {\n+    // Lint\n+    let fut = async { 17 };\n+    async move { fut.await }\n+}\n+\n+fn capture_local_closure(s: &str) -> impl Future<Output = &str> {\n+    let f = move || std::future::ready(s);\n+    // Do not lint: `f` would not live long enough\n+    async move { f().await }\n+}\n+\n+#[allow(clippy::let_and_return)]\n+fn capture_arg(s: &str) -> impl Future<Output = &str> {\n+    // Lint\n+    let fut = async move { s };\n+    async move { fut.await }\n+}\n+\n+#[derive(Debug, Clone)]\n+struct F {}\n+\n+impl F {\n+    async fn run(&self) {}\n+}\n+\n+pub async fn run() {\n+    let f = F {};\n+    let c = f.clone();\n+    // Do not lint: `c` would not live long enough\n+    spawn(async move { c.run().await });\n+    let _f = f;\n+}\n+\n+fn spawn<F: Future + 'static>(_: F) {}\n+\n+async fn work(_: &str) {}\n+\n+fn capture() {\n+    let val = \"Hello World\".to_owned();\n+    // Do not lint: `val` would not live long enough\n+    spawn(async { work(&{ val }).await });\n+}"}, {"sha": "1a1c1603e0809ea6a56821231fbb2f3be478d35d", "filename": "tests/ui/redundant_async_block.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/tests%2Fui%2Fredundant_async_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7/tests%2Fui%2Fredundant_async_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.stderr?ref=d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "patch": "@@ -1,28 +1,40 @@\n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:13:13\n+  --> $DIR/redundant_async_block.rs:15:13\n    |\n LL |     let x = async { f.await };\n    |             ^^^^^^^^^^^^^^^^^ help: you can reduce it to: `f`\n    |\n    = note: `-D clippy::redundant-async-block` implied by `-D warnings`\n \n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:46:16\n+  --> $DIR/redundant_async_block.rs:48:16\n    |\n LL |     let fut2 = async { fut1.await };\n    |                ^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n \n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:49:16\n+  --> $DIR/redundant_async_block.rs:51:16\n    |\n LL |     let fut2 = async move { fut1.await };\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n \n error: this async expression only awaits a single future\n-  --> $DIR/redundant_async_block.rs:51:15\n+  --> $DIR/redundant_async_block.rs:53:15\n    |\n LL |     let fut = async { async { 42 }.await };\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `async { 42 }`\n \n-error: aborting due to 4 previous errors\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:72:5\n+   |\n+LL |     async move { fut.await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:85:5\n+   |\n+LL |     async move { fut.await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut`\n+\n+error: aborting due to 6 previous errors\n "}]}