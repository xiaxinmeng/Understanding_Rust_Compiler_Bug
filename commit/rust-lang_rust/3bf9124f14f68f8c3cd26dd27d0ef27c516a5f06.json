{"sha": "3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "node_id": "C_kwDOAAsO6NoAKDNiZjkxMjRmMTRmNjhmOGMzY2QyNmRkMjdkMGVmMjdjNTE2YTVmMDY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-03-14T16:55:14Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-03-15T14:37:49Z"}, "message": "Support other types of pluralization in pluralize macro", "tree": {"sha": "514047e6dbfc97972aee02110fc0a89ab493992c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514047e6dbfc97972aee02110fc0a89ab493992c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "html_url": "https://github.com/rust-lang/rust/commit/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bce19cf7f19ee5729defaccc86b068cc3c206c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce19cf7f19ee5729defaccc86b068cc3c206c9c", "html_url": "https://github.com/rust-lang/rust/commit/bce19cf7f19ee5729defaccc86b068cc3c206c9c"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "60644e0c81781cffd1eccd5563a7103c4b96ce6a", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -20,6 +20,12 @@ macro_rules! pluralize {\n     ($x:expr) => {\n         if $x != 1 { \"s\" } else { \"\" }\n     };\n+    (\"is\", $x:expr) => {\n+        if $x == 1 { \"is\" } else { \"are\" }\n+    };\n+    (\"this\", $x:expr) => {\n+        if $x == 1 { \"this\" } else { \"these\" }\n+    };\n }\n \n /// Indicates the confidence in the correctness of a suggestion."}, {"sha": "2c3c61259c473b604587a8a6efb2811fe4440fc2", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -400,7 +400,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 Pointer::new(*alloc, access.access_offset),\n                 access.uninit_size.bytes(),\n                 pluralize!(access.uninit_size.bytes()),\n-                if access.uninit_size.bytes() != 1 { \"are\" } else { \"is\" },\n+                pluralize!(\"is\", access.uninit_size.bytes()),\n                 Pointer::new(*alloc, access.uninit_offset),\n             ),\n             InvalidUninitBytes(None) => write!("}, {"sha": "3aad189b222ea7636558b6797c381da8b8d75c68", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -847,7 +847,7 @@ fn foo(&self) -> Self::T { String::new() }\n                 \"{some} method{s} {are} available that return{r} `{ty}`\",\n                 some = if methods.len() == 1 { \"a\" } else { \"some\" },\n                 s = pluralize!(methods.len()),\n-                are = if methods.len() == 1 { \"is\" } else { \"are\" },\n+                are = pluralize!(\"is\", methods.len()),\n                 r = if methods.len() == 1 { \"s\" } else { \"\" },\n                 ty = expected\n             );"}, {"sha": "06184b4797255a7f98855ea2269990b5bfc66dad", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -1410,7 +1410,7 @@ impl CheckAttrVisitor<'_> {\n                             span,\n                             format!(\n                                 \"there {} only {} argument{}\",\n-                                if arg_count != 1 { \"are\" } else { \"is\" },\n+                                pluralize!(\"is\", arg_count),\n                                 arg_count,\n                                 pluralize!(arg_count)\n                             ),"}, {"sha": "8dec28c8ae283bef8913b1d496bc401bc73a199b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -504,9 +504,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     for sp in spans {\n                         let msg = if sp == last_bound_span {\n                             format!(\n-                                \"...because of {} bound{}\",\n-                                if bounds.len() <= 2 { \"this\" } else { \"these\" },\n-                                if bounds.len() <= 2 { \"\" } else { \"s\" },\n+                                \"...because of {these} bound{s}\",\n+                                these = pluralize!(\"this\", bounds.len() - 1),\n+                                s = pluralize!(bounds.len() - 1),\n                             )\n                         } else {\n                             String::new()"}, {"sha": "c16be38d5fc3d2c5f86a3bf701a8d68cd3ff74a6", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -1761,7 +1761,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             sp,\n             &format!(\n                 \"include the missing field{} in the pattern{}\",\n-                if len == 1 { \"\" } else { \"s\" },\n+                pluralize!(len),\n                 if have_inaccessible_fields { \" and ignore the inaccessible fields\" } else { \"\" }\n             ),\n             format!(\n@@ -1780,10 +1780,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_suggestion(\n             sp,\n             &format!(\n-                \"if you don't care about {} missing field{}, you can explicitly ignore {}\",\n-                if len == 1 { \"this\" } else { \"these\" },\n-                if len == 1 { \"\" } else { \"s\" },\n-                if len == 1 { \"it\" } else { \"them\" },\n+                \"if you don't care about {these} missing field{s}, you can explicitly ignore {them}\",\n+                these = pluralize!(\"this\", len),\n+                s = pluralize!(len),\n+                them = if len == 1 { \"it\" } else { \"them\" },\n             ),\n             format!(\"{}..{}\", prefix, postfix),\n             Applicability::MachineApplicable,"}, {"sha": "303ec910a9f09e2b548f35ec6f2b4430acf087c2", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -7,7 +7,7 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -410,7 +410,6 @@ impl<'tcx> InherentCollect<'tcx> {\n                 let to_implement = if assoc_items.is_empty() {\n                     String::new()\n                 } else {\n-                    let plural = assoc_items.len() > 1;\n                     let assoc_items_kind = {\n                         let item_types = assoc_items.iter().map(|x| x.kind);\n                         if item_types.clone().all(|x| x == hir::AssocItemKind::Const) {\n@@ -427,9 +426,9 @@ impl<'tcx> InherentCollect<'tcx> {\n \n                     format!(\n                         \" to implement {} {}{}\",\n-                        if plural { \"these\" } else { \"this\" },\n+                        pluralize!(\"this\", assoc_items.len()),\n                         assoc_items_kind,\n-                        if plural { \"s\" } else { \"\" }\n+                        pluralize!(assoc_items.len()),\n                     )\n                 };\n "}, {"sha": "05b57592572a95a4e6c1af59e9937586ad522a50", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=3bf9124f14f68f8c3cd26dd27d0ef27c516a5f06", "patch": "@@ -657,10 +657,9 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             let num_redundant_lt_args = lt_arg_spans.len() - self.num_expected_lifetime_args();\n             let msg_lifetimes = format!(\n-                \"remove {} {} argument{}\",\n-                if num_redundant_lt_args == 1 { \"this\" } else { \"these\" },\n-                \"lifetime\",\n-                pluralize!(num_redundant_lt_args),\n+                \"remove {these} lifetime argument{s}\",\n+                these = pluralize!(\"this\", num_redundant_lt_args),\n+                s = pluralize!(num_redundant_lt_args),\n             );\n \n             err.span_suggestion(\n@@ -700,10 +699,9 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             let num_redundant_gen_args =\n                 gen_arg_spans.len() - self.num_expected_type_or_const_args();\n             let msg_types_or_consts = format!(\n-                \"remove {} {} argument{}\",\n-                if num_redundant_gen_args == 1 { \"this\" } else { \"these\" },\n-                \"generic\",\n-                pluralize!(num_redundant_type_or_const_args),\n+                \"remove {these} generic argument{s}\",\n+                these = pluralize!(\"this\", num_redundant_gen_args),\n+                s = pluralize!(num_redundant_gen_args),\n             );\n \n             err.span_suggestion("}]}