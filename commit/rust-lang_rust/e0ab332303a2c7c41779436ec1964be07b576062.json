{"sha": "e0ab332303a2c7c41779436ec1964be07b576062", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYWIzMzIzMDNhMmM3YzQxNzc5NDM2ZWMxOTY0YmUwN2I1NzYwNjI=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-12-29T19:34:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-29T19:34:33Z"}, "message": "Merge pull request #1409 from Manishearth/fx-new-default\n\nFix suggestion span on new_without_default (fixes #1407)", "tree": {"sha": "dd4f49c14aabaefd3bab892ce12fe0cf92e65975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4f49c14aabaefd3bab892ce12fe0cf92e65975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ab332303a2c7c41779436ec1964be07b576062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ab332303a2c7c41779436ec1964be07b576062", "html_url": "https://github.com/rust-lang/rust/commit/e0ab332303a2c7c41779436ec1964be07b576062", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ab332303a2c7c41779436ec1964be07b576062/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d78485a81c06a621f607f3e772add628c892b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d78485a81c06a621f607f3e772add628c892b13", "html_url": "https://github.com/rust-lang/rust/commit/5d78485a81c06a621f607f3e772add628c892b13"}, {"sha": "b8b54eb0d87a2a24940940b8c93c853a62691a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b54eb0d87a2a24940940b8c93c853a62691a14", "html_url": "https://github.com/rust-lang/rust/commit/b8b54eb0d87a2a24940940b8c93c853a62691a14"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "de71586863aecfec18f6a461e54e02e8a08bf5aa", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0ab332303a2c7c41779436ec1964be07b576062/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ab332303a2c7c41779436ec1964be07b576062/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=e0ab332303a2c7c41779436ec1964be07b576062", "patch": "@@ -117,14 +117,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT),\n                     !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n                 ], {\n-                    if can_derive_default(self_ty, cx, default_trait_id) {\n+                    if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n                         span_lint_and_then(cx,\n                                            NEW_WITHOUT_DEFAULT_DERIVE, span,\n                                            &format!(\"you should consider deriving a \\\n                                                      `Default` implementation for `{}`\",\n                                                     self_ty),\n                                            |db| {\n-                            db.suggest_item_with_attr(cx, span, \"try this\", \"#[derive(Default)]\");\n+                            db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n                         });\n                     } else {\n                         span_lint_and_then(cx,\n@@ -151,17 +151,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n     }\n }\n \n-fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_trait_id: DefId) -> bool {\n+fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_trait_id: DefId) -> Option<Span> {\n     match ty.sty {\n         ty::TyAdt(adt_def, substs) if adt_def.is_struct() => {\n             for field in adt_def.all_fields() {\n                 let f_ty = field.ty(cx.tcx, substs);\n                 if !implements_trait(cx, f_ty, default_trait_id, Vec::new()) {\n-                    return false;\n+                    return None;\n                 }\n             }\n-            true\n+            cx.tcx.map.span_if_local(adt_def.did)\n         },\n-        _ => false,\n+        _ => None,\n     }\n }"}, {"sha": "65f6805e1214eeff87abe8944cca5ce80b8ec8dd", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0ab332303a2c7c41779436ec1964be07b576062/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ab332303a2c7c41779436ec1964be07b576062/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=e0ab332303a2c7c41779436ec1964be07b576062", "patch": "@@ -5,23 +5,23 @@\n #![deny(new_without_default, new_without_default_derive)]\n \n pub struct Foo;\n+//~^HELP try this\n+//~^^SUGGESTION #[derive(Default)]\n+//~^^SUGGESTION pub struct Foo\n \n impl Foo {\n     pub fn new() -> Foo { Foo }\n     //~^ERROR: you should consider deriving a `Default` implementation for `Foo`\n-    //~|HELP try this\n-    //~^^^SUGGESTION #[derive(Default)]\n-    //~^^^SUGGESTION pub fn new\n }\n \n pub struct Bar;\n+//~^HELP try this\n+//~^^SUGGESTION #[derive(Default)]\n+//~^^SUGGESTION pub struct Bar\n \n impl Bar {\n     pub fn new() -> Self { Bar }\n     //~^ERROR: you should consider deriving a `Default` implementation for `Bar`\n-    //~|HELP try this\n-    //~^^^SUGGESTION #[derive(Default)]\n-    //~^^^SUGGESTION pub fn new\n }\n \n pub struct Ok;"}]}