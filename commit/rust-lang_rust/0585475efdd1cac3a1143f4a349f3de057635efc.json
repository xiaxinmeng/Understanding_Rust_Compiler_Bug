{"sha": "0585475efdd1cac3a1143f4a349f3de057635efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ODU0NzVlZmRkMWNhYzNhMTE0M2Y0YTM0OWYzZGUwNTc2MzVlZmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-17T20:16:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-18T01:18:29Z"}, "message": "Avoid ICE when checking `Destination` of `break` inside a closure", "tree": {"sha": "3bc5c8749303fc6456300bd9fb27f00ac62d9c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc5c8749303fc6456300bd9fb27f00ac62d9c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0585475efdd1cac3a1143f4a349f3de057635efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0585475efdd1cac3a1143f4a349f3de057635efc", "html_url": "https://github.com/rust-lang/rust/commit/0585475efdd1cac3a1143f4a349f3de057635efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0585475efdd1cac3a1143f4a349f3de057635efc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237d54ff6c4fb3577e02d4c5af02813c11b63d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/237d54ff6c4fb3577e02d4c5af02813c11b63d01", "html_url": "https://github.com/rust-lang/rust/commit/237d54ff6c4fb3577e02d4c5af02813c11b63d01"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "a8ec2c393a59c99bfc93a79b0566c7ba802ea43a", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=0585475efdd1cac3a1143f4a349f3de057635efc", "patch": "@@ -566,7 +566,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the `enclosing_loops` field and let's coerce the\n             // type of `expr_opt` into what is expected.\n             let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();\n-            let ctxt = enclosing_breakables.find_breakable(target_id);\n+            let ctxt = match enclosing_breakables.opt_find_breakable(target_id) {\n+                Some(ctxt) => ctxt,\n+                None => { // Avoid ICE when `break` is inside a closure (#65383).\n+                    self.tcx.sess.delay_span_bug(\n+                        expr.span,\n+                        \"break was outside loop, but no error was emitted\",\n+                    );\n+                    return tcx.types.err;\n+                }\n+            };\n+\n             if let Some(ref mut coerce) = ctxt.coerce {\n                 if let Some(ref e) = expr_opt {\n                     coerce.coerce(self, &cause, e, e_ty);\n@@ -592,7 +602,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             } else {\n                 // If `ctxt.coerce` is `None`, we can just ignore\n-                // the type of the expresison.  This is because\n+                // the type of the expression.  This is because\n                 // either this was a break *without* a value, in\n                 // which case it is always a legal type (`()`), or\n                 // else an error would have been flagged by the"}, {"sha": "6943e261209a25e28756445ac3ed1a21bbf32552", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0585475efdd1cac3a1143f4a349f3de057635efc", "patch": "@@ -536,10 +536,16 @@ pub struct EnclosingBreakables<'tcx> {\n \n impl<'tcx> EnclosingBreakables<'tcx> {\n     fn find_breakable(&mut self, target_id: hir::HirId) -> &mut BreakableCtxt<'tcx> {\n-        let ix = *self.by_id.get(&target_id).unwrap_or_else(|| {\n+        self.opt_find_breakable(target_id).unwrap_or_else(|| {\n             bug!(\"could not find enclosing breakable with id {}\", target_id);\n-        });\n-        &mut self.stack[ix]\n+        })\n+    }\n+\n+    fn opt_find_breakable(&mut self, target_id: hir::HirId) -> Option<&mut BreakableCtxt<'tcx>> {\n+        match self.by_id.get(&target_id) {\n+            Some(ix) => Some(&mut self.stack[*ix]),\n+            None => None,\n+        }\n     }\n }\n "}, {"sha": "a6f9d0423d082e201104f3b71a0eca98078ce22e", "filename": "src/test/ui/break-outside-loop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Ftest%2Fui%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Ftest%2Fui%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.rs?ref=0585475efdd1cac3a1143f4a349f3de057635efc", "patch": "@@ -22,4 +22,12 @@ fn main() {\n     let rs: Foo = Foo{t: pth};\n \n     let unconstrained = break; //~ ERROR: `break` outside of a loop\n+\n+    // This used to ICE because `target_id` passed to `check_expr_break` would be the closure and\n+    // not the `loop`, which failed in the call to `find_breakable`. (#65383)\n+    'lab: loop {\n+        || {\n+            break 'lab; //~ ERROR `break` inside of a closure\n+        };\n+    }\n }"}, {"sha": "8e300fd848dab3d9357e896f1e4aa69746614cc0", "filename": "src/test/ui/break-outside-loop.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0585475efdd1cac3a1143f4a349f3de057635efc/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr?ref=0585475efdd1cac3a1143f4a349f3de057635efc", "patch": "@@ -33,7 +33,15 @@ error[E0268]: `break` outside of a loop\n LL |     let unconstrained = break;\n    |                         ^^^^^ cannot `break` outside of a loop\n \n-error: aborting due to 5 previous errors\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/break-outside-loop.rs:30:13\n+   |\n+LL |         || {\n+   |         -- enclosing closure\n+LL |             break 'lab;\n+   |             ^^^^^^^^^^ cannot `break` inside of a closure\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0267, E0268.\n For more information about an error, try `rustc --explain E0267`."}]}