{"sha": "770bd57ea5bb369067103841004dfe595ab22490", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGJkNTdlYTViYjM2OTA2NzEwMzg0MTAwNGRmZTU5NWFiMjI0OTA=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-13T18:34:40Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-14T12:14:42Z"}, "message": "Add `'static` and `Send` constraints explanations to `thread::spawn`\n\nPart of #29378.", "tree": {"sha": "3405c7a718f2af15e9b50017be67de1ed2251fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3405c7a718f2af15e9b50017be67de1ed2251fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770bd57ea5bb369067103841004dfe595ab22490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770bd57ea5bb369067103841004dfe595ab22490", "html_url": "https://github.com/rust-lang/rust/commit/770bd57ea5bb369067103841004dfe595ab22490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770bd57ea5bb369067103841004dfe595ab22490/comments", "author": null, "committer": null, "parents": [{"sha": "77f1bec6f5eb9ed632c973b97b12701294e6d3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f1bec6f5eb9ed632c973b97b12701294e6d3a5", "html_url": "https://github.com/rust-lang/rust/commit/77f1bec6f5eb9ed632c973b97b12701294e6d3a5"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "d807424129e866c31cbaf852f6e895f572d0284b", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/770bd57ea5bb369067103841004dfe595ab22490/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770bd57ea5bb369067103841004dfe595ab22490/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=770bd57ea5bb369067103841004dfe595ab22490", "patch": "@@ -367,6 +367,26 @@ impl Builder {\n /// want to specify the stack size or the name of the thread, use this API\n /// instead.\n ///\n+/// As you can see in the signature of `spawn` there are two constraints on\n+/// both the closure given to `spawn` and its return value, let's explain them:\n+///\n+/// - The `'static` constraint means that the closure and its return value\n+///   must have a lifetime of the whole program execution. The reason for this\n+///   is that threads can `detach` and outlive the lifetime they have been\n+///   created in.\n+///   Indeed if the thread, and by extension its return value, can outlive their\n+///   caller, we need to make sure that they will be valid afterwards, and since\n+///   we *can't* know when it will return we need to have them valid as long as\n+///   possible, that is until the end of the program, hence the `'static`\n+///   lifetime.\n+/// - The [`Send`] constraint is because the closure will need to be passed\n+///   *by value* from the thread where it is spawned to the new thread. Its\n+///   return value will need to be passed from the new thread to the thread\n+///   where it is `join`ed.\n+///   As a reminder, the [`Send`] marker trait, expresses that it is safe to be\n+///   passed from thread to thread. [`Sync`] expresses that it is safe to have a\n+///   reference be passed from thread to thread.\n+///\n /// # Panics\n ///\n /// Panics if the OS fails to create a thread; use [`Builder::spawn`]\n@@ -433,6 +453,8 @@ impl Builder {\n /// [`panic`]: ../../std/macro.panic.html\n /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n /// [`Builder`]: ../../std/thread/struct.Builder.html\n+/// [`Send`]: ../../std/marker/trait.Send.html\n+/// [`Sync`]: ../../std/marker/trait.Sync.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static"}]}