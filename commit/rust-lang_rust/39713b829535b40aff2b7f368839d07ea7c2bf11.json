{"sha": "39713b829535b40aff2b7f368839d07ea7c2bf11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzEzYjgyOTUzNWI0MGFmZjJiN2YzNjg4MzlkMDdlYTdjMmJmMTE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-19T08:21:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-21T11:00:18Z"}, "message": "Remove unnecessary parentheses.", "tree": {"sha": "897cd7f2eb52770a2dd4d4c69efc47e1ecc7b4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/897cd7f2eb52770a2dd4d4c69efc47e1ecc7b4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39713b829535b40aff2b7f368839d07ea7c2bf11", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39713b829535b40aff2b7f368839d07ea7c2bf11", "html_url": "https://github.com/rust-lang/rust/commit/39713b829535b40aff2b7f368839d07ea7c2bf11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39713b829535b40aff2b7f368839d07ea7c2bf11/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39012288118146331add60f2b1c90b07b6a6c51b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39012288118146331add60f2b1c90b07b6a6c51b", "html_url": "https://github.com/rust-lang/rust/commit/39012288118146331add60f2b1c90b07b6a6c51b"}], "stats": {"total": 188, "additions": 90, "deletions": 98}, "files": [{"sha": "cbe4c52b47ebb28f8bfb85163762b66bbf0b48a6", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -140,14 +140,9 @@ pub fn parse_config(args: ~[~str]) -> config {\n         adb_test_dir:\n             opt_str2(matches.opt_str(\"adb-test-dir\")).to_str(),\n         adb_device_status:\n-            if (opt_str2(matches.opt_str(\"target\")) ==\n-                ~\"arm-linux-androideabi\") {\n-                if (opt_str2(matches.opt_str(\"adb-test-dir\")) !=\n-                    ~\"(none)\" &&\n-                    opt_str2(matches.opt_str(\"adb-test-dir\")) !=\n-                    ~\"\") { true }\n-                else { false }\n-            } else { false },\n+            \"arm-linux-androideabi\" == opt_str2(matches.opt_str(\"target\")) &&\n+            \"(none)\" != opt_str2(matches.opt_str(\"adb-test-dir\")) &&\n+            !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n         test_shard: test::opt_shard(matches.opt_str(\"test-shard\")),\n         verbose: matches.opt_present(\"verbose\")\n     }"}, {"sha": "e06f4e32631203da3bb6dc95b303af8c22cdd2df", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -532,9 +532,9 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n             if !found_flags[i] {\n                 debug!(\"prefix={} ee.kind={} ee.msg={} line={}\",\n                        prefixes[i], ee.kind, ee.msg, line);\n-                if (prefix_matches(line, prefixes[i]) &&\n+                if prefix_matches(line, prefixes[i]) &&\n                     line.contains(ee.kind) &&\n-                    line.contains(ee.msg)) {\n+                    line.contains(ee.msg) {\n                     found_flags[i] = true;\n                     was_expected = true;\n                     break;"}, {"sha": "f7481599bacfb42795fc7cad8b406fb3142b5ce4", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -1025,15 +1025,15 @@ mod bench {\n     pub fn vuint_at_A_aligned(bh: &mut BenchHarness) {\n         use std::vec;\n         let data = vec::from_fn(4*100, |i| {\n-            match (i % 2) {\n+            match i % 2 {\n               0 => 0x80u8,\n               _ => i as u8,\n             }\n         });\n         let mut sum = 0u;\n         bh.iter(|| {\n             let mut i = 0;\n-            while (i < data.len()) {\n+            while i < data.len() {\n                 sum += reader::vuint_at(data, i).val;\n                 i += 4;\n             }\n@@ -1044,15 +1044,15 @@ mod bench {\n     pub fn vuint_at_A_unaligned(bh: &mut BenchHarness) {\n         use std::vec;\n         let data = vec::from_fn(4*100+1, |i| {\n-            match (i % 2) {\n+            match i % 2 {\n               1 => 0x80u8,\n               _ => i as u8\n             }\n         });\n         let mut sum = 0u;\n         bh.iter(|| {\n             let mut i = 1;\n-            while (i < data.len()) {\n+            while i < data.len() {\n                 sum += reader::vuint_at(data, i).val;\n                 i += 4;\n             }\n@@ -1063,7 +1063,7 @@ mod bench {\n     pub fn vuint_at_D_aligned(bh: &mut BenchHarness) {\n         use std::vec;\n         let data = vec::from_fn(4*100, |i| {\n-            match (i % 4) {\n+            match i % 4 {\n               0 => 0x10u8,\n               3 => i as u8,\n               _ => 0u8\n@@ -1072,7 +1072,7 @@ mod bench {\n         let mut sum = 0u;\n         bh.iter(|| {\n             let mut i = 0;\n-            while (i < data.len()) {\n+            while i < data.len() {\n                 sum += reader::vuint_at(data, i).val;\n                 i += 4;\n             }\n@@ -1083,7 +1083,7 @@ mod bench {\n     pub fn vuint_at_D_unaligned(bh: &mut BenchHarness) {\n         use std::vec;\n         let data = vec::from_fn(4*100+1, |i| {\n-            match (i % 4) {\n+            match i % 4 {\n               1 => 0x10u8,\n               0 => i as u8,\n               _ => 0u8\n@@ -1092,7 +1092,7 @@ mod bench {\n         let mut sum = 0u;\n         bh.iter(|| {\n             let mut i = 1;\n-            while (i < data.len()) {\n+            while i < data.len() {\n                 sum += reader::vuint_at(data, i).val;\n                 i += 4;\n             }"}, {"sha": "a17e807b6eefeaf4e02554a4d54d1d65d22b04ad", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -114,7 +114,7 @@ impl<E:CLike> Items<E> {\n \n impl<E:CLike> Iterator<E> for Items<E> {\n     fn next(&mut self) -> Option<E> {\n-        if (self.bits == 0) {\n+        if self.bits == 0 {\n             return None;\n         }\n "}, {"sha": "10d28eaafb0cdd85dc73759e5ade06c5cb7beea3", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -195,7 +195,7 @@ impl Matches {\n \n     fn opt_val(&self, nm: &str) -> Option<Optval> {\n         let vals = self.opt_vals(nm);\n-        if (vals.is_empty()) {\n+        if vals.is_empty() {\n             None\n         } else {\n             Some(vals[0].clone())\n@@ -797,7 +797,7 @@ pub mod groups {\n         let slice: || = || { cont = it(ss.slice(slice_start, last_end)) };\n \n         // if the limit is larger than the string, lower it to save cycles\n-        if (lim >= fake_i) {\n+        if lim >= fake_i {\n             lim = fake_i;\n         }\n "}, {"sha": "378e1e85339ffdf06e81c7104ef03555fe0f69ee", "filename": "src/libextra/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -929,7 +929,7 @@ impl<T : Iterator<char>> Parser<T> {\n                 return self.error(~\"EOF while parsing string\");\n             }\n \n-            if (escape) {\n+            if escape {\n                 match self.ch {\n                   '\"' => res.push_char('\"'),\n                   '\\\\' => res.push_char('\\\\'),\n@@ -1360,7 +1360,7 @@ impl serialize::Decoder for Decoder {\n /// Test if two json values are less than one another\n impl Ord for Json {\n     fn lt(&self, other: &Json) -> bool {\n-        match (*self) {\n+        match *self {\n             Number(f0) => {\n                 match *other {\n                     Number(f1) => f0 < f1,"}, {"sha": "178356ac2613283906bb80cede7fc15bb3cdaa2b", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -561,9 +561,9 @@ impl ToPrimitive for BigUint {\n impl FromPrimitive for BigUint {\n     #[inline]\n     fn from_i64(n: i64) -> Option<BigUint> {\n-        if (n > 0) {\n+        if n > 0 {\n             FromPrimitive::from_u64(n as u64)\n-        } else if (n == 0) {\n+        } else if n == 0 {\n             Some(Zero::zero())\n         } else {\n             None"}, {"sha": "8d63021d51b8832e6f6eacde513c002ad90924b7", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -178,7 +178,7 @@ pub fn parse(file: &mut io::Reader,\n \n     // Check magic number\n     let magic = file.read_le_u16();\n-    if (magic != 0x011A) {\n+    if magic != 0x011A {\n         return Err(format!(\"invalid magic number: expected {:x} but found {:x}\",\n                            0x011A, magic as uint));\n     }"}, {"sha": "9d7c71d6e6cf24d230408853addceb20993a063d", "filename": "src/libextra/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -808,7 +808,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n /// Formats the time according to the format string.\n pub fn strftime(format: &str, tm: &Tm) -> ~str {\n     fn days_in_year(year: int) -> i32 {\n-        if ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0))) {\n+        if (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)) {\n             366    /* Days in a leap year */\n         } else {\n             365    /* Days in a non-leap year */\n@@ -838,14 +838,14 @@ pub fn strftime(format: &str, tm: &Tm) -> ~str {\n         let mut year: int = tm.tm_year as int + 1900;\n         let mut days: int = iso_week_days (tm.tm_yday, tm.tm_wday);\n \n-        if (days < 0) {\n+        if days < 0 {\n             /* This ISO week belongs to the previous year. */\n             year -= 1;\n             days = iso_week_days (tm.tm_yday + (days_in_year(year)), tm.tm_wday);\n         } else {\n             let d: int = iso_week_days (tm.tm_yday - (days_in_year(year)),\n                                         tm.tm_wday);\n-            if (0 <= d) {\n+            if 0 <= d {\n                 /* This ISO week belongs to the next year. */\n                 year += 1;\n                 days = d;"}, {"sha": "3465deb5a59185093e317d121b7daf543dd90fdb", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -614,16 +614,16 @@ mod test {\n \n         // Test error reporting\n         let e = Uuid::parse_string(\"67e5504410b1426f9247bb680e5fe0c\").unwrap_err();\n-        assert!(match(e){ ErrorInvalidLength(n) => n==31, _ => false });\n+        assert!(match e { ErrorInvalidLength(n) => n==31, _ => false });\n \n         let e = Uuid::parse_string(\"67e550X410b1426f9247bb680e5fe0cd\").unwrap_err();\n-        assert!(match(e){ ErrorInvalidCharacter(c, n) => c=='X' && n==6, _ => false });\n+        assert!(match e { ErrorInvalidCharacter(c, n) => c=='X' && n==6, _ => false });\n \n         let e = Uuid::parse_string(\"67e550-4105b1426f9247bb680e5fe0c\").unwrap_err();\n-        assert!(match(e){ ErrorInvalidGroups(n) => n==2, _ => false });\n+        assert!(match e { ErrorInvalidGroups(n) => n==2, _ => false });\n \n         let e = Uuid::parse_string(\"F9168C5E-CEB2-4faa-B6BF1-02BF39FA1E4\").unwrap_err();\n-        assert!(match(e){ ErrorInvalidGroupLength(g, n, e) => g==3 && n==5 && e==4, _ => false });\n+        assert!(match e { ErrorInvalidGroupLength(g, n, e) => g==3 && n==5 && e==4, _ => false });\n     }\n \n     #[test]"}, {"sha": "3554d435e556ca58ecad078fec18c5e5e9b85fba", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -1323,7 +1323,7 @@ mod test {\n         fn roundtrip(id: int, n_tasks: int,\n                      p: &Port<(int, Chan<()>)>,\n                      ch: &Chan<(int, Chan<()>)>) {\n-            while (true) {\n+            loop {\n                 match p.recv() {\n                     (1, end_chan) => {\n                         debug!(\"{}\\n\", id);"}, {"sha": "af6ed51729ef119ede900e9d1393f9e159b8b60c", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -508,11 +508,11 @@ pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n \n             let dir_ptr = p.with_ref(|buf| opendir(buf));\n \n-            if (dir_ptr as uint != 0) {\n+            if dir_ptr as uint != 0 {\n                 let mut paths = ~[];\n                 debug!(\"os::list_dir -- opendir() SUCCESS\");\n                 let mut entry_ptr = readdir(dir_ptr);\n-                while (entry_ptr as uint != 0) {\n+                while entry_ptr as uint != 0 {\n                     let cstr = CString::new(rust_list_dir_val(entry_ptr), false);\n                     paths.push(Path::new(cstr));\n                     entry_ptr = readdir(dir_ptr);"}, {"sha": "9bf3e2ca43e806cf54f605910fab9a25b7875558", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -1956,7 +1956,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, crate: &Crate)\n \n     ecx.stats.total_bytes.set(ebml_w.writer.tell());\n \n-    if (tcx.sess.meta_stats()) {\n+    if tcx.sess.meta_stats() {\n         for e in ebml_w.writer.get_ref().iter() {\n             if *e == 0 {\n                 ecx.stats.zero_bytes.set(ecx.stats.zero_bytes.get() + 1);"}, {"sha": "38376de4346df0bc1d0a0c15e43f2f8039dc66e8", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -175,7 +175,7 @@ fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n         useful(ty, ref ctor) => {\n             match ty::get(ty).sty {\n                 ty::ty_bool => {\n-                    match (*ctor) {\n+                    match *ctor {\n                         val(const_bool(true)) => Some(@\"true\"),\n                         val(const_bool(false)) => Some(@\"false\"),\n                         _ => None"}, {"sha": "7b094591b1a39d92f8b8c050e6dbb812641f0588", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -1039,7 +1039,7 @@ impl Resolver {\n                 let mut duplicate_type = NoError;\n                 let ns = match duplicate_checking_mode {\n                     ForbidDuplicateModules => {\n-                        if (child.get_module_if_available().is_some()) {\n+                        if child.get_module_if_available().is_some() {\n                             duplicate_type = ModuleError;\n                         }\n                         Some(TypeNS)\n@@ -1074,7 +1074,7 @@ impl Resolver {\n                     }\n                     OverwriteDuplicates => None\n                 };\n-                if (duplicate_type != NoError) {\n+                if duplicate_type != NoError {\n                     // Return an error here by looking up the namespace that\n                     // had the duplicate.\n                     let ns = ns.unwrap();"}, {"sha": "7b194690b2f23efbbc85c2fc0aeba98512f79197", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -666,7 +666,7 @@ pub fn trans_field_ptr(bcx: &Block, r: &Repr, val: ValueRef, discr: Disr,\n         }\n         NullablePointer{ nonnull: ref nonnull, nullfields: ref nullfields,\n                          nndiscr, .. } => {\n-            if (discr == nndiscr) {\n+            if discr == nndiscr {\n                 struct_field_ptr(bcx, nonnull, val, ix, false)\n             } else {\n                 // The unit-like case might have a nonzero number of unit-like fields.\n@@ -783,7 +783,7 @@ fn build_const_struct(ccx: &CrateContext, st: &Struct, vals: &[ValueRef])\n             /*bad*/as u64;\n         let target_offset = roundup(offset, type_align);\n         offset = roundup(offset, val_align);\n-        if (offset != target_offset) {\n+        if offset != target_offset {\n             cfields.push(padding(target_offset - offset));\n             offset = target_offset;\n         }"}, {"sha": "6aa35096792ab7c9017a8d6be340692610a6d1ba", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -2156,7 +2156,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::NodeId) -> ValueRef {\n                         _ => fail!(\"get_item_val: weird result in table\")\n                     };\n \n-                    match (attr::first_attr_value_str_by_name(i.attrs, \"link_section\")) {\n+                    match attr::first_attr_value_str_by_name(i.attrs, \"link_section\") {\n                         Some(sect) => unsafe {\n                             sect.with_c_str(|buf| {\n                                 llvm::LLVMSetSection(v, buf);"}, {"sha": "5a5a028c38000f29870a06a300d75e058b6b6152", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -686,7 +686,7 @@ pub fn iter_vec_raw<'r,\n     let fcx = bcx.fcx;\n \n     let vt = vec_types(bcx, vec_ty);\n-    if (vt.llunit_alloc_size == 0) {\n+    if vt.llunit_alloc_size == 0 {\n         // Special-case vectors with elements of size 0  so they don't go out of bounds (#9890)\n         iter_vec_loop(bcx, data_ptr, &vt, fill, f)\n     } else {\n@@ -740,4 +740,3 @@ pub fn iter_vec_unboxed<'r,\n     let dataptr = get_dataptr(bcx, body_ptr);\n     return iter_vec_raw(bcx, dataptr, vec_ty, fill, f);\n }\n-"}, {"sha": "31ac97965b95bab1dea0ab657a911dc1eeab03ba", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -2883,7 +2883,7 @@ pub fn adjust_ty(cx: ctxt,\n                 AutoDerefRef(ref adj) => {\n                     let mut adjusted_ty = unadjusted_ty;\n \n-                    if (!ty::type_is_error(adjusted_ty)) {\n+                    if !ty::type_is_error(adjusted_ty) {\n                         for i in range(0, adj.autoderefs) {\n                             match ty::deref(adjusted_ty, true) {\n                                 Some(mt) => { adjusted_ty = mt.ty; }"}, {"sha": "b21f2c7463055b35da9ae09a30b668b4b451a467", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -740,7 +740,7 @@ fn constrain_regions_in_type(\n         }\n     });\n \n-    return (e == rcx.errors_reported);\n+    return e == rcx.errors_reported;\n }\n \n pub mod guarantor {\n@@ -1175,7 +1175,7 @@ pub mod guarantor {\n         let mut ct = ct;\n         let tcx = rcx.fcx.ccx.tcx;\n \n-        if (ty::type_is_error(ct.ty)) {\n+        if ty::type_is_error(ct.ty) {\n             ct.cat.pointer = NotPointer;\n             return ct;\n         }"}, {"sha": "8f85c185adbcce59a7210dba1e74b952ba798dd1", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -599,7 +599,7 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: @FnCtxt, is_early: bool) {\n                   (&ty::ty_box(..), ty::BoxTraitStore) |\n                   (&ty::ty_uniq(..), ty::UniqTraitStore) |\n                   (&ty::ty_rptr(..), ty::RegionTraitStore(..)) => {\n-                    let typ = match (&ty::get(ty).sty) {\n+                    let typ = match &ty::get(ty).sty {\n                         &ty::ty_box(typ) | &ty::ty_uniq(typ) => typ,\n                         &ty::ty_rptr(_, mt) => mt.ty,\n                         _ => fail!(\"shouldn't get here\"),"}, {"sha": "7740645030d221681eba8e18cf0d925bf869e40d", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -889,8 +889,8 @@ impl<'a> SolveContext<'a> {\n                 type_params: opt_vec::Empty,\n                 region_params: opt_vec::Empty\n             };\n-            while (index < num_inferred &&\n-                   inferred_infos[index].item_id == item_id) {\n+            while index < num_inferred &&\n+                  inferred_infos[index].item_id == item_id {\n                 let info = &inferred_infos[index];\n                 match info.kind {\n                     SelfParam => {\n@@ -999,4 +999,3 @@ fn glb(v1: ty::Variance, v2: ty::Variance) -> ty::Variance {\n         (x, ty::Bivariant) | (ty::Bivariant, x) => x,\n     }\n }\n-"}, {"sha": "9a9a9c5fccb48f731e7a57e930c59eef899e418f", "filename": "src/librustpkg/parse_args.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustpkg%2Fparse_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustpkg%2Fparse_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fparse_args.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -119,7 +119,7 @@ pub fn parse_args(args: &[~str]) -> Result<ParseResult, int> {\n     let mut args = matches.free.clone();\n     args.shift();\n \n-    if (args.len() < 1) {\n+    if args.len() < 1 {\n         usage::general();\n         return Err(1);\n     }\n@@ -154,7 +154,7 @@ pub fn parse_args(args: &[~str]) -> Result<ParseResult, int> {\n     };\n \n     let cmd_opt = args.iter().filter_map( |s| from_str(s.clone())).next();\n-    let command = match(cmd_opt){\n+    let command = match cmd_opt {\n         None => {\n             debug!(\"No legal command. Returning 0\");\n             usage::general();\n@@ -194,4 +194,3 @@ pub fn parse_args(args: &[~str]) -> Result<ParseResult, int> {\n         sysroot: supplied_sysroot\n     })\n }\n-"}, {"sha": "62ee0ed88fdd98171e6d8089cbdf4ee3585682ea", "filename": "src/librustpkg/testsuite/pass/src/install-paths/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Finstall-paths%2Fbench.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -11,7 +11,7 @@\n #[bench]\n pub fn g() {\n     let mut x = 0;\n-    while(x < 1000) {\n+    while x < 1000 {\n         x += 1;\n     }\n }"}, {"sha": "1444f9b4129d8570082814bcf7820e1b87ae8447", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -263,7 +263,7 @@ impl Streaming for SipState {\n         compress!(v0, v1, v2, v3);\n         compress!(v0, v1, v2, v3);\n \n-        return (v0 ^ v1 ^ v2 ^ v3);\n+        return v0 ^ v1 ^ v2 ^ v3;\n     }\n \n     fn result_bytes(&mut self) -> ~[u8] {"}, {"sha": "e58fcc16182363dcdd8f6bc19f4280d0e7df861d", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -518,7 +518,7 @@ mod bench {\n             let mut sum = 0u64;\n             bh.iter(|| {\n                 let mut i = $start_index;\n-                while (i < data.len()) {\n+                while i < data.len() {\n                     sum += u64_from_be_bytes(data, i, $size);\n                     i += $stride;\n                 }"}, {"sha": "53fa41f9cfdc88d373130ffe7bc4e2d7605824f5", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -292,7 +292,7 @@ impl<T> Option<T> {\n     #[inline(always)]\n     pub fn filtered(self, f: |t: &T| -> bool) -> Option<T> {\n         match self {\n-            Some(x) => if(f(&x)) {Some(x)} else {None},\n+            Some(x) => if f(&x) {Some(x)} else {None},\n             None => None\n         }\n     }\n@@ -605,7 +605,7 @@ mod tests {\n         let mut i = 0;\n         Some(10).while_some(|j| {\n             i += 1;\n-            if (j > 0) {\n+            if j > 0 {\n                 Some(j-1)\n             } else {\n                 None"}, {"sha": "36ce3e9312791b7910165cb1d3d1cf9c69a60341", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -103,9 +103,9 @@ pub mod win32 {\n                 let k = f(buf.as_mut_ptr(), TMPBUF_SZ as DWORD);\n                 if k == (0 as DWORD) {\n                     done = true;\n-                } else if (k == n &&\n-                           libc::GetLastError() ==\n-                           libc::ERROR_INSUFFICIENT_BUFFER as DWORD) {\n+                } else if k == n &&\n+                          libc::GetLastError() ==\n+                          libc::ERROR_INSUFFICIENT_BUFFER as DWORD {\n                     n *= (2 as DWORD);\n                 } else {\n                     done = true;\n@@ -159,7 +159,7 @@ pub fn env() -> ~[(~str,~str)] {\n                 FreeEnvironmentStringsA\n             };\n             let ch = GetEnvironmentStringsA();\n-            if (ch as uint == 0) {\n+            if ch as uint == 0 {\n                 fail!(\"os::env() failure getting env string from OS: {}\",\n                        os::last_os_error());\n             }\n@@ -176,7 +176,7 @@ pub fn env() -> ~[(~str,~str)] {\n                 fn rust_env_pairs() -> **libc::c_char;\n             }\n             let environ = rust_env_pairs();\n-            if (environ as uint == 0) {\n+            if environ as uint == 0 {\n                 fail!(\"os::env() failure getting env string from OS: {}\",\n                        os::last_os_error());\n             }"}, {"sha": "dcb6d2719d9077792b6fdc3dc66739eeea6ea6ee", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -201,7 +201,7 @@ pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n */\n pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: |*T|) {\n     debug!(\"array_each_with_len: before iterate\");\n-    if (arr as uint == 0) {\n+    if arr as uint == 0 {\n         fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     //let start_ptr = *arr;\n@@ -222,7 +222,7 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: |*T|) {\n   Dragons be here.\n */\n pub unsafe fn array_each<T>(arr: **T, cb: |*T|) {\n-    if (arr as uint == 0) {\n+    if arr as uint == 0 {\n         fail!(\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     let len = buf_len(arr);"}, {"sha": "7398960eeb7cf480d408d76fbedc6e9772fec298", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -861,7 +861,7 @@ pub fn is_utf8(v: &[u8]) -> bool {\n pub fn is_utf16(v: &[u16]) -> bool {\n     let len = v.len();\n     let mut i = 0u;\n-    while (i < len) {\n+    while i < len {\n         let u = v[i];\n \n         if  u <= 0xD7FF_u16 || u >= 0xE000_u16 {\n@@ -887,7 +887,7 @@ pub fn is_utf16(v: &[u16]) -> bool {\n pub fn utf16_chars(v: &[u16], f: |char|) {\n     let len = v.len();\n     let mut i = 0u;\n-    while (i < len && v[i] != 0u16) {\n+    while i < len && v[i] != 0u16 {\n         let u = v[i];\n \n         if  u <= 0xD7FF_u16 || u >= 0xE000_u16 {\n@@ -2326,7 +2326,7 @@ impl<'a> StrSlice<'a> for &'a str {\n \n     #[inline]\n     fn char_range_at(&self, i: uint) -> CharRange {\n-        if (self[i] < 128u8) {\n+        if self[i] < 128u8 {\n             return CharRange {ch: self[i] as char, next: i + 1 };\n         }\n "}, {"sha": "18be85152d715a772cad9652623e80b464351ccd", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -101,7 +101,7 @@ impl<T: Send> State<T> {\n                 } else {\n                     pos = enqueue_pos;\n                 }\n-            } else if (diff < 0) {\n+            } else if diff < 0 {\n                 return false\n             } else {\n                 pos = self.enqueue_pos.load(Relaxed);"}, {"sha": "8ed4b70c0a28aa8a97075293c2bf375a79b1da60", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -481,7 +481,7 @@ fn test_spawn_sched() {\n     fn f(i: int, ch: SharedChan<()>) {\n         let ch = ch.clone();\n         do spawn {\n-            if (i == 0) {\n+            if i == 0 {\n                 ch.send(());\n             } else {\n                 f(i - 1, ch);"}, {"sha": "ead9cec9943e5500f4be44114851c2bd07c33507", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -839,7 +839,7 @@ mod test_map {\n             let mut ub = map.upper_bound(i);\n             let next_key = i - i % step + step;\n             let next_pair = (next_key, &value);\n-            if (i % step == 0) {\n+            if i % step == 0 {\n                 assert_eq!(lb.next(), Some((i, &value)));\n             } else {\n                 assert_eq!(lb.next(), Some(next_pair));"}, {"sha": "03b7f1891a16c51f447b683e4e63124847dd0876", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -46,7 +46,7 @@ impl Ident {\n \n impl Eq for Ident {\n     fn eq(&self, other: &Ident) -> bool {\n-        if (self.ctxt == other.ctxt) {\n+        if self.ctxt == other.ctxt {\n             self.name == other.name\n         } else {\n             // IF YOU SEE ONE OF THESE FAILS: it means that you're comparing"}, {"sha": "04a89a03852d0ea921deb354a355491b0164377a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -829,9 +829,9 @@ pub fn resolve_internal(id : Ident,\n                             resolve_internal(Ident{name:name,ctxt:ctxt},table,resolve_table);\n                         let resolvedthis =\n                             resolve_internal(Ident{name:id.name,ctxt:subctxt},table,resolve_table);\n-                        if ((resolvedthis == resolvedfrom)\n+                        if (resolvedthis == resolvedfrom)\n                             && (marksof(ctxt,resolvedthis,table)\n-                                == marksof(subctxt,resolvedthis,table))) {\n+                                == marksof(subctxt,resolvedthis,table)) {\n                             toname\n                         } else {\n                             resolvedthis\n@@ -878,7 +878,7 @@ pub fn marksof(ctxt: SyntaxContext, stopname: Name, table: &SCTable) -> ~[Mrk] {\n             Rename(_,name,tl) => {\n                 // see MTWT for details on the purpose of the stopname.\n                 // short version: it prevents duplication of effort.\n-                if (name == stopname) {\n+                if name == stopname {\n                     return result;\n                 } else {\n                     loopvar = tl;\n@@ -903,7 +903,7 @@ pub fn mtwt_outer_mark(ctxt: SyntaxContext) -> Mrk {\n /// Push a name... unless it matches the one on top, in which\n /// case pop and discard (so two of the same marks cancel)\n pub fn xorPush(marks: &mut ~[Mrk], mark: Mrk) {\n-    if ((marks.len() > 0) && (getLast(marks) == mark)) {\n+    if (marks.len() > 0) && (getLast(marks) == mark) {\n         marks.pop();\n     } else {\n         marks.push(mark);\n@@ -927,7 +927,7 @@ pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool {\n \n // are two arrays of segments equal when compared unhygienically?\n pub fn segments_name_eq(a : &[ast::PathSegment], b : &[ast::PathSegment]) -> bool {\n-    if (a.len() != b.len()) {\n+    if a.len() != b.len() {\n         false\n     } else {\n         for (idx,seg) in a.iter().enumerate() {"}, {"sha": "15146551370b20a92e7c1c9929bf45046ce85b0b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -387,7 +387,7 @@ impl CodeMap {\n                 a = m;\n             }\n         }\n-        if (a >= len) {\n+        if a >= len {\n             fail!(\"position {} does not resolve to a source location\", pos.to_uint())\n         }\n "}, {"sha": "f547f32e21dbc61c65c8a820c6ffc03721caec75", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -46,7 +46,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                 // in this file.\n                 // Token-tree macros:\n                 MacInvocTT(ref pth, ref tts, ctxt) => {\n-                    if (pth.segments.len() > 1u) {\n+                    if pth.segments.len() > 1u {\n                         fld.cx.span_err(\n                             pth.span,\n                             format!(\"expected macro name without module \\\n@@ -464,7 +464,7 @@ pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n         }\n         _ => return expand_non_macro_stmt(s, fld)\n     };\n-    if (pth.segments.len() > 1u) {\n+    if pth.segments.len() > 1u {\n         fld.cx.span_err(pth.span, \"expected macro name without module separators\");\n         return SmallVector::zero();\n     }"}, {"sha": "dc721f15c3b85ef99c15264091716423a1d0ac38", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -333,7 +333,7 @@ pub fn parse(sess: @ParseSess,\n                   MatchTok(ref t) => {\n                     let mut ei_t = ei.clone();\n                     //if (token_name_eq(t,&tok)) {\n-                    if (token::mtwt_token_eq(t,&tok)) {\n+                    if token::mtwt_token_eq(t,&tok) {\n                         ei_t.idx += 1;\n                         next_eis.push(ei_t);\n                     }\n@@ -370,12 +370,12 @@ pub fn parse(sess: @ParseSess,\n                     \"local ambiguity: multiple parsing options: \\\n                      built-in NTs {} or {} other options.\",\n                     nts, next_eis.len()));\n-            } else if (bb_eis.len() == 0u && next_eis.len() == 0u) {\n+            } else if bb_eis.len() == 0u && next_eis.len() == 0u {\n                 return Failure(sp, format!(\"no rules expected the token `{}`\",\n                             to_str(get_ident_interner(), &tok)));\n-            } else if (next_eis.len() > 0u) {\n+            } else if next_eis.len() > 0u {\n                 /* Now process the next token */\n-                while(next_eis.len() > 0u) {\n+                while next_eis.len() > 0u {\n                     cur_eis.push(next_eis.pop());\n                 }\n                 rdr.next_token();"}, {"sha": "facbee135ed9fafe44a60962d2b6b15dae3d6cfe", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -135,7 +135,7 @@ fn generic_extension(cx: &ExtCtxt,\n                 let rhs = match *rhses[i] {\n                     // okay, what's your transcriber?\n                     MatchedNonterminal(NtTT(tt)) => {\n-                        match (*tt) {\n+                        match *tt {\n                             // cut off delimiters; don't parse 'em\n                             TTDelim(ref tts) => {\n                                 (*tts).slice(1u,(*tts).len()-1u).to_owned()"}, {"sha": "f753861892ffc359f16822e023d26bf54589817f", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -198,7 +198,7 @@ fn fatal_span_verbose(rdr: @StringReader,\n // EFFECT: advance peek_tok and peek_span to refer to the next token.\n // EFFECT: update the interner, maybe.\n fn string_advance_token(r: @StringReader) {\n-    match (consume_whitespace_and_comments(r)) {\n+    match consume_whitespace_and_comments(r) {\n         Some(comment) => {\n             r.peek_span.set(comment.sp);\n             r.peek_tok.set(comment.tok);"}, {"sha": "3a5e737e026ed59c0ac3a8269695eeeb6fbbe850", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -3393,7 +3393,7 @@ impl Parser {\n \n         let mut attributes_box = attrs_remaining;\n \n-        while (self.token != token::RBRACE) {\n+        while self.token != token::RBRACE {\n             // parsing items even when they're not allowed lets us give\n             // better error messages and recover more gracefully.\n             attributes_box.push_all(self.parse_outer_attributes());\n@@ -4373,7 +4373,7 @@ impl Parser {\n             items: _,\n             foreign_items: foreign_items\n         } = self.parse_foreign_items(first_item_attrs, true);\n-        if (! attrs_remaining.is_empty()) {\n+        if ! attrs_remaining.is_empty() {\n             self.span_err(self.last_span,\n                           \"expected item after attributes\");\n         }\n@@ -4553,7 +4553,7 @@ impl Parser {\n             if !self.eat(&token::COMMA) { break; }\n         }\n         self.expect(&token::RBRACE);\n-        if (have_disr && !all_nullary) {\n+        if have_disr && !all_nullary {\n             self.fatal(\"discriminator values can only be used with a c-like \\\n                         enum\");\n         }"}, {"sha": "56681ef2def002d2abdc1b200f64965443d592fe", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -218,7 +218,7 @@ pub fn to_str(input: @IdentInterner, t: &Token) -> ~str {\n             &NtAttr(e) => ::print::pprust::attribute_to_str(e, input),\n             _ => {\n                 ~\"an interpolated \" +\n-                    match (*nt) {\n+                    match *nt {\n                         NtItem(..) => ~\"item\",\n                         NtBlock(..) => ~\"block\",\n                         NtStmt(..) => ~\"statement\","}, {"sha": "82aa178e62b240f2620b684909e02f77fa805aeb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -774,7 +774,7 @@ pub fn print_tt(s: &mut State, tt: &ast::TokenTree) {\n         word(&mut s.s, \"$(\");\n         for tt_elt in (*tts).iter() { print_tt(s, tt_elt); }\n         word(&mut s.s, \")\");\n-        match (*sep) {\n+        match *sep {\n           Some(ref tk) => word(&mut s.s, parse::token::to_str(s.intr, tk)),\n           None => ()\n         }"}, {"sha": "dd3ae168149eba7014e50acfe7df8c599aff0c8a", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -140,7 +140,7 @@ pub fn matches_codepattern(a : &str, b : &str) -> bool {\n fn scan_for_non_ws_or_end(a : &str, idx: uint) -> uint {\n     let mut i = idx;\n     let len = a.len();\n-    while ((i < len) && (is_whitespace(a.char_at(i)))) {\n+    while (i < len) && (is_whitespace(a.char_at(i))) {\n         i += 1;\n     }\n     i"}, {"sha": "2a5f7f0b87e98285c95444a62ea34337226ad2ed", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -34,7 +34,7 @@ struct CreatureInfo {\n }\n \n fn show_color(cc: color) -> ~str {\n-    match (cc) {\n+    match cc {\n         Red    => {~\"red\"}\n         Yellow => {~\"yellow\"}\n         Blue   => {~\"blue\"}\n@@ -51,7 +51,7 @@ fn show_color_list(set: ~[color]) -> ~str {\n }\n \n fn show_digit(nn: uint) -> ~str {\n-    match (nn) {\n+    match nn {\n         0 => {~\"zero\"}\n         1 => {~\"one\"}\n         2 => {~\"two\"}"}, {"sha": "862b047db22f464c81b219aa81e39a81d9007019", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -37,7 +37,7 @@ fn start(n_tasks: int, token: int) {\n }\n \n fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n-    while (true) {\n+    loop {\n         match p.recv() {\n           1 => {\n             println!(\"{}\\n\", id);"}, {"sha": "f0c183214ee54ca121191b23f7489fc2acea1df8", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39713b829535b40aff2b7f368839d07ea7c2bf11/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=39713b829535b40aff2b7f368839d07ea7c2bf11", "patch": "@@ -110,7 +110,7 @@ impl Sudoku {\n \n         let mut ptr = 0u;\n         let end = work.len();\n-        while (ptr < end) {\n+        while ptr < end {\n             let (row, col) = work[ptr];\n             // is there another color to try?\n             if self.next_color(row, col, self.grid[row][col] + (1 as u8)) {"}]}