{"sha": "eb769ed6b09cb9fa007508caef808f5e50264cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzY5ZWQ2YjA5Y2I5ZmEwMDc1MDhjYWVmODA4ZjVlNTAyNjRjYjA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-24T08:30:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-24T08:30:53Z"}, "message": "Rollup merge of #68424 - estebank:suggest-borrow-for-non-copy-vec, r=davidtwco\n\nSuggest borrowing `Vec<NonCopy>` in for loop\n\nPartially address #64167.", "tree": {"sha": "19390f81a3749210c1c1f86154e697871405c764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19390f81a3749210c1c1f86154e697871405c764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb769ed6b09cb9fa007508caef808f5e50264cb0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKqs9CRBK7hj4Ov3rIwAAdHIIAFjX2lc8i5zUUhRMDRV0Wry3\nsgUoAHOH9fJSwlOXOWDAPTHkGQsKbSfu2WnxkF+bpQ2ilvyqb57bs7Uj3JfK6Q+f\naK0btRFQGOrUGlChPT8/PJTtz17McSN2w6n4GGfmDzOCzwMhjsntepPUGWt/5CyK\nEtqzgAKFtSlphnfsmvO5XUk6eu5yZ/6k05MmeyeNOach3uCfcHsg5DsF8gXo/fBo\nDUwQdlNP5KUeIke/cyiyb28nWRDLlcQSld5v2fDG18lFE2v4NYCV7bbLhHjsBg5h\nQ1QZcKsSye7IZec+Jn+kFvuFhUBcr3jWnhnbxowE6Lsxa5rhtg2OpRYDOvdrmP8=\n=LcE5\n-----END PGP SIGNATURE-----\n", "payload": "tree 19390f81a3749210c1c1f86154e697871405c764\nparent 62f227b3f822a27bd603acede9137bfb49ca8b68\nparent 6eaf59dfc8be4ee5647f9c090c5a7668682f30c0\nauthor Tyler Mandry <tmandry@gmail.com> 1579854653 -0800\ncommitter GitHub <noreply@github.com> 1579854653 -0800\n\nRollup merge of #68424 - estebank:suggest-borrow-for-non-copy-vec, r=davidtwco\n\nSuggest borrowing `Vec<NonCopy>` in for loop\n\nPartially address #64167.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb769ed6b09cb9fa007508caef808f5e50264cb0", "html_url": "https://github.com/rust-lang/rust/commit/eb769ed6b09cb9fa007508caef808f5e50264cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb769ed6b09cb9fa007508caef808f5e50264cb0/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f227b3f822a27bd603acede9137bfb49ca8b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f227b3f822a27bd603acede9137bfb49ca8b68", "html_url": "https://github.com/rust-lang/rust/commit/62f227b3f822a27bd603acede9137bfb49ca8b68"}, {"sha": "6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "html_url": "https://github.com/rust-lang/rust/commit/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "cb4247d98745eb8e52af0fd9e2de8de382cd54b0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=eb769ed6b09cb9fa007508caef808f5e50264cb0", "patch": "@@ -151,6 +151,7 @@ use crate::{\n \n /// The `Option` type. See [the module level documentation](index.html) for more.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[rustc_diagnostic_item = \"option_type\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value"}, {"sha": "bc70dbd62eb52720bfd95e94849ec1af71749bd9", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=eb769ed6b09cb9fa007508caef808f5e50264cb0", "patch": "@@ -242,6 +242,7 @@ use crate::ops::{self, Deref, DerefMut};\n /// [`Err`]: enum.Result.html#variant.Err\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n+#[rustc_diagnostic_item = \"result_type\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "43121b38da01a1160e3794ef18321dfec4bccd63", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=eb769ed6b09cb9fa007508caef808f5e50264cb0", "patch": "@@ -1,7 +1,8 @@\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_span::Span;\n+use rustc_span::source_map::DesugaringKind;\n+use rustc_span::{Span, Symbol};\n \n use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::prefixes::PrefixSet;\n@@ -383,10 +384,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        let move_ty = format!(\"{:?}\", move_place.ty(*self.body, self.infcx.tcx).ty,);\n         if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-            let is_option = move_ty.starts_with(\"std::option::Option\");\n-            let is_result = move_ty.starts_with(\"std::result::Result\");\n+            let def_id = match move_place.ty(*self.body, self.infcx.tcx).ty.kind {\n+                ty::Adt(self_def, _) => self_def.did,\n+                ty::Foreign(def_id)\n+                | ty::FnDef(def_id, _)\n+                | ty::Closure(def_id, _)\n+                | ty::Generator(def_id, ..)\n+                | ty::Opaque(def_id, _) => def_id,\n+                _ => return err,\n+            };\n+            let is_option =\n+                self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"option_type\"), def_id);\n+            let is_result =\n+                self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"result_type\"), def_id);\n             if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n                 err.span_suggestion(\n                     span,\n@@ -397,6 +408,16 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\"{}.as_ref()\", snippet),\n                     Applicability::MaybeIncorrect,\n                 );\n+            } else if span.is_desugaring(DesugaringKind::ForLoop)\n+                && self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id)\n+            {\n+                // FIXME: suggest for anything that implements `IntoIterator`.\n+                err.span_suggestion(\n+                    span,\n+                    \"consider iterating over a slice of the `Vec<_>`'s content\",\n+                    format!(\"&{}\", snippet),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n         err"}, {"sha": "ec7358bd08ad23b20de8c59055324fa67a3c70c9", "filename": "src/test/ui/suggestions/for-i-in-vec.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed?ref=eb769ed6b09cb9fa007508caef808f5e50264cb0", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    v: Vec<u32>,\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        for _ in &self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "304fe8cc81f1a9fb526a9c22a04b9d9ecdf748cd", "filename": "src/test/ui/suggestions/for-i-in-vec.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs?ref=eb769ed6b09cb9fa007508caef808f5e50264cb0", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    v: Vec<u32>,\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        for _ in self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "576a7cc2f6043b8e31250830cf7fbffb53c14f8a", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb769ed6b09cb9fa007508caef808f5e50264cb0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=eb769ed6b09cb9fa007508caef808f5e50264cb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of `self.v` which is behind a shared reference\n+  --> $DIR/for-i-in-vec.rs:10:18\n+   |\n+LL |         for _ in self.v {\n+   |                  ^^^^^^\n+   |                  |\n+   |                  move occurs because `self.v` has type `std::vec::Vec<u32>`, which does not implement the `Copy` trait\n+   |                  help: consider iterating over a slice of the `Vec<_>`'s content: `&self.v`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}