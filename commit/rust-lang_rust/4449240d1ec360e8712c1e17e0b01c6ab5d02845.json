{"sha": "4449240d1ec360e8712c1e17e0b01c6ab5d02845", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NDkyNDBkMWVjMzYwZTg3MTJjMWUxN2UwYjAxYzZhYjVkMDI4NDU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-28T03:54:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:26Z"}, "message": "Add more debug logs", "tree": {"sha": "e2f7071a1b0dda41cdc853f09136e66f18df713e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f7071a1b0dda41cdc853f09136e66f18df713e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4449240d1ec360e8712c1e17e0b01c6ab5d02845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4449240d1ec360e8712c1e17e0b01c6ab5d02845", "html_url": "https://github.com/rust-lang/rust/commit/4449240d1ec360e8712c1e17e0b01c6ab5d02845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4449240d1ec360e8712c1e17e0b01c6ab5d02845/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "html_url": "https://github.com/rust-lang/rust/commit/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "eda2e1f7b4ef4a43e92fb62d75310bf53a59a8e6", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4449240d1ec360e8712c1e17e0b01c6ab5d02845/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4449240d1ec360e8712c1e17e0b01c6ab5d02845/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=4449240d1ec360e8712c1e17e0b01c6ab5d02845", "patch": "@@ -88,7 +88,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         body_id: ast::NodeId,\n         obligation: RegionObligation<'tcx>,\n     ) {\n-        debug!(\"register_region_obligation({:?}, {:?})\", body_id, obligation);\n+        debug!(\n+            \"register_region_obligation(body_id={:?}, obligation={:?})\",\n+            body_id,\n+            obligation\n+        );\n+\n         self.region_obligations\n             .borrow_mut()\n             .push((body_id, obligation));\n@@ -139,6 +144,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             \"cannot process registered region obligations in a snapshot\"\n         );\n \n+        debug!(\"process_registered_region_obligations()\");\n+\n         // pull out the region obligations with the given `body_id` (leaving the rest)\n         let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n         {\n@@ -157,6 +164,13 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             cause,\n         } in my_region_obligations\n         {\n+            debug!(\n+                \"process_registered_region_obligations: sup_type={:?} sub_region={:?} cause={:?}\",\n+                sup_type,\n+                sub_region,\n+                cause\n+            );\n+\n             let origin = SubregionOrigin::from_obligation_cause(\n                 &cause,\n                 || infer::RelateParamBound(cause.span, sup_type),"}, {"sha": "13e517c9c79977252f800b9eeda4a6c40e6f7916", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4449240d1ec360e8712c1e17e0b01c6ab5d02845/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4449240d1ec360e8712c1e17e0b01c6ab5d02845/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=4449240d1ec360e8712c1e17e0b01c6ab5d02845", "patch": "@@ -1284,6 +1284,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     ) {\n         let tcx = self.tcx();\n \n+        debug!(\n+            \"prove_aggregate_predicates(aggregate_kind={:?}, location={:?})\",\n+            aggregate_kind,\n+            location\n+        );\n+\n         let instantiated_predicates = match aggregate_kind {\n             AggregateKind::Adt(def, _, substs, _) => {\n                 tcx.predicates_of(def.did).instantiate(tcx, substs)\n@@ -1299,6 +1305,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         };\n \n         let predicates = self.normalize(&instantiated_predicates.predicates, location);\n+        debug!(\"prove_aggregate_predicates: predicates={:?}\", predicates);\n         self.prove_predicates(&predicates, location);\n     }\n \n@@ -1312,6 +1319,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     }\n \n     fn prove_predicates(&mut self, predicates: &[ty::Predicate<'tcx>], location: Location) {\n+        debug!(\n+            \"prove_predicates(predicates={:?}, location={:?})\",\n+            predicates,\n+            location\n+        );\n         self.fully_perform_op(location.at_self(), |this| {\n             let cause = this.misc(this.last_span);\n             let obligations = predicates"}]}