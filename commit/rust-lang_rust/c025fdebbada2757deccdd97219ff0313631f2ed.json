{"sha": "c025fdebbada2757deccdd97219ff0313631f2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjVmZGViYmFkYTI3NTdkZWNjZGQ5NzIxOWZmMDMxMzYzMWYyZWQ=", "commit": {"author": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2018-04-30T19:51:43Z"}, "committer": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2018-04-30T20:56:52Z"}, "message": "fixed some and added more tests", "tree": {"sha": "a0c8e066a9bba0da4581c98e2e1a308f43ae9184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c8e066a9bba0da4581c98e2e1a308f43ae9184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c025fdebbada2757deccdd97219ff0313631f2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c025fdebbada2757deccdd97219ff0313631f2ed", "html_url": "https://github.com/rust-lang/rust/commit/c025fdebbada2757deccdd97219ff0313631f2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c025fdebbada2757deccdd97219ff0313631f2ed/comments", "author": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17124488c7c7582fb9ab22ed87b2759ee20a4602", "url": "https://api.github.com/repos/rust-lang/rust/commits/17124488c7c7582fb9ab22ed87b2759ee20a4602", "html_url": "https://github.com/rust-lang/rust/commit/17124488c7c7582fb9ab22ed87b2759ee20a4602"}], "stats": {"total": 176, "additions": 158, "deletions": 18}, "files": [{"sha": "deb0380171c4eb1825ae0e7546bd922e211d4aa1", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -878,7 +878,7 @@ impl<T: Default> Option<T> {\n     }\n }\n \n-# [unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref> Option<T> {\n     /// Converts from `&Option<T>` to `Option<&T::Target>`.\n     ///"}, {"sha": "ced7b03636a092c75d662d29037d773d362eaeec", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -304,7 +304,15 @@ fn test_option_deref() {\n     let ref_option = &Some(&42);\n     assert_eq!(ref_option.deref(), Some(&42));\n \n+    let ref_option = &Some(String::from(\"a result\"));\n+    assert_eq!(ref_option.deref(), Some(\"a result\"));\n+\n+    let ref_option = &Some(vec![1, 2, 3, 4, 5]);\n+    assert_eq!(ref_option.deref(), Some(&[1, 2, 3, 4, 5][..]));\n+\n     // None: &Option<T: Deref>>::None -> None\n     let ref_option: &Option<&i32> = &None;\n     assert_eq!(ref_option.deref(), None);\n+\n+\n }"}, {"sha": "fd0dd21401b88b8645fbe9f889325aaea490f173", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 85, "deletions": 17, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -234,21 +234,89 @@ fn test_try() {\n \n #[test]\n fn test_result_deref() {\n-    // Ok(T).deref_ok() -> Result<&T, &E::Deref::Target>::Ok(&T)\n-    let ref_ok: &Result<&i32, &u8> = &Ok(&42);\n-    assert_eq!(ref_ok.deref_ok(), Ok(&42));\n-    assert_eq!(ref_ok.deref_ok(), Ok(&42));\n-    assert_eq!(ref_ok.deref(), Ok(&42));\n-\n-    // Err(E) -> Result<&T, &E::Deref::Target>::Err(&*E)\n-    let ref_err: &Result<&i32, &u8> = &Err(&41);\n-    assert_eq!(ref_err.deref_err(), Err(&41));\n-    assert_eq!(ref_err.deref_err(), Err(&41));\n-    assert_eq!(ref_err.deref(), Err(&41));\n-\n-    // &Ok(T).deref_err() -> Result<&T, &E::Deref::Target>::Ok(&T)\n-    assert_eq!(ref_ok.deref_err(), Ok(&&42));\n-\n-    // &Err(E) -> Result<&T::Deref::Target, &E>::Err(&E)\n-    assert_eq!(ref_err.deref_ok(), Err(&&41));\n+    // &Result<T: Deref, E>::Ok(T).deref_ok() ->\n+    //      Result<&T::Deref::Target, &E>::Ok(&*T)\n+    let ref_ok = &Result::Ok::<&i32, u8>(&42);\n+    let expected_result = Result::Ok::<&i32, &u8>(&42);\n+    assert_eq!(ref_ok.deref_ok(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<String, u32>(String::from(\"a result\"));\n+    let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n+    assert_eq!(ref_ok.deref_ok(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<Vec<i32>, u32>(vec![1, 2, 3, 4, 5]);\n+    let expected_result = Result::Ok::<&[i32], &u32>(&[1, 2, 3, 4, 5][..]);\n+    assert_eq!(ref_ok.deref_ok(), expected_result);\n+\n+    // &Result<T: Deref, E: Deref>::Ok(T).deref() ->\n+    //      Result<&T::Deref::Target, &E::Deref::Target>::Ok(&*T)\n+    let ref_ok = &Result::Ok::<&i32, &u8>(&42);\n+    let expected_result = Result::Ok::<&i32, &u8>(&42);\n+    assert_eq!(ref_ok.deref(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<String, &u32>(String::from(\"a result\"));\n+    let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n+    assert_eq!(ref_ok.deref(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<Vec<i32>, &u32>(vec![1, 2, 3, 4, 5]);\n+    let expected_result = Result::Ok::<&[i32], &u32>(&[1, 2, 3, 4, 5][..]);\n+    assert_eq!(ref_ok.deref(), expected_result);\n+\n+    // &Result<T, E: Deref>::Err(T).deref_err() ->\n+    //      Result<&T, &E::Deref::Target>::Err(&*E)\n+    let ref_err = &Result::Err::<u8, &i32>(&41);\n+    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    assert_eq!(ref_err.deref_err(), expected_result);\n+\n+    let ref_err = &Result::Err::<u32, String>(String::from(\"an error\"));\n+    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n+    assert_eq!(ref_err.deref_err(), expected_result);\n+\n+    let ref_err = &Result::Err::<u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n+    let expected_result = Result::Err::<&u32, &[i32]>(&[5, 4, 3, 2, 1][..]);\n+    assert_eq!(ref_err.deref_err(), expected_result);\n+\n+    // &Result<T: Deref, E: Deref>::Err(T).deref_err() ->\n+    //      Result<&T, &E::Deref::Target>::Err(&*E)\n+    let ref_err = &Result::Err::<&u8, &i32>(&41);\n+    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    assert_eq!(ref_err.deref(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, String>(String::from(\"an error\"));\n+    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n+    assert_eq!(ref_err.deref(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n+    let expected_result = Result::Err::<&u32, &[i32]>(&[5, 4, 3, 2, 1][..]);\n+    assert_eq!(ref_err.deref(), expected_result);\n+\n+    // *Odd corner cases (tested for completeness)*\n+\n+    // &Result<T, E: Deref>::Ok(T).deref_err() ->\n+    //      Result<&T, &E::Deref::Target>::Ok(&T)\n+    let ref_ok = &Result::Ok::<i32, &u8>(42);\n+    let expected_result = Result::Ok::<&i32, &u8>(&42);\n+    assert_eq!(ref_ok.deref_err(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<&str, &u32>(\"a result\");\n+    let expected_result = Result::Ok::<&&str, &u32>(&\"a result\");\n+    assert_eq!(ref_ok.deref_err(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<[i32; 5], &u32>([1, 2, 3, 4, 5]);\n+    let expected_result = Result::Ok::<&[i32; 5], &u32>(&[1, 2, 3, 4, 5]);\n+    assert_eq!(ref_ok.deref_err(), expected_result);\n+\n+    // &Result<T: Deref, E>::Err(E).deref_ok() ->\n+    //      Result<&T::Deref::Target, &E>::Err(&E)\n+    let ref_err = &Result::Err::<&u8, i32>(41);\n+    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    assert_eq!(ref_err.deref_ok(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, &str>(\"an error\");\n+    let expected_result = Result::Err::<&u32, &&str>(&\"an error\");\n+    assert_eq!(ref_err.deref_ok(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, [i32; 5]>([5, 4, 3, 2, 1]);\n+    let expected_result = Result::Err::<&u32, &[i32; 5]>(&[5, 4, 3, 2, 1]);\n+    assert_eq!(ref_err.deref_ok(), expected_result);\n }"}, {"sha": "4c67fb3bef10395e305cb1f4364746f7ae5e13be", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/option_deref.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Foption_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Foption_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Foption_deref.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Some(42).deref();\n+//~^ ERROR no method named `deref` found for type `std::option::Option<{integer}>`\n+}"}, {"sha": "73bdf0b9209077781e11b12cc72de68192b69499", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/result_deref.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Ok(42).deref();\n+//~^ ERROR no method named `deref` found\n+}"}, {"sha": "5d1e7472d8f18f6c3b1b9f7c217a788e63a913b0", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/result_deref_err.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_err.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Err(41).deref_err();\n+//~^ ERROR no method named `deref_err` found\n+}"}, {"sha": "bee8e0c062bae169856b63b8be120380d558ccd5", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/result_deref_ok.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025fdebbada2757deccdd97219ff0313631f2ed/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_ok.rs?ref=c025fdebbada2757deccdd97219ff0313631f2ed", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Ok(42).deref_ok();\n+//~^ ERROR no method named `deref_ok` found\n+}"}]}