{"sha": "0d453cc2be9130864bbc8387ad7ba48dcf642a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNDUzY2MyYmU5MTMwODY0YmJjODM4N2FkN2JhNDhkY2Y2NDJhMjE=", "commit": {"author": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-09-03T16:43:40Z"}, "committer": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-09-03T16:43:40Z"}, "message": "Fix replacing for loops over ranges with for_each.", "tree": {"sha": "c7041980f79733da82039b198c768217312fac10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7041980f79733da82039b198c768217312fac10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d453cc2be9130864bbc8387ad7ba48dcf642a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d453cc2be9130864bbc8387ad7ba48dcf642a21", "html_url": "https://github.com/rust-lang/rust/commit/0d453cc2be9130864bbc8387ad7ba48dcf642a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d453cc2be9130864bbc8387ad7ba48dcf642a21/comments", "author": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2520128dc348529afc99263f82f255d39e047d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2520128dc348529afc99263f82f255d39e047d", "html_url": "https://github.com/rust-lang/rust/commit/ac2520128dc348529afc99263f82f255d39e047d"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "c5bdbfbbe7c7d5c127c0fc4bd177260f753931a9", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0d453cc2be9130864bbc8387ad7ba48dcf642a21/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d453cc2be9130864bbc8387ad7ba48dcf642a21/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=0d453cc2be9130864bbc8387ad7ba48dcf642a21", "patch": "@@ -50,14 +50,15 @@ pub(crate) fn replace_for_loop_with_for_each(acc: &mut Assists, ctx: &AssistCont\n                 // We have either \"for x in &col\" and col implements a method called iter\n                 //             or \"for x in &mut col\" and col implements a method called iter_mut\n                 format_to!(buf, \"{}.{}()\", expr_behind_ref, method);\n+            } else if matches!(iterable, ast::Expr::RangeExpr(..)) {\n+                // range expressions need to be parenthesized for the syntax to be correct\n+                format_to!(buf, \"({})\", iterable);\n             } else if impls_core_iter(&ctx.sema, &iterable) {\n                 format_to!(buf, \"{}\", iterable);\n+            } else if let ast::Expr::RefExpr(_) = iterable {\n+                format_to!(buf, \"({}).into_iter()\", iterable);\n             } else {\n-                if let ast::Expr::RefExpr(_) = iterable {\n-                    format_to!(buf, \"({}).into_iter()\", iterable);\n-                } else {\n-                    format_to!(buf, \"{}.into_iter()\", iterable);\n-                }\n+                format_to!(buf, \"{}.into_iter()\", iterable);\n             }\n \n             format_to!(buf, \".for_each(|{}| {});\", pat, body);\n@@ -167,6 +168,42 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn test_for_in_range() {\n+        check_assist(\n+            replace_for_loop_with_for_each,\n+            r#\"\n+//- minicore: range, iterators\n+impl<T> core::iter::Iterator for core::ops::Range<T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    for $0x in 0..92 {\n+        print!(\"{}\", x);\n+    }\n+}\"#,\n+            r#\"\n+impl<T> core::iter::Iterator for core::ops::Range<T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    (0..92).for_each(|x| {\n+        print!(\"{}\", x);\n+    });\n+}\"#,\n+        )\n+    }\n+\n     #[test]\n     fn not_available_in_body() {\n         cov_mark::check!(not_available_in_body);"}]}