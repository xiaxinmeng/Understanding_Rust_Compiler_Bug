{"sha": "844e3fb92827eed09ebee58e0e93f5317806b9fa", "node_id": "C_kwDOAAsO6NoAKDg0NGUzZmI5MjgyN2VlZDA5ZWJlZTU4ZTBlOTNmNTMxNzgwNmI5ZmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T13:11:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T13:11:11Z"}, "message": "Rollup merge of #104595 - compiler-errors:poly-existential-predicate, r=lcnr\n\nAdd `PolyExistentialPredicate` type alias\n\nWrapping `ExistentialPredicate`s in a binder is very common, and this alias already exists for the `PolyExistential{TraitRef,Projection}` types.", "tree": {"sha": "4e98a204e3753f1a9e9df2d3b15f13ce747cef3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e98a204e3753f1a9e9df2d3b15f13ce747cef3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844e3fb92827eed09ebee58e0e93f5317806b9fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJje3jvCRBK7hj4Ov3rIwAAahUIAEHeFiccLdQZQNkEISR8K/Jc\nA3WOKcW+3tBE+FdwVS5W8T5rMdumPGyhrX9rEF4AIYUBlp4kivI77Cn2YiO21pu7\nQYL5BnI36yf6ugrPTWepS5mT9F7dCNJRTD2bs29jv1YxFQJt8aRNCevaYk2wsktW\ntiHs5TG7xpBx3klDrunGtPybrQhaNTq+0edcreOqpY4JJd4x1wxVlUo6/ny9lv0v\ng/oVAr0xFJCvbugjIbiImxZxSuDSaAdVrYnFg8yH0Mi/m0tnjHdqYqX8hRAa2wcj\npAbvKHdZS/t/aP4Bi7WteML0MtL80chFrEb6vhpE+OCASn21fYPv8Pt72PO1eRI=\n=XbvX\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e98a204e3753f1a9e9df2d3b15f13ce747cef3c\nparent cc2397b2cd654833b3f02a4153819a9be3824860\nparent c36ff28d4214c65df55cb1d9d8085b34d33d37fb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669036271 +0100\ncommitter GitHub <noreply@github.com> 1669036271 +0100\n\nRollup merge of #104595 - compiler-errors:poly-existential-predicate, r=lcnr\n\nAdd `PolyExistentialPredicate` type alias\n\nWrapping `ExistentialPredicate`s in a binder is very common, and this alias already exists for the `PolyExistential{TraitRef,Projection}` types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844e3fb92827eed09ebee58e0e93f5317806b9fa", "html_url": "https://github.com/rust-lang/rust/commit/844e3fb92827eed09ebee58e0e93f5317806b9fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844e3fb92827eed09ebee58e0e93f5317806b9fa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2397b2cd654833b3f02a4153819a9be3824860", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2397b2cd654833b3f02a4153819a9be3824860", "html_url": "https://github.com/rust-lang/rust/commit/cc2397b2cd654833b3f02a4153819a9be3824860"}, {"sha": "c36ff28d4214c65df55cb1d9d8085b34d33d37fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c36ff28d4214c65df55cb1d9d8085b34d33d37fb", "html_url": "https://github.com/rust-lang/rust/commit/c36ff28d4214c65df55cb1d9d8085b34d33d37fb"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "14c8c88028bdac0448ad5321272730a4842fcfe0", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         self.pretty_print_dyn_existential(predicates)\n     }"}, {"sha": "3f4891efaa7d03313cdcd8517b12db4b913064fe", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -3023,7 +3023,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn compute_object_lifetime_bound(\n         &self,\n         span: Span,\n-        existential_predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        existential_predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Option<ty::Region<'tcx>> // if None, use the default\n     {\n         let tcx = self.tcx();"}, {"sha": "cf3b37f0a25088e4e5f00624a8ef172df8b6475a", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -748,7 +748,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         &self,\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n         b_region: ty::Region<'tcx>,\n     ) -> CoerceResult<'tcx> {\n         if !self.tcx.features().dyn_star {"}, {"sha": "e03a4ea8247194e6116ab83141aabc7638d963f3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -542,7 +542,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n             fn print_dyn_existential(\n                 self,\n-                _predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+                _predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n             ) -> Result<Self::DynExistential, Self::Error> {\n                 Err(NonTrivialPath)\n             }"}, {"sha": "589b4d6a10ff13da19e4de7524f0e59497e11d21", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -1159,7 +1159,7 @@ impl<'tcx> LateContext<'tcx> {\n \n             fn print_dyn_existential(\n                 self,\n-                _predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+                _predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n             ) -> Result<Self::DynExistential, Self::Error> {\n                 Ok(())\n             }"}, {"sha": "b469eebfad993836e852bc07bb6ed7f104bcd348", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -298,7 +298,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<Ty\n }\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n-    for ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n+    for ty::List<ty::PolyExistentialPredicate<'tcx>>\n {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n@@ -379,7 +379,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,\n-    &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+    &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     &'tcx traits::ImplSource<'tcx, ()>,\n     &'tcx mir::Body<'tcx>,\n     &'tcx mir::UnsafetyCheckResult,"}, {"sha": "13695089eb828a6043172695bcc5a56e440bd22b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -17,11 +17,11 @@ use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n-    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, ExistentialPredicate, FloatTy,\n-    FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List,\n-    ParamConst, ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy, Region,\n-    RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n-    Visibility,\n+    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, FloatTy, FloatVar, FloatVid,\n+    GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n+    PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy,\n+    Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut,\n+    UintTy, Visibility,\n };\n use crate::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef, UserSubsts};\n use rustc_ast as ast;\n@@ -109,7 +109,7 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type Mutability = hir::Mutability;\n     type Movability = hir::Movability;\n     type PolyFnSig = PolyFnSig<'tcx>;\n-    type ListBinderExistentialPredicate = &'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>;\n+    type ListBinderExistentialPredicate = &'tcx List<PolyExistentialPredicate<'tcx>>;\n     type BinderListTy = Binder<'tcx, &'tcx List<Ty<'tcx>>>;\n     type ListTy = &'tcx List<Ty<'tcx>>;\n     type ProjectionTy = ty::ProjectionTy<'tcx>;\n@@ -140,8 +140,7 @@ pub struct CtxtInterners<'tcx> {\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind<'tcx>>,\n-    poly_existential_predicates:\n-        InternedSet<'tcx, List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>>,\n+    poly_existential_predicates: InternedSet<'tcx, List<PolyExistentialPredicate<'tcx>>>,\n     predicate: InternedSet<'tcx, PredicateS<'tcx>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n@@ -1810,7 +1809,7 @@ nop_lift! {const_; Const<'a> => Const<'tcx>}\n nop_lift! {const_allocation; ConstAllocation<'a> => ConstAllocation<'tcx>}\n nop_lift! {predicate; Predicate<'a> => Predicate<'tcx>}\n \n-nop_list_lift! {poly_existential_predicates; ty::Binder<'a, ExistentialPredicate<'a>> => ty::Binder<'tcx, ExistentialPredicate<'tcx>>}\n+nop_list_lift! {poly_existential_predicates; PolyExistentialPredicate<'a> => PolyExistentialPredicate<'tcx>}\n nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n nop_list_lift! {canonical_var_infos; CanonicalVarInfo<'a> => CanonicalVarInfo<'tcx>}\n nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n@@ -2265,7 +2264,7 @@ slice_interners!(\n     substs: _intern_substs(GenericArg<'tcx>),\n     canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n     poly_existential_predicates:\n-        _intern_poly_existential_predicates(ty::Binder<'tcx, ExistentialPredicate<'tcx>>),\n+        _intern_poly_existential_predicates(PolyExistentialPredicate<'tcx>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n     projs: _intern_projs(ProjectionKind),\n     place_elems: _intern_place_elems(PlaceElem<'tcx>),\n@@ -2544,7 +2543,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_dynamic(\n         self,\n-        obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n+        obj: &'tcx List<PolyExistentialPredicate<'tcx>>,\n         reg: ty::Region<'tcx>,\n         repr: DynKind,\n     ) -> Ty<'tcx> {\n@@ -2682,8 +2681,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn intern_poly_existential_predicates(\n         self,\n-        eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],\n-    ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n+        eps: &[PolyExistentialPredicate<'tcx>],\n+    ) -> &'tcx List<PolyExistentialPredicate<'tcx>> {\n         assert!(!eps.is_empty());\n         assert!(\n             eps.array_windows()\n@@ -2767,10 +2766,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn mk_poly_existential_predicates<\n-        I: InternAs<\n-            [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],\n-            &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n-        >,\n+        I: InternAs<[PolyExistentialPredicate<'tcx>], &'tcx List<PolyExistentialPredicate<'tcx>>>,\n     >(\n         self,\n         iter: I,"}, {"sha": "a61f41b9c580f02086e36a283f1e9eabada4eac4", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -69,9 +69,7 @@ pub enum TypeError<'tcx> {\n     CyclicTy(Ty<'tcx>),\n     CyclicConst(ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n-    ExistentialMismatch(\n-        ExpectedFound<&'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>>,\n-    ),\n+    ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>>),\n     ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<ty::Const<'tcx>>),\n "}, {"sha": "4db1c4a20d32ca58f1d2cc50a0d6ee508f300fcc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -94,9 +94,10 @@ pub use self::sty::{\n     BoundVariableKind, CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid,\n     EarlyBoundRegion, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig,\n     FreeRegion, GenSig, GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts,\n-    InlineConstSubstsParts, ParamConst, ParamTy, PolyExistentialProjection,\n-    PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef, ProjectionTy, Region, RegionKind,\n-    RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts, VarianceDiagInfo,\n+    InlineConstSubstsParts, ParamConst, ParamTy, PolyExistentialPredicate,\n+    PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef,\n+    ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts,\n+    VarianceDiagInfo,\n };\n pub use self::trait_def::TraitDef;\n "}, {"sha": "667298b9b5b1316ff2738e5c08b1ceab2502be75", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -63,7 +63,7 @@ pub trait Printer<'tcx>: Sized {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error>;\n \n     fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error>;\n@@ -308,9 +308,7 @@ impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, P: Printer<'tcx>> Print<'tcx, P>\n-    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n-{\n+impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     type Output = P::DynExistential;\n     type Error = P::Error;\n     fn print(&self, cx: P) -> Result<Self::Output, Self::Error> {"}, {"sha": "a0c076cbbb245607024cd544f556220c4ff64471", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -1060,7 +1060,7 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn pretty_print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         // Generate the main trait ref, including associated types.\n         let mut first = true;\n@@ -1772,7 +1772,7 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         self.pretty_print_dyn_existential(predicates)\n     }\n@@ -2530,12 +2530,12 @@ pub struct PrintClosureAsImpl<'tcx> {\n forward_display_to_print! {\n     ty::Region<'tcx>,\n     Ty<'tcx>,\n-    &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+    &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ty::Const<'tcx>,\n \n     // HACK(eddyb) these are exhaustive instead of generic,\n     // because `for<'tcx>` isn't possible yet.\n-    ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>,\n+    ty::PolyExistentialPredicate<'tcx>,\n     ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     ty::Binder<'tcx, ty::ExistentialTraitRef<'tcx>>,\n     ty::Binder<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,"}, {"sha": "5708abf0729c74756ca3f2eddbc4308babf01ccf", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -649,7 +649,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }\n }\n \n-impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {\n+impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Self,"}, {"sha": "6be8fdd7cd795ab53f0f9388ada888d6c1352764", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -586,7 +586,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx,\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {\n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }"}, {"sha": "e2a7b09de6ab452f48c0df79644a89d1d906606c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -703,7 +703,9 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {\n+pub type PolyExistentialPredicate<'tcx> = Binder<'tcx, ExistentialPredicate<'tcx>>;\n+\n+impl<'tcx> PolyExistentialPredicate<'tcx> {\n     /// Given an existential predicate like `?Self: PartialEq<u32>` (e.g., derived from `dyn PartialEq<u32>`),\n     /// and a concrete type `self_ty`, returns a full predicate where the existentially quantified variable `?Self`\n     /// has been replaced with `self_ty` (e.g., `self_ty: PartialEq<u32>`, in our example).\n@@ -727,7 +729,7 @@ impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n+impl<'tcx> List<ty::PolyExistentialPredicate<'tcx>> {\n     /// Returns the \"principal `DefId`\" of this set of existential predicates.\n     ///\n     /// A Rust trait object type consists (in addition to a lifetime bound)"}, {"sha": "c60a2f4671d6c4d841565f9aaba8bb6f67279fa7", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -244,7 +244,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         let mut first = true;\n         for p in predicates {"}, {"sha": "87128e0f893a263edb6a8b9a6877f697338d1da7", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -12,8 +12,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self, Binder, Const, ExistentialPredicate, FloatTy, FnSig, IntTy, List, Region, RegionKind,\n-    TermKind, Ty, TyCtxt, UintTy,\n+    self, Const, ExistentialPredicate, FloatTy, FnSig, IntTy, List, Region, RegionKind, TermKind,\n+    Ty, TyCtxt, UintTy,\n };\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::sym;\n@@ -226,7 +226,7 @@ fn encode_fnsig<'tcx>(\n /// Rust types that are not used at the FFI boundary.\n fn encode_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicate: Binder<'tcx, ExistentialPredicate<'tcx>>,\n+    predicate: ty::PolyExistentialPredicate<'tcx>,\n     dict: &mut FxHashMap<DictKey<'tcx>, usize>,\n     options: EncodeTyOptions,\n ) -> String {\n@@ -261,13 +261,13 @@ fn encode_predicate<'tcx>(\n /// Rust types that are not used at the FFI boundary.\n fn encode_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicates: &List<Binder<'tcx, ExistentialPredicate<'tcx>>>,\n+    predicates: &List<ty::PolyExistentialPredicate<'tcx>>,\n     dict: &mut FxHashMap<DictKey<'tcx>, usize>,\n     options: EncodeTyOptions,\n ) -> String {\n     // <predicate1[..predicateN]>E as part of vendor extended type\n     let mut s = String::new();\n-    let predicates: Vec<Binder<'tcx, ExistentialPredicate<'tcx>>> =\n+    let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> =\n         predicates.iter().map(|predicate| predicate).collect();\n     for predicate in predicates {\n         s.push_str(&encode_predicate(tcx, predicate, dict, options));"}, {"sha": "6ad0a7d29110c929c51e3ecd71978e29c61b9fcd", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -502,7 +502,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         // Okay, so this is a bit tricky. Imagine we have a trait object like\n         // `dyn for<'a> Foo<'a, Bar = &'a ()>`. When we mangle this, the"}, {"sha": "fce92c66ee8c75ec646eefea4147d27cf0fb9440", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -758,7 +758,7 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn from_object_ty(\n         &mut self,\n         ty: Ty<'tcx>,\n-        data: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        data: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n         region: ty::Region<'tcx>,\n     ) {\n         // Imagine a type like this:\n@@ -822,7 +822,7 @@ impl<'tcx> WfPredicates<'tcx> {\n /// `infer::required_region_bounds`, see that for more information.\n pub fn object_region_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    existential_predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+    existential_predicates: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n ) -> Vec<ty::Region<'tcx>> {\n     // Since we don't actually *know* the self type for an object,\n     // this \"open(err)\" serves as a kind of dummy standin -- basically"}, {"sha": "36bd466496e12892e5e2ca22d1e84386ffb92f1d", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -634,7 +634,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<RustInterner<'tcx>>>>\n-    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n+    for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>\n {\n     fn lower_into(\n         self,"}, {"sha": "ea00650d42aa19463d5ca42e2ace17a17d7b85c4", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844e3fb92827eed09ebee58e0e93f5317806b9fa/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844e3fb92827eed09ebee58e0e93f5317806b9fa/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=844e3fb92827eed09ebee58e0e93f5317806b9fa", "patch": "@@ -687,7 +687,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n fn matches_preds<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,\n-    preds: &'tcx [Binder<'tcx, ExistentialPredicate<'tcx>>],\n+    preds: &'tcx [ty::PolyExistentialPredicate<'tcx>],\n ) -> bool {\n     let infcx = cx.tcx.infer_ctxt().build();\n     preds.iter().all(|&p| match cx.tcx.erase_late_bound_regions(p) {"}]}