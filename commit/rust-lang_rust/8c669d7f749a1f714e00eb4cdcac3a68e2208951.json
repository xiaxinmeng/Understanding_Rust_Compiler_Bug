{"sha": "8c669d7f749a1f714e00eb4cdcac3a68e2208951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjY5ZDdmNzQ5YTFmNzE0ZTAwZWI0Y2RjYWMzYTY4ZTIyMDg5NTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-29T08:35:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-01T04:59:50Z"}, "message": "rustdoc: Suck in all impls from external crates\n\nThere is currently no way to query all impls for a type from an external crate,\nand with primitive types in play this is also quite difficult. Instead of\nfiltering, just suck in all impls from upstream crates into the local AST, and\nhave them get stripped later.\n\nThis will allow population of all implementations of traits for primitive types,\nas well as filling in some corner cases with inlining documentation in other\ncases.", "tree": {"sha": "5523fd74d0204d6369a04122b8a1eac008d3c6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5523fd74d0204d6369a04122b8a1eac008d3c6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c669d7f749a1f714e00eb4cdcac3a68e2208951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c669d7f749a1f714e00eb4cdcac3a68e2208951", "html_url": "https://github.com/rust-lang/rust/commit/8c669d7f749a1f714e00eb4cdcac3a68e2208951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c669d7f749a1f714e00eb4cdcac3a68e2208951/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2564b8fd4f9669d2426e0e637e71139e2004ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2564b8fd4f9669d2426e0e637e71139e2004ea3", "html_url": "https://github.com/rust-lang/rust/commit/c2564b8fd4f9669d2426e0e637e71139e2004ea3"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "0c2714355dc24b6bc0a7c2c3be4c5e7c2db96607", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8c669d7f749a1f714e00eb4cdcac3a68e2208951/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c669d7f749a1f714e00eb4cdcac3a68e2208951/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8c669d7f749a1f714e00eb4cdcac3a68e2208951", "patch": "@@ -67,12 +67,12 @@ fn try_inline_def(cx: &core::DocContext,\n         }\n         ast::DefStruct(did) => {\n             record_extern_fqn(cx, did, clean::TypeStruct);\n-            ret.extend(build_impls(tcx, did).move_iter());\n+            ret.extend(build_impls(cx, tcx, did).move_iter());\n             clean::StructItem(build_struct(tcx, did))\n         }\n         ast::DefTy(did) => {\n             record_extern_fqn(cx, did, clean::TypeEnum);\n-            ret.extend(build_impls(tcx, did).move_iter());\n+            ret.extend(build_impls(cx, tcx, did).move_iter());\n             build_type(tcx, did)\n         }\n         // Assume that the enum type is reexported next to the variant, and\n@@ -193,7 +193,8 @@ fn build_type(tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEnum {\n     })\n }\n \n-fn build_impls(tcx: &ty::ctxt,\n+fn build_impls(cx: &core::DocContext,\n+               tcx: &ty::ctxt,\n                did: ast::DefId) -> Vec<clean::Item> {\n     ty::populate_implementations_for_type_if_necessary(tcx, did);\n     let mut impls = Vec::new();\n@@ -205,6 +206,38 @@ fn build_impls(tcx: &ty::ctxt,\n         }\n     }\n \n+    // If this is the first time we've inlined something from this crate, then\n+    // we inline *all* impls from the crate into this crate. Note that there's\n+    // currently no way for us to filter this based on type, and we likely need\n+    // many impls for a variety of reasons.\n+    //\n+    // Primarily, the impls will be used to populate the documentation for this\n+    // type being inlined, but impls can also be used when generating\n+    // documentation for primitives (no way to find those specifically).\n+    if cx.populated_crate_impls.borrow_mut().insert(did.krate) {\n+        csearch::each_top_level_item_of_crate(&tcx.sess.cstore,\n+                                              did.krate,\n+                                              |def, _, _| {\n+            populate_impls(tcx, def, &mut impls)\n+        });\n+\n+        fn populate_impls(tcx: &ty::ctxt,\n+                          def: decoder::DefLike,\n+                          impls: &mut Vec<clean::Item>) {\n+            match def {\n+                decoder::DlImpl(did) => impls.push(build_impl(tcx, did)),\n+                decoder::DlDef(ast::DefMod(did)) => {\n+                    csearch::each_child_of_item(&tcx.sess.cstore,\n+                                                did,\n+                                                |def, _, _| {\n+                        populate_impls(tcx, def, impls)\n+                    })\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+\n     impls\n }\n \n@@ -268,7 +301,8 @@ fn build_module(cx: &core::DocContext, tcx: &ty::ctxt,\n                     None => {}\n                 }\n             }\n-            decoder::DlImpl(did) => items.push(build_impl(tcx, did)),\n+            // All impls were inlined above\n+            decoder::DlImpl(..) => {}\n             decoder::DlField => fail!(\"unimplemented field\"),\n         }\n     });"}, {"sha": "87b19fecb1f2025bf97747982767b7c5ef944e92", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c669d7f749a1f714e00eb4cdcac3a68e2208951/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c669d7f749a1f714e00eb4cdcac3a68e2208951/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8c669d7f749a1f714e00eb4cdcac3a68e2208951", "patch": "@@ -42,6 +42,7 @@ pub struct DocContext {\n     pub external_traits: RefCell<Option<HashMap<ast::DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<ast::DefId, String>>>,\n     pub inlined: RefCell<Option<HashSet<ast::DefId>>>,\n+    pub populated_crate_impls: RefCell<HashSet<ast::CrateNum>>,\n }\n \n impl DocContext {\n@@ -114,6 +115,7 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>)\n         external_typarams: RefCell::new(Some(HashMap::new())),\n         external_paths: RefCell::new(Some(HashMap::new())),\n         inlined: RefCell::new(Some(HashSet::new())),\n+        populated_crate_impls: RefCell::new(HashSet::new()),\n     }, CrateAnalysis {\n         exported_items: exported_items,\n         public_items: public_items,"}, {"sha": "c1f61de9be2f72c09d7b3335a6e3450dc86c3629", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c669d7f749a1f714e00eb4cdcac3a68e2208951/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c669d7f749a1f714e00eb4cdcac3a68e2208951/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8c669d7f749a1f714e00eb4cdcac3a68e2208951", "patch": "@@ -79,6 +79,7 @@ pub fn run(input: &str,\n         external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),\n         inlined: RefCell::new(None),\n+        populated_crate_impls: RefCell::new(HashSet::new()),\n     };\n     super::ctxtkey.replace(Some(ctx));\n "}]}