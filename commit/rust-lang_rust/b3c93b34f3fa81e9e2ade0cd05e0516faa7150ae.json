{"sha": "b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYzkzYjM0ZjNmYTgxZTllMmFkZTBjZDA1ZTA1MTZmYWE3MTUwYWU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-01-18T07:07:53Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-01-18T07:07:53Z"}, "message": "Make WindowsPath::new(\"C:foo\").root_path() return Some(\"C:\")", "tree": {"sha": "b5b73ff53ada67fd84ed055c3a7446a9a18f6361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b73ff53ada67fd84ed055c3a7446a9a18f6361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "html_url": "https://github.com/rust-lang/rust/commit/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4498c71e21308f6657d0150d5f473835e4b436f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4498c71e21308f6657d0150d5f473835e4b436f", "html_url": "https://github.com/rust-lang/rust/commit/f4498c71e21308f6657d0150d5f473835e4b436f"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "dd245ec4f1a09b3cc06b08e2837611489fa4a97c", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "patch": "@@ -386,7 +386,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n \n     /// Returns a Path that represents the filesystem root that `self` is rooted in.\n     ///\n-    /// If `self` is not absolute, or vol-relative in the case of Windows, this returns None.\n+    /// If `self` is not absolute, or vol/cwd-relative in the case of Windows, this returns None.\n     fn root_path(&self) -> Option<Self>;\n \n     /// Pushes a path (as a byte vector or string) onto `self`."}, {"sha": "2d9d787d72de57a80d1c68737605754ac0635937", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "patch": "@@ -432,9 +432,12 @@ impl GenericPath for Path {\n     }\n \n     fn root_path(&self) -> Option<Path> {\n-        if self.is_absolute() {\n+        if self.prefix.is_some() {\n             Some(Path::new(match self.prefix {\n-                Some(VerbatimDiskPrefix)|Some(DiskPrefix) => {\n+                Some(DiskPrefix) if self.is_absolute() => {\n+                    self.repr.slice_to(self.prefix_len()+1)\n+                }\n+                Some(VerbatimDiskPrefix) => {\n                     self.repr.slice_to(self.prefix_len()+1)\n                 }\n                 _ => self.repr.slice_to(self.prefix_len())\n@@ -1683,7 +1686,7 @@ mod tests {\n     fn test_root_path() {\n         assert_eq!(Path::new(\"a\\\\b\\\\c\").root_path(), None);\n         assert_eq!(Path::new(\"\\\\a\\\\b\\\\c\").root_path(), Some(Path::new(\"\\\\\")));\n-        assert_eq!(Path::new(\"C:a\").root_path(), None);\n+        assert_eq!(Path::new(\"C:a\").root_path(), Some(Path::new(\"C:\")));\n         assert_eq!(Path::new(\"C:\\\\a\").root_path(), Some(Path::new(\"C:\\\\\")));\n         assert_eq!(Path::new(\"\\\\\\\\a\\\\b\\\\c\").root_path(), Some(Path::new(\"\\\\\\\\a\\\\b\")));\n         assert_eq!(Path::new(\"\\\\\\\\?\\\\a\\\\b\").root_path(), Some(Path::new(\"\\\\\\\\?\\\\a\")));"}]}