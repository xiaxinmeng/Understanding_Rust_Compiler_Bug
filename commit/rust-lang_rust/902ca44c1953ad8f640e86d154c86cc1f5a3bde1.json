{"sha": "902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMmNhNDRjMTk1M2FkOGY2NDBlODZkMTU0Yzg2Y2MxZjVhM2JkZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T01:16:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T01:16:08Z"}, "message": "Auto merge of #83664 - Dylan-DPC:rollup-wx6idpd, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #82331 (alloc: Added `as_slice` method to `BinaryHeap` collection)\n - #83130 (escape_ascii take 2)\n - #83374 (unix: Fix feature(unix_socket_ancillary_data) on macos and other BSDs)\n - #83543 (Lint on unknown intra-doc link disambiguators)\n - #83636 (Add a regression test for issue-82792)\n - #83643 (Remove a FIXME resolved by #73578)\n - #83644 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a46df06066c2be5d86bcd1a57aada54b1c8cbf94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a46df06066c2be5d86bcd1a57aada54b1c8cbf94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "html_url": "https://github.com/rust-lang/rust/commit/902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50489e3b0048af4df6f0a92bb43af8afce9b6652", "url": "https://api.github.com/repos/rust-lang/rust/commits/50489e3b0048af4df6f0a92bb43af8afce9b6652", "html_url": "https://github.com/rust-lang/rust/commit/50489e3b0048af4df6f0a92bb43af8afce9b6652"}, {"sha": "6738ee7d59b2bdf82a25a3e0486b31df550c5598", "url": "https://api.github.com/repos/rust-lang/rust/commits/6738ee7d59b2bdf82a25a3e0486b31df550c5598", "html_url": "https://github.com/rust-lang/rust/commit/6738ee7d59b2bdf82a25a3e0486b31df550c5598"}], "stats": {"total": 470, "additions": 367, "deletions": 103}, "files": [{"sha": "9c7de250c29b1de956d6d4391333dbfe5fa5d79b", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -699,7 +699,6 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// optimization as well as the rules around static values. Note\n     /// that the `Freeze` trait is not exposed to end users and is\n     /// effectively an implementation detail.\n-    // FIXME: use `TyCtxtAt` instead of separate `Span`.\n     pub fn is_freeze(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n         self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))\n     }"}, {"sha": "bf9f7432fb5367ad306b743a6b6f2d7ce96b92d7", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -958,6 +958,27 @@ impl<T> BinaryHeap<T> {\n         self.data.shrink_to(min_capacity)\n     }\n \n+    /// Returns a slice of all values in the underlying vector, in arbitrary\n+    /// order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(binary_heap_as_slice)]\n+    /// use std::collections::BinaryHeap;\n+    /// use std::io::{self, Write};\n+    ///\n+    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);\n+    ///\n+    /// io::sink().write(heap.as_slice()).unwrap();\n+    /// ```\n+    #[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self.data.as_slice()\n+    }\n+\n     /// Consumes the `BinaryHeap` and returns the underlying vector\n     /// in arbitrary order.\n     ///"}, {"sha": "7e1194cc4aa20e3e66efa7d6d09f29155207b924", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -14,6 +14,7 @@\n #![feature(binary_heap_drain_sorted)]\n #![feature(slice_ptr_get)]\n #![feature(binary_heap_retain)]\n+#![feature(binary_heap_as_slice)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]\n #![feature(vecdeque_binary_search)]"}, {"sha": "6032dc9a2d371c610829b79f2a4c748cee1a9c15", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -2,6 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::ascii;\n use crate::intrinsics;\n use crate::mem;\n use crate::str::FromStr;\n@@ -661,6 +662,31 @@ impl u8 {\n     pub const fn is_ascii_control(&self) -> bool {\n         matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')\n     }\n+\n+    /// Returns an iterator that produces an escaped version of a `u8`,\n+    /// treating it as an ASCII character.\n+    ///\n+    /// The behavior is identical to [`ascii::escape_default`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inherent_ascii_escape)]\n+    ///\n+    /// assert_eq!(\"0\", b'0'.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\t\", b'\\t'.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\r\", b'\\r'.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\n\", b'\\n'.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\'\", b'\\''.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\\\\"\", b'\"'.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\\\\\\", b'\\\\'.escape_ascii().to_string());\n+    /// assert_eq!(\"\\\\x9d\", b'\\x9d'.escape_ascii().to_string());\n+    /// ```\n+    #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+    #[inline]\n+    pub fn escape_ascii(&self) -> ascii::EscapeDefault {\n+        ascii::escape_default(*self)\n+    }\n }\n \n #[lang = \"u16\"]"}, {"sha": "22fa08b97957019843051e19c9b8a1d4f6f4ef0a", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -1,7 +1,10 @@\n //! Operations on ASCII `[u8]`.\n \n+use crate::ascii;\n+use crate::fmt::{self, Write};\n use crate::iter;\n use crate::mem;\n+use crate::ops;\n \n #[lang = \"slice_u8\"]\n #[cfg(not(test))]\n@@ -56,6 +59,95 @@ impl [u8] {\n             byte.make_ascii_lowercase();\n         }\n     }\n+\n+    /// Returns an iterator that produces an escaped version of this slice,\n+    /// treating it as an ASCII string.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inherent_ascii_escape)]\n+    ///\n+    /// let s = b\"0\\t\\r\\n'\\\"\\\\\\x9d\";\n+    /// let escaped = s.escape_ascii().to_string();\n+    /// assert_eq!(escaped, \"0\\\\t\\\\r\\\\n\\\\'\\\\\\\"\\\\\\\\\\\\x9d\");\n+    /// ```\n+    #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+    pub fn escape_ascii(&self) -> EscapeAscii<'_> {\n+        EscapeAscii { inner: self.iter().flat_map(EscapeByte) }\n+    }\n+}\n+\n+impl_fn_for_zst! {\n+    #[derive(Clone)]\n+    struct EscapeByte impl Fn = |byte: &u8| -> ascii::EscapeDefault {\n+        ascii::escape_default(*byte)\n+    };\n+}\n+\n+/// An iterator over the escaped version of a byte slice.\n+///\n+/// This `struct` is created by the [`slice::escape_ascii`] method. See its\n+/// documentation for more information.\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[derive(Clone)]\n+pub struct EscapeAscii<'a> {\n+    inner: iter::FlatMap<super::Iter<'a, u8>, ascii::EscapeDefault, EscapeByte>,\n+}\n+\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+impl<'a> iter::Iterator for EscapeAscii<'a> {\n+    type Item = u8;\n+    #[inline]\n+    fn next(&mut self) -> Option<u8> {\n+        self.inner.next()\n+    }\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+    #[inline]\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: ops::Try<Ok = Acc>,\n+    {\n+        self.inner.try_fold(init, fold)\n+    }\n+    #[inline]\n+    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.inner.fold(init, fold)\n+    }\n+    #[inline]\n+    fn last(mut self) -> Option<u8> {\n+        self.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+impl<'a> iter::DoubleEndedIterator for EscapeAscii<'a> {\n+    fn next_back(&mut self) -> Option<u8> {\n+        self.inner.next_back()\n+    }\n+}\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+impl<'a> iter::ExactSizeIterator for EscapeAscii<'a> {}\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+impl<'a> iter::FusedIterator for EscapeAscii<'a> {}\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+impl<'a> fmt::Display for EscapeAscii<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.clone().try_for_each(|b| f.write_char(b as char))\n+    }\n+}\n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+impl<'a> fmt::Debug for EscapeAscii<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.pad(\"EscapeAscii { .. }\")\n+    }\n }\n \n /// Returns `true` if any byte in the word `v` is nonascii (>= 128). Snarfed"}, {"sha": "59fad8c813c733e0ad3a6b6b6ae48c50d8819600", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -81,6 +81,9 @@ pub use index::SliceIndex;\n #[unstable(feature = \"slice_range\", issue = \"76393\")]\n pub use index::range;\n \n+#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+pub use ascii::EscapeAscii;\n+\n #[lang = \"slice\"]\n #[cfg(not(test))]\n impl<T> [T] {"}, {"sha": "011ae643f87123bf9cf74539429c48abbd380d19", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -5,9 +5,7 @@ use crate::marker::PhantomData;\n use crate::mem::{size_of, zeroed};\n use crate::os::unix::io::RawFd;\n use crate::path::Path;\n-#[cfg(target_os = \"android\")]\n-use crate::ptr::eq;\n-use crate::ptr::read_unaligned;\n+use crate::ptr::{eq, read_unaligned};\n use crate::slice::from_raw_parts;\n use crate::sys::net::Socket;\n \n@@ -30,12 +28,10 @@ pub(super) fn recv_vectored_with_ancillary_from(\n ) -> io::Result<(usize, bool, io::Result<SocketAddr>)> {\n     unsafe {\n         let mut msg_name: libc::sockaddr_un = zeroed();\n-\n         let mut msg: libc::msghdr = zeroed();\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = size_of::<libc::sockaddr_un>() as libc::socklen_t;\n         msg.msg_iov = bufs.as_mut_ptr().cast();\n-        msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n                 msg.msg_iovlen = bufs.len() as libc::size_t;\n@@ -45,13 +41,18 @@ pub(super) fn recv_vectored_with_ancillary_from(\n                           target_os = \"emscripten\",\n                           target_os = \"freebsd\",\n                           all(target_os = \"linux\", target_env = \"musl\",),\n+                          target_os = \"macos\",\n                           target_os = \"netbsd\",\n                           target_os = \"openbsd\",\n                       ))] {\n                 msg.msg_iovlen = bufs.len() as libc::c_int;\n                 msg.msg_controllen = ancillary.buffer.len() as libc::socklen_t;\n             }\n         }\n+        // macos requires that the control pointer is NULL when the len is 0.\n+        if msg.msg_controllen > 0 {\n+            msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n+        }\n \n         let count = socket.recv_msg(&mut msg)?;\n \n@@ -79,7 +80,6 @@ pub(super) fn send_vectored_with_ancillary_to(\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = msg_namelen;\n         msg.msg_iov = bufs.as_ptr() as *mut _;\n-        msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n                 msg.msg_iovlen = bufs.len() as libc::size_t;\n@@ -89,13 +89,18 @@ pub(super) fn send_vectored_with_ancillary_to(\n                           target_os = \"emscripten\",\n                           target_os = \"freebsd\",\n                           all(target_os = \"linux\", target_env = \"musl\",),\n+                          target_os = \"macos\",\n                           target_os = \"netbsd\",\n                           target_os = \"openbsd\",\n                       ))] {\n                 msg.msg_iovlen = bufs.len() as libc::c_int;\n                 msg.msg_controllen = ancillary.length as libc::socklen_t;\n             }\n         }\n+        // macos requires that the control pointer is NULL when the len is 0.\n+        if msg.msg_controllen > 0 {\n+            msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n+        }\n \n         ancillary.truncated = false;\n \n@@ -147,6 +152,7 @@ fn add_to_ancillary_data<T>(\n                           target_os = \"emscripten\",\n                           target_os = \"freebsd\",\n                           all(target_os = \"linux\", target_env = \"musl\",),\n+                          target_os = \"macos\",\n                           target_os = \"netbsd\",\n                           target_os = \"openbsd\",\n                       ))] {\n@@ -159,14 +165,12 @@ fn add_to_ancillary_data<T>(\n         while !cmsg.is_null() {\n             previous_cmsg = cmsg;\n             cmsg = libc::CMSG_NXTHDR(&msg, cmsg);\n-            cfg_if::cfg_if! {\n-                // Android return the same pointer if it is the last cmsg.\n-                // Therefore, check it if the previous pointer is the same as the current one.\n-                if #[cfg(target_os = \"android\")] {\n-                    if cmsg == previous_cmsg {\n-                        break;\n-                    }\n-                }\n+\n+            // Most operating systems, but not Linux or emscripten, return the previous pointer\n+            // when its length is zero. Therefore, check if the previous pointer is the same as\n+            // the current one.\n+            if eq(cmsg, previous_cmsg) {\n+                break;\n             }\n         }\n \n@@ -184,6 +188,7 @@ fn add_to_ancillary_data<T>(\n                           target_os = \"emscripten\",\n                           target_os = \"freebsd\",\n                           all(target_os = \"linux\", target_env = \"musl\",),\n+                          target_os = \"macos\",\n                           target_os = \"netbsd\",\n                           target_os = \"openbsd\",\n                       ))] {\n@@ -371,6 +376,7 @@ impl<'a> AncillaryData<'a> {\n                               target_os = \"emscripten\",\n                               target_os = \"freebsd\",\n                               all(target_os = \"linux\", target_env = \"musl\",),\n+                              target_os = \"macos\",\n                               target_os = \"netbsd\",\n                               target_os = \"openbsd\",\n                           ))] {\n@@ -421,6 +427,7 @@ impl<'a> Iterator for Messages<'a> {\n                               target_os = \"emscripten\",\n                               target_os = \"freebsd\",\n                               all(target_os = \"linux\", target_env = \"musl\",),\n+                              target_os = \"macos\",\n                               target_os = \"netbsd\",\n                               target_os = \"openbsd\",\n                           ))] {\n@@ -435,15 +442,13 @@ impl<'a> Iterator for Messages<'a> {\n             };\n \n             let cmsg = cmsg.as_ref()?;\n-            cfg_if::cfg_if! {\n-                // Android return the same pointer if it is the last cmsg.\n-                // Therefore, check it if the previous pointer is the same as the current one.\n-                if #[cfg(target_os = \"android\")] {\n-                    if let Some(current) = self.current {\n-                        if eq(current, cmsg) {\n-                            return None;\n-                        }\n-                    }\n+\n+            // Most operating systems, but not Linux or emscripten, return the previous pointer\n+            // when its length is zero. Therefore, check if the previous pointer is the same as\n+            // the current one.\n+            if let Some(current) = self.current {\n+                if eq(current, cmsg) {\n+                    return None;\n                 }\n             }\n \n@@ -514,6 +519,12 @@ impl<'a> SocketAncillary<'a> {\n         self.buffer.len()\n     }\n \n+    /// Returns `true` if the ancillary data is empty.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn is_empty(&self) -> bool {\n+        self.length == 0\n+    }\n+\n     /// Returns the number of used bytes.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn len(&self) -> usize {"}, {"sha": "c44514ed3cb83bc2dd4f37215bec1d2b9d721bc7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -1162,6 +1162,7 @@ crate fn plain_text_summary(md: &str) -> String {\n     s\n }\n \n+#[derive(Debug)]\n crate struct MarkdownLink {\n     pub kind: LinkType,\n     pub link: String,"}, {"sha": "55978ca551b05bb2de8984c2e75b43ecdb93090f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 64, "deletions": 26, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -950,6 +950,7 @@ impl LinkCollector<'_, '_> {\n         }\n \n         let link = ori_link.link.replace(\"`\", \"\");\n+        let no_backticks_range = range_between_backticks(&ori_link);\n         let parts = link.split('#').collect::<Vec<_>>();\n         let (link, extra_fragment) = if parts.len() > 2 {\n             // A valid link can't have multiple #'s\n@@ -973,10 +974,15 @@ impl LinkCollector<'_, '_> {\n         };\n \n         // Parse and strip the disambiguator from the link, if present.\n-        let (mut path_str, disambiguator) = if let Ok((d, path)) = Disambiguator::from_str(&link) {\n-            (path.trim(), Some(d))\n-        } else {\n-            (link.trim(), None)\n+        let (mut path_str, disambiguator) = match Disambiguator::from_str(&link) {\n+            Ok(Some((d, path))) => (path.trim(), Some(d)),\n+            Ok(None) => (link.trim(), None),\n+            Err((err_msg, relative_range)) => {\n+                let disambiguator_range = (no_backticks_range.start + relative_range.start)\n+                    ..(no_backticks_range.start + relative_range.end);\n+                disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                return None;\n+            }\n         };\n \n         if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch))) {\n@@ -1488,6 +1494,27 @@ impl LinkCollector<'_, '_> {\n     }\n }\n \n+/// Get the section of a link between the backticks,\n+/// or the whole link if there aren't any backticks.\n+///\n+/// For example:\n+///\n+/// ```text\n+/// [`Foo`]\n+///   ^^^\n+/// ```\n+fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n+    let after_first_backtick_group = ori_link.link.bytes().position(|b| b != b'`').unwrap_or(0);\n+    let before_second_backtick_group = ori_link\n+        .link\n+        .bytes()\n+        .skip(after_first_backtick_group)\n+        .position(|b| b == b'`')\n+        .unwrap_or(ori_link.link.len());\n+    (ori_link.range.start + after_first_backtick_group)\n+        ..(ori_link.range.start + before_second_backtick_group)\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n enum Disambiguator {\n@@ -1514,27 +1541,14 @@ impl Disambiguator {\n         }\n     }\n \n-    /// Given a link, parse and return `(disambiguator, path_str)`\n-    fn from_str(link: &str) -> Result<(Self, &str), ()> {\n+    /// Given a link, parse and return `(disambiguator, path_str)`.\n+    ///\n+    /// This returns `Ok(Some(...))` if a disambiguator was found,\n+    /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n+    /// if there was a problem with the disambiguator.\n+    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n-        let find_suffix = || {\n-            let suffixes = [\n-                (\"!()\", DefKind::Macro(MacroKind::Bang)),\n-                (\"()\", DefKind::Fn),\n-                (\"!\", DefKind::Macro(MacroKind::Bang)),\n-            ];\n-            for &(suffix, kind) in &suffixes {\n-                if let Some(link) = link.strip_suffix(suffix) {\n-                    // Avoid turning `!` or `()` into an empty string\n-                    if !link.is_empty() {\n-                        return Ok((Kind(kind), link));\n-                    }\n-                }\n-            }\n-            Err(())\n-        };\n-\n         if let Some(idx) = link.find('@') {\n             let (prefix, rest) = link.split_at(idx);\n             let d = match prefix {\n@@ -1551,11 +1565,24 @@ impl Disambiguator {\n                 \"value\" => NS(Namespace::ValueNS),\n                 \"macro\" => NS(Namespace::MacroNS),\n                 \"prim\" | \"primitive\" => Primitive,\n-                _ => return find_suffix(),\n+                _ => return Err((format!(\"unknown disambiguator `{}`\", prefix), 0..idx)),\n             };\n-            Ok((d, &rest[1..]))\n+            Ok(Some((d, &rest[1..])))\n         } else {\n-            find_suffix()\n+            let suffixes = [\n+                (\"!()\", DefKind::Macro(MacroKind::Bang)),\n+                (\"()\", DefKind::Fn),\n+                (\"!\", DefKind::Macro(MacroKind::Bang)),\n+            ];\n+            for &(suffix, kind) in &suffixes {\n+                if let Some(link) = link.strip_suffix(suffix) {\n+                    // Avoid turning `!` or `()` into an empty string\n+                    if !link.is_empty() {\n+                        return Ok(Some((Kind(kind), link)));\n+                    }\n+                }\n+            }\n+            Ok(None)\n         }\n     }\n \n@@ -1979,6 +2006,17 @@ fn anchor_failure(\n     });\n }\n \n+/// Report an error in the link disambiguator.\n+fn disambiguator_error(\n+    cx: &DocContext<'_>,\n+    item: &Item,\n+    dox: &str,\n+    link_range: Range<usize>,\n+    msg: &str,\n+) {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &link_range, |_diag, _sp| {});\n+}\n+\n /// Report an ambiguity error, where there were multiple possible resolutions.\n fn ambiguity_error(\n     cx: &DocContext<'_>,"}, {"sha": "925fc515a3e657f31df6f1b662c32dc2dfc57a4d", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -0,0 +1,13 @@\n+#![deny(warnings)]\n+\n+//! Linking to [foo@banana] and [`bar@banana!()`].\n+//~^ ERROR unknown disambiguator `foo`\n+//~| ERROR unknown disambiguator `bar`\n+//! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+//~^ ERROR unknown disambiguator ``\n+//~| ERROR unknown disambiguator ``\n+//! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+//~^ ERROR unknown disambiguator `foo`\n+//~| ERROR unknown disambiguator `foo`\n+\n+fn main() {}"}, {"sha": "195aaca32a27d860b1a4ac9eecddaeec966e73f7", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -0,0 +1,45 @@\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:3:17\n+   |\n+LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n+   |                 ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unknown-disambiguator.rs:1:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+\n+error: unknown disambiguator `bar`\n+  --> $DIR/unknown-disambiguator.rs:3:35\n+   |\n+LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n+   |                                   ^^^\n+\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:9:34\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                  ^^^\n+\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:9:48\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                                ^^^\n+\n+error: unknown disambiguator ``\n+  --> $DIR/unknown-disambiguator.rs:6:31\n+   |\n+LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+   |                               ^\n+\n+error: unknown disambiguator ``\n+  --> $DIR/unknown-disambiguator.rs:6:57\n+   |\n+LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+   |                                                         ^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "d24e403e017ef83222d56f27b3ef4c24a23bdc5e", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -6,16 +6,16 @@\n #![allow(dead_code)]\n \n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n-  //[min]~^ ERROR type parameters must be declared prior to const parameters\n-  args: &'a [&'a [T; M]; N],\n-  specifier: A,\n+    //[min]~^ ERROR type parameters must be declared prior to const parameters\n+    args: &'a [&'a [T; M]; N],\n+    specifier: A,\n }\n \n fn main() {\n-  let array = [1, 2, 3];\n-  let nest = [&array];\n-  let _ = NestedArrays {\n-    args: &nest,\n-    specifier: true,\n-  };\n+    let array = [1, 2, 3];\n+    let nest = [&array];\n+    let _ = NestedArrays {\n+        args: &nest,\n+        specifier: true,\n+    };\n }"}, {"sha": "3febb7cffbf157bb77bc067427ed3744dab8edd2", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -13,8 +13,8 @@ pub struct ConstDefaultUnstable<const N: usize = 3>;\n \n #[stable(feature = \"const_default_unstable\", since=\"none\")]\n pub struct ConstDefaultStable<const N: usize = {\n-  #[stable(feature = \"const_default_unstable_val\", since=\"none\")]\n-  3\n+    #[stable(feature = \"const_default_unstable_val\", since=\"none\")]\n+    3\n }>;\n \n fn main() {}"}, {"sha": "d85b756f538dcaca7d7632abb4c6e24bb0b2fb2b", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -8,16 +8,16 @@ pub struct Example3<const N: usize=13, T=u32>(T);\n pub struct Example4<const N: usize=13, const M: usize=4>;\n \n fn main() {\n-  let e: Example::<13> = ();\n-  //~^ Error: mismatched types\n-  let e: Example2::<u32, 13> = ();\n-  //~^ Error: mismatched types\n-  let e: Example3::<13, u32> = ();\n-  //~^ Error: mismatched types\n-  let e: Example3::<7> = ();\n-  //~^ Error: mismatched types\n-  // FIXME(const_generics_defaults): There should be a note for the error below, but it is\n-  // missing.\n-  let e: Example4::<7> = ();\n-  //~^ Error: mismatched types\n+    let e: Example::<13> = ();\n+    //~^ Error: mismatched types\n+    let e: Example2::<u32, 13> = ();\n+    //~^ Error: mismatched types\n+    let e: Example3::<13, u32> = ();\n+    //~^ Error: mismatched types\n+    let e: Example3::<7> = ();\n+    //~^ Error: mismatched types\n+    // FIXME(const_generics_defaults): There should be a note for the error below, but it is\n+    // missing.\n+    let e: Example4::<7> = ();\n+    //~^ Error: mismatched types\n }"}, {"sha": "ff72c71c40f0f78475f159d768cdd7e4a8aaceda", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -1,51 +1,51 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:11:26\n+  --> $DIR/mismatch.rs:11:28\n    |\n-LL |   let e: Example::<13> = ();\n-   |          -------------   ^^ expected struct `Example`, found `()`\n-   |          |\n-   |          expected due to this\n+LL |     let e: Example::<13> = ();\n+   |            -------------   ^^ expected struct `Example`, found `()`\n+   |            |\n+   |            expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:13:32\n+  --> $DIR/mismatch.rs:13:34\n    |\n-LL |   let e: Example2::<u32, 13> = ();\n-   |          -------------------   ^^ expected struct `Example2`, found `()`\n-   |          |\n-   |          expected due to this\n+LL |     let e: Example2::<u32, 13> = ();\n+   |            -------------------   ^^ expected struct `Example2`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Example2`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:32\n+  --> $DIR/mismatch.rs:15:34\n    |\n-LL |   let e: Example3::<13, u32> = ();\n-   |          -------------------   ^^ expected struct `Example3`, found `()`\n-   |          |\n-   |          expected due to this\n+LL |     let e: Example3::<13, u32> = ();\n+   |            -------------------   ^^ expected struct `Example3`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Example3`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:17:26\n+  --> $DIR/mismatch.rs:17:28\n    |\n-LL |   let e: Example3::<7> = ();\n-   |          -------------   ^^ expected struct `Example3`, found `()`\n-   |          |\n-   |          expected due to this\n+LL |     let e: Example3::<7> = ();\n+   |            -------------   ^^ expected struct `Example3`, found `()`\n+   |            |\n+   |            expected due to this\n    |\n    = note: expected struct `Example3<7_usize>`\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:26\n+  --> $DIR/mismatch.rs:21:28\n    |\n-LL |   let e: Example4::<7> = ();\n-   |          -------------   ^^ expected struct `Example4`, found `()`\n-   |          |\n-   |          expected due to this\n+LL |     let e: Example4::<7> = ();\n+   |            -------------   ^^ expected struct `Example4`, found `()`\n+   |            |\n+   |            expected due to this\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b58dee0712a767826502e5e7e6a5ca8feea7e094", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -10,5 +10,5 @@ struct A<const N: usize, T=u32>(T);\n //[min]~^ ERROR type parameters must be declared prior\n \n fn main() {\n-  let _: A<3> = A(0);\n+    let _: A<3> = A(0);\n }"}, {"sha": "18ecf46729977916659df74d89668a2298d2bad9", "filename": "src/test/ui/const-generics/defaults/repr-c-issue-82792.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #82792.\n+\n+// run-pass\n+\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+#[repr(C)]\n+pub struct Loaf<T: Sized, const N: usize = 1usize> {\n+    head: [T; N],\n+    slice: [T],\n+}\n+\n+fn main() {}"}, {"sha": "cb66c7769bb23b263444407daa9cbcd405bb60de", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902ca44c1953ad8f640e86d154c86cc1f5a3bde1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -6,12 +6,12 @@\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {\n-  //[min]~^ ERROR type parameters must be declared prior to const parameters\n-  out: &'a [T; N],\n+    //[min]~^ ERROR type parameters must be declared prior to const parameters\n+    out: &'a [T; N],\n }\n \n trait FixedOutputter {\n-  fn out(&self) -> FixedOutput<'_, 10>;\n+    fn out(&self) -> FixedOutput<'_, 10>;\n }\n \n fn main() {}"}, {"sha": "bb1d925dab36372c6bd1fb5671bb68ce938ff009", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=902ca44c1953ad8f640e86d154c86cc1f5a3bde1", "patch": "@@ -1 +1 @@\n-Subproject commit 858ad554374a8b1ad67692558a0878391abfdd86\n+Subproject commit bb1d925dab36372c6bd1fb5671bb68ce938ff009"}]}