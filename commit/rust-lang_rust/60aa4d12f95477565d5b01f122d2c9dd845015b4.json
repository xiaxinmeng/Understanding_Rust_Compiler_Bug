{"sha": "60aa4d12f95477565d5b01f122d2c9dd845015b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWE0ZDEyZjk1NDc3NTY1ZDViMDFmMTIyZDJjOWRkODQ1MDE1YjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-22T21:42:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T21:42:54Z"}, "message": "Merge #2648\n\n2648: Rudimentary name resolution for local items r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "86f6d29653ba7e548f2a321b2ecdb20e7dc366f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f6d29653ba7e548f2a321b2ecdb20e7dc366f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60aa4d12f95477565d5b01f122d2c9dd845015b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/+NeCRBK7hj4Ov3rIwAAdHIIADKgVsP+uUzXGRCui86LmbHp\nbMS/eNcvrORN+m3FJgfK3vO0ht85YeTIPpvI14SewjNe/lYIaG7In6Rvb5v0Tj2w\n1fREOrn3Jjr0jvCGqWmqjJYp0yfOOS+dqsI8FkvVf1hZ8gTisXzruuU0i27NvEbm\nC3ktmLZLUKfSNKgkopq1K0q0HipfenLxVwMOSLFRTaKQY39pY3AQ2r5xG/NqnaLl\nAzuepBfpk+WAIEnQJjILsqUE6S0Mm8se2FUfeJrk7qfppG0o9zs+3mbWhtPbwWgV\nEpZU2pCV41xPvrtTpNAeZb7vntcIFtvWRGtzNP4/B2H/gy2u0eW3b9PbYs/h12w=\n=doS4\n-----END PGP SIGNATURE-----\n", "payload": "tree 86f6d29653ba7e548f2a321b2ecdb20e7dc366f4\nparent 78f7683b9a1c6192b4828ceedb14ed498b241263\nparent e424545c0f5cbaf135c52764169ea20df7d07d35\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577050974 +0000\ncommitter GitHub <noreply@github.com> 1577050974 +0000\n\nMerge #2648\n\n2648: Rudimentary name resolution for local items r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60aa4d12f95477565d5b01f122d2c9dd845015b4", "html_url": "https://github.com/rust-lang/rust/commit/60aa4d12f95477565d5b01f122d2c9dd845015b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60aa4d12f95477565d5b01f122d2c9dd845015b4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f7683b9a1c6192b4828ceedb14ed498b241263", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f7683b9a1c6192b4828ceedb14ed498b241263", "html_url": "https://github.com/rust-lang/rust/commit/78f7683b9a1c6192b4828ceedb14ed498b241263"}, {"sha": "e424545c0f5cbaf135c52764169ea20df7d07d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e424545c0f5cbaf135c52764169ea20df7d07d35", "html_url": "https://github.com/rust-lang/rust/commit/e424545c0f5cbaf135c52764169ea20df7d07d35"}], "stats": {"total": 228, "additions": 163, "deletions": 65}, "files": [{"sha": "5323af097236c71c9319fc98dbf702517d340871", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -494,45 +494,57 @@ where\n     fn collect_block_items(&mut self, block: &ast::Block) {\n         let container = ContainerId::DefWithBodyId(self.def);\n         for item in block.items() {\n-            let def: ModuleDefId = match item {\n+            let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n                 ast::ModuleItem::FnDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    FunctionLoc { container: container.into(), ast_id }.intern(self.db).into()\n+                    (\n+                        FunctionLoc { container: container.into(), ast_id }.intern(self.db).into(),\n+                        def.name(),\n+                    )\n                 }\n                 ast::ModuleItem::TypeAliasDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    TypeAliasLoc { container: container.into(), ast_id }.intern(self.db).into()\n+                    (\n+                        TypeAliasLoc { container: container.into(), ast_id }.intern(self.db).into(),\n+                        def.name(),\n+                    )\n                 }\n                 ast::ModuleItem::ConstDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    ConstLoc { container: container.into(), ast_id }.intern(self.db).into()\n+                    (\n+                        ConstLoc { container: container.into(), ast_id }.intern(self.db).into(),\n+                        def.name(),\n+                    )\n                 }\n                 ast::ModuleItem::StaticDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    StaticLoc { container, ast_id }.intern(self.db).into()\n+                    (StaticLoc { container, ast_id }.intern(self.db).into(), def.name())\n                 }\n                 ast::ModuleItem::StructDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    StructLoc { container, ast_id }.intern(self.db).into()\n+                    (StructLoc { container, ast_id }.intern(self.db).into(), def.name())\n                 }\n                 ast::ModuleItem::EnumDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    EnumLoc { container, ast_id }.intern(self.db).into()\n+                    (EnumLoc { container, ast_id }.intern(self.db).into(), def.name())\n                 }\n                 ast::ModuleItem::UnionDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    UnionLoc { container, ast_id }.intern(self.db).into()\n+                    (UnionLoc { container, ast_id }.intern(self.db).into(), def.name())\n                 }\n                 ast::ModuleItem::TraitDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    TraitLoc { container, ast_id }.intern(self.db).into()\n+                    (TraitLoc { container, ast_id }.intern(self.db).into(), def.name())\n                 }\n                 ast::ModuleItem::ImplBlock(_)\n                 | ast::ModuleItem::UseItem(_)\n                 | ast::ModuleItem::ExternCrateItem(_)\n                 | ast::ModuleItem::Module(_) => continue,\n             };\n-            self.body.item_scope.define_def(def)\n+            self.body.item_scope.define_def(def);\n+            if let Some(name) = name {\n+                self.body.item_scope.push_res(name.as_name(), def.into());\n+            }\n         }\n     }\n "}, {"sha": "b0288ee8dbec834beafc46d6742f60c95d42842a", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -51,6 +51,12 @@ impl ItemScope {\n         self.visible.iter().chain(BUILTIN_SCOPE.iter()).map(|(n, def)| (n, *def))\n     }\n \n+    pub fn entries_without_primitives<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = (&'a Name, PerNs)> + 'a {\n+        self.visible.iter().map(|(n, def)| (n, *def))\n+    }\n+\n     pub fn declarations(&self) -> impl Iterator<Item = ModuleDefId> + '_ {\n         self.defs.iter().copied()\n     }\n@@ -70,18 +76,27 @@ impl ItemScope {\n     }\n \n     /// Get a name from current module scope, legacy macros are not included\n-    pub(crate) fn get(&self, name: &Name, shadow: BuiltinShadowMode) -> Option<&PerNs> {\n+    pub(crate) fn get(&self, name: &Name, shadow: BuiltinShadowMode) -> PerNs {\n         match shadow {\n-            BuiltinShadowMode::Module => self.visible.get(name).or_else(|| BUILTIN_SCOPE.get(name)),\n+            BuiltinShadowMode::Module => self\n+                .visible\n+                .get(name)\n+                .or_else(|| BUILTIN_SCOPE.get(name))\n+                .copied()\n+                .unwrap_or_else(PerNs::none),\n             BuiltinShadowMode::Other => {\n-                let item = self.visible.get(name);\n+                let item = self.visible.get(name).copied();\n                 if let Some(def) = item {\n                     if let Some(ModuleDefId::ModuleId(_)) = def.take_types() {\n-                        return BUILTIN_SCOPE.get(name).or(item);\n+                        return BUILTIN_SCOPE\n+                            .get(name)\n+                            .copied()\n+                            .or(item)\n+                            .unwrap_or_else(PerNs::none);\n                     }\n                 }\n \n-                item.or_else(|| BUILTIN_SCOPE.get(name))\n+                item.or_else(|| BUILTIN_SCOPE.get(name).copied()).unwrap_or_else(PerNs::none)\n             }\n         }\n     }\n@@ -109,7 +124,7 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n-    pub(crate) fn push_res(&mut self, name: Name, def: &PerNs) -> bool {\n+    pub(crate) fn push_res(&mut self, name: Name, def: PerNs) -> bool {\n         let mut changed = false;\n         let existing = self.visible.entry(name.clone()).or_default();\n "}, {"sha": "b9f40d3dd996a6f5a8771715bb1e4aa258ec6c26", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -446,7 +446,7 @@ where\n         let scope = &mut self.def_map.modules[module_id].scope;\n         let mut changed = false;\n         for (name, res) in resolutions {\n-            changed |= scope.push_res(name.clone(), res);\n+            changed |= scope.push_res(name.clone(), *res);\n         }\n \n         if !changed {"}, {"sha": "695014c7bb95dcea74065020110cce2d6e77e77e", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -180,13 +180,7 @@ impl CrateDefMap {\n                     }\n \n                     // Since it is a qualified path here, it should not contains legacy macros\n-                    match self[module.local_id].scope.get(&segment, prefer_module(i)) {\n-                        Some(def) => *def,\n-                        _ => {\n-                            log::debug!(\"path segment {:?} not found\", segment);\n-                            return ResolvePathResult::empty(ReachedFixedPoint::No);\n-                        }\n-                    }\n+                    self[module.local_id].scope.get(&segment, prefer_module(i))\n                 }\n                 ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n                     // enum variant\n@@ -243,7 +237,7 @@ impl CrateDefMap {\n         //  - std prelude\n         let from_legacy_macro =\n             self[module].scope.get_legacy_macro(name).map_or_else(PerNs::none, PerNs::macros);\n-        let from_scope = self[module].scope.get(name, shadow).copied().unwrap_or_else(PerNs::none);\n+        let from_scope = self[module].scope.get(name, shadow);\n         let from_extern_prelude =\n             self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n         let from_prelude = self.resolve_in_prelude(db, name, shadow);\n@@ -256,8 +250,7 @@ impl CrateDefMap {\n         name: &Name,\n         shadow: BuiltinShadowMode,\n     ) -> PerNs {\n-        let from_crate_root =\n-            self[self.root].scope.get(name, shadow).copied().unwrap_or_else(PerNs::none);\n+        let from_crate_root = self[self.root].scope.get(name, shadow);\n         let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n \n         from_crate_root.or(from_extern_prelude)\n@@ -278,7 +271,7 @@ impl CrateDefMap {\n                 keep = db.crate_def_map(prelude.krate);\n                 &keep\n             };\n-            def_map[prelude.local_id].scope.get(name, shadow).copied().unwrap_or_else(PerNs::none)\n+            def_map[prelude.local_id].scope.get(name, shadow)\n         } else {\n             PerNs::none()\n         }"}, {"sha": "cf3c33d7888ecc3811ee5adec06749c4fd750884", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 72, "deletions": 31, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -10,6 +10,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     body::scope::{ExprScopes, ScopeId},\n+    body::Body,\n     builtin_type::BuiltinType,\n     db::DefDatabase,\n     expr::{ExprId, PatId},\n@@ -55,6 +56,8 @@ enum Scope {\n     AdtScope(AdtId),\n     /// Local bindings\n     ExprScope(ExprScope),\n+    /// Temporary hack to support local items.\n+    LocalItemsScope(Arc<Body>),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -149,7 +152,13 @@ impl Resolver {\n         for scope in self.scopes.iter().rev() {\n             match scope {\n                 Scope::ExprScope(_) => continue,\n-                Scope::GenericParams { .. } | Scope::ImplBlockScope(_) if skip_to_mod => continue,\n+                Scope::GenericParams { .. }\n+                | Scope::ImplBlockScope(_)\n+                | Scope::LocalItemsScope(_)\n+                    if skip_to_mod =>\n+                {\n+                    continue\n+                }\n \n                 Scope::GenericParams { params, def } => {\n                     if let Some(local_id) = params.find_by_name(first_name) {\n@@ -179,25 +188,35 @@ impl Resolver {\n                         &path,\n                         BuiltinShadowMode::Other,\n                     );\n-                    let res = match module_def.take_types()? {\n-                        ModuleDefId::AdtId(it) => TypeNs::AdtId(it),\n-                        ModuleDefId::EnumVariantId(it) => TypeNs::EnumVariantId(it),\n-\n-                        ModuleDefId::TypeAliasId(it) => TypeNs::TypeAliasId(it),\n-                        ModuleDefId::BuiltinType(it) => TypeNs::BuiltinType(it),\n-\n-                        ModuleDefId::TraitId(it) => TypeNs::TraitId(it),\n-\n-                        ModuleDefId::FunctionId(_)\n-                        | ModuleDefId::ConstId(_)\n-                        | ModuleDefId::StaticId(_)\n-                        | ModuleDefId::ModuleId(_) => return None,\n-                    };\n+                    let res = to_type_ns(module_def)?;\n                     return Some((res, idx));\n                 }\n+                Scope::LocalItemsScope(body) => {\n+                    let def = body.item_scope.get(first_name, BuiltinShadowMode::Other);\n+                    if let Some(res) = to_type_ns(def) {\n+                        return Some((res, None));\n+                    }\n+                }\n             }\n         }\n-        None\n+        return None;\n+        fn to_type_ns(per_ns: PerNs) -> Option<TypeNs> {\n+            let res = match per_ns.take_types()? {\n+                ModuleDefId::AdtId(it) => TypeNs::AdtId(it),\n+                ModuleDefId::EnumVariantId(it) => TypeNs::EnumVariantId(it),\n+\n+                ModuleDefId::TypeAliasId(it) => TypeNs::TypeAliasId(it),\n+                ModuleDefId::BuiltinType(it) => TypeNs::BuiltinType(it),\n+\n+                ModuleDefId::TraitId(it) => TypeNs::TraitId(it),\n+\n+                ModuleDefId::FunctionId(_)\n+                | ModuleDefId::ConstId(_)\n+                | ModuleDefId::StaticId(_)\n+                | ModuleDefId::ModuleId(_) => return None,\n+            };\n+            Some(res)\n+        }\n     }\n \n     pub fn resolve_path_in_type_ns_fully(\n@@ -227,6 +246,7 @@ impl Resolver {\n                 | Scope::ExprScope(_)\n                 | Scope::GenericParams { .. }\n                 | Scope::ImplBlockScope(_)\n+                | Scope::LocalItemsScope(_)\n                     if skip_to_mod =>\n                 {\n                     continue\n@@ -276,20 +296,7 @@ impl Resolver {\n                     );\n                     return match idx {\n                         None => {\n-                            let value = match module_def.take_values()? {\n-                                ModuleDefId::FunctionId(it) => ValueNs::FunctionId(it),\n-                                ModuleDefId::AdtId(AdtId::StructId(it)) => ValueNs::StructId(it),\n-                                ModuleDefId::EnumVariantId(it) => ValueNs::EnumVariantId(it),\n-                                ModuleDefId::ConstId(it) => ValueNs::ConstId(it),\n-                                ModuleDefId::StaticId(it) => ValueNs::StaticId(it),\n-\n-                                ModuleDefId::AdtId(AdtId::EnumId(_))\n-                                | ModuleDefId::AdtId(AdtId::UnionId(_))\n-                                | ModuleDefId::TraitId(_)\n-                                | ModuleDefId::TypeAliasId(_)\n-                                | ModuleDefId::BuiltinType(_)\n-                                | ModuleDefId::ModuleId(_) => return None,\n-                            };\n+                            let value = to_value_ns(module_def)?;\n                             Some(ResolveValueResult::ValueNs(value))\n                         }\n                         Some(idx) => {\n@@ -309,9 +316,33 @@ impl Resolver {\n                         }\n                     };\n                 }\n+                Scope::LocalItemsScope(body) => {\n+                    let def = body.item_scope.get(first_name, BuiltinShadowMode::Other);\n+                    if let Some(res) = to_value_ns(def) {\n+                        return Some(ResolveValueResult::ValueNs(res));\n+                    }\n+                }\n             }\n         }\n-        None\n+        return None;\n+\n+        fn to_value_ns(per_ns: PerNs) -> Option<ValueNs> {\n+            let res = match per_ns.take_values()? {\n+                ModuleDefId::FunctionId(it) => ValueNs::FunctionId(it),\n+                ModuleDefId::AdtId(AdtId::StructId(it)) => ValueNs::StructId(it),\n+                ModuleDefId::EnumVariantId(it) => ValueNs::EnumVariantId(it),\n+                ModuleDefId::ConstId(it) => ValueNs::ConstId(it),\n+                ModuleDefId::StaticId(it) => ValueNs::StaticId(it),\n+\n+                ModuleDefId::AdtId(AdtId::EnumId(_))\n+                | ModuleDefId::AdtId(AdtId::UnionId(_))\n+                | ModuleDefId::TraitId(_)\n+                | ModuleDefId::TypeAliasId(_)\n+                | ModuleDefId::BuiltinType(_)\n+                | ModuleDefId::ModuleId(_) => return None,\n+            };\n+            Some(res)\n+        }\n     }\n \n     pub fn resolve_path_in_value_ns_fully(\n@@ -429,6 +460,11 @@ impl Scope {\n                     });\n                 }\n             }\n+            Scope::LocalItemsScope(body) => {\n+                body.item_scope.entries_without_primitives().for_each(|(name, def)| {\n+                    f(name.clone(), ScopeDef::PerNs(def));\n+                })\n+            }\n             Scope::GenericParams { params, def } => {\n                 for (local_id, param) in params.types.iter() {\n                     f(\n@@ -464,6 +500,7 @@ pub fn resolver_for_scope(\n     scope_id: Option<ScopeId>,\n ) -> Resolver {\n     let mut r = owner.resolver(db);\n+    r = r.push_local_items_scope(db.body(owner));\n     let scopes = db.expr_scopes(owner);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n@@ -499,6 +536,10 @@ impl Resolver {\n         self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n     }\n \n+    fn push_local_items_scope(self, body: Arc<Body>) -> Resolver {\n+        self.push_scope(Scope::LocalItemsScope(body))\n+    }\n+\n     fn push_expr_scope(\n         self,\n         owner: DefWithBodyId,"}, {"sha": "3e5e163e3486c55c8896cf5ae0035b4691dd0952", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -1512,8 +1512,8 @@ fn test() {\n     [49; 50) '0': u32\n     [80; 83) '101': u32\n     [95; 213) '{     ...NST; }': ()\n-    [138; 139) 'x': {unknown}\n-    [142; 153) 'LOCAL_CONST': {unknown}\n+    [138; 139) 'x': u32\n+    [142; 153) 'LOCAL_CONST': u32\n     [163; 164) 'z': u32\n     [167; 179) 'GLOBAL_CONST': u32\n     [189; 191) 'id': u32\n@@ -1541,10 +1541,10 @@ fn test() {\n     [29; 32) '101': u32\n     [70; 73) '101': u32\n     [85; 280) '{     ...MUT; }': ()\n-    [173; 174) 'x': {unknown}\n-    [177; 189) 'LOCAL_STATIC': {unknown}\n-    [199; 200) 'y': {unknown}\n-    [203; 219) 'LOCAL_...IC_MUT': {unknown}\n+    [173; 174) 'x': u32\n+    [177; 189) 'LOCAL_STATIC': u32\n+    [199; 200) 'y': u32\n+    [203; 219) 'LOCAL_...IC_MUT': u32\n     [229; 230) 'z': u32\n     [233; 246) 'GLOBAL_STATIC': u32\n     [256; 257) 'w': u32"}, {"sha": "458d7525ec9f6d93977da9dc1ef2927750a87bc3", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa4d12f95477565d5b01f122d2c9dd845015b4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=60aa4d12f95477565d5b01f122d2c9dd845015b4", "patch": "@@ -873,4 +873,41 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn completes_local_item() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                fn main() {\n+                    return f<|>;\n+                    fn frobnicate() {}\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"frobnicate()\",\n+                source_range: [23; 24),\n+                delete: [23; 24),\n+                insert: \"frobnicate()$0\",\n+                kind: Function,\n+                lookup: \"frobnicate\",\n+                detail: \"fn frobnicate()\",\n+            },\n+            CompletionItem {\n+                label: \"main()\",\n+                source_range: [23; 24),\n+                delete: [23; 24),\n+                insert: \"main()$0\",\n+                kind: Function,\n+                lookup: \"main\",\n+                detail: \"fn main()\",\n+            },\n+        ]\n+        \"###\n+        )\n+    }\n }"}]}