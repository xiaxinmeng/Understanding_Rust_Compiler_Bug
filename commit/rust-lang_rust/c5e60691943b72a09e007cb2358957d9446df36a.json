{"sha": "c5e60691943b72a09e007cb2358957d9446df36a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZTYwNjkxOTQzYjcyYTA5ZTAwN2NiMjM1ODk1N2Q5NDQ2ZGYzNmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-25T15:15:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-25T15:15:31Z"}, "message": "Rollup merge of #62055 - matthewjasper:fix-error-counting, r=pnkfelix\n\nFix error counting\n\nCount duplicate errors for `track_errors` and other error counting checks.\nAdd FIXMEs to make it clear that we should be moving away from this kind of logic.\n\nCloses #61663", "tree": {"sha": "b23b6fc90b52f4d0d788fd9ba6d0fce94a6efb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23b6fc90b52f4d0d788fd9ba6d0fce94a6efb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5e60691943b72a09e007cb2358957d9446df36a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdEjqTCRBK7hj4Ov3rIwAAdHIIADpvunTCukypVo8YBu0P2O/C\ni1GhxqOimQIVbSa+oC515Wa5c2XX5G2uLzQkugKsdCODgbo4Mk0FnInhobQKWPzG\nWLRNyGsEW33A8mlPjTaPOk5sDqLrO9v06l0InfkdnUL4Gp3zdR/ZYeSrty1YGTpP\nYobz9g7hLYU/aIUEuEW7Yl3qFMzzN0Lu5Lp5/ELGE9HZIP4xWvA5pnP9qkF2q5Qo\nFUmLJbUyp/6xU464bDPInSFN8HwxepRjeO3NGmILRQKCRoMELbLrhgdPwrSOB5XT\nk6Gxa47tI5cRYDo6dIEt6atr+3Bz6ota1zbnn0h0HE0tRVd4o5aAkwaeYUUnqiE=\n=ctq4\n-----END PGP SIGNATURE-----\n", "payload": "tree b23b6fc90b52f4d0d788fd9ba6d0fce94a6efb8a\nparent 81be122f949383cdd33da40cbcef5ab504c384fd\nparent 95a32157af8291b452570319c2d035a4307b52e6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561475731 +0200\ncommitter GitHub <noreply@github.com> 1561475731 +0200\n\nRollup merge of #62055 - matthewjasper:fix-error-counting, r=pnkfelix\n\nFix error counting\n\nCount duplicate errors for `track_errors` and other error counting checks.\nAdd FIXMEs to make it clear that we should be moving away from this kind of logic.\n\nCloses #61663\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e60691943b72a09e007cb2358957d9446df36a", "html_url": "https://github.com/rust-lang/rust/commit/c5e60691943b72a09e007cb2358957d9446df36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5e60691943b72a09e007cb2358957d9446df36a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81be122f949383cdd33da40cbcef5ab504c384fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/81be122f949383cdd33da40cbcef5ab504c384fd", "html_url": "https://github.com/rust-lang/rust/commit/81be122f949383cdd33da40cbcef5ab504c384fd"}, {"sha": "95a32157af8291b452570319c2d035a4307b52e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a32157af8291b452570319c2d035a4307b52e6", "html_url": "https://github.com/rust-lang/rust/commit/95a32157af8291b452570319c2d035a4307b52e6"}], "stats": {"total": 150, "additions": 96, "deletions": 54}, "files": [{"sha": "9a5c726901fe87ea235f70ba28edd9dac60c6b74", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -171,6 +171,7 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// Track how many errors were reported when this infcx is created.\n     /// If the number of errors increases, that's also a sign (line\n     /// `tained_by_errors`) to avoid reporting certain kinds of errors.\n+    // FIXME(matthewjasper) Merge into `tainted_by_errors_flag`\n     err_count_on_creation: usize,\n \n     /// This flag is true while there is an active snapshot."}, {"sha": "bb4ef2d7bd4268cf63b027f22559ea6190297970", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -320,8 +320,13 @@ impl Session {\n         self.diagnostic().abort_if_errors();\n     }\n     pub fn compile_status(&self) -> Result<(), ErrorReported> {\n-        compile_result_from_err_count(self.err_count())\n+        if self.has_errors() {\n+            Err(ErrorReported)\n+        } else {\n+            Ok(())\n+        }\n     }\n+    // FIXME(matthewjasper) Remove this method, it should never be needed.\n     pub fn track_errors<F, T>(&self, f: F) -> Result<T, ErrorReported>\n     where\n         F: FnOnce() -> T,\n@@ -1388,11 +1393,3 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n }\n \n pub type CompileResult = Result<(), ErrorReported>;\n-\n-pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n-    if err_count == 0 {\n-        Ok(())\n-    } else {\n-        Err(ErrorReported)\n-    }\n-}"}, {"sha": "70bd25a9d5772cfdb04714b0d50a93846c2af704", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -307,7 +307,12 @@ pub use diagnostic_builder::DiagnosticBuilder;\n pub struct Handler {\n     pub flags: HandlerFlags,\n \n+    /// The number of errors that have been emitted, including duplicates.\n+    ///\n+    /// This is not necessarily the count that's reported to the user once\n+    /// compilation ends.\n     err_count: AtomicUsize,\n+    deduplicated_err_count: AtomicUsize,\n     emitter: Lock<Box<dyn Emitter + sync::Send>>,\n     continue_after_error: AtomicBool,\n     delayed_span_bugs: Lock<Vec<Diagnostic>>,\n@@ -352,7 +357,7 @@ pub struct HandlerFlags {\n \n impl Drop for Handler {\n     fn drop(&mut self) {\n-        if self.err_count() == 0 {\n+        if !self.has_errors() {\n             let mut bugs = self.delayed_span_bugs.borrow_mut();\n             let has_bugs = !bugs.is_empty();\n             for bug in bugs.drain(..) {\n@@ -407,6 +412,7 @@ impl Handler {\n         Handler {\n             flags,\n             err_count: AtomicUsize::new(0),\n+            deduplicated_err_count: AtomicUsize::new(0),\n             emitter: Lock::new(e),\n             continue_after_error: AtomicBool::new(true),\n             delayed_span_bugs: Lock::new(Vec::new()),\n@@ -428,6 +434,7 @@ impl Handler {\n     pub fn reset_err_count(&self) {\n         // actually frees the underlying memory (which `clear` would not do)\n         *self.emitted_diagnostics.borrow_mut() = Default::default();\n+        self.deduplicated_err_count.store(0, SeqCst);\n         self.err_count.store(0, SeqCst);\n     }\n \n@@ -660,10 +667,10 @@ impl Handler {\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {\n-        let s = match self.err_count() {\n+        let s = match self.deduplicated_err_count.load(SeqCst) {\n             0 => return,\n             1 => \"aborting due to previous error\".to_string(),\n-            _ => format!(\"aborting due to {} previous errors\", self.err_count())\n+            count => format!(\"aborting due to {} previous errors\", count)\n         };\n         if self.treat_err_as_bug() {\n             return;\n@@ -705,10 +712,9 @@ impl Handler {\n     }\n \n     pub fn abort_if_errors(&self) {\n-        if self.err_count() == 0 {\n-            return;\n+        if self.has_errors() {\n+            FatalError.raise();\n         }\n-        FatalError.raise();\n     }\n     pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n         if lvl == Warning && !self.flags.can_emit_warnings {\n@@ -770,9 +776,12 @@ impl Handler {\n         if self.emitted_diagnostics.borrow_mut().insert(diagnostic_hash) {\n             self.emitter.borrow_mut().emit_diagnostic(db);\n             if db.is_error() {\n-                self.bump_err_count();\n+                self.deduplicated_err_count.fetch_add(1, SeqCst);\n             }\n         }\n+        if db.is_error() {\n+            self.bump_err_count();\n+        }\n     }\n \n     pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {"}, {"sha": "c1b6e3409c9159f1918d9c79088e094b893817e4", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -959,7 +959,7 @@ fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n     // lot of annoying errors in the compile-fail tests (basically,\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis\n-    if sess.err_count() > 0 {\n+    if sess.has_errors() {\n         return Err(ErrorReported);\n     }\n "}, {"sha": "887ef4b520ea38110c3c4c8a656ceb15f7dfdb07", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n-use rustc::util::common::ErrorReported;\n use rustc_data_structures::fx::FxHashMap;\n \n use syntax::source_map::{Span, DUMMY_SP};\n@@ -655,19 +654,12 @@ pub fn const_eval_raw_provider<'tcx>(\n         if tcx.is_static(def_id) {\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n-            let reported_err = tcx.sess.track_errors(|| {\n-                err.report_as_error(ecx.tcx,\n-                                    \"could not evaluate static initializer\")\n-            });\n-            match reported_err {\n-                Ok(v) => {\n-                    tcx.sess.delay_span_bug(err.span,\n-                                        &format!(\"static eval failure did not emit an error: {:#?}\",\n-                                        v));\n-                    v\n-                },\n-                Err(ErrorReported) => ErrorHandled::Reported,\n-            }\n+            let v = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n+            tcx.sess.delay_span_bug(\n+                err.span,\n+                &format!(\"static eval failure did not emit an error: {:#?}\", v)\n+            );\n+            v\n         } else if def_id.is_local() {\n             // constant defined in this crate, we can figure out a lint level!\n             match tcx.def_kind(def_id) {"}, {"sha": "8905f475647bab6c92c157a40565516c6f0e702a", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -2,25 +2,19 @@ use rustc::session::Session;\n \n use crate::generated_code;\n \n-use std::cell::Cell;\n-\n use syntax::parse::lexer::{self, StringReader};\n use syntax::parse::token::{self, TokenKind};\n use syntax_pos::*;\n \n #[derive(Clone)]\n pub struct SpanUtils<'a> {\n     pub sess: &'a Session,\n-    // FIXME given that we clone SpanUtils all over the place, this err_count is\n-    // probably useless and any logic relying on it is bogus.\n-    pub err_count: Cell<isize>,\n }\n \n impl<'a> SpanUtils<'a> {\n     pub fn new(sess: &'a Session) -> SpanUtils<'a> {\n         SpanUtils {\n             sess,\n-            err_count: Cell::new(0),\n         }\n     }\n "}, {"sha": "85da3251971430ddbe47228718a5f5c4380bdf4e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -565,7 +565,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // else an error would have been flagged by the\n                 // `loops` pass for using break with an expression\n                 // where you are not supposed to.\n-                assert!(expr_opt.is_none() || self.tcx.sess.err_count() > 0);\n+                assert!(expr_opt.is_none() || self.tcx.sess.has_errors());\n             }\n \n             ctxt.may_break = true;\n@@ -577,10 +577,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // this can only happen if the `break` was not\n             // inside a loop at all, which is caught by the\n             // loop-checking pass.\n-            if self.tcx.sess.err_count() == 0 {\n-                self.tcx.sess.delay_span_bug(expr.span,\n-                    \"break was outside loop, but no error was emitted\");\n-            }\n+            self.tcx.sess.delay_span_bug(expr.span,\n+                \"break was outside loop, but no error was emitted\");\n \n             // We still need to assign a type to the inner expression to\n             // prevent the ICE in #43162."}, {"sha": "b53159fc6e1ef7bd5354484df0df850a55b30ff8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -527,6 +527,8 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// checking this function. On exit, if we find that *more* errors\n     /// have been reported, we will skip regionck and other work that\n     /// expects the types within the function to be consistent.\n+    // FIXME(matthewjasper) This should not exist, and it's not correct\n+    // if type checking is run in parallel.\n     err_count_on_creation: usize,\n \n     ret_coercion: Option<RefCell<DynamicCoerceMany<'tcx>>>,\n@@ -696,11 +698,9 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n-    tcx.sess.track_errors(|| {\n-        let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n-    })\n+pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) {\n+    let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n+    tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n }\n \n fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n@@ -2128,8 +2128,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self.tcx.sess\n     }\n \n-    pub fn err_count_since_creation(&self) -> usize {\n-        self.tcx.sess.err_count() - self.err_count_on_creation\n+    pub fn errors_reported_since_creation(&self) -> bool {\n+        self.tcx.sess.err_count() > self.err_count_on_creation\n     }\n \n     /// Produces warning on the given node, if the current point in the\n@@ -4375,7 +4375,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit\n             // an error for not using a type Parameter.\n-            assert!(tcx.sess.err_count() > 0);\n+            assert!(tcx.sess.has_errors());\n             return;\n         }\n     }"}, {"sha": "5313e1d0f73a34099c6835c155c8e0133a8ef5b1", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // standalone expr (e.g., the `E` in a type like `[u32; E]`).\n         rcx.outlives_environment.save_implied_bounds(id);\n \n-        if self.err_count_since_creation() == 0 {\n+        if !self.errors_reported_since_creation() {\n             // regionck assumes typeck succeeded\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.param_env,\n         );\n \n-        if self.err_count_since_creation() == 0 {\n+        if !self.errors_reported_since_creation() {\n             // regionck assumes typeck succeeded\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n         }"}, {"sha": "b505679cad0375b132072a1ec24fa0c1546274dd", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -320,6 +320,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n \n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n+    // FIXME(matthewjasper) We shouldn't need to do this.\n     tcx.sess.track_errors(|| {\n         time(tcx.sess, \"type collecting\", || {\n             for &module in tcx.hir().krate().modules.keys() {\n@@ -352,7 +353,9 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n         })?;\n     }\n \n-    time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx))?;\n+    tcx.sess.track_errors(|| {\n+        time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx));\n+    })?;\n \n     time(tcx.sess, \"item-types checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {"}, {"sha": "29ee59d12427425d97cb4228822d75c843af843a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -346,7 +346,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // current architecture.\n         let resolver = abort_on_err(compiler.expansion(), sess).peek().1.clone();\n \n-        if sess.err_count() > 0 {\n+        if sess.has_errors() {\n             sess.fatal(\"Compilation failed, aborting rustdoc\");\n         }\n "}, {"sha": "d66c4f47d03ee79289d4c8e3bf49017f558a0a62", "filename": "src/test/ui/consts/enum-discr-type-err.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -0,0 +1,29 @@\n+// Test that we mark enum discriminant values as having errors, even when the\n+// diagnostic is deduplicated.\n+\n+struct F;\n+struct T;\n+\n+impl F {\n+    const V: i32 = 0;\n+}\n+\n+impl T {\n+    const V: i32 = 0;\n+}\n+\n+macro_rules! mac {\n+    ($( $v: ident = $s: ident,)*) => {\n+        enum E {\n+            $( $v = $s::V, )*\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n+mac! {\n+    A = F,\n+    B = T,\n+}\n+\n+fn main() {}"}, {"sha": "3c4fac7327d401e9ae834e25857c74d5a71440da", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5e60691943b72a09e007cb2358957d9446df36a/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5e60691943b72a09e007cb2358957d9446df36a/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=c5e60691943b72a09e007cb2358957d9446df36a", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/enum-discr-type-err.rs:18:21\n+   |\n+LL |               $( $v = $s::V, )*\n+   |                       ^^^^^ expected isize, found i32\n+...\n+LL | / mac! {\n+LL | |     A = F,\n+LL | |     B = T,\n+LL | | }\n+   | |_- in this macro invocation\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+   |\n+LL |             $( $v = $s::V.try_into().unwrap(), )*\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}