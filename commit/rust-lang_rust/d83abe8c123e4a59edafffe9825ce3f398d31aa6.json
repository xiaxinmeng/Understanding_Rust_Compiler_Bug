{"sha": "d83abe8c123e4a59edafffe9825ce3f398d31aa6", "node_id": "C_kwDOAAsO6NoAKGQ4M2FiZThjMTIzZTRhNTllZGFmZmZlOTgyNWNlM2YzOThkMzFhYTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-19T06:56:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-19T06:56:43Z"}, "message": "Rollup merge of #100522 - cjgillot:inline-polymorphic-recursion, r=tmiasko\n\nOnly check the `DefId` for the recursion check in MIR inliner.\n\nThe current history check compares `Instance`s, so it cannot detect cases of polymorphic recursion where `Substs` change.\nThis PR makes it so we only compare `DefId`s, ignoring any change in `Substs`.\n\nAccording to https://github.com/rust-lang/rust/pull/100522#issuecomment-1214769757, in practice only very few inlining decisions change.\n\nFixes https://github.com/rust-lang/rust/issues/100476", "tree": {"sha": "97dd0606e5b1c8a9b2ffcd9e6353f5068d8d99fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97dd0606e5b1c8a9b2ffcd9e6353f5068d8d99fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d83abe8c123e4a59edafffe9825ce3f398d31aa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/zQrCRBK7hj4Ov3rIwAAQOoIAGoTabKHf3gBLN389uWD1rE1\n/+Pq9rbNcWUU0vzk1KWWsoaYcEzSj1cAcWU+ndTCA8qzAJMg29uykPxr/1H1a5wA\nb4//29zWseACb0aSW/rw94EOMZCvxiMaPLCo7wBll5RZSqNxQNaUIjfHCktLjtBI\nVHL33R9Xn1Y6x0+k/BGlGVioBOg9bo3lURoJHAJkQ/LqoHpHTy25tApQATaR7JYL\n2PV7XOtrtkkJUT/sOG5mZdD+lRuUWwo1jIq5noTTs9+mWdrrePt+sBwlJ0+hEmEM\nuYwX9L0VilDFqtLNGVQroMXMKxlI7fP+mnDXgindCdZ/cV5A2T8mcOC51S4RMJ0=\n=po2y\n-----END PGP SIGNATURE-----\n", "payload": "tree 97dd0606e5b1c8a9b2ffcd9e6353f5068d8d99fc\nparent 3cebcbaaeb7defb2627af13dd7853e4eca6c3527\nparent 86645c9cf7e7a73e01c006c8bc39c431cae0e8df\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660892203 +0530\ncommitter GitHub <noreply@github.com> 1660892203 +0530\n\nRollup merge of #100522 - cjgillot:inline-polymorphic-recursion, r=tmiasko\n\nOnly check the `DefId` for the recursion check in MIR inliner.\n\nThe current history check compares `Instance`s, so it cannot detect cases of polymorphic recursion where `Substs` change.\nThis PR makes it so we only compare `DefId`s, ignoring any change in `Substs`.\n\nAccording to https://github.com/rust-lang/rust/pull/100522#issuecomment-1214769757, in practice only very few inlining decisions change.\n\nFixes https://github.com/rust-lang/rust/issues/100476\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d83abe8c123e4a59edafffe9825ce3f398d31aa6", "html_url": "https://github.com/rust-lang/rust/commit/d83abe8c123e4a59edafffe9825ce3f398d31aa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d83abe8c123e4a59edafffe9825ce3f398d31aa6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cebcbaaeb7defb2627af13dd7853e4eca6c3527", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cebcbaaeb7defb2627af13dd7853e4eca6c3527", "html_url": "https://github.com/rust-lang/rust/commit/3cebcbaaeb7defb2627af13dd7853e4eca6c3527"}, {"sha": "86645c9cf7e7a73e01c006c8bc39c431cae0e8df", "url": "https://api.github.com/repos/rust-lang/rust/commits/86645c9cf7e7a73e01c006c8bc39c431cae0e8df", "html_url": "https://github.com/rust-lang/rust/commit/86645c9cf7e7a73e01c006c8bc39c431cae0e8df"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "6704d3462f48eebe1b67aa0727ea383326dee717", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d83abe8c123e4a59edafffe9825ce3f398d31aa6/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83abe8c123e4a59edafffe9825ce3f398d31aa6/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=d83abe8c123e4a59edafffe9825ce3f398d31aa6", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n+use rustc_span::def_id::DefId;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -103,8 +104,12 @@ struct Inliner<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     /// Caller codegen attributes.\n     codegen_fn_attrs: &'tcx CodegenFnAttrs,\n-    /// Stack of inlined Instances.\n-    history: Vec<ty::Instance<'tcx>>,\n+    /// Stack of inlined instances.\n+    /// We only check the `DefId` and not the substs because we want to\n+    /// avoid inlining cases of polymorphic recursion.\n+    /// The number of `DefId`s is finite, so checking history is enough\n+    /// to ensure that we do not loop endlessly while inlining.\n+    history: Vec<DefId>,\n     /// Indicates that the caller body has been modified.\n     changed: bool,\n }\n@@ -132,7 +137,7 @@ impl<'tcx> Inliner<'tcx> {\n                 Ok(new_blocks) => {\n                     debug!(\"inlined {}\", callsite.callee);\n                     self.changed = true;\n-                    self.history.push(callsite.callee);\n+                    self.history.push(callsite.callee.def_id());\n                     self.process_blocks(caller_body, new_blocks);\n                     self.history.pop();\n                 }\n@@ -308,7 +313,7 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n-                if self.history.contains(&callee) {\n+                if self.history.contains(&callee.def_id()) {\n                     return None;\n                 }\n "}, {"sha": "7388722b776339b96e05f0176eb441c61e51c46e", "filename": "src/test/mir-opt/inline/polymorphic-recursion.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d83abe8c123e4a59edafffe9825ce3f398d31aa6/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83abe8c123e4a59edafffe9825ce3f398d31aa6/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic-recursion.rs?ref=d83abe8c123e4a59edafffe9825ce3f398d31aa6", "patch": "@@ -0,0 +1,25 @@\n+// Make sure that the MIR inliner does not loop indefinitely on polymorphic recursion.\n+// compile-flags: --crate-type lib\n+\n+// Randomize `def_path_hash` by defining them under a module with different names\n+macro_rules! emit {\n+    ($($m:ident)*) => {$(\n+        pub mod $m {\n+            pub trait Tr { type Next: Tr; }\n+\n+            pub fn hoge<const N: usize, T: Tr>() {\n+                inner::<N, T>();\n+            }\n+\n+            #[inline(always)]\n+            fn inner<const N: usize, T: Tr>()\n+            {\n+                inner::<N, T::Next>();\n+                inner::<N, T::Next>();\n+            }\n+        }\n+    )*};\n+}\n+\n+// Increase the chance of triggering the bug\n+emit!(m00 m01 m02 m03 m04 m05 m06 m07 m08 m09 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19);"}]}