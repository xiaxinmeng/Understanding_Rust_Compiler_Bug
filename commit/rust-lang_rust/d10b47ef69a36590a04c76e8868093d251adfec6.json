{"sha": "d10b47ef69a36590a04c76e8868093d251adfec6", "node_id": "C_kwDOAAsO6NoAKGQxMGI0N2VmNjlhMzY1OTBhMDRjNzZlODg2ODA5M2QyNTFhZGZlYzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-11T16:59:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-11T16:59:48Z"}, "message": "Rollup merge of #102445 - jmillikin:cstr-is-empty, r=Mark-Simulacrum\n\nAdd `is_empty()` method to `core::ffi::CStr`.\n\nACP: https://github.com/rust-lang/libs-team/issues/106\n\nTracking issue: https://github.com/rust-lang/rust/issues/102444", "tree": {"sha": "e8f0e99fcbe92879815ce826302a0ace11b04232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f0e99fcbe92879815ce826302a0ace11b04232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10b47ef69a36590a04c76e8868093d251adfec6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRaEECRBK7hj4Ov3rIwAAbq0IAFtzgbgxNbz5FNWUsh9+VuDs\nmtICPO3QLmBxILdvSS3xcl+eMDszw/1/Wp9fLuz7QjnJHn7S7vr3vA5ICAjRlzyf\nGEr1BEBBV7MH1QGmAA1QxAm2Ri4sTptFpwSQHvvGaMilMI7lyZlkry0bSjqEKGcK\nFKyKLC8IjWSGraqdPJghRQ4yzfkXFsq6IikViZdbr0Gn8c/fNpE7Yc124oQnuhgW\ndXARU6O9NZ4xQUf/j7v+h+XSvj2lx1v8jG9vi8OjxwZmpaCeGzsAhOXDHY+csjB9\nGI3S9bVy1woK20wBlSd6X629EURSS3qJKYmFIH3CIB7UsJwyX4pL3WXwid+4Qug=\n=VtsG\n-----END PGP SIGNATURE-----\n", "payload": "tree e8f0e99fcbe92879815ce826302a0ace11b04232\nparent 51320b3a16d2fd3e153b122a38ad04ae8ef92963\nparent 9d5e3a1f45a1f62e9826208b922cccf064d619c1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665507588 +0200\ncommitter GitHub <noreply@github.com> 1665507588 +0200\n\nRollup merge of #102445 - jmillikin:cstr-is-empty, r=Mark-Simulacrum\n\nAdd `is_empty()` method to `core::ffi::CStr`.\n\nACP: https://github.com/rust-lang/libs-team/issues/106\n\nTracking issue: https://github.com/rust-lang/rust/issues/102444\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10b47ef69a36590a04c76e8868093d251adfec6", "html_url": "https://github.com/rust-lang/rust/commit/d10b47ef69a36590a04c76e8868093d251adfec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10b47ef69a36590a04c76e8868093d251adfec6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51320b3a16d2fd3e153b122a38ad04ae8ef92963", "url": "https://api.github.com/repos/rust-lang/rust/commits/51320b3a16d2fd3e153b122a38ad04ae8ef92963", "html_url": "https://github.com/rust-lang/rust/commit/51320b3a16d2fd3e153b122a38ad04ae8ef92963"}, {"sha": "9d5e3a1f45a1f62e9826208b922cccf064d619c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e3a1f45a1f62e9826208b922cccf064d619c1", "html_url": "https://github.com/rust-lang/rust/commit/9d5e3a1f45a1f62e9826208b922cccf064d619c1"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "55e58c4e0baa57cddffa527491539caff09c6fa5", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d10b47ef69a36590a04c76e8868093d251adfec6/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b47ef69a36590a04c76e8868093d251adfec6/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=d10b47ef69a36590a04c76e8868093d251adfec6", "patch": "@@ -474,6 +474,34 @@ impl CStr {\n         self.inner.as_ptr()\n     }\n \n+    /// Returns `true` if `self.to_bytes()` has a length of 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cstr_is_empty)]\n+    ///\n+    /// use std::ffi::CStr;\n+    /// # use std::ffi::FromBytesWithNulError;\n+    ///\n+    /// # fn main() { test().unwrap(); }\n+    /// # fn test() -> Result<(), FromBytesWithNulError> {\n+    /// let cstr = CStr::from_bytes_with_nul(b\"foo\\0\")?;\n+    /// assert!(!cstr.is_empty());\n+    ///\n+    /// let empty_cstr = CStr::from_bytes_with_nul(b\"\\0\")?;\n+    /// assert!(empty_cstr.is_empty());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"cstr_is_empty\", issue = \"102444\")]\n+    pub const fn is_empty(&self) -> bool {\n+        // SAFETY: We know there is at least one byte; for empty strings it\n+        // is the NUL terminator.\n+        (unsafe { self.inner.get_unchecked(0) }) == &0\n+    }\n+\n     /// Converts this C string to a byte slice.\n     ///\n     /// The returned slice will **not** contain the trailing nul terminator that this C"}]}