{"sha": "ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNmU2ZGZkNWQ1ZWQ1ZDk4ZjFjNGRmMGE5MzU0NjNjODBiMjI5ODc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-09T08:33:28Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-09T08:33:28Z"}, "message": "Refactor rewrite_pat_expr", "tree": {"sha": "c774abaa0f25aeacdea2297cec690d4550b062f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c774abaa0f25aeacdea2297cec690d4550b062f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987", "html_url": "https://github.com/rust-lang/rust/commit/ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e1ca73fc23ab05a02e08f8cd1465a7969fa49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e1ca73fc23ab05a02e08f8cd1465a7969fa49e", "html_url": "https://github.com/rust-lang/rust/commit/35e1ca73fc23ab05a02e08f8cd1465a7969fa49e"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "8dfc29c38cc35770ee60d81741bbc0d269945494", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ac6e6dfd5d5ed5d98f1c4df0a935463c80b22987", "patch": "@@ -1494,6 +1494,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n                     shape: Shape)\n                     -> Option<String> {\n     debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, pat, expr);\n+    let mut pat_string = String::new();\n     let mut result = match pat {\n         Some(pat) => {\n             let matcher = if matcher.is_empty() {\n@@ -1503,7 +1504,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n             };\n             let pat_shape = try_opt!(try_opt!(shape.shrink_left(matcher.len()))\n                                          .sub_width(connector.len()));\n-            let pat_string = try_opt!(pat.rewrite(context, pat_shape));\n+            pat_string = try_opt!(pat.rewrite(context, pat_shape));\n             format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n         None => String::new(),\n@@ -1516,19 +1517,11 @@ fn rewrite_pat_expr(context: &RewriteContext,\n     if shape.width > extra_offset + 1 {\n         let spacer = if pat.is_some() { \" \" } else { \"\" };\n \n-        let expr_shape = try_opt!(shape.sub_width(extra_offset + spacer.len()))\n-            .add_offset(extra_offset + spacer.len());\n+        let expr_shape = try_opt!(shape.offset_left(extra_offset + spacer.len()));\n         let expr_rewrite = expr.rewrite(context, expr_shape);\n \n         if let Some(expr_string) = expr_rewrite {\n-            let pat_simple = pat.and_then(|p| {\n-                                              p.rewrite(context,\n-                                                        Shape::legacy(context.config.max_width,\n-                                                                      Indent::empty()))\n-                                          })\n-                .map(|s| pat_is_simple(&s));\n-\n-            if pat.is_none() || pat_simple.unwrap_or(false) || !expr_string.contains('\\n') {\n+            if pat.is_none() || pat_is_simple(&pat_string) || !expr_string.contains('\\n') {\n                 result.push_str(spacer);\n                 result.push_str(&expr_string);\n                 return Some(result);\n@@ -1542,11 +1535,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n     result.push('\\n');\n     result.push_str(&nested_indent.to_string(context.config));\n \n-    let expr_rewrite = expr.rewrite(&context,\n-                                    Shape::legacy(try_opt!(context.config\n-                                                      .max_width\n-                                                      .checked_sub(nested_indent.width())),\n-                                                  nested_indent));\n+    let expr_rewrite = expr.rewrite(&context, Shape::indented(nested_indent, context.config));\n     result.push_str(&try_opt!(expr_rewrite));\n \n     Some(result)"}]}