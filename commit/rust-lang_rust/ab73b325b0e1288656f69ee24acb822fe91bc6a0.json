{"sha": "ab73b325b0e1288656f69ee24acb822fe91bc6a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzNiMzI1YjBlMTI4ODY1NmY2OWVlMjRhY2I4MjJmZTkxYmM2YTA=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-05T18:51:22Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-13T13:31:50Z"}, "message": "save-analysis: Nest typeck tables when processing functions/methods\n\nFixes an issue where we did not nest tables correctly when resolving\nassociated types in formal argument/return type positions", "tree": {"sha": "e671f165d912b2fdcf5ceb092f95c7c63e39777c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e671f165d912b2fdcf5ceb092f95c7c63e39777c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab73b325b0e1288656f69ee24acb822fe91bc6a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab73b325b0e1288656f69ee24acb822fe91bc6a0", "html_url": "https://github.com/rust-lang/rust/commit/ab73b325b0e1288656f69ee24acb822fe91bc6a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab73b325b0e1288656f69ee24acb822fe91bc6a0/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3287a65fc05028dce3b521765f4643384ebc4346", "url": "https://api.github.com/repos/rust-lang/rust/commits/3287a65fc05028dce3b521765f4643384ebc4346", "html_url": "https://github.com/rust-lang/rust/commit/3287a65fc05028dce3b521765f4643384ebc4346"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "135f13499436cb054d766946e9e20a8873f439a7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 38, "deletions": 42, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ab73b325b0e1288656f69ee24acb822fe91bc6a0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab73b325b0e1288656f69ee24acb822fe91bc6a0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ab73b325b0e1288656f69ee24acb822fe91bc6a0", "patch": "@@ -283,36 +283,32 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     ) {\n         debug!(\"process_method: {}:{}\", id, ident);\n \n-        if let Some(mut method_data) = self.save_ctxt.get_method_data(id, ident, span) {\n-            let sig_str = crate::make_signature(&sig.decl, &generics);\n-            if body.is_some() {\n-                self.nest_tables(\n-                    id,\n-                    |v| v.process_formals(&sig.decl.inputs, &method_data.qualname),\n-                );\n-            }\n+        let hir_id = self.tcx.hir().node_to_hir_id(id);\n+        self.nest_tables(id, |v| {\n+            if let Some(mut method_data) = v.save_ctxt.get_method_data(id, ident, span) {\n+                v.process_formals(&sig.decl.inputs, &method_data.qualname);\n+                v.process_generic_params(&generics, &method_data.qualname, id);\n \n-            self.process_generic_params(&generics, &method_data.qualname, id);\n+                method_data.value = crate::make_signature(&sig.decl, &generics);\n+                method_data.sig = sig::method_signature(id, ident, generics, sig, &v.save_ctxt);\n \n-            method_data.value = sig_str;\n-            method_data.sig = sig::method_signature(id, ident, generics, sig, &self.save_ctxt);\n-            let hir_id = self.tcx.hir().node_to_hir_id(id);\n-            self.dumper.dump_def(&access_from_vis!(self.save_ctxt, vis, hir_id), method_data);\n-        }\n+                v.dumper.dump_def(&access_from_vis!(v.save_ctxt, vis, hir_id), method_data);\n+            }\n \n-        // walk arg and return types\n-        for arg in &sig.decl.inputs {\n-            self.visit_ty(&arg.ty);\n-        }\n+            // walk arg and return types\n+            for arg in &sig.decl.inputs {\n+                v.visit_ty(&arg.ty);\n+            }\n \n-        if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n-            self.visit_ty(ret_ty);\n-        }\n+            if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n+                v.visit_ty(ret_ty);\n+            }\n \n-        // walk the fn body\n-        if let Some(body) = body {\n-            self.nest_tables(id, |v| v.visit_block(body));\n-        }\n+            // walk the fn body\n+            if let Some(body) = body {\n+                v.visit_block(body);\n+            }\n+        });\n     }\n \n     fn process_struct_field_def(&mut self, field: &ast::StructField, parent_id: NodeId) {\n@@ -377,26 +373,26 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         ty_params: &'l ast::Generics,\n         body: &'l ast::Block,\n     ) {\n-        if let Some(fn_data) = self.save_ctxt.get_item_data(item) {\n-            down_cast_data!(fn_data, DefData, item.span);\n-            self.nest_tables(\n-                item.id,\n-                |v| v.process_formals(&decl.inputs, &fn_data.qualname),\n-            );\n-            self.process_generic_params(ty_params, &fn_data.qualname, item.id);\n-            let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n-            self.dumper.dump_def(&access_from!(self.save_ctxt, item, hir_id), fn_data);\n-        }\n+        let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n+        self.nest_tables(item.id, |v| {\n+            if let Some(fn_data) = v.save_ctxt.get_item_data(item) {\n+                down_cast_data!(fn_data, DefData, item.span);\n+                v.process_formals(&decl.inputs, &fn_data.qualname);\n+                v.process_generic_params(ty_params, &fn_data.qualname, item.id);\n \n-        for arg in &decl.inputs {\n-            self.visit_ty(&arg.ty);\n-        }\n+                v.dumper.dump_def(&access_from!(v.save_ctxt, item, hir_id), fn_data);\n+            }\n \n-        if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n-            self.visit_ty(&ret_ty);\n-        }\n+            for arg in &decl.inputs {\n+                v.visit_ty(&arg.ty)\n+            }\n \n-        self.nest_tables(item.id, |v| v.visit_block(&body));\n+            if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n+                v.visit_ty(&ret_ty);\n+            }\n+\n+            v.visit_block(&body);\n+        });\n     }\n \n     fn process_static_or_const_item("}]}