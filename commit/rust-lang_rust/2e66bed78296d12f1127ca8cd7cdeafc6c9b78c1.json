{"sha": "2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjZiZWQ3ODI5NmQxMmYxMTI3Y2E4Y2Q3Y2RlYWZjNmM5Yjc4YzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-08T16:42:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T16:42:56Z"}, "message": "Merge #2698\n\n2698: Call Hierarchy r=kjeremy a=kjeremy\n\nSupport experiment incoming and outgoing calls.\r\n\r\nFixes #2546 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "e4f8f3dac6a05b92247e75c9bba71a2e6afd5745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4f8f3dac6a05b92247e75c9bba71a2e6afd5745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFgaQCRBK7hj4Ov3rIwAAdHIIAAVpBrPeSiWNpZKlotXqKB4K\nTwDSuyXJorCqewn3M7AKL23InQWQruyqwPcVAja9wnmwy+1Jl6Bizo9b6XvCQM6N\naNk9LgW5gGN/cJA3C6KddVAfV7nyLF5YafLO3EQmS5rXT1aVG0iQAXqNrCenS61F\nfKLCfxcrTNt7LjYZ0Cz4K8JG6p7XEPjGVhZXoxTeYp++f+sbceRhNS6VjY49o1mD\nQnNM0E4y72qTOQWncfisdr9dQuYEdNkrc4jvjAQ3EBhymXh83dQ6mpwAO9CTTTDQ\nhWhDkLHJarjfVuJ54Q8uYfgc61GNRlKi7qoTAE6tmSCJ48r/RFi8HPqlasEvyS8=\n=TH3h\n-----END PGP SIGNATURE-----\n", "payload": "tree e4f8f3dac6a05b92247e75c9bba71a2e6afd5745\nparent 928ecd069a508845ef4dbfd1bc1b9bf975d76e5b\nparent c7b2bc1363c8422122a0d1fbd5ff68b5984cf173\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578501776 +0000\ncommitter GitHub <noreply@github.com> 1578501776 +0000\n\nMerge #2698\n\n2698: Call Hierarchy r=kjeremy a=kjeremy\n\nSupport experiment incoming and outgoing calls.\r\n\r\nFixes #2546 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "html_url": "https://github.com/rust-lang/rust/commit/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928ecd069a508845ef4dbfd1bc1b9bf975d76e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/928ecd069a508845ef4dbfd1bc1b9bf975d76e5b", "html_url": "https://github.com/rust-lang/rust/commit/928ecd069a508845ef4dbfd1bc1b9bf975d76e5b"}, {"sha": "c7b2bc1363c8422122a0d1fbd5ff68b5984cf173", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b2bc1363c8422122a0d1fbd5ff68b5984cf173", "html_url": "https://github.com/rust-lang/rust/commit/c7b2bc1363c8422122a0d1fbd5ff68b5984cf173"}], "stats": {"total": 517, "additions": 502, "deletions": 15}, "files": [{"sha": "c570e0c3c86c8228a01c92d63ca847520f2342c5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -1032,6 +1032,7 @@ dependencies = [\n  \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"format-buf 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fst 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "2c9f9dce058519d64a36de01c567d64e8501fc35", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -13,6 +13,7 @@ wasm = []\n [dependencies]\n either = \"1.5\"\n format-buf = \"1.0.0\"\n+indexmap = \"1.3.0\"\n itertools = \"0.8.0\"\n join_to_string = \"0.1.3\"\n log = \"0.4.5\""}, {"sha": "1cb712e32d58058245da26f74bfd80b3198121c3", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "added", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -0,0 +1,337 @@\n+//! Entry point for call-hierarchy\n+\n+use indexmap::IndexMap;\n+\n+use hir::db::AstDatabase;\n+use ra_syntax::{\n+    ast::{self, DocCommentsOwner},\n+    match_ast, AstNode, TextRange,\n+};\n+\n+use crate::{\n+    call_info::FnCallNode,\n+    db::RootDatabase,\n+    display::{ShortLabel, ToNav},\n+    expand::descend_into_macros,\n+    goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n+};\n+\n+#[derive(Debug, Clone)]\n+pub struct CallItem {\n+    pub target: NavigationTarget,\n+    pub ranges: Vec<TextRange>,\n+}\n+\n+impl CallItem {\n+    #[cfg(test)]\n+    pub(crate) fn assert_match(&self, expected: &str) {\n+        let actual = self.debug_render();\n+        test_utils::assert_eq_text!(expected.trim(), actual.trim(),);\n+    }\n+\n+    #[cfg(test)]\n+    pub(crate) fn debug_render(&self) -> String {\n+        format!(\"{} : {:?}\", self.target.debug_render(), self.ranges)\n+    }\n+}\n+\n+pub(crate) fn call_hierarchy(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n+    goto_definition::goto_definition(db, position)\n+}\n+\n+pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Option<Vec<CallItem>> {\n+    // 1. Find all refs\n+    // 2. Loop through refs and determine unique fndef. This will become our `from: CallHierarchyItem,` in the reply.\n+    // 3. Add ranges relative to the start of the fndef.\n+    let refs = references::find_all_refs(db, position, None)?;\n+\n+    let mut calls = CallLocations::default();\n+\n+    for reference in refs.info.references() {\n+        let file_id = reference.file_range.file_id;\n+        let file = db.parse_or_expand(file_id.into())?;\n+        let token = file.token_at_offset(reference.file_range.range.start()).next()?;\n+        let token = descend_into_macros(db, file_id, token);\n+        let syntax = token.value.parent();\n+\n+        // This target is the containing function\n+        if let Some(nav) = syntax.ancestors().find_map(|node| {\n+            match_ast! {\n+                match node {\n+                    ast::FnDef(it) => {\n+                        Some(NavigationTarget::from_named(\n+                            db,\n+                            token.with_value(&it),\n+                            it.doc_comment_text(),\n+                            it.short_label(),\n+                        ))\n+                    },\n+                    _ => { None },\n+                }\n+            }\n+        }) {\n+            let relative_range = reference.file_range.range;\n+            calls.add(&nav, relative_range);\n+        }\n+    }\n+\n+    Some(calls.into_items())\n+}\n+\n+pub(crate) fn outgoing_calls(db: &RootDatabase, position: FilePosition) -> Option<Vec<CallItem>> {\n+    let file_id = position.file_id;\n+    let file = db.parse_or_expand(file_id.into())?;\n+    let token = file.token_at_offset(position.offset).next()?;\n+    let token = descend_into_macros(db, file_id, token);\n+    let syntax = token.value.parent();\n+\n+    let mut calls = CallLocations::default();\n+\n+    syntax\n+        .descendants()\n+        .filter_map(|node| FnCallNode::with_node_exact(&node))\n+        .filter_map(|call_node| {\n+            let name_ref = call_node.name_ref()?;\n+            let name_ref = token.with_value(name_ref.syntax());\n+\n+            let analyzer = hir::SourceAnalyzer::new(db, name_ref, None);\n+\n+            if let Some(func_target) = match &call_node {\n+                FnCallNode::CallExpr(expr) => {\n+                    //FIXME: Type::as_callable is broken\n+                    let callable_def = analyzer.type_of(db, &expr.expr()?)?.as_callable()?;\n+                    match callable_def {\n+                        hir::CallableDef::FunctionId(it) => {\n+                            let fn_def: hir::Function = it.into();\n+                            let nav = fn_def.to_nav(db);\n+                            Some(nav)\n+                        }\n+                        _ => None,\n+                    }\n+                }\n+                FnCallNode::MethodCallExpr(expr) => {\n+                    let function = analyzer.resolve_method_call(&expr)?;\n+                    Some(function.to_nav(db))\n+                }\n+                FnCallNode::MacroCallExpr(expr) => {\n+                    let macro_def = analyzer.resolve_macro_call(db, name_ref.with_value(&expr))?;\n+                    Some(macro_def.to_nav(db))\n+                }\n+            } {\n+                Some((func_target.clone(), name_ref.value.text_range()))\n+            } else {\n+                None\n+            }\n+        })\n+        .for_each(|(nav, range)| calls.add(&nav, range));\n+\n+    Some(calls.into_items())\n+}\n+\n+#[derive(Default)]\n+struct CallLocations {\n+    funcs: IndexMap<NavigationTarget, Vec<TextRange>>,\n+}\n+\n+impl CallLocations {\n+    fn add(&mut self, target: &NavigationTarget, range: TextRange) {\n+        self.funcs.entry(target.clone()).or_default().push(range);\n+    }\n+\n+    fn into_items(self) -> Vec<CallItem> {\n+        self.funcs.into_iter().map(|(target, ranges)| CallItem { target, ranges }).collect()\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use ra_db::FilePosition;\n+\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    fn check_hierarchy(\n+        fixture: &str,\n+        expected: &str,\n+        expected_incoming: &[&str],\n+        expected_outgoing: &[&str],\n+    ) {\n+        let (analysis, pos) = analysis_and_position(fixture);\n+\n+        let mut navs = analysis.call_hierarchy(pos).unwrap().unwrap().info;\n+        assert_eq!(navs.len(), 1);\n+        let nav = navs.pop().unwrap();\n+        nav.assert_match(expected);\n+\n+        let item_pos = FilePosition { file_id: nav.file_id(), offset: nav.range().start() };\n+        let incoming_calls = analysis.incoming_calls(item_pos).unwrap().unwrap();\n+        assert_eq!(incoming_calls.len(), expected_incoming.len());\n+\n+        for call in 0..incoming_calls.len() {\n+            incoming_calls[call].assert_match(expected_incoming[call]);\n+        }\n+\n+        let outgoing_calls = analysis.outgoing_calls(item_pos).unwrap().unwrap();\n+        assert_eq!(outgoing_calls.len(), expected_outgoing.len());\n+\n+        for call in 0..outgoing_calls.len() {\n+            outgoing_calls[call].assert_match(expected_outgoing[call]);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_on_ref() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            fn callee() {}\n+            fn caller() {\n+                call<|>ee();\n+            }\n+            \"#,\n+            \"callee FN_DEF FileId(1) [0; 14) [3; 9)\",\n+            &[\"caller FN_DEF FileId(1) [15; 44) [18; 24) : [[33; 39)]\"],\n+            &[],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_on_def() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            fn call<|>ee() {}\n+            fn caller() {\n+                callee();\n+            }\n+            \"#,\n+            \"callee FN_DEF FileId(1) [0; 14) [3; 9)\",\n+            &[\"caller FN_DEF FileId(1) [15; 44) [18; 24) : [[33; 39)]\"],\n+            &[],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_in_same_fn() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            fn callee() {}\n+            fn caller() {\n+                call<|>ee();\n+                callee();\n+            }\n+            \"#,\n+            \"callee FN_DEF FileId(1) [0; 14) [3; 9)\",\n+            &[\"caller FN_DEF FileId(1) [15; 58) [18; 24) : [[33; 39), [47; 53)]\"],\n+            &[],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_in_different_fn() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            fn callee() {}\n+            fn caller1() {\n+                call<|>ee();\n+            }\n+\n+            fn caller2() {\n+                callee();\n+            }\n+            \"#,\n+            \"callee FN_DEF FileId(1) [0; 14) [3; 9)\",\n+            &[\n+                \"caller1 FN_DEF FileId(1) [15; 45) [18; 25) : [[34; 40)]\",\n+                \"caller2 FN_DEF FileId(1) [46; 76) [49; 56) : [[65; 71)]\",\n+            ],\n+            &[],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_in_different_files() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            mod foo;\n+            use foo::callee;\n+\n+            fn caller() {\n+                call<|>ee();\n+            }\n+\n+            //- /foo/mod.rs\n+            pub fn callee() {}\n+            \"#,\n+            \"callee FN_DEF FileId(2) [0; 18) [7; 13)\",\n+            &[\"caller FN_DEF FileId(1) [26; 55) [29; 35) : [[44; 50)]\"],\n+            &[],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_outgoing() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            fn callee() {}\n+            fn call<|>er() {\n+                callee();\n+                callee();\n+            }\n+            \"#,\n+            \"caller FN_DEF FileId(1) [15; 58) [18; 24)\",\n+            &[],\n+            &[\"callee FN_DEF FileId(1) [0; 14) [3; 9) : [[33; 39), [47; 53)]\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_outgoing_in_different_files() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            mod foo;\n+            use foo::callee;\n+\n+            fn call<|>er() {\n+                callee();\n+            }\n+\n+            //- /foo/mod.rs\n+            pub fn callee() {}\n+            \"#,\n+            \"caller FN_DEF FileId(1) [26; 55) [29; 35)\",\n+            &[],\n+            &[\"callee FN_DEF FileId(2) [0; 18) [7; 13) : [[44; 50)]\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_hierarchy_incoming_outgoing() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs\n+            fn caller1() {\n+                call<|>er2();\n+            }\n+\n+            fn caller2() {\n+                caller3();\n+            }\n+\n+            fn caller3() {\n+\n+            }\n+            \"#,\n+            \"caller2 FN_DEF FileId(1) [32; 63) [35; 42)\",\n+            &[\"caller1 FN_DEF FileId(1) [0; 31) [3; 10) : [[19; 26)]\"],\n+            &[\"caller3 FN_DEF FileId(1) [64; 80) [67; 74) : [[51; 58)]\"],\n+        );\n+    }\n+}"}, {"sha": "a7023529b692a905f195727e24b99b8cc2a16a63", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -88,7 +88,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n }\n \n #[derive(Debug)]\n-enum FnCallNode {\n+pub(crate) enum FnCallNode {\n     CallExpr(ast::CallExpr),\n     MethodCallExpr(ast::MethodCallExpr),\n     MacroCallExpr(ast::MacroCall),\n@@ -108,7 +108,18 @@ impl FnCallNode {\n         })\n     }\n \n-    fn name_ref(&self) -> Option<ast::NameRef> {\n+    pub(crate) fn with_node_exact(node: &SyntaxNode) -> Option<FnCallNode> {\n+        match_ast! {\n+            match node {\n+                ast::CallExpr(it) => { Some(FnCallNode::CallExpr(it)) },\n+                ast::MethodCallExpr(it) => { Some(FnCallNode::MethodCallExpr(it)) },\n+                ast::MacroCall(it) => { Some(FnCallNode::MacroCallExpr(it)) },\n+                _ => { None },\n+            }\n+        }\n+    }\n+\n+    pub(crate) fn name_ref(&self) -> Option<ast::NameRef> {\n         match self {\n             FnCallNode::CallExpr(call_expr) => Some(match call_expr.expr()? {\n                 ast::Expr::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,"}, {"sha": "f2e45fa31b5b6942006e1441a741a7d5a2a2d02d", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -19,7 +19,7 @@ use super::short_label::ShortLabel;\n ///\n /// Typically, a `NavigationTarget` corresponds to some element in the source\n /// code, like a function or a struct, but this is not strictly required.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NavigationTarget {\n     file_id: FileId,\n     name: SmolStr,"}, {"sha": "06497617b5e6377ea9bfdc52121713607720fbce", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -24,6 +24,7 @@ mod goto_definition;\n mod goto_type_definition;\n mod extend_selection;\n mod hover;\n+mod call_hierarchy;\n mod call_info;\n mod syntax_highlighting;\n mod parent_module;\n@@ -62,6 +63,7 @@ use crate::{db::LineIndexDatabase, display::ToNav, symbol_index::FileSymbol};\n \n pub use crate::{\n     assists::{Assist, AssistId},\n+    call_hierarchy::CallItem,\n     change::{AnalysisChange, LibraryData},\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     diagnostics::Severity,\n@@ -412,6 +414,24 @@ impl Analysis {\n         self.with_db(|db| call_info::call_info(db, position))\n     }\n \n+    /// Computes call hierarchy candidates for the given file position.\n+    pub fn call_hierarchy(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+        self.with_db(|db| call_hierarchy::call_hierarchy(db, position))\n+    }\n+\n+    /// Computes incoming calls for the given file position.\n+    pub fn incoming_calls(&self, position: FilePosition) -> Cancelable<Option<Vec<CallItem>>> {\n+        self.with_db(|db| call_hierarchy::incoming_calls(db, position))\n+    }\n+\n+    /// Computes incoming calls for the given file position.\n+    pub fn outgoing_calls(&self, position: FilePosition) -> Cancelable<Option<Vec<CallItem>>> {\n+        self.with_db(|db| call_hierarchy::outgoing_calls(db, position))\n+    }\n+\n     /// Returns a `mod name;` declaration which created the current module.\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n         self.with_db(|db| parent_module::parent_module(db, position))"}, {"sha": "c4711076cdb1b85dacf557178186f54da5eff360", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -1,8 +1,8 @@\n //! Advertizes the capabilities of the LSP Server.\n \n use lsp_types::{\n-    CodeActionProviderCapability, CodeLensOptions, CompletionOptions,\n-    DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n+    CallHierarchyServerCapability, CodeActionProviderCapability, CodeLensOptions,\n+    CompletionOptions, DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n     ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n     SelectionRangeProviderCapability, ServerCapabilities, SignatureHelpOptions,\n     TextDocumentSyncCapability, TextDocumentSyncKind, TextDocumentSyncOptions,\n@@ -56,7 +56,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         color_provider: None,\n         execute_command_provider: None,\n         workspace: None,\n-        call_hierarchy_provider: None,\n+        call_hierarchy_provider: Some(CallHierarchyServerCapability::Simple(true)),\n         experimental: Default::default(),\n     }\n }"}, {"sha": "c260b51c47dd9edf7f25543b66d801d56ecae950", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -490,6 +490,24 @@ impl TryConvWith<&WorldSnapshot> for (FileId, RangeInfo<Vec<NavigationTarget>>)\n     }\n }\n \n+pub fn to_call_hierarchy_item(\n+    file_id: FileId,\n+    range: TextRange,\n+    world: &WorldSnapshot,\n+    line_index: &LineIndex,\n+    nav: NavigationTarget,\n+) -> Result<lsp_types::CallHierarchyItem> {\n+    Ok(lsp_types::CallHierarchyItem {\n+        name: nav.name().to_string(),\n+        kind: nav.kind().conv(),\n+        tags: None,\n+        detail: nav.description().map(|it| it.to_string()),\n+        uri: file_id.try_conv_with(&world)?,\n+        range: nav.range().conv_with(&line_index),\n+        selection_range: range.conv_with(&line_index),\n+    })\n+}\n+\n pub fn to_location(\n     file_id: FileId,\n     range: TextRange,"}, {"sha": "047c86a3b0e51472769b7494c2c75d2df9af7338", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -499,6 +499,9 @@ fn on_request(\n         .on::<req::Formatting>(handlers::handle_formatting)?\n         .on::<req::DocumentHighlightRequest>(handlers::handle_document_highlight)?\n         .on::<req::InlayHints>(handlers::handle_inlay_hints)?\n+        .on::<req::CallHierarchyPrepare>(handlers::handle_call_hierarchy_prepare)?\n+        .on::<req::CallHierarchyIncomingCalls>(handlers::handle_call_hierarchy_incoming)?\n+        .on::<req::CallHierarchyOutgoingCalls>(handlers::handle_call_hierarchy_outgoing)?\n         .finish();\n     Ok(())\n }"}, {"sha": "a5b6f48af32dc8280b7eebb2f00f1364fc280e6f", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -5,13 +5,16 @@ use std::{fmt::Write as _, io::Write as _};\n \n use lsp_server::ErrorCode;\n use lsp_types::{\n+    CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n+    CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n     CodeAction, CodeActionResponse, CodeLens, Command, CompletionItem, Diagnostic,\n     DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n     Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n     Range, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n-    AssistId, FileId, FilePosition, FileRange, Query, Runnable, RunnableKind, SearchScope,\n+    AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n+    SearchScope,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -21,7 +24,10 @@ use serde_json::to_value;\n \n use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n-    conv::{to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith, TryConvWithToVec},\n+    conv::{\n+        to_call_hierarchy_item, to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith,\n+        TryConvWithToVec,\n+    },\n     req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -936,3 +942,91 @@ pub fn handle_inlay_hints(\n         })\n         .collect())\n }\n+\n+pub fn handle_call_hierarchy_prepare(\n+    world: WorldSnapshot,\n+    params: CallHierarchyPrepareParams,\n+) -> Result<Option<Vec<CallHierarchyItem>>> {\n+    let _p = profile(\"handle_call_hierarchy_prepare\");\n+    let position = params.text_document_position_params.try_conv_with(&world)?;\n+    let file_id = position.file_id;\n+\n+    let nav_info = match world.analysis().call_hierarchy(position)? {\n+        None => return Ok(None),\n+        Some(it) => it,\n+    };\n+\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let RangeInfo { range, info: navs } = nav_info;\n+    let res = navs\n+        .into_iter()\n+        .filter(|it| it.kind() == SyntaxKind::FN_DEF)\n+        .filter_map(|it| to_call_hierarchy_item(file_id, range, &world, &line_index, it).ok())\n+        .collect();\n+\n+    Ok(Some(res))\n+}\n+\n+pub fn handle_call_hierarchy_incoming(\n+    world: WorldSnapshot,\n+    params: CallHierarchyIncomingCallsParams,\n+) -> Result<Option<Vec<CallHierarchyIncomingCall>>> {\n+    let _p = profile(\"handle_call_hierarchy_incoming\");\n+    let item = params.item;\n+\n+    let doc = TextDocumentIdentifier::new(item.uri);\n+    let frange: FileRange = (&doc, item.range).try_conv_with(&world)?;\n+    let fpos = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n+\n+    let call_items = match world.analysis().incoming_calls(fpos)? {\n+        None => return Ok(None),\n+        Some(it) => it,\n+    };\n+\n+    let mut res = vec![];\n+\n+    for call_item in call_items.into_iter() {\n+        let file_id = call_item.target.file_id();\n+        let line_index = world.analysis().file_line_index(file_id)?;\n+        let range = call_item.target.range();\n+        let item = to_call_hierarchy_item(file_id, range, &world, &line_index, call_item.target)?;\n+        res.push(CallHierarchyIncomingCall {\n+            from: item,\n+            from_ranges: call_item.ranges.iter().map(|it| it.conv_with(&line_index)).collect(),\n+        });\n+    }\n+\n+    Ok(Some(res))\n+}\n+\n+pub fn handle_call_hierarchy_outgoing(\n+    world: WorldSnapshot,\n+    params: CallHierarchyOutgoingCallsParams,\n+) -> Result<Option<Vec<CallHierarchyOutgoingCall>>> {\n+    let _p = profile(\"handle_call_hierarchy_outgoing\");\n+    let item = params.item;\n+\n+    let doc = TextDocumentIdentifier::new(item.uri);\n+    let frange: FileRange = (&doc, item.range).try_conv_with(&world)?;\n+    let fpos = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n+\n+    let call_items = match world.analysis().outgoing_calls(fpos)? {\n+        None => return Ok(None),\n+        Some(it) => it,\n+    };\n+\n+    let mut res = vec![];\n+\n+    for call_item in call_items.into_iter() {\n+        let file_id = call_item.target.file_id();\n+        let line_index = world.analysis().file_line_index(file_id)?;\n+        let range = call_item.target.range();\n+        let item = to_call_hierarchy_item(file_id, range, &world, &line_index, call_item.target)?;\n+        res.push(CallHierarchyOutgoingCall {\n+            to: item,\n+            from_ranges: call_item.ranges.iter().map(|it| it.conv_with(&line_index)).collect(),\n+        });\n+    }\n+\n+    Ok(Some(res))\n+}"}, {"sha": "8098ff31d16ee611dcf227fc4ee7ab095cc9d499", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=2e66bed78296d12f1127ca8cd7cdeafc6c9b78c1", "patch": "@@ -6,13 +6,15 @@ use serde::{Deserialize, Serialize};\n \n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n-    CodeLensParams, CompletionParams, CompletionResponse, DidChangeConfigurationParams,\n-    DidChangeWatchedFilesParams, DidChangeWatchedFilesRegistrationOptions,\n-    DocumentOnTypeFormattingParams, DocumentSymbolParams, DocumentSymbolResponse,\n-    FileSystemWatcher, Hover, InitializeResult, MessageType, ProgressParams, ProgressParamsValue,\n-    ProgressToken, PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams,\n-    SelectionRange, SelectionRangeParams, ShowMessageParams, SignatureHelp, TextDocumentEdit,\n-    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n+    CodeLensParams, CompletionParams, CompletionResponse, DiagnosticTag,\n+    DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n+    DidChangeWatchedFilesRegistrationOptions, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n+    DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n+    PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,\n+    PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams, SelectionRange,\n+    SelectionRangeParams, ServerCapabilities, ShowMessageParams, SignatureHelp, SymbolKind,\n+    TextDocumentEdit, TextDocumentPositionParams, TextEdit, WorkDoneProgressParams, WorkspaceEdit,\n+    WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}]}