{"sha": "a1411de9de38e0fed728874580218338160eb185", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDExZGU5ZGUzOGUwZmVkNzI4ODc0NTgwMjE4MzM4MTYwZWIxODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T19:20:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T19:20:41Z"}, "message": "Auto merge of #86267 - ZuseZ4:master, r=nagisa\n\nAllow loading of llvm plugins on nightly\n\nBased on a discussion in  #82734 / with `@wsmoses.`\nMainly moves [this](https://github.com/wsmoses/rust/commit/0149bc4e7e596005c665b132877abebe5258a0f6) behind a -Z flag, so it can only be used on nightly,\nas requested by `@nagisa` in https://github.com/rust-lang/rust/issues/82734#issuecomment-835863940\n\nThis change allows loading of llvm plugins like Enzyme.\nRight now it also requires a shared library LLVM build of rustc for symbol resolution.\n\n```rust\n// test.rs\nextern { fn __enzyme_autodiff(_: usize, ...) -> f64; }\n\nfn square(x : f64) -> f64 {\n   return x * x;\n}\n\nfn main() {\n   unsafe {\n      println!(\"Hello, world {} {}!\", square(3.0), __enzyme_autodiff(square as usize, 3.0));\n   }\n}\n```\n```\n./rustc test.rs -Z llvm-plugins=\"./LLVMEnzyme-12.so\" -C passes=\"enzyme\"\n./test\nHello, world 9 6!\n```\n\nI will try to figure out how to simplify the usage and get this into stable in a later iteration,\nbut having this on nightly will already help testing further steps.", "tree": {"sha": "d7f83b23ca8424719e72891d67bf6b3dc5ad8e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f83b23ca8424719e72891d67bf6b3dc5ad8e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1411de9de38e0fed728874580218338160eb185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1411de9de38e0fed728874580218338160eb185", "html_url": "https://github.com/rust-lang/rust/commit/a1411de9de38e0fed728874580218338160eb185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1411de9de38e0fed728874580218338160eb185/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ddb78a34608848a60f6ca5b6ccfde8340302372", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddb78a34608848a60f6ca5b6ccfde8340302372", "html_url": "https://github.com/rust-lang/rust/commit/3ddb78a34608848a60f6ca5b6ccfde8340302372"}, {"sha": "abdd24a0404e2ce7c879297da4aa66cf4e64ab79", "url": "https://api.github.com/repos/rust-lang/rust/commits/abdd24a0404e2ce7c879297da4aa66cf4e64ab79", "html_url": "https://github.com/rust-lang/rust/commit/abdd24a0404e2ce7c879297da4aa66cf4e64ab79"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "cb9c6269b66bbbb37882343ded402d3141665ae3", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1411de9de38e0fed728874580218338160eb185/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1411de9de38e0fed728874580218338160eb185/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=a1411de9de38e0fed728874580218338160eb185", "patch": "@@ -3,13 +3,17 @@ use crate::{llvm, llvm_util};\n use libc::c_int;\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use std::ffi::{CStr, CString};\n+use tracing::debug;\n \n+use std::mem;\n+use std::path::Path;\n use std::ptr;\n use std::slice;\n use std::str;\n@@ -129,6 +133,16 @@ unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMInitializePasses();\n \n+    for plugin in &sess.opts.debugging_opts.llvm_plugins {\n+        let path = Path::new(plugin);\n+        let res = DynamicLibrary::open(path);\n+        match res {\n+            Ok(_) => debug!(\"LLVM plugin loaded succesfully {} ({})\", path.display(), plugin),\n+            Err(e) => bug!(\"couldn't load plugin: {}\", e),\n+        }\n+        mem::forget(res);\n+    }\n+\n     rustc_llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());"}, {"sha": "ebd18630e4e4ca6de3c22d87be94af4b20c73050", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1411de9de38e0fed728874580218338160eb185/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1411de9de38e0fed728874580218338160eb185/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a1411de9de38e0fed728874580218338160eb185", "patch": "@@ -715,6 +715,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(instrument_mcount, true);\n     tracked!(link_only, true);\n+    tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_opt_level, Some(4));"}, {"sha": "e144c8f168e7912b0680e171af297a62c13523b5", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1411de9de38e0fed728874580218338160eb185/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1411de9de38e0fed728874580218338160eb185/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a1411de9de38e0fed728874580218338160eb185", "patch": "@@ -1129,6 +1129,8 @@ options! {\n         \"link native libraries in the linker invocation (default: yes)\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n+    llvm_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n+        \"a list LLVM plugins to enable (space separated)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n         \"generate JSON tracing data file from LLVM data (default: no)\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],"}]}