{"sha": "b75f421ee912edc096c546b1fac19fd8990a180c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NWY0MjFlZTkxMmVkYzA5NmM1NDZiMWZhYzE5ZmQ4OTkwYTE4MGM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-13T22:12:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:03Z"}, "message": "Generalise more cases of explicit iteration of specific kinds", "tree": {"sha": "ac034e25e665d974cfee20b120620c9a03b1cb59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac034e25e665d974cfee20b120620c9a03b1cb59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75f421ee912edc096c546b1fac19fd8990a180c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75f421ee912edc096c546b1fac19fd8990a180c", "html_url": "https://github.com/rust-lang/rust/commit/b75f421ee912edc096c546b1fac19fd8990a180c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75f421ee912edc096c546b1fac19fd8990a180c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6c9463683b5903de5e13c59b48914206754152", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6c9463683b5903de5e13c59b48914206754152", "html_url": "https://github.com/rust-lang/rust/commit/4a6c9463683b5903de5e13c59b48914206754152"}], "stats": {"total": 181, "additions": 110, "deletions": 71}, "files": [{"sha": "c780d1b72f2a0319c0c2b67430232dc574b44ca8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -46,6 +46,7 @@ use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution};\n+use ty::Kind;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -1461,7 +1462,7 @@ impl<'a> LoweringContext<'a> {\n                         assert!(!def_id.is_local());\n                         let item_generics =\n                             self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n-                        let n = item_generics.lifetimes().count();\n+                        let n = item_generics.param_counts()[&Kind::Lifetime];\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n\n                     });"}, {"sha": "06af6d16c3006b9e9832bc3b888abb489f4794c7", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // `['a]` for the first impl trait and `'b` for the\n         // second.\n         let mut least_region = None;\n-        for region_def in abstract_type_generics.lifetimes() {\n+        for region_def in abstract_type_generics.lifetimes_depr() {\n             // Find the index of this region in the list of substitutions.\n             let index = region_def.index as usize;\n "}, {"sha": "26ac9d6ee9ea6798f8cd99d63c62250f018ec84a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -49,6 +49,7 @@\n #![cfg_attr(stage0, feature(dyn_trait))]\n #![feature(from_ref)]\n #![feature(fs_read_write)]\n+#![feature(iterator_find_map)]\n #![cfg_attr(windows, feature(libc))]\n #![cfg_attr(stage0, feature(macro_lifetime_matcher))]\n #![feature(macro_vis_matcher)]"}, {"sha": "b450ef81c9178a408ca0cf0dd0095ef5315e53d4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -1659,7 +1659,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     .entry(def_id)\n                     .or_insert_with(|| {\n                         tcx.generics_of(def_id)\n-                            .types()\n+                            .types_depr()\n                             .map(|def| def.object_lifetime_default)\n                             .collect()\n                     })"}, {"sha": "b7f0e6a32ea15a5b8c3247bd01740bb773cd17ce", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n         }\n \n-        for param in generics.types() {\n+        for param in generics.types_depr() {\n             let name = param.name.to_string();\n             let ty = trait_ref.substs.type_for_def(param);\n             let ty_str = ty.to_string();"}, {"sha": "cb8ff674188c48b8efeef24a35d40889d3bd9591", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -21,7 +21,7 @@ use super::elaborate_predicates;\n \n use hir::def_id::DefId;\n use traits;\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, Kind, TypeFoldable};\n use ty::subst::Substs;\n use ty::util::ExplicitSelf;\n use std::borrow::Cow;\n@@ -284,7 +284,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         // We can't monomorphize things like `fn foo<A>(...)`.\n-        if self.generics_of(method.def_id).types().count() != 0 {\n+        if self.generics_of(method.def_id).param_counts()[&Kind::Type] != 0 {\n             return Some(MethodViolationCode::Generic);\n         }\n "}, {"sha": "cee63e2ecc149a1cb6e4600ee0d2d6997b49df57", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let name = tcx.item_name(trait_ref.def_id);\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n-        let generic_map = generics.types().map(|param| {\n+        let generic_map = generics.types_depr().map(|param| {\n             (param.name.to_string(), trait_ref.substs.type_for_def(param).to_string())\n         }).collect::<FxHashMap<String, String>>();\n "}, {"sha": "eabff9a9124137fd8d4e294911e6f5bcaccdf1bf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -782,6 +782,13 @@ impl GenericParamDef {\n             GenericParamDef::Type(ty)     => ty.index,\n         }\n     }\n+\n+    pub fn get_type(&self) -> Option<TypeParamDef> {\n+        match *self {\n+            GenericParamDef::Type(ty) => Some(ty),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Information about the formal type/lifetime parameters associated\n@@ -828,7 +835,19 @@ impl<'a, 'gcx, 'tcx> Generics {\n         param_counts\n     }\n \n-    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &RegionParamDef> {\n+    pub fn type_params_without_defaults(&self) -> usize {\n+        let mut count = 0;\n+        for param in self.params.iter() {\n+            if let GenericParamDef::Type(ty) = param {\n+                if !ty.has_default {\n+                    count += 1\n+                }\n+            }\n+        }\n+        count\n+    }\n+\n+    pub fn lifetimes_depr(&self) -> impl DoubleEndedIterator<Item = &RegionParamDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParamDef::Lifetime(lt) = p {\n                 Some(lt)\n@@ -838,7 +857,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         })\n     }\n \n-    pub fn types(&self) -> impl DoubleEndedIterator<Item = &TypeParamDef> {\n+    pub fn types_depr(&self) -> impl DoubleEndedIterator<Item = &TypeParamDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParamDef::Type(ty) = p {\n                 Some(ty)\n@@ -849,9 +868,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     }\n \n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        if self.params.iter().any(|p| {\n-            if let GenericParamDef::Type(_) = p { true } else { false }\n-        }) {\n+        if self.params.iter().any(|p| p.get_type().is_some()) {\n             return true;\n         }\n         if let Some(parent_def_id) = self.parent {\n@@ -912,7 +929,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             // And it can be seen that in both cases, to move from a substs\n             // offset to a generics offset you just have to offset by the\n             // number of regions.\n-            let type_param_offset = self.lifetimes().count();\n+            let type_param_offset = self.param_counts()[&Kind::Lifetime];\n \n             let has_self = self.has_self && self.parent.is_none();\n             let is_separated_self = type_param_offset != 0 && idx == 0 && has_self;"}, {"sha": "a9077eb193f38f4a6e31bc2cd613cc4a8e656d4d", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -242,11 +242,10 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n           FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         // Handle Self first, before all regions.\n-        let mut types = defs.types();\n         let mut skip_self = defs.parent.is_none() && defs.has_self;\n         if skip_self {\n-            let def = types.next().unwrap();\n-            let ty = mk_type(def, substs);\n+            let def = defs.params.iter().find_map(|p| p.get_type()).unwrap();\n+            let ty = mk_type(&def, substs);\n             assert_eq!(def.index as usize, substs.len());\n             substs.push(ty.into());\n         }"}, {"sha": "e8edf58a9db394b37bb91ac6ec8e70bb2cd25c90", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -335,10 +335,10 @@ impl PrintContext {\n             }\n \n             if !verbose {\n-                if generics.types().last().map_or(false, |def| def.has_default) {\n+                if generics.types_depr().last().map_or(false, |def| def.has_default) {\n                     if let Some(substs) = tcx.lift(&substs) {\n                         let tps = substs.types().rev().skip(child_types);\n-                        for (def, actual) in generics.types().rev().zip(tps) {\n+                        for (def, actual) in generics.types_depr().rev().zip(tps) {\n                             if !def.has_default {\n                                 break;\n                             }"}, {"sha": "99a7e0abe16796a3c196632f737cf36461414c84", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -1108,7 +1108,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    if tcx.generics_of(method.def_id).types().count() != 0 {\n+                    if tcx.generics_of(method.def_id).param_counts()[&ty::Kind::Type] != 0 {\n                         continue;\n                     }\n "}, {"sha": "58e63fe6b048d468964a678ca76ce94542aab2cf", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n \n use rustc::ty::maps::Providers;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Kind};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n@@ -357,7 +357,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n-    let message = if tcx.generics_of(def_id).types().count() != 0 {\n+    let message = if tcx.generics_of(def_id).param_counts()[&Kind::Type] != 0 {\n         format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n                  type parameters (error E0133)\")\n     } else {"}, {"sha": "56ffadc882a458be708e5fd3955c573d7d9af0f5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -27,7 +27,7 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n-use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n+use rustc::ty::{self, TyCtxt, Ty, TypeFoldable, GenericParamDef};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::maps::Providers;\n use rustc::ty::subst::UnpackedKind;\n@@ -399,9 +399,14 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n \n impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for def in self.ev.tcx.generics_of(self.item_def_id).types() {\n-            if def.has_default {\n-                self.ev.tcx.type_of(def.def_id).visit_with(self);\n+        for def in self.ev.tcx.generics_of(self.item_def_id).params.iter() {\n+            match def {\n+                GenericParamDef::Type(ty) => {\n+                    if ty.has_default {\n+                        self.ev.tcx.type_of(ty.def_id).visit_with(self);\n+                    }\n+                }\n+                GenericParamDef::Lifetime(_) => {}\n             }\n         }\n         self\n@@ -1335,9 +1340,14 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for def in self.tcx.generics_of(self.item_def_id).types() {\n-            if def.has_default {\n-                self.tcx.type_of(def.def_id).visit_with(self);\n+        for def in self.tcx.generics_of(self.item_def_id).params.iter() {\n+            match def {\n+                GenericParamDef::Type(ty) => {\n+                    if ty.has_default {\n+                        self.tcx.type_of(ty.def_id).visit_with(self);\n+                    }\n+                }\n+                GenericParamDef::Lifetime(_) => {}\n             }\n         }\n         self"}, {"sha": "c9c0902940e54069ae76056af4dfd406d56d0e56", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -280,8 +280,12 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     if def.is_phantom_data() {\n         let result = DtorckConstraint {\n             outlives: vec![],\n-            dtorck_types: vec![tcx.mk_param_from_def(&tcx.generics_of(def_id).types().next()\n-                .expect(\"should be at least one type parameter\"))],\n+            dtorck_types: vec![tcx.mk_param_from_def(\n+                &tcx.generics_of(def_id)\n+                    .params\n+                    .iter()\n+                    .find_map(|p| p.get_type())\n+                    .expect(\"should be at least one type parameter\"))],\n             overflows: vec![],\n         };\n         debug!(\"dtorck_constraint: {:?} => {:?}\", def, result);"}, {"sha": "f2627f65702411d3e53a0539551c273755c23c39", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -12,6 +12,7 @@\n //! the guts are broken up into modules; see the comments in those modules.\n \n #![feature(crate_visibility_modifier)]\n+#![feature(iterator_find_map)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "d77a090de682df96376a2b6f3f107729df097047", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -208,8 +208,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // region with the current anon region binding (in other words,\n         // whatever & would get replaced with).\n         let decl_generics = tcx.generics_of(def_id);\n+        let param_counts = decl_generics.param_counts();\n         let num_types_provided = parameters.types.len();\n-        let expected_num_region_params = decl_generics.lifetimes().count();\n+        let expected_num_region_params = param_counts[&ty::Kind::Lifetime];\n         let supplied_num_region_params = parameters.lifetimes.len();\n         if expected_num_region_params != supplied_num_region_params {\n             report_lifetime_number_error(tcx, span,\n@@ -221,10 +222,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         assert_eq!(decl_generics.has_self, self_ty.is_some());\n \n         // Check the number of type parameters supplied by the user.\n-        let ty_param_defs =\n-            decl_generics.types().skip(self_ty.is_some() as usize).collect::<Vec<_>>();\n-        if !infer_types || num_types_provided > ty_param_defs.len() {\n-            check_type_argument_count(tcx, span, num_types_provided, &ty_param_defs);\n+        let type_params_offset = self_ty.is_some() as usize;\n+        let ty_param_defs = param_counts[&ty::Kind::Type] - type_params_offset;\n+        if !infer_types || num_types_provided > ty_param_defs {\n+            check_type_argument_count(tcx,\n+                span,\n+                num_types_provided,\n+                ty_param_defs,\n+                decl_generics.type_params_without_defaults() - type_params_offset);\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n@@ -241,7 +246,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         };\n \n         let substs = Substs::for_item(tcx, def_id, |def, _| {\n-            let i = def.index as usize - self_ty.is_some() as usize;\n+            let i = def.index as usize - type_params_offset;\n             if let Some(lifetime) = parameters.lifetimes.get(i) {\n                 self.ast_region_to_region(lifetime, Some(def))\n             } else {\n@@ -255,7 +260,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 return ty;\n             }\n \n-            let i = i - self_ty.is_some() as usize - decl_generics.lifetimes().count();\n+            let i = i - (param_counts[&ty::Kind::Lifetime] + type_params_offset);\n             if i < num_types_provided {\n                 // A provided type parameter.\n                 self.ast_ty_to_ty(&parameters.types[i])\n@@ -1300,10 +1305,14 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     (auto_traits, trait_bounds)\n }\n \n-fn check_type_argument_count(tcx: TyCtxt, span: Span, supplied: usize,\n-                             ty_param_defs: &[&ty::TypeParamDef]) {\n-    let accepted = ty_param_defs.len();\n-    let required = ty_param_defs.iter().take_while(|x| !x.has_default).count();\n+fn check_type_argument_count(tcx: TyCtxt,\n+                             span: Span,\n+                             supplied: usize,\n+                             ty_param_defs: usize,\n+                             ty_param_defs_without_default: usize)\n+{\n+    let accepted = ty_param_defs;\n+    let required = ty_param_defs_without_default;\n     if supplied < required {\n         let expected = if required < accepted {\n             \"expected at least\""}, {"sha": "59728542bcda043a4636064bf9cfb73272ca36be", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir::{self, ImplItemKind, TraitItemKind};\n use rustc::infer::{self, InferOk};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Kind};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -357,8 +357,8 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n     let span = tcx.sess.codemap().def_span(span);\n-    let trait_params = trait_generics.lifetimes();\n-    let impl_params = impl_generics.lifetimes();\n+    let trait_params = trait_generics.param_counts()[&Kind::Lifetime];\n+    let impl_params = impl_generics.param_counts()[&Kind::Lifetime];\n \n     debug!(\"check_region_bounds_on_impl_method: \\\n             trait_generics={:?} \\\n@@ -377,7 +377,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // but found 0\" it's confusing, because it looks like there\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n-    if trait_params.count() != impl_params.count() {\n+    if trait_params != impl_params {\n         let mut err = struct_span_err!(tcx.sess,\n                                        span,\n                                        E0195,\n@@ -574,8 +574,8 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         -> Result<(), ErrorReported> {\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    let num_impl_m_type_params = impl_m_generics.types().count();\n-    let num_trait_m_type_params = trait_m_generics.types().count();\n+    let num_impl_m_type_params = impl_m_generics.param_counts()[&Kind::Type];\n+    let num_trait_m_type_params = trait_m_generics.param_counts()[&Kind::Type];\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n         let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);\n@@ -728,7 +728,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut error_found = false;\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    for (impl_ty, trait_ty) in impl_m_generics.types().zip(trait_m_generics.types()) {\n+    for (impl_ty, trait_ty) in impl_m_generics.types_depr().zip(trait_m_generics.types_depr()) {\n         if impl_ty.synthetic != trait_ty.synthetic {\n             let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n             let impl_span = tcx.hir.span(impl_node_id);"}, {"sha": "e3d7e16e15c9776b4db55f15b29619137f4a6b13", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -13,7 +13,7 @@\n \n use intrinsics;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n-use rustc::ty::{self, TyCtxt, Ty};\n+use rustc::ty::{self, TyCtxt, Ty, Kind};\n use rustc::util::nodemap::FxHashMap;\n use require_same_types;\n \n@@ -45,7 +45,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let i_n_tps = tcx.generics_of(def_id).types().count();\n+    let i_n_tps = tcx.generics_of(def_id).param_counts()[&Kind::Type];\n     if i_n_tps != n_tps {\n         let span = match it.node {\n             hir::ForeignItemFn(_, _, ref generics) => generics.span,\n@@ -346,7 +346,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let def_id = tcx.hir.local_def_id(it.id);\n-    let i_n_tps = tcx.generics_of(def_id).types().count();\n+    let i_n_tps = tcx.generics_of(def_id).param_counts()[&Kind::Type];\n     let name = it.name.as_str();\n \n     let (n_tps, inputs, output) = match &*name {"}, {"sha": "038927bbac647cb352864a7a11d7c47e20066fe6", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -15,7 +15,7 @@ use check::{FnCtxt, PlaceOp, callee, Needs};\n use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Kind};\n use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -332,7 +332,9 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                 parent_substs.type_at(i)\n             } else if let Some(ast_ty)\n                 = provided.as_ref().and_then(|p| {\n-                    p.types.get(i - parent_substs.len() - method_generics.lifetimes().count())\n+                    let idx =\n+                        i - parent_substs.len() - method_generics.param_counts()[&Kind::Lifetime];\n+                    p.types.get(idx)\n                 })\n             {\n                 self.to_ty(ast_ty)"}, {"sha": "6ed31a237ff5f38cbce95891b02331ee573bea42", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -96,7 +96,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n-use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate, GenericParamDef};\n+use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::maps::Providers;\n@@ -4923,16 +4923,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             segment.map_or((0, 0, 0), |(_, generics)| {\n                 let params_count = generics.param_counts();\n \n-                let offset_type_params = generics.parent.is_none() && generics.has_self;\n-                let type_params = params_count[&ty::Kind::Type] - offset_type_params as usize;\n+                let type_params_offset\n+                    = (generics.parent.is_none() && generics.has_self) as usize;\n+                let type_params = params_count[&ty::Kind::Type] - type_params_offset;\n                 let type_params_barring_defaults =\n-                    type_params - generics.params.iter().filter(|param| {\n-                        if let GenericParamDef::Type(ty) = param {\n-                            ty.has_default\n-                        } else {\n-                            false\n-                        }\n-                    }).count();\n+                    generics.type_params_without_defaults() - type_params_offset;\n \n                 (type_params_barring_defaults, type_params, params_count[&ty::Kind::Lifetime])\n             });"}, {"sha": "804fed10105469465f6093c1802dc37cc8fbc509", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -377,7 +377,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     // For example this forbids the declaration:\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n-    for d in generics.types().cloned().filter(is_our_default).map(|p| p.def_id) {\n+    for d in generics.types_depr().cloned().filter(is_our_default).map(|p| p.def_id) {\n         let ty = fcx.tcx.type_of(d);\n         // ignore dependent defaults -- that is, where the default of one type\n         // parameter includes another (e.g., <T, U = T>). In those cases, we can't"}, {"sha": "e0786ea8b3c6fff62ea681bbefed16a5538b1adb", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -105,7 +105,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx, &impl_predicates.predicates.as_slice(), impl_trait_ref, &mut input_parameters);\n \n     // Disallow ANY unconstrained type parameters.\n-    for (ty_param, param) in impl_generics.types().zip(impl_hir_generics.ty_params()) {\n+    for (ty_param, param) in impl_generics.types_depr().zip(impl_hir_generics.ty_params()) {\n         let param_ty = ty::ParamTy::for_def(ty_param);\n         if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n             report_unused_parameter(tcx, param.span, \"type\", &param_ty.to_string());\n@@ -122,13 +122,13 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         .flat_map(|def_id| {\n             ctp::parameters_for(&tcx.type_of(def_id), true)\n         }).collect();\n-    for (ty_lifetime, lifetime) in impl_generics.lifetimes().zip(impl_hir_generics.lifetimes()) {\n-        let param = ctp::Parameter::from(ty_lifetime.to_early_bound_region_data());\n+    for (ty_lt, lt) in impl_generics.lifetimes_depr().zip(impl_hir_generics.lifetimes()) {\n+        let param = ctp::Parameter::from(ty_lt.to_early_bound_region_data());\n \n         if lifetimes_in_associated_types.contains(&param) && // (*)\n             !input_parameters.contains(&param) {\n-            report_unused_parameter(tcx, lifetime.lifetime.span,\n-                                    \"lifetime\", &lifetime.lifetime.name.name().to_string());\n+            report_unused_parameter(tcx, lt.lifetime.span,\n+                                    \"lifetime\", &lt.lifetime.name.name().to_string());\n         }\n     }\n "}, {"sha": "7f6da5414c63757ad1417184f91ffaf14d0cd4ae", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75f421ee912edc096c546b1fac19fd8990a180c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b75f421ee912edc096c546b1fac19fd8990a180c", "patch": "@@ -1800,7 +1800,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens.types().filter_map(|tp| {\n+        let stripped_typarams = gens.types_depr().filter_map(|tp| {\n             if tp.name == keywords::SelfType.name().as_str() {\n                 assert_eq!(tp.index, 0);\n                 None\n@@ -1849,7 +1849,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            params: gens.lifetimes()\n+            params: gens.lifetimes_depr()\n                         .into_iter()\n                         .map(|lp| GenericParamDef::Lifetime(lp.clean(cx)))\n                         .chain("}]}