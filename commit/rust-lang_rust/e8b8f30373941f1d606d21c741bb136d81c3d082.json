{"sha": "e8b8f30373941f1d606d21c741bb136d81c3d082", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YjhmMzAzNzM5NDFmMWQ2MDZkMjFjNzQxYmIxMzZkODFjM2QwODI=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-27T19:54:15Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-29T13:37:18Z"}, "message": "Code review fixes", "tree": {"sha": "2b4fd47c8e9032f7a3c7367bdf0f9c42ffe28a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4fd47c8e9032f7a3c7367bdf0f9c42ffe28a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8b8f30373941f1d606d21c741bb136d81c3d082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b8f30373941f1d606d21c741bb136d81c3d082", "html_url": "https://github.com/rust-lang/rust/commit/e8b8f30373941f1d606d21c741bb136d81c3d082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8b8f30373941f1d606d21c741bb136d81c3d082/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95409016f8e84a47715526a89929cd22a2f25c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/95409016f8e84a47715526a89929cd22a2f25c16", "html_url": "https://github.com/rust-lang/rust/commit/95409016f8e84a47715526a89929cd22a2f25c16"}], "stats": {"total": 87, "additions": 34, "deletions": 53}, "files": [{"sha": "82bbb4a1bf5159db048cf4d43fc2af7309ed3fc6", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8b8f30373941f1d606d21c741bb136d81c3d082/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b8f30373941f1d606d21c741bb136d81c3d082/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e8b8f30373941f1d606d21c741bb136d81c3d082", "patch": "@@ -76,7 +76,6 @@ mod note;\n \n mod need_type_info;\n mod named_anon_conflict;\n-mod util;\n \n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "cdfb57c86f940344c77af2c96e9fa87bd5c152ee", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e8b8f30373941f1d606d21c741bb136d81c3d082/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b8f30373941f1d606d21c741bb136d81c3d082/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=e8b8f30373941f1d606d21c741bb136d81c3d082", "patch": "@@ -41,12 +41,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let id = free_region.scope;\n                 let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                 let body_id = self.tcx.hir.maybe_body_owned_by(node_id).unwrap();\n-                let mut is_first = false;\n                 let body = self.tcx.hir.body(body_id);\n                 if let Some(tables) = self.in_progress_tables {\n                     body.arguments\n                         .iter()\n-                        .filter_map(|arg| {\n+                        .enumerate()\n+                        .filter_map(|(index, arg)| {\n                             let ty = tables.borrow().node_id_to_type(arg.id);\n                             let mut found_anon_region = false;\n                             let new_arg_ty = self.tcx\n@@ -57,9 +57,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     r\n                                 });\n                             if found_anon_region {\n-                                if body.arguments.iter().nth(0) == Some(&arg) {\n-                                    is_first = true;\n-                                }\n+                                let is_first = index == 0;\n                                 Some((arg, new_arg_ty, free_region.bound_region, is_first))\n                             } else {\n                                 None\n@@ -91,19 +89,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // only introduced anonymous regions in parameters) as well as a\n         // version new_ty of its type where the anonymous region is replaced\n         // with the named one.\n-        let (named, (arg, new_ty, br, is_first), scope_def_id) = if\n-            self.is_named_region(sub) && self.is_suitable_anonymous_region(sup).is_some() {\n-            (sub,\n-             self.find_arg_with_anonymous_region(sup, sub).unwrap(),\n-             self.is_suitable_anonymous_region(sup).unwrap())\n-        } else if\n-            self.is_named_region(sup) && self.is_suitable_anonymous_region(sub).is_some() {\n-            (sup,\n-             self.find_arg_with_anonymous_region(sub, sup).unwrap(),\n-             self.is_suitable_anonymous_region(sub).unwrap())\n-        } else {\n-            return false; // inapplicable\n-        };\n+        let (named, (arg, new_ty, br, is_first), scope_def_id) =\n+            if sub.is_named_region() && self.is_suitable_anonymous_region(sup).is_some() {\n+                (sub,\n+                 self.find_arg_with_anonymous_region(sup, sub).unwrap(),\n+                 self.is_suitable_anonymous_region(sup).unwrap())\n+            } else if sup.is_named_region() && self.is_suitable_anonymous_region(sub).is_some() {\n+                (sup,\n+                 self.find_arg_with_anonymous_region(sub, sup).unwrap(),\n+                 self.is_suitable_anonymous_region(sub).unwrap())\n+            } else {\n+                return false; // inapplicable\n+            };\n \n         // Here, we check for the case where the anonymous region\n         // is in the return type.\n@@ -179,8 +176,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 // proceed ahead //\n                             }\n                             Some(hir_map::NodeImplItem(..)) => {\n-                                if self.tcx.impl_trait_ref(self.tcx.\n-associated_item(anonymous_region_binding_scope).container.id()).is_some() {\n+                                let container_id = self.tcx\n+                                    .associated_item(anonymous_region_binding_scope)\n+                                    .container\n+                                    .id();\n+                                if self.tcx.impl_trait_ref(container_id).is_some() {\n                                     // For now, we do not try to target impls of traits. This is\n                                     // because this message is going to suggest that the user\n                                     // change the fn signature, but they may not be free to do so,\n@@ -189,8 +189,6 @@ associated_item(anonymous_region_binding_scope).container.id()).is_some() {\n                                     // FIXME(#42706) -- in some cases, we could do better here.\n                                     return None;\n                                 }\n-                              else{  }\n-\n                             }\n                             _ => return None, // inapplicable\n                             // we target only top-level functions"}, {"sha": "66c351b49ac68467d7c9c37b817d886a47430ec7", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/95409016f8e84a47715526a89929cd22a2f25c16/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95409016f8e84a47715526a89929cd22a2f25c16/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=95409016f8e84a47715526a89929cd22a2f25c16", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Helper for error reporting code for named_anon_conflict\n-\n-use ty::{self, Region};\n-use infer::InferCtxt;\n-\n-impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    // This method returns whether the given Region is Named\n-    pub fn is_named_region(&self, region: Region<'tcx>) -> bool {\n-\n-        match *region {\n-            ty::ReFree(ref free_region) => {\n-                match free_region.bound_region {\n-                    ty::BrNamed(..) => true,\n-                    _ => false,\n-                }\n-            }\n-            _ => false,\n-        }\n-    }\n-}"}, {"sha": "452775e9e13379f45c0c74ffbfde85ad42b2ba51", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8b8f30373941f1d606d21c741bb136d81c3d082/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b8f30373941f1d606d21c741bb136d81c3d082/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e8b8f30373941f1d606d21c741bb136d81c3d082", "patch": "@@ -990,6 +990,20 @@ impl RegionKind {\n \n         flags\n     }\n+\n+    // This method returns whether the given Region is Named\n+    pub fn is_named_region(&self) -> bool {\n+\n+        match *self {\n+            ty::ReFree(ref free_region) => {\n+                match free_region.bound_region {\n+                    ty::BrNamed(..) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n /// Type utilities"}]}