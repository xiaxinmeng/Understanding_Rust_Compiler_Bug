{"sha": "a81fdf0a5a0bd70970ad66c1e9e99af823e74260", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MWZkZjBhNWEwYmQ3MDk3MGFkNjZjMWU5ZTk5YWY4MjNlNzQyNjA=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-10-28T07:53:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T18:12:10Z"}, "message": "rustc: Lift output file name handling out of main", "tree": {"sha": "22aa283c94b6fc67e4848b5d5c9e8b6bd181a5df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22aa283c94b6fc67e4848b5d5c9e8b6bd181a5df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a81fdf0a5a0bd70970ad66c1e9e99af823e74260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a81fdf0a5a0bd70970ad66c1e9e99af823e74260", "html_url": "https://github.com/rust-lang/rust/commit/a81fdf0a5a0bd70970ad66c1e9e99af823e74260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a81fdf0a5a0bd70970ad66c1e9e99af823e74260/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb9a54c7395db507b1e168817cd0af51d19d432", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb9a54c7395db507b1e168817cd0af51d19d432", "html_url": "https://github.com/rust-lang/rust/commit/7bb9a54c7395db507b1e168817cd0af51d19d432"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "79e973031729954f91f95198aa571d41afd80fb0", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 53, "deletions": 40, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a81fdf0a5a0bd70970ad66c1e9e99af823e74260/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81fdf0a5a0bd70970ad66c1e9e99af823e74260/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=a81fdf0a5a0bd70970ad66c1e9e99af823e74260", "patch": "@@ -438,6 +438,53 @@ fn opts() -> [getopts::opt] {\n          optflag(\"stack-growth\"), optflag(\"check-unsafe\")];\n }\n \n+fn build_output_filenames(ifile: str, ofile: option::t<str>,\n+                          sopts: @session::options)\n+        -> @{out_filename: str, obj_filename:str} {\n+    let obj_filename = \"\";\n+    let saved_out_filename: str = \"\";\n+    let stop_after_codegen =\n+        sopts.output_type != link::output_type_exe ||\n+            sopts.static && sopts.library;\n+    alt ofile {\n+      none. {\n+        // \"-\" as input file will cause the parser to read from stdin so we\n+        // have to make up a name\n+        // We want to toss everything after the final '.'\n+        let parts =\n+            if !input_is_stdin(ifile) {\n+                str::split(ifile, '.' as u8)\n+            } else { [\"default\", \"rs\"] };\n+        vec::pop(parts);\n+        let base_filename = str::connect(parts, \".\");\n+        let suffix =\n+            alt sopts.output_type {\n+              link::output_type_none. { \"none\" }\n+              link::output_type_bitcode. { \"bc\" }\n+              link::output_type_assembly. { \"s\" }\n+              // Object and exe output both use the '.o' extension here\n+              link::output_type_object. | link::output_type_exe. {\n+                \"o\"\n+              }\n+            };\n+        obj_filename = base_filename + \".\" + suffix;\n+\n+        if sopts.library {\n+            saved_out_filename = std::os::dylib_filename(base_filename);\n+        } else {\n+            saved_out_filename = base_filename;\n+        }\n+      }\n+      some(out_file) {\n+        // FIXME: what about windows? This will create a foo.exe.o.\n+        saved_out_filename = out_file;\n+        obj_filename =\n+            if stop_after_codegen { out_file } else { out_file + \".o\" };\n+      }\n+    }\n+    ret @{out_filename: saved_out_filename, obj_filename: obj_filename};\n+}\n+\n fn main(args: [str]) {\n     let binary = vec::shift(args);\n     let match =\n@@ -459,14 +506,14 @@ fn main(args: [str]) {\n     let sopts = build_session_options(match);\n     let sess = build_session(sopts);\n     let n_inputs = vec::len::<str>(match.free);\n-    let output_file = getopts::opt_maybe_str(match, \"o\");\n+    let ofile = getopts::opt_maybe_str(match, \"o\");\n+    let ifile = match.free[0];\n+    let outputs = build_output_filenames(ifile, ofile, sopts);\n     if n_inputs == 0u {\n         sess.fatal(\"No input filename given.\");\n     } else if n_inputs > 1u {\n         sess.fatal(\"Multiple input filenames provided.\");\n     }\n-    let ifile = match.free[0];\n-    let saved_out_filename: str = \"\";\n     let cfg = build_configuration(sess, binary, ifile);\n     let pretty =\n         option::map::<str,\n@@ -484,47 +531,13 @@ fn main(args: [str]) {\n         sopts.output_type != link::output_type_exe ||\n             sopts.static && sopts.library;\n \n-    let ofile = \"\";\n-    alt output_file {\n-      none. {\n-        // \"-\" as input file will cause the parser to read from stdin so we\n-        // have to make up a name\n-        // We want to toss everything after the final '.'\n-        let parts =\n-            if !input_is_stdin(ifile) {\n-                str::split(ifile, '.' as u8)\n-            } else { [\"default\", \"rs\"] };\n-        vec::pop(parts);\n-        let base_filename = str::connect(parts, \".\");\n-        let suffix =\n-            alt sopts.output_type {\n-              link::output_type_none. { \"none\" }\n-              link::output_type_bitcode. { \"bc\" }\n-              link::output_type_assembly. { \"s\" }\n-              // Object and exe output both use the '.o' extension here\n-              link::output_type_object. | link::output_type_exe. {\n-                \"o\"\n-              }\n-            };\n-        ofile = base_filename + \".\" + suffix;\n+    let temp_filename = outputs.obj_filename;\n \n-        if sopts.library {\n-            saved_out_filename = std::os::dylib_filename(base_filename);\n-        } else {\n-            saved_out_filename = base_filename;\n-        }\n-      }\n-      some(out_file) {\n-        saved_out_filename = out_file;\n-        ofile =\n-            if !stop_after_codegen { out_file + \".o\" } else { out_file };\n-      }\n-    }\n+    compile_input(sess, cfg, ifile, temp_filename);\n \n-    compile_input(sess, cfg, ifile, ofile);\n     if stop_after_codegen { ret; }\n \n-    link::link_binary(sess, ofile, saved_out_filename);\n+    link::link_binary(sess, temp_filename, outputs.out_filename);\n }\n \n #[cfg(test)]"}]}