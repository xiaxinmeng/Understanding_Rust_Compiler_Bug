{"sha": "ed40b95925ddbe3596eebbca64f776f0f7c57d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNDBiOTU5MjVkZGJlMzU5NmVlYmJjYTY0Zjc3NmYwZjdjNTdkOTU=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2021-02-12T08:50:45Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2021-02-12T08:50:45Z"}, "message": "spell out nested self type", "tree": {"sha": "b59877b3d7c56474fd30a66e29744cc5279a21b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59877b3d7c56474fd30a66e29744cc5279a21b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed40b95925ddbe3596eebbca64f776f0f7c57d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed40b95925ddbe3596eebbca64f776f0f7c57d95", "html_url": "https://github.com/rust-lang/rust/commit/ed40b95925ddbe3596eebbca64f776f0f7c57d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed40b95925ddbe3596eebbca64f776f0f7c57d95/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05704ec79aa729044aef70449d6661b658f0e37e", "url": "https://api.github.com/repos/rust-lang/rust/commits/05704ec79aa729044aef70449d6661b658f0e37e", "html_url": "https://github.com/rust-lang/rust/commit/05704ec79aa729044aef70449d6661b658f0e37e"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "990d19914381dd6c345e7ddc05fe935d2584c3fb", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ed40b95925ddbe3596eebbca64f776f0f7c57d95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed40b95925ddbe3596eebbca64f776f0f7c57d95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ed40b95925ddbe3596eebbca64f776f0f7c57d95", "patch": "@@ -7,6 +7,7 @@ use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ItemKind, Node};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -557,6 +558,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         );\n \n         if let Some(ty) = prohibit_opaque.break_value() {\n+            let mut visitor = SelfTySpanVisitor { tcx, selfty_spans: vec![] };\n+            visitor.visit_item(&item);\n             let is_async = match item.kind {\n                 ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n                     matches!(origin, hir::OpaqueTyOrigin::AsyncFn)\n@@ -573,15 +576,13 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 if is_async { \"async fn\" } else { \"impl Trait\" },\n             );\n \n-            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n-                if snippet == \"Self\" {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider spelling out the type instead\",\n-                        format!(\"{:?}\", ty),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+            for span in visitor.selfty_spans {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider spelling out the type instead\",\n+                    format!(\"{:?}\", ty),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n             err.emit();\n         }\n@@ -1590,3 +1591,31 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n     }\n     err.emit();\n }\n+\n+struct SelfTySpanVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    selfty_spans: Vec<Span>,\n+}\n+\n+impl Visitor<'tcx> for SelfTySpanVisitor<'tcx> {\n+    type Map = rustc_middle::hir::map::Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+        hir::intravisit::NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+    }\n+\n+    fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n+        match arg.kind {\n+            hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n+                [segment]\n+                    if segment.res.map(|res| matches!(res, Res::SelfTy(_, _))).unwrap_or(false) =>\n+                {\n+                    self.selfty_spans.push(path.span);\n+                }\n+                _ => {}\n+            },\n+            _ => {}\n+        }\n+        hir::intravisit::walk_ty(self, arg);\n+    }\n+}"}, {"sha": "8e3dc0406fafc52973dcd293fc657ad0d757acd4", "filename": "src/test/ui/async-await/issues/issue-78600.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed40b95925ddbe3596eebbca64f776f0f7c57d95/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed40b95925ddbe3596eebbca64f776f0f7c57d95/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr?ref=ed40b95925ddbe3596eebbca64f776f0f7c57d95", "patch": "@@ -0,0 +1,11 @@\n+error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-78600.rs:6:33\n+   |\n+LL |     async fn new(i: &'a i32) -> Result<Self, ()> {\n+   |                                 ^^^^^^^----^^^^^\n+   |                                        |\n+   |                                        help: consider spelling out the type instead: `std::result::Result<S<'a>, ()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0760`."}]}