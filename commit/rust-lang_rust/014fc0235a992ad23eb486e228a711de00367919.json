{"sha": "014fc0235a992ad23eb486e228a711de00367919", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNGZjMDIzNWE5OTJhZDIzZWI0ODZlMjI4YTcxMWRlMDAzNjc5MTk=", "commit": {"author": {"name": "nxnfufunezn", "email": "nxnfufunezn@gmail.com", "date": "2016-01-21T18:44:36Z"}, "committer": {"name": "nxnfufunezn", "email": "nxnfufunezn@gmail.com", "date": "2016-01-25T16:06:06Z"}, "message": "Fix pretty_printer to print omitted type `_` marker", "tree": {"sha": "7975c5e18879f28582a339ea335c1c46796520f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7975c5e18879f28582a339ea335c1c46796520f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014fc0235a992ad23eb486e228a711de00367919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014fc0235a992ad23eb486e228a711de00367919", "html_url": "https://github.com/rust-lang/rust/commit/014fc0235a992ad23eb486e228a711de00367919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014fc0235a992ad23eb486e228a711de00367919/comments", "author": {"login": "nxnfufunezn", "id": 9052031, "node_id": "MDQ6VXNlcjkwNTIwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9052031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nxnfufunezn", "html_url": "https://github.com/nxnfufunezn", "followers_url": "https://api.github.com/users/nxnfufunezn/followers", "following_url": "https://api.github.com/users/nxnfufunezn/following{/other_user}", "gists_url": "https://api.github.com/users/nxnfufunezn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nxnfufunezn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nxnfufunezn/subscriptions", "organizations_url": "https://api.github.com/users/nxnfufunezn/orgs", "repos_url": "https://api.github.com/users/nxnfufunezn/repos", "events_url": "https://api.github.com/users/nxnfufunezn/events{/privacy}", "received_events_url": "https://api.github.com/users/nxnfufunezn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nxnfufunezn", "id": 9052031, "node_id": "MDQ6VXNlcjkwNTIwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9052031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nxnfufunezn", "html_url": "https://github.com/nxnfufunezn", "followers_url": "https://api.github.com/users/nxnfufunezn/followers", "following_url": "https://api.github.com/users/nxnfufunezn/following{/other_user}", "gists_url": "https://api.github.com/users/nxnfufunezn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nxnfufunezn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nxnfufunezn/subscriptions", "organizations_url": "https://api.github.com/users/nxnfufunezn/orgs", "repos_url": "https://api.github.com/users/nxnfufunezn/repos", "events_url": "https://api.github.com/users/nxnfufunezn/events{/privacy}", "received_events_url": "https://api.github.com/users/nxnfufunezn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22cb5359fd2c9703e1c0db3a179b79c7cdb42cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22cb5359fd2c9703e1c0db3a179b79c7cdb42cd", "html_url": "https://github.com/rust-lang/rust/commit/c22cb5359fd2c9703e1c0db3a179b79c7cdb42cd"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "dd39d3b63c4f9b8b00e8770aac99a462e80328b2", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/014fc0235a992ad23eb486e228a711de00367919/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014fc0235a992ad23eb486e228a711de00367919/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=014fc0235a992ad23eb486e228a711de00367919", "patch": "@@ -319,7 +319,7 @@ pub fn variant_to_string(var: &hir::Variant) -> String {\n }\n \n pub fn arg_to_string(arg: &hir::Arg) -> String {\n-    to_string(|s| s.print_arg(arg))\n+    to_string(|s| s.print_arg(arg, false))\n }\n \n pub fn visibility_qualified(vis: hir::Visibility, s: &str) -> String {\n@@ -1935,7 +1935,8 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_args(&mut self,\n                          decl: &hir::FnDecl,\n-                         opt_explicit_self: Option<&hir::ExplicitSelf_>)\n+                         opt_explicit_self: Option<&hir::ExplicitSelf_>,\n+                         is_closure: bool)\n                          -> io::Result<()> {\n         // It is unfortunate to duplicate the commasep logic, but we want the\n         // self type and the args all in the same box.\n@@ -1965,7 +1966,7 @@ impl<'a> State<'a> {\n             } else {\n                 try!(self.word_space(\",\"));\n             }\n-            try!(self.print_arg(arg));\n+            try!(self.print_arg(arg, is_closure));\n         }\n \n         self.end()\n@@ -1976,7 +1977,7 @@ impl<'a> State<'a> {\n                                  opt_explicit_self: Option<&hir::ExplicitSelf_>)\n                                  -> io::Result<()> {\n         try!(self.popen());\n-        try!(self.print_fn_args(decl, opt_explicit_self));\n+        try!(self.print_fn_args(decl, opt_explicit_self, false));\n         if decl.variadic {\n             try!(word(&mut self.s, \", ...\"));\n         }\n@@ -1987,7 +1988,7 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_block_args(&mut self, decl: &hir::FnDecl) -> io::Result<()> {\n         try!(word(&mut self.s, \"|\"));\n-        try!(self.print_fn_args(decl, None));\n+        try!(self.print_fn_args(decl, None, true));\n         try!(word(&mut self.s, \"|\"));\n \n         if let hir::DefaultReturn(..) = decl.output {\n@@ -2204,10 +2205,10 @@ impl<'a> State<'a> {\n         self.print_type(&*mt.ty)\n     }\n \n-    pub fn print_arg(&mut self, input: &hir::Arg) -> io::Result<()> {\n+    pub fn print_arg(&mut self, input: &hir::Arg, is_closure: bool) -> io::Result<()> {\n         try!(self.ibox(indent_unit));\n         match input.ty.node {\n-            hir::TyInfer => try!(self.print_pat(&*input.pat)),\n+            hir::TyInfer if is_closure => try!(self.print_pat(&*input.pat)),\n             _ => {\n                 match input.pat.node {\n                     hir::PatIdent(_, ref path1, _) if"}, {"sha": "fe54651590fa72755d50e675a180d71edd9148ab", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/014fc0235a992ad23eb486e228a711de00367919/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014fc0235a992ad23eb486e228a711de00367919/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=014fc0235a992ad23eb486e228a711de00367919", "patch": "@@ -425,7 +425,7 @@ pub fn variant_to_string(var: &ast::Variant) -> String {\n }\n \n pub fn arg_to_string(arg: &ast::Arg) -> String {\n-    to_string(|s| s.print_arg(arg))\n+    to_string(|s| s.print_arg(arg, false))\n }\n \n pub fn mac_to_string(arg: &ast::Mac) -> String {\n@@ -2672,8 +2672,8 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_args(&mut self, decl: &ast::FnDecl,\n-                         opt_explicit_self: Option<&ast::ExplicitSelf_>)\n-        -> io::Result<()> {\n+                         opt_explicit_self: Option<&ast::ExplicitSelf_>,\n+                         is_closure: bool) -> io::Result<()> {\n         // It is unfortunate to duplicate the commasep logic, but we want the\n         // self type and the args all in the same box.\n         try!(self.rbox(0, Inconsistent));\n@@ -2698,7 +2698,7 @@ impl<'a> State<'a> {\n \n         for arg in args {\n             if first { first = false; } else { try!(self.word_space(\",\")); }\n-            try!(self.print_arg(arg));\n+            try!(self.print_arg(arg, is_closure));\n         }\n \n         self.end()\n@@ -2708,7 +2708,7 @@ impl<'a> State<'a> {\n                                  opt_explicit_self: Option<&ast::ExplicitSelf_>)\n         -> io::Result<()> {\n         try!(self.popen());\n-        try!(self.print_fn_args(decl, opt_explicit_self));\n+        try!(self.print_fn_args(decl, opt_explicit_self, false));\n         if decl.variadic {\n             try!(word(&mut self.s, \", ...\"));\n         }\n@@ -2722,7 +2722,7 @@ impl<'a> State<'a> {\n             decl: &ast::FnDecl)\n             -> io::Result<()> {\n         try!(word(&mut self.s, \"|\"));\n-        try!(self.print_fn_args(decl, None));\n+        try!(self.print_fn_args(decl, None, true));\n         try!(word(&mut self.s, \"|\"));\n \n         if let ast::DefaultReturn(..) = decl.output {\n@@ -2967,10 +2967,10 @@ impl<'a> State<'a> {\n         self.print_type(&*mt.ty)\n     }\n \n-    pub fn print_arg(&mut self, input: &ast::Arg) -> io::Result<()> {\n+    pub fn print_arg(&mut self, input: &ast::Arg, is_closure: bool) -> io::Result<()> {\n         try!(self.ibox(INDENT_UNIT));\n         match input.ty.node {\n-            ast::TyInfer => try!(self.print_pat(&*input.pat)),\n+            ast::TyInfer if is_closure => try!(self.print_pat(&*input.pat)),\n             _ => {\n                 match input.pat.node {\n                     ast::PatIdent(_, ref path1, _) if"}, {"sha": "872923f8caf93007bec603f1707f23b9926cc7b2", "filename": "src/test/pretty/issue-31073.pp", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/014fc0235a992ad23eb486e228a711de00367919/src%2Ftest%2Fpretty%2Fissue-31073.pp", "raw_url": "https://github.com/rust-lang/rust/raw/014fc0235a992ad23eb486e228a711de00367919/src%2Ftest%2Fpretty%2Fissue-31073.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-31073.pp?ref=014fc0235a992ad23eb486e228a711de00367919", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact:issue-31073.pp\n+\n+fn main() {\n+    fn f1(x: i32, y: i32) -> i32 { y }\n+    let f: fn(_, i32) -> i32 = f1;\n+    f(1, 2);\n+}"}, {"sha": "872923f8caf93007bec603f1707f23b9926cc7b2", "filename": "src/test/pretty/issue-31073.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/014fc0235a992ad23eb486e228a711de00367919/src%2Ftest%2Fpretty%2Fissue-31073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014fc0235a992ad23eb486e228a711de00367919/src%2Ftest%2Fpretty%2Fissue-31073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-31073.rs?ref=014fc0235a992ad23eb486e228a711de00367919", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact:issue-31073.pp\n+\n+fn main() {\n+    fn f1(x: i32, y: i32) -> i32 { y }\n+    let f: fn(_, i32) -> i32 = f1;\n+    f(1, 2);\n+}"}]}