{"sha": "249eb1c589bd12b2a26d9603460d62d514b59b90", "node_id": "C_kwDOAAsO6NoAKDI0OWViMWM1ODliZDEyYjJhMjZkOTYwMzQ2MGQ2MmQ1MTRiNTliOTA", "commit": {"author": {"name": "Veeupup", "email": "931418134@qq.com", "date": "2021-12-29T10:01:17Z"}, "committer": {"name": "Veeupup", "email": "931418134@qq.com", "date": "2021-12-29T10:01:17Z"}, "message": "fix typo in btree/vec doc: Self -> self", "tree": {"sha": "05dd96afdde41a98a838ac3d9292f938089100f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05dd96afdde41a98a838ac3d9292f938089100f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/249eb1c589bd12b2a26d9603460d62d514b59b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/249eb1c589bd12b2a26d9603460d62d514b59b90", "html_url": "https://github.com/rust-lang/rust/commit/249eb1c589bd12b2a26d9603460d62d514b59b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/249eb1c589bd12b2a26d9603460d62d514b59b90/comments", "author": {"login": "Veeupup", "id": 26339429, "node_id": "MDQ6VXNlcjI2MzM5NDI5", "avatar_url": "https://avatars.githubusercontent.com/u/26339429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veeupup", "html_url": "https://github.com/Veeupup", "followers_url": "https://api.github.com/users/Veeupup/followers", "following_url": "https://api.github.com/users/Veeupup/following{/other_user}", "gists_url": "https://api.github.com/users/Veeupup/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veeupup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veeupup/subscriptions", "organizations_url": "https://api.github.com/users/Veeupup/orgs", "repos_url": "https://api.github.com/users/Veeupup/repos", "events_url": "https://api.github.com/users/Veeupup/events{/privacy}", "received_events_url": "https://api.github.com/users/Veeupup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veeupup", "id": 26339429, "node_id": "MDQ6VXNlcjI2MzM5NDI5", "avatar_url": "https://avatars.githubusercontent.com/u/26339429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veeupup", "html_url": "https://github.com/Veeupup", "followers_url": "https://api.github.com/users/Veeupup/followers", "following_url": "https://api.github.com/users/Veeupup/following{/other_user}", "gists_url": "https://api.github.com/users/Veeupup/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veeupup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veeupup/subscriptions", "organizations_url": "https://api.github.com/users/Veeupup/orgs", "repos_url": "https://api.github.com/users/Veeupup/repos", "events_url": "https://api.github.com/users/Veeupup/events{/privacy}", "received_events_url": "https://api.github.com/users/Veeupup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70cc6422c141191aeb33f5ab6faba992118812b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70cc6422c141191aeb33f5ab6faba992118812b", "html_url": "https://github.com/rust-lang/rust/commit/b70cc6422c141191aeb33f5ab6faba992118812b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1497d1a84ef77c0eae7483cf5ec86726d2e0bd84", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/249eb1c589bd12b2a26d9603460d62d514b59b90/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249eb1c589bd12b2a26d9603460d62d514b59b90/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=249eb1c589bd12b2a26d9603460d62d514b59b90", "patch": "@@ -979,7 +979,7 @@ impl<K, V> BTreeMap<K, V> {\n         self.drain_filter(|k, v| !f(k, v));\n     }\n \n-    /// Moves all elements from `other` into `Self`, leaving `other` empty.\n+    /// Moves all elements from `other` into `self`, leaving `other` empty.\n     ///\n     /// # Examples\n     ///"}, {"sha": "f6aca05f25f16f1f75a3a3066ec068c6d8cd2b77", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/249eb1c589bd12b2a26d9603460d62d514b59b90/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249eb1c589bd12b2a26d9603460d62d514b59b90/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=249eb1c589bd12b2a26d9603460d62d514b59b90", "patch": "@@ -892,7 +892,7 @@ impl<T> BTreeSet<T> {\n         self.drain_filter(|v| !f(v));\n     }\n \n-    /// Moves all elements from `other` into `Self`, leaving `other` empty.\n+    /// Moves all elements from `other` into `self`, leaving `other` empty.\n     ///\n     /// # Examples\n     ///"}, {"sha": "2689c6fd1ac0ead00ba8c78189ac53ea63cb5c42", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/249eb1c589bd12b2a26d9603460d62d514b59b90/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249eb1c589bd12b2a26d9603460d62d514b59b90/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=249eb1c589bd12b2a26d9603460d62d514b59b90", "patch": "@@ -1755,7 +1755,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n     }\n \n-    /// Moves all the elements of `other` into `Self`, leaving `other` empty.\n+    /// Moves all the elements of `other` into `self`, leaving `other` empty.\n     ///\n     /// # Panics\n     ///\n@@ -1780,7 +1780,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n     }\n \n-    /// Appends elements to `Self` from other buffer.\n+    /// Appends elements to `self` from other buffer.\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     unsafe fn append_elements(&mut self, other: *const [T]) {"}]}