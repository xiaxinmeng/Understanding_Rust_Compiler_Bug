{"sha": "9da27f04293853b42080c7ab20e84c1da11ec5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTI3ZjA0MjkzODUzYjQyMDgwYzdhYjIwZTg0YzFkYTExZWM1ZDg=", "commit": {"author": {"name": "Alik Aslanyan", "email": "inline0@protonmail.com", "date": "2021-09-20T16:22:55Z"}, "committer": {"name": "Alik Aslanyan", "email": "inline0@protonmail.com", "date": "2021-09-20T20:41:44Z"}, "message": "Disable visible path calculation for PrettyPrinter in Ok path of compiler", "tree": {"sha": "9015c8871126eda50b4994ea2c03578249981fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9015c8871126eda50b4994ea2c03578249981fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da27f04293853b42080c7ab20e84c1da11ec5d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJLBAABCAA1FiEEeY134/OQL6hN3y4Jf+b9XVvEzPYFAmFI8gwXHGlubGluZTBA\ncHJvdG9ubWFpbC5jb20ACgkQf+b9XVvEzPb0ew/+JVEdOp39oyXCFbFNJUu2G1TB\nXh1cVqM8m/y4bHzmW1Z2ikZfqDsyG/b9y9RscGWmG0mLKetlsQjFxQl+KwhdV0OF\ne7lqqocIU4p+Ck7XfgQnxG1oT41Y+4hWohV8MxH4qRBr5H0J5ZllLg0QH9Zm3r9F\nTbMpgEflCBheQO1yHsAsEx4kv2Qwz+K2Ty+fmZDkeoeLvoIpDlt3YcM4Ca2ItdgV\nHMN/2J6Wvrg2qrpbFkYTTiZeISghzFfjjkLZcixjx2scAjT+h4aT8lb3Q8I5TCjV\nya8fu3Vm9DMbkAi9Q+zHbdJ6XetG3Z6JVjo3a5tKhnpclORI9OOA3xLvWNS1i2Ik\nAUy0pOVG2V04LoLvDp87qcfNPxVq7eZ3WWlneP5rDTchDCyKZmU93+14ixWt1b7I\n/eGrVsH6zETGmdctUajSZDHlVMFByb0LetrwJK8TY6QvzZYC4u3VXYICFMAxL4cF\niHyXaYSNt34knAwXJ27vNEVWKQ2fMKipamtvPOPbYqjiv6UqEGPK+eK/iMtZMXm+\nx17GyxhaI/+tmf5Ys6ZXYpJP5IwJk/73tcy9Sa+ImTBM8ZCQN1kyTTRscp1oG4HH\ntblZMgltojGfORegWxT3ISNOb7+hgbZGL52BpfkK3MFKGktuIKiFvconTHbSlK09\nUGdt0/7p67YWlr6mNX0=\n=rpxn\n-----END PGP SIGNATURE-----", "payload": "tree 9015c8871126eda50b4994ea2c03578249981fc9\nparent db1fb85cff63ad5fffe435e17128f99f9e1d970c\nauthor Alik Aslanyan <inline0@protonmail.com> 1632154975 +0400\ncommitter Alik Aslanyan <inline0@protonmail.com> 1632170504 +0400\n\nDisable visible path calculation for PrettyPrinter in Ok path of compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da27f04293853b42080c7ab20e84c1da11ec5d8", "html_url": "https://github.com/rust-lang/rust/commit/9da27f04293853b42080c7ab20e84c1da11ec5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da27f04293853b42080c7ab20e84c1da11ec5d8/comments", "author": {"login": "In-line", "id": 19331496, "node_id": "MDQ6VXNlcjE5MzMxNDk2", "avatar_url": "https://avatars.githubusercontent.com/u/19331496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/In-line", "html_url": "https://github.com/In-line", "followers_url": "https://api.github.com/users/In-line/followers", "following_url": "https://api.github.com/users/In-line/following{/other_user}", "gists_url": "https://api.github.com/users/In-line/gists{/gist_id}", "starred_url": "https://api.github.com/users/In-line/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/In-line/subscriptions", "organizations_url": "https://api.github.com/users/In-line/orgs", "repos_url": "https://api.github.com/users/In-line/repos", "events_url": "https://api.github.com/users/In-line/events{/privacy}", "received_events_url": "https://api.github.com/users/In-line/received_events", "type": "User", "site_admin": false}, "committer": {"login": "In-line", "id": 19331496, "node_id": "MDQ6VXNlcjE5MzMxNDk2", "avatar_url": "https://avatars.githubusercontent.com/u/19331496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/In-line", "html_url": "https://github.com/In-line", "followers_url": "https://api.github.com/users/In-line/followers", "following_url": "https://api.github.com/users/In-line/following{/other_user}", "gists_url": "https://api.github.com/users/In-line/gists{/gist_id}", "starred_url": "https://api.github.com/users/In-line/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/In-line/subscriptions", "organizations_url": "https://api.github.com/users/In-line/orgs", "repos_url": "https://api.github.com/users/In-line/repos", "events_url": "https://api.github.com/users/In-line/events{/privacy}", "received_events_url": "https://api.github.com/users/In-line/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1fb85cff63ad5fffe435e17128f99f9e1d970c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1fb85cff63ad5fffe435e17128f99f9e1d970c", "html_url": "https://github.com/rust-lang/rust/commit/db1fb85cff63ad5fffe435e17128f99f9e1d970c"}], "stats": {"total": 83, "additions": 54, "deletions": 29}, "files": [{"sha": "9e03fc33ae0f18fbf606920ea6c7585209519236", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -4,7 +4,7 @@ use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n@@ -43,7 +43,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n         ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str => {\n-            let mut name = with_no_trimmed_paths(|| layout.ty.to_string());\n+            let mut name =\n+                with_no_visible_paths(|| with_no_trimmed_paths(|| layout.ty.to_string()));\n             if let (&ty::Adt(def, _), &Variants::Single { index }) =\n                 (layout.ty.kind(), &layout.variants)\n             {"}, {"sha": "5ecc5917e973352eece3fffdb864cc8936625289", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -15,7 +15,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::{self, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n@@ -476,15 +476,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 UninitValid => !layout.might_permit_raw_init(bx, /*zero:*/ false),\n             };\n             if do_panic {\n-                let msg_str = with_no_trimmed_paths(|| {\n-                    if layout.abi.is_uninhabited() {\n-                        // Use this error even for the other intrinsics as it is more precise.\n-                        format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                    } else if intrinsic == ZeroValid {\n-                        format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n-                    } else {\n-                        format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n-                    }\n+                let msg_str = with_no_visible_paths(|| {\n+                    with_no_trimmed_paths(|| {\n+                        if layout.abi.is_uninhabited() {\n+                            // Use this error even for the other intrinsics as it is more precise.\n+                            format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                        } else if intrinsic == ZeroValid {\n+                            format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                        } else {\n+                            format!(\n+                                \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                                ty\n+                            )\n+                        }\n+                    })\n                 });\n                 let msg = bx.const_str(Symbol::intern(&msg_str));\n                 let location = self.get_caller_location(bx, source_info).immediate();"}, {"sha": "d99534c200a5a557c8e1dcff2d1241c8ca00071a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -59,6 +59,7 @@ thread_local! {\n     static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = const { Cell::new(false) };\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n+    static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n }\n \n /// Avoids running any queries during any prints that occur\n@@ -112,6 +113,16 @@ pub fn with_no_trimmed_paths<F: FnOnce() -> R, R>(f: F) -> R {\n     })\n }\n \n+/// Prevent selection of visible paths. `Display` impl of DefId will prefer visible (public) reexports of types as paths.\n+pub fn with_no_visible_paths<F: FnOnce() -> R, R>(f: F) -> R {\n+    NO_VISIBLE_PATH.with(|flag| {\n+        let old = flag.replace(true);\n+        let result = f();\n+        flag.set(old);\n+        result\n+    })\n+}\n+\n /// The \"region highlights\" are used to control region printing during\n /// specific error messages. When a \"region highlight\" is enabled, it\n /// gives an alternate way to print specific regions. For now, we\n@@ -268,6 +279,10 @@ pub trait PrettyPrinter<'tcx>:\n     /// from at least one local module, and returns `true`. If the crate defining `def_id` is\n     /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n     fn try_print_visible_def_path(self, def_id: DefId) -> Result<(Self, bool), Self::Error> {\n+        if NO_VISIBLE_PATH.with(|flag| flag.get()) {\n+            return Ok((self, false));\n+        }\n+\n         let mut callers = Vec::new();\n         self.try_print_visible_def_path_recur(def_id, &mut callers)\n     }"}, {"sha": "bb686b5ef3f3a9c6f95d3e5bf98b50cd2569b9d7", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -321,10 +321,13 @@ macro_rules! define_queries {\n             pub fn $name<$tcx>(tcx: QueryCtxt<$tcx>, key: query_keys::$name<$tcx>) -> QueryStackFrame {\n                 let kind = dep_graph::DepKind::$name;\n                 let name = stringify!($name);\n-                let description = ty::print::with_forced_impl_filename_line(\n+                // Disable visible paths printing for performance reasons.\n+                // Showing visible path instead of any path is not that important in production.\n+                let description = ty::print::with_no_visible_paths(\n+                    || ty::print::with_forced_impl_filename_line(\n                     // Force filename-line mode to avoid invoking `type_of` query.\n                     || queries::$name::describe(tcx, key)\n-                );\n+                ));\n                 let description = if tcx.sess.verbose() {\n                     format!(\"{} [{}]\", description, name)\n                 } else {"}, {"sha": "634ff14869eb4d371384f31a382a5d4b93a66005", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -34,7 +34,7 @@ note: ...which requires type-checking `cycle1`...\n    |\n LL |     send(cycle2().clone());\n    |     ^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl core::clone::Clone: core::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n   --> $DIR/auto-trait-leak.rs:19:16\n    |\n@@ -70,7 +70,7 @@ note: ...which requires type-checking `cycle2`...\n    |\n LL |     send(cycle1().clone());\n    |     ^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl core::clone::Clone: core::marker::Send`...\n    = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:1:1"}, {"sha": "50f1a2f25b95d5df556f7e37d086e4349138b889", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -2,6 +2,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n // revisions: mir thir\n // [thir]compile-flags: -Zthir-unsafeck\n+// ignore-tidy-linelength\n \n // This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n \n@@ -114,11 +115,11 @@ fn main() {\n \n         test_panic_msg(\n             || mem::uninitialized::<*const dyn Send>(),\n-            \"attempted to leave type `*const dyn std::marker::Send` uninitialized, which is invalid\"\n+            \"attempted to leave type `*const dyn core::marker::Send` uninitialized, which is invalid\"\n         );\n         test_panic_msg(\n             || mem::zeroed::<*const dyn Send>(),\n-            \"attempted to zero-initialize type `*const dyn std::marker::Send`, which is invalid\"\n+            \"attempted to zero-initialize type `*const dyn core::marker::Send`, which is invalid\"\n         );\n \n         /* FIXME(#66151) we conservatively do not error here yet.\n@@ -145,12 +146,12 @@ fn main() {\n \n         test_panic_msg(\n             || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n-            \"attempted to leave type `(std::ptr::NonNull<u32>, u32, u32)` uninitialized, \\\n+            \"attempted to leave type `(core::ptr::non_null::NonNull<u32>, u32, u32)` uninitialized, \\\n                 which is invalid\"\n         );\n         test_panic_msg(\n             || mem::zeroed::<(NonNull<u32>, u32, u32)>(),\n-            \"attempted to zero-initialize type `(std::ptr::NonNull<u32>, u32, u32)`, \\\n+            \"attempted to zero-initialize type `(core::ptr::non_null::NonNull<u32>, u32, u32)`, \\\n                 which is invalid\"\n         );\n \n@@ -187,7 +188,7 @@ fn main() {\n         );\n         test_panic_msg(\n             || mem::uninitialized::<ManuallyDrop<LR>>(),\n-            \"attempted to leave type `std::mem::ManuallyDrop<LR>` uninitialized, which is invalid\"\n+            \"attempted to leave type `core::mem::manually_drop::ManuallyDrop<LR>` uninitialized, which is invalid\"\n         );\n \n         // Some things that should work."}, {"sha": "4fd5622b0626ce8949770710dd9b0f2d2ad3e47d", "filename": "src/test/ui/recursion/issue-26548-recursion-via-normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.rs?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -1,8 +1,8 @@\n //~ ERROR cycle detected when computing layout of `S`\n-//~| NOTE ...which requires computing layout of `std::option::Option<<S as Mirror>::It>`...\n-//~| NOTE ...which requires computing layout of `std::option::Option<S>`...\n+//~| NOTE ...which requires computing layout of `core::option::Option<<S as Mirror>::It>`...\n+//~| NOTE ...which requires computing layout of `core::option::Option<S>`...\n //~| NOTE ...which again requires computing layout of `S`, completing the cycle\n-//~| NOTE cycle used when computing layout of `std::option::Option<S>`\n+//~| NOTE cycle used when computing layout of `core::option::Option<S>`\n \n // build-fail\n "}, {"sha": "6042379a91887c4bbe2bd5239f0fd1f685a531a4", "filename": "src/test/ui/recursion/issue-26548-recursion-via-normalize.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-26548-recursion-via-normalize.stderr?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -1,9 +1,9 @@\n error[E0391]: cycle detected when computing layout of `S`\n    |\n-   = note: ...which requires computing layout of `std::option::Option<<S as Mirror>::It>`...\n-   = note: ...which requires computing layout of `std::option::Option<S>`...\n+   = note: ...which requires computing layout of `core::option::Option<<S as Mirror>::It>`...\n+   = note: ...which requires computing layout of `core::option::Option<S>`...\n    = note: ...which again requires computing layout of `S`, completing the cycle\n-   = note: cycle used when computing layout of `std::option::Option<S>`\n+   = note: cycle used when computing layout of `core::option::Option<S>`\n \n error: aborting due to previous error\n "}, {"sha": "c0147e56c9364a6bb2d3f99d8c1f014a20768539", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -9,7 +9,7 @@ note: ...which requires type-checking `m::bar`...\n    |\n LL |         is_send(foo());\n    |         ^^^^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl std::fmt::Debug: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl core::fmt::Debug: core::marker::Send`...\n    = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in module `m`\n   --> $DIR/auto-trait-leakage3.rs:6:1"}, {"sha": "e12124664778ed249087f4e88bb0011577b7e323", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9da27f04293853b42080c7ab20e84c1da11ec5d8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr?ref=9da27f04293853b42080c7ab20e84c1da11ec5d8", "patch": "@@ -9,7 +9,7 @@ note: ...which requires type-checking `m::bar`...\n    |\n LL |         is_send(foo()); // Today: error\n    |         ^^^^^^^\n-   = note: ...which requires evaluating trait selection obligation `impl std::fmt::Debug: std::marker::Send`...\n+   = note: ...which requires evaluating trait selection obligation `impl core::fmt::Debug: core::marker::Send`...\n    = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in module `m`\n   --> $DIR/inference-cycle.rs:4:1"}]}