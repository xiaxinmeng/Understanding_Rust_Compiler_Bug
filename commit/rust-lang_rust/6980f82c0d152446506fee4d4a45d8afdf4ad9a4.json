{"sha": "6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODBmODJjMGQxNTI0NDY1MDZmZWU0ZDRhNDVkOGFmZGY0YWQ5YTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-20T23:46:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-26T15:18:55Z"}, "message": "rustc_span: return an impl Iterator instead of a Vec from macro_backtrace.", "tree": {"sha": "105db4bbe1eb9f95251c1414f926a3e3f36602cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105db4bbe1eb9f95251c1414f926a3e3f36602cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "html_url": "https://github.com/rust-lang/rust/commit/6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75284f8cbdfa17046156528dc3aa5303f8752f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/75284f8cbdfa17046156528dc3aa5303f8752f97", "html_url": "https://github.com/rust-lang/rust/commit/75284f8cbdfa17046156528dc3aa5303f8752f97"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "f9e23e96fa8a83975cf416b3ef99c160c9ec1c36", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "patch": "@@ -343,8 +343,9 @@ pub trait Emitter {\n             if call_sp != *sp && !always_backtrace {\n                 before_after.push((*sp, call_sp));\n             }\n-            let backtrace_len = sp.macro_backtrace().len();\n-            for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n+            let macro_backtrace: Vec<_> = sp.macro_backtrace().collect();\n+            let backtrace_len = macro_backtrace.len();\n+            for (i, trace) in macro_backtrace.iter().rev().enumerate() {\n                 // Only show macro locations that are local\n                 // and display them like a span_note\n                 if trace.def_site.is_dummy() {\n@@ -398,8 +399,7 @@ pub trait Emitter {\n                 continue;\n             }\n             if sm.span_to_filename(sp_label.span.clone()).is_macros() && !always_backtrace {\n-                let v = sp_label.span.macro_backtrace();\n-                if let Some(use_site) = v.last() {\n+                if let Some(use_site) = sp_label.span.macro_backtrace().last() {\n                     before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n                 }\n             }"}, {"sha": "3ddf9b09893ba28c6831f9ec016d3bb1d37c9c79", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "patch": "@@ -309,7 +309,7 @@ impl DiagnosticSpan {\n         // backtrace ourselves, but the `macro_backtrace` helper makes\n         // some decision, such as dropping some frames, and I don't\n         // want to duplicate that logic here.\n-        let backtrace = span.macro_backtrace().into_iter();\n+        let backtrace = span.macro_backtrace();\n         DiagnosticSpan::from_span_full(span, is_primary, label, suggestion, backtrace, je)\n     }\n \n@@ -318,7 +318,7 @@ impl DiagnosticSpan {\n         is_primary: bool,\n         label: Option<String>,\n         suggestion: Option<(&String, Applicability)>,\n-        mut backtrace: vec::IntoIter<ExpnData>,\n+        mut backtrace: impl Iterator<Item = ExpnData>,\n         je: &JsonEmitter,\n     ) -> DiagnosticSpan {\n         let start = je.sm.lookup_char_pos(span.lo());"}, {"sha": "413bd77daae2434c87ea4f5978d80a9bd0ba862d", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "patch": "@@ -445,23 +445,26 @@ impl Span {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n     }\n \n-    pub fn macro_backtrace(mut self) -> Vec<ExpnData> {\n+    pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {\n         let mut prev_span = DUMMY_SP;\n-        let mut result = vec![];\n-        loop {\n-            let expn_data = self.ctxt().outer_expn_data();\n-            if expn_data.is_root() {\n-                break;\n-            }\n-            // Don't print recursive invocations.\n-            if !expn_data.call_site.source_equal(&prev_span) {\n-                result.push(expn_data.clone());\n-            }\n+        std::iter::from_fn(move || {\n+            loop {\n+                let expn_data = self.ctxt().outer_expn_data();\n+                if expn_data.is_root() {\n+                    return None;\n+                }\n \n-            prev_span = self;\n-            self = expn_data.call_site;\n-        }\n-        result\n+                let is_recursive = expn_data.call_site.source_equal(&prev_span);\n+\n+                prev_span = self;\n+                self = expn_data.call_site;\n+\n+                // Don't print recursive invocations.\n+                if !is_recursive {\n+                    return Some(expn_data);\n+                }\n+            }\n+        })\n     }\n \n     /// Returns a `Span` that would enclose both `self` and `end`."}, {"sha": "c250df43a2733e284bcc1b56f90ae52f04f44f31", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6980f82c0d152446506fee4d4a45d8afdf4ad9a4/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=6980f82c0d152446506fee4d4a45d8afdf4ad9a4", "patch": "@@ -947,8 +947,7 @@ impl SourceMap {\n     }\n     pub fn call_span_if_macro(&self, sp: Span) -> Span {\n         if self.span_to_filename(sp.clone()).is_macros() {\n-            let v = sp.macro_backtrace();\n-            if let Some(use_site) = v.last() {\n+            if let Some(use_site) = sp.macro_backtrace().last() {\n                 return use_site.call_site;\n             }\n         }"}]}