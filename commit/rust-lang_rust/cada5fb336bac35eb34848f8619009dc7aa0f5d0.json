{"sha": "cada5fb336bac35eb34848f8619009dc7aa0f5d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZGE1ZmIzMzZiYWMzNWViMzQ4NDhmODYxOTAwOWRjN2FhMGY1ZDA=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-03T12:31:59Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T19:02:40Z"}, "message": "Update PidFd for the new I/O safety APIs.", "tree": {"sha": "6a8f571efeacd3391a5d989c06793246b0bcda48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8f571efeacd3391a5d989c06793246b0bcda48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cada5fb336bac35eb34848f8619009dc7aa0f5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cada5fb336bac35eb34848f8619009dc7aa0f5d0", "html_url": "https://github.com/rust-lang/rust/commit/cada5fb336bac35eb34848f8619009dc7aa0f5d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cada5fb336bac35eb34848f8619009dc7aa0f5d0/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ae1eeec2589abf742f87ec747acd31990e3b00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1eeec2589abf742f87ec747acd31990e3b00a", "html_url": "https://github.com/rust-lang/rust/commit/1ae1eeec2589abf742f87ec747acd31990e3b00a"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "e3e7143c851efaebb92d1a69b3e6864238a1d6cf", "filename": "library/std/src/os/linux/process.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cada5fb336bac35eb34848f8619009dc7aa0f5d0/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cada5fb336bac35eb34848f8619009dc7aa0f5d0/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs?ref=cada5fb336bac35eb34848f8619009dc7aa0f5d0", "patch": "@@ -3,7 +3,7 @@\n #![unstable(feature = \"linux_pidfd\", issue = \"82971\")]\n \n use crate::io::Result;\n-use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n use crate::process;\n use crate::sealed::Sealed;\n #[cfg(not(doc))]\n@@ -69,19 +69,37 @@ impl IntoInner<FileDesc> for PidFd {\n \n impl AsRawFd for PidFd {\n     fn as_raw_fd(&self) -> RawFd {\n-        self.as_inner().raw()\n+        self.as_inner().as_raw_fd()\n     }\n }\n \n impl FromRawFd for PidFd {\n     unsafe fn from_raw_fd(fd: RawFd) -> Self {\n-        Self::from_inner(FileDesc::new(fd))\n+        Self::from_inner(FileDesc::from_raw_fd(fd))\n     }\n }\n \n impl IntoRawFd for PidFd {\n     fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_raw()\n+        self.into_inner().into_raw_fd()\n+    }\n+}\n+\n+impl AsFd for PidFd {\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().as_fd()\n+    }\n+}\n+\n+impl From<OwnedFd> for PidFd {\n+    fn from(fd: OwnedFd) -> Self {\n+        Self::from_inner(FileDesc::from_inner(fd))\n+    }\n+}\n+\n+impl From<PidFd> for OwnedFd {\n+    fn from(pid_fd: PidFd) -> Self {\n+        pid_fd.into_inner().into_inner()\n     }\n }\n "}, {"sha": "818f9308c193443612ba57696a34452ace3f4632", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cada5fb336bac35eb34848f8619009dc7aa0f5d0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cada5fb336bac35eb34848f8619009dc7aa0f5d0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=cada5fb336bac35eb34848f8619009dc7aa0f5d0", "patch": "@@ -4,6 +4,7 @@ use crate::io::{self, Error, ErrorKind};\n use crate::mem;\n use crate::num::NonZeroI32;\n use crate::os::raw::NonZero_c_int;\n+use crate::os::unix::io::FromRawFd;\n use crate::ptr;\n use crate::sys;\n use crate::sys::cvt;\n@@ -97,7 +98,9 @@ impl Command {\n         drop(env_lock);\n         drop(output);\n \n-        let mut p = Process::new(pid, pidfd);\n+        // Safety: We obtained the pidfd from calling `clone3` with\n+        // `CLONE_PIDFD` so it's valid an otherwise unowned.\n+        let mut p = unsafe { Process::new(pid, pidfd) };\n         let mut bytes = [0; 8];\n \n         // loop to handle EINTR\n@@ -446,7 +449,8 @@ impl Command {\n             None => None,\n         };\n \n-        let mut p = Process::new(0, -1);\n+        // Safety: -1 indicates we don't have a pidfd.\n+        let mut p = unsafe { Process::new(0, -1) };\n \n         struct PosixSpawnFileActions<'a>(&'a mut MaybeUninit<libc::posix_spawn_file_actions_t>);\n \n@@ -545,14 +549,16 @@ pub struct Process {\n \n impl Process {\n     #[cfg(target_os = \"linux\")]\n-    fn new(pid: pid_t, pidfd: pid_t) -> Self {\n+    unsafe fn new(pid: pid_t, pidfd: pid_t) -> Self {\n         use crate::sys_common::FromInner;\n-        let pidfd = (pidfd >= 0).then(|| PidFd::from_inner(sys::fd::FileDesc::new(pidfd)));\n+        // Safety: If `pidfd` is nonnegative, we assume it's valid and otherwise unowned.\n+        let pidfd = (pidfd >= 0)\n+            .then(|| PidFd::from_inner(unsafe { sys::fd::FileDesc::from_raw_fd(pidfd) }));\n         Process { pid, status: None, pidfd }\n     }\n \n     #[cfg(not(target_os = \"linux\"))]\n-    fn new(pid: pid_t, _pidfd: pid_t) -> Self {\n+    unsafe fn new(pid: pid_t, _pidfd: pid_t) -> Self {\n         Process { pid, status: None }\n     }\n "}]}