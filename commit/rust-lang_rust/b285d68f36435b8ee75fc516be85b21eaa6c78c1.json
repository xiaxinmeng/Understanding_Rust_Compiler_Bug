{"sha": "b285d68f36435b8ee75fc516be85b21eaa6c78c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODVkNjhmMzY0MzViOGVlNzVmYzUxNmJlODViMjFlYWE2Yzc4YzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-19T16:15:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T16:15:10Z"}, "message": "Rollup merge of #73334 - ayazhafiz:err/num-type-cannot-fit, r=estebank\n\nNote numeric literals that can never fit in an expected type\n\nre https://github.com/rust-lang/rust/pull/72380#discussion_r438289385\n\nGiven the toy code\n\n```rust\nfn is_positive(n: usize) {\n  n > -1_isize;\n}\n```\n\nWe currently get a type mismatch error like the following:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n  |\n2 |     n > (-1_isize).try_into().unwrap();\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nBut clearly, `-1` can never fit into a `usize`, so the suggestion will\nalways panic. A more useful message would tell the user that the value\ncan never fit in the expected type:\n\n```\nerror[E0308]: mismatched types\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nnote: `-1_isize` can never fit into `usize`\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^\n```\n\nWhich is what this commit implements.\n\nI only added this check for negative literals because\n\n- Currently we can only perform such a check for literals (constant\n  value propagation is outside the scope of the typechecker at this\n  point)\n- A lint error for out-of-range numeric literals is already emitted\n\nIMO it makes more sense to put this check in librustc_lint, but as far\nas I can tell the typecheck pass happens before the lint pass, so I've\nadded it here.\n\nr? @estebank", "tree": {"sha": "a81e8012db6759bf10b43327c1c95066418799c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81e8012db6759bf10b43327c1c95066418799c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b285d68f36435b8ee75fc516be85b21eaa6c78c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7OSOCRBK7hj4Ov3rIwAAdHIIAC5Ndg+rAK9H0RGS2cjNC04S\nPz7luH7uLpaSc4jGd+BZm5HS4MslQ2GtpGoLUBAVJvSXCHuWRII4dxZpMY27Vmre\nHemdJ2BsV4agVqgoj70t0cZbP3FvYadjmKktlxQ9Nwj5DXHS5NnF5/kDMJrDTFnq\n/cF6267k7s4UffIZw0lRF9P/c0aw9yphGIG/Jm3B1JaqhVty/U/LeMz7B8Q88IP8\nUgthbBIFGCnl/lUUdPfPjId7EigGF1E89LwFH6+OdevBNAH3TEgExTFfOAroTzK/\nPTo/P4Ohl/h1WfkpaeHvp6XyAyeSXa0nAZ0Q+Q0JeUg5mxbM40OlTwfINAC7si8=\n=JlY5\n-----END PGP SIGNATURE-----\n", "payload": "tree a81e8012db6759bf10b43327c1c95066418799c3\nparent 058971cef3e7ce5925fa910239645f7c793d8dbc\nparent 7a89a338239c0d551279b9183b9c2c1a1e7d7e74\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592583310 -0700\ncommitter GitHub <noreply@github.com> 1592583310 -0700\n\nRollup merge of #73334 - ayazhafiz:err/num-type-cannot-fit, r=estebank\n\nNote numeric literals that can never fit in an expected type\n\nre https://github.com/rust-lang/rust/pull/72380#discussion_r438289385\n\nGiven the toy code\n\n```rust\nfn is_positive(n: usize) {\n  n > -1_isize;\n}\n```\n\nWe currently get a type mismatch error like the following:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n  |\n2 |     n > (-1_isize).try_into().unwrap();\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nBut clearly, `-1` can never fit into a `usize`, so the suggestion will\nalways panic. A more useful message would tell the user that the value\ncan never fit in the expected type:\n\n```\nerror[E0308]: mismatched types\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nnote: `-1_isize` can never fit into `usize`\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^\n```\n\nWhich is what this commit implements.\n\nI only added this check for negative literals because\n\n- Currently we can only perform such a check for literals (constant\n  value propagation is outside the scope of the typechecker at this\n  point)\n- A lint error for out-of-range numeric literals is already emitted\n\nIMO it makes more sense to put this check in librustc_lint, but as far\nas I can tell the typecheck pass happens before the lint pass, so I've\nadded it here.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b285d68f36435b8ee75fc516be85b21eaa6c78c1", "html_url": "https://github.com/rust-lang/rust/commit/b285d68f36435b8ee75fc516be85b21eaa6c78c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b285d68f36435b8ee75fc516be85b21eaa6c78c1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058971cef3e7ce5925fa910239645f7c793d8dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/058971cef3e7ce5925fa910239645f7c793d8dbc", "html_url": "https://github.com/rust-lang/rust/commit/058971cef3e7ce5925fa910239645f7c793d8dbc"}, {"sha": "7a89a338239c0d551279b9183b9c2c1a1e7d7e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a89a338239c0d551279b9183b9c2c1a1e7d7e74", "html_url": "https://github.com/rust-lang/rust/commit/7a89a338239c0d551279b9183b9c2c1a1e7d7e74"}], "stats": {"total": 429, "additions": 428, "deletions": 1}, "files": [{"sha": "bcfc0cf347cbcf94c9144615ef4b6f47bbc2bfbb", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b285d68f36435b8ee75fc516be85b21eaa6c78c1", "patch": "@@ -783,6 +783,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let literal_is_ty_suffixed = |expr: &hir::Expr<'_>| {\n             if let hir::ExprKind::Lit(lit) = &expr.kind { lit.node.is_suffixed() } else { false }\n         };\n+        let is_negative_int =\n+            |expr: &hir::Expr<'_>| matches!(expr.kind, hir::ExprKind::Unary(hir::UnOp::UnNeg, ..));\n+        let is_uint = |ty: Ty<'_>| matches!(ty.kind, ty::Uint(..));\n \n         let in_const_context = self.tcx.hir().is_inside_const_context(expr.hir_id);\n \n@@ -807,7 +810,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"you can convert `{}` from `{}` to `{}`, matching the type of `{}`\",\n                         lhs_src, expected_ty, checked_ty, src\n                     );\n-                    let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src,);\n+                    let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src);\n                     (lhs_expr.span, msg, suggestion)\n                 } else {\n                     let msg = format!(\"{} and panic if the converted value wouldn't fit\", msg);\n@@ -822,8 +825,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             |err: &mut DiagnosticBuilder<'_>,\n              found_to_exp_is_fallible: bool,\n              exp_to_found_is_fallible: bool| {\n+                let always_fallible = found_to_exp_is_fallible\n+                    && (exp_to_found_is_fallible || expected_ty_expr.is_none());\n                 let msg = if literal_is_ty_suffixed(expr) {\n                     &lit_msg\n+                } else if always_fallible && (is_negative_int(expr) && is_uint(expected_ty)) {\n+                    // We now know that converting either the lhs or rhs is fallible. Before we\n+                    // suggest a fallible conversion, check if the value can never fit in the\n+                    // expected type.\n+                    let msg = format!(\"`{}` cannot fit into type `{}`\", src, expected_ty);\n+                    err.note(&msg);\n+                    return;\n                 } else if in_const_context {\n                     // Do not recommend `into` or `try_into` in const contexts.\n                     return;"}, {"sha": "63e5f098a25d3656ae95e1a512d2e0b042fbe4e8", "filename": "src/test/ui/numeric/numeric-cast-no-fix.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.rs?ref=b285d68f36435b8ee75fc516be85b21eaa6c78c1", "patch": "@@ -0,0 +1,87 @@\n+#[allow(unused_must_use)]\n+fn main() {\n+    let x_usize: usize = 1;\n+    let x_u128: u128 = 2;\n+    let x_u64: u64 = 3;\n+    let x_u32: u32 = 4;\n+    let x_u16: u16 = 5;\n+    let x_u8: u8 = 6;\n+\n+    x_usize > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_isize;\n+    //~^ ERROR mismatched types\n+\n+    x_usize > -1_i128;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_i128;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_i128;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_i128;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_i128;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_i128;\n+    //~^ ERROR mismatched types\n+\n+    x_usize > -1_i64;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_i64;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_i64;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_i64;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_i64;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_i64;\n+    //~^ ERROR mismatched types\n+\n+    x_usize > -1_i32;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_i32;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_i32;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_i32;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_i32;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_i32;\n+    //~^ ERROR mismatched types\n+\n+    x_usize > -1_i16;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_i16;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_i16;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_i16;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_i16;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_i16;\n+    //~^ ERROR mismatched types\n+\n+    x_usize > -1_i8;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_i8;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_i8;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_i8;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_i8;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_i8;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "4852e7047b47a3c5db48e13f4c88a101eb0a7983", "filename": "src/test/ui/numeric/numeric-cast-no-fix.stderr", "status": "added", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/rust-lang/rust/blob/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr?ref=b285d68f36435b8ee75fc516be85b21eaa6c78c1", "patch": "@@ -0,0 +1,324 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:10:15\n+   |\n+LL |     x_usize > -1_isize;\n+   |               ^^^^^^^^ expected `usize`, found `isize`\n+   |\n+   = note: `-1_isize` cannot fit into type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:12:14\n+   |\n+LL |     x_u128 > -1_isize;\n+   |              ^^^^^^^^ expected `u128`, found `isize`\n+   |\n+   = note: `-1_isize` cannot fit into type `u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:14:13\n+   |\n+LL |     x_u64 > -1_isize;\n+   |             ^^^^^^^^ expected `u64`, found `isize`\n+   |\n+   = note: `-1_isize` cannot fit into type `u64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:16:13\n+   |\n+LL |     x_u32 > -1_isize;\n+   |             ^^^^^^^^ expected `u32`, found `isize`\n+   |\n+   = note: `-1_isize` cannot fit into type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:18:13\n+   |\n+LL |     x_u16 > -1_isize;\n+   |             ^^^^^^^^ expected `u16`, found `isize`\n+   |\n+   = note: `-1_isize` cannot fit into type `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:20:12\n+   |\n+LL |     x_u8 > -1_isize;\n+   |            ^^^^^^^^ expected `u8`, found `isize`\n+   |\n+help: you can convert `x_u8` from `u8` to `isize`, matching the type of `-1_isize`\n+   |\n+LL |     isize::from(x_u8) > -1_isize;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:23:15\n+   |\n+LL |     x_usize > -1_i128;\n+   |               ^^^^^^^ expected `usize`, found `i128`\n+   |\n+   = note: `-1_i128` cannot fit into type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:25:14\n+   |\n+LL |     x_u128 > -1_i128;\n+   |              ^^^^^^^ expected `u128`, found `i128`\n+   |\n+   = note: `-1_i128` cannot fit into type `u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:27:13\n+   |\n+LL |     x_u64 > -1_i128;\n+   |             ^^^^^^^ expected `u64`, found `i128`\n+   |\n+help: you can convert `x_u64` from `u64` to `i128`, matching the type of `-1_i128`\n+   |\n+LL |     i128::from(x_u64) > -1_i128;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:29:13\n+   |\n+LL |     x_u32 > -1_i128;\n+   |             ^^^^^^^ expected `u32`, found `i128`\n+   |\n+help: you can convert `x_u32` from `u32` to `i128`, matching the type of `-1_i128`\n+   |\n+LL |     i128::from(x_u32) > -1_i128;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:31:13\n+   |\n+LL |     x_u16 > -1_i128;\n+   |             ^^^^^^^ expected `u16`, found `i128`\n+   |\n+help: you can convert `x_u16` from `u16` to `i128`, matching the type of `-1_i128`\n+   |\n+LL |     i128::from(x_u16) > -1_i128;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:33:12\n+   |\n+LL |     x_u8 > -1_i128;\n+   |            ^^^^^^^ expected `u8`, found `i128`\n+   |\n+help: you can convert `x_u8` from `u8` to `i128`, matching the type of `-1_i128`\n+   |\n+LL |     i128::from(x_u8) > -1_i128;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:36:15\n+   |\n+LL |     x_usize > -1_i64;\n+   |               ^^^^^^ expected `usize`, found `i64`\n+   |\n+   = note: `-1_i64` cannot fit into type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:38:14\n+   |\n+LL |     x_u128 > -1_i64;\n+   |              ^^^^^^ expected `u128`, found `i64`\n+   |\n+   = note: `-1_i64` cannot fit into type `u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:40:13\n+   |\n+LL |     x_u64 > -1_i64;\n+   |             ^^^^^^ expected `u64`, found `i64`\n+   |\n+   = note: `-1_i64` cannot fit into type `u64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:42:13\n+   |\n+LL |     x_u32 > -1_i64;\n+   |             ^^^^^^ expected `u32`, found `i64`\n+   |\n+help: you can convert `x_u32` from `u32` to `i64`, matching the type of `-1_i64`\n+   |\n+LL |     i64::from(x_u32) > -1_i64;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:44:13\n+   |\n+LL |     x_u16 > -1_i64;\n+   |             ^^^^^^ expected `u16`, found `i64`\n+   |\n+help: you can convert `x_u16` from `u16` to `i64`, matching the type of `-1_i64`\n+   |\n+LL |     i64::from(x_u16) > -1_i64;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:46:12\n+   |\n+LL |     x_u8 > -1_i64;\n+   |            ^^^^^^ expected `u8`, found `i64`\n+   |\n+help: you can convert `x_u8` from `u8` to `i64`, matching the type of `-1_i64`\n+   |\n+LL |     i64::from(x_u8) > -1_i64;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:49:15\n+   |\n+LL |     x_usize > -1_i32;\n+   |               ^^^^^^ expected `usize`, found `i32`\n+   |\n+   = note: `-1_i32` cannot fit into type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:51:14\n+   |\n+LL |     x_u128 > -1_i32;\n+   |              ^^^^^^ expected `u128`, found `i32`\n+   |\n+   = note: `-1_i32` cannot fit into type `u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:53:13\n+   |\n+LL |     x_u64 > -1_i32;\n+   |             ^^^^^^ expected `u64`, found `i32`\n+   |\n+   = note: `-1_i32` cannot fit into type `u64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:55:13\n+   |\n+LL |     x_u32 > -1_i32;\n+   |             ^^^^^^ expected `u32`, found `i32`\n+   |\n+   = note: `-1_i32` cannot fit into type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:57:13\n+   |\n+LL |     x_u16 > -1_i32;\n+   |             ^^^^^^ expected `u16`, found `i32`\n+   |\n+help: you can convert `x_u16` from `u16` to `i32`, matching the type of `-1_i32`\n+   |\n+LL |     i32::from(x_u16) > -1_i32;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:59:12\n+   |\n+LL |     x_u8 > -1_i32;\n+   |            ^^^^^^ expected `u8`, found `i32`\n+   |\n+help: you can convert `x_u8` from `u8` to `i32`, matching the type of `-1_i32`\n+   |\n+LL |     i32::from(x_u8) > -1_i32;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:62:15\n+   |\n+LL |     x_usize > -1_i16;\n+   |               ^^^^^^ expected `usize`, found `i16`\n+   |\n+   = note: `-1_i16` cannot fit into type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:64:14\n+   |\n+LL |     x_u128 > -1_i16;\n+   |              ^^^^^^ expected `u128`, found `i16`\n+   |\n+   = note: `-1_i16` cannot fit into type `u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:66:13\n+   |\n+LL |     x_u64 > -1_i16;\n+   |             ^^^^^^ expected `u64`, found `i16`\n+   |\n+   = note: `-1_i16` cannot fit into type `u64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:68:13\n+   |\n+LL |     x_u32 > -1_i16;\n+   |             ^^^^^^ expected `u32`, found `i16`\n+   |\n+   = note: `-1_i16` cannot fit into type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:70:13\n+   |\n+LL |     x_u16 > -1_i16;\n+   |             ^^^^^^ expected `u16`, found `i16`\n+   |\n+   = note: `-1_i16` cannot fit into type `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:72:12\n+   |\n+LL |     x_u8 > -1_i16;\n+   |            ^^^^^^ expected `u8`, found `i16`\n+   |\n+help: you can convert `x_u8` from `u8` to `i16`, matching the type of `-1_i16`\n+   |\n+LL |     i16::from(x_u8) > -1_i16;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:75:15\n+   |\n+LL |     x_usize > -1_i8;\n+   |               ^^^^^ expected `usize`, found `i8`\n+   |\n+   = note: `-1_i8` cannot fit into type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:77:14\n+   |\n+LL |     x_u128 > -1_i8;\n+   |              ^^^^^ expected `u128`, found `i8`\n+   |\n+   = note: `-1_i8` cannot fit into type `u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:79:13\n+   |\n+LL |     x_u64 > -1_i8;\n+   |             ^^^^^ expected `u64`, found `i8`\n+   |\n+   = note: `-1_i8` cannot fit into type `u64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:81:13\n+   |\n+LL |     x_u32 > -1_i8;\n+   |             ^^^^^ expected `u32`, found `i8`\n+   |\n+   = note: `-1_i8` cannot fit into type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:83:13\n+   |\n+LL |     x_u16 > -1_i8;\n+   |             ^^^^^ expected `u16`, found `i8`\n+   |\n+   = note: `-1_i8` cannot fit into type `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:85:12\n+   |\n+LL |     x_u8 > -1_i8;\n+   |            ^^^^^ expected `u8`, found `i8`\n+   |\n+   = note: `-1_i8` cannot fit into type `u8`\n+\n+error: aborting due to 36 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2eab3ebc7687d8cf1dbf6f85ec9bddb43bd54488", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b285d68f36435b8ee75fc516be85b21eaa6c78c1/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=b285d68f36435b8ee75fc516be85b21eaa6c78c1", "patch": "@@ -39,12 +39,16 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected `usize`, found `isize`\n+   |\n+   = note: `-4_isize` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:22:23\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected `usize`, found `isize`\n+   |\n+   = note: `-1_isize` cannot fit into type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:25:17"}]}