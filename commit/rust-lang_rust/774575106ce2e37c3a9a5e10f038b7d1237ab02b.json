{"sha": "774575106ce2e37c3a9a5e10f038b7d1237ab02b", "node_id": "C_kwDOAAsO6NoAKDc3NDU3NTEwNmNlMmUzN2MzYTlhNWUxMGYwMzhiN2QxMjM3YWIwMmI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2023-04-24T10:31:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2023-04-24T10:31:52Z"}, "message": "feat: don't wavy-underline the whole for loop", "tree": {"sha": "026fcf31d33a30c43cc2715fdbad0d27b2b5f12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026fcf31d33a30c43cc2715fdbad0d27b2b5f12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774575106ce2e37c3a9a5e10f038b7d1237ab02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774575106ce2e37c3a9a5e10f038b7d1237ab02b", "html_url": "https://github.com/rust-lang/rust/commit/774575106ce2e37c3a9a5e10f038b7d1237ab02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774575106ce2e37c3a9a5e10f038b7d1237ab02b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0289dfa2611a605975e10dab6d3931c21509f90c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0289dfa2611a605975e10dab6d3931c21509f90c", "html_url": "https://github.com/rust-lang/rust/commit/0289dfa2611a605975e10dab6d3931c21509f90c"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "d240ca13e6053860862511b082ae94bc91af77bc", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/774575106ce2e37c3a9a5e10f038b7d1237ab02b/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774575106ce2e37c3a9a5e10f038b7d1237ab02b/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=774575106ce2e37c3a9a5e10f038b7d1237ab02b", "patch": "@@ -1,6 +1,7 @@\n use either::Either;\n use hir::{db::ExpandDatabase, ClosureStyle, HirDisplay, InFile, Type};\n use ide_db::{famous_defs::FamousDefs, source_change::SourceChange};\n+use stdx::never;\n use syntax::{\n     ast::{self, BlockExpr, ExprStmt},\n     AstNode, AstPtr,\n@@ -15,15 +16,29 @@ use crate::{adjusted_display_range, fix, Assist, Diagnostic, DiagnosticsContext}\n // the expected type.\n pub(crate) fn type_mismatch(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Diagnostic {\n     let display_range = match &d.expr_or_pat {\n-        Either::Left(expr) => adjusted_display_range::<ast::BlockExpr>(\n-            ctx,\n-            expr.clone().map(|it| it.into()),\n-            &|block| {\n-                let r_curly_range = block.stmt_list()?.r_curly_token()?.text_range();\n+        Either::Left(expr) => {\n+            adjusted_display_range::<ast::Expr>(ctx, expr.clone().map(|it| it.into()), &|expr| {\n+                if !expr.is_block_like() {\n+                    return None;\n+                }\n+\n+                let salient_token_range = match expr {\n+                    ast::Expr::IfExpr(it) => it.if_token()?.text_range(),\n+                    ast::Expr::LoopExpr(it) => it.loop_token()?.text_range(),\n+                    ast::Expr::ForExpr(it) => it.for_token()?.text_range(),\n+                    ast::Expr::WhileExpr(it) => it.while_token()?.text_range(),\n+                    ast::Expr::BlockExpr(it) => it.stmt_list()?.r_curly_token()?.text_range(),\n+                    ast::Expr::MatchExpr(it) => it.match_token()?.text_range(),\n+                    _ => {\n+                        never!();\n+                        return None;\n+                    }\n+                };\n+\n                 cov_mark::hit!(type_mismatch_on_block);\n-                Some(r_curly_range)\n-            },\n-        ),\n+                Some(salient_token_range)\n+            })\n+        }\n         Either::Right(pat) => {\n             ctx.sema.diagnostics_display_range(pat.clone().map(|it| it.into())).range\n         }\n@@ -620,6 +635,10 @@ fn f() -> i32 {\n     let _ = x + y;\n   }\n //^ error: expected i32, found ()\n+\n+fn h() -> i32 {\n+    while true {}\n+} //^^^^^ error: expected i32, found ()\n \"#,\n         );\n     }"}]}