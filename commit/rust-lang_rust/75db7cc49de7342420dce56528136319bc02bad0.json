{"sha": "75db7cc49de7342420dce56528136319bc02bad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZGI3Y2M0OWRlNzM0MjQyMGRjZTU2NTI4MTM2MzE5YmMwMmJhZDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-06T15:31:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-06T15:36:15Z"}, "message": "Remove logfile support from unimpl.rs\n\nI haven't used it in months", "tree": {"sha": "a738afc5f4c6a12f08ee4b652eeec801ddc8b784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a738afc5f4c6a12f08ee4b652eeec801ddc8b784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75db7cc49de7342420dce56528136319bc02bad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75db7cc49de7342420dce56528136319bc02bad0", "html_url": "https://github.com/rust-lang/rust/commit/75db7cc49de7342420dce56528136319bc02bad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75db7cc49de7342420dce56528136319bc02bad0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6129921529e2b4787a0d206244c7a858622b8d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6129921529e2b4787a0d206244c7a858622b8d6d", "html_url": "https://github.com/rust-lang/rust/commit/6129921529e2b4787a0d206244c7a858622b8d6d"}], "stats": {"total": 74, "additions": 21, "deletions": 53}, "files": [{"sha": "81750efd169e8abd23211dfcc529bbe277ee1ebf", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75db7cc49de7342420dce56528136319bc02bad0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75db7cc49de7342420dce56528136319bc02bad0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=75db7cc49de7342420dce56528136319bc02bad0", "patch": "@@ -53,10 +53,8 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         source_info_set: indexmap::IndexSet::new(),\n     };\n \n-    with_unimpl_span(fx.mir.span, || {\n-        crate::abi::codegen_fn_prelude(&mut fx, start_ebb);\n-        codegen_fn_content(&mut fx);\n-    });\n+    crate::abi::codegen_fn_prelude(&mut fx, start_ebb);\n+    codegen_fn_content(&mut fx);\n \n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n     let instance = fx.instance;\n@@ -500,7 +498,7 @@ fn trans_stmt<'tcx>(\n                             to.write_cvalue(fx, operand);\n                         }\n                     }\n-                    _ => unimpl!(\"shouldn't exist at trans {:?}\", to_place_and_rval.1),\n+                    _ => unreachable!(\"shouldn't exist at trans {:?}\", to_place_and_rval.1),\n                 },\n             }\n         }"}, {"sha": "19f53ebda1314060052d17fded110c9a5ee25cba", "filename": "src/driver.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75db7cc49de7342420dce56528136319bc02bad0/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75db7cc49de7342420dce56528136319bc02bad0/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=75db7cc49de7342420dce56528136319bc02bad0", "patch": "@@ -1,6 +1,5 @@\n use std::any::Any;\n use std::ffi::CString;\n-use std::fs::File;\n use std::os::raw::{c_char, c_int};\n \n use rustc::middle::cstore::EncodedMetadata;\n@@ -20,27 +19,21 @@ pub fn codegen_crate(\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    let mut log = if cfg!(debug_assertions) {\n-        Some(File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\")).unwrap())\n-    } else {\n-        None\n-    };\n-\n     if std::env::var(\"SHOULD_RUN\").is_ok()\n         && tcx.sess.crate_types.get().contains(&CrateType::Executable)\n     {\n         #[cfg(not(target_arch = \"wasm32\"))]\n-        let _: ! = run_jit(tcx, &mut log);\n+        let _: ! = run_jit(tcx);\n \n         #[cfg(target_arch = \"wasm32\")]\n         panic!(\"jit not supported on wasm\");\n     }\n \n-    run_aot(tcx, metadata, need_metadata_module, &mut log)\n+    run_aot(tcx, metadata, need_metadata_module)\n }\n \n #[cfg(not(target_arch = \"wasm32\"))]\n-fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n+fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n     let imported_symbols = load_imported_symbols_for_jit(tcx);\n@@ -67,7 +60,7 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n         .declare_function(\"main\", Linkage::Import, &sig)\n         .unwrap();\n \n-    codegen_cgus(tcx, &mut jit_module, &mut None, log);\n+    codegen_cgus(tcx, &mut jit_module, &mut None);\n     crate::allocator::codegen(tcx, &mut jit_module);\n     jit_module.finalize_definitions();\n \n@@ -152,7 +145,6 @@ fn run_aot(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n-    log: &mut Option<File>,\n ) -> Box<CodegenResults> {\n     let new_module = |name: String| {\n         let module: Module<FaerieBackend> = Module::new(\n@@ -207,7 +199,7 @@ fn run_aot(\n         None\n     };\n \n-    codegen_cgus(tcx, &mut faerie_module, &mut debug, log);\n+    codegen_cgus(tcx, &mut faerie_module, &mut debug);\n \n     tcx.sess.abort_if_errors();\n \n@@ -285,7 +277,6 @@ fn codegen_cgus<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug: &mut Option<DebugContext<'tcx>>,\n-    log: &mut Option<File>,\n ) {\n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n@@ -294,7 +285,7 @@ fn codegen_cgus<'tcx>(\n         .flatten()\n         .collect::<FxHashMap<_, (_, _)>>();\n \n-    codegen_mono_items(tcx, module, debug.as_mut(), log, mono_items);\n+    codegen_mono_items(tcx, module, debug.as_mut(), mono_items);\n \n     crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n }\n@@ -303,7 +294,6 @@ fn codegen_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug_context: Option<&mut DebugContext<'tcx>>,\n-    log: &mut Option<File>,\n     mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n ) {\n     let mut cx = CodegenCx::new(tcx, module, debug_context);\n@@ -321,7 +311,7 @@ fn codegen_mono_items<'tcx>(\n         }\n \n         for (mono_item, (linkage, visibility)) in mono_items {\n-            crate::unimpl::try_unimpl(tcx, log, || {\n+            crate::unimpl::try_unimpl(tcx, mono_item.to_string(tcx, true), || {\n                 let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n                 trans_mono_item(&mut cx, mono_item, linkage);\n             });"}, {"sha": "60b113ade0d56fa166f1e12b53218699e872a916", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75db7cc49de7342420dce56528136319bc02bad0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75db7cc49de7342420dce56528136319bc02bad0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=75db7cc49de7342420dce56528136319bc02bad0", "patch": "@@ -105,7 +105,7 @@ mod prelude {\n     pub use crate::common::*;\n     pub use crate::debuginfo::{DebugContext, FunctionDebugContext};\n     pub use crate::trap::*;\n-    pub use crate::unimpl::{unimpl, with_unimpl_span};\n+    pub use crate::unimpl::unimpl;\n     pub use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n     pub use crate::{Caches, CodegenCx};\n "}, {"sha": "3e7dddc6445dcba052c6fed8fffbbfced8800816", "filename": "src/unimpl.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/75db7cc49de7342420dce56528136319bc02bad0/src%2Funimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75db7cc49de7342420dce56528136319bc02bad0/src%2Funimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funimpl.rs?ref=75db7cc49de7342420dce56528136319bc02bad0", "patch": "@@ -2,15 +2,11 @@\n //! a non-fatal error on not yet implemented things.\n \n use std::cell::RefCell;\n-use std::fs::File;\n-use std::io::Write;\n-\n-use syntax::source_map::Span;\n \n use rustc::ty::TyCtxt;\n \n thread_local! {\n-    static SPAN_STACK: RefCell<Vec<Span>> = RefCell::new(vec![]);\n+    static CURRENT_MSG: RefCell<String> = RefCell::new(String::new());\n }\n \n // Just public, because of the unimpl macro\n@@ -24,35 +20,21 @@ pub macro unimpl($($tt:tt)*) {\n     panic!(NonFatal(format!($($tt)*)));\n }\n \n-pub fn try_unimpl(tcx: TyCtxt, log: &mut Option<File>, f: impl FnOnce()) {\n-    let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| f()));\n+pub fn try_unimpl(tcx: TyCtxt, msg: String, f: impl FnOnce()) {\n+    CURRENT_MSG.with(|current_msg| {\n+        let old = std::mem::replace(&mut *current_msg.borrow_mut(), msg);\n+\n+        let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| f()));\n \n-    if let Err(err) = res {\n-        SPAN_STACK.with(|span_stack| {\n+        if let Err(err) = res {\n             match err.downcast::<NonFatal>() {\n                 Ok(non_fatal) => {\n-                    if cfg!(debug_assertions) {\n-                        writeln!(\n-                            log.as_mut().unwrap(),\n-                            \"{} at {:?}\",\n-                            &non_fatal.0,\n-                            span_stack.borrow()\n-                        )\n-                        .unwrap();\n-                    }\n-                    tcx.sess.err(&non_fatal.0)\n+                    tcx.sess.err(&format!(\"at {}: {}\", current_msg.borrow(), non_fatal.0));\n                 }\n                 Err(err) => ::std::panic::resume_unwind(err),\n             }\n-            span_stack.borrow_mut().clear();\n-        });\n-    }\n-}\n+        }\n \n-pub fn with_unimpl_span(span: Span, f: impl FnOnce()) {\n-    SPAN_STACK.with(|span_stack| {\n-        span_stack.borrow_mut().push(span);\n-        f();\n-        span_stack.borrow_mut().pop();\n+        *current_msg.borrow_mut() = old;\n     });\n }"}, {"sha": "f32ec10268e6bd9beef1aebc18ca6d58658b9b66", "filename": "test.sh", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75db7cc49de7342420dce56528136319bc02bad0/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/75db7cc49de7342420dce56528136319bc02bad0/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=75db7cc49de7342420dce56528136319bc02bad0", "patch": "@@ -100,5 +100,3 @@ hyperfine --runs ${COMPILE_RUNS:-100} \"$COMPILE_MOD_BENCH_INLINE\" \"$COMPILE_MOD_\n echo\n echo \"[BENCH RUN] mod_bench\"\n hyperfine --runs ${RUN_RUNS:-10} ./target/out/mod_bench{,_inline} ./target/out/mod_bench_llvm_*\n-\n-cat target/out/log.txt | sort | uniq -c"}]}