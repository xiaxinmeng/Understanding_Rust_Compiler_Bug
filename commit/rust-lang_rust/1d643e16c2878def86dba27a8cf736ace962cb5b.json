{"sha": "1d643e16c2878def86dba27a8cf736ace962cb5b", "node_id": "C_kwDOAAsO6NoAKDFkNjQzZTE2YzI4NzhkZWY4NmRiYTI3YThjZjczNmFjZTk2MmNiNWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T05:07:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T05:07:02Z"}, "message": "Rollup merge of #112108 - GuillaumeGomez:reexport-doc-hidden-private, r=notriddle\n\nFix re-export of doc hidden item inside private item not displayed\n\nThis PR fixes this bug:\n\n```rust\nmod private_module {\n    #[doc(hidden)]\n    pub struct Public;\n}\n\npub use crate::private_module::Public as Foo;\n```\n\n`pub use crate::private_module::Public as Foo;` should be visible in the generated doc (and not inlined!) but currently isn't. This PR fixes it.\n\nr? `@notriddle`", "tree": {"sha": "f12e11c45bbc6efa705144221d5d09c587d730ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12e11c45bbc6efa705144221d5d09c587d730ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d643e16c2878def86dba27a8cf736ace962cb5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdtX2CRBK7hj4Ov3rIwAAEPUIAAhw23eAaQxNCM0RRwm43kPE\nC7KPk6+0XrsZMPec8rgF8yCTUfIwol6Go8/9Edic0mpQ6a9P2FAP7GUlPxIU/NyB\nowhtCwApUOBAsLYEw46jQw8vfDxGLGuQj6W+OMgRK0qD7m2haU3+RpvrYfrbpdf6\nzJXERytL0vnVEAB6ea3P5hWAQMIVC3LQfvfGRhXwp3EqREBDCMttElsRGSqrxRhu\nLAFlRpUURHyWTnrLAw3aKR30IyTVeNHeLd3/7BlMNxQjXmBMIzHiTlhnr51XBkRp\nCRhGo5gf5bSwmj+Q23xSoGlZRPaotV3OBHrJm+uLLZKOkqHHzuG9Pmc2h/x0JdQ=\n=jMys\n-----END PGP SIGNATURE-----\n", "payload": "tree f12e11c45bbc6efa705144221d5d09c587d730ae\nparent 88160ab94cfbb15447d4c5715dd84552173ac330\nparent 9906504c64a5adfbce3b6bb6a467e4d2d6f39af8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685509622 +0200\ncommitter GitHub <noreply@github.com> 1685509622 +0200\n\nRollup merge of #112108 - GuillaumeGomez:reexport-doc-hidden-private, r=notriddle\n\nFix re-export of doc hidden item inside private item not displayed\n\nThis PR fixes this bug:\n\n```rust\nmod private_module {\n    #[doc(hidden)]\n    pub struct Public;\n}\n\npub use crate::private_module::Public as Foo;\n```\n\n`pub use crate::private_module::Public as Foo;` should be visible in the generated doc (and not inlined!) but currently isn't. This PR fixes it.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d643e16c2878def86dba27a8cf736ace962cb5b", "html_url": "https://github.com/rust-lang/rust/commit/1d643e16c2878def86dba27a8cf736ace962cb5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d643e16c2878def86dba27a8cf736ace962cb5b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88160ab94cfbb15447d4c5715dd84552173ac330", "url": "https://api.github.com/repos/rust-lang/rust/commits/88160ab94cfbb15447d4c5715dd84552173ac330", "html_url": "https://github.com/rust-lang/rust/commit/88160ab94cfbb15447d4c5715dd84552173ac330"}, {"sha": "9906504c64a5adfbce3b6bb6a467e4d2d6f39af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9906504c64a5adfbce3b6bb6a467e4d2d6f39af8", "html_url": "https://github.com/rust-lang/rust/commit/9906504c64a5adfbce3b6bb6a467e4d2d6f39af8"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "abb9229fbd51a9bc58605caac389a3ea98d38c0b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1d643e16c2878def86dba27a8cf736ace962cb5b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d643e16c2878def86dba27a8cf736ace962cb5b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1d643e16c2878def86dba27a8cf736ace962cb5b", "patch": "@@ -267,6 +267,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let is_no_inline = use_attrs.lists(sym::doc).has_word(sym::no_inline)\n             || use_attrs.lists(sym::doc).has_word(sym::hidden);\n \n+        if is_no_inline {\n+            return false;\n+        }\n+\n         // For cross-crate impl inlining we need to know whether items are\n         // reachable in documentation -- a previously unreachable item can be\n         // made reachable by cross-crate inlining which we're checking here.\n@@ -281,31 +285,38 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         };\n \n         let is_private = !self.cx.cache.effective_visibilities.is_directly_public(tcx, ori_res_did);\n-        let is_hidden = inherits_doc_hidden(tcx, res_did, None);\n+        let is_hidden = tcx.is_doc_hidden(ori_res_did);\n+        let item = tcx.hir().get_by_def_id(res_did);\n \n-        // Only inline if requested or if the item would otherwise be stripped.\n-        if (!please_inline && !is_private && !is_hidden) || is_no_inline {\n-            return false;\n-        }\n-\n-        if !please_inline &&\n-            let Some(item_def_id) = reexport_chain(tcx, def_id, res_did).iter()\n+        if !please_inline {\n+            let inherits_hidden = inherits_doc_hidden(tcx, res_did, None);\n+            // Only inline if requested or if the item would otherwise be stripped.\n+            //\n+            // If it's a doc hidden module, we need to keep it in case some of its inner items\n+            // are re-exported.\n+            if (!is_private && !inherits_hidden) || (\n+                is_hidden &&\n+                !matches!(item, Node::Item(&hir::Item { kind: hir::ItemKind::Mod(_), .. }))\n+            ) {\n+                return false;\n+            } else if let Some(item_def_id) = reexport_chain(tcx, def_id, res_did).iter()\n                 .flat_map(|reexport| reexport.id()).map(|id| id.expect_local())\n                 .chain(iter::once(res_did)).nth(1) &&\n-            item_def_id != def_id &&\n-            self\n-                .cx\n-                .cache\n-                .effective_visibilities\n-                .is_directly_public(tcx, item_def_id.to_def_id()) &&\n-            !inherits_doc_hidden(tcx, item_def_id, None)\n-        {\n-            // The imported item is public and not `doc(hidden)` so no need to inline it.\n-            return false;\n+                item_def_id != def_id &&\n+                self\n+                    .cx\n+                    .cache\n+                    .effective_visibilities\n+                    .is_directly_public(tcx, item_def_id.to_def_id()) &&\n+                !inherits_doc_hidden(tcx, item_def_id, None)\n+            {\n+                // The imported item is public and not `doc(hidden)` so no need to inline it.\n+                return false;\n+            }\n         }\n \n         let is_bang_macro = matches!(\n-            tcx.hir().get_by_def_id(res_did),\n+            item,\n             Node::Item(&hir::Item { kind: hir::ItemKind::Macro(_, MacroKind::Bang), .. })\n         );\n \n@@ -317,12 +328,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             // Bang macros are handled a bit on their because of how they are handled by the\n             // compiler. If they have `#[doc(hidden)]` and the re-export doesn't have\n             // `#[doc(inline)]`, then we don't inline it.\n-            Node::Item(_)\n-                if is_bang_macro\n-                    && !please_inline\n-                    && renamed.is_some()\n-                    && self.cx.tcx.is_doc_hidden(ori_res_did) =>\n-            {\n+            Node::Item(_) if is_bang_macro && !please_inline && renamed.is_some() && is_hidden => {\n                 return false;\n             }\n             Node::Item(&hir::Item { kind: hir::ItemKind::Mod(ref m), .. }) if glob => {\n@@ -455,6 +461,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                             is_glob,\n                             please_inline,\n                         ) {\n+                            debug!(\"Inlining {:?}\", item.owner_id.def_id);\n                             continue;\n                         }\n                     }"}, {"sha": "1e4216d3c0cac46bd9a224114bdf51940b4ae46c", "filename": "tests/rustdoc/reexport-doc-hidden-inside-private.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d643e16c2878def86dba27a8cf736ace962cb5b/tests%2Frustdoc%2Freexport-doc-hidden-inside-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d643e16c2878def86dba27a8cf736ace962cb5b/tests%2Frustdoc%2Freexport-doc-hidden-inside-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-doc-hidden-inside-private.rs?ref=1d643e16c2878def86dba27a8cf736ace962cb5b", "patch": "@@ -0,0 +1,16 @@\n+// This test ensures that a re-export of  `#[doc(hidden)]` item inside a private\n+// module will still be displayed (the re-export, not the item).\n+\n+#![crate_name = \"foo\"]\n+\n+mod private_module {\n+    #[doc(hidden)]\n+    pub struct Public;\n+}\n+\n+// @has 'foo/index.html'\n+// @has - '//*[@id=\"reexport.Foo\"]/code' 'pub use crate::private_module::Public as Foo;'\n+pub use crate::private_module::Public as Foo;\n+// Glob re-exports with no visible items should not be displayed.\n+// @count - '//*[@class=\"item-table\"]/li' 1\n+pub use crate::private_module::*;"}]}