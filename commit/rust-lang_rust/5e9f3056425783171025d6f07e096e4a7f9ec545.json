{"sha": "5e9f3056425783171025d6f07e096e4a7f9ec545", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWYzMDU2NDI1NzgzMTcxMDI1ZDZmMDdlMDk2ZTRhN2Y5ZWM1NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-20T15:28:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-20T15:28:08Z"}, "message": "Auto merge of #29187 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #29158, #29162, #29175, #29176\n- Failed merges:", "tree": {"sha": "561cec877db96ede40ff653c7133d5f640bab7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/561cec877db96ede40ff653c7133d5f640bab7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9f3056425783171025d6f07e096e4a7f9ec545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9f3056425783171025d6f07e096e4a7f9ec545", "html_url": "https://github.com/rust-lang/rust/commit/5e9f3056425783171025d6f07e096e4a7f9ec545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9f3056425783171025d6f07e096e4a7f9ec545/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229385c4f81507b53921fdc211b36fa5f1988c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/229385c4f81507b53921fdc211b36fa5f1988c6c", "html_url": "https://github.com/rust-lang/rust/commit/229385c4f81507b53921fdc211b36fa5f1988c6c"}, {"sha": "e058318b2c5352994ca8bcd6dd39e99e6ec20bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e058318b2c5352994ca8bcd6dd39e99e6ec20bdb", "html_url": "https://github.com/rust-lang/rust/commit/e058318b2c5352994ca8bcd6dd39e99e6ec20bdb"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "ad7c65032c76995d03896affcc372543b2706a05", "filename": "src/doc/nomicon/dropck.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Fdoc%2Fnomicon%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Fdoc%2Fnomicon%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fdropck.md?ref=5e9f3056425783171025d6f07e096e4a7f9ec545", "patch": "@@ -220,6 +220,7 @@ checking the implicit assertion that no potentially expired data\n It is sometimes obvious that no such access can occur, like the case above.\n However, when dealing with a generic type parameter, such access can\n occur indirectly. Examples of such indirect access are:\n+\n  * invoking a callback,\n  * via a trait method call.\n "}, {"sha": "a5d5742a4c62151912fae5e377def09ec5eb8530", "filename": "src/doc/nomicon/leaking.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Fdoc%2Fnomicon%2Fleaking.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Fdoc%2Fnomicon%2Fleaking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fleaking.md?ref=5e9f3056425783171025d6f07e096e4a7f9ec545", "patch": "@@ -135,7 +135,7 @@ impl<T> Rc<T> {\n     fn new(data: T) -> Self {\n         unsafe {\n             // Wouldn't it be nice if heap::allocate worked like this?\n-            let ptr = heap::allocate<RcBox<T>>();\n+            let ptr = heap::allocate::<RcBox<T>>();\n             ptr::write(ptr, RcBox {\n                 data: data,\n                 ref_count: 1,"}, {"sha": "f3ddb2a9fffe45155fe69369245e29a822da6d3f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5e9f3056425783171025d6f07e096e4a7f9ec545", "patch": "@@ -538,7 +538,7 @@ impl<T> fmt::Pointer for Unique<T> {\n /// building abstractions like `Rc<T>` or `Arc<T>`, which internally\n /// use raw pointers to manage the memory that they own.\n #[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n-           issue = \"0\")]\n+           issue = \"27730\")]\n pub struct Shared<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -551,37 +551,37 @@ pub struct Shared<T: ?Sized> {\n \n /// `Shared` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> !Send for Shared<T> { }\n \n /// `Shared` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> !Sync for Shared<T> { }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Shared<T> {\n     /// Creates a new `Shared`.\n     pub unsafe fn new(ptr: *mut T) -> Self {\n         Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Clone for Shared<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Copy for Shared<T> { }\n \n #[cfg(not(stage0))] // remove cfg after new snapshot\n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsize<U> { }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Deref for Shared<T> {\n     type Target = *mut T;\n \n@@ -591,7 +591,7 @@ impl<T: ?Sized> Deref for Shared<T> {\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"0\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T> fmt::Pointer for Shared<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&*self.pointer, f)"}, {"sha": "9d03022bb84e766b57caa326d14874ff04227d57", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9f3056425783171025d6f07e096e4a7f9ec545/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=5e9f3056425783171025d6f07e096e4a7f9ec545", "patch": "@@ -625,8 +625,8 @@ mod tests {\n         drop(p.wait());\n     }\n \n-    #[cfg(unix)]\n     #[cfg(all(unix, not(target_os=\"android\")))]\n+    #[test]\n     fn signal_reported_right() {\n         use os::unix::process::ExitStatusExt;\n "}]}