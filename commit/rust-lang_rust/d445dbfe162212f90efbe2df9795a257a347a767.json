{"sha": "d445dbfe162212f90efbe2df9795a257a347a767", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDVkYmZlMTYyMjEyZjkwZWZiZTJkZjk3OTVhMjU3YTM0N2E3Njc=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-12T13:07:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-12T13:07:12Z"}, "message": "Merge pull request #3291 from JoshMcguigan/cmp_owned-3289\n\ncmp_owned wording and false positive", "tree": {"sha": "c1e19eeaaf1df6a66f6861456abb6f5cab9bb4fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e19eeaaf1df6a66f6861456abb6f5cab9bb4fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d445dbfe162212f90efbe2df9795a257a347a767", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwJyACRBK7hj4Ov3rIwAAdHIIALLkeRianzpu4q1QTyLi46oY\npe4/D8Kbk+7JikDnFcuGfWdu780kIcrzDk2CPo/iDjWj/DM0b+apu+RS2gBPCnu9\nTsR87LUl7TbK5BhSvqM9doLjzfjMfD+3oRO4/ZCfn4drs0YIVgHAb8J9ouNTOCeK\nXDlAnynF+++AcY3SNNNVH8+7hoQ9JjRPsl/ZyOR6OUSZC1IzYWW6rGeVebXESlvb\n5lhDmCd/6Xhf0jp6X24jEurS11GCufpYn46mAOBb7EVNFwHXDKO/Ip4V12hNahhQ\nvbZ1nMlFfIIA/ppOMvLe6Wcggto1ZGpO8gv+cu7Ar/lT5EIkr79YLoVHQkg/eJ4=\n=Vahj\n-----END PGP SIGNATURE-----\n", "payload": "tree c1e19eeaaf1df6a66f6861456abb6f5cab9bb4fd\nparent 7557269db2ca3d891d31470cbf7982df15827ae2\nparent 352863065cb644a4f59fa5655601960e34bf77e7\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1539349632 +0200\ncommitter GitHub <noreply@github.com> 1539349632 +0200\n\nMerge pull request #3291 from JoshMcguigan/cmp_owned-3289\n\ncmp_owned wording and false positive"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d445dbfe162212f90efbe2df9795a257a347a767", "html_url": "https://github.com/rust-lang/rust/commit/d445dbfe162212f90efbe2df9795a257a347a767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d445dbfe162212f90efbe2df9795a257a347a767/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7557269db2ca3d891d31470cbf7982df15827ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7557269db2ca3d891d31470cbf7982df15827ae2", "html_url": "https://github.com/rust-lang/rust/commit/7557269db2ca3d891d31470cbf7982df15827ae2"}, {"sha": "352863065cb644a4f59fa5655601960e34bf77e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/352863065cb644a4f59fa5655601960e34bf77e7", "html_url": "https://github.com/rust-lang/rust/commit/352863065cb644a4f59fa5655601960e34bf77e7"}], "stats": {"total": 89, "additions": 63, "deletions": 26}, "files": [{"sha": "1cf7345e8dfa8113cbe4f997538a989b2791571f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d445dbfe162212f90efbe2df9795a257a347a767/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445dbfe162212f90efbe2df9795a257a347a767/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=d445dbfe162212f90efbe2df9795a257a347a767", "patch": "@@ -21,7 +21,7 @@ use crate::utils::{get_item_name, get_parent_expr, implements_trait, in_constant\n             iter_input_pats, last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint,\n             span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use crate::utils::sugg::Sugg;\n-use crate::syntax::ast::{LitKind, CRATE_NODE_ID};\n+use crate::syntax::ast::LitKind;\n use crate::consts::{constant, Constant};\n use crate::rustc_errors::Applicability;\n \n@@ -535,34 +535,39 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n         return;\n     }\n \n+    let other_gets_derefed = match other.node {\n+        ExprKind::Unary(UnDeref, _) => true,\n+        _ => false,\n+    };\n+\n+    let lint_span = if other_gets_derefed {\n+        expr.span.to(other.span)\n+    } else {\n+        expr.span\n+    };\n+\n     span_lint_and_then(\n         cx,\n         CMP_OWNED,\n-        expr.span,\n+        lint_span,\n         \"this creates an owned instance just for comparison\",\n         |db| {\n-            // this is as good as our recursion check can get, we can't prove that the\n-            // current function is\n-            // called by\n-            // PartialEq::eq, but we can at least ensure that this code is not part of it\n-            let parent_fn = cx.tcx.hir.get_parent(expr.id);\n-            let parent_impl = cx.tcx.hir.get_parent(parent_fn);\n-            if parent_impl != CRATE_NODE_ID {\n-                if let Node::Item(item) = cx.tcx.hir.get(parent_impl) {\n-                    if let ItemKind::Impl(.., Some(ref trait_ref), _, _) = item.node {\n-                        if trait_ref.path.def.def_id() == partial_eq_trait_id {\n-                            // we are implementing PartialEq, don't suggest not doing `to_owned`, otherwise\n-                            // we go into\n-                            // recursion\n-                            db.span_label(expr.span, \"try calling implementing the comparison without allocating\");\n-                            return;\n-                        }\n-                    }\n-                }\n+            // this also catches PartialEq implementations that call to_owned\n+            if other_gets_derefed {\n+                db.span_label(lint_span, \"try implementing the comparison without allocating\");\n+                return;\n             }\n-            let try_hint = if deref_arg_impl_partial_eq_other { format!(\"*{}\", snip) } else { snip.to_string() };\n+\n+            let try_hint = if deref_arg_impl_partial_eq_other {\n+                // suggest deref on the left\n+                format!(\"*{}\", snip)\n+            } else {\n+                // suggest dropping the to_owned on the left\n+                snip.to_string()\n+            };\n+\n             db.span_suggestion_with_applicability(\n-                expr.span,\n+                lint_span,\n                 \"try\",\n                 try_hint,\n                 Applicability::MachineApplicable, // snippet"}, {"sha": "dc3d62ddfa69c8a589052f98805cce85111debde", "filename": "tests/ui/cmp_owned.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d445dbfe162212f90efbe2df9795a257a347a767/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445dbfe162212f90efbe2df9795a257a347a767/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=d445dbfe162212f90efbe2df9795a257a347a767", "patch": "@@ -35,6 +35,16 @@ fn main() {\n     \"abc\".chars().filter(|c| c.to_owned() != 'X');\n \n     \"abc\".chars().filter(|c| *c != 'X');\n+\n+    let x = &Baz;\n+    let y = &Baz;\n+\n+    y.to_owned() == *x;\n+\n+    let x = &&Baz;\n+    let y = &Baz;\n+\n+    y.to_owned() == **x;\n }\n \n struct Foo;\n@@ -67,3 +77,13 @@ impl std::borrow::Borrow<Foo> for Bar {\n         &FOO\n     }\n }\n+\n+#[derive(PartialEq)]\n+struct Baz;\n+\n+impl ToOwned for Baz {\n+    type Owned = Baz;\n+    fn to_owned(&self) -> Baz {\n+        Baz\n+    }\n+}"}, {"sha": "a7371ab4b6c3fbe380200d2f6365b89cd34db2ec", "filename": "tests/ui/cmp_owned.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d445dbfe162212f90efbe2df9795a257a347a767/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d445dbfe162212f90efbe2df9795a257a347a767/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=d445dbfe162212f90efbe2df9795a257a347a767", "patch": "@@ -37,10 +37,22 @@ error: this creates an owned instance just for comparison\n    |                              ^^^^^^^^^^^^ help: try: `*c`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/cmp_owned.rs:44:9\n+  --> $DIR/cmp_owned.rs:42:5\n    |\n-44 |         self.to_owned() == *other\n-   |         ^^^^^^^^^^^^^^^ try calling implementing the comparison without allocating\n+42 |     y.to_owned() == *x;\n+   |     ^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n \n-error: aborting due to 7 previous errors\n+error: this creates an owned instance just for comparison\n+  --> $DIR/cmp_owned.rs:47:5\n+   |\n+47 |     y.to_owned() == **x;\n+   |     ^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n+\n+error: this creates an owned instance just for comparison\n+  --> $DIR/cmp_owned.rs:54:9\n+   |\n+54 |         self.to_owned() == *other\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n+\n+error: aborting due to 9 previous errors\n "}]}