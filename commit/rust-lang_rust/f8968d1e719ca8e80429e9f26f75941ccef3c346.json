{"sha": "f8968d1e719ca8e80429e9f26f75941ccef3c346", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OTY4ZDFlNzE5Y2E4ZTgwNDI5ZTlmMjZmNzU5NDFjY2VmM2MzNDY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T12:49:40Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T12:49:40Z"}, "message": "Remove uses of tuples from the test suite", "tree": {"sha": "2322825f743139398d2cff3950e9e75690177beb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2322825f743139398d2cff3950e9e75690177beb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8968d1e719ca8e80429e9f26f75941ccef3c346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8968d1e719ca8e80429e9f26f75941ccef3c346", "html_url": "https://github.com/rust-lang/rust/commit/f8968d1e719ca8e80429e9f26f75941ccef3c346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8968d1e719ca8e80429e9f26f75941ccef3c346/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea537779e01359cf8da6944218362d44bfaee83", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea537779e01359cf8da6944218362d44bfaee83", "html_url": "https://github.com/rust-lang/rust/commit/aea537779e01359cf8da6944218362d44bfaee83"}], "stats": {"total": 455, "additions": 191, "deletions": 264}, "files": [{"sha": "f08c55b909f4f5d180989ca8fca12ee46f58452a", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -21,24 +21,24 @@ obj myrandom(mutable u32 last) {\n     }\n }\n \n-type aminoacids = tup(char, u32);\n+type aminoacids = rec(char ch, u32 prob);\n \n fn make_cumulative(vec[aminoacids] aa) -> vec[aminoacids] {\n     let u32 cp = 0u32;\n     let vec[aminoacids] ans = [];\n-    for (aminoacids a in aa) { cp += a._1; ans += [tup(a._0, cp)]; }\n+    for (aminoacids a in aa) { cp += a.prob; ans += [rec(ch=a.ch, prob=cp)]; }\n     ret ans;\n }\n \n fn select_random(u32 r, vec[aminoacids] genelist) -> char {\n-    if (r < genelist.(0)._1) { ret genelist.(0)._0; }\n+    if (r < genelist.(0).prob) { ret genelist.(0).ch; }\n     fn bisect(vec[aminoacids] v, uint lo, uint hi, u32 target) -> char {\n         if (hi > lo + 1u) {\n             let uint mid = lo + (hi - lo) / 2u;\n-            if (target < v.(mid)._1) {\n+            if (target < v.(mid).prob) {\n                 be bisect(v, lo, mid, target);\n             } else { be bisect(v, mid, hi, target); }\n-        } else { ret v.(hi)._0; }\n+        } else { ret v.(hi).ch; }\n     }\n     ret bisect(genelist, 0u, vec::len[aminoacids](genelist) - 1u, r);\n }\n@@ -65,16 +65,18 @@ fn make_repeat_fasta(str id, str desc, str s, int n) {\n     if (str::byte_len(op) > 0u) { log op; }\n }\n \n+fn acid(char ch, u32 prob) { ret rec(ch=ch, prob=prob); }\n+\n fn main(vec[str] args) {\n     let vec[aminoacids] iub =\n-        make_cumulative([tup('a', 27u32), tup('c', 12u32), tup('g', 12u32),\n-                         tup('t', 27u32), tup('B', 2u32), tup('D', 2u32),\n-                         tup('H', 2u32), tup('K', 2u32), tup('M', 2u32),\n-                         tup('N', 2u32), tup('R', 2u32), tup('S', 2u32),\n-                         tup('V', 2u32), tup('W', 2u32), tup('Y', 2u32)]);\n+        make_cumulative([acid('a', 27u32), acid('c', 12u32), acid('g', 12u32),\n+                         acid('t', 27u32), acid('B', 2u32), acid('D', 2u32),\n+                         acid('H', 2u32), acid('K', 2u32), acid('M', 2u32),\n+                         acid('N', 2u32), acid('R', 2u32), acid('S', 2u32),\n+                         acid('V', 2u32), acid('W', 2u32), acid('Y', 2u32)]);\n     let vec[aminoacids] homosapiens =\n-        make_cumulative([tup('a', 30u32), tup('c', 20u32), tup('g', 20u32),\n-                         tup('t', 30u32)]);\n+        make_cumulative([acid('a', 30u32), acid('c', 20u32), acid('g', 20u32),\n+                         acid('t', 30u32)]);\n     let str alu =\n         \"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\" +\n             \"GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\" +"}, {"sha": "1131c5999051b663936ec76fa42b5a1e57ffb144", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -134,9 +134,10 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        for each(@tup(str, chan[reduce_proto]) kv in intermediates.items()) {\n+        for each(@rec(str key, chan[reduce_proto] val) kv\n+                 in intermediates.items()) {\n             // log_err \"sending done to reducer for \" + kv._0;\n-            kv._1 <| release;\n+            kv.val <| release;\n         }\n \n         ctrl <| mapper_done;\n@@ -228,9 +229,10 @@ mod map_reduce {\n             }\n         }\n \n-        for each(@tup(str, chan[reduce_proto]) kv in reducers.items()) {\n+        for each(@rec(str key, chan[reduce_proto] val) kv\n+                 in reducers.items()) {\n             // log_err \"sending done to reducer for \" + kv._0;\n-            kv._1 <| done;\n+            kv.val <| done;\n         }\n \n         // log_err #fmt(\"joining %u tasks\", ivec::len(tasks));"}, {"sha": "1d0595c745e8fae33f9804422aa12b815e3142e3", "filename": "src/test/compile-fail/binop-add-tup-assign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,7 +1,7 @@\n // xfail-stage0\n-// error-pattern:+ cannot be applied to type `tup(bool)`\n+// error-pattern:+ cannot be applied to type `rec(bool x)`\n \n fn main() {\n-  auto x = tup(true);\n-  x += tup(false);\n+  auto x = rec(x=true);\n+  x += rec(x=false);\n }\n\\ No newline at end of file"}, {"sha": "668a3d78a7665f0d12a1577d4f28a98c7d3fc798", "filename": "src/test/compile-fail/binop-add-tup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,6 +1,6 @@\n // xfail-stage0\n-// error-pattern:+ cannot be applied to type `tup(bool)`\n+// error-pattern:+ cannot be applied to type `rec(bool x)`\n \n fn main() {\n-  auto x = tup(true) + tup(false);\n+  auto x = rec(x=true) + rec(x=false);\n }\n\\ No newline at end of file"}, {"sha": "c95893dc183d7ccfa0f46091a2e267988ae0b828", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -9,9 +9,10 @@ type var_info = rec(uint a, uint b);\n fn bitv_to_str(fn_info enclosing, bitv::t v) -> str {\n   auto s = \"\";\n \n-  // error is that the value type in the hash map is var_info, not a tuple\n-  for each (@tup(uint, tup(uint, uint)) p in enclosing.vars.items()) {\n-    if (bitv::get(v, p._1._0)) {\n+  // error is that the value type in the hash map is var_info, not a box\n+  for each (@rec(uint key, @uint val) p\n+            in enclosing.vars.items()) {\n+    if (bitv::get(v, *p.val)) {\n       s += \"foo\";\n     }\n   }"}, {"sha": "d3c37795ecb6811f539f5199bc2c6b3609227074", "filename": "src/test/compile-fail/item-name-overload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -4,7 +4,7 @@\n \n mod foo {\n   fn bar[T](T f) -> int { ret 17; }\n-  type bar[U, T] = tup(int, U, T);\n+  type bar[U, T] = rec(int a, U b, T c);\n }\n \n fn main() {}"}, {"sha": "b60007a4263e6c1a30fb358a2f634c16fff4307d", "filename": "src/test/compile-fail/writing-to-immutable-tup.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-tup.rs?ref=aea537779e01359cf8da6944218362d44bfaee83", "patch": "@@ -1,5 +0,0 @@\n-// error-pattern: assignment to immutable field\n-fn main() {\n-  let tup(int) t = tup(1);\n-  t._0 = 5;\n-}"}, {"sha": "c2f718f1ddb6ff8a50f0f14f16c56cdaa8fc5951", "filename": "src/test/run-pass/acyclic-unwind.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -4,12 +4,11 @@\n // xfail-stage3\n // -*- rust -*-\n \n-fn f(chan[int] c)\n-{\n-  type t = tup(int,int,int);\n+fn f(chan[int] c) {\n+  type t = rec(int _0, int _1, int _2);\n \n   // Allocate a box.\n-  let @t x = @tup(1,2,3);\n+  let @t x = @rec(_0=1, _1=2, _2=3);\n \n   // Signal parent that we've allocated a box.\n   c <| 1;"}, {"sha": "edc0ca36776b486f7d62d773b2267cddd13632cb", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-fn f[T, U](&T x, &U y) -> tup(T, U) { ret tup(x, y); }\n+fn f[T, U](&T x, &U y) -> rec(T a, U b) { ret rec(a=x, b=y); }\n \n-fn main() { log f(tup(3, 4, 5), 4)._0._0; log f(5, 6)._0; }\n\\ No newline at end of file\n+fn main() { log f(rec(x=3, y=4, z=5), 4).a.x; log f(5, 6).a; }\n\\ No newline at end of file"}, {"sha": "1743466e7a6b103d93f47f6a658ee3ceaa4a594d", "filename": "src/test/run-pass/autoderef-full-lval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-full-lval.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -4,17 +4,17 @@\n // -*- rust -*-\n type clam = rec(@int x, @int y);\n \n-type fish = tup(@int);\n+type fish = rec(@int a);\n \n fn main() {\n     let clam a = rec(x=@1, y=@2);\n     let clam b = rec(x=@10, y=@20);\n     let int z = a.x + b.y;\n     log z;\n     assert (z == 21);\n-    let fish forty = tup(@40);\n-    let fish two = tup(@2);\n-    let int answer = forty._0 + two._0;\n+    let fish forty = rec(a=@40);\n+    let fish two = rec(a=@2);\n+    let int answer = forty.a + two.a;\n     log answer;\n     assert (answer == 42);\n }\n\\ No newline at end of file"}, {"sha": "00d13c89cdf6a03d12d183629338e7b8069155c2", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -54,7 +54,7 @@ fn test_char() {\n fn test_box() {\n   assert @10 == 10;\n   assert 0xFF & @0xF0 == 0xF0;\n-  assert tup(1, 3) < @tup(1, 4);\n+  assert rec(a=1, b=3) < @rec(a=1, b=4);\n   assert @rec(a = 'x') != @rec(a = 'y');\n }\n "}, {"sha": "41e5a899887fc5f0c2be313ca1a398816a40b198", "filename": "src/test/run-pass/box-in-tup.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=aea537779e01359cf8da6944218362d44bfaee83", "patch": "@@ -1,3 +0,0 @@\n-\n-\n-fn main() { let tup(mutable @int) i = tup(mutable @10); i._0 = @11; }\n\\ No newline at end of file"}, {"sha": "a354f9042448d9329ae2ccd1bf812dfd5aea394e", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,12 +1,12 @@\n \n \n-type box[T] = tup(@T);\n+type box[T] = rec(@T c);\n \n-fn unbox[T](&box[T] b) -> T { ret *b._0; }\n+fn unbox[T](&box[T] b) -> T { ret *b.c; }\n \n fn main() {\n     let int foo = 17;\n-    let box[int] bfoo = tup(@foo);\n+    let box[int] bfoo = rec(c=@foo);\n     log \"see what's in our box\";\n     assert (unbox[int](bfoo) == foo);\n }\n\\ No newline at end of file"}, {"sha": "6c3433765218bafb629bc5f2068a648140a895d3", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -15,12 +15,12 @@ fn test_bool() {\n     test_generic[bool](true, eq);\n }\n \n-fn test_tup() {\n-    type t = tup(int, int);\n+fn test_rec() {\n+    type t = rec(int a, int b);\n \n-    fn compare_tup(&t t1, &t t2) -> bool { ret t1 == t2; }\n-    auto eq = bind compare_tup(_, _);\n-    test_generic[t](tup(1, 2), eq);\n+    fn compare_rec(&t t1, &t t2) -> bool { ret t1 == t2; }\n+    auto eq = bind compare_rec(_, _);\n+    test_generic[t](rec(a=1, b=2), eq);\n }\n \n-fn main() { test_bool(); test_tup(); }\n\\ No newline at end of file\n+fn main() { test_bool(); test_rec(); }\n\\ No newline at end of file"}, {"sha": "108db2b8cde24da078c1aa3a0bf7974d14a4250d", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -17,12 +17,12 @@ fn test_bool() {\n     test_generic[bool](true, eq);\n }\n \n-fn test_tup() {\n-    type t = tup(int, int);\n+fn test_rec() {\n+    type t = rec(int a, int b);\n \n-    fn compare_tup(&t t1, &t t2) -> bool { ret t1 == t2; }\n-    auto eq = bind compare_tup(_, _);\n-    test_generic[t](tup(1, 2), eq);\n+    fn compare_rec(&t t1, &t t2) -> bool { ret t1 == t2; }\n+    auto eq = bind compare_rec(_, _);\n+    test_generic[t](rec(a=1, b=2), eq);\n }\n \n-fn main() { test_bool(); test_tup(); }\n\\ No newline at end of file\n+fn main() { test_bool(); test_rec(); }\n\\ No newline at end of file"}, {"sha": "1cc531de8fd5be72fb9d50f7fc03d59ddbe3f1bc", "filename": "src/test/run-pass/expr-block-slot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -5,8 +5,8 @@\n \n // Regression test for issue #377\n fn main() {\n-    auto a = { auto b = tup(3); b };\n-    assert (a._0 == 3);\n+    auto a = { auto b = rec(a=3); b };\n+    assert (a.a == 3);\n     auto c = { auto d = rec(v=3); d };\n     assert (c.v == 3);\n }\n\\ No newline at end of file"}, {"sha": "72c24751a6a0011de674e876a4c9b5e10538094c", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -17,12 +17,12 @@ fn test_bool() {\n     test_generic[bool](true, false, eq);\n }\n \n-fn test_tup() {\n-    type t = tup(int, int);\n+fn test_rec() {\n+    type t = rec(int a, int b);\n \n-    fn compare_tup(&t t1, &t t2) -> bool { ret t1 == t2; }\n-    auto eq = bind compare_tup(_, _);\n-    test_generic[t](tup(1, 2), tup(2, 3), eq);\n+    fn compare_rec(&t t1, &t t2) -> bool { ret t1 == t2; }\n+    auto eq = bind compare_rec(_, _);\n+    test_generic[t](rec(a=1, b=2), rec(a=2, b=3), eq);\n }\n \n-fn main() { test_bool(); test_tup(); }\n\\ No newline at end of file\n+fn main() { test_bool(); test_rec(); }\n\\ No newline at end of file"}, {"sha": "39ac9620dab201b4d2e3b48620ae469416458ac3", "filename": "src/test/run-pass/foreach-box-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,9 +1,9 @@\n \n \n obj ob[K](K k) {\n-    iter foo() -> @tup(K) { put @tup(k); }\n+    iter foo() -> @rec(K a) { put @rec(a=k); }\n }\n \n-fn x(&ob[str] o) { for each (@tup(str) i in o.foo()) { } }\n+fn x(&ob[str] o) { for each (@rec(str a) i in o.foo()) { } }\n \n fn main() { auto o = ob[str](\"hi\" + \"there\"); x(o); }\n\\ No newline at end of file"}, {"sha": "eae0f61f1b5a5dccf840d10738a1bc527906862f", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,15 +1,15 @@\n \n \n-iter pairs() -> tup(int, int) {\n+iter pairs() -> rec(int _0, int _1) {\n     let int i = 0;\n     let int j = 0;\n-    while (i < 10) { put tup(i, j); i += 1; j += i; }\n+    while (i < 10) { put rec(_0=i, _1=j); i += 1; j += i; }\n }\n \n fn main() {\n     let int i = 10;\n     let int j = 0;\n-    for each (tup(int, int) p in pairs()) {\n+    for each (rec(int _0, int _1) p in pairs()) {\n         log p._0;\n         log p._1;\n         assert (p._0 + 10 == i);"}, {"sha": "c5337e9ecbaf9f339b2a12ae7a2d414ca066237e", "filename": "src/test/run-pass/generic-bind-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -3,8 +3,8 @@\n fn id[T](&T t) -> T { ret t; }\n \n fn main() {\n-    auto t = tup(1, 2, 3, 4, 5, 6, 7);\n-    assert (t._5 == 6);\n-    auto f0 = bind id[tup(int, int, int, int, int, int, int)](t);\n-    assert (f0()._5 == 6);\n+    auto t = rec(a=1, b=2, c=3, d=4, e=5, f=6, g=7);\n+    assert (t.f == 6);\n+    auto f0 = bind id(t);\n+    assert (f0().f == 6);\n }\n\\ No newline at end of file"}, {"sha": "e807788aeb2fbafe2e3442aa094298d9b21f20a8", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -3,8 +3,9 @@\n fn id[T](&T t) -> T { ret t; }\n \n fn main() {\n-    auto t = tup(1, 2, 3, 4, 5, 6, 7);\n+    auto t = rec(_0=1, _1=2, _2=3, _3=4, _4=5, _5=6, _6=7);\n     assert (t._5 == 6);\n-    auto f1 = bind id[tup(int, int, int, int, int, int, int)](_);\n+    auto f1 = bind id[rec(int _0, int _1, int _2, int _3, int _4,\n+                          int _5, int _6)](_);\n     assert (f1(t)._5 == 6);\n }\n\\ No newline at end of file"}, {"sha": "9020c61c8e0fba662349771d8353080c1e00a424", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,8 +1,8 @@\n \n \n-fn box[T](&tup(T, T, T) x) -> @tup(T, T, T) { ret @x; }\n+fn box[T](&rec(T x, T y, T z) x) -> @rec(T x, T y, T z) { ret @x; }\n \n fn main() {\n-    let @tup(int, int, int) x = box[int](tup(1, 2, 3));\n-    assert (x._1 == 2);\n+    let @rec(int x, int y, int z) x = box[int](rec(x=1, y=2, z=3));\n+    assert (x.y == 2);\n }\n\\ No newline at end of file"}, {"sha": "2ff8a1ab5eeff6d97869784b387d71913dfa4e2b", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -2,17 +2,17 @@\n \n fn g[X](&X x) -> X { ret x; }\n \n-fn f[T](&T t) -> tup(T, T) {\n-    type pair = tup(T, T);\n+fn f[T](&T t) -> rec(T a, T b) {\n+    type pair = rec(T a, T b);\n \n-    let pair x = tup(t, t);\n+    let pair x = rec(a=t, b=t);\n     ret g[pair](x);\n }\n \n fn main() {\n     auto b = f[int](10);\n-    log b._0;\n-    log b._1;\n-    assert (b._0 == 10);\n-    assert (b._1 == 10);\n+    log b.a;\n+    log b.b;\n+    assert (b.a == 10);\n+    assert (b.b == 10);\n }\n\\ No newline at end of file"}, {"sha": "979dc717d08f07a9accc83169dd3ea1c064a2529", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,17 +1,11 @@\n \n \n-type tupbox[T] = tup(@T);\n-\n type recbox[T] = rec(@T x);\n \n-fn tuplift[T](&T t) -> tupbox[T] { ret tup(@t); }\n-\n fn reclift[T](&T t) -> recbox[T] { ret rec(x=@t); }\n \n fn main() {\n     let int foo = 17;\n-    let tupbox[int] tbfoo = tuplift[int](foo);\n     let recbox[int] rbfoo = reclift[int](foo);\n-    assert (tbfoo._0 == foo);\n     assert (rbfoo.x == foo);\n }\n\\ No newline at end of file"}, {"sha": "8a35d43a7cc2152a85055ad5b109f90b8e74394c", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -4,24 +4,24 @@\n // -*- rust -*-\n fn id[T](&T x) -> T { ret x; }\n \n-type triple = tup(int, int, int);\n+type triple = rec(int x, int y, int z);\n \n fn main() {\n     auto x = 62;\n     auto y = 63;\n     auto a = 'a';\n     auto b = 'b';\n-    let triple p = tup(65, 66, 67);\n-    let triple q = tup(68, 69, 70);\n+    let triple p = rec(x=65, y=66, z=67);\n+    let triple q = rec(x=68, y=69, z=70);\n     y = id[int](x);\n     log y;\n     assert (x == y);\n     b = id[char](a);\n     log b;\n     assert (a == b);\n     q = id[triple](p);\n-    x = p._2;\n-    y = q._2;\n+    x = p.z;\n+    y = q.z;\n     log y;\n     assert (x == y);\n }\n\\ No newline at end of file"}, {"sha": "08dffe73443f202c43f0680ef6ce0d501959af88", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -5,14 +5,16 @@ obj handle[T](T data) {\n }\n \n fn main() {\n-    type rgb = tup(u8, u8, u8);\n+    type rgb = rec(u8 x, u8 y, u8 z);\n \n-    let handle[rgb] h = handle[rgb](tup(1 as u8, 2 as u8, 3 as u8));\n+    let handle[rgb] h = handle[rgb](rec(x=1 as u8,\n+                                        y=2 as u8,\n+                                        z=3 as u8));\n     log \"constructed object\";\n-    log h.get()._0;\n-    log h.get()._1;\n-    log h.get()._2;\n-    assert (h.get()._0 == 1 as u8);\n-    assert (h.get()._1 == 2 as u8);\n-    assert (h.get()._2 == 3 as u8);\n+    log h.get().x;\n+    log h.get().y;\n+    log h.get().z;\n+    assert (h.get().x == 1 as u8);\n+    assert (h.get().y == 2 as u8);\n+    assert (h.get().z == 3 as u8);\n }\n\\ No newline at end of file"}, {"sha": "7e7692dde7e9eaca1a8d22c0f7e307b99fa79766", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj buf[T](tup(T, T, T) data) {\n+obj buf[T](rec(T _0, T _1, T _2) data) {\n     fn get(int i) -> T {\n         if (i == 0) {\n             ret data._0;\n@@ -11,7 +11,7 @@ obj buf[T](tup(T, T, T) data) {\n }\n \n fn main() {\n-    let buf[int] b = buf[int](tup(1, 2, 3));\n+    let buf[int] b = buf[int](rec(_0=1, _1=2, _2=3));\n     log \"constructed object\";\n     log b.get(0);\n     log b.get(1);"}, {"sha": "f40091f82cda639dc936c407712a459c0c5da14d", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -7,13 +7,13 @@ tag noption[T] { some(T); }\n fn main() {\n     let noption[int] nop = some[int](5);\n     alt (nop) { case (some[int](?n)) { log n; assert (n == 5); } }\n-    let noption[tup(int, int)] nop2 = some[tup(int, int)](tup(17, 42));\n+    let noption[rec(int x, int y)] nop2 = some(rec(x=17, y=42));\n     alt (nop2) {\n-        case (some[tup(int, int)](?t)) {\n-            log t._0;\n-            log t._1;\n-            assert (t._0 == 17);\n-            assert (t._1 == 42);\n+        case (some(?t)) {\n+            log t.x;\n+            log t.y;\n+            assert (t.x == 17);\n+            assert (t.y == 42);\n         }\n     }\n }\n\\ No newline at end of file"}, {"sha": "96f6520b0813a9b581d0e6af3c583fad4f8f9599", "filename": "src/test/run-pass/generic-tup.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=aea537779e01359cf8da6944218362d44bfaee83", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-fn get_third[T](&tup(T, T, T) t) -> T { ret t._2; }\n-\n-fn main() {\n-    log get_third(tup(1, 2, 3));\n-    assert (get_third(tup(1, 2, 3)) == 3);\n-    assert (get_third(tup(5u8, 6u8, 7u8)) == 7u8);\n-}\n\\ No newline at end of file"}, {"sha": "c83e93605ca95fe180e24e96d3a368a17d8d2da3", "filename": "src/test/run-pass/generic-type-synonym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,6 +1,6 @@\n \n \n-type foo[T] = tup(T);\n+type foo[T] = rec(T a);\n \n type bar[T] = foo[T];\n "}, {"sha": "cdf2ee19c581ba2c0a9d3944870c152300ad9ed5", "filename": "src/test/run-pass/generic-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,9 +1,9 @@\n \n \n-type pair[T] = tup(T, T);\n+type pair[T] = rec(T x, T y);\n \n fn main() {\n-    let pair[int] x = tup(10, 12);\n-    assert (x._0 == 10);\n-    assert (x._1 == 12);\n+    let pair[int] x = rec(x=10, y=12);\n+    assert (x.x == 10);\n+    assert (x.y == 12);\n }\n\\ No newline at end of file"}, {"sha": "d4161f8de570ba05616ec14971c6f032b22e3cef", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -7,14 +7,14 @@\n // -*- rust -*-\n use std;\n \n-type cell = tup(mutable @list);\n+type cell = rec(mutable @list c);\n \n tag list { link(@cell); nil; }\n \n fn main() {\n-    let @cell first = @tup(mutable @nil());\n-    let @cell second = @tup(mutable @link(first));\n+    let @cell first = @rec(mutable c=@nil());\n+    let @cell second = @rec(mutable c=@link(first));\n     first._0 = @link(second);\n     std::sys.rustrt.gc();\n-    let @cell third = @tup(mutable @nil());\n+    let @cell third = @rec(mutable c=@nil());\n }\n\\ No newline at end of file"}, {"sha": "cdd93f1e1a7ab96f7003cdc3dee7b6a62eebcc38", "filename": "src/test/run-pass/move-1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,16 +1,16 @@\n-fn test(bool x, @tup(int, int, int) foo) -> int {\n+fn test(bool x, @rec(int x, int y, int z) foo) -> int {\n     auto bar = foo;\n-    let @tup(int,int,int) y;\n+    let @rec(int x,int y, int z) y;\n     if (x) {\n         y <- bar;\n     } else {\n-        y = @tup(4,5,6);\n+        y = @rec(x=4, y=5, z=6);\n     }\n-    ret y._1;\n+    ret y.y;\n }\n \n fn main() {\n-    auto x = @tup(1,2,3);\n+    auto x = @rec(x=1, y=2, z=3);\n     assert (test(true, x) == 2);\n     assert (test(true, x) == 2);\n     assert (test(true, x) == 2);"}, {"sha": "9534781e4f5a34c41a55a62c0cee19675a31b6c6", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,3 +1,7 @@\n \n \n-fn main() { auto x = @tup(1, 2, 3); auto y <- x; assert (y._1 == 2); }\n\\ No newline at end of file\n+fn main() {\n+    auto x = @rec(x=1, y=2, z=3);\n+    auto y <- x;\n+    assert (y.y == 2);\n+}\n\\ No newline at end of file"}, {"sha": "0e2cf487e270891204ec1a7d437de898f46b31a7", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,19 +1,19 @@\n use std;\n import std::uint;\n \n-fn test(bool x, @tup(int, int, int) foo) -> int {\n+fn test(bool x, @rec(int x, int y, int z) foo) -> int {\n     auto bar = foo;\n-    let @tup(int,int,int) y;\n+    let @rec(int x, int y, int z) y;\n     if (x) {\n         y <- bar;\n     } else {\n-        y = @tup(4,5,6);\n+        y = @rec(x=4, y=5, z=6);\n     }\n-    ret y._1;\n+    ret y.y;\n }\n \n fn main() {\n-    auto x = @tup(1,2,3);\n+    auto x = @rec(x=1, y=2, z=3);\n     for each (uint i in uint::range(0u, 10000u)) {\n         assert (test(true, x) == 2);\n     }"}, {"sha": "fe3dcd259363acc8878ada4e15db838207eb9088", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -2,11 +2,15 @@\n use std;\n import std::uint;\n \n-fn test(@tup(int, int, int) foo) -> @tup(int, int, int) {\n+fn test(@rec(int a, int b, int c) foo) -> @rec(int a, int b, int c) {\n     auto bar <- foo;\n     auto baz <- bar;\n     auto quux <- baz;\n     ret quux;\n }\n \n-fn main() { auto x = @tup(1, 2, 3); auto y = test(x); assert (y._2 == 3); }\n\\ No newline at end of file\n+fn main() {\n+    auto x = @rec(a=1, b=2, c=3);\n+    auto y = test(x);\n+    assert (y.c == 3);\n+}\n\\ No newline at end of file"}, {"sha": "ade3ae660accb874cf8fa620fe4a5f826d96ea2c", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -1,8 +1,6 @@\n \n-\n fn main() {\n     // This just tests whether the vec leaks its members.\n-\n-    let vec[mutable @tup(int, int)] pvec =\n-        [mutable @tup(1, 2), @tup(3, 4), @tup(5, 6)];\n+    let vec[mutable @rec(int a, int b)] pvec =\n+        [mutable @rec(a=1, b=2), @rec(a=3, b=4), @rec(a=5, b=6)];\n }\n\\ No newline at end of file"}, {"sha": "9e162a1f5955bb31ead1c3109c0b46151aa5843b", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -4,21 +4,21 @@ fn ret_int_i() -> int { ret 10; }\n \n fn ret_ext_i() -> @int { ret @10; }\n \n-fn ret_int_tup() -> tup(int, int) { ret tup(10, 10); }\n+fn ret_int_rec() -> rec(int a, int b) { ret rec(a=10, b=10); }\n \n-fn ret_ext_tup() -> @tup(int, int) { ret @tup(10, 10); }\n+fn ret_ext_rec() -> @rec(int a, int b) { ret @rec(a=10, b=10); }\n \n-fn ret_ext_mem() -> tup(@int, @int) { ret tup(@10, @10); }\n+fn ret_ext_mem() -> rec(@int a, @int b) { ret rec(a=@10, b=@10); }\n \n-fn ret_ext_ext_mem() -> @tup(@int, @int) { ret @tup(@10, @10); }\n+fn ret_ext_ext_mem() -> @rec(@int a, @int b) { ret @rec(a=@10, b=@10); }\n \n fn main() {\n     let int int_i;\n     let @int ext_i;\n-    let tup(int, int) int_tup;\n-    let @tup(int, int) ext_tup;\n-    let tup(@int, @int) ext_mem;\n-    let @tup(@int, @int) ext_ext_mem;\n+    let rec(int a, int b) int_rec;\n+    let @rec(int a, int b) ext_rec;\n+    let rec(@int a, @int b) ext_mem;\n+    let @rec(@int a, @int b) ext_ext_mem;\n     int_i = ret_int_i(); // initializing\n \n     int_i = ret_int_i(); // non-initializing\n@@ -31,17 +31,17 @@ fn main() {\n \n     ext_i = ret_ext_i(); // non-initializing\n \n-    int_tup = ret_int_tup(); // initializing\n+    int_rec = ret_int_rec(); // initializing\n \n-    int_tup = ret_int_tup(); // non-initializing\n+    int_rec = ret_int_rec(); // non-initializing\n \n-    int_tup = ret_int_tup(); // non-initializing\n+    int_rec = ret_int_rec(); // non-initializing\n \n-    ext_tup = ret_ext_tup(); // initializing\n+    ext_rec = ret_ext_rec(); // initializing\n \n-    ext_tup = ret_ext_tup(); // non-initializing\n+    ext_rec = ret_ext_rec(); // non-initializing\n \n-    ext_tup = ret_ext_tup(); // non-initializing\n+    ext_rec = ret_ext_rec(); // non-initializing\n \n     ext_mem = ret_ext_mem(); // initializing\n "}, {"sha": "6d81936e206827f03d63a500d401821692466548", "filename": "src/test/run-pass/rec-tup.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Frec-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Frec-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-tup.rs?ref=aea537779e01359cf8da6944218362d44bfaee83", "patch": "@@ -1,27 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-type point = rec(int x, int y);\n-\n-type rect = tup(point, point);\n-\n-fn f(rect r, int x1, int y1, int x2, int y2) {\n-    assert (r._0.x == x1);\n-    assert (r._0.y == y1);\n-    assert (r._1.x == x2);\n-    assert (r._1.y == y2);\n-}\n-\n-fn main() {\n-    let rect r = tup(rec(x=10, y=20), rec(x=11, y=22));\n-    assert (r._0.x == 10);\n-    assert (r._0.y == 20);\n-    assert (r._1.x == 11);\n-    assert (r._1.y == 22);\n-    let rect r2 = r;\n-    let int x = r2._0.x;\n-    assert (x == 10);\n-    f(r, 10, 20, 11, 22);\n-    f(r2, 10, 20, 11, 22);\n-}\n\\ No newline at end of file"}, {"sha": "25425e6ccf3859ecf5998c4889463149cc74b296", "filename": "src/test/run-pass/simple-qsort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fsimple-qsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fsimple-qsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-qsort.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -14,7 +14,7 @@ fn test_qsort() {\n     sort::ivector::quick_sort(lteq, names);\n \n     auto pairs = ivec::zip(expected, ivec::from_mut(names));\n-    for (tup(int, int) p in pairs) {\n+    for (rec(int _0, int _1) p in pairs) {\n         log_err #fmt(\"%d %d\", p._0, p._1);\n         assert p._0 == p._1;\n     }"}, {"sha": "36b7f3d4559d9fcbc22c48ebd4f1d80b970b5729", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -3,14 +3,14 @@\n tag foo { large; small; }\n \n fn main() {\n-    auto a = tup(1, 2, 3);\n-    auto b = tup(1, 2, 3);\n+    auto a = rec(x=1, y=2, z=3);\n+    auto b = rec(x=1, y=2, z=3);\n     assert (a == b);\n-    assert (a != tup(1, 2, 4));\n-    assert (a < tup(1, 2, 4));\n-    assert (a <= tup(1, 2, 4));\n-    assert (tup(1, 2, 4) > a);\n-    assert (tup(1, 2, 4) >= a);\n+    assert (a != rec(x=1, y=2, z=4));\n+    assert (a < rec(x=1, y=2, z=4));\n+    assert (a <= rec(x=1, y=2, z=4));\n+    assert (rec(x=1, y=2, z=4) > a);\n+    assert (rec(x=1, y=2, z=4) >= a);\n     auto x = large;\n     auto y = small;\n     assert (x != y);"}, {"sha": "dfd6815a2c94b9467c48ed2814a3f9fcb4fb6f34", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -40,20 +40,6 @@ fn test_str() {\n     assert (s1.(3) as u8 == 't' as u8);\n }\n \n-fn test_tup() {\n-    type t = tup(int, u8, char);\n-\n-    let port[t] po = port();\n-    let chan[t] ch = chan(po);\n-    let t t0 = tup(0, 1u8, '2');\n-    ch <| t0;\n-    let t t1;\n-    po |> t1;\n-    assert (t0._0 == 0);\n-    assert (t0._1 == 1u8);\n-    assert (t0._2 == '2');\n-}\n-\n fn test_tag() {\n     tag t { tag1; tag2(int); tag3(int, u8, char); }\n     let port[t] po = port();\n@@ -90,7 +76,6 @@ fn main() {\n     test_rec();\n     test_vec();\n     test_str();\n-    test_tup();\n     test_tag();\n     test_chan();\n }\n\\ No newline at end of file"}, {"sha": "0b2d5a9a02232cad2e1903a8b632f2d7674c916c", "filename": "src/test/run-pass/tup.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Ftup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Ftup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftup.rs?ref=aea537779e01359cf8da6944218362d44bfaee83", "patch": "@@ -1,18 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-type point = tup(int, int);\n-\n-fn f(point p, int x, int y) { assert (p._0 == x); assert (p._1 == y); }\n-\n-fn main() {\n-    let point p = tup(10, 20);\n-    assert (p._0 == 10);\n-    assert (p._1 == 20);\n-    let point p2 = p;\n-    let int x = p2._0;\n-    assert (x == 10);\n-    f(p, 10, 20);\n-    f(p2, 10, 20);\n-}\n\\ No newline at end of file"}, {"sha": "ee9ba175db541c9f8d0d07e5eb874f39a811fa22", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -5,7 +5,7 @@ iter range(uint lo, uint hi) -> uint {\n     while (lo_ < hi) { put lo_; lo_ += 1u; }\n }\n \n-fn create_index[T](vec[tup(T, uint)] index, fn(&T) -> uint  hash_fn) {\n+fn create_index[T](vec[rec(T a, uint b)] index, fn(&T) -> uint  hash_fn) {\n     for each (uint i in range(0u, 256u)) { let vec[T] bucket = []; }\n }\n "}, {"sha": "ab576571f218b8b9695fae496c82b19b7d7b6a43", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -13,13 +13,14 @@ fn main() {\n     assert (size_of[char]() == 4 as uint);\n     assert (size_of[i8]() == 1 as uint);\n     assert (size_of[i32]() == 4 as uint);\n-    assert (size_of[tup(u8, i8)]() == 2 as uint);\n-    assert (size_of[tup(u8, i8, u8)]() == 3 as uint);\n+    assert (size_of[rec(u8 a, i8 b)]() == 2 as uint);\n+    assert (size_of[rec(u8 a, i8 b, u8 c)]() == 3 as uint);\n     // Alignment causes padding before the char and the u32.\n \n-    assert (size_of[tup(u8, i8, tup(char, u8), u32)]() == 16 as uint);\n+    assert (size_of[rec(u8 a, i8 b, rec(char u, u8 v) c, u32 d)]()\n+            == 16 as uint);\n     assert (size_of[int]() == size_of[uint]());\n-    assert (size_of[tup(int, ())]() == size_of[int]());\n-    assert (size_of[tup(int, (), ())]() == size_of[int]());\n+    assert (size_of[rec(int a, () b)]() == size_of[int]());\n+    assert (size_of[rec(int a, () b, () c)]() == size_of[int]());\n     assert (size_of[int]() == size_of[rec(int x)]());\n }\n\\ No newline at end of file"}, {"sha": "e410b08eecb1659bed1e4dd0be5b3c535e219583", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -3,5 +3,7 @@\n fn main() {\n     // This just tests whether the vec leaks its members.\n \n-    let vec[@tup(int, int)] pvec = [@tup(1, 2), @tup(3, 4), @tup(5, 6)];\n+    let vec[@rec(int x, int y)] pvec = [@rec(x=1, y=2),\n+                                        @rec(x=3, y=4),\n+                                        @rec(x=5, y=6)];\n }\n\\ No newline at end of file"}, {"sha": "046c1675dba92bcf40b56905245d843609632201", "filename": "src/test/run-pass/vec-in-tup.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Fvec-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea537779e01359cf8da6944218362d44bfaee83/src%2Ftest%2Frun-pass%2Fvec-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-in-tup.rs?ref=aea537779e01359cf8da6944218362d44bfaee83", "patch": "@@ -1,6 +0,0 @@\n-\n-\n-fn main() {\n-    let tup(mutable vec[int]) i = tup(mutable [1, 2, 3]);\n-    i._0 = [4, 5, 6];\n-}\n\\ No newline at end of file"}, {"sha": "3096bd1ba823c26598786d2e92b5e6f9c3101255", "filename": "src/test/stdtest/either.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Feither.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -78,35 +78,35 @@ fn test_partition() {\n                  right(13),\n                  left(14)];\n   auto result = partition(input);\n-  assert (result._0.(0) == 10);\n-  assert (result._0.(1) == 12);\n-  assert (result._0.(2) == 14);\n-  assert (result._1.(0) == 11);\n-  assert (result._1.(1) == 13);\n+  assert (result.lefts.(0) == 10);\n+  assert (result.lefts.(1) == 12);\n+  assert (result.lefts.(2) == 14);\n+  assert (result.rights.(0) == 11);\n+  assert (result.rights.(1) == 13);\n }\n \n #[test]\n fn test_partition_no_lefts() {\n   let (t[int, int])[] input = ~[right(10),\n                                 right(11)];\n   auto result = partition(input);\n-  assert (len(result._0) == 0u);\n-  assert (len(result._1) == 2u);\n+  assert (len(result.lefts) == 0u);\n+  assert (len(result.rights) == 2u);\n }\n \n #[test]\n fn test_partition_no_rights() {\n   let (t[int, int])[] input = ~[left(10),\n                                 left(11)];\n   auto result = partition(input);\n-  assert (len(result._0) == 2u);\n-  assert (len(result._1) == 0u);\n+  assert (len(result.lefts) == 2u);\n+  assert (len(result.rights) == 0u);\n }\n \n #[test]\n fn test_partition_empty() {\n   let (t[int, int])[] input = ~[];\n   auto result = partition(input);\n-  assert (len(result._0) == 0u);\n-  assert (len(result._1) == 0u);\n+  assert (len(result.lefts) == 0u);\n+  assert (len(result.rights) == 0u);\n }"}, {"sha": "95e1271f76f457c89b79d705234255826768ee50", "filename": "src/test/stdtest/ivec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fivec.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -285,15 +285,15 @@ fn test_zip_unzip() {\n     auto v2 = ~[4, 5, 6];\n     auto z1 = ivec::zip(v1, v2);\n \n-    assert tup(1, 4) == z1.(0);\n-    assert tup(2, 5) == z1.(1);\n-    assert tup(3, 6) == z1.(2);\n+    assert rec(_0=1, _1=4) == z1.(0);\n+    assert rec(_0=2, _1=5) == z1.(1);\n+    assert rec(_0=3, _1=6) == z1.(2);\n \n     auto u1 = ivec::unzip(z1);\n \n-    assert tup(1, 4) == tup(u1._0.(0), u1._1.(0));\n-    assert tup(2, 5) == tup(u1._0.(1), u1._1.(1));\n-    assert tup(3, 6) == tup(u1._0.(2), u1._1.(2));\n+    assert rec(_0=1, _1=4) == rec(_0=u1._0.(0), _1=u1._1.(0));\n+    assert rec(_0=2, _1=5) == rec(_0=u1._0.(1), _1=u1._1.(1));\n+    assert rec(_0=3, _1=6) == rec(_0=u1._0.(2), _1=u1._1.(2));\n }\n \n // Local Variables:"}, {"sha": "c05daeca0c0e29b2b3f4c68b140f277c362ad795", "filename": "src/test/stdtest/qsort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Fqsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Fqsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -50,7 +50,7 @@ fn test_simple() {\n     sort::ivector::quick_sort(lteq, names);\n \n     auto pairs = ivec::zip(expected, ivec::from_mut(names));\n-    for (tup(int, int) p in pairs) {\n+    for (rec(int _0, int _1) p in pairs) {\n         log #fmt(\"%d %d\", p._0, p._1);\n         assert p._0 == p._1;\n     }"}, {"sha": "ba69674b030001400a178723bc341980fe94729d", "filename": "src/test/stdtest/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8968d1e719ca8e80429e9f26f75941ccef3c346/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=f8968d1e719ca8e80429e9f26f75941ccef3c346", "patch": "@@ -105,7 +105,7 @@ fn sort_tests() {\n \n     auto pairs = ivec::zip(expected, filtered);\n \n-    for (tup(str, test::test_desc) p in pairs) {\n+    for (rec(str _0, test::test_desc _1) p in pairs) {\n         assert p._0 == p._1.name;\n     }\n }"}]}