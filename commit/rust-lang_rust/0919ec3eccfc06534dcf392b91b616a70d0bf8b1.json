{"sha": "0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "node_id": "C_kwDOAAsO6NoAKDA5MTllYzNlY2NmYzA2NTM0ZGNmMzkyYjkxYjYxNmE3MGQwYmY4YjE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-24T20:26:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T16:43:14Z"}, "message": "Remove ExpnKind::Inlined.", "tree": {"sha": "8267c2028d8d96bb06cf3b02a8158f2ca123fc5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8267c2028d8d96bb06cf3b02a8158f2ca123fc5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "html_url": "https://github.com/rust-lang/rust/commit/0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d300bffa4f0036e9138ef752610d08fc63f87a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d300bffa4f0036e9138ef752610d08fc63f87a77", "html_url": "https://github.com/rust-lang/rust/commit/d300bffa4f0036e9138ef752610d08fc63f87a77"}], "stats": {"total": 58, "additions": 7, "deletions": 51}, "files": [{"sha": "5eaa988dd09298d0236ac93cf3a7a025dd3ad159", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -413,11 +413,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n     // Note: must be kept in sync with get_caller_location from cg_ssa\n     pub(crate) fn get_caller_location(&mut self, mut source_info: mir::SourceInfo) -> CValue<'tcx> {\n-        let span_to_caller_location = |fx: &mut FunctionCx<'_, '_, 'tcx>, mut span: Span| {\n-            // Remove `Inlined` marks as they pollute `expansion_cause`.\n-            while span.is_inlined() {\n-                span.remove_mark();\n-            }\n+        let span_to_caller_location = |fx: &mut FunctionCx<'_, '_, 'tcx>, span: Span| {\n             let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n             let caller = fx.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n             let const_loc = fx.tcx.const_caller_location(("}, {"sha": "d516ac4ebb749aea478937d443439f605d1233ac", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -1450,11 +1450,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> OperandRef<'tcx, Bx::Value> {\n         let tcx = bx.tcx();\n \n-        let mut span_to_caller_location = |mut span: Span| {\n-            // Remove `Inlined` marks as they pollute `expansion_cause`.\n-            while span.is_inlined() {\n-                span.remove_mark();\n-            }\n+        let mut span_to_caller_location = |span: Span| {\n             let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n             let caller = tcx.sess.source_map().lookup_char_pos(topmost.lo());\n             let const_loc = tcx.const_caller_location(("}, {"sha": "df5b581000b7d155242e9282b535ba56d31730bf", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -111,11 +111,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         location\n     }\n \n-    pub(crate) fn location_triple_for_span(&self, mut span: Span) -> (Symbol, u32, u32) {\n-        // Remove `Inlined` marks as they pollute `expansion_cause`.\n-        while span.is_inlined() {\n-            span.remove_mark();\n-        }\n+    pub(crate) fn location_triple_for_span(&self, span: Span) -> (Symbol, u32, u32) {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         ("}, {"sha": "e8cd7eaa60f1acb02a3dcacb2b9290ce77dc0236", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -332,7 +332,7 @@ pub trait Emitter: Translate {\n \n                     // Skip past non-macro entries, just in case there\n                     // are some which do actually involve macros.\n-                    ExpnKind::Inlined | ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n+                    ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n \n                     ExpnKind::Macro(macro_kind, name) => Some((macro_kind, name)),\n                 }\n@@ -403,7 +403,7 @@ pub trait Emitter: Translate {\n                     continue;\n                 }\n \n-                if always_backtrace && !matches!(trace.kind, ExpnKind::Inlined) {\n+                if always_backtrace {\n                     new_labels.push((\n                         trace.def_site,\n                         format!(\n@@ -442,7 +442,6 @@ pub trait Emitter: Translate {\n                             \"this derive macro expansion\".into()\n                         }\n                         ExpnKind::Macro(MacroKind::Bang, _) => \"this macro invocation\".into(),\n-                        ExpnKind::Inlined => \"this inlined function call\".into(),\n                         ExpnKind::Root => \"the crate root\".into(),\n                         ExpnKind::AstPass(kind) => kind.descr().into(),\n                         ExpnKind::Desugaring(kind) => {"}, {"sha": "14343ac1108b2dfb1269e57b61aa616d6d2c0e2e", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -468,8 +468,7 @@ pub fn struct_lint_level(\n pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     let expn_data = span.ctxt().outer_expn_data();\n     match expn_data.kind {\n-        ExpnKind::Inlined\n-        | ExpnKind::Root\n+        ExpnKind::Root\n         | ExpnKind::Desugaring(\n             DesugaringKind::ForLoop | DesugaringKind::WhileLoop | DesugaringKind::OpaqueTy,\n         ) => false,"}, {"sha": "a8d0dca37ff99e43049d3409db9306c435083402", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -2488,9 +2488,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             && if self.features().collapse_debuginfo {\n                 span.in_macro_expansion_with_collapse_debuginfo()\n             } else {\n-                // Inlined spans should not be collapsed as that leads to all of the\n-                // inlined code being attributed to the inline callsite.\n-                span.from_expansion() && !span.is_inlined()\n+                span.from_expansion()\n             }\n     }\n "}, {"sha": "1748b1bf4a02a513184523f163637bcd8f7c8890", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -10,7 +10,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n-use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::Abi;\n \n@@ -551,16 +550,6 @@ impl<'tcx> Inliner<'tcx> {\n                 // Copy the arguments if needed.\n                 let args: Vec<_> = self.make_call_args(args, &callsite, caller_body, &callee_body);\n \n-                let mut expn_data = ExpnData::default(\n-                    ExpnKind::Inlined,\n-                    callsite.source_info.span,\n-                    self.tcx.sess.edition(),\n-                    None,\n-                    None,\n-                );\n-                expn_data.def_site = callee_body.span;\n-                let expn_data =\n-                    self.tcx.with_stable_hashing_context(|hcx| LocalExpnId::fresh(expn_data, hcx));\n                 let mut integrator = Integrator {\n                     args: &args,\n                     new_locals: Local::new(caller_body.local_decls.len())..,\n@@ -572,7 +561,6 @@ impl<'tcx> Inliner<'tcx> {\n                     cleanup_block: unwind,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n-                    expn_data,\n                     always_live_locals: BitSet::new_filled(callee_body.local_decls.len()),\n                 };\n \n@@ -956,7 +944,6 @@ struct Integrator<'a, 'tcx> {\n     cleanup_block: UnwindAction,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n-    expn_data: LocalExpnId,\n     always_live_locals: BitSet<Local>,\n }\n \n@@ -1042,11 +1029,6 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         *scope = self.map_scope(*scope);\n     }\n \n-    fn visit_span(&mut self, span: &mut Span) {\n-        // Make sure that all spans track the fact that they were inlined.\n-        *span = span.fresh_expansion(self.expn_data);\n-    }\n-\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.in_cleanup_block = data.is_cleanup;\n         self.super_basic_block_data(block, data);"}, {"sha": "6755657c7276eb54fc5161e02f174ff7d0c68b93", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -320,7 +320,6 @@ impl ExpnId {\n             // Stop going up the backtrace once include! is encountered\n             if expn_data.is_root()\n                 || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)\n-                || expn_data.kind == ExpnKind::Inlined\n             {\n                 break;\n             }\n@@ -1058,8 +1057,6 @@ pub enum ExpnKind {\n     AstPass(AstPass),\n     /// Desugaring done by the compiler during HIR lowering.\n     Desugaring(DesugaringKind),\n-    /// MIR inlining\n-    Inlined,\n }\n \n impl ExpnKind {\n@@ -1073,7 +1070,6 @@ impl ExpnKind {\n             },\n             ExpnKind::AstPass(kind) => kind.descr().to_string(),\n             ExpnKind::Desugaring(kind) => format!(\"desugaring of {}\", kind.descr()),\n-            ExpnKind::Inlined => \"inlined source\".to_string(),\n         }\n     }\n }"}, {"sha": "eae3f0fa041dd1cd19ec750518d2e08eb9227e6b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919ec3eccfc06534dcf392b91b616a70d0bf8b1/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=0919ec3eccfc06534dcf392b91b616a70d0bf8b1", "patch": "@@ -594,12 +594,6 @@ impl Span {\n         matches!(outer_expn.kind, ExpnKind::Macro(..)) && outer_expn.collapse_debuginfo\n     }\n \n-    /// Returns `true` if this span comes from MIR inlining.\n-    pub fn is_inlined(self) -> bool {\n-        let outer_expn = self.ctxt().outer_expn_data();\n-        matches!(outer_expn.kind, ExpnKind::Inlined)\n-    }\n-\n     /// Returns `true` if `span` originates in a derive-macro's expansion.\n     pub fn in_derive_expansion(self) -> bool {\n         matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))"}]}