{"sha": "c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmU0YjgzZjE0N2Q3NTM1M2VhNDliZjgwMTc5NDZhMWYwYmNhYTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-10T09:52:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-10T09:52:23Z"}, "message": "Rustup to rustc 1.32.0-nightly (36a50c29f 2018-11-09)", "tree": {"sha": "e5db93c634054c0ee3af64118f358e6e9cc20dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5db93c634054c0ee3af64118f358e6e9cc20dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "html_url": "https://github.com/rust-lang/rust/commit/c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2be4b83f147d75353ea49bf8017946a1f0bcaa8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1fc9a56d9ec243562e88740c3c86895ab3fd846", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1fc9a56d9ec243562e88740c3c86895ab3fd846", "html_url": "https://github.com/rust-lang/rust/commit/e1fc9a56d9ec243562e88740c3c86895ab3fd846"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "8b837400468bff12dda52aeb51239e290cf95284", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 63, "deletions": 23, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c2be4b83f147d75353ea49bf8017946a1f0bcaa8/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/c2be4b83f147d75353ea49bf8017946a1f0bcaa8/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "patch": "@@ -1,6 +1,6 @@\n-From 7bc14b679a5e5a43940fd47a7f3be7f1cc27509b Mon Sep 17 00:00:00 2001\n+From 13b3aab50eec5bd0ae22ebb76eba4d0ccb90ae14 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 6 Oct 2018 13:08:34 +0200\n+Date: Sat, 10 Nov 2018 10:49:26 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -18,10 +18,11 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/num/wrapping.rs  |  14 ++--\n  src/libcore/ops/arith.rs     |  22 +++---\n  src/libcore/ops/bit.rs       |  30 +++------\n+ src/libcore/sync/atomic.rs   |  28 --------\n  src/libcore/tests/iter.rs    |  15 -----\n  src/libcore/tests/num/mod.rs |  18 -----\n  src/libcore/time.rs          | 126 -----------------------------------\n- 17 files changed, 62 insertions(+), 311 deletions(-)\n+ 18 files changed, 62 insertions(+), 339 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n index 46bb580..fcf9fa8 100644\n@@ -39,10 +40,10 @@ index 46bb580..fcf9fa8 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index edaed31..570217b 100644\n+index 33881de..0e1e823 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n-@@ -886,7 +886,7 @@ mod impls {\n+@@ -883,7 +883,7 @@ mod impls {\n      }\n  \n      partial_eq_impl! {\n@@ -51,7 +52,7 @@ index edaed31..570217b 100644\n      }\n  \n      macro_rules! eq_impl {\n-@@ -896,7 +896,7 @@ mod impls {\n+@@ -893,7 +893,7 @@ mod impls {\n          )*)\n      }\n  \n@@ -60,7 +61,7 @@ index edaed31..570217b 100644\n  \n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n-@@ -985,7 +985,7 @@ mod impls {\n+@@ -982,7 +982,7 @@ mod impls {\n          }\n      }\n  \n@@ -70,7 +71,7 @@ index edaed31..570217b 100644\n      #[unstable(feature = \"never_type\", issue = \"35121\")]\n      impl PartialEq for ! {\n diff --git a/src/libcore/default.rs b/src/libcore/default.rs\n-index ab36e29..1926719 100644\n+index 638aceb..8b6ff80 100644\n --- a/src/libcore/default.rs\n +++ b/src/libcore/default.rs\n @@ -145,14 +145,12 @@ default_impl! { u8, 0, \"Returns the default value of `0`\" }\n@@ -213,7 +214,7 @@ index f95f8e7..549d832 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 61181c2..5694583 100644\n+index 3e7db7a..1217d4a 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n @@ -153,14 +153,12 @@ mod uint_macros;\n@@ -232,10 +233,10 @@ index 61181c2..5694583 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 266c691..39feadb 100644\n+index 662a8dd..856878e 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -672,8 +672,8 @@ mod copy_impls {\n+@@ -673,8 +673,8 @@ mod copy_impls {\n      }\n  \n      impl_copy! {\n@@ -247,7 +248,7 @@ index 266c691..39feadb 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 27ee955..e45a2c9 100644\n+index 1d0b194..cf15fda 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -162,12 +162,10 @@ pub fn forget<T>(t: T) {\n@@ -264,7 +265,7 @@ index 27ee955..e45a2c9 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index c6473a2..c513f30 100644\n+index c6cbeea..08ef46c 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -112,7 +112,6 @@ nonzero_integers! {\n@@ -294,7 +295,7 @@ index c6473a2..c513f30 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4339,17 +4326,6 @@ impl u64 {\n+@@ -4337,17 +4324,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -312,7 +313,7 @@ index c6473a2..c513f30 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4433,7 +4409,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4431,7 +4407,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -321,7 +322,7 @@ index c6473a2..c513f30 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4549,30 +4525,25 @@ macro_rules! rev {\n+@@ -4547,30 +4523,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -356,7 +357,7 @@ index c6473a2..c513f30 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4584,21 +4555,21 @@ mod ptr_try_from_impls {\n+@@ -4582,21 +4553,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -386,7 +387,7 @@ index c6473a2..c513f30 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4607,24 +4578,24 @@ mod ptr_try_from_impls {\n+@@ -4605,24 +4576,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -419,7 +420,7 @@ index c6473a2..c513f30 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4633,24 +4604,20 @@ mod ptr_try_from_impls {\n+@@ -4631,24 +4602,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -448,7 +449,7 @@ index c6473a2..c513f30 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4685,7 +4652,7 @@ macro_rules! doit {\n+@@ -4683,7 +4650,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -457,7 +458,7 @@ index c6473a2..c513f30 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4853,52 +4820,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4851,52 +4818,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -833,6 +834,45 @@ index 3900f36..66b7980 100644\n  \n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n+diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n+index 56d3b42..34df75f 100644\n+--- a/src/libcore/sync/atomic.rs\n++++ b/src/libcore/sync/atomic.rs\n+@@ -1938,34 +1938,6 @@ atomic_int! {\n+     8,\n+     u64 AtomicU64 ATOMIC_U64_INIT\n+ }\n+-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-atomic_int! {\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    \"i128\", \"../../../std/primitive.i128.html\",\n+-    \"#![feature(integer_atomics)]\\n\\n\",\n+-    atomic_min, atomic_max,\n+-    16,\n+-    i128 AtomicI128 ATOMIC_I128_INIT\n+-}\n+-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-atomic_int! {\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    \"u128\", \"../../../std/primitive.u128.html\",\n+-    \"#![feature(integer_atomics)]\\n\\n\",\n+-    atomic_umin, atomic_umax,\n+-    16,\n+-    u128 AtomicU128 ATOMIC_U128_INIT\n+-}\n+ #[cfg(target_pointer_width = \"16\")]\n+ macro_rules! ptr_width {\n+     () => { 2 }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n index 2476c07..2075670 100644\n --- a/src/libcore/tests/iter.rs\n@@ -936,7 +976,7 @@ index ab96d31..bb5c1d0 100644\n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index 81ae8ad..0e3dd39 100644\n+index cfbd431..aee8065 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -30,7 +30,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -1087,5 +1127,5 @@ index 81ae8ad..0e3dd39 100644\n      ///\n      /// # Examples\n -- \n-2.17.1 (Apple Git-112)\n+2.17.2 (Apple Git-113)\n "}]}