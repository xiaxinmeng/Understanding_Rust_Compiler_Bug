{"sha": "d63ea3e037a143964b19b40a3f5f0b745a85745e", "node_id": "C_kwDOAAsO6NoAKGQ2M2VhM2UwMzdhMTQzOTY0YjE5YjQwYTNmNWYwYjc0NWE4NTc0NWU", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-03-19T04:11:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-19T04:11:45Z"}, "message": "Merge pull request #137 from rust-lang/fix/box-alloc-ice\n\nFix ice in box alloc", "tree": {"sha": "5f05952fc746fbca1b6b40eeaad14a334c7087b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f05952fc746fbca1b6b40eeaad14a334c7087b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63ea3e037a143964b19b40a3f5f0b745a85745e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNVgBCRBK7hj4Ov3rIwAA/EIIAA2+GmAeCKIqzLcbxpJjpRHY\nvXPdQAvlKWvYn0+wX/2wN09YF/fDkcK8E4DFnCD7h4f6kI7SFLlOP+6rV8Vlk53B\nafK3l4sHD+hrHINkRjnIJmtfLM/MwwpUecKWfSnuVhOYSELsmD7UHf9WWJ1NQroq\npWD9txQH54nSE5n58VAFNP8Jzcgr71sPWYHw+ny7MTxETLfWTS6OtI11bJzIivQg\nealw0s4DuCWzemDnoyn36hjzotnDDxe0marI4j9H8OxeSZSf1/gyVsAfiMdC495g\nJiwtdUkCzadYyu4HwmDB0A1+VSv1/+UnMl9YL4W8IRNWWtgD8HjgLkO70YUHe24=\n=rvz2\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f05952fc746fbca1b6b40eeaad14a334c7087b8\nparent b3e50bde9d5601d98a1037dcb15ac1cc43980240\nparent be9789bf01b2f6b9a83a0b0b5817347426a69439\nauthor antoyo <antoyo@users.noreply.github.com> 1647663105 -0400\ncommitter GitHub <noreply@github.com> 1647663105 -0400\n\nMerge pull request #137 from rust-lang/fix/box-alloc-ice\n\nFix ice in box alloc"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63ea3e037a143964b19b40a3f5f0b745a85745e", "html_url": "https://github.com/rust-lang/rust/commit/d63ea3e037a143964b19b40a3f5f0b745a85745e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63ea3e037a143964b19b40a3f5f0b745a85745e/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e50bde9d5601d98a1037dcb15ac1cc43980240", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e50bde9d5601d98a1037dcb15ac1cc43980240", "html_url": "https://github.com/rust-lang/rust/commit/b3e50bde9d5601d98a1037dcb15ac1cc43980240"}, {"sha": "be9789bf01b2f6b9a83a0b0b5817347426a69439", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9789bf01b2f6b9a83a0b0b5817347426a69439", "html_url": "https://github.com/rust-lang/rust/commit/be9789bf01b2f6b9a83a0b0b5817347426a69439"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "d70df90516093677a37b5d37f9dde28a26d3782d", "filename": "example/mini_core.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d63ea3e037a143964b19b40a3f5f0b745a85745e/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63ea3e037a143964b19b40a3f5f0b745a85745e/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=d63ea3e037a143964b19b40a3f5f0b745a85745e", "patch": "@@ -443,12 +443,22 @@ pub trait Deref {\n     fn deref(&self) -> &Self::Target;\n }\n \n+pub trait Allocator {\n+}\n+\n+pub struct Global;\n+\n+impl Allocator for Global {}\n+\n #[lang = \"owned_box\"]\n-pub struct Box<T: ?Sized>(*mut T);\n+pub struct Box<\n+    T: ?Sized,\n+    A: Allocator = Global,\n+>(*mut T, A);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n-impl<T: ?Sized> Drop for Box<T> {\n+impl<T: ?Sized, A: Allocator> Drop for Box<T, A> {\n     fn drop(&mut self) {\n         // drop is currently performed by compiler.\n     }\n@@ -468,7 +478,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n+unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: *mut T, alloc: A) {\n     libc::free(ptr as *mut u8);\n }\n "}, {"sha": "76a98adbf3c29305e5c5032a65a762b4b597e479", "filename": "src/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d63ea3e037a143964b19b40a3f5f0b745a85745e/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63ea3e037a143964b19b40a3f5f0b745a85745e/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=d63ea3e037a143964b19b40a3f5f0b745a85745e", "patch": "@@ -251,7 +251,9 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n             ty::Ref(..) | ty::RawPtr(_) => {\n                 return self.field(cx, index).gcc_type(cx, true);\n             }\n-            ty::Adt(def, _) if def.is_box() => {\n+            // only wide pointer boxes are handled as pointers\n+            // thin pointer boxes with scalar allocators are handled by the general logic below\n+            ty::Adt(def, substs) if def.is_box() && cx.layout_of(substs.type_at(1)).is_zst() => {\n                 let ptr_ty = cx.tcx.mk_mut_ptr(self.ty.boxed_ty());\n                 return cx.layout_of(ptr_ty).scalar_pair_element_gcc_type(cx, index, immediate);\n             }"}]}