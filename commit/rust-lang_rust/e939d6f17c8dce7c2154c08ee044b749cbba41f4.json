{"sha": "e939d6f17c8dce7c2154c08ee044b749cbba41f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MzlkNmYxN2M4ZGNlN2MyMTU0YzA4ZWUwNDRiNzQ5Y2JiYTQxZjQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-03-30T23:27:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-31T21:04:53Z"}, "message": "More machinery for adding an expr_call_self AST node.", "tree": {"sha": "4c636b2d5ff843370402552c616e8dbc51d2c442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c636b2d5ff843370402552c616e8dbc51d2c442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e939d6f17c8dce7c2154c08ee044b749cbba41f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e939d6f17c8dce7c2154c08ee044b749cbba41f4", "html_url": "https://github.com/rust-lang/rust/commit/e939d6f17c8dce7c2154c08ee044b749cbba41f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e939d6f17c8dce7c2154c08ee044b749cbba41f4/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a505e3c0ecf447893dd698a2e87d88694c86e0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a505e3c0ecf447893dd698a2e87d88694c86e0fa", "html_url": "https://github.com/rust-lang/rust/commit/a505e3c0ecf447893dd698a2e87d88694c86e0fa"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "0c25052c8e901545c1503859c9fa37de6972a547", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e939d6f17c8dce7c2154c08ee044b749cbba41f4/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e939d6f17c8dce7c2154c08ee044b749cbba41f4/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=e939d6f17c8dce7c2154c08ee044b749cbba41f4", "patch": "@@ -1,5 +1,5 @@\n import std.map.hashmap;\n- import std.option;\n+import std.option;\n import std.option.some;\n import std.option.none;\n \n@@ -87,6 +87,10 @@ type ast_fold[ENV] =\n          @expr f, vec[@expr] args,\n          ann a) -> @expr)                         fold_expr_call,\n \n+     (fn(&ENV e, &span sp,\n+         @expr f, vec[@expr] args,\n+         ann a) -> @expr)                         fold_expr_call_self,\n+\n      (fn(&ENV e, &span sp,\n          @expr f, vec[option.t[@expr]] args,\n          ann a) -> @expr)                         fold_expr_bind,\n@@ -562,6 +566,12 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_call(env_, e.span, ff, aargs, t);\n         }\n \n+        case (ast.expr_call_self(?f, ?args, ?t)) {\n+            auto ff = fold_expr(env_, fld, f);\n+            auto aargs = fold_exprs(env_, fld, args);\n+            ret fld.fold_expr_call_self(env_, e.span, ff, aargs, t);\n+        }\n+\n         case (ast.expr_bind(?f, ?args_opt, ?t)) {\n             auto ff = fold_expr(env_, fld, f);\n             let vec[option.t[@ast.expr]] aargs_opt = vec();\n@@ -1175,6 +1185,11 @@ fn identity_fold_expr_call[ENV](&ENV env, &span sp, @expr f,\n     ret @respan(sp, ast.expr_call(f, args, a));\n }\n \n+fn identity_fold_expr_call_self[ENV](&ENV env, &span sp, @expr f,\n+                                vec[@expr] args, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_call_self(f, args, a));\n+}\n+\n fn identity_fold_expr_bind[ENV](&ENV env, &span sp, @expr f,\n                                 vec[option.t[@expr]] args_opt, ann a)\n         -> @expr {\n@@ -1580,6 +1595,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_tup    = bind identity_fold_expr_tup[ENV](_,_,_,_),\n          fold_expr_rec    = bind identity_fold_expr_rec[ENV](_,_,_,_,_),\n          fold_expr_call   = bind identity_fold_expr_call[ENV](_,_,_,_,_),\n+         fold_expr_call_self\n+                          = bind identity_fold_expr_call_self[ENV](_,_,_,_,_),\n          fold_expr_bind   = bind identity_fold_expr_bind[ENV](_,_,_,_,_),\n          fold_expr_spawn  = bind identity_fold_expr_spawn[ENV](_,_,_,_,_,_,_),\n          fold_expr_binary = bind identity_fold_expr_binary[ENV](_,_,_,_,_,_),"}]}