{"sha": "c268cc0b4de71df8e317f7b44a3f98e6313965f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNjhjYzBiNGRlNzFkZjhlMzE3ZjdiNDRhM2Y5OGU2MzEzOTY1ZjQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-14T22:32:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T22:32:32Z"}, "message": "Rollup merge of #77879 - ijackson:x-py, r=jyn514\n\nProvide better documentation and help messages for x.py setup\n\nCloses: #77861\n\nI have split this up into tiny comments because I find it clearer this way.  Feel free to squash it.", "tree": {"sha": "c54f0bd70e3f94483dd55c32578be6d36830ff6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c54f0bd70e3f94483dd55c32578be6d36830ff6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c268cc0b4de71df8e317f7b44a3f98e6313965f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfh3yBCRBK7hj4Ov3rIwAAdHIIAJX6DxKSkDHD2dAMD5bmhSrX\n2smmaH8nBh2gk03hjEEfoxa62a4V9sCCezjL5UltzdyVJ/UZ/xvT8y+VEf9j66d/\nAYgFAi8n1NwPt7RxSo326he1PdmrX77DrRTnT1cULN1sP0Hh3RrpPB3y6RJbmCJy\nXjmIIZJ+RAdLiaQcv5lHw7JgjXIJcr6q5EjloG7EgKpLcMRTNq+1frkRVIfNQv5V\nSg+NuYAw5wqSvopysDitsNNFJU8eSKuF3vrnsPL9cfkCuCCW9rjRPsWUDA2hBYKH\nTSaB6EGU2IALGNdhiexGGiJ67cJnTaWZ9Eqn3p4poBqE6gxzopyBRwzOM6dAmvo=\n=IFFj\n-----END PGP SIGNATURE-----\n", "payload": "tree c54f0bd70e3f94483dd55c32578be6d36830ff6c\nparent 5f5ef052b15391edf47922d8b798a2558a63764b\nparent 636728e39464b678646bdedfc47327898b464a66\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602714752 +0900\ncommitter GitHub <noreply@github.com> 1602714752 +0900\n\nRollup merge of #77879 - ijackson:x-py, r=jyn514\n\nProvide better documentation and help messages for x.py setup\n\nCloses: #77861\n\nI have split this up into tiny comments because I find it clearer this way.  Feel free to squash it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c268cc0b4de71df8e317f7b44a3f98e6313965f4", "html_url": "https://github.com/rust-lang/rust/commit/c268cc0b4de71df8e317f7b44a3f98e6313965f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c268cc0b4de71df8e317f7b44a3f98e6313965f4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f5ef052b15391edf47922d8b798a2558a63764b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ef052b15391edf47922d8b798a2558a63764b", "html_url": "https://github.com/rust-lang/rust/commit/5f5ef052b15391edf47922d8b798a2558a63764b"}, {"sha": "636728e39464b678646bdedfc47327898b464a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/636728e39464b678646bdedfc47327898b464a66", "html_url": "https://github.com/rust-lang/rust/commit/636728e39464b678646bdedfc47327898b464a66"}], "stats": {"total": 87, "additions": 66, "deletions": 21}, "files": [{"sha": "22cfd0c56431d878a858c9dae16c840a721fab9f", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c268cc0b4de71df8e317f7b44a3f98e6313965f4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c268cc0b4de71df8e317f7b44a3f98e6313965f4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c268cc0b4de71df8e317f7b44a3f98e6313965f4", "patch": "@@ -125,6 +125,7 @@ Subcommands:\n     dist        Build distribution artifacts\n     install     Install distribution artifacts\n     run, r      Run tools contained in this repository\n+    setup       Create a config.toml (making it easier to use `x.py` itself)\n \n To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         );\n@@ -472,15 +473,21 @@ Arguments:\n                 );\n             }\n             \"setup\" => {\n-                subcommand_help.push_str(\n+                subcommand_help.push_str(&format!(\n                     \"\\n\n+x.py setup creates a `config.toml` which changes the defaults for x.py itself.\n+\n Arguments:\n     This subcommand accepts a 'profile' to use for builds. For example:\n \n         ./x.py setup library\n \n-    The profile is optional and you will be prompted interactively if it is not given.\",\n-                );\n+    The profile is optional and you will be prompted interactively if it is not given.\n+    The following profiles are available:\n+\n+{}\",\n+                    Profile::all_for_help(\"        \").trim_end()\n+                ));\n             }\n             _ => {}\n         };\n@@ -551,9 +558,7 @@ Arguments:\n                     profile_string.parse().unwrap_or_else(|err| {\n                         eprintln!(\"error: {}\", err);\n                         eprintln!(\"help: the available profiles are:\");\n-                        for choice in Profile::all() {\n-                            eprintln!(\"- {}\", choice);\n-                        }\n+                        eprint!(\"{}\", Profile::all_for_help(\"- \"));\n                         std::process::exit(1);\n                     })\n                 } else {"}, {"sha": "a281061ace15b9338fa2428618807652448482c4", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c268cc0b4de71df8e317f7b44a3f98e6313965f4/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c268cc0b4de71df8e317f7b44a3f98e6313965f4/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=c268cc0b4de71df8e317f7b44a3f98e6313965f4", "patch": "@@ -1,4 +1,5 @@\n use crate::{t, VERSION};\n+use std::fmt::Write as _;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{\n@@ -20,7 +21,28 @@ impl Profile {\n     }\n \n     pub fn all() -> impl Iterator<Item = Self> {\n-        [Profile::Compiler, Profile::Codegen, Profile::Library, Profile::User].iter().copied()\n+        use Profile::*;\n+        // N.B. these are ordered by how they are displayed, not alphabetically\n+        [Library, Compiler, Codegen, User].iter().copied()\n+    }\n+\n+    pub fn purpose(&self) -> String {\n+        use Profile::*;\n+        match self {\n+            Library => \"Contribute to the standard library\",\n+            Compiler => \"Contribute to the compiler or rustdoc\",\n+            Codegen => \"Contribute to the compiler, and also modify LLVM or codegen\",\n+            User => \"Install Rust from source\",\n+        }\n+        .to_string()\n+    }\n+\n+    pub fn all_for_help(indent: &str) -> String {\n+        let mut out = String::new();\n+        for choice in Profile::all() {\n+            writeln!(&mut out, \"{}{}: {}\", indent, choice, choice.purpose()).unwrap();\n+        }\n+        out\n     }\n }\n \n@@ -29,10 +51,10 @@ impl FromStr for Profile {\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"a\" | \"lib\" | \"library\" => Ok(Profile::Library),\n-            \"b\" | \"compiler\" | \"rustdoc\" => Ok(Profile::Compiler),\n-            \"c\" | \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n-            \"d\" | \"maintainer\" | \"user\" => Ok(Profile::User),\n+            \"lib\" | \"library\" => Ok(Profile::Library),\n+            \"compiler\" | \"rustdoc\" => Ok(Profile::Compiler),\n+            \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n+            \"maintainer\" | \"user\" => Ok(Profile::User),\n             _ => Err(format!(\"unknown profile: '{}'\", s)),\n         }\n     }\n@@ -104,19 +126,37 @@ pub fn setup(src_path: &Path, profile: Profile) {\n \n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n-    let mut input = String::new();\n-    println!(\n-        \"Welcome to the Rust project! What do you want to do with x.py?\n-a) Contribute to the standard library\n-b) Contribute to the compiler or rustdoc\n-c) Contribute to the compiler, and also modify LLVM or codegen\n-d) Install Rust from source\"\n-    );\n+    fn abbrev_all() -> impl Iterator<Item = (String, Profile)> {\n+        ('a'..).map(|c| c.to_string()).zip(Profile::all())\n+    }\n+\n+    fn parse_with_abbrev(input: &str) -> Result<Profile, String> {\n+        let input = input.trim().to_lowercase();\n+        for (letter, profile) in abbrev_all() {\n+            if input == letter {\n+                return Ok(profile);\n+            }\n+        }\n+        input.parse()\n+    }\n+\n+    println!(\"Welcome to the Rust project! What do you want to do with x.py?\");\n+    for (letter, profile) in abbrev_all() {\n+        println!(\"{}) {}: {}\", letter, profile, profile.purpose());\n+    }\n     let template = loop {\n-        print!(\"Please choose one (a/b/c/d): \");\n+        print!(\n+            \"Please choose one ({}): \",\n+            abbrev_all().map(|(l, _)| l).collect::<Vec<_>>().join(\"/\")\n+        );\n         io::stdout().flush()?;\n+        let mut input = String::new();\n         io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().parse() {\n+        if input == \"\" {\n+            eprintln!(\"EOF on stdin, when expecting answer to question.  Giving up.\");\n+            std::process::exit(1);\n+        }\n+        break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,\n             Err(err) => {\n                 println!(\"error: {}\", err);"}]}