{"sha": "e52f902a8ab3a1abbb200607db4766d95b27bc8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MmY5MDJhOGFiM2ExYWJiYjIwMDYwN2RiNDc2NmQ5NWIyN2JjOGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T23:13:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:05:05Z"}, "message": "`AssocImplKind::{Method -> Fn}`.", "tree": {"sha": "b18f861d3bf0f8389c6f98dd3c1c38103d4ab81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b18f861d3bf0f8389c6f98dd3c1c38103d4ab81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52f902a8ab3a1abbb200607db4766d95b27bc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52f902a8ab3a1abbb200607db4766d95b27bc8e", "html_url": "https://github.com/rust-lang/rust/commit/e52f902a8ab3a1abbb200607db4766d95b27bc8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52f902a8ab3a1abbb200607db4766d95b27bc8e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf2e7aa959a4611bc2f607bc7e9200b8b81c089", "html_url": "https://github.com/rust-lang/rust/commit/abf2e7aa959a4611bc2f607bc7e9200b8b81c089"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "50733512faec800dd2534de775f67645fb464cb2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -481,7 +481,7 @@ impl<'a> LoweringContext<'a> {\n                 self.lctx.allocate_hir_id_counter(item.id);\n \n                 match item.kind {\n-                    AssocItemKind::Method(_, None) => {\n+                    AssocItemKind::Fn(_, None) => {\n                         // Ignore patterns in trait methods without bodies\n                         self.with_hir_id_owner(None, |this| {\n                             visit::walk_trait_item(this, item)"}, {"sha": "f0543b9057d1f7b1175143d79190a63e51efda9a", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -826,7 +826,7 @@ impl LoweringContext<'_> {\n                         .map(|x| self.lower_const_body(i.span, Some(x))),\n                 ),\n             ),\n-            AssocItemKind::Method(ref sig, None) => {\n+            AssocItemKind::Fn(ref sig, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n@@ -837,7 +837,7 @@ impl LoweringContext<'_> {\n                 );\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n-            AssocItemKind::Method(ref sig, Some(ref body)) => {\n+            AssocItemKind::Fn(ref sig, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n@@ -880,7 +880,7 @@ impl LoweringContext<'_> {\n             AssocItemKind::TyAlias(_, ref default) => {\n                 (hir::AssocItemKind::Type, default.is_some())\n             }\n-            AssocItemKind::Method(ref sig, ref default) => (\n+            AssocItemKind::Fn(ref sig, ref default) => (\n                 hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n@@ -913,7 +913,7 @@ impl LoweringContext<'_> {\n                     self.lower_const_body(i.span, expr.as_deref()),\n                 ),\n             ),\n-            AssocItemKind::Method(ref sig, ref body) => {\n+            AssocItemKind::Fn(ref sig, ref body) => {\n                 self.current_item = Some(i.span);\n                 let body_id = self.lower_maybe_async_body(\n                     i.span,\n@@ -984,7 +984,7 @@ impl LoweringContext<'_> {\n                     None => hir::AssocItemKind::Type,\n                     Some(_) => hir::AssocItemKind::OpaqueTy,\n                 },\n-                AssocItemKind::Method(sig, _) => hir::AssocItemKind::Method {\n+                AssocItemKind::Fn(sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n                 AssocItemKind::Macro(..) => unimplemented!(),"}, {"sha": "e84ac82942c8e123e489d00e9c79016e0d381154", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -779,7 +779,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn flat_map_trait_item(&mut self, i: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Fn(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))"}, {"sha": "1fc89961889f1ba9fe51f0d86851e374e7531619", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -269,7 +269,7 @@ impl EarlyLintPass for UnsafeCode {\n     }\n \n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, item: &ast::AssocItem) {\n-        if let ast::AssocItemKind::Method(ref sig, None) = item.kind {\n+        if let ast::AssocItemKind::Fn(ref sig, None) = item.kind {\n             if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n@@ -617,7 +617,7 @@ declare_lint_pass!(\n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         match it.kind {\n-            ast::AssocItemKind::Method(ref sig, _) => {\n+            ast::AssocItemKind::Fn(ref sig, _) => {\n                 for arg in sig.decl.inputs.iter() {\n                     match arg.pat.kind {\n                         ast::PatKind::Ident(_, ident, None) => {"}, {"sha": "0840a1551dbf4fd1da7c909b365efca5d2b07273", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -1790,7 +1790,7 @@ impl<'a> Parser<'a> {\n         })?;\n         let sig = FnSig { header, decl };\n         let body = self.parse_assoc_fn_body(at_end, attrs)?;\n-        Ok((ident, AssocItemKind::Method(sig, body), generics))\n+        Ok((ident, AssocItemKind::Fn(sig, body), generics))\n     }\n \n     /// Parse the \"body\" of a method in an associated item definition."}, {"sha": "e90231f984b1f8a020a78a31e8378c2929cf3226", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -544,7 +544,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, None);\n-                    if let AssocItemKind::Method(ref sig, _) = impl_item.kind {\n+                    if let AssocItemKind::Fn(ref sig, _) = impl_item.kind {\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n                     }\n@@ -795,7 +795,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             AssocItemKind::Const(_, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"constant\", \" = <expr>;\");\n             }\n-            AssocItemKind::Method(sig, body) => {\n+            AssocItemKind::Fn(sig, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"function\", \" { <body> }\");\n                 self.check_fn_decl(&sig.decl);\n             }\n@@ -812,7 +812,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         self.invalid_visibility(&ti.vis, None);\n         self.check_defaultness(ti.span, ti.defaultness);\n \n-        if let AssocItemKind::Method(sig, block) = &ti.kind {\n+        if let AssocItemKind::Fn(sig, block) = &ti.kind {\n             self.check_fn_decl(&sig.decl);\n             self.check_trait_fn_not_async(ti.span, sig.header.asyncness.node);\n             self.check_trait_fn_not_const(sig.header.constness);\n@@ -838,7 +838,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem) {\n-        if let AssocItemKind::Method(sig, _) = &item.kind {\n+        if let AssocItemKind::Fn(sig, _) = &item.kind {\n             self.check_c_varadic_type(&sig.decl);\n         }\n         visit::walk_assoc_item(self, item);"}, {"sha": "e94e0dc695cd605abe8fcb673dff3fa8e36402fb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -1176,7 +1176,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let item_def_id = self.r.definitions.local_def_id(item.id);\n         let (res, ns) = match item.kind {\n             AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n-            AssocItemKind::Method(ref sig, _) => {\n+            AssocItemKind::Fn(ref sig, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }"}, {"sha": "9bae339f80ea4e1d4b1571215225df3fe0eadc17", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -214,11 +214,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_trait_item(&mut self, ti: &'a AssocItem) {\n         let def_data = match ti.kind {\n-            AssocItemKind::Method(..) | AssocItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.name),\n-            AssocItemKind::TyAlias(..) => {\n-                DefPathData::TypeNs(ti.ident.name)\n-            },\n+            AssocItemKind::Fn(..) | AssocItemKind::Const(..) => DefPathData::ValueNs(ti.ident.name),\n+            AssocItemKind::TyAlias(..) => DefPathData::TypeNs(ti.ident.name),\n             AssocItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n \n@@ -228,7 +225,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'a AssocItem) {\n         let def_data = match ii.kind {\n-            AssocItemKind::Method(FnSig {\n+            AssocItemKind::Fn(FnSig {\n                 ref header,\n                 ref decl,\n             }, ref body) if header.asyncness.node.is_async() => {\n@@ -242,7 +239,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body.as_deref(),\n                 )\n             }\n-            AssocItemKind::Method(..) |\n+            AssocItemKind::Fn(..) |\n             AssocItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n             AssocItemKind::TyAlias(..) => DefPathData::TypeNs(ii.ident.name),\n             AssocItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),"}, {"sha": "ec9c2a5b75d83030c4104122646586ca310ae5ba", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -818,7 +818,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                     });\n                                                 }\n                                             }\n-                                            AssocItemKind::Method(_, _) => {\n+                                            AssocItemKind::Fn(_, _) => {\n                                                 visit::walk_assoc_item(this, trait_item)\n                                             }\n                                             AssocItemKind::TyAlias(..) => {\n@@ -1109,7 +1109,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                     visit::walk_assoc_item(this, impl_item)\n                                                 });\n                                             }\n-                                            AssocItemKind::Method(..) => {\n+                                            AssocItemKind::Fn(..) => {\n                                                 // If this is a trait impl, ensure the method\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,"}, {"sha": "df6ad51d1045b9c54bacdff460a0a4b614b3fc63", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -1044,7 +1044,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &trait_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Method(ref sig, ref body) => {\n+            ast::AssocItemKind::Fn(ref sig, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_ref().map(|x| &**x),\n@@ -1115,7 +1115,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &impl_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Method(ref sig, ref body) => {\n+            ast::AssocItemKind::Fn(ref sig, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_deref(),"}, {"sha": "f7f84333857f6ed1bfd396bf312fdd78a75655a0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -1634,8 +1634,7 @@ pub enum AssocItemKind  {\n     Const(P<Ty>, Option<P<Expr>>),\n \n     /// An associated function.\n-    /// FIXME(Centril): Rename to `Fn`.\n-    Method(FnSig, Option<P<Block>>),\n+    Fn(FnSig, Option<P<Block>>),\n \n     /// An associated type.\n     TyAlias(GenericBounds, Option<P<Ty>>),"}, {"sha": "871ec2c008eee384aa8df52f1915346e3eebeff4", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -573,7 +573,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_trait_item(&mut self, ti: &'a ast::AssocItem) {\n         match ti.kind {\n-            ast::AssocItemKind::Method(ref sig, ref block) => {\n+            ast::AssocItemKind::Fn(ref sig, ref block) => {\n                 if block.is_none() {\n                     self.check_extern(sig.header.ext);\n                 }\n@@ -600,7 +600,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match ii.kind {\n-            ast::AssocItemKind::Method(ref sig, _) => {\n+            ast::AssocItemKind::Fn(ref sig, _) => {\n                 if sig.decl.c_variadic() {\n                     gate_feature_post!(\n                         &self, c_variadic, ii.span,"}, {"sha": "2a6cff5971c57e0b8c5629f9750b613d2ddb1028", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -955,7 +955,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(mut item: AssocItem, visitor: &mu\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        AssocItemKind::Method(sig, body) => {\n+        AssocItemKind::Fn(sig, body) => {\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }"}, {"sha": "87f6ae85b6970a2a1ed0dca4e5d28783674dfa02", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -1528,7 +1528,7 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Const(ty, expr) => {\n                 self.print_associated_const(item.ident, ty, expr.as_deref(), &item.vis);\n             }\n-            ast::AssocItemKind::Method(sig, body) => {\n+            ast::AssocItemKind::Fn(sig, body) => {\n                 if body.is_some() {\n                     self.head(\"\");\n                 }"}, {"sha": "51e7fa1eb38b49bd94546e9f34cf597f287912ab", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -600,11 +600,11 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem)\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Method(ref sig, None) => {\n+        AssocItemKind::Fn(ref sig, None) => {\n             visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n-        AssocItemKind::Method(ref sig, Some(ref body)) => {\n+        AssocItemKind::Fn(ref sig, Some(ref body)) => {\n             visitor.visit_fn(FnKind::Method(item.ident, sig, &item.vis, body),\n                              &sig.decl, item.span, item.id);\n         }"}, {"sha": "b7707bfb8e5fbd95f6f536ecf56811e54c708ac3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f902a8ab3a1abbb200607db4766d95b27bc8e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e52f902a8ab3a1abbb200607db4766d95b27bc8e", "patch": "@@ -958,7 +958,7 @@ impl<'a> MethodDef<'a> {\n             vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Method(sig, Some(body_block)),\n+            kind: ast::AssocItemKind::Fn(sig, Some(body_block)),\n             tokens: None,\n         }\n     }"}]}