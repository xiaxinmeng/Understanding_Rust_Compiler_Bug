{"sha": "ead198c5133fd649d1e385cfc46f344a2baaef8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZDE5OGM1MTMzZmQ2NDlkMWUzODVjZmM0NmYzNDRhMmJhYWVmOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-25T05:11:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-25T05:11:36Z"}, "message": "auto merge of #20024 : mneumann/rust/dragonfly-fixes3, r=alexcrichton", "tree": {"sha": "2878f9c5e35ed8b43f9c312f863cdb4873c1c97f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2878f9c5e35ed8b43f9c312f863cdb4873c1c97f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ead198c5133fd649d1e385cfc46f344a2baaef8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ead198c5133fd649d1e385cfc46f344a2baaef8b", "html_url": "https://github.com/rust-lang/rust/commit/ead198c5133fd649d1e385cfc46f344a2baaef8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ead198c5133fd649d1e385cfc46f344a2baaef8b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65248c5e05493d2f90acf2944ea657a03bce380a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65248c5e05493d2f90acf2944ea657a03bce380a", "html_url": "https://github.com/rust-lang/rust/commit/65248c5e05493d2f90acf2944ea657a03bce380a"}, {"sha": "4c3a8f17cc4bb4b68a910e028b50463d73429add", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3a8f17cc4bb4b68a910e028b50463d73429add", "html_url": "https://github.com/rust-lang/rust/commit/4c3a8f17cc4bb4b68a910e028b50463d73429add"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "9665b5c7802729b09b84e531e2e7a4c99e98930b", "filename": "mk/cfg/x86_64-unknown-dragonfly.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -7,9 +7,9 @@ CFG_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).so\n CFG_STATIC_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-dragonfly=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-dragonfly=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-dragonfly := -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly := -Wall -Werror -g -fPIC -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt\n+CFG_JEMALLOC_CFLAGS_x86_64-unknown-dragonfly := -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly := -Wall -Werror -g -fPIC -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-dragonfly := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-dragonfly := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-dragonfly := -Wl,-no-whole-archive"}, {"sha": "8f45f7f1af20d46b164bc691f286e28e1123dede", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -37,6 +37,7 @@ def scrub(b):\n     \"macos\": [\"bin/rustc\"],\n     \"winnt\": [\"bin/rustc.exe\"],\n     \"freebsd\": [\"bin/rustc\"],\n+    \"dragonfly\": [\"bin/rustc\"],\n     }\n \n winnt_runtime_deps_32 = [\"libgcc_s_dw2-1.dll\",\n@@ -86,6 +87,8 @@ def get_kernel(triple):\n         return \"macos\"\n     if os_name == \"freebsd\":\n         return \"freebsd\"\n+    if os_name == \"dragonfly\":\n+        return \"dragonfly\"\n     return \"linux\"\n \n def get_cpu(triple):"}, {"sha": "7dcdc08943fe191df8345af2fcaf557f80f3bee3", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -1095,6 +1095,7 @@ pub mod types {\n                 pub type sighandler_t = size_t;\n             }\n             pub mod bsd44 {\n+                use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n@@ -1167,6 +1168,17 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..104]\n                 }\n+                #[repr(C)]\n+                #[deriving(Copy)] pub struct ifaddrs {\n+                    pub ifa_next: *mut ifaddrs,\n+                    pub ifa_name: *mut c_char,\n+                    pub ifa_flags: c_uint,\n+                    pub ifa_addr: *mut sockaddr,\n+                    pub ifa_netmask: *mut sockaddr,\n+                    pub ifa_dstaddr: *mut sockaddr,\n+                    pub ifa_data: *mut c_void\n+                }\n+\n             }\n         }\n "}, {"sha": "955081a3af64c62b1fbd244d03612051754fe0ac", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -215,22 +215,7 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"freebsd\")]\n-    fn test_rpath_relative() {\n-        let config = &mut RPathConfig {\n-            used_crates: Vec::new(),\n-            has_rpath: true,\n-            is_like_osx: false,\n-            out_filename: Path::new(\"bin/rustc\"),\n-            get_install_prefix_lib_path: || panic!(),\n-            realpath: |p| Ok(p.clone())\n-        };\n-        let res = get_rpath_relative_to_output(config, &Path::new(\"lib/libstd.so\"));\n-        assert_eq!(res, \"$ORIGIN/../lib\");\n-    }\n-\n-    #[test]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     fn test_rpath_relative() {\n         let config = &mut RPathConfig {\n             used_crates: Vec::new(),"}, {"sha": "79d79b7e736bb89f46ac274a70aa32f05989053b", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -17,13 +17,18 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         morestack: true,\n+        linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: vec!(\n             \"-L/usr/local/lib\".to_string(),\n-            \"-L/usr/local/lib/gcc47\".to_string(),\n-            \"-L/usr/local/lib/gcc44\".to_string(),\n+            \"-L/usr/lib/gcc47\".to_string(),\n+            // GNU-style linkers will use this to omit linking to libraries\n+            // which don't actually fulfill any relocations, but only for\n+            // libraries which follow this flag.  Thus, use it before\n+            // specifying libraries to link to.\n+            \"-Wl,--as-needed\".to_string(),\n         ),\n-\n+        position_independent_executables: true,\n         .. Default::default()\n     }\n }"}, {"sha": "75dbff9428b3edd06c57ba0e31a4c5836fbc088e", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -11,13 +11,18 @@\n use target::Target;\n \n pub fn target() -> Target {\n+    let mut base = super::dragonfly_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n+                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_word_size: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n-        options: super::dragonfly_base::opts()\n+        options: base,\n     }\n }"}, {"sha": "cafe52f8403b6d312c1d6c66f079d49b7c76a92b", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ead198c5133fd649d1e385cfc46f344a2baaef8b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=ead198c5133fd649d1e385cfc46f344a2baaef8b", "patch": "@@ -172,7 +172,7 @@ pub fn join_paths<T: BytesContainer>(paths: &[T]) -> Result<Vec<u8>, &'static st\n     Ok(joined)\n }\n \n-#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+#[cfg(target_os = \"freebsd\")]\n pub fn load_self() -> Option<Vec<u8>> {\n     unsafe {\n         use libc::funcs::bsd44::*;\n@@ -198,6 +198,16 @@ pub fn load_self() -> Option<Vec<u8>> {\n     }\n }\n \n+#[cfg(target_os = \"dragonfly\")]\n+pub fn load_self() -> Option<Vec<u8>> {\n+    use std::io;\n+\n+    match io::fs::readlink(&Path::new(\"/proc/curproc/file\")) {\n+        Ok(path) => Some(path.into_vec()),\n+        Err(..) => None\n+    }\n+}\n+\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn load_self() -> Option<Vec<u8>> {\n     use std::io;"}]}