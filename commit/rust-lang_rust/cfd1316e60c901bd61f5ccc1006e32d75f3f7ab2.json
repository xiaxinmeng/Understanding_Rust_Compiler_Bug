{"sha": "cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2", "node_id": "C_kwDOAAsO6NoAKGNmZDEzMTZlNjBjOTAxYmQ2MWY1Y2NjMTAwNmUzMmQ3NWYzZjdhYjI", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-09-22T19:46:20Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-09-22T19:46:20Z"}, "message": "Apply review changes", "tree": {"sha": "bb52379441a498d382dced5e8d5fe92c09bc3efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb52379441a498d382dced5e8d5fe92c09bc3efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmFLiAwACgkQcTRy8vRW\nJ94dCBAAgZwz2LdhG4hdmZeZUZ+UCoNMZeYqhwpzhodds9lR0ctoGke8zwAipzUe\nbJtTKgOfShkasM+/w5SL+fo7ajeFYTQXoRwu9u1GEXdyWsrzHciO2R5EBUHmRQko\nXWofW+lzZbVxb6OSHYGLW7OiyEOYnVxVn1DPZtbTCjJN+Tjb2OPrWvYYTsuHcD3U\n98wkezWfo0oypAD7NlqSVasxflsVr3wf/wRsDEFIpGkS1+AYyH0uVF89grguTSL6\n6dwqaEIHmmOsEbV8g9W14aSDiPTAWF9K6C/wp5FlaooDbgwXDcGJTR+5EhnL5KHB\n3DInk3Ljn0OwwnnSnQXpFUBgaVr9HTBB8k8Vt+f+5Uhjsy3My/MmMlSRXp/4VqoT\nHzedJ69RwN5tO8Z4ENbzMfz6Ukq0Cujbgh4Ep52ohK4GQLFS46RP4LNNHgljek7E\nnBu4LiDiU4+isLRbTG2ycNlZqsQmOO7h5uf0qkECHEB7v8pIZg8SQRpo5uJdGJTd\ncRFC0SZkTrx1GzP2GxHaWugIwFEpebfMY/+WOjGilWyG75mAl9j8xilw7DwM8dho\nzPW7xPcK3X9ZC68sCKAsOzksgHIWnf9NoEpxiFiLarftsNVsObY6glu0mbkbBijA\n8xrIXFmHEr/NhM/Tk5stU7uJ1slAiRQJVLwkIgbmEeoYZdXfJvU=\n=NJl0\n-----END PGP SIGNATURE-----", "payload": "tree bb52379441a498d382dced5e8d5fe92c09bc3efd\nparent f6cedbc744155b168e51b63a873fff98790757f6\nauthor Chris Denton <christophersdenton@gmail.com> 1632339980 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1632339980 +0100\n\nApply review changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2", "html_url": "https://github.com/rust-lang/rust/commit/cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6cedbc744155b168e51b63a873fff98790757f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cedbc744155b168e51b63a873fff98790757f6", "html_url": "https://github.com/rust-lang/rust/commit/f6cedbc744155b168e51b63a873fff98790757f6"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "c7ce51a83f4cc17bf00ad284097250b15f2ec0da", "filename": "src/eval.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=cfd1316e60c901bd61f5ccc1006e32d75f3f7ab2", "patch": "@@ -352,17 +352,24 @@ pub fn eval_entry<'tcx>(\n ///\n /// Panics if the zeroth argument contains the `\"` character because doublequotes\n /// in argv[0] cannot be encoded using the standard command line parsing rules.\n+///\n+/// Further reading:\n+/// * [Parsing C++ command-line arguments](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=msvc-160#parsing-c-command-line-arguments)\n+/// * [The C/C++ Parameter Parsing Rules](https://daviddeley.com/autohotkey/parameters/parameters.htm#WINCRULES)\n fn args_to_utf16_command_string<I, T>(mut args: I) -> Vec<u16>\n where\n     I: Iterator<Item = T>,\n     T: AsRef<str>,\n {\n     // Parse argv[0]. Slashes aren't escaped. Literal double quotes are not allowed.\n-    let mut cmd = if let Some(arg0) = args.next() {\n+    let mut cmd = {\n+        let arg0 = if let Some(arg0) = args.next() {\n+            arg0\n+        } else {\n+            return vec![0];\n+        };\n         let arg0 = arg0.as_ref();\n-        if arg0.is_empty() {\n-            \"\\\"\\\"\".into()\n-        } else if arg0.contains('\"') {\n+        if arg0.contains('\"') {\n             panic!(\"argv[0] cannot contain a doublequote (\\\") character\");\n         } else {\n             // Always surround argv[0] with quotes.\n@@ -372,8 +379,6 @@ where\n             s.push('\"');\n             s\n         }\n-    } else {\n-        return vec![0];\n     };\n \n     // Build the other arguments.\n@@ -383,8 +388,15 @@ where\n         if arg.is_empty() {\n             cmd.push_str(\"\\\"\\\"\");\n         } else if !arg.bytes().any(|c| matches!(c, b'\"' | b'\\t' | b' ')) {\n+            // No quote, tab, or space -- no escaping required.\n             cmd.push_str(arg);\n         } else {\n+            // Spaces and tabs are escaped by surrounding them in quotes.\n+            // Quotes are themselves escaped by using backslashes when in a\n+            // quoted block.\n+            // Backslashes only need to be escaped when one or more are directly\n+            // followed by a quote. Otherwise they are taken literally.\n+\n             cmd.push('\"');\n             let mut chars = arg.chars().peekable();\n             loop {\n@@ -418,3 +430,21 @@ where\n     }\n     cmd.encode_utf16().chain(iter::once(0)).collect()\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    #[test]\n+    #[should_panic(expected = \"argv[0] cannot contain a doublequote (\\\") character\")]\n+    fn windows_argv0_panic_on_quote() {\n+        args_to_utf16_command_string([\"\\\"\"].iter());\n+    }\n+    #[test]\n+    fn windows_argv0_no_escape() {\n+        // Ensure that a trailing backslash in argv[0] is not escaped.\n+        let cmd = String::from_utf16_lossy(&args_to_utf16_command_string(\n+            [r\"C:\\Program Files\\\", \"arg1\"].iter(),\n+        ));\n+        assert_eq!(cmd.trim_end_matches(\"\\0\"), r#\"\"C:\\Program Files\\\" arg1\"#);\n+    }\n+}"}]}