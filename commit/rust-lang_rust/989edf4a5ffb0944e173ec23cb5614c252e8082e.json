{"sha": "989edf4a5ffb0944e173ec23cb5614c252e8082e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWVkZjRhNWZmYjA5NDRlMTczZWMyM2NiNTYxNGMyNTJlODA4MmU=", "commit": {"author": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-08T19:50:52Z"}, "committer": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-08T19:51:00Z"}, "message": "Review feedback\n\n* Use a match statement.\n* Clarify why we can't use `file_stem()`.\n* Error if the `:` is missing for Tidy error codes, rather than no-oping.", "tree": {"sha": "c6affa26eb5105501a3ecfbefa9151b0d9488bc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6affa26eb5105501a3ecfbefa9151b0d9488bc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989edf4a5ffb0944e173ec23cb5614c252e8082e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989edf4a5ffb0944e173ec23cb5614c252e8082e", "html_url": "https://github.com/rust-lang/rust/commit/989edf4a5ffb0944e173ec23cb5614c252e8082e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989edf4a5ffb0944e173ec23cb5614c252e8082e/comments", "author": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3174de9ffaf2ea9213114a8457f880fbc727347", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3174de9ffaf2ea9213114a8457f880fbc727347", "html_url": "https://github.com/rust-lang/rust/commit/a3174de9ffaf2ea9213114a8457f880fbc727347"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "af81d9af0e29347f2160024f55f71ea486fc6a6c", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/989edf4a5ffb0944e173ec23cb5614c252e8082e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989edf4a5ffb0944e173ec23cb5614c252e8082e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=989edf4a5ffb0944e173ec23cb5614c252e8082e", "patch": "@@ -152,38 +152,42 @@ impl DebugOptions {\n                     None => (setting_str, None),\n                     Some((k, v)) => (k, Some(v)),\n                 };\n-                if option == \"allow_unused_expressions\" {\n-                    allow_unused_expressions = bool_option_val(option, value);\n-                    debug!(\n-                        \"{} env option `allow_unused_expressions` is set to {}\",\n-                        RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n-                    );\n-                } else if option == \"counter_format\" {\n-                    match value {\n-                        None => {\n-                            bug!(\n-                                \"`{}` option in environment variable {} requires one or more \\\n-                                plus-separated choices (a non-empty subset of \\\n-                                `id+block+operation`)\",\n-                                option,\n-                                RUSTC_COVERAGE_DEBUG_OPTIONS\n-                            );\n-                        }\n-                        Some(val) => {\n-                            counter_format = counter_format_option_val(val);\n-                            debug!(\n-                                \"{} env option `counter_format` is set to {:?}\",\n-                                RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n-                            );\n-                        }\n-                    };\n-                } else {\n-                    bug!(\n-                        \"Unsupported setting `{}` in environment variable {}\",\n-                        option,\n-                        RUSTC_COVERAGE_DEBUG_OPTIONS\n-                    )\n-                }\n+                match option {\n+                    \"allow_unused_expressions\" => {\n+                        allow_unused_expressions = bool_option_val(option, value);\n+                        debug!(\n+                            \"{} env option `allow_unused_expressions` is set to {}\",\n+                            RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n+                        );\n+                    }\n+                    \"counter_format\" => {\n+                        match value {\n+                            None => {\n+                                bug!(\n+                                    \"`{}` option in environment variable {} requires one or more \\\n+                                    plus-separated choices (a non-empty subset of \\\n+                                    `id+block+operation`)\",\n+                                    option,\n+                                    RUSTC_COVERAGE_DEBUG_OPTIONS\n+                                );\n+                            }\n+                            Some(val) => {\n+                                counter_format = counter_format_option_val(val);\n+                                debug!(\n+                                    \"{} env option `counter_format` is set to {:?}\",\n+                                    RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n+                                );\n+                            }\n+                        };\n+                    }\n+                    _ => {\n+                        bug!(\n+                            \"Unsupported setting `{}` in environment variable {}\",\n+                            option,\n+                            RUSTC_COVERAGE_DEBUG_OPTIONS\n+                        )\n+                    }\n+                };\n             }\n         }\n "}, {"sha": "a7199fdfce66bf9f2e8ddddad99aab276784f65b", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/989edf4a5ffb0944e173ec23cb5614c252e8082e/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989edf4a5ffb0944e173ec23cb5614c252e8082e/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=989edf4a5ffb0944e173ec23cb5614c252e8082e", "patch": "@@ -85,10 +85,16 @@ fn extract_error_codes(\n     for line in f.lines() {\n         let s = line.trim();\n         if !reached_no_explanation && s.starts_with('E') && s.contains(\"include_str!(\\\"\") {\n-            let err_code = match s.split_once(':') {\n-                None => continue,\n-                Some((err_code, _)) => err_code.to_owned(),\n-            };\n+            let err_code = s\n+                .split_once(':')\n+                .expect(\n+                    format!(\n+                        \"Expected a line with the format `E0xxx: include_str!(\\\"..\\\")`, but got {} without a `:` delimiter\",\n+                        s,\n+                    ).as_str()\n+                )\n+                .0\n+                .to_owned();\n             if !error_codes.contains_key(&err_code) {\n                 error_codes.insert(err_code.clone(), false);\n             }"}, {"sha": "03f4efea983bb2a85bf62838708246f082a006f1", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/989edf4a5ffb0944e173ec23cb5614c252e8082e/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989edf4a5ffb0944e173ec23cb5614c252e8082e/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=989edf4a5ffb0944e173ec23cb5614c252e8082e", "patch": "@@ -19,6 +19,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     //\n                     // For now, just make sure that there is a corresponding\n                     // `$testname.rs` file.\n+                    //\n+                    // NB: We do not use file_stem() as some file names have multiple `.`s and we\n+                    // must strip all of them.\n                     let testname =\n                         file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n                     if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {"}]}