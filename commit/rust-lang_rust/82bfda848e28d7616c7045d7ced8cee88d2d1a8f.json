{"sha": "82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "node_id": "C_kwDOAAsO6NoAKDgyYmZkYTg0OGUyOGQ3NjE2YzcwNDVkN2NlZDhjZWU4OGQyZDFhOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T02:59:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T02:59:25Z"}, "message": "Auto merge of #109224 - oli-obk:smir, r=pnkfelix\n\nStable MIR: Add basic MIR body datastructures\n\nAt this point it will panic on most useful MIR, but you can do basic assignments\n\nr? `@pnkfelix`", "tree": {"sha": "616c98d4020a1d6355cecba28f62d3b307ebca30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616c98d4020a1d6355cecba28f62d3b307ebca30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "html_url": "https://github.com/rust-lang/rust/commit/82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10338571cfa7c2be0aeed309141ced91454d41e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/10338571cfa7c2be0aeed309141ced91454d41e1", "html_url": "https://github.com/rust-lang/rust/commit/10338571cfa7c2be0aeed309141ced91454d41e1"}, {"sha": "480e042097573ad518e43cf2ee8f17ecb755693a", "url": "https://api.github.com/repos/rust-lang/rust/commits/480e042097573ad518e43cf2ee8f17ecb755693a", "html_url": "https://github.com/rust-lang/rust/commit/480e042097573ad518e43cf2ee8f17ecb755693a"}], "stats": {"total": 250, "additions": 239, "deletions": 11}, "files": [{"sha": "5998c8b6500456668e1e3d808f31b86e48304d4c", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "patch": "@@ -3,11 +3,28 @@\n //! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n //! until stable MIR is complete.\n \n+use std::sync::RwLock;\n+\n use crate::stable_mir;\n pub use rustc_span::def_id::{CrateNum, DefId};\n \n+static DEF_ID_MAP: RwLock<Vec<DefId>> = RwLock::new(Vec::new());\n+\n pub fn item_def_id(item: &stable_mir::CrateItem) -> DefId {\n-    item.0\n+    DEF_ID_MAP.read().unwrap()[item.0]\n+}\n+\n+pub fn crate_item(did: DefId) -> stable_mir::CrateItem {\n+    // FIXME: this becomes inefficient when we have too many ids\n+    let mut map = DEF_ID_MAP.write().unwrap();\n+    for (i, &d) in map.iter().enumerate() {\n+        if d == did {\n+            return stable_mir::CrateItem(i);\n+        }\n+    }\n+    let id = map.len();\n+    map.push(did);\n+    stable_mir::CrateItem(id)\n }\n \n pub fn crate_num(item: &stable_mir::Crate) -> CrateNum {"}, {"sha": "86e30dd0f6a2adcccd648e53cae8ce371ef3c395", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 114, "deletions": 4, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "patch": "@@ -7,7 +7,10 @@\n //!\n //! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n \n-use crate::stable_mir::{self};\n+use crate::{\n+    rustc_internal::{crate_item, item_def_id},\n+    stable_mir::{self},\n+};\n use rustc_middle::ty::{tls::with, TyCtxt};\n use rustc_span::def_id::{CrateNum, LOCAL_CRATE};\n use tracing::debug;\n@@ -34,9 +37,7 @@ pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n \n /// Retrieve all items of the local crate that have a MIR associated with them.\n pub fn all_local_items() -> stable_mir::CrateItems {\n-    with(|tcx| {\n-        tcx.mir_keys(()).iter().map(|item| stable_mir::CrateItem(item.to_def_id())).collect()\n-    })\n+    with(|tcx| tcx.mir_keys(()).iter().map(|item| crate_item(item.to_def_id())).collect())\n }\n \n /// Build a stable mir crate from a given crate number.\n@@ -46,3 +47,112 @@ fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n     debug!(?crate_name, ?crate_num, \"smir_crate\");\n     stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local }\n }\n+\n+pub fn mir_body(item: &stable_mir::CrateItem) -> stable_mir::mir::Body {\n+    with(|tcx| {\n+        let def_id = item_def_id(item);\n+        let mir = tcx.optimized_mir(def_id);\n+        stable_mir::mir::Body {\n+            blocks: mir\n+                .basic_blocks\n+                .iter()\n+                .map(|block| stable_mir::mir::BasicBlock {\n+                    terminator: rustc_terminator_to_terminator(block.terminator()),\n+                    statements: block.statements.iter().map(rustc_statement_to_statement).collect(),\n+                })\n+                .collect(),\n+        }\n+    })\n+}\n+\n+fn rustc_statement_to_statement(\n+    s: &rustc_middle::mir::Statement<'_>,\n+) -> stable_mir::mir::Statement {\n+    use rustc_middle::mir::StatementKind::*;\n+    match &s.kind {\n+        Assign(assign) => stable_mir::mir::Statement::Assign(\n+            rustc_place_to_place(&assign.0),\n+            rustc_rvalue_to_rvalue(&assign.1),\n+        ),\n+        FakeRead(_) => todo!(),\n+        SetDiscriminant { .. } => todo!(),\n+        Deinit(_) => todo!(),\n+        StorageLive(_) => todo!(),\n+        StorageDead(_) => todo!(),\n+        Retag(_, _) => todo!(),\n+        PlaceMention(_) => todo!(),\n+        AscribeUserType(_, _) => todo!(),\n+        Coverage(_) => todo!(),\n+        Intrinsic(_) => todo!(),\n+        ConstEvalCounter => todo!(),\n+        Nop => stable_mir::mir::Statement::Nop,\n+    }\n+}\n+\n+fn rustc_rvalue_to_rvalue(rvalue: &rustc_middle::mir::Rvalue<'_>) -> stable_mir::mir::Operand {\n+    use rustc_middle::mir::Rvalue::*;\n+    match rvalue {\n+        Use(op) => rustc_op_to_op(op),\n+        Repeat(_, _) => todo!(),\n+        Ref(_, _, _) => todo!(),\n+        ThreadLocalRef(_) => todo!(),\n+        AddressOf(_, _) => todo!(),\n+        Len(_) => todo!(),\n+        Cast(_, _, _) => todo!(),\n+        BinaryOp(_, _) => todo!(),\n+        CheckedBinaryOp(_, _) => todo!(),\n+        NullaryOp(_, _) => todo!(),\n+        UnaryOp(_, _) => todo!(),\n+        Discriminant(_) => todo!(),\n+        Aggregate(_, _) => todo!(),\n+        ShallowInitBox(_, _) => todo!(),\n+        CopyForDeref(_) => todo!(),\n+    }\n+}\n+\n+fn rustc_op_to_op(op: &rustc_middle::mir::Operand<'_>) -> stable_mir::mir::Operand {\n+    use rustc_middle::mir::Operand::*;\n+    match op {\n+        Copy(place) => stable_mir::mir::Operand::Copy(rustc_place_to_place(place)),\n+        Move(place) => stable_mir::mir::Operand::Move(rustc_place_to_place(place)),\n+        Constant(c) => stable_mir::mir::Operand::Constant(c.to_string()),\n+    }\n+}\n+\n+fn rustc_place_to_place(place: &rustc_middle::mir::Place<'_>) -> stable_mir::mir::Place {\n+    assert_eq!(&place.projection[..], &[]);\n+    stable_mir::mir::Place { local: place.local.as_usize() }\n+}\n+\n+fn rustc_terminator_to_terminator(\n+    terminator: &rustc_middle::mir::Terminator<'_>,\n+) -> stable_mir::mir::Terminator {\n+    use rustc_middle::mir::TerminatorKind::*;\n+    use stable_mir::mir::Terminator;\n+    match &terminator.kind {\n+        Goto { target } => Terminator::Goto { target: target.as_usize() },\n+        SwitchInt { discr, targets } => Terminator::SwitchInt {\n+            discr: rustc_op_to_op(discr),\n+            targets: targets\n+                .iter()\n+                .map(|(value, target)| stable_mir::mir::SwitchTarget {\n+                    value,\n+                    target: target.as_usize(),\n+                })\n+                .collect(),\n+            otherwise: targets.otherwise().as_usize(),\n+        },\n+        Resume => Terminator::Resume,\n+        Abort => Terminator::Abort,\n+        Return => Terminator::Return,\n+        Unreachable => Terminator::Unreachable,\n+        Drop { .. } => todo!(),\n+        Call { .. } => todo!(),\n+        Assert { .. } => todo!(),\n+        Yield { .. } => todo!(),\n+        GeneratorDrop => todo!(),\n+        FalseEdge { .. } => todo!(),\n+        FalseUnwind { .. } => todo!(),\n+        InlineAsm { .. } => todo!(),\n+    }\n+}"}, {"sha": "a9dbc3463f80b3c5efbcf5103d5966b0b6aadc14", "filename": "compiler/rustc_smir/src/stable_mir/mir.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir.rs?ref=82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "patch": "@@ -0,0 +1,3 @@\n+mod body;\n+\n+pub use body::*;"}, {"sha": "c504065c993c90795f7150291464c52fcf2f3153", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "patch": "@@ -0,0 +1,69 @@\n+#[derive(Clone, Debug)]\n+pub struct Body {\n+    pub blocks: Vec<BasicBlock>,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct BasicBlock {\n+    pub statements: Vec<Statement>,\n+    pub terminator: Terminator,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum Terminator {\n+    Goto {\n+        target: usize,\n+    },\n+    SwitchInt {\n+        discr: Operand,\n+        targets: Vec<SwitchTarget>,\n+        otherwise: usize,\n+    },\n+    Resume,\n+    Abort,\n+    Return,\n+    Unreachable,\n+    Drop {\n+        place: Place,\n+        target: usize,\n+        unwind: Option<usize>,\n+    },\n+    Call {\n+        func: Operand,\n+        args: Vec<Operand>,\n+        destination: Place,\n+        target: Option<usize>,\n+        cleanup: Option<usize>,\n+    },\n+    Assert {\n+        cond: Operand,\n+        expected: bool,\n+        msg: String,\n+        target: usize,\n+        cleanup: Option<usize>,\n+    },\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum Statement {\n+    Assign(Place, Operand),\n+    Nop,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum Operand {\n+    Copy(Place),\n+    Move(Place),\n+    Constant(String),\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Place {\n+    pub local: usize,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct SwitchTarget {\n+    pub value: u128,\n+    pub target: usize,\n+}"}, {"sha": "ba23186224a750fbc9662cbd68fa61c1fce09990", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "patch": "@@ -11,7 +11,7 @@\n //! There shouldn't be any direct references to internal compiler constructs in this module.\n //! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n \n-use crate::rustc_internal;\n+pub mod mir;\n \n /// Use String for now but we should replace it.\n pub type Symbol = String;\n@@ -37,7 +37,13 @@ pub struct Crate {\n /// For now, it only stores the item DefId. Use functions inside `rustc_internal` module to\n /// use this item.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct CrateItem(pub(crate) rustc_internal::DefId);\n+pub struct CrateItem(pub(crate) DefId);\n+\n+impl CrateItem {\n+    pub fn body(&self) -> mir::Body {\n+        crate::rustc_smir::mir_body(self)\n+    }\n+}\n \n /// Access to the local crate.\n pub fn local_crate() -> Crate {"}, {"sha": "99b653f20b636ed02ca91ed795984a12840bfbc0", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfda848e28d7616c7045d7ced8cee88d2d1a8f/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "patch": "@@ -4,6 +4,7 @@\n // ignore-stage-1\n // ignore-cross-compile\n // ignore-remote\n+// edition: 2021\n \n #![feature(rustc_private)]\n \n@@ -30,16 +31,34 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     // Find items in the local crate.\n     let items = stable_mir::all_local_items();\n-    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo_bar\")));\n-    assert!(has_item(tcx, &items, (DefKind::Fn, \"foo::bar\")));\n+    assert!(get_item(tcx, &items, (DefKind::Fn, \"foo_bar\")).is_some());\n+    assert!(get_item(tcx, &items, (DefKind::Fn, \"foo::bar\")).is_some());\n \n     // Find the `std` crate.\n     assert!(stable_mir::find_crate(\"std\").is_some());\n+\n+    let bar = get_item(tcx, &items, (DefKind::Fn, \"bar\")).unwrap();\n+    let body = bar.body();\n+    assert_eq!(body.blocks.len(), 1);\n+    let block = &body.blocks[0];\n+    assert_eq!(block.statements.len(), 1);\n+    match &block.statements[0] {\n+        stable_mir::mir::Statement::Assign(..) => {}\n+        other => panic!(\"{other:?}\"),\n+    }\n+    match &block.terminator {\n+        stable_mir::mir::Terminator::Return => {}\n+        other => panic!(\"{other:?}\"),\n+    }\n }\n \n // Use internal API to find a function in a crate.\n-fn has_item(tcx: TyCtxt, items: &stable_mir::CrateItems, item: (DefKind, &str)) -> bool {\n-    items.iter().any(|crate_item| {\n+fn get_item<'a>(\n+    tcx: TyCtxt,\n+    items: &'a stable_mir::CrateItems,\n+    item: (DefKind, &str),\n+) -> Option<&'a stable_mir::CrateItem> {\n+    items.iter().find(|crate_item| {\n         let def_id = rustc_internal::item_def_id(crate_item);\n         tcx.def_kind(def_id) == item.0 && tcx.def_path_str(def_id) == item.1\n     })\n@@ -94,6 +113,10 @@ fn generate_input(path: &str) -> std::io::Result<()> {\n         }}\n     }}\n \n+    pub fn bar(x: i32) -> i32 {{\n+        x\n+    }}\n+\n     pub fn foo_bar(x: i32, y: i32) -> i64 {{\n         let x_64 = foo::bar(x);\n         let y_64 = foo::bar(y);"}]}