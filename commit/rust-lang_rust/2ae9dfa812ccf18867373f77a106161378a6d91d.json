{"sha": "2ae9dfa812ccf18867373f77a106161378a6d91d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZTlkZmE4MTJjY2YxODg2NzM3M2Y3N2ExMDYxNjEzNzhhNmQ5MWQ=", "commit": {"author": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2018-10-16T17:31:16Z"}, "committer": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2018-10-17T23:42:23Z"}, "message": "clippy: Fix new_ret_no_self", "tree": {"sha": "c3ff8017bfa41dd31de37de6716eb97db132ebcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ff8017bfa41dd31de37de6716eb97db132ebcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ae9dfa812ccf18867373f77a106161378a6d91d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae9dfa812ccf18867373f77a106161378a6d91d", "html_url": "https://github.com/rust-lang/rust/commit/2ae9dfa812ccf18867373f77a106161378a6d91d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ae9dfa812ccf18867373f77a106161378a6d91d/comments", "author": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2268a2f8c6557301ecdcaeb4074331a0bd37dccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2268a2f8c6557301ecdcaeb4074331a0bd37dccd", "html_url": "https://github.com/rust-lang/rust/commit/2268a2f8c6557301ecdcaeb4074331a0bd37dccd"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "f64fcee1640772ead34c0c18a36a5f56f7df988c", "filename": "crates/ra_analysis/src/descriptors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -233,7 +233,7 @@ pub struct FnDescriptor {\n }\n \n impl FnDescriptor {\n-    pub fn new(node: ast::FnDef) -> Option<Self> {\n+    pub fn new_opt(node: ast::FnDef) -> Option<Self> {\n         let name = node.name()?.text().to_string();\n \n         // Strip the body out for the label."}, {"sha": "1c16852b84c85c731bdfc99968b72cb4808eeda6", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -362,7 +362,7 @@ impl AnalysisImpl {\n         for (_, fs) in file_symbols {\n             if fs.kind == FN_DEF {\n                 if let Some(fn_def) = find_node_at_offset(syntax, fs.node_range.start()) {\n-                    if let Some(descriptor) = FnDescriptor::new(fn_def) {\n+                    if let Some(descriptor) = FnDescriptor::new_opt(fn_def) {\n                         // If we have a calling expression let's find which argument we are on\n                         let mut current_parameter = None;\n "}, {"sha": "57215c862721bebb4dcd8819e064f4b857899882", "filename": "crates/ra_analysis/src/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Fsrc%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Fsrc%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fjob.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -11,7 +11,7 @@ pub struct JobToken {\n }\n \n impl JobHandle {\n-    pub fn new() -> (JobHandle, JobToken) {\n+    pub fn new_pair() -> (JobHandle, JobToken) {\n         let (sender_alive, receiver_alive) = bounded(0);\n         let (sender_canceled, receiver_canceled) = bounded(0);\n         let token = JobToken {"}, {"sha": "3302e1151fb9b92938cdec112fffdcabd59c44bc", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -62,7 +62,7 @@ fn get_signature(text: &str) -> (FnDescriptor, Option<usize>) {\n     let (offset, code) = extract_offset(text);\n     let code = code.as_str();\n \n-    let (_handle, token) = JobHandle::new();\n+    let (_handle, token) = JobHandle::new_pair();\n     let snap = analysis(&[(\"/lib.rs\", code)]);\n \n     snap.resolve_callable(FileId(1), offset, &token).unwrap()\n@@ -71,7 +71,7 @@ fn get_signature(text: &str) -> (FnDescriptor, Option<usize>) {\n #[test]\n fn test_resolve_module() {\n     let snap = analysis(&[(\"/lib.rs\", \"mod foo;\"), (\"/foo.rs\", \"\")]);\n-    let (_handle, token) = JobHandle::new();\n+    let (_handle, token) = JobHandle::new_pair();\n     let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into(), &token);\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,"}, {"sha": "84f036c7ee6a736e257f1087fde6ce588abc44e8", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -63,7 +63,7 @@ impl FnScopes {\n             .syntax()\n             .descendants()\n             .filter_map(ast::BindPat::cast)\n-            .filter_map(ScopeEntry::new);\n+            .filter_map(ScopeEntry::new_opt);\n         self.scopes[scope].entries.extend(entries);\n     }\n     fn add_params_bindings(&mut self, scope: ScopeId, params: Option<ast::ParamList>) {\n@@ -88,7 +88,7 @@ pub struct ScopeEntry {\n }\n \n impl ScopeEntry {\n-    fn new(pat: ast::BindPat) -> Option<ScopeEntry> {\n+    fn new_opt(pat: ast::BindPat) -> Option<ScopeEntry> {\n         if pat.name().is_some() {\n             Some(ScopeEntry {\n                 syntax: pat.syntax().owned(),"}, {"sha": "956ee0e2f18a5baf359f995e20567b67b06e2fd2", "filename": "crates/ra_editor/src/scope/mod_scope.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod_scope.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -22,14 +22,14 @@ impl ModuleScope {\n         let mut entries = Vec::new();\n         for item in items {\n             let entry = match item {\n-                ast::ModuleItem::StructDef(item) => Entry::new(item),\n-                ast::ModuleItem::EnumDef(item) => Entry::new(item),\n-                ast::ModuleItem::FnDef(item) => Entry::new(item),\n-                ast::ModuleItem::ConstDef(item) => Entry::new(item),\n-                ast::ModuleItem::StaticDef(item) => Entry::new(item),\n-                ast::ModuleItem::TraitDef(item) => Entry::new(item),\n-                ast::ModuleItem::TypeDef(item) => Entry::new(item),\n-                ast::ModuleItem::Module(item) => Entry::new(item),\n+                ast::ModuleItem::StructDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::EnumDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::FnDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::ConstDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::StaticDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::TraitDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::TypeDef(item) => Entry::new_item(item),\n+                ast::ModuleItem::Module(item) => Entry::new_item(item),\n                 ast::ModuleItem::UseItem(item) => {\n                     if let Some(tree) = item.use_tree() {\n                         collect_imports(tree, &mut entries);\n@@ -50,7 +50,7 @@ impl ModuleScope {\n }\n \n impl Entry {\n-    fn new<'a>(item: impl ast::NameOwner<'a>) -> Option<Entry> {\n+    fn new_item<'a>(item: impl ast::NameOwner<'a>) -> Option<Entry> {\n         let name = item.name()?;\n         Some(Entry {\n             node: name.syntax().owned(),"}, {"sha": "2623ab84ed94d6316729c9611497e8ea80fbd108", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae9dfa812ccf18867373f77a106161378a6d91d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=2ae9dfa812ccf18867373f77a106161378a6d91d", "patch": "@@ -355,7 +355,7 @@ impl<'a> PoolDispatcher<'a> {\n         };\n         match req.cast::<R>() {\n             Ok((id, params)) => {\n-                let (handle, token) = JobHandle::new();\n+                let (handle, token) = JobHandle::new_pair();\n                 let world = self.world.snapshot();\n                 let sender = self.sender.clone();\n                 self.pool.spawn(move || {"}]}