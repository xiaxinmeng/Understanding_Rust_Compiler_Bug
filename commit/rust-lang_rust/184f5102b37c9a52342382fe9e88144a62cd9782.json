{"sha": "184f5102b37c9a52342382fe9e88144a62cd9782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGY1MTAyYjM3YzlhNTIzNDIzODJmZTllODgxNDRhNjJjZDk3ODI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-08T03:09:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-08T03:10:16Z"}, "message": "libsyntax: Fix parsing of module-qualified structure patterns. rs=bugfix", "tree": {"sha": "29ba8619bfa2c27f65cfadb64cb0461d93f4207c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ba8619bfa2c27f65cfadb64cb0461d93f4207c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184f5102b37c9a52342382fe9e88144a62cd9782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184f5102b37c9a52342382fe9e88144a62cd9782", "html_url": "https://github.com/rust-lang/rust/commit/184f5102b37c9a52342382fe9e88144a62cd9782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184f5102b37c9a52342382fe9e88144a62cd9782/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb7996a565b4cc37601c5248aa889fb108023f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7996a565b4cc37601c5248aa889fb108023f9a", "html_url": "https://github.com/rust-lang/rust/commit/cb7996a565b4cc37601c5248aa889fb108023f9a"}], "stats": {"total": 42, "additions": 13, "deletions": 29}, "files": [{"sha": "8e354f7017de8fd6b4136a7bc1134964ecbb5c85", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/184f5102b37c9a52342382fe9e88144a62cd9782/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184f5102b37c9a52342382fe9e88144a62cd9782/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=184f5102b37c9a52342382fe9e88144a62cd9782", "patch": "@@ -2046,8 +2046,6 @@ impl Parser {\n                 pat = self.parse_pat_ident(refutable, bind_by_value);\n             } else if self.eat_keyword(~\"move\") {\n                 pat = self.parse_pat_ident(refutable, bind_by_move);\n-            } else if !is_plain_ident(self.token) {\n-                pat = self.parse_enum_variant(refutable);\n             } else {\n                 let binding_mode;\n                 // XXX: Aren't these two cases deadcode? -- bblum\n@@ -2066,7 +2064,7 @@ impl Parser {\n                 let cannot_be_enum_or_struct;\n                 match self.look_ahead(1) {\n                     token::LPAREN | token::LBRACKET | token::LT |\n-                    token::LBRACE =>\n+                    token::LBRACE | token::MOD_SEP =>\n                         cannot_be_enum_or_struct = false,\n                     _ =>\n                         cannot_be_enum_or_struct = true\n@@ -2163,32 +2161,6 @@ impl Parser {\n         pat_ident(binding_mode, name, sub)\n     }\n \n-    fn parse_enum_variant(refutable: bool) -> ast::pat_ {\n-        let enum_path = self.parse_path_with_tps(true);\n-        match self.token {\n-          token::LPAREN => {\n-            match self.look_ahead(1u) {\n-              token::BINOP(token::STAR) => { // foo(*)\n-                self.expect(token::LPAREN);\n-                self.expect(token::BINOP(token::STAR));\n-                self.expect(token::RPAREN);\n-                pat_enum(enum_path, None)\n-              }\n-              _ => { // foo(a, ..., z)\n-                let args = self.parse_unspanned_seq(\n-                    token::LPAREN, token::RPAREN,\n-                    seq_sep_trailing_disallowed(token::COMMA),\n-                    |p| p.parse_pat(refutable));\n-                pat_enum(enum_path, Some(args))\n-              }\n-            }\n-          }\n-          _ => { // option::None\n-            pat_enum(enum_path, Some(~[]))\n-          }\n-        }\n-    }\n-\n     fn parse_local(is_mutbl: bool,\n                    allow_init: bool) -> @local {\n         let lo = self.span.lo;"}, {"sha": "ee7359b0a6d796b60061c49dd41ff352b8b3bbd4", "filename": "src/test/run-pass/module-qualified-struct-destructure.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/184f5102b37c9a52342382fe9e88144a62cd9782/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184f5102b37c9a52342382fe9e88144a62cd9782/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs?ref=184f5102b37c9a52342382fe9e88144a62cd9782", "patch": "@@ -0,0 +1,12 @@\n+mod m {\n+    pub struct S {\n+        x: int,\n+        y: int\n+    }\n+}\n+\n+fn main() {\n+    let x = m::S { x: 1, y: 2 };\n+    let m::S { x: a, y: b } = x;\n+}\n+"}]}