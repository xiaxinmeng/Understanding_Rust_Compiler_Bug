{"sha": "d0dd797709540f460ee6c9ac26f1231335781b40", "node_id": "C_kwDOAAsO6NoAKGQwZGQ3OTc3MDk1NDBmNDYwZWU2YzlhYzI2ZjEyMzEzMzU3ODFiNDA", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-09-07T09:59:53Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Build end of suggestion only once at the end of the process", "tree": {"sha": "ad5bb4dba6692e97f1e3398ab52908da1ff34114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad5bb4dba6692e97f1e3398ab52908da1ff34114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0dd797709540f460ee6c9ac26f1231335781b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dd797709540f460ee6c9ac26f1231335781b40", "html_url": "https://github.com/rust-lang/rust/commit/d0dd797709540f460ee6c9ac26f1231335781b40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0dd797709540f460ee6c9ac26f1231335781b40/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab4b673eb41cca04a626797bb130bda4a14bd1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4b673eb41cca04a626797bb130bda4a14bd1b", "html_url": "https://github.com/rust-lang/rust/commit/9ab4b673eb41cca04a626797bb130bda4a14bd1b"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "e793c50ac9d19a94d744fd3d115fcdd9233d6500", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0dd797709540f460ee6c9ac26f1231335781b40/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0dd797709540f460ee6c9ac26f1231335781b40/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=d0dd797709540f460ee6c9ac26f1231335781b40", "patch": "@@ -166,7 +166,6 @@ fn get_closure_suggestion<'tcx>(\n         closure_span: search_arg.span,\n         next_pos: search_arg.span.lo(),\n         suggestion_start: String::new(),\n-        suggestion_end: String::new(),\n         applicability: Applicability::MachineApplicable,\n     };\n \n@@ -179,7 +178,7 @@ fn get_closure_suggestion<'tcx>(\n     if visitor.suggestion_start.is_empty() {\n         None\n     } else {\n-        Some(format!(\"{}{}\", visitor.suggestion_start, visitor.suggestion_end))\n+        Some(visitor.finish())\n     }\n }\n \n@@ -188,10 +187,17 @@ struct DerefDelegate<'a, 'tcx> {\n     closure_span: Span,\n     next_pos: BytePos,\n     suggestion_start: String,\n-    suggestion_end: String,\n     applicability: Applicability,\n }\n \n+impl DerefDelegate<'_, 'tcx> {\n+    pub fn finish(&mut self) -> String {\n+        let end_span = Span::new(self.next_pos, self.closure_span.hi(), self.closure_span.ctxt());\n+        let end_snip = snippet_with_applicability(self.cx, end_span, \"..\", &mut self.applicability);\n+        format!(\"{}{}\", self.suggestion_start, end_snip)\n+    }\n+}\n+\n impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n@@ -202,8 +208,6 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             let span = map.span(cmt.hir_id);\n             let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n             let start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n-            let end_span = Span::new(span.hi(), self.closure_span.hi(), span.ctxt());\n-            let end_snip = snippet_with_applicability(self.cx, end_span, \"..\", &mut self.applicability);\n \n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n@@ -225,7 +229,6 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                                         snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n \n                                     self.suggestion_start.push_str(&format!(\"{}&{}\", start_snip, ident_str));\n-                                    self.suggestion_end = end_snip.to_string();\n                                     self.next_pos = span.hi();\n                                 } else {\n                                     self.applicability = Applicability::Unspecified;\n@@ -258,7 +261,6 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n \n                 self.suggestion_start\n                     .push_str(&format!(\"{}{}\", start_snip, replacement_str));\n-                self.suggestion_end = end_snip.to_string();\n             }\n             self.next_pos = span.hi();\n         }"}]}