{"sha": "db9d361a4731ca0bb48533fab6297a8fea75696f", "node_id": "C_kwDOAAsO6NoAKGRiOWQzNjFhNDczMWNhMGJiNDg1MzNmYWI2Mjk3YThmZWE3NTY5NmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-28T17:14:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-28T17:14:04Z"}, "message": "Auto merge of #91320 - matthiaskrgr:rollup-r209seq, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #91251 (Perform Sync check on static items in wf-check instead of during const checks)\n - #91308 (Fix ICE when lowering `trait A where for<'a> Self: 'a`)\n - #91319 (Change output path to {{build-base}} for rustdoc scrape_examples ui test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "35ec0109c57f1cca306d142f634226298c3280f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ec0109c57f1cca306d142f634226298c3280f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9d361a4731ca0bb48533fab6297a8fea75696f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d361a4731ca0bb48533fab6297a8fea75696f", "html_url": "https://github.com/rust-lang/rust/commit/db9d361a4731ca0bb48533fab6297a8fea75696f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9d361a4731ca0bb48533fab6297a8fea75696f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d2de9483a27f846f003fc745713339a9122473", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d2de9483a27f846f003fc745713339a9122473", "html_url": "https://github.com/rust-lang/rust/commit/e6d2de9483a27f846f003fc745713339a9122473"}, {"sha": "a7639b67ac4628cec832b2aea9b6c0f396f0023b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7639b67ac4628cec832b2aea9b6c0f396f0023b", "html_url": "https://github.com/rust-lang/rust/commit/a7639b67ac4628cec832b2aea9b6c0f396f0023b"}], "stats": {"total": 285, "additions": 141, "deletions": 144}, "files": [{"sha": "274665ccd98364f7f4f90d060247840e6f4ca46e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,8 +1,8 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n use rustc_errors::{Applicability, Diagnostic, ErrorReported};\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_index::bit_set::BitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n@@ -14,8 +14,7 @@ use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty,\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n-use rustc_trait_selection::traits::{self, SelectionContext, TraitEngine};\n+use rustc_trait_selection::traits::SelectionContext;\n \n use std::mem;\n use std::ops::Deref;\n@@ -255,16 +254,6 @@ impl Checker<'mir, 'tcx> {\n             self.visit_body(&body);\n         }\n \n-        // Ensure that the end result is `Sync` in a non-thread local `static`.\n-        let should_check_for_sync = self.const_kind()\n-            == hir::ConstContext::Static(hir::Mutability::Not)\n-            && !tcx.is_thread_local_static(def_id.to_def_id());\n-\n-        if should_check_for_sync {\n-            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-            check_return_ty_is_sync(tcx, &body, hir_id);\n-        }\n-\n         // If we got through const-checking without emitting any \"primary\" errors, emit any\n         // \"secondary\" errors if they occurred.\n         let secondary_errors = mem::take(&mut self.secondary_errors);\n@@ -1054,20 +1043,6 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n     }\n }\n \n-fn check_return_ty_is_sync(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, hir_id: HirId) {\n-    let ty = body.return_ty();\n-    tcx.infer_ctxt().enter(|infcx| {\n-        let cause = traits::ObligationCause::new(body.span, hir_id, traits::SharedStatic);\n-        let mut fulfillment_cx = traits::FulfillmentContext::new();\n-        let sync_def_id = tcx.require_lang_item(LangItem::Sync, Some(body.span));\n-        fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), ty, sync_def_id, cause);\n-        let errors = fulfillment_cx.select_all_or_error(&infcx);\n-        if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-        }\n-    });\n-}\n-\n fn place_as_reborrow(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,"}, {"sha": "78088b9bd0c38463d5a2265eaea7dac9a1f70166", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1060,6 +1060,20 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n             );\n         }\n \n+        // Ensure that the end result is `Sync` in a non-thread local `static`.\n+        let should_check_for_sync = tcx.static_mutability(item_id.to_def_id())\n+            == Some(hir::Mutability::Not)\n+            && !tcx.is_foreign_item(item_id.to_def_id())\n+            && !tcx.is_thread_local_static(item_id.to_def_id());\n+\n+        if should_check_for_sync {\n+            fcx.register_bound(\n+                item_ty,\n+                tcx.require_lang_item(LangItem::Sync, Some(ty_span)),\n+                traits::ObligationCause::new(ty_span, fcx.body_id, traits::SharedStatic),\n+            );\n+        }\n+\n         // No implied bounds in a const, etc.\n         FxHashSet::default()\n     });"}, {"sha": "39fac12e297431f06fe24dd3f1aaad3e5a2e32df", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -666,7 +666,7 @@ impl ItemCtxt<'tcx> {\n                 Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                 None => true,\n             })\n-            .flat_map(|b| predicates_from_bound(self, ty, b));\n+            .flat_map(|b| predicates_from_bound(self, ty, b, ty::List::empty()));\n \n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n         let from_where_clauses = ast_generics\n@@ -685,15 +685,17 @@ impl ItemCtxt<'tcx> {\n                 } else {\n                     None\n                 };\n+                let bvars = self.tcx.late_bound_vars(bp.bounded_ty.hir_id);\n+\n                 bp.bounds\n                     .iter()\n                     .filter(|b| match assoc_name {\n                         Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                         None => true,\n                     })\n-                    .filter_map(move |b| bt.map(|bt| (bt, b)))\n+                    .filter_map(move |b| bt.map(|bt| (bt, b, bvars)))\n             })\n-            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n+            .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n@@ -2433,14 +2435,10 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n+    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     let mut bounds = Bounds::default();\n-    astconv.add_bounds(\n-        param_ty,\n-        std::array::IntoIter::new([bound]),\n-        &mut bounds,\n-        ty::List::empty(),\n-    );\n+    astconv.add_bounds(param_ty, [bound].into_iter(), &mut bounds, bound_vars);\n     bounds.predicates(astconv.tcx(), param_ty)\n }\n "}, {"sha": "d629b62a7241a1b3ac9cb775e67f1d1128ffa076", "filename": "src/test/rustdoc-ui/scrape-examples-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-ice.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z unstable-options --scrape-examples-output-path t.calls --scrape-examples-target-crate foobar\n+// compile-flags: -Z unstable-options --scrape-examples-output-path {{build-base}}/t.calls --scrape-examples-target-crate foobar\n // check-pass\n #![no_std]\n use core as _;"}, {"sha": "5e6d7d899ec1ea87bc5c311126b980a385d17617", "filename": "src/test/ui/consts/const-cast-different-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,6 +1,6 @@\n-static a: &'static str = \"foo\";\n-static b: *const u8 = a as *const u8; //~ ERROR casting\n-static c: *const u8 = &a as *const u8; //~ ERROR casting\n+const a: &str = \"foo\";\n+const b: *const u8 = a as *const u8; //~ ERROR casting\n+const c: *const u8 = &a as *const u8; //~ ERROR casting\n \n fn main() {\n }"}, {"sha": "9e622de2eb004ecdff911c191ebf42ac80a3c24d", "filename": "src/test/ui/consts/const-cast-different-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,14 +1,14 @@\n error[E0606]: casting `&'static str` as `*const u8` is invalid\n-  --> $DIR/const-cast-different-types.rs:2:23\n+  --> $DIR/const-cast-different-types.rs:2:22\n    |\n-LL | static b: *const u8 = a as *const u8;\n-   |                       ^^^^^^^^^^^^^^\n+LL | const b: *const u8 = a as *const u8;\n+   |                      ^^^^^^^^^^^^^^\n \n error[E0606]: casting `&&'static str` as `*const u8` is invalid\n-  --> $DIR/const-cast-different-types.rs:3:23\n+  --> $DIR/const-cast-different-types.rs:3:22\n    |\n-LL | static c: *const u8 = &a as *const u8;\n-   |                       ^^^^^^^^^^^^^^^\n+LL | const c: *const u8 = &a as *const u8;\n+   |                      ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6e055a2bcd34029c24e55e05d4f02189be052fd7", "filename": "src/test/ui/consts/const-cast-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,5 +1,5 @@\n-static a: [u8; 3] = ['h' as u8, 'i' as u8, 0 as u8];\n-static b: *const i8 = &a as *const i8; //~ ERROR mismatched types\n+const a: [u8; 3] = ['h' as u8, 'i' as u8, 0 as u8];\n+const b: *const i8 = &a as *const i8; //~ ERROR mismatched types\n \n fn main() {\n }"}, {"sha": "ee186636e4ebe0fe61c7127b2153a658d78505c7", "filename": "src/test/ui/consts/const-cast-wrong-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-cast-wrong-type.rs:2:23\n+  --> $DIR/const-cast-wrong-type.rs:2:22\n    |\n-LL | static b: *const i8 = &a as *const i8;\n-   |                       ^^^^^^^^^^^^^^^ expected `u8`, found `i8`\n+LL | const b: *const i8 = &a as *const i8;\n+   |                      ^^^^^^^^^^^^^^^ expected `u8`, found `i8`\n \n error: aborting due to previous error\n "}, {"sha": "b50f56b03d9cd0ecd89fb439617d6ceff6d58987", "filename": "src/test/ui/higher-rank-trait-bounds/issue-88586-hr-self-outlives-in-trait-def.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #88586: a higher-ranked outlives bound on Self in a trait\n+// definition caused an ICE when debug_assertions were enabled.\n+//\n+// FIXME: The error output in the absence of the ICE is unhelpful; this should be improved.\n+\n+trait A where for<'a> Self: 'a\n+//~^ ERROR the parameter type `Self` may not live long enough\n+{\n+}\n+\n+fn main() {}"}, {"sha": "18618ffcc86dc84098cab2debd2ad05d604dc2ce", "filename": "src/test/ui/higher-rank-trait-bounds/issue-88586-hr-self-outlives-in-trait-def.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88586-hr-self-outlives-in-trait-def.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -0,0 +1,19 @@\n+error[E0311]: the parameter type `Self` may not live long enough\n+  --> $DIR/issue-88586-hr-self-outlives-in-trait-def.rs:6:1\n+   |\n+LL | / trait A where for<'a> Self: 'a\n+LL | |\n+LL | | {\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/issue-88586-hr-self-outlives-in-trait-def.rs:6:29\n+   |\n+LL | trait A where for<'a> Self: 'a\n+   |                             ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e3386d29def02eabcb4840186426032754fc1bc0", "filename": "src/test/ui/impl-trait/issues/issue-86201.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -2,9 +2,9 @@\n #![feature(type_alias_impl_trait)]\n \n type FunType = impl Fn<()>;\n-//~^ could not find defining uses\n+//~^ ERROR could not find defining uses\n static STATIC_FN: FunType = some_fn;\n-//~^ mismatched types\n+//~^ ERROR mismatched types\n \n fn some_fn() {}\n "}, {"sha": "5a276f27886d29830b85009b2ad518f162f24f5a", "filename": "src/test/ui/issues/issue-16538.mir.stderr", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,27 +1,26 @@\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-16538.rs:14:27\n+  --> $DIR/issue-16538.rs:15:23\n    |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `*const usize` cannot be shared between threads safely\n-  --> $DIR/issue-16538.rs:14:1\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:15:30\n    |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n+LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+   |                              ^^^^ use of extern static\n    |\n-   = help: the trait `Sync` is not implemented for `*const usize`\n-   = note: shared static variables must have a type that implements `Sync`\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:14:34\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:15:21\n    |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   |                                  ^^^^ use of extern static\n+LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer\n    |\n-   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0015, E0133, E0277.\n+Some errors have detailed explanations: E0015, E0133.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "b6891deb937da0af8a10319f2255d0b81c644dcd", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,6 +1,7 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n+#![feature(const_raw_ptr_deref)]\n mod Y {\n     pub type X = usize;\n     extern \"C\" {\n@@ -11,8 +12,8 @@ mod Y {\n     }\n }\n \n-static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-//~^ ERROR `*const usize` cannot be shared between threads safely [E0277]\n+static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+//~^ ERROR dereference of raw pointer\n //~| ERROR E0015\n //~| ERROR use of extern static is unsafe and requires\n "}, {"sha": "8365a1dbf6e5ebdb92e1a4fa9ae7c860629b8fb8", "filename": "src/test/ui/issues/issue-16538.thir.stderr", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,27 +1,26 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:15:22\n+   |\n+LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:14:34\n+  --> $DIR/issue-16538.rs:15:30\n    |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   |                                  ^^^^ use of extern static\n+LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+   |                              ^^^^ use of extern static\n    |\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-16538.rs:14:27\n-   |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `*const usize` cannot be shared between threads safely\n-  --> $DIR/issue-16538.rs:14:1\n-   |\n-LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n+  --> $DIR/issue-16538.rs:15:23\n    |\n-   = help: the trait `Sync` is not implemented for `*const usize`\n-   = note: shared static variables must have a type that implements `Sync`\n+LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0015, E0133, E0277.\n+Some errors have detailed explanations: E0015, E0133.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "bc6e45e59258f370cda1ad3e9541d376c2ee2cd0", "filename": "src/test/ui/issues/issue-17718-static-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Foo` cannot be shared between threads safely\n-  --> $DIR/issue-17718-static-sync.rs:9:1\n+  --> $DIR/issue-17718-static-sync.rs:9:13\n    |\n LL | static BAR: Foo = Foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be shared between threads safely\n+   |             ^^^ `Foo` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Foo`\n    = note: shared static variables must have a type that implements `Sync`"}, {"sha": "9ab952ade9cf4636ccddc39c1d88908ee51addf5", "filename": "src/test/ui/issues/issue-24446.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     static foo: dyn Fn() -> u32 = || -> u32 {\n         //~^ ERROR the size for values of type\n+        //~| ERROR cannot be shared between threads safely\n         0\n     };\n }"}, {"sha": "4afb87c48254901a651d09cb9f8d1fa82f612b6a", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -6,6 +6,15 @@ LL |     static foo: dyn Fn() -> u32 = || -> u32 {\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Fn() -> u32 + 'static)`\n \n-error: aborting due to previous error\n+error[E0277]: `(dyn Fn() -> u32 + 'static)` cannot be shared between threads safely\n+  --> $DIR/issue-24446.rs:2:17\n+   |\n+LL |     static foo: dyn Fn() -> u32 = || -> u32 {\n+   |                 ^^^^^^^^^^^^^^^ `(dyn Fn() -> u32 + 'static)` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `(dyn Fn() -> u32 + 'static)`\n+   = note: shared static variables must have a type that implements `Sync`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4072a57cb10526aaccd0f12937c5328202db6608", "filename": "src/test/ui/issues/issue-5216.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5216.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,10 +1,10 @@\n fn f() { }\n-struct S(Box<dyn FnMut()>);\n+struct S(Box<dyn FnMut() + Sync>);\n pub static C: S = S(f); //~ ERROR mismatched types\n \n \n fn g() { }\n-type T = Box<dyn FnMut()>;\n+type T = Box<dyn FnMut() + Sync>;\n pub static D: T = g; //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "29c95e4fb62b89f4206e0ccf144549423b43ec29", "filename": "src/test/ui/issues/issue-5216.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | pub static C: S = S(f);\n    |                     ^ expected struct `Box`, found fn item\n    |\n-   = note: expected struct `Box<(dyn FnMut() + 'static)>`\n+   = note: expected struct `Box<(dyn FnMut() + Sync + 'static)>`\n              found fn item `fn() {f}`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL | pub static D: T = g;\n    |                   ^ expected struct `Box`, found fn item\n    |\n-   = note: expected struct `Box<(dyn FnMut() + 'static)>`\n+   = note: expected struct `Box<(dyn FnMut() + Sync + 'static)>`\n              found fn item `fn() {g}`\n \n error: aborting due to 2 previous errors"}, {"sha": "83c52d286a199c9ea1c2d9f71c22aafef4af4047", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -4,7 +4,6 @@ use std::cell::RefCell;\n \n // Regression test for issue 7364\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n-//~^ ERROR allocations are not allowed in statics\n-//~| ERROR `RefCell<isize>` cannot be shared between threads safely [E0277]\n+//~^ ERROR `RefCell<isize>` cannot be shared between threads safely [E0277]\n \n fn main() { }"}, {"sha": "f2e80f451695ac3a9c4fe235572cff1f146e1613", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,21 +1,14 @@\n-error[E0010]: allocations are not allowed in statics\n-  --> $DIR/issue-7364.rs:6:37\n-   |\n-LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n-   |                                     ^^^^^^^^^^^^^^^^^^^ allocation not allowed in statics\n-\n error[E0277]: `RefCell<isize>` cannot be shared between threads safely\n-  --> $DIR/issue-7364.rs:6:1\n+  --> $DIR/issue-7364.rs:6:15\n    |\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<isize>` cannot be shared between threads safely\n+   |               ^^^^^^^^^^^^^^^^^^^ `RefCell<isize>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<isize>`\n    = note: required because of the requirements on the impl of `Sync` for `Unique<RefCell<isize>>`\n    = note: required because it appears within the type `Box<RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0010, E0277.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "86513b6064d2df50f0af1a961afea91cab6fb4bd", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,26 +1,5 @@\n-error[E0277]: `dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Foo<'b>` cannot be shared between threads safely\n-  --> $DIR/rfc1623.rs:21:1\n-   |\n-LL | / static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n-LL | |\n-LL | | };\n-   | |__^ `dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Foo<'b>` cannot be shared between threads safely\n-   |\n-   = help: within `&SomeStruct`, the trait `Sync` is not implemented for `dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n-   = note: required because it appears within the type `&dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n-note: required because it appears within the type `SomeStruct`\n-  --> $DIR/rfc1623.rs:11:8\n-   |\n-LL | struct SomeStruct<'x, 'y, 'z: 'x> {\n-   |        ^^^^^^^^^^\n-   = note: required because it appears within the type `&SomeStruct`\n-   = note: shared static variables must have a type that implements `Sync`\n-\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:21:35\n+  --> $DIR/rfc1623.rs:25:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n@@ -35,7 +14,7 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:21:35\n+  --> $DIR/rfc1623.rs:25:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n@@ -50,7 +29,7 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:21:35\n+  --> $DIR/rfc1623.rs:25:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n@@ -65,7 +44,7 @@ LL | | };\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:21:35\n+  --> $DIR/rfc1623.rs:25:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n@@ -79,7 +58,6 @@ LL | | };\n    = note: `fn(&Foo<'2>) -> &Foo<'2> {id::<&Foo<'2>>}` must implement `FnOnce<(&'a Foo<'1>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&Foo<'2>,)>`, for some specific lifetime `'2`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "32e00f9cb76c301e5c3107c6e03a803979389d3b", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -14,6 +14,10 @@ struct SomeStruct<'x, 'y, 'z: 'x> {\n     f: &'y dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Foo<'b>,\n }\n \n+// Without this, the wf-check will fail early so we'll never see the\n+// error in SOME_STRUCT's body.\n+unsafe impl<'x, 'y, 'z: 'x> Sync for SomeStruct<'x, 'y, 'z> {}\n+\n fn id<T>(t: T) -> T {\n     t\n }"}, {"sha": "16829b5caa0b6894304ddcae9ba8d5706acd515d", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:24:8\n+  --> $DIR/rfc1623.rs:28:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough"}, {"sha": "86b685022b20ec7dd71e5b9b757c57c01253285c", "filename": "src/test/ui/type-alias-impl-trait/static-const-types.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.rs?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -5,12 +5,9 @@\n \n use std::fmt::Debug;\n \n-type Foo = impl Debug;\n-//~^ ERROR: could not find defining uses\n+type Foo = impl Debug; //~ ERROR could not find defining uses\n \n-static FOO1: Foo = 22_u32;\n-//~^ ERROR: mismatched types [E0308]\n-const FOO2: Foo = 22_u32;\n-//~^ ERROR: mismatched types [E0308]\n+static FOO1: Foo = 22_u32; //~ ERROR mismatched types\n+const FOO2: Foo = 22_u32; //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "6f4c2944f72851e4ec6b1c8084091b1d86d19b2f", "filename": "src/test/ui/type-alias-impl-trait/static-const-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db9d361a4731ca0bb48533fab6297a8fea75696f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstatic-const-types.stderr?ref=db9d361a4731ca0bb48533fab6297a8fea75696f", "patch": "@@ -1,17 +1,17 @@\n error[E0308]: mismatched types\n-  --> $DIR/static-const-types.rs:11:20\n+  --> $DIR/static-const-types.rs:10:20\n    |\n LL | type Foo = impl Debug;\n    |            ---------- the expected opaque type\n-...\n+LL | \n LL | static FOO1: Foo = 22_u32;\n    |                    ^^^^^^ expected opaque type, found `u32`\n    |\n    = note: expected opaque type `impl Debug`\n                      found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/static-const-types.rs:13:19\n+  --> $DIR/static-const-types.rs:11:19\n    |\n LL | type Foo = impl Debug;\n    |            ---------- the expected opaque type"}]}