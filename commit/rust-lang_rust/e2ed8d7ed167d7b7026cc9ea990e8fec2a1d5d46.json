{"sha": "e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "node_id": "C_kwDOAAsO6NoAKGUyZWQ4ZDdlZDE2N2Q3YjcwMjZjYzllYTk5MGU4ZmVjMmExZDVkNDY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-01T14:49:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-01T14:49:16Z"}, "message": "Rollup merge of #97488 - vincenzopalazzo:macros/blanket_sugg, r=compiler-errors\n\nSuggest blanket impl to the local traits\n\nThis PR will add additional suggestion regarding the blanket implementation when it is possible, by generation a new help message + suggestion.\n\nCloses https://github.com/rust-lang/rust/issues/96076\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>", "tree": {"sha": "872c8b5b0b317b219daf968b60e0649886ad2c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872c8b5b0b317b219daf968b60e0649886ad2c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivwltCRBK7hj4Ov3rIwAAesEIAHC1uoRKnughaVMybKVjFPIk\nW15/t0WJHsaqNvEXwre9cgwXSSR4pkfFHNLxMSFcCnv4p2bs7dgRecRKN12wT6J6\nZj6PBbaqSKxuundv1yPTX+XVDZXMZSLP9WPKhmhO0PtPCM7hOdZm0kY+p92gJJhk\n2qD1WF3wKbnTOdLwCeNsTs7eUGbgjy7y/burURm8JwDr285LNDaEWK1ISJPOy33m\nFzFAc33v/sWJAXAe7ah/eL3AtjPIHL5bwmphq9NqgXRKzPQtz28YWyum7c8z30Hm\nkvITZGT7qSCu1o2mAgIerxX5HrMsN67l43U6WP53n2lHawPQrKzLquhmkpmRPCQ=\n=lgrS\n-----END PGP SIGNATURE-----\n", "payload": "tree 872c8b5b0b317b219daf968b60e0649886ad2c85\nparent ca1e68b3229e710c3948a361ee770d846a88e6da\nparent 835b7a523a41cc89f0839f40652477af097db390\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656686956 +0530\ncommitter GitHub <noreply@github.com> 1656686956 +0530\n\nRollup merge of #97488 - vincenzopalazzo:macros/blanket_sugg, r=compiler-errors\n\nSuggest blanket impl to the local traits\n\nThis PR will add additional suggestion regarding the blanket implementation when it is possible, by generation a new help message + suggestion.\n\nCloses https://github.com/rust-lang/rust/issues/96076\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "html_url": "https://github.com/rust-lang/rust/commit/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1e68b3229e710c3948a361ee770d846a88e6da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e68b3229e710c3948a361ee770d846a88e6da", "html_url": "https://github.com/rust-lang/rust/commit/ca1e68b3229e710c3948a361ee770d846a88e6da"}, {"sha": "835b7a523a41cc89f0839f40652477af097db390", "url": "https://api.github.com/repos/rust-lang/rust/commits/835b7a523a41cc89f0839f40652477af097db390", "html_url": "https://github.com/rust-lang/rust/commit/835b7a523a41cc89f0839f40652477af097db390"}], "stats": {"total": 237, "additions": 226, "deletions": 11}, "files": [{"sha": "37958cc0f40324fb0756baaa3f37277cd62dd542", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "patch": "@@ -38,7 +38,9 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n-use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n+use rustc_trait_selection::traits::error_reporting::{\n+    report_object_safety_error, suggestions::NextTypeParamName,\n+};\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n use smallvec::SmallVec;\n@@ -2986,6 +2988,50 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         Some(r)\n     }\n \n+    /// Make sure that we are in the condition to suggest the blanket implementation.\n+    fn maybe_lint_blanket_trait_impl<T: rustc_errors::EmissionGuarantee>(\n+        &self,\n+        self_ty: &hir::Ty<'_>,\n+        diag: &mut DiagnosticBuilder<'_, T>,\n+    ) {\n+        let tcx = self.tcx();\n+        let parent_id = tcx.hir().get_parent_item(self_ty.hir_id);\n+        if let hir::Node::Item(hir::Item {\n+            kind:\n+                hir::ItemKind::Impl(hir::Impl {\n+                    self_ty: impl_self_ty, of_trait: Some(of_trait_ref), generics, ..\n+                }),\n+            ..\n+        }) = tcx.hir().get_by_def_id(parent_id) && self_ty.hir_id == impl_self_ty.hir_id\n+        {\n+            if !of_trait_ref.trait_def_id().map_or(false, |def_id| def_id.is_local()) {\n+                return;\n+            }\n+            let of_trait_span = of_trait_ref.path.span;\n+            // make sure that we are not calling unwrap to abort during the compilation\n+            let Ok(impl_trait_name) = tcx.sess.source_map().span_to_snippet(self_ty.span) else { return; };\n+            let Ok(of_trait_name) = tcx.sess.source_map().span_to_snippet(of_trait_span) else { return; };\n+            // check if the trait has generics, to make a correct suggestion\n+            let param_name = generics.params.next_type_param_name(None);\n+\n+            let add_generic_sugg = if let Some(span) = generics.span_for_param_suggestion() {\n+                (span, format!(\", {}: {}\", param_name, impl_trait_name))\n+            } else {\n+                (generics.span, format!(\"<{}: {}>\", param_name, impl_trait_name))\n+            };\n+            diag.multipart_suggestion(\n+            format!(\"alternatively use a blanket \\\n+                     implementation to implement `{of_trait_name}` for \\\n+                     all types that also implement `{impl_trait_name}`\"),\n+                vec![\n+                    (self_ty.span, param_name),\n+                    add_generic_sugg,\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n+\n     fn maybe_lint_bare_trait(&self, self_ty: &hir::Ty<'_>, in_path: bool) {\n         let tcx = self.tcx();\n         if let hir::TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n@@ -3021,23 +3067,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             if self_ty.span.edition() >= Edition::Edition2021 {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";\n-                rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg)\n-                    .multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable)\n-                    .emit();\n+                let mut diag =\n+                    rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg);\n+                diag.multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable);\n+                // check if the impl trait that we are considering is a impl of a local trait\n+                self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n+                diag.emit();\n             } else {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 tcx.struct_span_lint_hir(\n                     BARE_TRAIT_OBJECTS,\n                     self_ty.hir_id,\n                     self_ty.span,\n                     |lint| {\n-                        lint.build(msg)\n-                            .multipart_suggestion_verbose(\n-                                \"use `dyn`\",\n-                                sugg,\n-                                Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n+                        let mut diag = lint.build(msg);\n+                        diag.multipart_suggestion_verbose(\n+                            \"use `dyn`\",\n+                            sugg,\n+                            Applicability::MachineApplicable,\n+                        );\n+                        self.maybe_lint_blanket_trait_impl::<()>(&self_ty, &mut diag);\n+                        diag.emit();\n                     },\n                 );\n             }"}, {"sha": "7cf536f7966e0c342df53f2671cf10ffd0103523", "filename": "src/test/ui/suggestions/suggest-blanket-impl-local-trait.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs?ref=e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "patch": "@@ -0,0 +1,58 @@\n+// Ensure that the compiler include the blanklet implementation suggestion\n+// when inside a `impl` statment are used two local traits.\n+//\n+// edition:2021\n+use std::fmt;\n+\n+trait LocalTraitOne { }\n+\n+trait LocalTraitTwo { }\n+\n+trait GenericTrait<T> {}\n+\n+impl LocalTraitTwo for LocalTraitOne {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+//~| HELP alternatively use a blanket implementation to implement `LocalTraitTwo` for all types that also implement `LocalTraitOne`\n+\n+impl fmt::Display for LocalTraitOne {\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!();\n+    }\n+}\n+\n+impl fmt::Display for LocalTraitTwo + Send {\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!();\n+    }\n+}\n+\n+impl LocalTraitOne for fmt::Display {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+//~| HELP alternatively use a blanket implementation to implement `LocalTraitOne` for all types that also implement `fmt::Display`\n+\n+\n+impl LocalTraitOne for fmt::Display + Send {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+//~| HELP alternatively use a blanket implementation to implement `LocalTraitOne` for all types that also implement `fmt::Display + Send`\n+\n+\n+impl<E> GenericTrait<E> for LocalTraitOne {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+//~| HELP alternatively use a blanket implementation to implement `GenericTrait<E>` for all types that also implement `LocalTraitOne`\n+\n+trait GenericTraitTwo<T> {}\n+\n+impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n+//~^ ERROR trait objects must include the `dyn` keyword\n+//~| HELP add `dyn` keyword before this trait\n+//~| HELP alternatively use a blanket implementation to implement `GenericTraitTwo<E>` for all types that also implement `GenericTrait<T>`\n+\n+fn main() {}"}, {"sha": "d739a8272f1520826951aaeb2e3b12c31853f7d3", "filename": "src/test/ui/suggestions/suggest-blanket-impl-local-trait.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr?ref=e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46", "patch": "@@ -0,0 +1,107 @@\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:13:24\n+   |\n+LL | impl LocalTraitTwo for LocalTraitOne {}\n+   |                        ^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl LocalTraitTwo for LocalTraitOne {}\n+LL + impl LocalTraitTwo for dyn LocalTraitOne {}\n+   |\n+help: alternatively use a blanket implementation to implement `LocalTraitTwo` for all types that also implement `LocalTraitOne`\n+   |\n+LL | impl<T: LocalTraitOne> LocalTraitTwo for T {}\n+   |     ++++++++++++++++++                   ~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:18:23\n+   |\n+LL | impl fmt::Display for LocalTraitOne {\n+   |                       ^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl fmt::Display for LocalTraitOne {\n+LL + impl fmt::Display for dyn LocalTraitOne {\n+   |\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:26:23\n+   |\n+LL | impl fmt::Display for LocalTraitTwo + Send {\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl fmt::Display for LocalTraitTwo + Send {\n+LL + impl fmt::Display for dyn LocalTraitTwo + Send {\n+   |\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:34:24\n+   |\n+LL | impl LocalTraitOne for fmt::Display {}\n+   |                        ^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl LocalTraitOne for fmt::Display {}\n+LL + impl LocalTraitOne for dyn fmt::Display {}\n+   |\n+help: alternatively use a blanket implementation to implement `LocalTraitOne` for all types that also implement `fmt::Display`\n+   |\n+LL | impl<T: fmt::Display> LocalTraitOne for T {}\n+   |     +++++++++++++++++                   ~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:40:24\n+   |\n+LL | impl LocalTraitOne for fmt::Display + Send {}\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl LocalTraitOne for fmt::Display + Send {}\n+LL + impl LocalTraitOne for dyn fmt::Display + Send {}\n+   |\n+help: alternatively use a blanket implementation to implement `LocalTraitOne` for all types that also implement `fmt::Display + Send`\n+   |\n+LL | impl<T: fmt::Display + Send> LocalTraitOne for T {}\n+   |     ++++++++++++++++++++++++                   ~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:46:29\n+   |\n+LL | impl<E> GenericTrait<E> for LocalTraitOne {}\n+   |                             ^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<E> GenericTrait<E> for LocalTraitOne {}\n+LL + impl<E> GenericTrait<E> for dyn LocalTraitOne {}\n+   |\n+help: alternatively use a blanket implementation to implement `GenericTrait<E>` for all types that also implement `LocalTraitOne`\n+   |\n+LL | impl<E, T: LocalTraitOne> GenericTrait<E> for T {}\n+   |       ++++++++++++++++++                      ~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-blanket-impl-local-trait.rs:53:35\n+   |\n+LL | impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n+   |                                   ^^^^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n+LL + impl<T, E> GenericTraitTwo<E> for dyn GenericTrait<T> {}\n+   |\n+help: alternatively use a blanket implementation to implement `GenericTraitTwo<E>` for all types that also implement `GenericTrait<T>`\n+   |\n+LL | impl<T, E, U: GenericTrait<T>> GenericTraitTwo<E> for U {}\n+   |          ++++++++++++++++++++                         ~\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0782`."}, {"sha": "0a357e006c3573ed6279ee359d93dd788baec86a", "filename": "suggest-blanket-impl-local-trait", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/suggest-blanket-impl-local-trait", "raw_url": "https://github.com/rust-lang/rust/raw/e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46/suggest-blanket-impl-local-trait", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/suggest-blanket-impl-local-trait?ref=e2ed8d7ed167d7b7026cc9ea990e8fec2a1d5d46"}]}