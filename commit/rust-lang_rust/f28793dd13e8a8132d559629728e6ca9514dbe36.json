{"sha": "f28793dd13e8a8132d559629728e6ca9514dbe36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODc5M2RkMTNlOGE4MTMyZDU1OTYyOTcyOGU2Y2E5NTE0ZGJlMzY=", "commit": {"author": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-06T21:53:29Z"}, "committer": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-22T21:55:03Z"}, "message": "Feat: added inline asm support for s390x", "tree": {"sha": "81418f52be3201b4c3ebd1bb419f3699f897d8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81418f52be3201b4c3ebd1bb419f3699f897d8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28793dd13e8a8132d559629728e6ca9514dbe36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28793dd13e8a8132d559629728e6ca9514dbe36", "html_url": "https://github.com/rust-lang/rust/commit/f28793dd13e8a8132d559629728e6ca9514dbe36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28793dd13e8a8132d559629728e6ca9514dbe36/comments", "author": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91f9806208834de3fb5f62712356b0d84ec388fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f9806208834de3fb5f62712356b0d84ec388fd", "html_url": "https://github.com/rust-lang/rust/commit/91f9806208834de3fb5f62712356b0d84ec388fd"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "938f036da0e4afb57e3fc416b641fe7b97a66ec0", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f28793dd13e8a8132d559629728e6ca9514dbe36/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28793dd13e8a8132d559629728e6ca9514dbe36/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=f28793dd13e8a8132d559629728e6ca9514dbe36", "patch": "@@ -314,6 +314,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {}\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n+                InlineAsmArch::s390 => {}\n                 InlineAsmArch::SpirV => {}\n                 InlineAsmArch::Wasm32 => {}\n                 InlineAsmArch::Bpf => {}\n@@ -633,6 +634,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n+            InlineAsmRegClass::s390x(s390xInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::s390x(s390xInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n             }\n@@ -711,6 +714,7 @@ fn modifier_to_llvm(\n         }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n         InlineAsmRegClass::Bpf(_) => None,\n+        InlineAsmRegClass::s390x(_) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n@@ -769,6 +773,8 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => cx.type_i64(),\n         InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => cx.type_i32(),\n+        InlineAsmRegClass::s390x(s390xInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::s390x(s390xInlineAsmRegClass::freg) => cx.type_f64(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }"}, {"sha": "3ce5a8195d601b0c5179c448d859285b4514c9e5", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f28793dd13e8a8132d559629728e6ca9514dbe36/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28793dd13e8a8132d559629728e6ca9514dbe36/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=f28793dd13e8a8132d559629728e6ca9514dbe36", "patch": "@@ -154,6 +154,7 @@ mod mips;\n mod nvptx;\n mod powerpc;\n mod riscv;\n+mod s390x;\n mod spirv;\n mod wasm;\n mod x86;\n@@ -166,6 +167,7 @@ pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use powerpc::{PowerPCInlineAsmReg, PowerPCInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n+pub use s390x::{s390xInlineAsmReg, s390xInlineAsmRegClass};\n pub use spirv::{SpirVInlineAsmReg, SpirVInlineAsmRegClass};\n pub use wasm::{WasmInlineAsmReg, WasmInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n@@ -184,6 +186,7 @@ pub enum InlineAsmArch {\n     Mips64,\n     PowerPC,\n     PowerPC64,\n+    s390x,\n     SpirV,\n     Wasm32,\n     Bpf,\n@@ -206,6 +209,7 @@ impl FromStr for InlineAsmArch {\n             \"hexagon\" => Ok(Self::Hexagon),\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n+            \"s390x\" => Ok(Self::s390x),\n             \"spirv\" => Ok(Self::SpirV),\n             \"wasm32\" => Ok(Self::Wasm32),\n             \"bpf\" => Ok(Self::Bpf),\n@@ -235,6 +239,7 @@ pub enum InlineAsmReg {\n     PowerPC(PowerPCInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n     Mips(MipsInlineAsmReg),\n+    s390x(InlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n     Wasm(WasmInlineAsmReg),\n     Bpf(BpfInlineAsmReg),\n@@ -252,6 +257,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n+\t        Self::s390x(r) => r.name(),\n             Self::Bpf(r) => r.name(),\n             Self::Err => \"<reg>\",\n         }\n@@ -266,6 +272,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => InlineAsmRegClass::PowerPC(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n             Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n+            Self::s390x(r) => InlineAsmRegClass::s390x(r.reg_class()),\n             Self::Bpf(r) => InlineAsmRegClass::Bpf(r.reg_class()),\n             Self::Err => InlineAsmRegClass::Err,\n         }\n@@ -305,6 +312,9 @@ impl InlineAsmReg {\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+    \t    InlineAsmArch::s390x => {\n+                Self::s390x(s390xInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n             InlineAsmArch::SpirV => {\n                 Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n@@ -333,6 +343,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n+            Self::s390x(r) => r.emit(out, arch, modifier),\n             Self::Bpf(r) => r.emit(out, arch, modifier),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n@@ -347,6 +358,7 @@ impl InlineAsmReg {\n             Self::PowerPC(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n+            Self::s390x(_) => cb(self),\n             Self::Bpf(r) => r.overlapping_regs(|r| cb(Self::Bpf(r))),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n@@ -374,6 +386,7 @@ pub enum InlineAsmRegClass {\n     PowerPC(PowerPCInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n     Mips(MipsInlineAsmRegClass),\n+    s390x(s390xInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n     Wasm(WasmInlineAsmRegClass),\n     Bpf(BpfInlineAsmRegClass),\n@@ -392,6 +405,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n+            Self::s390x(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n             Self::Wasm(r) => r.name(),\n             Self::Bpf(r) => r.name(),\n@@ -412,6 +426,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::PowerPC),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n+            Self::s390x(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::s390x),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n             Self::Wasm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Wasm),\n             Self::Bpf(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Bpf),\n@@ -439,6 +454,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n+            Self::s390x(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n             Self::Wasm(r) => r.suggest_modifier(arch, ty),\n             Self::Bpf(r) => r.suggest_modifier(arch, ty),\n@@ -462,6 +478,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n             Self::Mips(r) => r.default_modifier(arch),\n+            Self::s390x(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n             Self::Wasm(r) => r.default_modifier(arch),\n             Self::Bpf(r) => r.default_modifier(arch),\n@@ -484,6 +501,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n             Self::Mips(r) => r.supported_types(arch),\n+            Self::s390x(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n             Self::Wasm(r) => r.supported_types(arch),\n             Self::Bpf(r) => r.supported_types(arch),\n@@ -509,6 +527,7 @@ impl InlineAsmRegClass {\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n             }\n+            InlineAsmArch::s390x => Self::s390x(s390xInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Bpf => Self::Bpf(BpfInlineAsmRegClass::parse(arch, name)?),\n@@ -527,6 +546,7 @@ impl InlineAsmRegClass {\n             Self::PowerPC(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n             Self::Mips(r) => r.valid_modifiers(arch),\n+            Self::s390x(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n             Self::Wasm(r) => r.valid_modifiers(arch),\n             Self::Bpf(r) => r.valid_modifiers(arch),\n@@ -695,6 +715,11 @@ pub fn allocatable_registers(\n             mips::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+\tInlineAsmArch::s390x => {\n+\t    let mut map = s390x::regclass_map();\n+            s390x::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+\t}\n         InlineAsmArch::SpirV => {\n             let mut map = spirv::regclass_map();\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);"}, {"sha": "ad07e20de8a02abb2d9c6c22d8b1e6db10b39843", "filename": "compiler/rustc_target/src/asm/s390x.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/f28793dd13e8a8132d559629728e6ca9514dbe36/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28793dd13e8a8132d559629728e6ca9514dbe36/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs?ref=f28793dd13e8a8132d559629728e6ca9514dbe36", "patch": "@@ -0,0 +1,156 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    s390x s390xInlineAsmRegClass {\n+        reg,\n+        freg,\n+    }\n+}\n+\n+impl s390xInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match (self, arch) {\n+            (Self::reg, _) => types! { _: I8, I16, I32; },\n+            (Self::freg, _) => types! { _: F32, F64; },\n+        }\n+    }\n+}\n+\n+def_regs! {\n+    s390x s390xInlineAsmReg s390xInlineAsmRegClass {\n+        r0: req = [\"r0\"],\n+        r1: reg = [\"r1\"],\n+        r2: reg = [\"r2\"],\n+        r3: reg = [\"r3\"],\n+        r4: reg = [\"r4\"],\n+        r5: reg = [\"r5\"],\n+        r6: reg = [\"r6\"],\n+        r7: reg = [\"r7\"],\n+        r8: reg = [\"r8\"],\n+        r9: reg = [\"r9\"],\n+        r10: reg = [\"r10\"],\n+        r11: reg = [\"r11\"],\n+        r12: reg = [\"r12\"],\n+        r14: reg = [\"r14\"],\n+        f0: freg = [\"f0\"],\n+        f1: freg = [\"f1\"],\n+        f2: freg = [\"f2\"],\n+        f3: freg = [\"f3\"],\n+        f4: freg = [\"f4\"],\n+        f5: freg = [\"f5\"],\n+        f6: freg = [\"f6\"],\n+        f7: freg = [\"f7\"],\n+        f8: freg = [\"f8\"],\n+        f9: freg = [\"f9\"],\n+        f10: freg = [\"f10\"],\n+        f11: freg = [\"f11\"],\n+        f12: freg = [\"f12\"],\n+        f13: freg = [\"f13\"],\n+        f14: freg = [\"f14\"],\n+        f15: freg = [\"f15\"],\n+        #error = [\"r13\"] =>\n+            \"The base pointer cannot be used as an operand for inline asm\",\n+        #error = [\"r15\"] =>\n+            \"The stack pointer cannot be used as an operand for inline asm\",\n+        #error = [\"a0\"] =>\n+            \"This pointer is reserved on s390x and cannot be used as an operand for inline asm\",\n+        #error = [\"a1\"] =>\n+            \"This pointer is reserved on z/Arch and cannot be used as an operand for inline asm\",\n+        #error = [\"c0\"] =>\n+            \"c0 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c1\"] =>\n+            \"c1 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c2\"] =>\n+            \"c2 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c3\"] =>\n+            \"c3 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c4\"] =>\n+            \"c4 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c5\"] =>\n+            \"c5 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c6\"] =>\n+            \"c6 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c7\"] =>\n+            \"c7 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c8\"] =>\n+            \"c8 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c9\"] =>\n+            \"c9 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c10\"] =>\n+            \"c10 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c11\"] =>\n+            \"c11 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c12\"] =>\n+            \"c12 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c13\"] =>\n+            \"c13 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c14\"] =>\n+            \"c14 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+        #error = [\"c15\"] =>\n+            \"c15 is reserved by the kernel and cannot be used as an operand for inline asm\",\n+\t    #error = [\"a2\"] =>\n+            \"a2 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a3\"] =>\n+            \"a3 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a4\"] =>\n+            \"a4 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a5\"] =>\n+            \"a5 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a6\"] =>\n+            \"a6 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a7\"] =>\n+            \"a7 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a8\"] =>\n+            \"a8 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a9\"] =>\n+            \"a9 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a10\"] =>\n+            \"a10 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a11\"] =>\n+            \"a11 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a12\"] =>\n+            \"a12 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a13\"] =>\n+            \"a13 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a14\"] =>\n+            \"a14 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"a15\"] =>\n+            \"a15 is not supported by LLVM and cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl s390xInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+}"}]}