{"sha": "889a4ebfa98977583e4f319154080c4594e6e16e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OWE0ZWJmYTk4OTc3NTgzZTRmMzE5MTU0MDgwYzQ1OTRlNmUxNmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-22T08:37:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:18Z"}, "message": "Deduplicate some code", "tree": {"sha": "229a6f6a036bf4966bb437b35ce129d5f7816a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/229a6f6a036bf4966bb437b35ce129d5f7816a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889a4ebfa98977583e4f319154080c4594e6e16e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53oACgkQpp+NIls6\n19nYVA/6A0Q85FAYloiMsE6I/4BEqqSMVjTaHWxWmZQpj4nbQiAff4OZbt0CfUiG\nczefpZ8zyhbPyIOQKRPxdb0sjMVCsB13ZaDtAtqYCOuQldbzoelivvwZxck9+hao\npVQ+pQEoIEq0Tuy2reQvB0F8IaeFmj0WrJaZMkAFihY2vPYMNfwCyEW03tvHk/x0\nxeIJ46FwnAa0Ou1w6SV+ua/qbE6j1Gk8slmjCj/K3pERYKbC6hsKKyh+BWNdXRHV\nu7+DcM0hS/OvvnEStdUVsNxTz15lo9FqTkKBZghqc2MrjG2UB8UAcsS76n+/p9yS\n1mS9aypb4Cw9dPOEhLLTkfPpUUoLxHeVDu+MhM88Emwweq6QBvSVWpwobOJwpgkK\nsiNOGejii/+wYw5OnofHCxP/4dnhE+3X8IL0iw/Kaiw9fpBKDY47ch6gERvk4KDh\nZuOqxWbIOK17/39L+WANMDwYJU9H3pHwq5DEz6t7C/rOasO2wRP2Z6ehNnQDou27\n2Ln/8zHfUvHQWLU/A93L7wHZ2hgPu4pDy2rx0TO83F5+t71tZCNXi72ZoAtSOcm8\nfbrVBDsqc/gMDzQx/xXfXQuOALHyQiILobhQUaAf5k96FVqjLk5vlYT/HBT5n/Ta\nHCr1VLUN5/UKpIJOlyKseWB3Agwy6KUZ8iQkAGSwrdD+dZJwmFs=\n=jP1t\n-----END PGP SIGNATURE-----", "payload": "tree 229a6f6a036bf4966bb437b35ce129d5f7816a5f\nparent df283df887431eec0f6da0f4aa85db9c88c9449b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1519288640 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494458 +0100\n\nDeduplicate some code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889a4ebfa98977583e4f319154080c4594e6e16e", "html_url": "https://github.com/rust-lang/rust/commit/889a4ebfa98977583e4f319154080c4594e6e16e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889a4ebfa98977583e4f319154080c4594e6e16e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df283df887431eec0f6da0f4aa85db9c88c9449b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df283df887431eec0f6da0f4aa85db9c88c9449b", "html_url": "https://github.com/rust-lang/rust/commit/df283df887431eec0f6da0f4aa85db9c88c9449b"}], "stats": {"total": 140, "additions": 67, "deletions": 73}, "files": [{"sha": "4e3a0bcb0d22cbd29ccf48ec7b57195cd0da2669", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 67, "deletions": 73, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/889a4ebfa98977583e4f319154080c4594e6e16e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889a4ebfa98977583e4f319154080c4594e6e16e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=889a4ebfa98977583e4f319154080c4594e6e16e", "patch": "@@ -1823,64 +1823,77 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         }\n     }\n \n+    #[inline]\n+    fn eval_explicit_discr(\n+        &self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        expr_did: DefId,\n+    ) -> Option<Discr<'tcx>> {\n+        let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n+        let repr_type = self.repr.discr_type();\n+        let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n+        let instance = ty::Instance::new(expr_did, substs);\n+        let cid = GlobalId {\n+            instance,\n+            promoted: None\n+        };\n+        match tcx.const_eval(param_env.and(cid)) {\n+            Ok(&ty::Const {\n+                val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n+                ..\n+            }) => {\n+                trace!(\"discriminants: {} ({:?})\", b, repr_type);\n+                let ty = repr_type.to_ty(tcx);\n+                if ty.is_signed() {\n+                    let (ty, param_env) = tcx\n+                        .lift_to_global(&(ty, param_env))\n+                        .unwrap_or_else(|| {\n+                        bug!(\"MIR: discriminants({:?}, {:?}) got \\\n+                            type with inference types/regions\",\n+                            ty, param_env);\n+                    });\n+                    let size = tcx.global_tcx()\n+                        .layout_of(param_env.and(ty))\n+                        .expect(\"int layout\")\n+                        .size\n+                        .bits();\n+                    let val = b as i128;\n+                    // sign extend to i128\n+                    let amt = 128 - size;\n+                    let val = (val << amt) >> amt;\n+                    Some(Discr {\n+                        val: val as u128,\n+                        ty,\n+                    })\n+                } else {\n+                    Some(Discr {\n+                        val: b,\n+                        ty,\n+                    })\n+                }\n+            }\n+            _ => {\n+                if !expr_did.is_local() {\n+                    span_bug!(tcx.def_span(expr_did),\n+                        \"variant discriminant evaluation succeeded \\\n+                            in its crate but failed locally\");\n+                }\n+                None\n+            }\n+        }\n+    }\n+\n     #[inline]\n     pub fn discriminants(&'a self, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                          -> impl Iterator<Item=Discr<'tcx>> + 'a {\n-        let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx.global_tcx());\n         let mut prev_discr = None::<Discr<'tcx>>;\n         self.variants.iter().map(move |v| {\n             let mut discr = prev_discr.map_or(initial, |d| d.wrap_incr(tcx));\n             if let VariantDiscr::Explicit(expr_did) = v.discr {\n-                let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n-                let instance = ty::Instance::new(expr_did, substs);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: None\n-                };\n-                match tcx.const_eval(param_env.and(cid)) {\n-                    Ok(&ty::Const {\n-                        val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n-                        ..\n-                    }) => {\n-                        trace!(\"discriminants: {} ({:?})\", b, repr_type);\n-                        let ty = repr_type.to_ty(tcx);\n-                        if ty.is_signed() {\n-                            let (ty, param_env) = tcx\n-                                .lift_to_global(&(ty, param_env))\n-                                .unwrap_or_else(|| {\n-                                bug!(\"MIR: discriminants({:?}, {:?}) got \\\n-                                    type with inference types/regions\",\n-                                    ty, param_env);\n-                            });\n-                            let size = tcx.global_tcx()\n-                                .layout_of(param_env.and(ty))\n-                                .expect(\"int layout\")\n-                                .size\n-                                .bits();\n-                            let val = b as i128;\n-                            // sign extend to i128\n-                            let amt = 128 - size;\n-                            let val = (val << amt) >> amt;\n-                            discr = Discr {\n-                                val: val as u128,\n-                                ty,\n-                            };\n-                        } else {\n-                            discr = Discr {\n-                                val: b,\n-                                ty,\n-                            };\n-                        }\n-                    }\n-                    _ => {\n-                        if !expr_did.is_local() {\n-                            span_bug!(tcx.def_span(expr_did),\n-                                \"variant discriminant evaluation succeeded \\\n-                                 in its crate but failed locally\");\n-                        }\n-                    }\n+                if let Some(new_discr) = self.eval_explicit_discr(tcx, expr_did) {\n+                    discr = new_discr;\n                 }\n             }\n             prev_discr = Some(discr);\n@@ -1898,7 +1911,6 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                     variant_index: usize)\n                                     -> Discr<'tcx> {\n-        let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n         let repr_type = self.repr.discr_type();\n         let mut explicit_value = repr_type.initial_discriminant(tcx.global_tcx());\n         let mut explicit_index = variant_index;\n@@ -1909,30 +1921,12 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     explicit_index -= distance;\n                 }\n                 ty::VariantDiscr::Explicit(expr_did) => {\n-                    let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n-                    let instance = ty::Instance::new(expr_did, substs);\n-                    let cid = GlobalId {\n-                        instance,\n-                        promoted: None\n-                    };\n-                    match tcx.const_eval(param_env.and(cid)) {\n-                        Ok(&ty::Const {\n-                            val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n-                            ..\n-                        }) => {\n-                            trace!(\"discriminants: {} ({:?})\", b, repr_type);\n-                            explicit_value = Discr {\n-                                val: b,\n-                                ty: repr_type.to_ty(tcx),\n-                            };\n+                    match self.eval_explicit_discr(tcx, expr_did) {\n+                        Some(discr) => {\n+                            explicit_value = discr;\n                             break;\n-                        }\n-                        _ => {\n-                            if !expr_did.is_local() {\n-                                span_bug!(tcx.def_span(expr_did),\n-                                    \"variant discriminant evaluation succeeded \\\n-                                     in its crate but failed locally\");\n-                            }\n+                        },\n+                        None => {\n                             if explicit_index == 0 {\n                                 break;\n                             }"}]}