{"sha": "d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGQ0YzY4ZjgyYmFmNGQzMDcwMTJkYTFiNGQ2YjkxZDI2ZmIxMmY=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-02-14T04:27:53Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-02-15T05:58:43Z"}, "message": "Create RefReader and RefWriter adaptor structs\n\nRefReader and RefWriter allow a caller to pass a Reader or Writer\ninstance by reference to generic functions that are expecting arguments\nby value.", "tree": {"sha": "99cad3a375970f2cb1fc2bcf3833d52cb80ed97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99cad3a375970f2cb1fc2bcf3833d52cb80ed97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "html_url": "https://github.com/rust-lang/rust/commit/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f/comments", "author": null, "committer": null, "parents": [{"sha": "f0bad904a1b53c5c5972e24edd79a96a1d442576", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bad904a1b53c5c5972e24edd79a96a1d442576", "html_url": "https://github.com/rust-lang/rust/commit/f0bad904a1b53c5c5972e24edd79a96a1d442576"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "c99fe587fc0d0b5b9e7e43fa8cdc40727023bc06", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "patch": "@@ -779,6 +779,13 @@ pub trait Reader {\n         self.read_byte().map(|i| i as i8)\n     }\n \n+    /// Creates a wrapper around a mutable reference to the reader.\n+    ///\n+    /// This is useful to allow applying adaptors while still\n+    /// retaining ownership of the original value.\n+    fn by_ref<'a>(&'a mut self) -> RefReader<'a, Self> {\n+        RefReader { inner: self }\n+    }\n }\n \n impl Reader for ~Reader {\n@@ -789,6 +796,14 @@ impl<'a> Reader for &'a mut Reader {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.read(buf) }\n }\n \n+pub struct RefReader<'a, R> {\n+    priv inner: &'a mut R\n+}\n+\n+impl<'a, R: Reader> Reader for RefReader<'a, R> {\n+    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.inner.read(buf) }\n+}\n+\n fn extend_sign(val: u64, nbytes: uint) -> i64 {\n     let shift = (8 - nbytes) * 8;\n     (val << shift) as i64 >> shift\n@@ -969,6 +984,14 @@ pub trait Writer {\n     fn write_i8(&mut self, n: i8) -> IoResult<()> {\n         self.write([n as u8])\n     }\n+\n+    /// Creates a wrapper around a mutable reference to the writer.\n+    ///\n+    /// This is useful to allow applying wrappers while still\n+    /// retaining ownership of the original value.\n+    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, Self> {\n+        RefWriter { inner: self }\n+    }\n }\n \n impl Writer for ~Writer {\n@@ -981,6 +1004,16 @@ impl<'a> Writer for &'a mut Writer {\n     fn flush(&mut self) -> IoResult<()> { self.flush() }\n }\n \n+pub struct RefWriter<'a, W> {\n+    inner: &'a mut W\n+}\n+\n+impl<'a, W: Writer> Writer for RefWriter<'a, W> {\n+    fn write(&mut self, buf: &[u8]) -> IoResult<()> { self.inner.write(buf) }\n+    fn flush(&mut self) -> IoResult<()> { self.inner.flush() }\n+}\n+\n+\n pub trait Stream: Reader + Writer { }\n \n impl<T: Reader + Writer> Stream for T {}"}]}