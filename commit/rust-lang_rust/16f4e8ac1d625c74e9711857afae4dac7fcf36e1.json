{"sha": "16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjRlOGFjMWQ2MjVjNzRlOTcxMTg1N2FmYWU0ZGFjN2ZjZjM2ZTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-05T19:52:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:28:31Z"}, "message": "generalize `AscribeUserType` to handle sub or super type", "tree": {"sha": "fc43641feb42182f8da3c9136f751ad326ef8f98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc43641feb42182f8da3c9136f751ad326ef8f98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "html_url": "https://github.com/rust-lang/rust/commit/16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5e7941efcf78708f49eee10e954d62b436ea25", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5e7941efcf78708f49eee10e954d62b436ea25", "html_url": "https://github.com/rust-lang/rust/commit/9c5e7941efcf78708f49eee10e954d62b436ea25"}], "stats": {"total": 154, "additions": 62, "deletions": 92}, "files": [{"sha": "120006b32016c1f1f347d3c9545b8e3a9ca2e255", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -255,8 +255,9 @@ for mir::StatementKind<'gcx> {\n                 op.hash_stable(hcx, hasher);\n                 places.hash_stable(hcx, hasher);\n             }\n-            mir::StatementKind::AscribeUserType(ref place, ref c_ty) => {\n+            mir::StatementKind::AscribeUserType(ref place, ref variance, ref c_ty) => {\n                 place.hash_stable(hcx, hasher);\n+                variance.hash_stable(hcx, hasher);\n                 c_ty.hash_stable(hcx, hasher);\n             }\n             mir::StatementKind::Nop => {}"}, {"sha": "3227888ec6abaa04b4c35b838f35cd18eb388919", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -1641,9 +1641,14 @@ pub enum StatementKind<'tcx> {\n     ///\n     ///     let a: T = y;\n     ///\n-    /// Here we would insert a `AscribeUserType` that ensures that the\n-    /// type `Y` of `y` is a subtype of `T` (`Y <: T`).\n-    AscribeUserType(Place<'tcx>, CanonicalTy<'tcx>),\n+    /// The effect of this annotation is to relate the type `T_y` of the place `y`\n+    /// to the user-given type `T`. The effect depends on the specified variance:\n+    ///\n+    /// - `Covariant` -- requires that `T_y <: T`\n+    /// - `Contravariant` -- requires that `T_y :> T`\n+    /// - `Invariant` -- requires that `T_y == T`\n+    /// - `Bivariant` -- no effect\n+    AscribeUserType(Place<'tcx>, ty::Variance, CanonicalTy<'tcx>),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n@@ -1720,8 +1725,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n                 ref outputs,\n                 ref inputs,\n             } => write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs),\n-            AscribeUserType(ref place, ref c_ty) => {\n-                write!(fmt, \"AscribeUserType({:?}, {:?})\", place, c_ty)\n+            AscribeUserType(ref place, ref variance, ref c_ty) => {\n+                write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }\n             Nop => write!(fmt, \"nop\"),\n         }\n@@ -2644,7 +2649,7 @@ EnumTypeFoldableImpl! {\n         (StatementKind::InlineAsm) { asm, outputs, inputs },\n         (StatementKind::Validate)(a, b),\n         (StatementKind::EndRegion)(a),\n-        (StatementKind::AscribeUserType)(a, b),\n+        (StatementKind::AscribeUserType)(a, v, b),\n         (StatementKind::Nop),\n     }\n }"}, {"sha": "723ba6332cce16f74a1e2b0b482b921dc2a187db", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -146,9 +146,10 @@ macro_rules! make_mir_visitor {\n \n             fn visit_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)* Place<'tcx>,\n+                                     variance: & $($mutability)* ty::Variance,\n                                      c_ty: & $($mutability)* CanonicalTy<'tcx>,\n                                      location: Location) {\n-                self.super_ascribe_user_ty(place, c_ty, location);\n+                self.super_ascribe_user_ty(place, variance, c_ty, location);\n             }\n \n             fn visit_place(&mut self,\n@@ -388,9 +389,10 @@ macro_rules! make_mir_visitor {\n                     }\n                     StatementKind::AscribeUserType(\n                         ref $($mutability)* place,\n+                        ref $($mutability)* variance,\n                         ref $($mutability)* c_ty,\n                     ) => {\n-                        self.visit_ascribe_user_ty(place, c_ty, location);\n+                        self.visit_ascribe_user_ty(place, variance, c_ty, location);\n                     }\n                     StatementKind::Nop => {}\n                 }\n@@ -633,6 +635,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)* Place<'tcx>,\n+                                     _variance: & $($mutability)* ty::Variance,\n                                      c_ty: & $($mutability)* CanonicalTy<'tcx>,\n                                      location: Location) {\n                 self.visit_place(place, PlaceContext::Validate, location);"}, {"sha": "bd9dfc6b855144c0c7ea794eaa5aa1945f706f05", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -57,6 +57,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::ty::ClosureKind,\n     ::ty::IntVarValue,\n     ::ty::ParamTy,\n+    ::ty::Variance,\n     ::syntax_pos::Span,\n }\n "}, {"sha": "7e8e1b32d4d98450dfb7b121926effbfa1d4ca0e", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -178,6 +178,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n     fn visit_ascribe_user_ty(\n         &mut self,\n         _place: &Place<'tcx>,\n+        _variance: &ty::Variance,\n         _c_ty: &CanonicalTy<'tcx>,\n         _location: Location,\n     ) {"}, {"sha": "d77863d598f663792fd9a7f0edd0b6779c5bb7f6", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -115,6 +115,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_ascribe_user_ty(\n         &mut self,\n         _place: &mut Place<'tcx>,\n+        _variance: &mut ty::Variance,\n         _c_ty: &mut CanonicalTy<'tcx>,\n         _location: Location,\n     ) {"}, {"sha": "1d06a1335ceca4099ad2018bad8a3a9deedc5dc0", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -17,7 +17,9 @@ use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::values::{LivenessValues, RegionValueElements};\n use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n-use borrow_check::nll::type_check::free_region_relations::{CreateResult, UniversalRegionRelations};\n+use borrow_check::nll::type_check::free_region_relations::{\n+    CreateResult, UniversalRegionRelations,\n+};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::ToRegionVid;\n use dataflow::move_paths::MoveData;\n@@ -246,10 +248,12 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.sanitize_type(constant, constant.ty);\n \n         if let Some(user_ty) = constant.user_ty {\n-            if let Err(terr) =\n-                self.cx\n-                    .eq_user_type_and_type(user_ty, constant.ty, location.boring())\n-            {\n+            if let Err(terr) = self.cx.relate_type_and_user_type(\n+                constant.ty,\n+                ty::Variance::Invariant,\n+                user_ty,\n+                location.boring(),\n+            ) {\n                 span_mirbug!(\n                     self,\n                     constant,\n@@ -850,30 +854,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         )\n     }\n \n-    fn sub_type_and_user_type(\n+    fn relate_type_and_user_type(\n         &mut self,\n         a: Ty<'tcx>,\n+        v: ty::Variance,\n         b: CanonicalTy<'tcx>,\n         locations: Locations,\n     ) -> Fallible<()> {\n-        relate_tys::sub_type_and_user_type(\n-            self.infcx,\n-            a,\n-            b,\n-            locations,\n-            self.borrowck_context.as_mut().map(|x| &mut **x),\n-        )\n-    }\n-\n-    fn eq_user_type_and_type(\n-        &mut self,\n-        a: CanonicalTy<'tcx>,\n-        b: Ty<'tcx>,\n-        locations: Locations,\n-    ) -> Fallible<()> {\n-        relate_tys::eq_user_type_and_type(\n+        relate_tys::relate_type_and_user_type(\n             self.infcx,\n             a,\n+            v,\n             b,\n             locations,\n             self.borrowck_context.as_mut().map(|x| &mut **x),\n@@ -894,8 +885,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // of lowering. Assignments to other sorts of places *are* interesting\n                 // though.\n                 let is_temp = if let Place::Local(l) = *place {\n-                    l != RETURN_PLACE &&\n-                    !mir.local_decls[l].is_user_variable.is_some()\n+                    l != RETURN_PLACE && !mir.local_decls[l].is_user_variable.is_some()\n                 } else {\n                     false\n                 };\n@@ -920,9 +910,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n \n                 if let Some(user_ty) = self.rvalue_user_ty(rv) {\n-                    if let Err(terr) = self.eq_user_type_and_type(\n-                        user_ty,\n+                    if let Err(terr) = self.relate_type_and_user_type(\n                         rv_ty,\n+                        ty::Variance::Invariant,\n+                        user_ty,\n                         location.boring(),\n                     ) {\n                         span_mirbug!(\n@@ -970,9 +961,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::AscribeUserType(ref place, c_ty) => {\n+            StatementKind::AscribeUserType(ref place, variance, c_ty) => {\n                 let place_ty = place.ty(mir, tcx).to_ty(tcx);\n-                if let Err(terr) = self.sub_type_and_user_type(place_ty, c_ty, Locations::All) {\n+                if let Err(terr) =\n+                    self.relate_type_and_user_type(place_ty, variance, c_ty, Locations::All)\n+                {\n                     span_mirbug!(\n                         self,\n                         stmt,\n@@ -1157,8 +1150,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             Some((ref dest, _target_block)) => {\n                 let dest_ty = dest.ty(mir, tcx).to_ty(tcx);\n                 let is_temp = if let Place::Local(l) = *dest {\n-                    l != RETURN_PLACE &&\n-                    !mir.local_decls[l].is_user_variable.is_some()\n+                    l != RETURN_PLACE && !mir.local_decls[l].is_user_variable.is_some()\n                 } else {\n                     false\n                 };\n@@ -1577,30 +1569,26 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// If this rvalue supports a user-given type annotation, then\n     /// extract and return it. This represents the final type of the\n     /// rvalue and will be unified with the inferred type.\n-    fn rvalue_user_ty(\n-        &self,\n-        rvalue: &Rvalue<'tcx>,\n-    ) -> Option<CanonicalTy<'tcx>> {\n+    fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<CanonicalTy<'tcx>> {\n         match rvalue {\n-            Rvalue::Use(_) |\n-            Rvalue::Repeat(..) |\n-            Rvalue::Ref(..) |\n-            Rvalue::Len(..) |\n-            Rvalue::Cast(..) |\n-            Rvalue::BinaryOp(..) |\n-            Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::NullaryOp(..) |\n-            Rvalue::UnaryOp(..) |\n-            Rvalue::Discriminant(..) =>\n-                None,\n+            Rvalue::Use(_)\n+            | Rvalue::Repeat(..)\n+            | Rvalue::Ref(..)\n+            | Rvalue::Len(..)\n+            | Rvalue::Cast(..)\n+            | Rvalue::BinaryOp(..)\n+            | Rvalue::CheckedBinaryOp(..)\n+            | Rvalue::NullaryOp(..)\n+            | Rvalue::UnaryOp(..)\n+            | Rvalue::Discriminant(..) => None,\n \n             Rvalue::Aggregate(aggregate, _) => match **aggregate {\n                 AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,\n                 AggregateKind::Array(_) => None,\n                 AggregateKind::Tuple => None,\n                 AggregateKind::Closure(_, _) => None,\n                 AggregateKind::Generator(_, _, _) => None,\n-            }\n+            },\n         }\n     }\n "}, {"sha": "ab0c91aafd167a1139b24deaff107af51cf2e82a", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -63,9 +63,10 @@ pub(super) fn eq_types<'tcx>(\n /// Adds sufficient constraints to ensure that `a <: b`, where `b` is\n /// a user-given type (which means it may have canonical variables\n /// encoding things like `_`).\n-pub(super) fn sub_type_and_user_type<'tcx>(\n+pub(super) fn relate_type_and_user_type<'tcx>(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     a: Ty<'tcx>,\n+    v: ty::Variance,\n     b: CanonicalTy<'tcx>,\n     locations: Locations,\n     borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n@@ -79,53 +80,21 @@ pub(super) fn sub_type_and_user_type<'tcx>(\n         value: b_value,\n     } = b;\n \n-    // (*) The `TypeRelating` code assumes that the \"canonical variables\"\n-    // appear in the \"a\" side, so start with `Contravariant` ambient\n+    // The `TypeRelating` code assumes that the \"canonical variables\"\n+    // appear in the \"a\" side, so flip `Contravariant` ambient\n     // variance to get the right relationship.\n+    let v1 = ty::Contravariant.xform(v);\n \n     TypeRelating::new(\n         infcx,\n-        ty::Variance::Contravariant, // (*)\n+        v1,\n         locations,\n         borrowck_context,\n         b_variables,\n     ).relate(&b_value, &a)?;\n     Ok(())\n }\n \n-/// Adds sufficient constraints to ensure that `a <: b`, where `b` is\n-/// a user-given type (which means it may have canonical variables\n-/// encoding things like `_`).\n-pub(super) fn eq_user_type_and_type<'tcx>(\n-    infcx: &InferCtxt<'_, '_, 'tcx>,\n-    a: CanonicalTy<'tcx>,\n-    b: Ty<'tcx>,\n-    locations: Locations,\n-    borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n-) -> Fallible<()> {\n-    debug!(\n-        \"eq_user_type_and_type(a={:?}, b={:?}, locations={:?})\",\n-        a, b, locations\n-    );\n-    let Canonical {\n-        variables: a_variables,\n-        value: a_value,\n-    } = a;\n-\n-    // (*) The `TypeRelating` code assumes that the \"canonical variables\"\n-    // appear in the \"a\" side, so start with `Contravariant` ambient\n-    // variance to get the right relationship.\n-\n-    TypeRelating::new(\n-        infcx,\n-        ty::Variance::Invariant, // (*)\n-        locations,\n-        borrowck_context,\n-        a_variables,\n-    ).relate(&a_value, &b)?;\n-    Ok(())\n-}\n-\n struct TypeRelating<'cx, 'bccx: 'cx, 'gcx: 'tcx, 'tcx: 'bccx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n "}, {"sha": "b5ed68009b5fd892289685be60e2a97c84289d66", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f4e8ac1d625c74e9711857afae4dac7fcf36e1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=16f4e8ac1d625c74e9711857afae4dac7fcf36e1", "patch": "@@ -1188,6 +1188,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n                         ascription.source.clone(),\n+                        ty::Variance::Covariant,\n                         ascription.user_ty,\n                     ),\n                 },"}]}