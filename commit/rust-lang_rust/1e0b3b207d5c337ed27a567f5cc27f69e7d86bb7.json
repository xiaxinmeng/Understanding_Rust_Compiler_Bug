{"sha": "1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMGIzYjIwN2Q1YzMzN2VkMjdhNTY3ZjVjYzI3ZjY5ZTdkODZiYjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-20T10:52:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-20T10:52:01Z"}, "message": "prep for eddyb's find_method", "tree": {"sha": "cda4f01bc7b5d33cd66593cf8f032c7ec0456c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda4f01bc7b5d33cd66593cf8f032c7ec0456c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4RTRAAoJEFbW7qD8Z6xGVTcQAII+dolD52jODB7iBy/ZdceQ\n71VCZjXWs0ReGmuh8RpMiIwV40yD1jUdT1OzHb5Alfp2PafWLNl4vg6i9vJpNqVJ\npiATbRmpLVrziWAiNU9rc4wO4z08sIVyxr/Dn4rDKFn2pWtf237/gazjv/F7DNrw\nGU6z+geYhc4ka6s5bbXPsjI6GZhJodq368nV66ctk0a6f8Le1sCU/QBqDx1TK06e\nwxkrlkAM9vol7M8iFyXMwqrSyOPa6XAfUAk+t2W92732sFWrarjwWI8t4gFEKWKY\nXTJw09IjxDyn1o6mcm41QXeFxYLqoqofre97U0gxiaNzmEi7EGbtk5PivK0eLeyW\nI7fNMG2fF9jjqY85qU1pVCXCGtEl18+Ne1Mov0OtZniPbOwqA9SYYV8fwi6Qkazc\nQQT6I5rYZlHc7/uKfpdOZpZNNRugPui+FRluKnMbsl/83+ZDbw6P3BSS6dSRE3sA\nDXGP63JJhPJfnE689f/iZs0i0TFovYsU77dPaTMACIP0GzzSfzFMORs8Bdqt2n6w\nqrherlIFn1e5d1wkGdEZmQj0ljWO/TUUFBsbQQyHKJ8Q2OP3+h+/kv3C+QZCoh4R\ne60kAo1RiNGRciY098Hhp7J1oldEzDU3KANbz++e8lMxy8+EOaX7b/VBCj+UKm4B\nL3JslOLEE8uABeuVNyF9\n=eUYg\n-----END PGP SIGNATURE-----", "payload": "tree cda4f01bc7b5d33cd66593cf8f032c7ec0456c37\nparent 63cc7fc9e84c2332f2712c041e21bb748dfe9575\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474368721 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474368721 +0200\n\nprep for eddyb's find_method"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7", "html_url": "https://github.com/rust-lang/rust/commit/1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cc7fc9e84c2332f2712c041e21bb748dfe9575", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cc7fc9e84c2332f2712c041e21bb748dfe9575", "html_url": "https://github.com/rust-lang/rust/commit/63cc7fc9e84c2332f2712c041e21bb748dfe9575"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "478c0232c22ac7c457a83eeb466dfef08d6c7c54", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=1e0b3b207d5c337ed27a567f5cc27f69e7d86bb7", "patch": "@@ -527,9 +527,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let mname = self.tcx.item_name(def_id);\n                 // Create a concatenated set of substitutions which includes those from the impl\n                 // and those from the method:\n-                let mth = get_impl_method(self.tcx, substs, impl_did, vtable_impl.substs, mname);\n+                let (did, substs) = find_method(self.tcx, substs, impl_did, vtable_impl.substs, mname);\n \n-                Ok((mth.method.def_id, mth.substs))\n+                Ok((did, substs))\n             }\n \n             traits::VtableClosure(vtable_closure) =>\n@@ -636,3 +636,35 @@ pub(super) fn get_impl_method<'a, 'tcx>(\n         }\n     }\n }\n+\n+/// Locates the applicable definition of a method, given its name.\n+pub fn find_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             substs: &'tcx Substs<'tcx>,\n+                             impl_def_id: DefId,\n+                             impl_substs: &'tcx Substs<'tcx>,\n+                             name: ast::Name)\n+                             -> (DefId, &'tcx Substs<'tcx>)\n+{\n+    assert!(!substs.needs_infer());\n+\n+    let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n+    let trait_def = tcx.lookup_trait_def(trait_def_id);\n+\n+    match trait_def.ancestors(impl_def_id).fn_defs(tcx, name).next() {\n+        Some(node_item) => {\n+            let substs = tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n+                let substs = substs.rebase_onto(tcx, trait_def_id, impl_substs);\n+                let substs = traits::translate_substs(&infcx, impl_def_id, substs, node_item.node);\n+                tcx.lift(&substs).unwrap_or_else(|| {\n+                    bug!(\"find_method: translate_substs \\\n+                          returned {:?} which contains inference types/regions\",\n+                         substs);\n+                })\n+            });\n+            (node_item.item.def_id, substs)\n+        }\n+        None => {\n+            bug!(\"method {:?} not found in {:?}\", name, impl_def_id)\n+        }\n+    }\n+}"}]}