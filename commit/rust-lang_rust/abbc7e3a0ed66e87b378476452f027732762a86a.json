{"sha": "abbc7e3a0ed66e87b378476452f027732762a86a", "node_id": "C_kwDOAAsO6NoAKGFiYmM3ZTNhMGVkNjZlODdiMzc4NDc2NDUyZjAyNzczMjc2MmE4NmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-03T00:51:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-03T00:51:08Z"}, "message": "Merge #11088\n\n11088: closes #10446 hide type inlay hints r=Veykril a=Heinenen\n\nPasses tests as described in #10446\r\nWorks for all happy cases, there may be some cases that I forgot as I am not that familiar with Rust and r-a (yet).\n\nCo-authored-by: Heinenen <th.m.heinen@gmail.com>", "tree": {"sha": "c5adb33ab26c408708a94395373733817122ff99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5adb33ab26c408708a94395373733817122ff99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abbc7e3a0ed66e87b378476452f027732762a86a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0kh8CRBK7hj4Ov3rIwAA18IIAFjOeiknWBGRP0/su+ItTdSJ\nSQxEAVv8RPkXtGv4UaUOhZJjj90HLX2jqUQZjSvjXWHrownjRrIEkfsA0QCNvpeQ\nn/2s9OcE2wCOlh+JlSTwHMYyIlz3CWE7b5y7epRmJx/6iNm1n5I5gNEQcgtMaMDl\nKWDWQdBgvBeCheRBJdT2Ba3SQwa1MwPLKWoTK+tKNs2+BKkXVg/NVxMzmhfC+2kg\nM0Fx8f7pjDmTdhTwmdfMfKl+ugK7eRGzAz88CLKG/XLelrY66H5xmWtrdmXomJY5\ndJW3bU79xmAuBQcezb2bKNjERZ8xZaLKnUOSkP86blF0BUPtOdnBwLr84t3iAyY=\n=dhm6\n-----END PGP SIGNATURE-----\n", "payload": "tree c5adb33ab26c408708a94395373733817122ff99\nparent d89a4f0e93562a4bdf8d93abd87200731cbf731b\nparent 05abfc77f5551dbaf81f79abca3c3da5debc1331\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641171068 +0000\ncommitter GitHub <noreply@github.com> 1641171068 +0000\n\nMerge #11088\n\n11088: closes #10446 hide type inlay hints r=Veykril a=Heinenen\n\nPasses tests as described in #10446\r\nWorks for all happy cases, there may be some cases that I forgot as I am not that familiar with Rust and r-a (yet).\n\nCo-authored-by: Heinenen <th.m.heinen@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abbc7e3a0ed66e87b378476452f027732762a86a", "html_url": "https://github.com/rust-lang/rust/commit/abbc7e3a0ed66e87b378476452f027732762a86a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abbc7e3a0ed66e87b378476452f027732762a86a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d89a4f0e93562a4bdf8d93abd87200731cbf731b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d89a4f0e93562a4bdf8d93abd87200731cbf731b", "html_url": "https://github.com/rust-lang/rust/commit/d89a4f0e93562a4bdf8d93abd87200731cbf731b"}, {"sha": "05abfc77f5551dbaf81f79abca3c3da5debc1331", "url": "https://api.github.com/repos/rust-lang/rust/commits/05abfc77f5551dbaf81f79abca3c3da5debc1331", "html_url": "https://github.com/rust-lang/rust/commit/05abfc77f5551dbaf81f79abca3c3da5debc1331"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "cc304cb10a60c875447f98581389cf7ec9fbac99", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/abbc7e3a0ed66e87b378476452f027732762a86a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbc7e3a0ed66e87b378476452f027732762a86a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=abbc7e3a0ed66e87b378476452f027732762a86a", "patch": "@@ -257,26 +257,23 @@ fn is_named_constructor(\n     }?;\n     let expr = match expr {\n         ast::Expr::CallExpr(call) => match call.expr()? {\n-            ast::Expr::PathExpr(p) => p,\n+            ast::Expr::PathExpr(path) => path,\n             _ => return None,\n         },\n+        ast::Expr::PathExpr(path) => path,\n         _ => return None,\n     };\n     let path = expr.path()?;\n \n-    // Check for tuple-struct or tuple-variant in which case we can check the last segment\n     let callable = sema.type_of_expr(&ast::Expr::PathExpr(expr))?.original.as_callable(sema.db);\n     let callable_kind = callable.map(|it| it.kind());\n-    if let Some(hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_)) =\n-        callable_kind\n-    {\n-        if let Some(ctor) = path.segment() {\n-            return (ctor.to_string() == ty_name).then(|| ());\n+    let qual_seg = match callable_kind {\n+        Some(hir::CallableKind::Function(_) | hir::CallableKind::TupleEnumVariant(_)) => {\n+            path.qualifier()?.segment()\n         }\n-    }\n+        _ => path.segment(),\n+    }?;\n \n-    // otherwise use the qualifying segment as the constructor name\n-    let qual_seg = path.qualifier()?.segment()?;\n     let ctor_name = match qual_seg.kind()? {\n         ast::PathSegmentKind::Name(name_ref) => {\n             match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n@@ -1341,7 +1338,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn skip_constructor_type_hints() {\n+    fn skip_constructor_and_enum_type_hints() {\n         check_with_config(\n             InlayHintsConfig {\n                 type_hints: true,\n@@ -1351,9 +1348,16 @@ fn main() {\n                 max_length: None,\n             },\n             r#\"\n-//- minicore: try\n+//- minicore: try, option\n use core::ops::ControlFlow;\n \n+mod x {\n+    pub mod y { pub struct Foo; }\n+    pub struct Foo;\n+    pub enum AnotherEnum {\n+        Variant()\n+    };\n+}\n struct Struct;\n struct TupleStruct();\n \n@@ -1373,13 +1377,39 @@ impl Generic<i32> {\n     }\n }\n \n+enum Enum {\n+    Variant(u32)\n+}\n+\n+fn times2(value: i32) -> i32 {\n+    2 * value\n+}\n+\n fn main() {\n+    let enumb = Enum::Variant(0);\n+\n+    let strukt = x::Foo;\n+    let strukt = x::y::Foo;\n+    let strukt = Struct;\n     let strukt = Struct::new();\n+\n     let tuple_struct = TupleStruct();\n+\n     let generic0 = Generic::new();\n-     // ^^^^^^^^ Generic<i32>\n-    let generic1 = Generic::<i32>::new();\n-    let generic2 = <Generic<i32>>::new();\n+    //  ^^^^^^^^ Generic<i32>\n+    let generic1 = Generic(0);\n+    //  ^^^^^^^^ Generic<i32>\n+    let generic2 = Generic::<i32>::new();\n+    let generic3 = <Generic<i32>>::new();\n+    let generic4 = Generic::<i32>(0);\n+\n+\n+    let option = Some(0);\n+    //  ^^^^^^ Option<i32>\n+    let func = times2;\n+    //  ^^^^ fn times2(i32) -> i32\n+    let closure = |x: i32| x * 2;\n+    //  ^^^^^^^ |i32| -> i32\n }\n \n fn fallible() -> ControlFlow<()> {"}]}