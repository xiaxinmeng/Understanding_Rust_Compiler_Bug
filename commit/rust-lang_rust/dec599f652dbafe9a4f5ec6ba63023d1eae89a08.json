{"sha": "dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzU5OWY2NTJkYmFmZTlhNGY1ZWM2YmE2MzAyM2QxZWFlODlhMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T20:12:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T20:12:50Z"}, "message": "auto merge of #5234 : pcwalton/rust/equiv, r=pcwalton\n\nr? @nikomatsakis", "tree": {"sha": "837f83c1a505cf0c091b3face81eb78120e8288a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837f83c1a505cf0c091b3face81eb78120e8288a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "html_url": "https://github.com/rust-lang/rust/commit/dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8e12ea97916b15f14faeac74cd5bee1789f9ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8e12ea97916b15f14faeac74cd5bee1789f9ac", "html_url": "https://github.com/rust-lang/rust/commit/4c8e12ea97916b15f14faeac74cd5bee1789f9ac"}, {"sha": "2fa2ad59958d0028c856fb68359edb9a7bd9cab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa2ad59958d0028c856fb68359edb9a7bd9cab8", "html_url": "https://github.com/rust-lang/rust/commit/2fa2ad59958d0028c856fb68359edb9a7bd9cab8"}], "stats": {"total": 139, "additions": 111, "deletions": 28}, "files": [{"sha": "ac2afc920ff98aefcc787c95191e311f75ef8170", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -150,6 +150,14 @@ pub pure fn gt<T:Ord>(v1: &T, v2: &T) -> bool {\n     (*v1).gt(v2)\n }\n \n+/// The equivalence relation. Two values may be equivalent even if they are\n+/// of different types. The most common use case for this relation is\n+/// container types; e.g. it is often desirable to be able to use `&str`\n+/// values to look up entries in a container with `~str` keys.\n+pub trait Equiv<T> {\n+    pure fn equiv(&self, other: &T) -> bool;\n+}\n+\n #[inline(always)]\n pub pure fn min<T:Ord>(v1: T, v2: T) -> T {\n     if v1 < v2 { v1 } else { v2 }"}, {"sha": "d7e05a62c51189ea49c4f15a30a3dfcf07785c2a", "filename": "src/libcore/container.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -10,6 +10,7 @@\n \n //! Container traits\n \n+use cmp::Equiv;\n use option::Option;\n \n pub trait Container {"}, {"sha": "43ec6294bdc5b6f7c057c2a35f9f84dd1cd5675c", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -13,7 +13,7 @@\n /// Open addressing with linear probing.\n pub mod linear {\n     use container::{Container, Mutable, Map, Set};\n-    use cmp::Eq;\n+    use cmp::{Eq, Equiv};\n     use hash::Hash;\n     use to_bytes::IterBytes;\n     use iter::BaseIter;\n@@ -107,6 +107,15 @@ pub mod linear {\n             self.bucket_for_key_with_hash(hash, k)\n         }\n \n+        #[inline(always)]\n+        pure fn bucket_for_key_equiv<Q:Hash + IterBytes + Equiv<K>>(\n+                &self,\n+                k: &Q)\n+             -> SearchResult {\n+            let hash = k.hash_keyed(self.k0, self.k1) as uint;\n+            self.bucket_for_key_with_hash_equiv(hash, k)\n+        }\n+\n         #[inline(always)]\n         pure fn bucket_for_key_with_hash(&self,\n                                          hash: uint,\n@@ -122,6 +131,24 @@ pub mod linear {\n             TableFull\n         }\n \n+        #[inline(always)]\n+        pure fn bucket_for_key_with_hash_equiv<Q:Equiv<K>>(&self,\n+                                                           hash: uint,\n+                                                           k: &Q)\n+                                                        -> SearchResult {\n+            let _ = for self.bucket_sequence(hash) |i| {\n+                match self.buckets[i] {\n+                    Some(ref bkt) => {\n+                        if bkt.hash == hash && k.equiv(&bkt.key) {\n+                            return FoundEntry(i);\n+                        }\n+                    },\n+                    None => return FoundHole(i)\n+                }\n+            };\n+            TableFull\n+        }\n+\n         /// Expand the capacity of the array to the next power of two\n         /// and re-insert each of the existing buckets.\n         #[inline(always)]\n@@ -450,6 +477,28 @@ pub mod linear {\n                 None => fail!(fmt!(\"No entry found for key: %?\", k)),\n             }\n         }\n+\n+        /// Return true if the map contains a value for the specified key,\n+        /// using equivalence\n+        pure fn contains_key_equiv<Q:Hash + IterBytes + Equiv<K>>(\n+                &self,\n+                key: &Q)\n+             -> bool {\n+            match self.bucket_for_key_equiv(key) {\n+                FoundEntry(_) => {true}\n+                TableFull | FoundHole(_) => {false}\n+            }\n+        }\n+\n+        /// Return the value corresponding to the key in the map, using\n+        /// equivalence\n+        pure fn find_equiv<Q:Hash + IterBytes + Equiv<K>>(&self, k: &Q)\n+                                                       -> Option<&self/V> {\n+            match self.bucket_for_key_equiv(k) {\n+                FoundEntry(idx) => Some(self.value_for_bucket(idx)),\n+                TableFull | FoundHole(_) => None,\n+            }\n+        }\n     }\n \n     impl<K:Hash + IterBytes + Eq,V:Eq> Eq for LinearMap<K, V> {"}, {"sha": "19453c5e96fdeeb2503a1084d39c8d102acbcdd3", "filename": "src/libcore/str.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -20,7 +20,7 @@\n use at_vec;\n use cast;\n use char;\n-use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{Equiv, TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n use option::{None, Option, Some};\n use ptr;\n@@ -898,6 +898,12 @@ impl Ord for @str {\n     pure fn gt(&self, other: &@str) -> bool { gt((*self), (*other)) }\n }\n \n+#[cfg(notest)]\n+impl Equiv<~str> for &str {\n+    #[inline(always)]\n+    pure fn equiv(&self, other: &~str) -> bool { eq_slice(*self, *other) }\n+}\n+\n /*\n Section: Iterating through strings\n */"}, {"sha": "ab5f04ace79c0035fcae3789d6c69c1971e8ba8e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -14,7 +14,7 @@\n \n use container::{Container, Mutable};\n use cast;\n-use cmp::{Eq, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{Eq, Equiv, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n use iter::BaseIter;\n use iter;\n use kinds::Copy;\n@@ -1572,6 +1572,12 @@ impl<T:Eq> Eq for @[T] {\n     pure fn ne(&self, other: &@[T]) -> bool { !(*self).eq(other) }\n }\n \n+#[cfg(notest)]\n+impl<T:Eq> Equiv<~[T]> for &[T] {\n+    #[inline(always)]\n+    pure fn equiv(&self, other: &~[T]) -> bool { eq(*self, *other) }\n+}\n+\n // Lexicographical comparison\n \n pure fn cmp<T: TotalOrd>(a: &[T], b: &[T]) -> Ordering {"}, {"sha": "a232aa764dd2daf81cd32b529b9eb3b359a6fdd8", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -214,7 +214,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n                 let mut mt = ast_mt_to_mt(self, rscope, mt);\n                 if a_seq_ty.mutbl == ast::m_mutbl ||\n                         a_seq_ty.mutbl == ast::m_const {\n-                    mt = ty::mt { ty: mt.ty, mutbl: ast::m_mutbl };\n+                    mt = ty::mt { ty: mt.ty, mutbl: a_seq_ty.mutbl };\n                 }\n                 return ty::mk_evec(tcx, mt, vst);\n             }"}, {"sha": "5013b2c919f7aac87cf1528cdc15d93a49079ac4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -3112,7 +3112,7 @@ pub impl Parser {\n     fn parse_trait_ref_list(&self, ket: &token::Token) -> ~[@trait_ref] {\n         self.parse_seq_to_before_end(\n             ket,\n-            seq_sep_none(),\n+            seq_sep_trailing_disallowed(token::BINOP(token::PLUS)),\n             |p| p.parse_trait_ref()\n         )\n     }"}, {"sha": "d307e3964e71e91ff9b50216d0f177aa78f54c35", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -600,8 +600,11 @@ pub fn print_item(s: @ps, &&item: @ast::item) {\n         print_generics(s, generics);\n         if traits.len() != 0u {\n             word(s.s, ~\":\");\n-            for traits.each |trait_| {\n+            for traits.eachi |i, trait_| {\n                 nbsp(s);\n+                if i != 0 {\n+                    word_space(s, ~\"+\");\n+                }\n                 print_path(s, trait_.path, false);\n             }\n         }"}, {"sha": "ecd43686b773a0b0ec9971c5c49c491e803ec4e6", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -12,6 +12,6 @@ trait Foo { fn f() -> int; }\n trait Bar { fn g() -> int; }\n trait Baz { fn h() -> int; }\n \n-trait Quux: Foo Bar Baz { }\n+trait Quux: Foo + Bar + Baz { }\n \n impl<T:Foo + Bar + Baz> Quux for T { }"}, {"sha": "e86f7cfd26ad50bbdf3280ec44fe0c9ce6a16c0d", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -10,7 +10,7 @@\n \n use core::cmp::Eq;\n \n-pub trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq {\n+pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq {\n }\n \n pub struct MyInt {"}, {"sha": "afd8cf892333f7e910e34cc79adad470b29f3192", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -10,12 +10,15 @@\n \n use core::cmp::Eq;\n \n-trait Hahaha: Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq //~ ERROR Duplicate supertrait in trait declaration\n-              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n-              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n-              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n-              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq\n-              Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq {}\n+trait Hahaha: Eq + Eq + Eq + Eq + Eq + //~ ERROR Duplicate supertrait\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n+              Eq {}\n \n enum Lol = int;\n "}, {"sha": "ec8e04e41ef58d49d993d4cc9f14269e2cf9a97c", "filename": "src/test/run-pass/const-vec-syntax.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -0,0 +1,7 @@\n+fn f(_: &const [int]) {}\n+\n+fn main() {\n+    let v = [ 1, 2, 3 ];\n+    f(v);\n+}\n+"}, {"sha": "6b8dd43d58b57b607a9521bf1cc098d273f6dee5", "filename": "src/test/run-pass/trait-inheritance-auto-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -17,7 +17,7 @@ extern mod aux(name = \"trait_inheritance_auto_xc_2_aux\");\n use aux::{Foo, Bar, Baz, A};\n \n // We want to extend all Foo, Bar, Bazes to Quuxes\n-pub trait Quux: Foo Bar Baz { }\n+pub trait Quux: Foo + Bar + Baz { }\n impl<T:Foo + Bar + Baz> Quux for T { }\n \n fn f<T:Quux>(a: &T) {"}, {"sha": "7ebbc8e83cb659b5940c6408399881562ccb0f64", "filename": "src/test/run-pass/trait-inheritance-auto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -16,7 +16,7 @@ trait Foo { fn f() -> int; }\n trait Bar { fn g() -> int; }\n trait Baz { fn h() -> int; }\n \n-trait Quux: Foo Bar Baz { }\n+trait Quux: Foo + Bar + Baz { }\n \n struct A { x: int }\n "}, {"sha": "a4a3991f9e8f9267892a6d68ecb253543a5491b9", "filename": "src/test/run-pass/trait-inheritance-diamond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-diamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-diamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-diamond.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -13,7 +13,7 @@\n trait A { fn a(&self) -> int; }\n trait B: A { fn b(&self) -> int; }\n trait C: A { fn c(&self) -> int; }\n-trait D: B C { fn d(&self) -> int; }\n+trait D: B + C { fn d(&self) -> int; }\n \n struct S { bogus: () }\n "}, {"sha": "92cb25b8d2be7d730121d9b0f942bd9255a57243", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -16,9 +16,9 @@ use core::num::NumCast::from;\n extern mod std;\n use std::cmp::FuzzyEq;\n \n-pub trait NumExt: NumCast Eq Ord {}\n+pub trait NumExt: NumCast + Eq + Ord {}\n \n-pub trait FloatExt: NumExt FuzzyEq<Self> {}\n+pub trait FloatExt: NumExt + FuzzyEq<Self> {}\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool { *n > from(1) }\n fn greater_than_one_float<T:FloatExt>(n: &T) -> bool { *n > from(1) }"}, {"sha": "7f0d4d77b626480837c116d24fc9c01b5d0258f4", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -19,7 +19,7 @@ trait Num {\n     fn gt(&self, other: &Self) -> bool;\n }\n \n-pub trait NumExt: Num NumCast { }\n+pub trait NumExt: Num + NumCast { }\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool {\n     n.gt(&from(1))"}, {"sha": "07b9772af2970c248c9eb81bd582789fee561e93", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -11,7 +11,7 @@\n use core::cmp::Ord;\n use core::num::NumCast::from;\n \n-pub trait NumExt: NumCast Ord { }\n+pub trait NumExt: NumCast + Ord { }\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool {\n     *n > from(1)"}, {"sha": "8f8b83c3d7614425b4ae112cd5b22e67b9ec2350", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -38,7 +38,7 @@ impl TypeExt for f64 {}\n impl TypeExt for float {}\n \n \n-pub trait NumExt: TypeExt Eq Ord NumCast {}\n+pub trait NumExt: TypeExt + Eq + Ord + NumCast {}\n \n impl NumExt for u8 {}\n impl NumExt for u16 {}\n@@ -94,7 +94,7 @@ impl IntegerExt for i64 {}\n impl IntegerExt for int {}\n \n \n-pub trait FloatExt: NumExt FuzzyEq<Self> {}\n+pub trait FloatExt: NumExt + FuzzyEq<Self> {}\n \n impl FloatExt for f32 {}\n impl FloatExt for f64 {}"}, {"sha": "67861709e76f28dea0604da07d8aed3b9faeee69", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -11,7 +11,7 @@\n use core::cmp::{Eq, Ord};\n use core::num::NumCast::from;\n \n-pub trait NumExt: Eq Ord NumCast {}\n+pub trait NumExt: Eq + Ord + NumCast {}\n \n impl NumExt for f32 {}\n "}, {"sha": "2efe5b23eb57b3de2ec86b4c4edbb26a2b349ceb", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -11,7 +11,7 @@\n use core::cmp::{Eq, Ord};\n use core::num::NumCast::from;\n \n-pub trait NumExt: Eq NumCast {}\n+pub trait NumExt: Eq + NumCast {}\n \n impl NumExt for f32 {}\n impl NumExt for int {}"}, {"sha": "a4d7e33891f495b25aa1425ff193bf9605a99274", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -10,7 +10,7 @@\n \n use core::cmp::Eq;\n \n-trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq { }\n+trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq { }\n \n struct MyInt { val: int }\n "}, {"sha": "ccc7f1fc4c07ff0bdb1bb4d94a4069affe8ba3a7", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -14,7 +14,7 @@ trait MyNum {\n     static fn from_int(int) -> Self;\n }\n \n-pub trait NumExt: MyEq MyNum { }\n+pub trait NumExt: MyEq + MyNum { }\n \n struct S { v: int }\n "}, {"sha": "5925888650d8009c772d54111ba0aaa989d8f1e6", "filename": "src/test/run-pass/trait-inheritance2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec599f652dbafe9a4f5ec6ba63023d1eae89a08/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs?ref=dec599f652dbafe9a4f5ec6ba63023d1eae89a08", "patch": "@@ -12,7 +12,7 @@ trait Foo { fn f() -> int; }\n trait Bar { fn g() -> int; }\n trait Baz { fn h() -> int; }\n \n-trait Quux: Foo Bar Baz { }\n+trait Quux: Foo + Bar + Baz { }\n \n struct A { x: int }\n "}]}