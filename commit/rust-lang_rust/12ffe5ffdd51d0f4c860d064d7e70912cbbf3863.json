{"sha": "12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZmZlNWZmZGQ1MWQwZjRjODYwZDA2NGQ3ZTcwOTEyY2JiZjM4NjM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-07T00:20:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T00:20:36Z"}, "message": "Rollup merge of #66044 - RalfJung:uninit-lint, r=oli-obk\n\nImprove uninit/zeroed lint\n\n* Also warn when creating a raw pointer with a NULL vtable.\n* Also identify `MaybeUninit::uninit().assume_init()` and `MaybeUninit::zeroed().assume_init()` as dangerous.", "tree": {"sha": "0de72f354281dd04221f2258dbcaa78055343286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de72f354281dd04221f2258dbcaa78055343286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw2NUCRBK7hj4Ov3rIwAAdHIIAIFbsGTaK4my97BIAQtXfJwl\nIQ6yOwnDh7O+T84gC2CufkJ7pCzxLoOZrhalnhC7E8bhlXG0Enj1ApypIsntATXq\nnuwKHa4nWT++5krAOnxcuL2yLyoPFIOTpfs87qPhO0ROiOK5sTtNW3RJCx9n2Mz3\noU7Gjk3jDVluLhw/h1sL9U/pOILB7jHuJmibIEeQgxZB3EZiWXnOEjBe8eG9zkgM\nbfp5gPiyG0v7U1h0CbnO5F6cVKEmL9SOfmmQeBoq0R4EjUvLn7kQ/gqfaK5OjfUe\nfpURr1UlH9UQf47PHnGXNxEa1zi4Jsdp3B5qA6ZRhjrLOBYgieglAA1mG9HO5Bg=\n=fmfe\n-----END PGP SIGNATURE-----\n", "payload": "tree 0de72f354281dd04221f2258dbcaa78055343286\nparent 1988f28009479484362f7718371618a9c1d31b84\nparent bb37d0078750b760f013bfa706fe19d4d823b8df\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573086036 +0900\ncommitter GitHub <noreply@github.com> 1573086036 +0900\n\nRollup merge of #66044 - RalfJung:uninit-lint, r=oli-obk\n\nImprove uninit/zeroed lint\n\n* Also warn when creating a raw pointer with a NULL vtable.\n* Also identify `MaybeUninit::uninit().assume_init()` and `MaybeUninit::zeroed().assume_init()` as dangerous.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "html_url": "https://github.com/rust-lang/rust/commit/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1988f28009479484362f7718371618a9c1d31b84", "url": "https://api.github.com/repos/rust-lang/rust/commits/1988f28009479484362f7718371618a9c1d31b84", "html_url": "https://github.com/rust-lang/rust/commit/1988f28009479484362f7718371618a9c1d31b84"}, {"sha": "bb37d0078750b760f013bfa706fe19d4d823b8df", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb37d0078750b760f013bfa706fe19d4d823b8df", "html_url": "https://github.com/rust-lang/rust/commit/bb37d0078750b760f013bfa706fe19d4d823b8df"}], "stats": {"total": 113, "additions": 104, "deletions": 9}, "files": [{"sha": "03093139bc2f956a1577bb0bbf972afdbab344e9", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -440,6 +440,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n+    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"assume_init\")]\n     pub unsafe fn assume_init(self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)"}, {"sha": "721baad25639fabce505077c9ccd57fb6b9bc0ce", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -699,6 +699,9 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n \n     /// Check if a `DefId`'s path matches the given absolute type path usage.\n     ///\n+    /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;\n+    /// inherent `impl` blocks are matched with the name of the type.\n+    ///\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)"}, {"sha": "a52f36ea1da0f1b902a2e91bbea5decccd66a410", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -1909,8 +1909,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n             // `Invalid` represents the empty string and matches that.\n             const TRANSMUTE_PATH: &[Symbol] =\n                 &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n+            const MU_ZEROED_PATH: &[Symbol] =\n+                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::zeroed];\n+            const MU_UNINIT_PATH: &[Symbol] =\n+                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::uninit];\n \n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n+                // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                     let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n \n@@ -1925,8 +1930,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                             return Some(InitKind::Zeroed);\n                         }\n                     }\n-                    // FIXME: Also detect `MaybeUninit::zeroed().assume_init()` and\n-                    // `MaybeUninit::uninit().assume_init()`.\n+                }\n+            } else if let hir::ExprKind::MethodCall(_, _, ref args) = expr.kind {\n+                // Find problematic calls to `MaybeUninit::assume_init`.\n+                let def_id = cx.tables.type_dependent_def_id(expr.hir_id)?;\n+                if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {\n+                    // This is a call to *some* method named `assume_init`.\n+                    // See if the `self` parameter is one of the dangerous constructors.\n+                    if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {\n+                        if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n+                            let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n+                            if cx.match_def_path(def_id, MU_ZEROED_PATH) {\n+                                return Some(InitKind::Zeroed);\n+                            } else if cx.match_def_path(def_id, MU_UNINIT_PATH) {\n+                                return Some(InitKind::Uninit);\n+                            }\n+                        }\n+                    }\n                 }\n             }\n \n@@ -1947,6 +1967,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                 Adt(..) if ty.is_box() => Some((format!(\"`Box` must be non-null\"), None)),\n                 FnPtr(..) => Some((format!(\"Function pointers must be non-null\"), None)),\n                 Never => Some((format!(\"The never type (`!`) has no valid value\"), None)),\n+                RawPtr(tm) if matches!(tm.ty.kind, Dynamic(..)) => // raw ptr to dyn Trait\n+                    Some((format!(\"The vtable of a wide raw pointer must be non-null\"), None)),\n                 // Primitive types with other constraints.\n                 Bool if init == InitKind::Uninit =>\n                     Some((format!(\"Booleans must be `true` or `false`\"), None)),"}, {"sha": "a47980c5ead3091b1bd92fddb86da17ddcd2d099", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -15,6 +15,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(nll)]\n+#![feature(matches_macro)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "64ea82e1bdc53cb592cf1f6b50916b895fef9534", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -148,6 +148,7 @@ symbols! {\n         associated_type_bounds,\n         associated_type_defaults,\n         associated_types,\n+        assume_init,\n         async_await,\n         async_closure,\n         attr,\n@@ -417,6 +418,8 @@ symbols! {\n         match_beginning_vert,\n         match_default_bindings,\n         may_dangle,\n+        maybe_uninit,\n+        MaybeUninit,\n         mem,\n         member_constraints,\n         message,\n@@ -709,6 +712,7 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n+        uninit,\n         uninitialized,\n         universal_impl_trait,\n         unmarked_api,"}, {"sha": "473be434a7524931c374fe960c661e17176f3ded", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -67,6 +67,9 @@ fn main() {\n         let _val: NonNull<i32> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n         let _val: NonNull<i32> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: *const dyn Send = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: *const dyn Send = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Things that can be zero, but not uninit.\n         let _val: bool = mem::zeroed();\n         let _val: bool = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n@@ -82,10 +85,16 @@ fn main() {\n         let _val: &'static [i32] = mem::transmute((0usize, 0usize)); //~ ERROR: does not permit zero-initialization\n         let _val: NonZeroU32 = mem::transmute(0); //~ ERROR: does not permit zero-initialization\n \n+        // `MaybeUninit` cases\n+        let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init(); //~ ERROR: does not permit zero-initialization\n+        let _val: NonNull<i32> = MaybeUninit::uninit().assume_init(); //~ ERROR: does not permit being left uninitialized\n+        let _val: bool = MaybeUninit::uninit().assume_init(); //~ ERROR: does not permit being left uninitialized\n+\n         // Some more types that should work just fine.\n         let _val: Option<&'static i32> = mem::zeroed();\n         let _val: Option<fn()> = mem::zeroed();\n         let _val: MaybeUninit<&'static i32> = mem::zeroed();\n         let _val: i32 = mem::zeroed();\n+        let _val: bool = MaybeUninit::zeroed().assume_init();\n     }\n }"}, {"sha": "e12b1897ade1b667bdec9f10d152601c7020129b", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "patch": "@@ -307,8 +307,30 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |\n    = note: std::ptr::NonNull<i32> must be non-null\n \n+error: the type `*const dyn std::marker::Send` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:70:37\n+   |\n+LL |         let _val: *const dyn Send = mem::zeroed();\n+   |                                     ^^^^^^^^^^^^^\n+   |                                     |\n+   |                                     this code causes undefined behavior when executed\n+   |                                     help: use `MaybeUninit<T>` instead\n+   |\n+   = note: The vtable of a wide raw pointer must be non-null\n+\n+error: the type `*const dyn std::marker::Send` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:71:37\n+   |\n+LL |         let _val: *const dyn Send = mem::uninitialized();\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |                                     |\n+   |                                     this code causes undefined behavior when executed\n+   |                                     help: use `MaybeUninit<T>` instead\n+   |\n+   = note: The vtable of a wide raw pointer must be non-null\n+\n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:72:26\n+  --> $DIR/uninitialized-zeroed.rs:75:26\n    |\n LL |         let _val: bool = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -319,7 +341,7 @@ LL |         let _val: bool = mem::uninitialized();\n    = note: Booleans must be `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:75:32\n+  --> $DIR/uninitialized-zeroed.rs:78:32\n    |\n LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -334,7 +356,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `NonBig` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:78:28\n+  --> $DIR/uninitialized-zeroed.rs:81:28\n    |\n LL |         let _val: NonBig = mem::uninitialized();\n    |                            ^^^^^^^^^^^^^^^^^^^^\n@@ -345,7 +367,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    = note: NonBig must be initialized inside its custom valid range\n \n error: the type `&'static i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:81:34\n+  --> $DIR/uninitialized-zeroed.rs:84:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -356,7 +378,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: References must be non-null\n \n error: the type `&'static [i32]` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:82:36\n+  --> $DIR/uninitialized-zeroed.rs:85:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -367,7 +389,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: References must be non-null\n \n error: the type `std::num::NonZeroU32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:83:32\n+  --> $DIR/uninitialized-zeroed.rs:86:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^\n@@ -377,5 +399,38 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |\n    = note: std::num::NonZeroU32 must be non-null\n \n-error: aborting due to 30 previous errors\n+error: the type `std::ptr::NonNull<i32>` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:89:34\n+   |\n+LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  this code causes undefined behavior when executed\n+   |                                  help: use `MaybeUninit<T>` instead\n+   |\n+   = note: std::ptr::NonNull<i32> must be non-null\n+\n+error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:90:34\n+   |\n+LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  this code causes undefined behavior when executed\n+   |                                  help: use `MaybeUninit<T>` instead\n+   |\n+   = note: std::ptr::NonNull<i32> must be non-null\n+\n+error: the type `bool` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:91:26\n+   |\n+LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          |\n+   |                          this code causes undefined behavior when executed\n+   |                          help: use `MaybeUninit<T>` instead\n+   |\n+   = note: Booleans must be `true` or `false`\n+\n+error: aborting due to 35 previous errors\n "}]}