{"sha": "4b5cd544d1268df8f95424a7dc77ce6c852bac56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNWNkNTQ0ZDEyNjhkZjhmOTU0MjRhN2RjNzdjZTZjODUyYmFjNTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-07T09:37:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-07T09:37:35Z"}, "message": "use black_box instead of local optimziation barriers in const tests where possible", "tree": {"sha": "5cf80441f87432cb04cec3fcf9819ad0e75e1b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf80441f87432cb04cec3fcf9819ad0e75e1b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5cd544d1268df8f95424a7dc77ce6c852bac56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5cd544d1268df8f95424a7dc77ce6c852bac56", "html_url": "https://github.com/rust-lang/rust/commit/4b5cd544d1268df8f95424a7dc77ce6c852bac56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5cd544d1268df8f95424a7dc77ce6c852bac56/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caeb5544ecd9dba4d67b68b8c1b32d8132c6d5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/caeb5544ecd9dba4d67b68b8c1b32d8132c6d5f2", "html_url": "https://github.com/rust-lang/rust/commit/caeb5544ecd9dba4d67b68b8c1b32d8132c6d5f2"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "743043609ec32a4f1681733c714c9c9eb96a8d92", "filename": "src/test/ui/consts/cast-discriminant-zst-enum.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b5cd544d1268df8f95424a7dc77ce6c852bac56/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5cd544d1268df8f95424a7dc77ce6c852bac56/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs?ref=4b5cd544d1268df8f95424a7dc77ce6c852bac56", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to a i32.\n+use std::hint::black_box;\n \n #[derive(Copy, Clone)]\n enum Nums {\n@@ -12,9 +13,6 @@ const NEG_ONE_I32: i32 = Nums::NegOne as i32;\n const NEG_ONE_I64: i64 = Nums::NegOne as i64;\n const NEG_ONE_I128: i128 = Nums::NegOne as i128;\n \n-#[inline(never)]\n-fn identity<T>(t: T) -> T { t }\n-\n fn test_as_arg(n: Nums) {\n     assert_eq!(-1i8, n as i8);\n     assert_eq!(-1i16, n as i16);\n@@ -31,11 +29,11 @@ fn main() {\n     assert_eq!(-1i64, kind as i64);\n     assert_eq!(-1i128, kind as i128);\n \n-    assert_eq!(-1i8, identity(kind) as i8);\n-    assert_eq!(-1i16, identity(kind) as i16);\n-    assert_eq!(-1i32, identity(kind) as i32);\n-    assert_eq!(-1i64, identity(kind) as i64);\n-    assert_eq!(-1i128, identity(kind) as i128);\n+    assert_eq!(-1i8, black_box(kind) as i8);\n+    assert_eq!(-1i16, black_box(kind) as i16);\n+    assert_eq!(-1i32, black_box(kind) as i32);\n+    assert_eq!(-1i64, black_box(kind) as i64);\n+    assert_eq!(-1i128, black_box(kind) as i128);\n \n     test_as_arg(Nums::NegOne);\n "}, {"sha": "24fb760f5a3f74e9992bdcb7b2f3ec125189d9bf", "filename": "src/test/ui/consts/const_discriminant.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b5cd544d1268df8f95424a7dc77ce6c852bac56/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5cd544d1268df8f95424a7dc77ce6c852bac56/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs?ref=4b5cd544d1268df8f95424a7dc77ce6c852bac56", "patch": "@@ -1,14 +1,9 @@\n // run-pass\n-#![feature(const_discriminant)]\n+#![feature(const_discriminant, test)]\n #![allow(dead_code)]\n \n use std::mem::{discriminant, Discriminant};\n-\n-// `discriminant(const_expr)` may get const-propagated.\n-// As we want to check that const-eval is equal to ordinary exection,\n-// we wrap `const_expr` with a function which is not const to prevent this.\n-#[inline(never)]\n-fn identity<T>(x: T) -> T { x }\n+use std::hint::black_box;\n \n enum Test {\n     A(u8),\n@@ -31,10 +26,10 @@ const TEST_V: Discriminant<SingleVariant> = discriminant(&SingleVariant::V);\n \n fn main() {\n     assert_eq!(TEST_A, TEST_A_OTHER);\n-    assert_eq!(TEST_A, discriminant(identity(&Test::A(17))));\n-    assert_eq!(TEST_B, discriminant(identity(&Test::B)));\n+    assert_eq!(TEST_A, discriminant(black_box(&Test::A(17))));\n+    assert_eq!(TEST_B, discriminant(black_box(&Test::B)));\n     assert_ne!(TEST_A, TEST_B);\n-    assert_ne!(TEST_B, discriminant(identity(&Test::C { a: 42, b: 7 })));\n+    assert_ne!(TEST_B, discriminant(black_box(&Test::C { a: 42, b: 7 })));\n \n-    assert_eq!(TEST_V, discriminant(identity(&SingleVariant::V)));\n+    assert_eq!(TEST_V, discriminant(black_box(&SingleVariant::V)));\n }"}]}