{"sha": "7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "node_id": "C_kwDOAAsO6NoAKDdhNDAwNmNjNTJkNzQxYjI3MGUxZGE3YjUwOGRjNmY4N2FlM2U0ZGU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-05-30T10:57:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-30T10:57:38Z"}, "message": "Rollup merge of #111543 - Urgau:uplift_invalid_utf8_in_unchecked, r=WaffleLapkin\n\nUplift `clippy::invalid_utf8_in_unchecked` lint\n\nThis PR aims at uplifting the `clippy::invalid_utf8_in_unchecked` lint into two lints.\n\n## `invalid_from_utf8_unchecked`\n\n(deny-by-default)\n\nThe `invalid_from_utf8_unchecked` lint checks for calls to `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut` with an invalid UTF-8 literal.\n\n### Example\n\n```rust\nunsafe {\n    std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n}\n```\n\n### Explanation\n\nCreating such a `str` would result in undefined behavior as per documentation for `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`.\n\n## `invalid_from_utf8`\n\n(warn-by-default)\n\nThe `invalid_from_utf8` lint checks for calls to `std::str::from_utf8` and `std::str::from_utf8_mut` with an invalid UTF-8 literal.\n\n### Example\n\n```rust\nstd::str::from_utf8(b\"ru\\x82st\");\n```\n\n### Explanation\n\nTrying to create such a `str` would always return an error as per documentation for `std::str::from_utf8` and `std::str::from_utf8_mut`.\n\n-----\n\nMostly followed the instructions for uplifting a clippy lint described here: https://github.com/rust-lang/rust/pull/99696#pullrequestreview-1134072751\n\n````@rustbot```` label: +I-lang-nominated\nr? compiler\n\n-----\n\nFor Clippy:\n\nchangelog: Moves: Uplifted `clippy::invalid_utf8_in_unchecked` into rustc", "tree": {"sha": "79b9d2e34c8b2f3ee15997f0b4a82bfe9ed9b21b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b9d2e34c8b2f3ee15997f0b4a82bfe9ed9b21b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkddaiCRBK7hj4Ov3rIwAAvoMIAIxbvSoz5Ou3tgK5nmoUfJv1\nNyWHLHuOv0X/Qajy7bvo3X/yKMjreoGIJrKEJLRr77j43uErYeNLpMMhYvupIOZp\nvaH9I5ZFs8851g5KbQFSTybld9YrnwxqmchPTaEtfF3Gwm3jYWC5xTU4g5H6v9bT\n2fC3iQmEeB4oRcPyRlJuBxJq7RWem+MSBrMjUgvQtZEzSUo2uTBz7YwW4k7IDQbO\nhmyer2L5HGq1VJfOYAuxroLQZYN5HyhKE9a0ztw4F/CFDKZj6GN0+j8ij98ew/4O\ntAHFyqPBwFkeWAK7BE3An+hqPkrVJX0ij4m9NIywnF/WAteBTtxm2M1ozmgSaO0=\n=fQ5X\n-----END PGP SIGNATURE-----\n", "payload": "tree 79b9d2e34c8b2f3ee15997f0b4a82bfe9ed9b21b\nparent 18c9baf4fef69cee58991bfc5f8be1d8c14ef979\nparent b84c190b9ac872fc07ac59c9ec7712dba5b4c2f8\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1685444258 +0200\ncommitter GitHub <noreply@github.com> 1685444258 +0200\n\nRollup merge of #111543 - Urgau:uplift_invalid_utf8_in_unchecked, r=WaffleLapkin\n\nUplift `clippy::invalid_utf8_in_unchecked` lint\n\nThis PR aims at uplifting the `clippy::invalid_utf8_in_unchecked` lint into two lints.\n\n## `invalid_from_utf8_unchecked`\n\n(deny-by-default)\n\nThe `invalid_from_utf8_unchecked` lint checks for calls to `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut` with an invalid UTF-8 literal.\n\n### Example\n\n```rust\nunsafe {\n    std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n}\n```\n\n### Explanation\n\nCreating such a `str` would result in undefined behavior as per documentation for `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`.\n\n## `invalid_from_utf8`\n\n(warn-by-default)\n\nThe `invalid_from_utf8` lint checks for calls to `std::str::from_utf8` and `std::str::from_utf8_mut` with an invalid UTF-8 literal.\n\n### Example\n\n```rust\nstd::str::from_utf8(b\"ru\\x82st\");\n```\n\n### Explanation\n\nTrying to create such a `str` would always return an error as per documentation for `std::str::from_utf8` and `std::str::from_utf8_mut`.\n\n-----\n\nMostly followed the instructions for uplifting a clippy lint described here: https://github.com/rust-lang/rust/pull/99696#pullrequestreview-1134072751\n\n````@rustbot```` label: +I-lang-nominated\nr? compiler\n\n-----\n\nFor Clippy:\n\nchangelog: Moves: Uplifted `clippy::invalid_utf8_in_unchecked` into rustc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "html_url": "https://github.com/rust-lang/rust/commit/7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c9baf4fef69cee58991bfc5f8be1d8c14ef979", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c9baf4fef69cee58991bfc5f8be1d8c14ef979", "html_url": "https://github.com/rust-lang/rust/commit/18c9baf4fef69cee58991bfc5f8be1d8c14ef979"}, {"sha": "b84c190b9ac872fc07ac59c9ec7712dba5b4c2f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84c190b9ac872fc07ac59c9ec7712dba5b4c2f8", "html_url": "https://github.com/rust-lang/rust/commit/b84c190b9ac872fc07ac59c9ec7712dba5b4c2f8"}], "stats": {"total": 591, "additions": 423, "deletions": 168}, "files": [{"sha": "e707ac41a050d4a89f7b8220ca636742cf50c763", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -304,6 +304,14 @@ lint_improper_ctypes_union_layout_help = consider adding a `#[repr(C)]` or `#[re\n lint_improper_ctypes_union_layout_reason = this union has unspecified layout\n lint_improper_ctypes_union_non_exhaustive = this union is non-exhaustive\n \n+# FIXME: we should ordinalize $valid_up_to when we add support for doing so\n+lint_invalid_from_utf8_checked = calls to `{$method}` with a invalid literal always return an error\n+    .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n+\n+# FIXME: we should ordinalize $valid_up_to when we add support for doing so\n+lint_invalid_from_utf8_unchecked = calls to `{$method}` with a invalid literal are undefined behavior\n+    .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n+\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n "}, {"sha": "3291286ad679be4c79f853e025e3b6d72a1c3da5", "filename": "compiler/rustc_lint/src/invalid_from_utf8.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -0,0 +1,118 @@\n+use std::str::Utf8Error;\n+\n+use rustc_ast::{BorrowKind, LitKind};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_span::source_map::Spanned;\n+use rustc_span::sym;\n+\n+use crate::lints::InvalidFromUtf8Diag;\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `invalid_from_utf8_unchecked` lint checks for calls to\n+    /// `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`\n+    /// with an invalid UTF-8 literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # #[allow(unused)]\n+    /// unsafe {\n+    ///     std::str::from_utf8_unchecked(b\"Ru\\x82st\");\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Creating such a `str` would result in undefined behavior as per documentation\n+    /// for `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`.\n+    pub INVALID_FROM_UTF8_UNCHECKED,\n+    Deny,\n+    \"using a non UTF-8 literal in `std::str::from_utf8_unchecked`\"\n+}\n+\n+declare_lint! {\n+    /// The `invalid_from_utf8` lint checks for calls to\n+    /// `std::str::from_utf8` and `std::str::from_utf8_mut`\n+    /// with an invalid UTF-8 literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #[allow(unused)]\n+    /// std::str::from_utf8(b\"Ru\\x82st\");\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Trying to create such a `str` would always return an error as per documentation\n+    /// for `std::str::from_utf8` and `std::str::from_utf8_mut`.\n+    pub INVALID_FROM_UTF8,\n+    Warn,\n+    \"using a non UTF-8 literal in `std::str::from_utf8`\"\n+}\n+\n+declare_lint_pass!(InvalidFromUtf8 => [INVALID_FROM_UTF8_UNCHECKED, INVALID_FROM_UTF8]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidFromUtf8 {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(diag_item) = cx.tcx.get_diagnostic_name(def_id)\n+            && [sym::str_from_utf8, sym::str_from_utf8_mut,\n+                sym::str_from_utf8_unchecked, sym::str_from_utf8_unchecked_mut].contains(&diag_item)\n+        {\n+            let lint = |utf8_error: Utf8Error| {\n+                let label = arg.span;\n+                let method = diag_item.as_str().strip_prefix(\"str_\").unwrap();\n+                let method = format!(\"std::str::{method}\");\n+                let valid_up_to = utf8_error.valid_up_to();\n+                let is_unchecked_variant = diag_item.as_str().contains(\"unchecked\");\n+\n+                cx.emit_spanned_lint(\n+                    if is_unchecked_variant { INVALID_FROM_UTF8_UNCHECKED } else { INVALID_FROM_UTF8 },\n+                    expr.span,\n+                    if is_unchecked_variant {\n+                        InvalidFromUtf8Diag::Unchecked { method,  valid_up_to, label }\n+                    } else {\n+                        InvalidFromUtf8Diag::Checked { method,  valid_up_to, label }\n+                    }\n+                )\n+            };\n+\n+            match &arg.kind {\n+                ExprKind::Lit(Spanned { node: lit, .. }) => {\n+                    if let LitKind::ByteStr(bytes, _) = &lit\n+                        && let Err(utf8_error) = std::str::from_utf8(bytes)\n+                    {\n+                        lint(utf8_error);\n+                    }\n+                },\n+                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n+                    let elements = args.iter().map(|e|{\n+                        match &e.kind {\n+                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n+                                LitKind::Byte(b) => Some(*b),\n+                                LitKind::Int(b, _) => Some(*b as u8),\n+                                _ => None\n+                            }\n+                            _ => None\n+                        }\n+                    }).collect::<Option<Vec<_>>>();\n+\n+                    if let Some(elements) = elements\n+                        && let Err(utf8_error) = std::str::from_utf8(&elements)\n+                    {\n+                        lint(utf8_error);\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "c62109b298629db779e807036da59ac73c467efa", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -60,6 +60,7 @@ mod expect;\n mod for_loops_over_fallibles;\n pub mod hidden_unicode_codepoints;\n mod internal;\n+mod invalid_from_utf8;\n mod late;\n mod let_underscore;\n mod levels;\n@@ -102,6 +103,7 @@ use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n+use invalid_from_utf8::*;\n use let_underscore::*;\n use map_unit_fn::*;\n use methods::*;\n@@ -207,6 +209,7 @@ late_lint_methods!(\n             HardwiredLints: HardwiredLints,\n             ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n             ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n+            InvalidFromUtf8: InvalidFromUtf8,\n             VariantSizeDifferences: VariantSizeDifferences,\n             BoxPointers: BoxPointers,\n             PathStatements: PathStatements,"}, {"sha": "746abebeb375af5cefb3e551067a3be543e48388", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -699,6 +699,25 @@ pub struct ForgetCopyDiag<'a> {\n     pub label: Span,\n }\n \n+// invalid_from_utf8.rs\n+#[derive(LintDiagnostic)]\n+pub enum InvalidFromUtf8Diag {\n+    #[diag(lint_invalid_from_utf8_unchecked)]\n+    Unchecked {\n+        method: String,\n+        valid_up_to: usize,\n+        #[label]\n+        label: Span,\n+    },\n+    #[diag(lint_invalid_from_utf8_checked)]\n+    Checked {\n+        method: String,\n+        valid_up_to: usize,\n+        #[label]\n+        label: Span,\n+    },\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "1185563ea8063e989bafb23f980782ced36eddd3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -1454,6 +1454,10 @@ symbols! {\n         stop_after_dataflow,\n         store,\n         str,\n+        str_from_utf8,\n+        str_from_utf8_mut,\n+        str_from_utf8_unchecked,\n+        str_from_utf8_unchecked_mut,\n         str_split_whitespace,\n         str_trim,\n         str_trim_end,"}, {"sha": "0ba5d088f6174212b720ba4d81799aa75e2d3f7c", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -1,3 +1,5 @@\n+#![cfg_attr(not(bootstrap), allow(invalid_from_utf8))]\n+\n use std::assert_matches::assert_matches;\n use std::borrow::Cow;\n use std::cmp::Ordering::{Equal, Greater, Less};"}, {"sha": "0f23cf7ae239fbf07a27549af25c68665ac03a6e", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -84,6 +84,7 @@ use super::Utf8Error;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_shared\", since = \"1.63.0\")]\n #[rustc_allow_const_fn_unstable(str_internals)]\n+#[rustc_diagnostic_item = \"str_from_utf8\"]\n pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     // FIXME: This should use `?` again, once it's `const`\n     match run_utf8_validation(v) {\n@@ -127,6 +128,7 @@ pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n /// errors that can be returned.\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_mut\"]\n pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     // This should use `?` again, once it's `const`\n     match run_utf8_validation(v) {\n@@ -167,6 +169,7 @@ pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_unchecked\"]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout.\n@@ -194,6 +197,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked_mut\", issue = \"91005\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_unchecked_mut\"]\n pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`\n     // are valid UTF-8, thus the cast to `*mut str` is safe."}, {"sha": "0ae95b045e03ce634e48c773b7f3c0c6c33067d9", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -212,7 +212,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::instant_subtraction::UNCHECKED_DURATION_SUBTRACTION_INFO,\n     crate::int_plus_one::INT_PLUS_ONE_INFO,\n     crate::invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS_INFO,\n-    crate::invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED_INFO,\n     crate::items_after_statements::ITEMS_AFTER_STATEMENTS_INFO,\n     crate::items_after_test_module::ITEMS_AFTER_TEST_MODULE_INFO,\n     crate::iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR_INFO,"}, {"sha": "6a4861747d267c83663ca3e405a8d61d13564c26", "filename": "src/tools/clippy/clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/18c9baf4fef69cee58991bfc5f8be1d8c14ef979/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c9baf4fef69cee58991bfc5f8be1d8c14ef979/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=18c9baf4fef69cee58991bfc5f8be1d8c14ef979", "patch": "@@ -1,74 +0,0 @@\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_function_call, paths};\n-use rustc_ast::{BorrowKind, LitKind};\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-use rustc_span::Span;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `std::str::from_utf8_unchecked` with an invalid UTF-8 literal\n-    ///\n-    /// ### Why is this bad?\n-    /// Creating such a `str` would result in undefined behavior\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # #[allow(unused)]\n-    /// unsafe {\n-    ///     std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.64.0\"]\n-    pub INVALID_UTF8_IN_UNCHECKED,\n-    correctness,\n-    \"using a non UTF-8 literal in `std::std::from_utf8_unchecked`\"\n-}\n-declare_lint_pass!(InvalidUtf8InUnchecked => [INVALID_UTF8_IN_UNCHECKED]);\n-\n-impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n-            match &arg.kind {\n-                ExprKind::Lit(Spanned { node: lit, .. }) => {\n-                    if let LitKind::ByteStr(bytes, _) = &lit\n-                        && std::str::from_utf8(bytes).is_err()\n-                    {\n-                        lint(cx, expr.span);\n-                    }\n-                },\n-                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n-                    let elements = args.iter().map(|e|{\n-                        match &e.kind {\n-                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n-                                LitKind::Byte(b) => Some(*b),\n-                                #[allow(clippy::cast_possible_truncation)]\n-                                LitKind::Int(b, _) => Some(*b as u8),\n-                                _ => None\n-                            }\n-                            _ => None\n-                        }\n-                    }).collect::<Option<Vec<_>>>();\n-\n-                    if let Some(elements) = elements\n-                        && std::str::from_utf8(&elements).is_err()\n-                    {\n-                        lint(cx, expr.span);\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-}\n-\n-fn lint(cx: &LateContext<'_>, span: Span) {\n-    span_lint(\n-        cx,\n-        INVALID_UTF8_IN_UNCHECKED,\n-        span,\n-        \"non UTF-8 literal in `std::str::from_utf8_unchecked`\",\n-    );\n-}"}, {"sha": "fcca595c2bc4cb93ea5e66401a9c8a2c13c6da74", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -157,7 +157,6 @@ mod inline_fn_without_body;\n mod instant_subtraction;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n-mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod items_after_test_module;\n mod iter_not_returning_iterator;\n@@ -937,7 +936,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv())));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n-    store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n     store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv())));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));"}, {"sha": "7c2a100efdac6a4bba2e75cda46ed2416474d9a8", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -43,6 +43,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),\n+    (\"clippy::invalid_utf8_in_unchecked\", \"invalid_from_utf8_unchecked\"),\n     (\"clippy::let_underscore_drop\", \"let_underscore_drop\"),\n     (\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\"),\n     (\"clippy::panic_params\", \"non_fmt_panics\"),"}, {"sha": "3dc096d3197fbe5eba20a5ca73b5a65d72739c7b", "filename": "src/tools/clippy/tests/ui/invalid_utf8_in_unchecked.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18c9baf4fef69cee58991bfc5f8be1d8c14ef979/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c9baf4fef69cee58991bfc5f8be1d8c14ef979/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs?ref=18c9baf4fef69cee58991bfc5f8be1d8c14ef979", "patch": "@@ -1,20 +0,0 @@\n-#![warn(clippy::invalid_utf8_in_unchecked)]\n-\n-fn main() {\n-    // Valid\n-    unsafe {\n-        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n-        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n-        std::str::from_utf8_unchecked(b\"clippy\");\n-\n-        let x = 0xA0;\n-        std::str::from_utf8_unchecked(&[0xC0, x]);\n-    }\n-\n-    // Invalid\n-    unsafe {\n-        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n-        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n-        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n-    }\n-}"}, {"sha": "c89cd2758ee9fe407fb359ed45f6232082fd400b", "filename": "src/tools/clippy/tests/ui/invalid_utf8_in_unchecked.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/18c9baf4fef69cee58991bfc5f8be1d8c14ef979/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18c9baf4fef69cee58991bfc5f8be1d8c14ef979/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr?ref=18c9baf4fef69cee58991bfc5f8be1d8c14ef979", "patch": "@@ -1,22 +0,0 @@\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:16:9\n-   |\n-LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-utf8-in-unchecked` implied by `-D warnings`\n-\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:17:9\n-   |\n-LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'/x82', b'i', b'p', b'p', b'y']);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:18:9\n-   |\n-LL |         std::str::from_utf8_unchecked(b\"cl/x82ippy\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "53ac65473b827c4463b5102b801eb0a29e2ad6c0", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -38,6 +38,7 @@\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n+#![allow(invalid_from_utf8_unchecked)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -87,6 +88,7 @@\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]\n+#![warn(invalid_from_utf8_unchecked)]\n #![warn(let_underscore_drop)]\n #![warn(enum_intrinsics_non_enums)]\n #![warn(non_fmt_panics)]"}, {"sha": "722c0b3eb27508cbc2b602ba55b61ed89bcfe525", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -38,6 +38,7 @@\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n+#![allow(invalid_from_utf8_unchecked)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -87,6 +88,7 @@\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]\n+#![warn(clippy::invalid_utf8_in_unchecked)]\n #![warn(clippy::let_underscore_drop)]\n #![warn(clippy::mem_discriminant_non_enum)]\n #![warn(clippy::panic_params)]"}, {"sha": "1ff83917660235f1e9d4e3bf3cbd509196d1b52d", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -1,292 +1,298 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::drop_copy)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::drop_ref)]\n    |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::forget_ref)]\n    |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n+error: lint `clippy::invalid_utf8_in_unchecked` has been renamed to `invalid_from_utf8_unchecked`\n+  --> $DIR/rename.rs:91:9\n+   |\n+LL | #![warn(clippy::invalid_utf8_in_unchecked)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_from_utf8_unchecked`\n+\n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:95:9\n+  --> $DIR/rename.rs:97:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:96:9\n+  --> $DIR/rename.rs:98:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 49 previous errors\n "}, {"sha": "9c8c636812e0d8c727eaf67e01cea666075ce4b8", "filename": "tests/ui/lint/invalid_from_utf8.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -0,0 +1,93 @@\n+// check-pass\n+\n+#![feature(concat_bytes)]\n+#![warn(invalid_from_utf8_unchecked)]\n+#![warn(invalid_from_utf8)]\n+\n+pub fn from_utf8_unchecked_mut() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked_mut(&mut [99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'i', b'p', b'p', b'y']);\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked_mut(&mut [0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked_mut`\n+        std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked_mut`\n+    }\n+}\n+\n+pub fn from_utf8_unchecked() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+    }\n+}\n+\n+pub fn from_utf8_mut() {\n+    // Valid\n+    {\n+        std::str::from_utf8_mut(&mut [99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_mut(&mut [b'c', b'l', b'i', b'p', b'p', b'y']);\n+\n+        let x = 0xa0;\n+        std::str::from_utf8_mut(&mut [0xc0, x]);\n+    }\n+\n+    // Invalid\n+    {\n+        std::str::from_utf8_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_mut`\n+        std::str::from_utf8_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_mut`\n+    }\n+}\n+\n+pub fn from_utf8() {\n+    // Valid\n+    {\n+        std::str::from_utf8(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    {\n+        std::str::from_utf8(&[99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(b\"cl\\x82ippy\");\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+        //~^ WARN calls to `std::str::from_utf8`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8e00d3bf872f4c4b87ae70f0d35b4381a006b218", "filename": "tests/ui/lint/invalid_from_utf8.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -0,0 +1,110 @@\n+warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:19:9\n+   |\n+LL |         std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n+   |                                           |\n+   |                                           the literal was valid UTF-8 up to the 2 bytes\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_from_utf8.rs:4:9\n+   |\n+LL | #![warn(invalid_from_utf8_unchecked)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:21:9\n+   |\n+LL |         std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n+   |                                           |\n+   |                                           the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:39:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:41:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:43:9\n+   |\n+LL |         std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:45:9\n+   |\n+LL |         std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_mut` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:62:9\n+   |\n+LL |         std::str::from_utf8_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n+   |                                 |\n+   |                                 the literal was valid UTF-8 up to the 2 bytes\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_from_utf8.rs:5:9\n+   |\n+LL | #![warn(invalid_from_utf8)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::str::from_utf8_mut` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:64:9\n+   |\n+LL |         std::str::from_utf8_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n+   |                                 |\n+   |                                 the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:82:9\n+   |\n+LL |         std::str::from_utf8(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:84:9\n+   |\n+LL |         std::str::from_utf8(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:86:9\n+   |\n+LL |         std::str::from_utf8(b\"cl\\x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^-------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:88:9\n+   |\n+LL |         std::str::from_utf8(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^---------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: 12 warnings emitted\n+"}, {"sha": "7c2fc296bb0280d8f396996be7e859d9867b29ed", "filename": "tests/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/tests%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4006cc52d741b270e1da7b508dc6f87ae3e4de/tests%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=7a4006cc52d741b270e1da7b508dc6f87ae3e4de", "patch": "@@ -11,6 +11,8 @@\n #![feature(never_type)]\n #![feature(panic_always_abort)]\n \n+#![allow(invalid_from_utf8)]\n+\n extern crate libc;\n \n use std::alloc::{GlobalAlloc, Layout};"}]}