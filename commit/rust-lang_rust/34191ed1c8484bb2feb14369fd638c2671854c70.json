{"sha": "34191ed1c8484bb2feb14369fd638c2671854c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MTkxZWQxYzg0ODRiYjJmZWIxNDM2OWZkNjM4YzI2NzE4NTRjNzA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-12T13:38:39Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-16T03:55:53Z"}, "message": "Refactor MultiModifier expansion", "tree": {"sha": "09f3b6fe2b7dcb50f5d4f7d05ecc9dbbbc54b9ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f3b6fe2b7dcb50f5d4f7d05ecc9dbbbc54b9ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34191ed1c8484bb2feb14369fd638c2671854c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34191ed1c8484bb2feb14369fd638c2671854c70", "html_url": "https://github.com/rust-lang/rust/commit/34191ed1c8484bb2feb14369fd638c2671854c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34191ed1c8484bb2feb14369fd638c2671854c70/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba7b7c22d3e37572118f7afa394216ec9cd898b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba7b7c22d3e37572118f7afa394216ec9cd898b", "html_url": "https://github.com/rust-lang/rust/commit/6ba7b7c22d3e37572118f7afa394216ec9cd898b"}], "stats": {"total": 99, "additions": 34, "deletions": 65}, "files": [{"sha": "e7d7b0a6aef06401e4531324c55a8c2d8b45f77d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 34, "deletions": 65, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/34191ed1c8484bb2feb14369fd638c2671854c70/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34191ed1c8484bb2feb14369fd638c2671854c70/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=34191ed1c8484bb2feb14369fd638c2671854c70", "patch": "@@ -13,6 +13,7 @@ use ast::{Local, Ident, Mac_, Name, SpannedIdent};\n use ast::{MacStmtStyle, Mrk, Stmt, StmtKind, ItemKind};\n use ast::TokenTree;\n use ast;\n+use attr::HasAttrs;\n use ext::mtwt;\n use ext::build::AstBuilder;\n use attr;\n@@ -712,11 +713,7 @@ impl<'a> Folder for PatIdentRenamer<'a> {\n     }\n }\n \n-fn expand_annotatable(a: Annotatable,\n-                      fld: &mut MacroExpander)\n-                      -> SmallVector<Annotatable> {\n-    let a = expand_item_multi_modifier(a, fld);\n-\n+fn expand_multi_modified(a: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable> {\n     let new_items: SmallVector<Annotatable> = match a {\n         Annotatable::Item(it) => match it.node {\n             ast::ItemKind::Mac(..) => {\n@@ -795,29 +792,6 @@ fn decorate(a: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable>\n     new_items\n }\n \n-// Partition a set of attributes into one kind of attribute, and other kinds.\n-macro_rules! partition {\n-    ($fn_name: ident, $variant: ident) => {\n-        #[allow(deprecated)] // The `allow` is needed because the `Modifier` variant might be used.\n-        fn $fn_name(attrs: &[ast::Attribute],\n-                    fld: &MacroExpander)\n-                     -> (Vec<ast::Attribute>, Vec<ast::Attribute>) {\n-            attrs.iter().cloned().partition(|attr| {\n-                match fld.cx.syntax_env.find(intern(&attr.name())) {\n-                    Some(rc) => match *rc {\n-                        $variant(..) => true,\n-                        _ => false\n-                    },\n-                    _ => false\n-                }\n-            })\n-        }\n-    }\n-}\n-\n-partition!(multi_modifiers, MultiModifier);\n-\n-\n fn expand_decorators(a: Annotatable,\n                      fld: &mut MacroExpander,\n                      decorator_items: &mut SmallVector<Annotatable>,\n@@ -861,46 +835,41 @@ fn expand_decorators(a: Annotatable,\n     }\n }\n \n-fn expand_item_multi_modifier(mut it: Annotatable,\n-                              fld: &mut MacroExpander)\n-                              -> Annotatable {\n-    let (modifiers, other_attrs) = multi_modifiers(it.attrs(), fld);\n-\n-    // Update the attrs, leave everything else alone. Is this mutation really a good idea?\n-    it = it.fold_attrs(other_attrs);\n-\n-    if modifiers.is_empty() {\n-        return it\n-    }\n-\n-    for attr in &modifiers {\n-        let mname = intern(&attr.name());\n-\n-        match fld.cx.syntax_env.find(mname) {\n-            Some(rc) => match *rc {\n-                MultiModifier(ref mac) => {\n-                    attr::mark_used(attr);\n-                    fld.cx.bt_push(ExpnInfo {\n-                        call_site: attr.span,\n-                        callee: NameAndSpan {\n-                            format: MacroAttribute(mname),\n-                            span: Some(attr.span),\n-                            // attributes can do whatever they like,\n-                            // for now\n-                            allow_internal_unstable: true,\n-                        }\n-                    });\n-                    it = mac.expand(fld.cx, attr.span, &attr.node.value, it);\n-                    fld.cx.bt_pop();\n+fn expand_annotatable(mut item: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable> {\n+    let mut multi_modifier = None;\n+    item = item.map_attrs(|mut attrs| {\n+        for i in 0..attrs.len() {\n+            if let Some(extension) = fld.cx.syntax_env.find(intern(&attrs[i].name())) {\n+                if let MultiModifier(..) = *extension {\n+                    multi_modifier = Some((attrs.remove(i), extension));\n+                    break;\n                 }\n-                _ => unreachable!()\n-            },\n-            _ => unreachable!()\n+            }\n         }\n-    }\n+        attrs\n+    });\n \n-    // Expansion may have added new ItemKind::Modifiers.\n-    expand_item_multi_modifier(it, fld)\n+    match multi_modifier {\n+        None => expand_multi_modified(item, fld),\n+        Some((attr, extension)) => match *extension {\n+            MultiModifier(ref mac) => {\n+                attr::mark_used(&attr);\n+                fld.cx.bt_push(ExpnInfo {\n+                    call_site: attr.span,\n+                    callee: NameAndSpan {\n+                        format: MacroAttribute(intern(&attr.name())),\n+                        span: Some(attr.span),\n+                        // attributes can do whatever they like, for now\n+                        allow_internal_unstable: true,\n+                    }\n+                });\n+                let modified = mac.expand(fld.cx, attr.span, &attr.node.value, item);\n+                fld.cx.bt_pop();\n+                expand_annotatable(modified, fld)\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n }\n \n fn expand_impl_item(ii: ast::ImplItem, fld: &mut MacroExpander)"}]}