{"sha": "8756ed20b28d87d63378f08790b82d69490e6eb6", "node_id": "C_kwDOAAsO6NoAKDg3NTZlZDIwYjI4ZDg3ZDYzMzc4ZjA4NzkwYjgyZDY5NDkwZTZlYjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T04:32:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T04:32:33Z"}, "message": "Auto merge of #94834 - Dylan-DPC:rollup-sza4qc2, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93293 (Implement `MIN`/`MAX` constants for non-zero integers)\n - #94356 (Rename unix::net::SocketAddr::from_path to from_pathname and stabilize it)\n - #94765 (Rename is_{some,ok,err}_with to is_{some,ok,err}_and.)\n - #94819 (configure: don't serialize empty array elements)\n - #94826 (Improve doc wording for retain on some collections)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1d91764733210b7f20d19e8bacd52240a2081e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d91764733210b7f20d19e8bacd52240a2081e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8756ed20b28d87d63378f08790b82d69490e6eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8756ed20b28d87d63378f08790b82d69490e6eb6", "html_url": "https://github.com/rust-lang/rust/commit/8756ed20b28d87d63378f08790b82d69490e6eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8756ed20b28d87d63378f08790b82d69490e6eb6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a43b8d3917d15b30b7d99021540cf7831f4182", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a43b8d3917d15b30b7d99021540cf7831f4182", "html_url": "https://github.com/rust-lang/rust/commit/c5a43b8d3917d15b30b7d99021540cf7831f4182"}, {"sha": "f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "html_url": "https://github.com/rust-lang/rust/commit/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f"}], "stats": {"total": 161, "additions": 132, "deletions": 29}, "files": [{"sha": "e6c3d38dab3a29603ba1e54c30f9e72c0e7d1f0c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -779,7 +779,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns\n+    /// In other words, remove all elements `e` for which `f(&e)` returns\n     /// `false`. The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "d0ff3eb747598a86ce4029223935d1f9b937b14e", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -963,7 +963,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\n     /// The elements are visited in ascending key order.\n     ///\n     /// # Examples"}, {"sha": "d6733425288d4d50091f07f8c62991f38f26d516", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -873,7 +873,7 @@ impl<T> BTreeSet<T> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// The elements are visited in ascending order.\n     ///\n     /// # Examples"}, {"sha": "c3cabc754e6a8069c4846121c39650317ffb3eb6", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -2119,7 +2119,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns false.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///\n@@ -2158,7 +2158,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns false.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///"}, {"sha": "5131168db0c82bb972889c2dc630fd5bf3405786", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -1424,7 +1424,7 @@ impl<T, A: Allocator> Vec<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///"}, {"sha": "5bdd78aa2dea4d9808041546c80d7786750b6eb8", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -989,3 +989,104 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n }\n \n nonzero_unsigned_is_power_of_two! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize }\n+\n+macro_rules! nonzero_min_max_unsigned {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The smallest value that can be represented by this non-zero\n+                /// integer type, 1.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), 1\", stringify!($Int), \");\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MIN: Self = Self::new(1).unwrap();\n+\n+                /// The largest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MAX`].\")]\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n+            }\n+        )+\n+    }\n+}\n+\n+macro_rules! nonzero_min_max_signed {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The smallest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MIN`].\")]\n+                ///\n+                /// Note: While most integer types are defined for every whole\n+                /// number between `MIN` and `MAX`, signed non-zero integers are\n+                /// a special case. They have a \"gap\" at 0.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), \", stringify!($Int), \"::MIN);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MIN: Self = Self::new(<$Int>::MIN).unwrap();\n+\n+                /// The largest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MAX`].\")]\n+                ///\n+                /// Note: While most integer types are defined for every whole\n+                /// number between `MIN` and `MAX`, signed non-zero integers are\n+                /// a special case. They have a \"gap\" at 0.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_min_max_unsigned! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+}\n+\n+nonzero_min_max_signed! {\n+    NonZeroI8(i8);\n+    NonZeroI16(i16);\n+    NonZeroI32(i32);\n+    NonZeroI64(i64);\n+    NonZeroI128(i128);\n+    NonZeroIsize(isize);\n+}"}, {"sha": "de1628f83ade8adbbfa26327b7be9d6b8da3dd4f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -551,26 +551,26 @@ impl<T> Option<T> {\n         matches!(*self, Some(_))\n     }\n \n-    /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.\n+    /// Returns `true` if the option is a [`Some`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(is_some_with)]\n     ///\n     /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), true);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), true);\n     ///\n     /// let x: Option<u32> = Some(0);\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n     ///\n     /// let x: Option<u32> = None;\n-    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_some_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+    pub fn is_some_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n         matches!(self, Some(x) if f(x))\n     }\n "}, {"sha": "9a243cbc3a2a0a1311a8336ed52782cc09d3f770", "filename": "library/core/src/result.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -542,26 +542,26 @@ impl<T, E> Result<T, E> {\n         matches!(*self, Ok(_))\n     }\n \n-    /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.\n+    /// Returns `true` if the result is [`Ok`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(is_some_with)]\n     ///\n     /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), true);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), true);\n     ///\n     /// let x: Result<u32, &str> = Ok(0);\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n     ///\n     /// let x: Result<u32, &str> = Err(\"hey\");\n-    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_ok_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+    pub fn is_ok_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n         matches!(self, Ok(x) if f(x))\n     }\n \n@@ -586,7 +586,7 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n-    /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.\n+    /// Returns `true` if the result is [`Err`] and the value inside of it matches a predicate.\n     ///\n     /// # Examples\n     ///\n@@ -595,18 +595,18 @@ impl<T, E> Result<T, E> {\n     /// use std::io::{Error, ErrorKind};\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, \"!\"));\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), true);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), true);\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::PermissionDenied, \"!\"));\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n     ///\n     /// let x: Result<u32, Error> = Ok(123);\n-    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n     /// ```\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_err_with(&self, f: impl FnOnce(&E) -> bool) -> bool {\n+    pub fn is_err_and(&self, f: impl FnOnce(&E) -> bool) -> bool {\n         matches!(self, Err(x) if f(x))\n     }\n "}, {"sha": "6b63191eb583d7602ec0455a4c5fb46e5813830c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -621,7 +621,7 @@ impl<K, V, S> HashMap<K, V, S> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\n     /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "fa471a3c3f323df88416f1f411a6bfe3ea844406", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -300,7 +300,7 @@ impl<T, S> HashSet<T, S> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "a3ef4b2d92cc46213fe769f279ec98e1d7ad1c30", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -140,12 +140,11 @@ impl SocketAddr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(unix_socket_creation)]\n     /// use std::os::unix::net::SocketAddr;\n     /// use std::path::Path;\n     ///\n     /// # fn main() -> std::io::Result<()> {\n-    /// let address = SocketAddr::from_path(\"/path/to/socket\")?;\n+    /// let address = SocketAddr::from_pathname(\"/path/to/socket\")?;\n     /// assert_eq!(address.as_pathname(), Some(Path::new(\"/path/to/socket\")));\n     /// # Ok(())\n     /// # }\n@@ -154,13 +153,12 @@ impl SocketAddr {\n     /// Creating a `SocketAddr` with a NULL byte results in an error.\n     ///\n     /// ```\n-    /// #![feature(unix_socket_creation)]\n     /// use std::os::unix::net::SocketAddr;\n     ///\n-    /// assert!(SocketAddr::from_path(\"/path/with/\\0/bytes\").is_err());\n+    /// assert!(SocketAddr::from_pathname(\"/path/with/\\0/bytes\").is_err());\n     /// ```\n-    #[unstable(feature = \"unix_socket_creation\", issue = \"93423\")]\n-    pub fn from_path<P>(path: P) -> io::Result<SocketAddr>\n+    #[stable(feature = \"unix_socket_creation\", since = \"1.61.0\")]\n+    pub fn from_pathname<P>(path: P) -> io::Result<SocketAddr>\n     where\n         P: AsRef<Path>,\n     {"}, {"sha": "87a130a09827dfbf2c988b8aa53a41983337e369", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8756ed20b28d87d63378f08790b82d69490e6eb6/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/8756ed20b28d87d63378f08790b82d69490e6eb6/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=8756ed20b28d87d63378f08790b82d69490e6eb6", "patch": "@@ -279,6 +279,10 @@ def build():\n \n \n def set(key, value):\n+    if isinstance(value, list):\n+        # Remove empty values, which value.split(',') tends to generate.\n+        value = [v for v in value if v]\n+\n     s = \"{:20} := {}\".format(key, value)\n     if len(s) < 70:\n         p(s)"}]}