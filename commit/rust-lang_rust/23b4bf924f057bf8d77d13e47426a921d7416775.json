{"sha": "23b4bf924f057bf8d77d13e47426a921d7416775", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjRiZjkyNGYwNTdiZjhkNzdkMTNlNDc0MjZhOTIxZDc0MTY3NzU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-24T17:26:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-24T17:26:27Z"}, "message": "Rollup merge of #49089 - alexcrichton:fix-timings, r=Mark-Simulacrum\n\nrustbuild: Tweak where timing information goes\n\nThis commit tweaks where timing and step information is printed out as part of\nthe build, ensuring that we do it as close to the location where work happens as\npossible. In rustbuild various functions may perform long blocking work as\ndependencies are assembled, so if we print out timing information early on we\nmay accidentally time more than just the step we were intending to time!", "tree": {"sha": "43969a5155b88354ec04de916364cfdf6fee4d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43969a5155b88354ec04de916364cfdf6fee4d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b4bf924f057bf8d77d13e47426a921d7416775", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatopDCRBK7hj4Ov3rIwAAdHIIAJidR4F7f9KEZ5bVAIRAmW3W\nvoJS8NgwqXLIIs4IfdmTT+BuomNUxVnX48ZIbDP5s41niPz5+FIqehtFfDq2rMUr\nogjgb+xViEAjMlP6GTqfkJNiq0tnZ7XsKDWf1KrCf7vDB21bg5GWhaYt/CSmUysv\nOtVHXCbxjKZbQzhKKvYrlL2JpcvIMblVNmoCV9EiRybSyBnaaWdWqkV7AUaLjFXx\nPD3zSaqGtbM4/DTurbtfn8cSIt4FSBXdFxAODT+LyAn8VSaZS42F+J0oJerMk3E7\n8BgMbIcs7b+Tx44cFOY5CV7xJTrbBAXLujPs2GUR431nwWwtl1NbAL1cXx6p8zc=\n=Yuh5\n-----END PGP SIGNATURE-----\n", "payload": "tree 43969a5155b88354ec04de916364cfdf6fee4d08\nparent 17d39ed8d5c6de445d15d0537589eb284686a8d4\nparent 6fd4d67819a6eb8273768b6c3789ca70582cd703\nauthor kennytm <kennytm@gmail.com> 1521912387 +0800\ncommitter GitHub <noreply@github.com> 1521912387 +0800\n\nRollup merge of #49089 - alexcrichton:fix-timings, r=Mark-Simulacrum\n\nrustbuild: Tweak where timing information goes\n\nThis commit tweaks where timing and step information is printed out as part of\nthe build, ensuring that we do it as close to the location where work happens as\npossible. In rustbuild various functions may perform long blocking work as\ndependencies are assembled, so if we print out timing information early on we\nmay accidentally time more than just the step we were intending to time!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b4bf924f057bf8d77d13e47426a921d7416775", "html_url": "https://github.com/rust-lang/rust/commit/23b4bf924f057bf8d77d13e47426a921d7416775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b4bf924f057bf8d77d13e47426a921d7416775/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d39ed8d5c6de445d15d0537589eb284686a8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d39ed8d5c6de445d15d0537589eb284686a8d4", "html_url": "https://github.com/rust-lang/rust/commit/17d39ed8d5c6de445d15d0537589eb284686a8d4"}, {"sha": "6fd4d67819a6eb8273768b6c3789ca70582cd703", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd4d67819a6eb8273768b6c3789ca70582cd703", "html_url": "https://github.com/rust-lang/rust/commit/6fd4d67819a6eb8273768b6c3789ca70582cd703"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "a9dccea827b6e17434dc0e02b2583b099c903e49", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=23b4bf924f057bf8d77d13e47426a921d7416775", "patch": "@@ -40,17 +40,18 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, build.build);\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n-        println!(\"Checking std artifacts ({} -> {})\", &compiler.host, target);\n-\n         let out_dir = build.stage_out(compiler, Mode::Libstd);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n+        println!(\"Checking std artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(build,\n                   &mut cargo,\n                   &libstd_stamp(build, compiler, target),\n                   true);\n+\n         let libdir = builder.sysroot_libdir(compiler, target);\n         add_to_sysroot(&libdir, &libstd_stamp(build, compiler, target));\n     }\n@@ -86,19 +87,20 @@ impl Step for Rustc {\n         let compiler = builder.compiler(0, build.build);\n         let target = self.target;\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n-        println!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target);\n-\n         let stage_out = builder.stage_out(compiler, Mode::Librustc);\n         build.clear_if_dirty(&stage_out, &libstd_stamp(build, compiler, target));\n         build.clear_if_dirty(&stage_out, &libtest_stamp(build, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n         rustc_cargo(build, &mut cargo);\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n+        println!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(build,\n                   &mut cargo,\n                   &librustc_stamp(build, compiler, target),\n                   true);\n+\n         let libdir = builder.sysroot_libdir(compiler, target);\n         add_to_sysroot(&libdir, &librustc_stamp(build, compiler, target));\n     }\n@@ -128,16 +130,18 @@ impl Step for Test {\n         let target = self.target;\n         let compiler = builder.compiler(0, build.build);\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n-        println!(\"Checking test artifacts ({} -> {})\", &compiler.host, target);\n         let out_dir = build.stage_out(compiler, Mode::Libtest);\n         build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"check\");\n         test_cargo(build, &compiler, target, &mut cargo);\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n+        println!(\"Checking test artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(build,\n                   &mut cargo,\n                   &libtest_stamp(build, compiler, target),\n                   true);\n+\n         let libdir = builder.sysroot_libdir(compiler, target);\n         add_to_sysroot(&libdir, &libtest_stamp(build, compiler, target));\n     }"}, {"sha": "fafa446338189084c0cee7b14a102a6ac756c4cf", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=23b4bf924f057bf8d77d13e47426a921d7416775", "patch": "@@ -93,10 +93,6 @@ impl Step for Std {\n             return;\n         }\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n-        println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n-                &compiler.host, target);\n-\n         if target.contains(\"musl\") {\n             let libdir = builder.sysroot_libdir(compiler, target);\n             copy_musl_third_party_objects(build, target, &libdir);\n@@ -106,6 +102,10 @@ impl Step for Std {\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n+        println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n+                &compiler.host, target);\n         run_cargo(build,\n                   &mut cargo,\n                   &libstd_stamp(build, compiler, target),\n@@ -360,13 +360,14 @@ impl Step for Test {\n             return;\n         }\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n-        println!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n-                &compiler.host, target);\n         let out_dir = build.stage_out(compiler, Mode::Libtest);\n         build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"build\");\n         test_cargo(build, &compiler, target, &mut cargo);\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n+        println!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n+                &compiler.host, target);\n         run_cargo(build,\n                   &mut cargo,\n                   &libtest_stamp(build, compiler, target),\n@@ -482,16 +483,16 @@ impl Step for Rustc {\n             target: build.build,\n         });\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n-        println!(\"Building stage{} compiler artifacts ({} -> {})\",\n-                 compiler.stage, &compiler.host, target);\n-\n         let stage_out = builder.stage_out(compiler, Mode::Librustc);\n         build.clear_if_dirty(&stage_out, &libstd_stamp(build, compiler, target));\n         build.clear_if_dirty(&stage_out, &libtest_stamp(build, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n         rustc_cargo(build, &mut cargo);\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n+        println!(\"Building stage{} compiler artifacts ({} -> {})\",\n+                 compiler.stage, &compiler.host, target);\n         run_cargo(build,\n                   &mut cargo,\n                   &librustc_stamp(build, compiler, target),\n@@ -634,8 +635,6 @@ impl Step for CodegenBackend {\n             .arg(build.src.join(\"src/librustc_trans/Cargo.toml\"));\n         rustc_cargo_env(build, &mut cargo);\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n-\n         match &*self.backend {\n             \"llvm\" | \"emscripten\" => {\n                 // Build LLVM for our target. This will implicitly build the\n@@ -685,6 +684,8 @@ impl Step for CodegenBackend {\n \n         let tmp_stamp = build.cargo_out(compiler, Mode::Librustc, target)\n             .join(\".tmp.stamp\");\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n         let files = run_cargo(build,\n                               cargo.arg(\"--features\").arg(features),\n                               &tmp_stamp,"}, {"sha": "76f1a4efbf014f3d240d33c58007dd81a3626672", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=23b4bf924f057bf8d77d13e47426a921d7416775", "patch": "@@ -530,8 +530,6 @@ impl Step for Tidy {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n \n-        let _folder = build.fold_output(|| \"tidy\");\n-        println!(\"tidy check\");\n         let mut cmd = builder.tool_cmd(Tool::Tidy);\n         cmd.arg(build.src.join(\"src\"));\n         cmd.arg(&build.initial_cargo);\n@@ -541,6 +539,9 @@ impl Step for Tidy {\n         if build.config.quiet_tests {\n             cmd.arg(\"--quiet\");\n         }\n+\n+        let _folder = build.fold_output(|| \"tidy\");\n+        println!(\"tidy check\");\n         try_run(build, &mut cmd);\n     }\n \n@@ -841,9 +842,6 @@ impl Step for Compiletest {\n         builder.ensure(native::TestHelpers { target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n-        let _folder = build.fold_output(|| format!(\"test_{}\", suite));\n-        println!(\"Check compiletest suite={} mode={} ({} -> {})\",\n-                 suite, mode, &compiler.host, target);\n         let mut cmd = builder.tool_cmd(Tool::Compiletest);\n \n         // compiletest currently has... a lot of arguments, so let's just pass all\n@@ -1003,6 +1001,9 @@ impl Step for Compiletest {\n \n         build.ci_env.force_coloring_in_ci(&mut cmd);\n \n+        let _folder = build.fold_output(|| format!(\"test_{}\", suite));\n+        println!(\"Check compiletest suite={} mode={} ({} -> {})\",\n+                 suite, mode, &compiler.host, target);\n         let _time = util::timeit();\n         try_run(build, &mut cmd);\n     }\n@@ -1147,20 +1148,21 @@ impl Step for ErrorIndex {\n \n         builder.ensure(compile::Std { compiler, target: compiler.host });\n \n-        let _folder = build.fold_output(|| \"test_error_index\");\n-        println!(\"Testing error-index stage{}\", compiler.stage);\n-\n         let dir = testdir(build, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let _time = util::timeit();\n-        build.run(builder.tool_cmd(Tool::ErrorIndex)\n-                    .arg(\"markdown\")\n-                    .arg(&output)\n-                    .env(\"CFG_BUILD\", &build.build)\n-                    .env(\"RUSTC_ERROR_METADATA_DST\", build.extended_error_dir()));\n+        let mut tool = builder.tool_cmd(Tool::ErrorIndex);\n+        tool.arg(\"markdown\")\n+            .arg(&output)\n+            .env(\"CFG_BUILD\", &build.build)\n+            .env(\"RUSTC_ERROR_METADATA_DST\", build.extended_error_dir());\n+\n \n+        let _folder = build.fold_output(|| \"test_error_index\");\n+        println!(\"Testing error-index stage{}\", compiler.stage);\n+        let _time = util::timeit();\n+        build.run(&mut tool);\n         markdown_test(builder, compiler, &output);\n     }\n }\n@@ -1405,11 +1407,6 @@ impl Step for Crate {\n             }\n             _ => panic!(\"can only test libraries\"),\n         };\n-        let _folder = build.fold_output(|| {\n-            format!(\"{}_stage{}-{}\", test_kind.subcommand(), compiler.stage, krate)\n-        });\n-        println!(\"{} {} stage{} ({} -> {})\", test_kind, krate, compiler.stage,\n-                &compiler.host, target);\n \n         // Build up the base `cargo test` command.\n         //\n@@ -1441,8 +1438,6 @@ impl Step for Crate {\n             cargo.arg(\"--quiet\");\n         }\n \n-        let _time = util::timeit();\n-\n         if target.contains(\"emscripten\") {\n             cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)),\n                       build.config.nodejs.as_ref().expect(\"nodejs not configured\"));\n@@ -1470,6 +1465,13 @@ impl Step for Crate {\n                       format!(\"{} run\",\n                               builder.tool_exe(Tool::RemoteTestClient).display()));\n         }\n+\n+        let _folder = build.fold_output(|| {\n+            format!(\"{}_stage{}-{}\", test_kind.subcommand(), compiler.stage, krate)\n+        });\n+        println!(\"{} {} stage{} ({} -> {})\", test_kind, krate, compiler.stage,\n+                &compiler.host, target);\n+        let _time = util::timeit();\n         try_run(build, &mut cargo);\n     }\n }\n@@ -1518,12 +1520,6 @@ impl Step for CrateRustdoc {\n                                                  target,\n                                                  test_kind.subcommand(),\n                                                  \"src/tools/rustdoc\");\n-        let _folder = build.fold_output(|| {\n-            format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage)\n-        });\n-        println!(\"{} rustdoc stage{} ({} -> {})\", test_kind, compiler.stage,\n-                &compiler.host, target);\n-\n         if test_kind.subcommand() == \"test\" && !build.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n@@ -1537,6 +1533,11 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"--quiet\");\n         }\n \n+        let _folder = build.fold_output(|| {\n+            format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage)\n+        });\n+        println!(\"{} rustdoc stage{} ({} -> {})\", test_kind, compiler.stage,\n+                &compiler.host, target);\n         let _time = util::timeit();\n \n         try_run(build, &mut cargo);"}, {"sha": "d308cecb2752144e4bf8fc8872595c7c23ef3498", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4bf924f057bf8d77d13e47426a921d7416775/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=23b4bf924f057bf8d77d13e47426a921d7416775", "patch": "@@ -112,11 +112,11 @@ impl Step for ToolBuild {\n             Mode::Tool => panic!(\"unexpected Mode::Tool for tool build\")\n         }\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n-        println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n-\n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n+        println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n         let is_expected = build.try_run(&mut cargo);\n         build.save_toolstate(tool, if is_expected {\n             ToolState::TestFail\n@@ -339,9 +339,6 @@ impl Step for Rustdoc {\n \n         builder.ensure(compile::Rustc { compiler: build_compiler, target });\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n-        println!(\"Building rustdoc for stage{} ({})\", target_compiler.stage, target_compiler.host);\n-\n         let mut cargo = prepare_tool_cargo(builder,\n                                            build_compiler,\n                                            target,\n@@ -352,7 +349,10 @@ impl Step for Rustdoc {\n         cargo.env(\"RUSTC_DEBUGINFO\", builder.config.rust_debuginfo.to_string())\n              .env(\"RUSTC_DEBUGINFO_LINES\", builder.config.rust_debuginfo_lines.to_string());\n \n+        let _folder = build.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n+        println!(\"Building rustdoc for stage{} ({})\", target_compiler.stage, target_compiler.host);\n         build.run(&mut cargo);\n+\n         // Cargo adds a number of paths to the dylib search path on windows, which results in\n         // the wrong rustdoc being executed. To avoid the conflicting rustdocs, we name the \"tool\"\n         // rustdoc a different name."}]}