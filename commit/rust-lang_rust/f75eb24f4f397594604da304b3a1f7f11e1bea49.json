{"sha": "f75eb24f4f397594604da304b3a1f7f11e1bea49", "node_id": "C_kwDOAAsO6NoAKGY3NWViMjRmNGYzOTc1OTQ2MDRkYTMwNGIzYTFmN2YxMWUxYmVhNDk", "commit": {"author": {"name": "bowlerman", "email": "oskar@goldhahn.info", "date": "2023-01-06T01:29:37Z"}, "committer": {"name": "bowlerman", "email": "oskar@goldhahn.info", "date": "2023-01-10T02:04:28Z"}, "message": "remove E0280 and ICE instead", "tree": {"sha": "5745663a3a4c7fc783e737b78254008cb8ed2a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5745663a3a4c7fc783e737b78254008cb8ed2a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f75eb24f4f397594604da304b3a1f7f11e1bea49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f75eb24f4f397594604da304b3a1f7f11e1bea49", "html_url": "https://github.com/rust-lang/rust/commit/f75eb24f4f397594604da304b3a1f7f11e1bea49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f75eb24f4f397594604da304b3a1f7f11e1bea49/comments", "author": {"login": "oskgo", "id": 92018610, "node_id": "U_kgDOBXwXsg", "avatar_url": "https://avatars.githubusercontent.com/u/92018610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oskgo", "html_url": "https://github.com/oskgo", "followers_url": "https://api.github.com/users/oskgo/followers", "following_url": "https://api.github.com/users/oskgo/following{/other_user}", "gists_url": "https://api.github.com/users/oskgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/oskgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oskgo/subscriptions", "organizations_url": "https://api.github.com/users/oskgo/orgs", "repos_url": "https://api.github.com/users/oskgo/repos", "events_url": "https://api.github.com/users/oskgo/events{/privacy}", "received_events_url": "https://api.github.com/users/oskgo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oskgo", "id": 92018610, "node_id": "U_kgDOBXwXsg", "avatar_url": "https://avatars.githubusercontent.com/u/92018610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oskgo", "html_url": "https://github.com/oskgo", "followers_url": "https://api.github.com/users/oskgo/followers", "following_url": "https://api.github.com/users/oskgo/following{/other_user}", "gists_url": "https://api.github.com/users/oskgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/oskgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oskgo/subscriptions", "organizations_url": "https://api.github.com/users/oskgo/orgs", "repos_url": "https://api.github.com/users/oskgo/repos", "events_url": "https://api.github.com/users/oskgo/events{/privacy}", "received_events_url": "https://api.github.com/users/oskgo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3254bef9a79bd762b8cece2078abe168cb29ccb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3254bef9a79bd762b8cece2078abe168cb29ccb1", "html_url": "https://github.com/rust-lang/rust/commit/3254bef9a79bd762b8cece2078abe168cb29ccb1"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "a132a8146e9bd9a13de3b9b26a2b97ffc16e0a29", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f75eb24f4f397594604da304b3a1f7f11e1bea49/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75eb24f4f397594604da304b3a1f7f11e1bea49/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=f75eb24f4f397594604da304b3a1f7f11e1bea49", "patch": "@@ -574,7 +574,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0274, // on_unimplemented #2\n //  E0278, // requirement is not satisfied\n //  E0279,\n-    E0280, // requirement is not satisfied\n+//  E0280, // changed to ICE\n //  E0285, // overflow evaluation builtin bounds\n //  E0296, // replaced with a generic attribute input check\n //  E0298, // cannot compare constants"}, {"sha": "5f06c4d82828ec8e392b23e177b11ec38fa7c88b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f75eb24f4f397594604da304b3a1f7f11e1bea49/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75eb24f4f397594604da304b3a1f7f11e1bea49/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f75eb24f4f397594604da304b3a1f7f11e1bea49", "patch": "@@ -1102,15 +1102,19 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-                    | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => {\n-                        let predicate = self.resolve_vars_if_possible(obligation.predicate);\n-                        struct_span_err!(\n-                            self.tcx.sess,\n+                        span_bug!(\n                             span,\n-                            E0280,\n-                            \"the requirement `{}` is not satisfied\",\n-                            predicate\n+                            \"outlives clauses should not error outside borrowck. obligation: `{:?}`\",\n+                            obligation\n+                        )\n+                    }\n+\n+                    ty::PredicateKind::Clause(ty::Clause::Projection(..)) => {\n+                        span_bug!(\n+                            span,\n+                            \"projection clauses should be implied from elsewhere. obligation: `{:?}`\",\n+                            obligation\n                         )\n                     }\n "}, {"sha": "86ce42631b4324110414f06909e70cf62145d9a8", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f75eb24f4f397594604da304b3a1f7f11e1bea49/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75eb24f4f397594604da304b3a1f7f11e1bea49/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=f75eb24f4f397594604da304b3a1f7f11e1bea49", "patch": "@@ -1,6 +1,13 @@\n // check-fail\n-// known-bug: unknown\n-// compile-flags: -Z trait-solver=chalk --edition=2021\n+// known-bug\n+// unset-rustc-env:RUST_BACKTRACE\n+// compile-flags:-Z trait-solver=chalk --edition=2021\n+// error-pattern:stack backtrace:\n+// failure-status:101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+// normalize-stderr-test \"DefId([^)]*)\" -> \"...\"\n \n fn main() -> () {}\n "}, {"sha": "7e2466dece43899fefba5b1f7384bd09ffeb11bb", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f75eb24f4f397594604da304b3a1f7f11e1bea49/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f75eb24f4f397594604da304b3a1f7f11e1bea49/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=f75eb24f4f397594604da304b3a1f7f11e1bea49", "patch": "@@ -1,48 +1,40 @@\n-error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-  --> $DIR/async.rs:7:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________-\n-LL | |     x\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_`[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-   |   required by a bound introduced by this call\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n-   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output` cannot be known at compilation time\n-  --> $DIR/async.rs:7:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________^\n-LL | |     x\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output`\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-  --> $DIR/async.rs:7:25\n-   |\n+error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n+LL |LL | |LL | | }\n+\n+\n+error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:14:29: 16:2] as Future>::Output` cannot be known at compilation time\n+LL |LL | |LL | | }\n+\n+\n+error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^ `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n-   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n-\n-error[E0280]: the requirement `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output == u32` is not satisfied\n-  --> $DIR/async.rs:7:25\n-   |\n+\n+error: internal compiler error: compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:1114:25: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:14:29: 16:2]], def_id: ...), _use_mk_alias_ty_instead: () }, Term::Ty(u32)), []), depth=0)`\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^\n \n+\n+stack backtrace:\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+query stack during panic:\n+#0 [typeck] type-checking `foo`\n+#1 [thir_body] building THIR for `foo`\n+#2 [mir_built] building MIR for `foo`\n+#3 [unsafety_check_result] unsafety-checking `foo`\n+#4 [mir_const] preparing `foo` for borrow checking\n+#5 [mir_promoted] processing MIR for `foo`\n+#6 [mir_borrowck] borrow-checking `foo`\n+#7 [type_of] computing type of `foo::{opaque#0}`\n+#8 [check_mod_item_types] checking item types in top-level module\n+#9 [analysis] running analysis passes on this crate\n+end of query stack\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}