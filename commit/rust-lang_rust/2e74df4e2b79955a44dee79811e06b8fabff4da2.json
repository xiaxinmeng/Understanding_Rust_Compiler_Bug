{"sha": "2e74df4e2b79955a44dee79811e06b8fabff4da2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNzRkZjRlMmI3OTk1NWE0NGRlZTc5ODExZTA2YjhmYWJmZjRkYTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T08:28:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T08:28:58Z"}, "message": "Cleanup", "tree": {"sha": "39f82e22486c8ed3c35485f36f537531342d4762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f82e22486c8ed3c35485f36f537531342d4762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e74df4e2b79955a44dee79811e06b8fabff4da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e74df4e2b79955a44dee79811e06b8fabff4da2", "html_url": "https://github.com/rust-lang/rust/commit/2e74df4e2b79955a44dee79811e06b8fabff4da2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e74df4e2b79955a44dee79811e06b8fabff4da2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a5ca9a843aa807b8152d4c5631be605fc80e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a5ca9a843aa807b8152d4c5631be605fc80e80", "html_url": "https://github.com/rust-lang/rust/commit/36a5ca9a843aa807b8152d4c5631be605fc80e80"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "ae8237c5de21f7eb1b398343b90b6f8be6aca716", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e74df4e2b79955a44dee79811e06b8fabff4da2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e74df4e2b79955a44dee79811e06b8fabff4da2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=2e74df4e2b79955a44dee79811e06b8fabff4da2", "patch": "@@ -19,23 +19,21 @@ use crate::{AssistContext, AssistId, Assists};\n // fn foo() -> Result<i32, > { Ok(42i32) }\n // ```\n pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let fn_def = ctx.find_node_at_offset::<ast::FnDef>()?;\n-    let ret_type = &fn_def.ret_type()?.type_ref()?;\n-    if ret_type.syntax().text().to_string().starts_with(\"Result<\") {\n+    let ret_type = ctx.find_node_at_offset::<ast::RetType>()?;\n+    // FIXME: extend to lambdas as well\n+    let fn_def = ret_type.syntax().parent().and_then(ast::FnDef::cast)?;\n+\n+    let type_ref = &ret_type.type_ref()?;\n+    if type_ref.syntax().text().to_string().starts_with(\"Result<\") {\n         return None;\n     }\n \n     let block_expr = &fn_def.body()?;\n-    let cursor_in_ret_type =\n-        fn_def.ret_type()?.syntax().text_range().contains_range(ctx.frange.range);\n-    if !cursor_in_ret_type {\n-        return None;\n-    }\n \n     acc.add(\n         AssistId(\"change_return_type_to_result\"),\n         \"Change return type to Result\",\n-        ret_type.syntax().text_range(),\n+        type_ref.syntax().text_range(),\n         |edit| {\n             let mut tail_return_expr_collector = TailReturnCollector::new();\n             tail_return_expr_collector.collect_jump_exprs(block_expr, false);\n@@ -44,10 +42,10 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n             for ret_expr_arg in tail_return_expr_collector.exprs_to_wrap {\n                 edit.replace_node_and_indent(&ret_expr_arg, format!(\"Ok({})\", ret_expr_arg));\n             }\n-            edit.replace_node_and_indent(ret_type.syntax(), format!(\"Result<{}, >\", ret_type));\n+            edit.replace_node_and_indent(type_ref.syntax(), format!(\"Result<{}, >\", type_ref));\n \n-            if let Some(node_start) = result_insertion_offset(&ret_type) {\n-                edit.set_cursor(node_start + TextSize::of(&format!(\"Result<{}, \", ret_type)));\n+            if let Some(node_start) = result_insertion_offset(&type_ref) {\n+                edit.set_cursor(node_start + TextSize::of(&format!(\"Result<{}, \", type_ref)));\n             }\n         },\n     )"}]}