{"sha": "2427fee7f011d45aa898d26290e68b6456a0384c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MjdmZWU3ZjAxMWQ0NWFhODk4ZDI2MjkwZTY4YjY0NTZhMDM4NGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T08:56:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T08:56:55Z"}, "message": "Merge branch 'master' into miri-build", "tree": {"sha": "36ba0bca7784bec065a7dce929d41348ecfdb0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36ba0bca7784bec065a7dce929d41348ecfdb0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2427fee7f011d45aa898d26290e68b6456a0384c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7klXCRBK7hj4Ov3rIwAAdHIIAAROOeEyS3y7RBtcfs/f3TXg\nFWuxlUTAHBybR70SvS8z5JkcBOc5xCHY80V9373HuM9cI8eruhgxehPdBwZpiVJ+\nKGrOwkeXASVU9Pen+Ta2mSQYsB/jygOnCibUAFmaxyVHUyswTO2Cq+g+wMgZO+9V\ngHkmLYImZ0Rz4uXWHL5vH43Lcl3j82OG7Pkf0v4b/p9Taq5nV9oAqst+/J7kVOeu\noCBKKntbKnpDauQgFtuyWq4p3YmDy6d3p+nXVAAXRgq3OYk1HAdDNIvmyQ2pJK1w\n+WeOKH/F8xuObjrL1Km1ZceC/xNJe9Zi5HhJLg5MkxMDW4SavJnKkNd8l0ZL5es=\n=LrIa\n-----END PGP SIGNATURE-----\n", "payload": "tree 36ba0bca7784bec065a7dce929d41348ecfdb0de\nparent 16cc5ddacbde23a71d05535f6b51298d295535df\nparent b4b71e30bd5e1ed3af320026133d2abf5a7fb205\nauthor Ralf Jung <post@ralfj.de> 1559120215 +0200\ncommitter GitHub <noreply@github.com> 1559120215 +0200\n\nMerge branch 'master' into miri-build"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2427fee7f011d45aa898d26290e68b6456a0384c", "html_url": "https://github.com/rust-lang/rust/commit/2427fee7f011d45aa898d26290e68b6456a0384c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2427fee7f011d45aa898d26290e68b6456a0384c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16cc5ddacbde23a71d05535f6b51298d295535df", "url": "https://api.github.com/repos/rust-lang/rust/commits/16cc5ddacbde23a71d05535f6b51298d295535df", "html_url": "https://github.com/rust-lang/rust/commit/16cc5ddacbde23a71d05535f6b51298d295535df"}, {"sha": "b4b71e30bd5e1ed3af320026133d2abf5a7fb205", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b71e30bd5e1ed3af320026133d2abf5a7fb205", "html_url": "https://github.com/rust-lang/rust/commit/b4b71e30bd5e1ed3af320026133d2abf5a7fb205"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "7695b069436f29ba79d5fdf7e33b81fc177d8e33", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2427fee7f011d45aa898d26290e68b6456a0384c/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/2427fee7f011d45aa898d26290e68b6456a0384c/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=2427fee7f011d45aa898d26290e68b6456a0384c", "patch": "@@ -1 +1 @@\n-1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf\n+4b9d80325a65b0375eea526409a0f3aaf1cbc23c"}, {"sha": "17679e26790cbba262f5a8335669787ce7e4b02b", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2427fee7f011d45aa898d26290e68b6456a0384c/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2427fee7f011d45aa898d26290e68b6456a0384c/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=2427fee7f011d45aa898d26290e68b6456a0384c", "patch": "@@ -17,7 +17,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         args: &[OpTy<'tcx, Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n         ret: Option<mir::BasicBlock>,\n-    ) -> EvalResult<'tcx, Option<&'mir mir::Mir<'tcx>>> {\n+    ) -> EvalResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest.map(|place| *place));\n \n@@ -607,11 +607,12 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n                 let dtor = match this.read_scalar(args[1])?.not_undef()? {\n                     Scalar::Ptr(dtor_ptr) => Some(this.memory().get_fn(dtor_ptr)?),\n-                    Scalar::Bits { bits: 0, size } => {\n+                    Scalar::Raw { data: 0, size } => {\n+                        // NULL pointer\n                         assert_eq!(size as u64, this.memory().pointer_size().bytes());\n                         None\n                     },\n-                    Scalar::Bits { .. } => return err!(ReadBytesAsPointer),\n+                    Scalar::Raw { .. } => return err!(ReadBytesAsPointer),\n                 };\n \n                 // Figure out how large a pthread TLS key actually is."}, {"sha": "89d7964913ae90336dd7efcec18cfce8c9745c9c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2427fee7f011d45aa898d26290e68b6456a0384c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2427fee7f011d45aa898d26290e68b6456a0384c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2427fee7f011d45aa898d26290e68b6456a0384c", "patch": "@@ -407,7 +407,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         args: &[OpTy<'tcx, Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n         ret: Option<mir::BasicBlock>,\n-    ) -> EvalResult<'tcx, Option<&'mir mir::Mir<'tcx>>> {\n+    ) -> EvalResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         ecx.find_fn(instance, args, dest, ret)\n     }\n "}, {"sha": "28d0d7c960959cd870bb0345527229ce064bf22a", "filename": "src/operator.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2427fee7f011d45aa898d26290e68b6456a0384c/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2427fee7f011d45aa898d26290e68b6456a0384c/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=2427fee7f011d45aa898d26290e68b6456a0384c", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n     ) -> EvalResult<'tcx, bool> {\n         let size = self.pointer_size();\n         Ok(match (left, right) {\n-            (Scalar::Bits { .. }, Scalar::Bits { .. }) =>\n+            (Scalar::Raw { .. }, Scalar::Raw { .. }) =>\n                 left.to_bits(size)? == right.to_bits(size)?,\n             (Scalar::Ptr(left), Scalar::Ptr(right)) => {\n                 // Comparison illegal if one of them is out-of-bounds, *unless* they\n@@ -165,10 +165,10 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 }\n             }\n             // Comparing ptr and integer.\n-            (Scalar::Ptr(ptr), Scalar::Bits { bits, size }) |\n-            (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n+            (Scalar::Ptr(ptr), Scalar::Raw { data, size }) |\n+            (Scalar::Raw { data, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n-                let bits = bits as u64;\n+                let bits = data as u64;\n \n                 // Case I: Comparing real pointers with \"small\" integers.\n                 // Really we should only do this for NULL, but pragmatically speaking on non-bare-metal systems,\n@@ -262,7 +262,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).\n                     (value << shift) >> shift\n                 };\n-                let ptr_size = self.memory().pointer_size().bytes() as u8;\n+                let ptr_size = self.memory().pointer_size();\n                 trace!(\"ptr BitAnd, align {}, operand {:#010x}, base_mask {:#010x}\",\n                     ptr_base_align, right, base_mask);\n                 if right & base_mask == base_mask {\n@@ -278,7 +278,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     )\n                 } else if right & base_mask == 0 {\n                     // Case 2: the base address bits are all taken away, i.e., right is all-0 there.\n-                    (Scalar::Bits { bits: (left.offset.bytes() as u128) & right, size: ptr_size }, false)\n+                    let v = Scalar::from_uint((left.offset.bytes() as u128) & right, ptr_size);\n+                    (v, false)\n                 } else {\n                     return err!(ReadPointerAsBytes);\n                 }\n@@ -289,18 +290,15 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 // (Intuition: modulo a divisor leaks less information.)\n                 let ptr_base_align = self.memory().get(left.alloc_id)?.align.bytes();\n                 let right = right as u64;\n-                let ptr_size = self.memory().pointer_size().bytes() as u8;\n+                let ptr_size = self.memory().pointer_size();\n                 if right == 1 {\n                     // Modulo 1 is always 0.\n-                    (Scalar::Bits { bits: 0, size: ptr_size }, false)\n+                    (Scalar::from_uint(0u32, ptr_size), false)\n                 } else if ptr_base_align % right == 0 {\n                     // The base address would be cancelled out by the modulo operation, so we can\n                     // just take the modulo of the offset.\n                     (\n-                        Scalar::Bits {\n-                            bits: (left.offset.bytes() % right) as u128,\n-                            size: ptr_size\n-                        },\n+                        Scalar::from_uint((left.offset.bytes() % right) as u128, ptr_size),\n                         false,\n                     )\n                 } else {"}, {"sha": "56fd448b0cc2227660158106f530fac905b63e34", "filename": "tests/run-pass/ptr_arith_offset_overflow.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2427fee7f011d45aa898d26290e68b6456a0384c/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2427fee7f011d45aa898d26290e68b6456a0384c/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs?ref=2427fee7f011d45aa898d26290e68b6456a0384c", "patch": "@@ -1,9 +1,12 @@\n+use std::ptr;\n+\n fn main() {\n     let v = [1i16, 2];\n-    let x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n+    let x = &mut ptr::null(); // going through memory as there are more sanity checks along that path\n+    *x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n     // Adding 2*isize::max and then 1 is like substracting 1\n-    let x = x.wrapping_offset(isize::max_value());\n-    let x = x.wrapping_offset(isize::max_value());\n-    let x = x.wrapping_offset(1);\n-    assert_eq!(unsafe { *x }, 1);\n+    *x = x.wrapping_offset(isize::max_value());\n+    *x = x.wrapping_offset(isize::max_value());\n+    *x = x.wrapping_offset(1);\n+    assert_eq!(unsafe { **x }, 1);\n }"}, {"sha": "c279024f35eabd442390b329f48867f0f1b191d4", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2427fee7f011d45aa898d26290e68b6456a0384c/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2427fee7f011d45aa898d26290e68b6456a0384c/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=2427fee7f011d45aa898d26290e68b6456a0384c", "patch": "@@ -1,4 +1,5 @@\n use std::mem;\n+use std::ptr;\n \n fn eq_ref<T>(x: &T, y: &T) -> bool {\n     x as *const _ == y as *const _\n@@ -11,6 +12,12 @@ fn main() {\n     assert_eq!(1 as *const i32 as usize, 1);\n     assert_eq!((1 as *const i32).wrapping_offset(4) as usize, 1 + 4*4);\n \n+    // negative overflowing wrapping_offset (going through memory because\n+    // this used to trigger an ICE on 32bit)\n+    let val = &mut ptr::null();\n+    *val = (1 as *const u8).wrapping_offset(-4);\n+    assert_eq!(*val as usize, usize::max_value() - 2);\n+\n     {   // ptr-int-ptr\n         let x = 13;\n         let mut y = &x as &_ as *const _ as usize;"}]}