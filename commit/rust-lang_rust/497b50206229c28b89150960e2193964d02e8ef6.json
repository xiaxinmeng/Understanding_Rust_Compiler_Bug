{"sha": "497b50206229c28b89150960e2193964d02e8ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5N2I1MDIwNjIyOWMyOGI4OTE1MDk2MGUyMTkzOTY0ZDAyZThlZjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-11T10:48:22Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-17T07:59:36Z"}, "message": "Stop emulating cross-crate hygiene with gensyms\n\nMost `Ident`s are serialized as `InternedString`s the exceptions are:\n\n* Reexports\n* Attributes\n* Idents in macro definitions\n\nUsing gensyms helped reexports emulate hygiene. However, the actual item\nwouldn't have a gensymmed name so would be usable cross-crate. So\nremoving this case until we have proper cross-crate hygiene seems\nsensible.\n\nCodegen attributes (`inline`, `export_name`) are resolved by their\n`Symbol`. This meant that opaque macro-expanded codegen attributes could\ncause linker errors. This prevented making built-in derives hygienic.", "tree": {"sha": "2c57e70e69ec558c081a5a90593ee2d3d480f932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c57e70e69ec558c081a5a90593ee2d3d480f932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497b50206229c28b89150960e2193964d02e8ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497b50206229c28b89150960e2193964d02e8ef6", "html_url": "https://github.com/rust-lang/rust/commit/497b50206229c28b89150960e2193964d02e8ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497b50206229c28b89150960e2193964d02e8ef6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211d1e073527915f7ce1854ad8b30dc0c45845e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/211d1e073527915f7ce1854ad8b30dc0c45845e8", "html_url": "https://github.com/rust-lang/rust/commit/211d1e073527915f7ce1854ad8b30dc0c45845e8"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "4365b1bee583f7ebd411af367cd19d1688f046cd", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=497b50206229c28b89150960e2193964d02e8ef6", "patch": "@@ -348,6 +348,22 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl SpecializedDecoder<Ident> for DecodeContext<'_, '_> {\n+    fn specialized_decode(&mut self) -> Result<Ident, Self::Error> {\n+        // FIXME(jseyfried): intercrate hygiene\n+\n+        Ok(Ident::with_dummy_span(Symbol::decode(self)?))\n+    }\n+}\n+\n+impl SpecializedDecoder<SyntaxContext> for DecodeContext<'_, '_> {\n+    fn specialized_decode(&mut self) -> Result<SyntaxContext, Self::Error> {\n+        // FIXME(jseyfried): intercrate hygiene\n+\n+        Ok(SyntaxContext::empty())\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n         Fingerprint::decode_opaque(&mut self.opaque)"}, {"sha": "34ccdad8636c95e6ff5cc51d6cf3452036d88627", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=497b50206229c28b89150960e2193964d02e8ef6", "patch": "@@ -31,8 +31,9 @@ use std::u32;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::Spanned;\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::{kw, sym, Ident};\n use syntax_pos::{self, FileName, SourceFile, Span};\n+use syntax_pos::hygiene::SyntaxContext;\n use log::{debug, trace};\n \n use rustc::hir::{self, PatKind};\n@@ -173,6 +174,20 @@ impl<'tcx> SpecializedEncoder<Span> for EncodeContext<'tcx> {\n     }\n }\n \n+impl SpecializedEncoder<Ident> for EncodeContext<'tcx> {\n+    fn specialized_encode(&mut self, ident: &Ident) -> Result<(), Self::Error> {\n+        // FIXME(jseyfried): intercrate hygiene\n+        ident.name.encode(self)\n+    }\n+}\n+\n+impl SpecializedEncoder<SyntaxContext> for EncodeContext<'tcx> {\n+    fn specialized_encode(&mut self, _ctxt: &SyntaxContext) -> Result<(), Self::Error> {\n+        // FIXME(jseyfried): intercrate hygiene\n+        Ok(())\n+    }\n+}\n+\n impl<'tcx> SpecializedEncoder<LocalDefId> for EncodeContext<'tcx> {\n     #[inline]\n     fn specialized_encode(&mut self, def_id: &LocalDefId) -> Result<(), Self::Error> {"}, {"sha": "1e40994e77bf1a46f30ac2d8ea64ccebcc634c9e", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=497b50206229c28b89150960e2193964d02e8ef6", "patch": "@@ -751,14 +751,6 @@ impl Decodable for ExpnId {\n     }\n }\n \n-impl Encodable for SyntaxContext {\n-    fn encode<E: Encoder>(&self, _: &mut E) -> Result<(), E::Error> {\n-        Ok(()) // FIXME(jseyfried) intercrate hygiene\n-    }\n-}\n+impl UseSpecializedEncodable for SyntaxContext {}\n \n-impl Decodable for SyntaxContext {\n-    fn decode<D: Decoder>(_: &mut D) -> Result<Self, D::Error> {\n-        Ok(SyntaxContext::root()) // FIXME(jseyfried) intercrate hygiene\n-    }\n-}\n+impl UseSpecializedDecodable for SyntaxContext {}"}, {"sha": "bed898f10b432ee64e301b8c09231d2cb99298da", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b50206229c28b89150960e2193964d02e8ef6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=497b50206229c28b89150960e2193964d02e8ef6", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::newtype_index;\n use rustc_macros::symbols;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};\n \n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::fmt;\n@@ -847,28 +848,9 @@ impl fmt::Display for Ident {\n     }\n }\n \n-impl Encodable for Ident {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        if !self.span.modern().from_expansion() {\n-            s.emit_str(&self.as_str())\n-        } else { // FIXME(jseyfried): intercrate hygiene\n-            let mut string = \"#\".to_owned();\n-            string.push_str(&self.as_str());\n-            s.emit_str(&string)\n-        }\n-    }\n-}\n+impl UseSpecializedEncodable for Ident {}\n \n-impl Decodable for Ident {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Ident, D::Error> {\n-        let string = d.read_str()?;\n-        Ok(if !string.starts_with('#') {\n-            Ident::from_str(&string)\n-        } else { // FIXME(jseyfried): intercrate hygiene\n-            Ident::from_str(&string[1..]).gensym()\n-        })\n-    }\n-}\n+impl UseSpecializedDecodable for Ident {}\n \n /// A symbol is an interned or gensymed string. A gensym is a symbol that is\n /// never equal to any other symbol."}, {"sha": "74afedbeb77ce53063d6bb4ff9b18f2f14ca07b3", "filename": "src/test/ui/hygiene/auxiliary/codegen-attrs.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/497b50206229c28b89150960e2193964d02e8ef6/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fcodegen-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b50206229c28b89150960e2193964d02e8ef6/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fcodegen-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fcodegen-attrs.rs?ref=497b50206229c28b89150960e2193964d02e8ef6", "patch": "@@ -0,0 +1,10 @@\n+#![feature(decl_macro)]\n+\n+macro m($f:ident) {\n+    #[export_name = \"export_function_name\"]\n+    pub fn $f() -> i32 {\n+        2\n+    }\n+}\n+\n+m!(rust_function_name);"}, {"sha": "af6b1334387eabcf494199a33ac652115963b218", "filename": "src/test/ui/hygiene/cross-crate-codegen-attrs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/497b50206229c28b89150960e2193964d02e8ef6/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-codegen-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497b50206229c28b89150960e2193964d02e8ef6/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-codegen-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fcross-crate-codegen-attrs.rs?ref=497b50206229c28b89150960e2193964d02e8ef6", "patch": "@@ -0,0 +1,12 @@\n+// Make sure that macro expanded codegen attributes work across crates.\n+// We used to gensym the identifiers in attributes, which stopped dependent\n+// crates from seeing them, resulting in linker errors in cases like this one.\n+\n+// run-pass\n+// aux-build:codegen-attrs.rs\n+\n+extern crate codegen_attrs;\n+\n+fn main() {\n+    assert_eq!(codegen_attrs::rust_function_name(), 2);\n+}"}]}