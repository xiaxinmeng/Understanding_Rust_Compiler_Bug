{"sha": "51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxY2MzY2RjZjA2MGMxYmYzZTRkNDU5NDdmN2E2YmMyMGY5OTYwZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-21T23:10:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-21T23:10:11Z"}, "message": "Auto merge of #55009 - oli-obk:const_safety, r=RalfJung\n\nMake raw ptr ops unsafe in const contexts\n\nr? @RalfJung\n\ncc @Centril", "tree": {"sha": "10bd8bbe932ddec76b81206b2777d9a71869c563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10bd8bbe932ddec76b81206b2777d9a71869c563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "html_url": "https://github.com/rust-lang/rust/commit/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7164a9f151a56316a382d8bc2b15ccf373e129ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7164a9f151a56316a382d8bc2b15ccf373e129ca", "html_url": "https://github.com/rust-lang/rust/commit/7164a9f151a56316a382d8bc2b15ccf373e129ca"}, {"sha": "aedc3a51dfab0fa7205f1c0fd68a4e62dd6df712", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedc3a51dfab0fa7205f1c0fd68a4e62dd6df712", "html_url": "https://github.com/rust-lang/rust/commit/aedc3a51dfab0fa7205f1c0fd68a4e62dd6df712"}], "stats": {"total": 340, "additions": 225, "deletions": 115}, "files": [{"sha": "c3e4f0c05014c745155902958dee598b16e17df6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -455,11 +455,20 @@ impl<'hir> Map<'hir> {\n             Node::AnonConst(_) => {\n                 BodyOwnerKind::Const\n             }\n+            Node::Variant(&Spanned { node: VariantKind { data: VariantData::Tuple(..), .. }, .. }) |\n+            Node::StructCtor(..) |\n+            Node::Item(&Item { node: ItemKind::Fn(..), .. }) |\n+            Node::TraitItem(&TraitItem { node: TraitItemKind::Method(..), .. }) |\n+            Node::ImplItem(&ImplItem { node: ImplItemKind::Method(..), .. }) => {\n+                BodyOwnerKind::Fn\n+            }\n             Node::Item(&Item { node: ItemKind::Static(_, m, _), .. }) => {\n                 BodyOwnerKind::Static(m)\n             }\n-            // Default to function if it's not a constant or static.\n-            _ => BodyOwnerKind::Fn\n+            Node::Expr(&Expr { node: ExprKind::Closure(..), .. }) => {\n+                BodyOwnerKind::Closure\n+            }\n+            node => bug!(\"{:#?} is not a body node\", node),\n         }\n     }\n "}, {"sha": "b58b1d359f98bb915d23ef466a591b91d4ddf54e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1270,13 +1270,25 @@ pub enum BodyOwnerKind {\n     /// Functions and methods.\n     Fn,\n \n+    /// Closures\n+    Closure,\n+\n     /// Constants and associated constants.\n     Const,\n \n     /// Initializer of a `static` item.\n     Static(Mutability),\n }\n \n+impl BodyOwnerKind {\n+    pub fn is_fn_or_closure(self) -> bool {\n+        match self {\n+            BodyOwnerKind::Fn | BodyOwnerKind::Closure => true,\n+            BodyOwnerKind::Const | BodyOwnerKind::Static(_) => false,\n+        }\n+    }\n+}\n+\n /// A constant (expression) that's not an item or associated item,\n /// but needs its own `DefId` for type-checking, const-eval, etc.\n /// These are usually found nested inside types (e.g., array lengths)"}, {"sha": "31f91a1bae57fa16982e955a5bea1f0dcd1aa12b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1268,8 +1268,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n-        if let hir::BodyOwnerKind::Fn = self.tcx.hir().body_owner_kind(owner_id) {\n-            self.visit_expr(&body.value);\n+        if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {\n+            self.visit_expr(&body.value)\n         } else {\n             // Only functions have an outer terminating (drop) scope, while\n             // temporaries in constant initializers may be 'static, but only"}, {"sha": "9d49814c35a348056eee8f1e0aedc6bccc8ff688", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -163,10 +163,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n \n-    let locals_are_invalidated_at_exit = match tcx.hir().body_owner_kind(id) {\n-            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n-            hir::BodyOwnerKind::Fn => true,\n-    };\n+    let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();\n     let borrow_set = Rc::new(BorrowSet::build(\n             tcx, mir, locals_are_invalidated_at_exit, &mdpe.move_data));\n "}, {"sha": "0a214e60bdd78a8f8d6641266c26acc688936c24", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -476,6 +476,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n \n         match tcx.hir().body_owner_kind(self.mir_node_id) {\n+            BodyOwnerKind::Closure |\n             BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def_id == closure_base_def_id {\n                     tcx.type_of(closure_base_def_id)"}, {"sha": "420ae113ad33026036c151c99fec21524a9fd6ed", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -75,7 +75,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n         let cx = Cx::new(&infcx, id);\n         let mut mir = if cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n-        } else if let hir::BodyOwnerKind::Fn = cx.body_owner_kind {\n+        } else if cx.body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n             let fn_hir_id = tcx.hir().node_to_hir_id(id);"}, {"sha": "78abba5f885b2e94882cd8f3f2785d0a7781e445", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -613,6 +613,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             hir::BodyOwnerKind::Static(_) =>\n                 // No need to free storage in this context.\n                 None,\n+            hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn =>\n                 Some(self.topmost_scope()),\n         }"}, {"sha": "f514cac6326be317b2a2de11cede84ea73091003", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -61,6 +61,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let constness = match body_owner_kind {\n             hir::BodyOwnerKind::Const |\n             hir::BodyOwnerKind::Static(_) => hir::Constness::Const,\n+            hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn => hir::Constness::NotConst,\n         };\n "}, {"sha": "ab8da2f352c1c1c8ae3b6628d2ba977f3f9e12dd", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 77, "deletions": 20, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::sync::Lrc;\n \n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::cast::CastTy;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n@@ -20,6 +21,7 @@ use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n+    const_context: bool,\n     min_const_fn: bool,\n     source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n@@ -33,14 +35,20 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n+        const_context: bool,\n         min_const_fn: bool,\n         mir: &'a Mir<'tcx>,\n         source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n+        // sanity check\n+        if min_const_fn {\n+            assert!(const_context);\n+        }\n         Self {\n             mir,\n+            const_context,\n             min_const_fn,\n             source_scope_local_data,\n             violations: vec![],\n@@ -124,29 +132,70 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location)\n     {\n-        if let &Rvalue::Aggregate(box ref aggregate, _) = rvalue {\n-            match aggregate {\n-                &AggregateKind::Array(..) |\n-                &AggregateKind::Tuple => {}\n-                &AggregateKind::Adt(ref def, ..) => {\n-                    match self.tcx.layout_scalar_valid_range(def.did) {\n-                        (Bound::Unbounded, Bound::Unbounded) => {},\n-                        _ => self.require_unsafe(\n-                            \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n-                            \"initializing a layout restricted type's field with a value outside \\\n-                            the valid range is undefined behavior\",\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n-                        ),\n+        match rvalue {\n+            Rvalue::Aggregate(box ref aggregate, _) => {\n+                match aggregate {\n+                    &AggregateKind::Array(..) |\n+                    &AggregateKind::Tuple => {}\n+                    &AggregateKind::Adt(ref def, ..) => {\n+                        match self.tcx.layout_scalar_valid_range(def.did) {\n+                            (Bound::Unbounded, Bound::Unbounded) => {},\n+                            _ => self.require_unsafe(\n+                                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                                \"initializing a layout restricted type's field with a value \\\n+                                outside the valid range is undefined behavior\",\n+                                UnsafetyViolationKind::GeneralAndConstFn,\n+                            ),\n+                        }\n+                    }\n+                    &AggregateKind::Closure(def_id, _) |\n+                    &AggregateKind::Generator(def_id, _, _) => {\n+                        let UnsafetyCheckResult {\n+                            violations, unsafe_blocks\n+                        } = self.tcx.unsafety_check_result(def_id);\n+                        self.register_violations(&violations, &unsafe_blocks);\n                     }\n                 }\n-                &AggregateKind::Closure(def_id, _) |\n-                &AggregateKind::Generator(def_id, _, _) => {\n-                    let UnsafetyCheckResult {\n-                        violations, unsafe_blocks\n-                    } = self.tcx.unsafety_check_result(def_id);\n-                    self.register_violations(&violations, &unsafe_blocks);\n+            },\n+            // casting pointers to ints is unsafe in const fn because the const evaluator cannot\n+            // possibly know what the result of various operations like `address / 2` would be\n+            // pointers during const evaluation have no integral address, only an abstract one\n+            Rvalue::Cast(CastKind::Misc, ref operand, cast_ty)\n+            if self.const_context && self.tcx.features().const_raw_ptr_to_usize_cast => {\n+                let operand_ty = operand.ty(self.mir, self.tcx);\n+                let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n+                let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n+                match (cast_in, cast_out) {\n+                    (CastTy::Ptr(_), CastTy::Int(_)) |\n+                    (CastTy::FnPtr, CastTy::Int(_)) => {\n+                        self.register_violations(&[UnsafetyViolation {\n+                            source_info: self.source_info,\n+                            description: Symbol::intern(\"cast of pointer to int\").as_interned_str(),\n+                            details: Symbol::intern(\"casting pointers to integers in constants\")\n+                                     .as_interned_str(),\n+                            kind: UnsafetyViolationKind::General,\n+                        }], &[]);\n+                    },\n+                    _ => {},\n                 }\n             }\n+            // raw pointer and fn pointer operations are unsafe as it is not clear whether one\n+            // pointer would be \"less\" or \"equal\" to another, because we cannot know where llvm\n+            // or the linker will place various statics in memory. Without this information the\n+            // result of a comparison of addresses would differ between runtime and compile-time.\n+            Rvalue::BinaryOp(_, ref lhs, _)\n+            if self.const_context && self.tcx.features().const_compare_raw_pointers => {\n+                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.mir, self.tcx).sty {\n+                    self.register_violations(&[UnsafetyViolation {\n+                        source_info: self.source_info,\n+                        description: Symbol::intern(\"pointer operation\").as_interned_str(),\n+                        details: Symbol::intern(\"operations on pointers in constants\")\n+                                 .as_interned_str(),\n+                        kind: UnsafetyViolationKind::General,\n+                    }], &[]);\n+                }\n+            }\n+            _ => {},\n         }\n         self.super_rvalue(rvalue, location);\n     }\n@@ -484,8 +533,16 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     };\n \n     let param_env = tcx.param_env(def_id);\n+\n+    let id = tcx.hir().as_local_node_id(def_id).unwrap();\n+    let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n+        hir::BodyOwnerKind::Closure => (false, false),\n+        hir::BodyOwnerKind::Fn => (tcx.is_const_fn(def_id), tcx.is_min_const_fn(def_id)),\n+        hir::BodyOwnerKind::Const |\n+        hir::BodyOwnerKind::Static(_) => (true, false),\n+    };\n     let mut checker = UnsafetyChecker::new(\n-        tcx.is_min_const_fn(def_id),\n+        const_context, min_const_fn,\n         mir, source_scope_local_data, tcx, param_env);\n     checker.visit_mir(mir);\n "}, {"sha": "9f0907adc989279935bf6278746b1e31ae9d49f3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,6 +1,5 @@\n //! Inlining pass for MIR functions\n \n-use rustc::hir;\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::DefId;\n \n@@ -74,15 +73,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // Only do inlining into fn bodies.\n         let id = self.tcx.hir().as_local_node_id(self.source.def_id).unwrap();\n-        let body_owner_kind = self.tcx.hir().body_owner_kind(id);\n-\n-        if let (hir::BodyOwnerKind::Fn, None) = (body_owner_kind, self.source.promoted) {\n-\n+        if self.tcx.hir().body_owner_kind(id).is_fn_or_closure() && self.source.promoted.is_none() {\n             for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n                 if let Some(callsite) = self.get_valid_function_call(bb,\n-                                                                     bb_data,\n-                                                                     caller_mir,\n-                                                                     param_env) {\n+                                                                    bb_data,\n+                                                                    caller_mir,\n+                                                                    param_env) {\n                     callsites.push_back(callsite);\n                 }\n             }"}, {"sha": "2d941902debc33807793869efe09bd660ab862ec", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1152,6 +1152,7 @@ impl MirPass for QualifyAndPromoteConstants {\n         let id = tcx.hir().as_local_node_id(def_id).unwrap();\n         let mut const_promoted_temps = None;\n         let mode = match tcx.hir().body_owner_kind(id) {\n+            hir::BodyOwnerKind::Closure => Mode::Fn,\n             hir::BodyOwnerKind::Fn => {\n                 if tcx.is_const_fn(def_id) {\n                     Mode::ConstFn"}, {"sha": "f4685e0ddc909dc5434f955b48aff2fb877792d1", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -573,6 +573,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> i\n     let body_owner_kind = tcx.hir().body_owner_kind(id);\n     match (body_owner_kind, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in\", i)?,\n+        (hir::BodyOwnerKind::Closure, _) |\n         (hir::BodyOwnerKind::Fn, _) => write!(w, \"fn\")?,\n         (hir::BodyOwnerKind::Const, _) => write!(w, \"const\")?,\n         (hir::BodyOwnerKind::Static(hir::MutImmutable), _) => write!(w, \"static\")?,\n@@ -585,6 +586,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> i\n     })?;\n \n     match (body_owner_kind, src.promoted) {\n+        (hir::BodyOwnerKind::Closure, None) |\n         (hir::BodyOwnerKind::Fn, None) => {\n             write!(w, \"(\")?;\n "}, {"sha": "c11b1af97766d80d651c8b50cbb0fa67eab8c662", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -191,6 +191,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         self.in_static = false;\n \n         match self.tcx.hir().body_owner_kind(item_id) {\n+            hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn => self.in_fn = true,\n             hir::BodyOwnerKind::Static(_) => self.in_static = true,\n             _ => {}"}, {"sha": "ac153cb57423fd8f731cd36ac265187d78f91175", "filename": "src/test/ui/cast/cast-ptr-to-int-const.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,7 +1,11 @@\n // gate-test-const_raw_ptr_to_usize_cast\n \n fn main() {\n-    const X: u32 = main as u32; //~ ERROR casting pointers to integers in constants is unstable\n+    const X: u32 = unsafe {\n+        main as u32 //~ ERROR casting pointers to integers in constants is unstable\n+    };\n     const Y: u32 = 0;\n-    const Z: u32 = &Y as *const u32 as u32; //~ ERROR is unstable\n+    const Z: u32 = unsafe {\n+        &Y as *const u32 as u32 //~ ERROR is unstable\n+    };\n }"}, {"sha": "d04595ee4e887d98889c757779fbdecf53bbefbc", "filename": "src/test/ui/cast/cast-ptr-to-int-const.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,16 +1,16 @@\n error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n-  --> $DIR/cast-ptr-to-int-const.rs:4:20\n+  --> $DIR/cast-ptr-to-int-const.rs:5:9\n    |\n-LL |     const X: u32 = main as u32; //~ ERROR casting pointers to integers in constants is unstable\n-   |                    ^^^^^^^^^^^\n+LL |         main as u32 //~ ERROR casting pointers to integers in constants is unstable\n+   |         ^^^^^^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n-  --> $DIR/cast-ptr-to-int-const.rs:6:20\n+  --> $DIR/cast-ptr-to-int-const.rs:9:9\n    |\n-LL |     const Z: u32 = &Y as *const u32 as u32; //~ ERROR is unstable\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         &Y as *const u32 as u32 //~ ERROR is unstable\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n "}, {"sha": "44266682a5c6c202f84f7d0dd6d61a275d2a72c7", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -3,13 +3,13 @@\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR any use of this value will cause\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR any use of this\n // unconst and fine\n-const X2: bool = 42 as *const i32 == 43 as *const i32;\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n // unconst and fine\n-const Y: usize = 42usize as *const i32 as usize + 1;\n+const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n // unconst and bad, will thus error in miri\n-const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR any use of this value will cause\n+const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n // unconst and fine\n const Z: i32 = unsafe { *(&1 as *const i32) };\n // unconst and bad, will thus error in miri"}, {"sha": "6be54c0bad4f9c7858539151fea205a8680fe6dd", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,20 +1,20 @@\n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:6:1\n    |\n-LL | const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR any use of this value will cause\n-   | ^^^^^^^^^^^^^^^^------------------------------------^\n-   |                 |\n-   |                 \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR any use of this\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                          |\n+   |                          \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:12:1\n    |\n-LL | const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR any use of this value will cause\n-   | ^^^^^^^^^^^^^^^^^^-----------------------------^\n-   |                   |\n-   |                   \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------^^^\n+   |                            |\n+   |                            \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:16:1"}, {"sha": "c2600f894dc42a7c450d72e541036eb274b6b7b6", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,5 +1,5 @@\n const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointers in const fn are unstable\n-    x == y\n+    unsafe { x == y }\n }\n \n fn main() {}"}, {"sha": "763c69e8050309a045a5dbd60402b3f64ac47190", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -95,97 +95,109 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n error: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:94:42\n+  --> $DIR/min_const_fn.rs:94:63\n+   |\n+LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+\n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:98:63\n+   |\n+LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:96:38\n+  --> $DIR/min_const_fn.rs:100:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:98:29\n+  --> $DIR/min_const_fn.rs:102:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:100:44\n+  --> $DIR/min_const_fn.rs:104:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:102:44\n+  --> $DIR/min_const_fn.rs:106:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:104:14\n+  --> $DIR/min_const_fn.rs:108:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:109:6\n+  --> $DIR/min_const_fn.rs:113:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:114:6\n+  --> $DIR/min_const_fn.rs:118:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:119:6\n+  --> $DIR/min_const_fn.rs:123:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:125:24\n+  --> $DIR/min_const_fn.rs:129:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:127:34\n+  --> $DIR/min_const_fn.rs:131:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:129:22\n+  --> $DIR/min_const_fn.rs:133:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:130:23\n+  --> $DIR/min_const_fn.rs:134:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n    |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:131:23\n+  --> $DIR/min_const_fn.rs:135:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                       ^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:32\n+  --> $DIR/min_const_fn.rs:136:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning[E0515]: cannot return reference to temporary value\n-  --> $DIR/min_const_fn.rs:132:63\n+  --> $DIR/min_const_fn.rs:136:63\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                                               ^--\n@@ -197,24 +209,24 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:137:41\n+  --> $DIR/min_const_fn.rs:141:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:140:21\n+  --> $DIR/min_const_fn.rs:144:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:142:27\n+  --> $DIR/min_const_fn.rs:146:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 36 previous errors\n \n Some errors occurred: E0493, E0515.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "ee3ffcd4026d3b6f5745a9dcf34e357ce37b71b7", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -90,9 +90,13 @@ static BAR: u32 = 42;\n const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n const fn foo30(x: *const u32) -> usize { x as usize }\n-//~^ ERROR casting pointers to int\n+//~^ ERROR casting pointers to ints is unstable\n+const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n+//~^ ERROR casting pointers to ints is unstable\n const fn foo30_2(x: *mut u32) -> usize { x as usize }\n-//~^ ERROR casting pointers to int\n+//~^ ERROR casting pointers to ints is unstable\n+const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n+//~^ ERROR casting pointers to ints is unstable\n const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n //~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn"}, {"sha": "52c60c57b8fb359b4d552e0e6a555f4860aedda9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -95,113 +95,125 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n error: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:94:42\n+  --> $DIR/min_const_fn.rs:94:63\n+   |\n+LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+\n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:98:63\n+   |\n+LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n+   |                                                               ^^^^^^^^^^\n+\n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:96:38\n+  --> $DIR/min_const_fn.rs:100:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:98:29\n+  --> $DIR/min_const_fn.rs:102:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:100:44\n+  --> $DIR/min_const_fn.rs:104:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:102:44\n+  --> $DIR/min_const_fn.rs:106:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:104:14\n+  --> $DIR/min_const_fn.rs:108:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:109:6\n+  --> $DIR/min_const_fn.rs:113:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:114:6\n+  --> $DIR/min_const_fn.rs:118:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:119:6\n+  --> $DIR/min_const_fn.rs:123:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:125:24\n+  --> $DIR/min_const_fn.rs:129:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:127:34\n+  --> $DIR/min_const_fn.rs:131:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:129:22\n+  --> $DIR/min_const_fn.rs:133:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:130:23\n+  --> $DIR/min_const_fn.rs:134:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n    |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:131:23\n+  --> $DIR/min_const_fn.rs:135:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                       ^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:32\n+  --> $DIR/min_const_fn.rs:136:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:137:41\n+  --> $DIR/min_const_fn.rs:141:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:140:21\n+  --> $DIR/min_const_fn.rs:144:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:142:27\n+  --> $DIR/min_const_fn.rs:146:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 36 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "9657bbdeadc17a367c274fbf73c53cc349b50707", "filename": "src/test/ui/error-codes/E0395.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -3,6 +3,6 @@\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n-static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n+static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n fn main() {\n }"}, {"sha": "cc7d94e22eb6b8e5056fbde0d08a361daec684d5", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: comparing raw pointers inside static (see issue #53020)\n-  --> $DIR/E0395.rs:6:22\n+  --> $DIR/E0395.rs:6:29\n    |\n-LL | static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_compare_raw_pointers)] to the crate attributes to enable\n "}, {"sha": "444e94d829bf8c0f76d08109a2b0138fd2d891bd", "filename": "src/test/ui/issues/issue-17458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-17458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-17458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17458.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,4 +1,4 @@\n-static X: usize = 0 as *const usize as usize;\n+static X: usize = unsafe { 0 as *const usize as usize };\n //~^ ERROR: casting pointers to integers in statics is unstable\n \n fn main() {"}, {"sha": "a1a8ed9f0cdcb6cc943b5bdf3231cfd633ad7016", "filename": "src/test/ui/issues/issue-17458.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: casting pointers to integers in statics is unstable (see issue #51910)\n-  --> $DIR/issue-17458.rs:1:19\n+  --> $DIR/issue-17458.rs:1:28\n    |\n-LL | static X: usize = 0 as *const usize as usize;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static X: usize = unsafe { 0 as *const usize as usize };\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n "}, {"sha": "1c2229fb9eae4f9258ff8505ba305130a2138ba5", "filename": "src/test/ui/issues/issue-18294.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-18294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-18294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     const X: u32 = 1;\n-    const Y: usize = &X as *const u32 as usize; //~ ERROR is unstable\n+    const Y: usize = unsafe { &X as *const u32 as usize }; //~ ERROR is unstable\n     println!(\"{}\", Y);\n }"}, {"sha": "f3e8ab1a31307cfbaf425ee6601d161c62b93d62", "filename": "src/test/ui/issues/issue-18294.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n-  --> $DIR/issue-18294.rs:3:22\n+  --> $DIR/issue-18294.rs:3:31\n    |\n-LL |     const Y: usize = &X as *const u32 as usize; //~ ERROR is unstable\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const Y: usize = unsafe { &X as *const u32 as usize }; //~ ERROR is unstable\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n "}, {"sha": "36a69cf4c22ff9895bc476983be8d0be4c29e592", "filename": "src/test/ui/issues/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n-    const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n+    const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n     //~^ ERROR comparing raw pointers inside constant\n     println!(\"{}\", A);\n }"}, {"sha": "dc547f7c32c941fd2e512b2c721a148acccf0b56", "filename": "src/test/ui/issues/issue-25826.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr?ref=51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: comparing raw pointers inside constant (see issue #53020)\n-  --> $DIR/issue-25826.rs:3:21\n+  --> $DIR/issue-25826.rs:3:30\n    |\n-LL |     const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_compare_raw_pointers)] to the crate attributes to enable\n "}]}