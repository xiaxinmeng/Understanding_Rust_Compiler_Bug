{"sha": "d46e84081f88f22198fbfcd5221faaf922e0500d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NmU4NDA4MWY4OGYyMjE5OGZiZmNkNTIyMWZhYWY5MjJlMDUwMGQ=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2015-08-10T18:40:46Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2015-08-10T18:43:11Z"}, "message": "add and use Span.substitute_dummy method", "tree": {"sha": "81c9a3bbaab8586673d96f05ba5bb7822fe1d9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c9a3bbaab8586673d96f05ba5bb7822fe1d9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46e84081f88f22198fbfcd5221faaf922e0500d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46e84081f88f22198fbfcd5221faaf922e0500d", "html_url": "https://github.com/rust-lang/rust/commit/d46e84081f88f22198fbfcd5221faaf922e0500d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46e84081f88f22198fbfcd5221faaf922e0500d/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c115c513632b45d1a4d1b3fb648755a7023269e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c115c513632b45d1a4d1b3fb648755a7023269e7", "html_url": "https://github.com/rust-lang/rust/commit/c115c513632b45d1a4d1b3fb648755a7023269e7"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "1f79db9e5232bd37806ec352adcaa3a1014e4f28", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d46e84081f88f22198fbfcd5221faaf922e0500d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e84081f88f22198fbfcd5221faaf922e0500d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=d46e84081f88f22198fbfcd5221faaf922e0500d", "patch": "@@ -29,7 +29,7 @@ use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef};\n use middle::ty_fold::TypeFoldable;\n use std::collections::HashMap;\n use std::fmt;\n-use syntax::codemap::{DUMMY_SP, Span};\n+use syntax::codemap::Span;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n \n pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n@@ -81,11 +81,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     let mut report = None;\n     for item in infcx.tcx.get_attrs(def_id).iter() {\n         if item.check_name(\"rustc_on_unimplemented\") {\n-            let err_sp = if item.meta().span == DUMMY_SP {\n-                span\n-            } else {\n-                item.meta().span\n-            };\n+            let err_sp = item.meta().span.substitute_dummy(span);\n             let def = infcx.tcx.lookup_trait_def(def_id);\n             let trait_str = def.trait_ref.to_string();\n             if let Some(ref istring) = item.value_str() {"}, {"sha": "0aeb572b6bcf62e1ef254e164c1154ac6b9bc0b7", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d46e84081f88f22198fbfcd5221faaf922e0500d/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e84081f88f22198fbfcd5221faaf922e0500d/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d46e84081f88f22198fbfcd5221faaf922e0500d", "patch": "@@ -135,6 +135,13 @@ pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n                                          hi: BytePos(0),\n                                          expn_id: COMMAND_LINE_EXPN };\n \n+impl Span {\n+    /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n+    pub fn substitute_dummy(self, other: Span) -> Span {\n+        if self == DUMMY_SP { other } else { self }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub struct Spanned<T> {\n     pub node: T,"}, {"sha": "d728fa59bd1df3e02aa2047b5ea49d5ea367feeb", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d46e84081f88f22198fbfcd5221faaf922e0500d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e84081f88f22198fbfcd5221faaf922e0500d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d46e84081f88f22198fbfcd5221faaf922e0500d", "patch": "@@ -211,24 +211,16 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 best_fail_spot = sp;\n                 best_fail_msg = (*msg).clone();\n               },\n-              Error(mut spp, ref msg) => {\n-                if spp == DUMMY_SP {\n-                    spp = sp;\n-                }\n-\n-                panic!(cx.span_fatal(spp, &msg[..]))\n+              Error(err_sp, ref msg) => {\n+                panic!(cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..]))\n               }\n             }\n           }\n           _ => cx.bug(\"non-matcher found in parsed lhses\")\n         }\n     }\n \n-    if best_fail_spot == DUMMY_SP {\n-        best_fail_spot = sp;\n-    }\n-\n-    panic!(cx.span_fatal(best_fail_spot, &best_fail_msg[..]));\n+    panic!(cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]));\n }\n \n // Note that macro-by-example's input is also matched against a token tree:\n@@ -283,12 +275,9 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n                                    arg_reader,\n                                    &argument_gram) {\n         Success(m) => m,\n-        Failure(mut sp, str) | Error(mut sp, str) => {\n-            if sp == DUMMY_SP {\n-                sp = def.span;\n-            }\n-\n-            panic!(cx.parse_sess().span_diagnostic.span_fatal(sp, &str[..]));\n+        Failure(sp, str) | Error(sp, str) => {\n+            panic!(cx.parse_sess().span_diagnostic\n+                     .span_fatal(sp.substitute_dummy(def.span), &str[..]));\n         }\n     };\n "}]}