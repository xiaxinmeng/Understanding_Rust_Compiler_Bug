{"sha": "d6e07cfcc8e6a735c60814e44143591e0c2911ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZTA3Y2ZjYzhlNmE3MzVjNjA4MTRlNDQxNDM1OTFlMGMyOTExYWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-11T13:32:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-11T13:32:30Z"}, "message": "Encapsulate CValue and CPlace creation", "tree": {"sha": "cd1acf879a0aa178614bf2acb56476ec8ce89cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1acf879a0aa178614bf2acb56476ec8ce89cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6e07cfcc8e6a735c60814e44143591e0c2911ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e07cfcc8e6a735c60814e44143591e0c2911ae", "html_url": "https://github.com/rust-lang/rust/commit/d6e07cfcc8e6a735c60814e44143591e0c2911ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6e07cfcc8e6a735c60814e44143591e0c2911ae/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b78d116a3fbe518d7e02c48ea0eb503f3d2804", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b78d116a3fbe518d7e02c48ea0eb503f3d2804", "html_url": "https://github.com/rust-lang/rust/commit/18b78d116a3fbe518d7e02c48ea0eb503f3d2804"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "cad6fe3285e8d008807231bdd65be2e6198d28ce", "filename": "src/abi.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -223,9 +223,9 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n             Some(self.clif_type(return_ty).unwrap())\n         };\n         if let Some(val) = self.lib_call(name, input_tys, return_ty, &args) {\n-            CValue::ByVal(val, return_layout)\n+            CValue::by_val(val, return_layout)\n         } else {\n-            CValue::ByRef(\n+            CValue::by_ref(\n                 self.bcx\n                     .ins()\n                     .iconst(self.pointer_type, self.pointer_type.bytes() as i64),\n@@ -291,9 +291,7 @@ fn local_place<'a, 'tcx: 'a>(\n     is_ssa: bool,\n ) -> CPlace<'tcx> {\n     let place = if is_ssa {\n-        fx.bcx\n-            .declare_var(mir_var(local), fx.clif_type(layout.ty).unwrap());\n-        CPlace::Var(local, layout)\n+        CPlace::new_var(fx, local, layout)\n     } else {\n         let place = CPlace::new_stack_slot(fx, layout.ty);\n \n@@ -372,8 +370,8 @@ fn cvalue_for_param<'a, 'tcx: 'a>(\n \n     match pass_mode {\n         PassMode::NoPass => unreachable!(),\n-        PassMode::ByVal(_) => Some(CValue::ByVal(ebb_param, layout)),\n-        PassMode::ByRef => Some(CValue::ByRef(ebb_param, layout)),\n+        PassMode::ByVal(_) => Some(CValue::by_val(ebb_param, layout)),\n+        PassMode::ByRef => Some(CValue::by_ref(ebb_param, layout)),\n     }\n }\n \n@@ -460,7 +458,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n     match output_pass_mode {\n         PassMode::NoPass => {\n             fx.local_map\n-                .insert(RETURN_PLACE, CPlace::NoPlace(ret_layout));\n+                .insert(RETURN_PLACE, CPlace::no_place(ret_layout));\n         }\n         PassMode::ByVal(_) => {\n             let is_ssa = !ssa_analyzed\n@@ -693,7 +691,7 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n         PassMode::ByVal(_) => {\n             if let Some(ret_place) = ret_place {\n                 let ret_val = fx.bcx.inst_results(call_inst)[0];\n-                ret_place.write_cvalue(fx, CValue::ByVal(ret_val, ret_layout));\n+                ret_place.write_cvalue(fx, CValue::by_val(ret_val, ret_layout));\n             }\n         }\n         PassMode::ByRef => {}"}, {"sha": "628f89675b8b222d4a757a1388f0888722dc5be5", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -483,7 +483,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             _ => unimplemented!(\"un op Neg for {:?}\", layout.ty),\n                         },\n                     };\n-                    lval.write_cvalue(fx, CValue::ByVal(res, layout));\n+                    lval.write_cvalue(fx, CValue::by_val(res, layout));\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), operand, ty) => {\n                     let layout = fx.layout_of(ty);\n@@ -497,7 +497,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                                     .unwrap(),\n                             );\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n-                            lval.write_cvalue(fx, CValue::ByVal(func_addr, layout));\n+                            lval.write_cvalue(fx, CValue::by_val(func_addr, layout));\n                         }\n                         _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", ty),\n                     }\n@@ -526,7 +526,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         } else {\n                             // fat-ptr -> thin-ptr\n                             let (ptr, _extra) = operand.load_scalar_pair(fx);\n-                            lval.write_cvalue(fx, CValue::ByVal(ptr, dest_layout))\n+                            lval.write_cvalue(fx, CValue::by_val(ptr, dest_layout))\n                         }\n                     } else if let ty::Adt(adt_def, _substs) = from_ty.sty {\n                         // enum -> discriminant value\n@@ -596,7 +596,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         } else {\n                             unimpl!(\"rval misc {:?} {:?}\", from_ty, to_ty)\n                         };\n-                        lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                        lval.write_cvalue(fx, CValue::by_val(res, dest_layout));\n                     }\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), operand, _ty) => {\n@@ -611,7 +611,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             );\n                             let func_ref = fx.get_function_ref(instance);\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n-                            lval.write_cvalue(fx, CValue::ByVal(func_addr, lval.layout()));\n+                            lval.write_cvalue(fx, CValue::by_val(func_addr, lval.layout()));\n                         }\n                         _ => {\n                             bug!(\"{} cannot be cast to a fn ptr\", operand.layout().ty)\n@@ -639,7 +639,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let place = trans_place(fx, place);\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                     let len = codegen_array_len(fx, place);\n-                    lval.write_cvalue(fx, CValue::ByVal(len, usize_layout));\n+                    lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n                     use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n@@ -666,7 +666,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let func_ref = fx.get_function_ref(instance);\n                     let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n                     let ptr = fx.bcx.inst_results(call)[0];\n-                    lval.write_cvalue(fx, CValue::ByVal(ptr, box_layout));\n+                    lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                     assert!(lval\n@@ -754,7 +754,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                 _ => false,\n             };\n             let val = clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), signed);\n-            return CValue::ByVal(val, dest_layout);\n+            return CValue::by_val(val, dest_layout);\n         }\n         layout::DiscriminantKind::Niche {\n             dataful_variant,\n@@ -777,7 +777,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                     .ins()\n                     .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n                 let val = fx.bcx.ins().select(b, if_true, if_false);\n-                return CValue::ByVal(val, dest_layout);\n+                return CValue::by_val(val, dest_layout);\n             } else {\n                 // Rebase from niche values to discriminant values.\n                 let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n@@ -795,7 +795,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                     .ins()\n                     .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n                 let val = fx.bcx.ins().select(b, if_true, if_false);\n-                return CValue::ByVal(val, dest_layout);\n+                return CValue::by_val(val, dest_layout);\n             }\n         }\n     }\n@@ -810,20 +810,20 @@ macro_rules! binop_match {\n         let ret_layout = $fx.layout_of($ret_ty);\n \n         let b = $fx.bcx.ins().icmp(IntCC::$cc, $lhs, $rhs);\n-        CValue::ByVal($fx.bcx.ins().bint(types::I8, b), ret_layout)\n+        CValue::by_val($fx.bcx.ins().bint(types::I8, b), ret_layout)\n     }};\n     (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, fcmp($cc:ident)) => {{\n         assert_eq!($fx.tcx.types.bool, $ret_ty);\n         let ret_layout = $fx.layout_of($ret_ty);\n         let b = $fx.bcx.ins().fcmp(FloatCC::$cc, $lhs, $rhs);\n-        CValue::ByVal($fx.bcx.ins().bint(types::I8, b), ret_layout)\n+        CValue::by_val($fx.bcx.ins().bint(types::I8, b), ret_layout)\n     }};\n     (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, custom(|| $body:expr)) => {{\n         $body\n     }};\n     (@single $fx:expr, $bug_fmt:expr, $var:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, $name:ident) => {{\n         let ret_layout = $fx.layout_of($ret_ty);\n-        CValue::ByVal($fx.bcx.ins().$name($lhs, $rhs), ret_layout)\n+        CValue::by_val($fx.bcx.ins().$name($lhs, $rhs), ret_layout)\n     }};\n     (\n         $fx:expr, $bin_op:expr, $signed:expr, $lhs:expr, $rhs:expr, $ret_ty:expr, $bug_fmt:expr;\n@@ -1064,7 +1064,7 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n             let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n-            return CValue::ByVal(res, base.layout());\n+            return CValue::by_val(res, base.layout());\n         }\n \n         binop_match! {\n@@ -1111,7 +1111,7 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n \n         assert_eq!(fx.tcx.types.bool, ret_ty);\n         let ret_layout = fx.layout_of(ret_ty);\n-        CValue::ByVal(fx.bcx.ins().bint(types::I8, res), ret_layout)\n+        CValue::by_val(fx.bcx.ins().bint(types::I8, res), ret_layout)\n     }\n }\n "}, {"sha": "a29e07f42270407e2632ac3fc79c608e14b426d9", "filename": "src/common.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -109,6 +109,18 @@ pub enum CValue<'tcx> {\n }\n \n impl<'tcx> CValue<'tcx> {\n+    pub fn by_ref(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+        CValue::ByRef(value, layout)\n+    }\n+\n+    pub fn by_val(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+        CValue::ByVal(value, layout)\n+    }\n+\n+    pub fn by_val_pair(value: Value, extra: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+        CValue::ByValPair(value, extra, layout)\n+    }\n+\n     pub fn layout(&self) -> TyLayout<'tcx> {\n         match *self {\n             CValue::ByRef(_, layout)\n@@ -257,6 +269,10 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n+    pub fn no_place(layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+        CPlace::NoPlace(layout)\n+    }\n+\n     pub fn new_stack_slot(\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         ty: Ty<'tcx>,\n@@ -275,6 +291,16 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         CPlace::Stack(stack_slot, layout)\n     }\n \n+    pub fn new_var(\n+        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        local: Local,\n+        layout: TyLayout<'tcx>,\n+    ) -> CPlace<'tcx> {\n+        fx.bcx\n+            .declare_var(mir_var(local), fx.clif_type(layout.ty).unwrap());\n+        CPlace::Var(local, layout)\n+    }\n+\n     pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CValue<'tcx> {\n         match self {\n             CPlace::Var(var, layout) => CValue::ByVal(fx.bcx.use_var(mir_var(var)), layout),"}, {"sha": "31f95cda1e3ffe963a97180c9652e5edbb10c88f", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -125,7 +125,7 @@ fn trans_const_value<'a, 'tcx: 'a>(\n             let bits = const_.val.try_to_bits(layout.size).unwrap();\n             CValue::const_val(fx, ty, rustc::mir::interpret::sign_extend(bits, layout.size) as i128 as i64)\n         }\n-        ty::FnDef(_def_id, _substs) => CValue::ByRef(\n+        ty::FnDef(_def_id, _substs) => CValue::by_ref(\n             fx.bcx\n                 .ins()\n                 .iconst(fx.pointer_type, fx.pointer_type.bytes() as i64),"}, {"sha": "8900e5f275604432953be0b5f08eae7ac76122a8", "filename": "src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -335,7 +335,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             assert_eq!(from.layout().ty, src_ty);\n             let addr = from.force_stack(fx);\n             let dst_layout = fx.layout_of(dst_ty);\n-            ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n+            ret.write_cvalue(fx, CValue::by_ref(addr, dst_layout))\n         };\n         init, () {\n             if ret.layout().abi == Abi::Uninhabited {\n@@ -422,7 +422,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         _ if intrinsic.starts_with(\"atomic_load\"), (c ptr) {\n             let inner_layout =\n                 fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n-            let val = CValue::ByRef(ptr.load_scalar(fx), inner_layout);\n+            let val = CValue::by_ref(ptr.load_scalar(fx), inner_layout);\n             ret.write_cvalue(fx, val);\n         };\n         _ if intrinsic.starts_with(\"atomic_store\"), (v ptr, c val) {\n@@ -451,7 +451,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             // Write new\n             fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n \n-            let ret_val = CValue::ByValPair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n+            let ret_val = CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n             ret.write_cvalue(fx, ret_val);\n         };\n "}, {"sha": "a597e18e19ecc040b4b70dcfdc3dd4f1487d94c1", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -40,7 +40,7 @@ pub fn trap_unreachable_ret_value<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl crane\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n     let zero = fx.bcx.ins().iconst(fx.pointer_type, 0);\n-    CValue::ByRef(zero, dest_layout)\n+    CValue::by_ref(zero, dest_layout)\n }\n \n /// Trap code: user65535"}, {"sha": "57399e10b7ab9324aed1a862ae9c1039cc6e9913", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e07cfcc8e6a735c60814e44143591e0c2911ae/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=d6e07cfcc8e6a735c60814e44143591e0c2911ae", "patch": "@@ -101,7 +101,7 @@ pub fn coerce_unsized_into<'a, 'tcx: 'a>(\n             let base = src.load_scalar(fx);\n             unsize_thin_ptr(fx, base, src_ty, dst_ty)\n         };\n-        dst.write_cvalue(fx, CValue::ByValPair(base, info, dst.layout()));\n+        dst.write_cvalue(fx, CValue::by_val_pair(base, info, dst.layout()));\n     };\n     match (&src_ty.sty, &dst_ty.sty) {\n         (&ty::Ref(..), &ty::Ref(..))"}]}