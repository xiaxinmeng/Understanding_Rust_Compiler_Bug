{"sha": "017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxN2YwZTRlNTNkZmIxZmIxYjhhMTg0NGNmOTliMjUzZGQ5ZGJkMjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:02:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:02:10Z"}, "message": "Refactor arg parsing", "tree": {"sha": "8800cc2503cd4a0c71537f008780e014ff11c248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8800cc2503cd4a0c71537f008780e014ff11c248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25", "html_url": "https://github.com/rust-lang/rust/commit/017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90e61ac75dcf4cdae41de4df41557f6ae5186a9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90e61ac75dcf4cdae41de4df41557f6ae5186a9a", "html_url": "https://github.com/rust-lang/rust/commit/90e61ac75dcf4cdae41de4df41557f6ae5186a9a"}], "stats": {"total": 284, "additions": 169, "deletions": 115}, "files": [{"sha": "7479fbd80b223dda223e4e4caefcdc4d06847322", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 169, "deletions": 115, "changes": 284, "blob_url": "https://github.com/rust-lang/rust/blob/017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=017f0e4e53dfb1fb1b8a1844cf99b253dd9dbd25", "patch": "@@ -14,6 +14,15 @@ use ra_syntax::{AstNode, SourceFile};\n \n type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n+fn main() -> Result<()> {\n+    env_logger::try_init()?;\n+\n+    let command = Command::from_args()?;\n+    command.run()?;\n+\n+    Ok(())\n+}\n+\n #[derive(Clone, Copy)]\n pub enum Verbosity {\n     Spammy,\n@@ -37,17 +46,40 @@ impl Verbosity {\n     }\n }\n \n-fn main() -> Result<()> {\n-    env_logger::try_init()?;\n+enum Command {\n+    Parse {\n+        no_dump: bool,\n+    },\n+    Symbols,\n+    Highlight {\n+        rainbow: bool,\n+    },\n+    Stats {\n+        verbosity: Verbosity,\n+        randomize: bool,\n+        memory_usage: bool,\n+        only: Option<String>,\n+        with_deps: bool,\n+        path: String,\n+    },\n+    Bench {\n+        verbose: bool,\n+        path: String,\n+        op: analysis_bench::Op,\n+    },\n+    HelpPrinted,\n+}\n \n-    let mut matches = Arguments::from_env();\n-    let subcommand = matches.subcommand()?.unwrap_or_default();\n+impl Command {\n+    fn from_args() -> Result<Command> {\n+        let mut matches = Arguments::from_env();\n+        let subcommand = matches.subcommand()?.unwrap_or_default();\n \n-    match subcommand.as_str() {\n-        \"parse\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+        let command = match subcommand.as_str() {\n+            \"parse\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-parse\n \n USAGE:\n@@ -56,46 +88,37 @@ USAGE:\n FLAGS:\n     -h, --help       Prints help inforamtion\n         --no-dump\"\n-                );\n-                return Ok(());\n-            }\n-\n-            let no_dump = matches.contains(\"--no-dump\");\n-            matches.finish().or_else(handle_extra_flags)?;\n+                    );\n+                    return Ok(Command::HelpPrinted);\n+                }\n \n-            let _p = profile(\"parsing\");\n-            let file = file()?;\n-            if !no_dump {\n-                println!(\"{:#?}\", file.syntax());\n+                let no_dump = matches.contains(\"--no-dump\");\n+                matches.finish().or_else(handle_extra_flags)?;\n+                Command::Parse { no_dump }\n             }\n-            std::mem::forget(file);\n-        }\n-        \"symbols\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+            \"symbols\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-symbols\n \n USAGE:\n     ra_cli highlight [FLAGS]\n \n FLAGS:\n     -h, --help    Prints help inforamtion\"\n-                );\n-                return Ok(());\n-            }\n+                    );\n+                    return Ok(Command::HelpPrinted);\n+                }\n \n-            matches.finish().or_else(handle_extra_flags)?;\n+                matches.finish().or_else(handle_extra_flags)?;\n \n-            let file = file()?;\n-            for s in file_structure(&file) {\n-                println!(\"{:?}\", s);\n+                Command::Symbols\n             }\n-        }\n-        \"highlight\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+            \"highlight\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-highlight\n \n USAGE:\n@@ -104,21 +127,18 @@ USAGE:\n FLAGS:\n     -h, --help       Prints help information\n     -r, --rainbow\"\n-                );\n-                return Ok(());\n-            }\n-\n-            let rainbow_opt = matches.contains([\"-r\", \"--rainbow\"]);\n-            matches.finish().or_else(handle_extra_flags)?;\n+                    );\n+                    return Ok(Command::HelpPrinted);\n+                }\n \n-            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id, rainbow_opt).unwrap();\n-            println!(\"{}\", html);\n-        }\n-        \"analysis-stats\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+                let rainbow = matches.contains([\"-r\", \"--rainbow\"]);\n+                matches.finish().or_else(handle_extra_flags)?;\n+                Command::Highlight { rainbow }\n+            }\n+            \"analysis-stats\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-analysis-stats\n \n USAGE:\n@@ -135,47 +155,40 @@ OPTIONS:\n \n ARGS:\n     <PATH>\"\n-                );\n-                return Ok(());\n-            }\n-\n-            let verbosity = match (\n-                matches.contains([\"-vv\", \"--spammy\"]),\n-                matches.contains([\"-v\", \"--verbose\"]),\n-                matches.contains([\"-q\", \"--quiet\"]),\n-            ) {\n-                (true, _, true) => Err(\"Invalid flags: -q conflicts with -vv\")?,\n-                (true, _, false) => Verbosity::Spammy,\n-                (false, false, false) => Verbosity::Normal,\n-                (false, false, true) => Verbosity::Quiet,\n-                (false, true, false) => Verbosity::Verbose,\n-                (false, true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n-            };\n-            let randomize = matches.contains(\"--randomize\");\n-            let memory_usage = matches.contains(\"--memory-usage\");\n-            let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n-            let with_deps: bool = matches.contains(\"--with-deps\");\n-            let path = {\n-                let mut trailing = matches.free()?;\n-                if trailing.len() != 1 {\n-                    Err(\"Invalid flags\")?;\n+                    );\n+                    return Ok(Command::HelpPrinted);\n                 }\n-                trailing.pop().unwrap()\n-            };\n-\n-            analysis_stats::run(\n-                verbosity,\n-                memory_usage,\n-                path.as_ref(),\n-                only.as_ref().map(String::as_ref),\n-                with_deps,\n-                randomize,\n-            )?;\n-        }\n-        \"analysis-bench\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+\n+                let verbosity = match (\n+                    matches.contains([\"-vv\", \"--spammy\"]),\n+                    matches.contains([\"-v\", \"--verbose\"]),\n+                    matches.contains([\"-q\", \"--quiet\"]),\n+                ) {\n+                    (true, _, true) => Err(\"Invalid flags: -q conflicts with -vv\")?,\n+                    (true, _, false) => Verbosity::Spammy,\n+                    (false, false, false) => Verbosity::Normal,\n+                    (false, false, true) => Verbosity::Quiet,\n+                    (false, true, false) => Verbosity::Verbose,\n+                    (false, true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n+                };\n+                let randomize = matches.contains(\"--randomize\");\n+                let memory_usage = matches.contains(\"--memory-usage\");\n+                let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n+                let with_deps: bool = matches.contains(\"--with-deps\");\n+                let path = {\n+                    let mut trailing = matches.free()?;\n+                    if trailing.len() != 1 {\n+                        Err(\"Invalid flags\")?;\n+                    }\n+                    trailing.pop().unwrap()\n+                };\n+\n+                Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path }\n+            }\n+            \"analysis-bench\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra_cli-analysis-bench\n \n USAGE:\n@@ -191,29 +204,28 @@ OPTIONS:\n \n ARGS:\n     <PATH>    Project to analyse\"\n-                );\n-                return Ok(());\n-            }\n+                    );\n+                    return Ok(Command::HelpPrinted);\n+                }\n \n-            let verbose = matches.contains([\"-v\", \"--verbose\"]);\n-            let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n-            let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n-            let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n-            let goto_def_path: Option<String> = matches.opt_value_from_str(\"--goto-def\")?;\n-            let op = match (highlight_path, complete_path, goto_def_path) {\n-                (Some(path), None, None) => analysis_bench::Op::Highlight { path: path.into() },\n-                (None, Some(position), None) => analysis_bench::Op::Complete(position.parse()?),\n-                (None, None, Some(position)) => analysis_bench::Op::GotoDef(position.parse()?),\n-                _ => panic!(\n-                    \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n-                ),\n-            };\n-            matches.finish().or_else(handle_extra_flags)?;\n-\n-            analysis_bench::run(verbose, path.as_ref(), op)?;\n-        }\n-        _ => eprintln!(\n-            \"\\\n+                let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+                let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n+                let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n+                let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n+                let goto_def_path: Option<String> = matches.opt_value_from_str(\"--goto-def\")?;\n+                let op = match (highlight_path, complete_path, goto_def_path) {\n+                    (Some(path), None, None) => analysis_bench::Op::Highlight { path: path.into() },\n+                    (None, Some(position), None) => analysis_bench::Op::Complete(position.parse()?),\n+                    (None, None, Some(position)) => analysis_bench::Op::GotoDef(position.parse()?),\n+                    _ => panic!(\n+                        \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n+                    ),\n+                };\n+                Command::Bench { verbose, path, op }\n+            }\n+            _ => {\n+                eprintln!(\n+                    \"\\\n ra-cli\n \n USAGE:\n@@ -228,9 +240,51 @@ SUBCOMMANDS:\n     highlight\n     parse\n     symbols\"\n-        ),\n+                );\n+                return Ok(Command::HelpPrinted);\n+            }\n+        };\n+        Ok(command)\n+    }\n+\n+    fn run(self) -> Result<()> {\n+        match self {\n+            Command::Parse { no_dump } => {\n+                let _p = profile(\"parsing\");\n+                let file = file()?;\n+                if !no_dump {\n+                    println!(\"{:#?}\", file.syntax());\n+                }\n+                std::mem::forget(file);\n+            }\n+            Command::Symbols => {\n+                let file = file()?;\n+                for s in file_structure(&file) {\n+                    println!(\"{:?}\", s);\n+                }\n+            }\n+            Command::Highlight { rainbow } => {\n+                let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+                let html = analysis.highlight_as_html(file_id, rainbow).unwrap();\n+                println!(\"{}\", html);\n+            }\n+            Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path } => {\n+                analysis_stats::run(\n+                    verbosity,\n+                    memory_usage,\n+                    path.as_ref(),\n+                    only.as_ref().map(String::as_ref),\n+                    with_deps,\n+                    randomize,\n+                )?;\n+            }\n+            Command::Bench { verbose, path, op } => {\n+                analysis_bench::run(verbose, path.as_ref(), op)?;\n+            }\n+            Command::HelpPrinted => (),\n+        }\n+        Ok(())\n     }\n-    Ok(())\n }\n \n fn handle_extra_flags(e: pico_args::Error) -> Result<()> {"}]}