{"sha": "c8d19fedb8b2dc23703f9860eb39383422d92ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZDE5ZmVkYjhiMmRjMjM3MDNmOTg2MGViMzkzODM0MjJkOTJhZTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-12T17:18:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-12T17:18:43Z"}, "message": "Merge #9582\n\n9582: internal: remove erroneous default impl r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9724e583b24d9e9d27f953ea6f8c3358c7da6823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9724e583b24d9e9d27f953ea6f8c3358c7da6823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8d19fedb8b2dc23703f9860eb39383422d92ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7HlzCRBK7hj4Ov3rIwAA2nkIAJwKQHr2E2giMlelNUWY5EF7\nFYOVEppFkqDtaaCoNVnqGTf79UCfIavF+ohC57sI8GWNbdaw4arwqfttcvbSdSpJ\nwWesHy4gMJizhEedMn9ogIFBQeqj8SRfzAu/v/X28qw7CMLp1uR9nbeypsiXFtfU\nXmKlRiYWp0qhpOJCK5X23YbwjSMixLomiZzdyNBI4umqnLj95fuvtNDgdeeOCCsX\nCpccO52cmmieAaJg9hDdu6x2QYOj502g0KUBU7jBW/dvsbQfi5n5zucXv9vbGHoj\nWB4OJo28RJF1CAKOG8LJ4b+c0YEgkU5uhKL6uZVJtVgi1RzCbYyCrjJtE+VGnRE=\n=lcwT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9724e583b24d9e9d27f953ea6f8c3358c7da6823\nparent 745be39383a46d99a50f03f1b5779c75608cc2ce\nparent a9d0d1414a8d137d6abda1287cb7ec8b397aa54d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626110323 +0000\ncommitter GitHub <noreply@github.com> 1626110323 +0000\n\nMerge #9582\n\n9582: internal: remove erroneous default impl r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d19fedb8b2dc23703f9860eb39383422d92ae3", "html_url": "https://github.com/rust-lang/rust/commit/c8d19fedb8b2dc23703f9860eb39383422d92ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8d19fedb8b2dc23703f9860eb39383422d92ae3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "745be39383a46d99a50f03f1b5779c75608cc2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/745be39383a46d99a50f03f1b5779c75608cc2ce", "html_url": "https://github.com/rust-lang/rust/commit/745be39383a46d99a50f03f1b5779c75608cc2ce"}, {"sha": "a9d0d1414a8d137d6abda1287cb7ec8b397aa54d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d0d1414a8d137d6abda1287cb7ec8b397aa54d", "html_url": "https://github.com/rust-lang/rust/commit/a9d0d1414a8d137d6abda1287cb7ec8b397aa54d"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "c5f8d45d68b39973b5b4e005caf3fc170b70417f", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c8d19fedb8b2dc23703f9860eb39383422d92ae3/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d19fedb8b2dc23703f9860eb39383422d92ae3/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=c8d19fedb8b2dc23703f9860eb39383422d92ae3", "patch": "@@ -145,12 +145,6 @@ pub enum ModuleOrigin {\n     },\n }\n \n-impl Default for ModuleOrigin {\n-    fn default() -> Self {\n-        ModuleOrigin::CrateRoot { definition: FileId(0) }\n-    }\n-}\n-\n impl ModuleOrigin {\n     fn declaration(&self) -> Option<AstId<ast::Module>> {\n         match self {\n@@ -196,7 +190,7 @@ impl ModuleOrigin {\n     }\n }\n \n-#[derive(Default, Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq)]\n pub struct ModuleData {\n     pub parent: Option<LocalModuleId>,\n     pub children: FxHashMap<Name, LocalModuleId>,\n@@ -211,9 +205,14 @@ impl DefMap {\n         let _p = profile::span(\"crate_def_map_query\").detail(|| {\n             db.crate_graph()[krate].display_name.as_deref().unwrap_or_default().to_string()\n         });\n-        let edition = db.crate_graph()[krate].edition;\n-        let def_map = DefMap::empty(krate, edition);\n+\n+        let crate_graph = db.crate_graph();\n+\n+        let edition = crate_graph[krate].edition;\n+        let origin = ModuleOrigin::CrateRoot { definition: crate_graph[krate].root_file_id };\n+        let def_map = DefMap::empty(krate, edition, origin);\n         let def_map = collector::collect_defs(db, def_map, None);\n+\n         Arc::new(def_map)\n     }\n \n@@ -231,16 +230,20 @@ impl DefMap {\n         let block_info = BlockInfo { block: block_id, parent: block.module };\n \n         let parent_map = block.module.def_map(db);\n-        let mut def_map = DefMap::empty(block.module.krate, parent_map.edition);\n+        let mut def_map = DefMap::empty(\n+            block.module.krate,\n+            parent_map.edition,\n+            ModuleOrigin::BlockExpr { block: block.ast_id },\n+        );\n         def_map.block = Some(block_info);\n \n         let def_map = collector::collect_defs(db, def_map, Some(block.ast_id));\n         Some(Arc::new(def_map))\n     }\n \n-    fn empty(krate: CrateId, edition: Edition) -> DefMap {\n+    fn empty(krate: CrateId, edition: Edition, root_module_origin: ModuleOrigin) -> DefMap {\n         let mut modules: Arena<ModuleData> = Arena::default();\n-        let root = modules.alloc(ModuleData::default());\n+        let root = modules.alloc(ModuleData::new(root_module_origin));\n         DefMap {\n             _c: Count::new(),\n             block: None,\n@@ -445,6 +448,15 @@ impl DefMap {\n }\n \n impl ModuleData {\n+    pub(crate) fn new(origin: ModuleOrigin) -> Self {\n+        ModuleData {\n+            parent: None,\n+            children: FxHashMap::default(),\n+            scope: ItemScope::default(),\n+            origin,\n+        }\n+    }\n+\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(&self, db: &dyn DefDatabase) -> InFile<ModuleSource> {\n         self.origin.definition_source(db)"}, {"sha": "dd31365a80db6807489cfc992069832ddfcdf7d5", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8d19fedb8b2dc23703f9860eb39383422d92ae3/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d19fedb8b2dc23703f9860eb39383422d92ae3/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c8d19fedb8b2dc23703f9860eb39383422d92ae3", "patch": "@@ -272,7 +272,6 @@ impl DefCollector<'_> {\n         let file_id = self.db.crate_graph()[self.def_map.krate].root_file_id;\n         let item_tree = self.db.file_item_tree(file_id.into());\n         let module_id = self.def_map.root;\n-        self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n \n         let attrs = item_tree.top_level_attrs(self.db, self.def_map.krate);\n         if attrs.cfg().map_or(true, |cfg| self.cfg_options.check(&cfg) != Some(false)) {\n@@ -323,7 +322,6 @@ impl DefCollector<'_> {\n     fn seed_with_inner(&mut self, block: AstId<ast::BlockExpr>) {\n         let item_tree = self.db.file_item_tree(block.file_id);\n         let module_id = self.def_map.root;\n-        self.def_map.modules[module_id].origin = ModuleOrigin::BlockExpr { block };\n         if item_tree\n             .top_level_attrs(self.db, self.def_map.krate)\n             .cfg()\n@@ -1625,14 +1623,14 @@ impl ModCollector<'_, '_> {\n             .resolve_visibility(self.def_collector.db, self.module_id, visibility)\n             .unwrap_or(Visibility::Public);\n         let modules = &mut self.def_collector.def_map.modules;\n-        let res = modules.alloc(ModuleData::default());\n-        modules[res].parent = Some(self.module_id);\n-        modules[res].origin = match definition {\n+        let origin = match definition {\n             None => ModuleOrigin::Inline { definition: declaration },\n             Some((definition, is_mod_rs)) => {\n                 ModuleOrigin::File { declaration, definition, is_mod_rs }\n             }\n         };\n+        let res = modules.alloc(ModuleData::new(origin));\n+        modules[res].parent = Some(self.module_id);\n         for (name, mac) in modules[self.module_id].scope.collect_legacy_macros() {\n             modules[res].scope.define_legacy_macro(name, mac)\n         }\n@@ -2005,11 +2003,12 @@ mod tests {\n     }\n \n     fn do_resolve(not_ra_fixture: &str) -> DefMap {\n-        let (db, _file_id) = TestDB::with_single_file(not_ra_fixture);\n+        let (db, file_id) = TestDB::with_single_file(not_ra_fixture);\n         let krate = db.test_crate();\n \n         let edition = db.crate_graph()[krate].edition;\n-        let def_map = DefMap::empty(krate, edition);\n+        let module_origin = ModuleOrigin::CrateRoot { definition: file_id };\n+        let def_map = DefMap::empty(krate, edition, module_origin);\n         do_collect_defs(&db, def_map)\n     }\n "}, {"sha": "7e8e41a41788cd3d1e89cc6f824c6c4218807e77", "filename": "docs/dev/style.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8d19fedb8b2dc23703f9860eb39383422d92ae3/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8d19fedb8b2dc23703f9860eb39383422d92ae3/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=c8d19fedb8b2dc23703f9860eb39383422d92ae3", "patch": "@@ -312,7 +312,7 @@ Even when generality is not required, consistency is important.\n \n ## Constructors\n \n-Prefer `Default` to zero-argument `new` function\n+Prefer `Default` to zero-argument `new` function.\n \n ```rust\n // GOOD\n@@ -341,6 +341,10 @@ Use `Vec::new` rather than `vec![]`.\n \n **Rationale:** uniformity, strength reduction.\n \n+Avoid using \"dummy\" states to implement a `Default`.\n+If a type doesn't have a sensible default, empty value, don't hide it.\n+Let the caller explicitly decide what's the right initial state is.\n+\n ## Functions Over Objects\n \n Avoid creating \"doer\" objects."}]}