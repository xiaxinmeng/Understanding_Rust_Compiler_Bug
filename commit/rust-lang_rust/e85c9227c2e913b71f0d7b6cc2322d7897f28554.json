{"sha": "e85c9227c2e913b71f0d7b6cc2322d7897f28554", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NWM5MjI3YzJlOTEzYjcxZjBkN2I2Y2MyMzIyZDc4OTdmMjg1NTQ=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-02-27T07:51:12Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-03-18T14:05:28Z"}, "message": "rustc_driver: get rid of extra thread on Unix", "tree": {"sha": "09166f2288b127880f94b3d54360ab645d1fbb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09166f2288b127880f94b3d54360ab645d1fbb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e85c9227c2e913b71f0d7b6cc2322d7897f28554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e85c9227c2e913b71f0d7b6cc2322d7897f28554", "html_url": "https://github.com/rust-lang/rust/commit/e85c9227c2e913b71f0d7b6cc2322d7897f28554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e85c9227c2e913b71f0d7b6cc2322d7897f28554/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa27ee30972f16320ae4a8887c8f54616fff819", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa27ee30972f16320ae4a8887c8f54616fff819", "html_url": "https://github.com/rust-lang/rust/commit/8aa27ee30972f16320ae4a8887c8f54616fff819"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "8605764497a168dcabeb17653bb0405d7b9d92fe", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e85c9227c2e913b71f0d7b6cc2322d7897f28554/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85c9227c2e913b71f0d7b6cc2322d7897f28554/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e85c9227c2e913b71f0d7b6cc2322d7897f28554", "patch": "@@ -24,6 +24,7 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n+#![feature(rustc_stack_internals)]\n \n extern crate arena;\n extern crate getopts;\n@@ -1461,16 +1462,50 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n     // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n     const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n \n-    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+    #[cfg(unix)]\n+    let spawn_thread = unsafe {\n+        // Fetch the current resource limits\n+        let mut rlim = libc::rlimit {\n+            rlim_cur: 0,\n+            rlim_max: 0,\n+        };\n+        if libc::getrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n+            let err = io::Error::last_os_error();\n+            error!(\"in_rustc_thread: error calling getrlimit: {}\", err);\n+            true\n+        } else if rlim.rlim_max < STACK_SIZE as libc::rlim_t {\n+            true\n+        } else {\n+            rlim.rlim_cur = STACK_SIZE as libc::rlim_t;\n+            if libc::setrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n+                let err = io::Error::last_os_error();\n+                error!(\"in_rustc_thread: error calling setrlimit: {}\", err);\n+                true\n+            } else {\n+                std::thread::update_stack_guard();\n+                false\n+            }\n+        }\n+    };\n \n-    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n-    // then *don't* set it explicitly.\n-    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n-        cfg = cfg.stack_size(STACK_SIZE);\n-    }\n+    #[cfg(not(unix))]\n+    let spawn_thread = true;\n+\n+    // The or condition is added from backward compatibility.\n+    if spawn_thread || env::var_os(\"RUST_MIN_STACK\").is_some() {\n+        let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+\n+        // FIXME: Hacks on hacks. If the env is trying to override the stack size\n+        // then *don't* set it explicitly.\n+        if env::var_os(\"RUST_MIN_STACK\").is_none() {\n+            cfg = cfg.stack_size(STACK_SIZE);\n+        }\n \n-    let thread = cfg.spawn(f);\n-    thread.unwrap().join()\n+        let thread = cfg.spawn(f);\n+        thread.unwrap().join()\n+    } else {\n+        Ok(f())\n+    }\n }\n \n /// Get a list of extra command-line flags provided by the user, as strings."}, {"sha": "d75cbded7347b2936d03b0ac571b93e2902d63e2", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e85c9227c2e913b71f0d7b6cc2322d7897f28554/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85c9227c2e913b71f0d7b6cc2322d7897f28554/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=e85c9227c2e913b71f0d7b6cc2322d7897f28554", "patch": "@@ -50,3 +50,7 @@ pub fn set(stack_guard: Option<Guard>, thread: Thread) {\n         thread,\n     }));\n }\n+\n+pub fn reset_guard(stack_guard: Option<Guard>) {\n+    THREAD_INFO.with(move |c| c.borrow_mut().as_mut().unwrap().stack_guard = stack_guard);\n+}"}, {"sha": "b686ddc205ea7865cca72ab7354c8e519ea53e62", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e85c9227c2e913b71f0d7b6cc2322d7897f28554/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85c9227c2e913b71f0d7b6cc2322d7897f28554/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=e85c9227c2e913b71f0d7b6cc2322d7897f28554", "patch": "@@ -208,6 +208,14 @@ pub use self::local::{LocalKey, AccessError};\n #[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n #[doc(hidden)] pub use self::local::os::Key as __OsLocalKeyInner;\n \n+/// Function used for resetting the main stack guard address after setrlimit().\n+/// This is POSIX specific and unlikely to be directly stabilized.\n+#[unstable(feature = \"rustc_stack_internals\", issue = \"0\")]\n+pub unsafe fn update_stack_guard() {\n+    let main_guard = imp::guard::init();\n+    thread_info::reset_guard(main_guard);\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Builder\n ////////////////////////////////////////////////////////////////////////////////"}]}