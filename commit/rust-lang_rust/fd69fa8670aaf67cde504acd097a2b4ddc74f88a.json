{"sha": "fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjlmYTg2NzBhYWY2N2NkZTUwNGFjZDA5N2EyYjRkZGM3NGY4OGE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-12T20:08:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:29Z"}, "message": "Add missing root_path when generating links using href", "tree": {"sha": "eea498abfa4f9a2cda08f0c3bdc95240f6367952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea498abfa4f9a2cda08f0c3bdc95240f6367952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "html_url": "https://github.com/rust-lang/rust/commit/fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a48d1a4de1e26e08780a026daed3c7db743ff2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a48d1a4de1e26e08780a026daed3c7db743ff2f", "html_url": "https://github.com/rust-lang/rust/commit/1a48d1a4de1e26e08780a026daed3c7db743ff2f"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "eb7c12d13c339029bacf8566c62837f88dae3071", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "patch": "@@ -484,7 +484,11 @@ crate enum HrefError {\n     NotInExternalCache,\n }\n \n-crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<String>), HrefError> {\n+crate fn href_with_root_path(\n+    did: DefId,\n+    cx: &Context<'_>,\n+    root_path: Option<&str>,\n+) -> Result<(String, ItemType, Vec<String>), HrefError> {\n     let cache = &cx.cache();\n     let relative_to = &cx.current;\n     fn to_module_fqp(shortty: ItemType, fqp: &[String]) -> &[String] {\n@@ -495,6 +499,7 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<Str\n         return Err(HrefError::Private);\n     }\n \n+    let mut is_remote = false;\n     let (fqp, shortty, mut url_parts) = match cache.paths.get(&did) {\n         Some(&(ref fqp, shortty)) => (fqp, shortty, {\n             let module_fqp = to_module_fqp(shortty, fqp);\n@@ -508,6 +513,7 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<Str\n                     shortty,\n                     match cache.extern_locations[&did.krate] {\n                         ExternalLocation::Remote(ref s) => {\n+                            is_remote = true;\n                             let s = s.trim_end_matches('/');\n                             let mut s = vec![s];\n                             s.extend(module_fqp[..].iter().map(String::as_str));\n@@ -522,6 +528,12 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<Str\n             }\n         }\n     };\n+    if !is_remote {\n+        if let Some(root_path) = root_path {\n+            let root = root_path.trim_end_matches('/');\n+            url_parts.insert(0, root);\n+        }\n+    }\n     let last = &fqp.last().unwrap()[..];\n     let filename;\n     match shortty {\n@@ -536,6 +548,10 @@ crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<Str\n     Ok((url_parts.join(\"/\"), shortty, fqp.to_vec()))\n }\n \n+crate fn href(did: DefId, cx: &Context<'_>) -> Result<(String, ItemType, Vec<String>), HrefError> {\n+    href_with_root_path(did, cx, None)\n+}\n+\n /// Both paths should only be modules.\n /// This is because modules get their own directories; that is, `std::vec` and `std::vec::Vec` will\n /// both need `../iter/trait.Iterator.html` to get at the iterator trait."}, {"sha": "47c870645ac484de952594f98de17c610f207778", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "patch": "@@ -580,12 +580,19 @@ fn string<T: Display>(\n         if let Some(href) =\n             context_info.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n                 let context = context_info.context;\n+                // FIXME: later on, it'd be nice to provide two links (if possible) for all items:\n+                // one to the documentation page and one to the source definition.\n+                // FIXME: currently, external items only generate a link to their documentation,\n+                // a link to their definition can be generated using this:\n+                // https://github.com/rust-lang/rust/blob/60f1a2fc4b535ead9c85ce085fdce49b1b097531/src/librustdoc/html/render/context.rs#L315-L338\n                 match href {\n                     LinkFromSrc::Local(span) => context\n                         .href_from_span(*span)\n                         .map(|s| format!(\"{}{}\", context_info.root_path, s)),\n                     LinkFromSrc::External(def_id) => {\n-                        format::href(*def_id, context).map(|(url, _, _)| url)\n+                        format::href_with_root_path(*def_id, context, Some(context_info.root_path))\n+                            .ok()\n+                            .map(|(url, _, _)| url)\n                     }\n                 }\n             })"}, {"sha": "b60f5f433f7f79275d592a4e63d5660fcc0da4b4", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "patch": "@@ -110,6 +110,7 @@ impl<'tcx> SpanMapVisitor<'tcx> {\n                 Some(def_id)\n             }\n             Res::Local(_) => None,\n+            Res::Err => return,\n             _ => return,\n         };\n         if let Some(span) = self.tcx.hir().res_span(path.res) {"}, {"sha": "72a5c1a0ae97e53284e9245127d5a621970e0663", "filename": "src/test/rustdoc/auxiliary/source_code.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Ftest%2Frustdoc%2Fauxiliary%2Fsource_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Ftest%2Frustdoc%2Fauxiliary%2Fsource_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fsource_code.rs?ref=fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "patch": "@@ -0,0 +1 @@\n+pub struct SourceCode;"}, {"sha": "51c4835b5aae6fbe1d503a890a56e31649462302", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd69fa8670aaf67cde504acd097a2b4ddc74f88a/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=fd69fa8670aaf67cde504acd097a2b4ddc74f88a", "patch": "@@ -1,7 +1,11 @@\n // compile-flags: -Zunstable-options --generate-link-to-definition\n+// aux-build:source_code.rs\n+// build-aux-docs\n \n #![crate_name = \"foo\"]\n \n+extern crate source_code;\n+\n // @has 'src/foo/check-source-code-urls-to-def.rs.html'\n \n // @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#1-17\"]' 'bar'\n@@ -23,13 +27,14 @@ impl Foo {\n fn babar() {}\n \n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\"]' 'String'\n-// @count - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#17\"]' 5\n-pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar) {\n+// @count - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#21\"]' 5\n+// @has - '//a[@href=\"../../source_code/struct.SourceCode.html\"]' 'source_code::SourceCode'\n+pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::SourceCode) {\n     let x = 12;\n     let y: Foo = Foo;\n     let z: Bar = bar::Bar { field: Foo };\n     babar();\n-    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#20\"]' 'hello'\n+    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#24\"]' 'hello'\n     y.hello();\n }\n "}]}