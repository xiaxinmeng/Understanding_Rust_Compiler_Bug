{"sha": "9815667b8b59e5351c257f7a62f6c0874fabd7ca", "node_id": "C_kwDOAAsO6NoAKDk4MTU2NjdiOGI1OWU1MzUxYzI1N2Y3YTYyZjZjMDg3NGZhYmQ3Y2E", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-08-03T04:46:07Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-08-05T17:28:00Z"}, "message": "implement #98982\nwhen loop as tail expression for miss match type E0308 error, recursively get\nthe return statement and add diagnostic information on it\nuse rustc_hir::intravisit to collect the return expression\n\tmodified:   compiler/rustc_typeck/src/check/coercion.rs\n\tnew file:   src/test/ui/typeck/issue-98982.rs\n\tnew file:   src/test/ui/typeck/issue-98982.stderr", "tree": {"sha": "a257082c72f595e8dc77795bb4c90cd0b5001f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a257082c72f595e8dc77795bb4c90cd0b5001f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9815667b8b59e5351c257f7a62f6c0874fabd7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9815667b8b59e5351c257f7a62f6c0874fabd7ca", "html_url": "https://github.com/rust-lang/rust/commit/9815667b8b59e5351c257f7a62f6c0874fabd7ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9815667b8b59e5351c257f7a62f6c0874fabd7ca/comments", "author": null, "committer": null, "parents": [{"sha": "4493a0f4724c0bae1436242d76cccc9c0a287b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "html_url": "https://github.com/rust-lang/rust/commit/4493a0f4724c0bae1436242d76cccc9c0a287b80"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "fc7ace0e6aa4c94295b0802f40231a1289aedc27", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9815667b8b59e5351c257f7a62f6c0874fabd7ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9815667b8b59e5351c257f7a62f6c0874fabd7ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=9815667b8b59e5351c257f7a62f6c0874fabd7ca", "patch": "@@ -38,10 +38,12 @@\n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n use rustc_errors::{\n-    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::Expr;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n use rustc_infer::traits::{Obligation, TraitEngine, TraitEngineExt};\n@@ -87,6 +89,19 @@ impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {\n \n type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;\n \n+struct CollectRetsVisitor<'tcx> {\n+    ret_exprs: Vec<&'tcx hir::Expr<'tcx>>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CollectRetsVisitor<'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        if let hir::ExprKind::Ret(_) = expr.kind {\n+            self.ret_exprs.push(expr);\n+        }\n+        intravisit::walk_expr(self, expr);\n+    }\n+}\n+\n /// Coercing a mutable reference to an immutable works, while\n /// coercing `&T` to `&mut T` should be forbidden.\n fn coerce_mutbls<'tcx>(\n@@ -1481,6 +1496,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n                 let mut err;\n                 let mut unsized_return = false;\n+                let mut visitor = CollectRetsVisitor { ret_exprs: vec![] };\n                 match *cause.code() {\n                     ObligationCauseCode::ReturnNoExpression => {\n                         err = struct_span_err!(\n@@ -1506,6 +1522,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         if !fcx.tcx.features().unsized_locals {\n                             unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n                         }\n+                        if let Some(expression) = expression\n+                            && let hir::ExprKind::Loop(loop_blk, ..) = expression.kind {\n+                              intravisit::walk_block(& mut visitor, loop_blk);\n+                        }\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n                         err = self.report_return_mismatched_types(\n@@ -1551,12 +1571,39 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     );\n                 }\n \n+                if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {\n+                    self.note_unreachable_loop_return(&mut err, &expr, &visitor.ret_exprs);\n+                }\n                 err.emit_unless(unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.ty_error());\n             }\n         }\n     }\n+    fn note_unreachable_loop_return<'a>(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a, ErrorGuaranteed>,\n+        expr: &hir::Expr<'tcx>,\n+        ret_exprs: &Vec<&'tcx hir::Expr<'tcx>>,\n+    ) {\n+        let hir::ExprKind::Loop(_, _, _, loop_span) = expr.kind else { return;};\n+        let mut span: MultiSpan = vec![loop_span].into();\n+        span.push_span_label(loop_span, \"this might have zero elements to iterate on\".to_string());\n+        for ret_expr in ret_exprs {\n+            span.push_span_label(\n+                ret_expr.span,\n+                \"if the loop doesn't execute, this value would never get returned\".to_string(),\n+            );\n+        }\n+        err.span_note(\n+            span,\n+            \"the function expects a value to always be returned, but loops might run zero times\",\n+        );\n+        err.help(\n+            \"return a value for the case when the loop has zero elements to iterate on, or \\\n+           consider changing the return type to account for that possibility\",\n+        );\n+    }\n \n     fn report_return_mismatched_types<'a>(\n         &self,"}, {"sha": "e79f6a75fdec5df51c0cb9b48aea32af9f6cd0f8", "filename": "src/test/ui/for-loop-while/break-while-condition.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9815667b8b59e5351c257f7a62f6c0874fabd7ca/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9815667b8b59e5351c257f7a62f6c0874fabd7ca/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr?ref=9815667b8b59e5351c257f7a62f6c0874fabd7ca", "patch": "@@ -31,6 +31,14 @@ LL | |             }\n    |\n    = note:   expected type `!`\n            found unit type `()`\n+note: the function expects a value to always be returned, but loops might run zero times\n+  --> $DIR/break-while-condition.rs:24:13\n+   |\n+LL |             while false {\n+   |             ^^^^^^^^^^^ this might have zero elements to iterate on\n+LL |                 return\n+   |                 ------ if the loop doesn't execute, this value would never get returned\n+   = help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2553824bbfebb64720ac106dfd9f46e6d6a2534b", "filename": "src/test/ui/typeck/issue-98982.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9815667b8b59e5351c257f7a62f6c0874fabd7ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9815667b8b59e5351c257f7a62f6c0874fabd7ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.rs?ref=9815667b8b59e5351c257f7a62f6c0874fabd7ca", "patch": "@@ -0,0 +1,9 @@\n+fn foo() -> i32 {\n+    for i in 0..0 {\n+    //~^ ERROR: mismatched types [E0308]\n+        return i;\n+    }\n+    //~| help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n+}\n+\n+fn main() {}"}, {"sha": "3c9806ac965fbc631f6c579805d814d5ee13ab5d", "filename": "src/test/ui/typeck/issue-98982.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9815667b8b59e5351c257f7a62f6c0874fabd7ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9815667b8b59e5351c257f7a62f6c0874fabd7ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.stderr?ref=9815667b8b59e5351c257f7a62f6c0874fabd7ca", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-98982.rs:2:5\n+   |\n+LL |   fn foo() -> i32 {\n+   |               --- expected `i32` because of return type\n+LL | /     for i in 0..0 {\n+LL | |\n+LL | |         return i;\n+LL | |     }\n+   | |_____^ expected `i32`, found `()`\n+   |\n+note: the function expects a value to always be returned, but loops might run zero times\n+  --> $DIR/issue-98982.rs:2:5\n+   |\n+LL |     for i in 0..0 {\n+   |     ^^^^^^^^^^^^^ this might have zero elements to iterate on\n+LL |\n+LL |         return i;\n+   |         -------- if the loop doesn't execute, this value would never get returned\n+   = help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}