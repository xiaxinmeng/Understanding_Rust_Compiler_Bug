{"sha": "fb4b62b87bd35019e2c797d30572ba8188feff9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNGI2MmI4N2JkMzUwMTllMmM3OTdkMzA1NzJiYTgxODhmZWZmOWM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-27T19:47:24Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-27T20:17:42Z"}, "message": "Make check_place iterate instead of recurse", "tree": {"sha": "63a4d2a3a2d553e20f9b13a93c58dbc2d683d26b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a4d2a3a2d553e20f9b13a93c58dbc2d683d26b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4b62b87bd35019e2c797d30572ba8188feff9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4b62b87bd35019e2c797d30572ba8188feff9c", "html_url": "https://github.com/rust-lang/rust/commit/fb4b62b87bd35019e2c797d30572ba8188feff9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4b62b87bd35019e2c797d30572ba8188feff9c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acaf284e5580c5f65489a062635f1829551bec08", "url": "https://api.github.com/repos/rust-lang/rust/commits/acaf284e5580c5f65489a062635f1829551bec08", "html_url": "https://github.com/rust-lang/rust/commit/acaf284e5580c5f65489a062635f1829551bec08"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "a1e2d0683d3800a37f3184e06299d15e80ad0d7c", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb4b62b87bd35019e2c797d30572ba8188feff9c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4b62b87bd35019e2c797d30572ba8188feff9c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=fb4b62b87bd35019e2c797d30572ba8188feff9c", "patch": "@@ -250,28 +250,29 @@ fn check_operand(\n     }\n }\n \n-fn check_place(\n-    place: &Place<'tcx>,\n-    span: Span,\n-) -> McfResult {\n-    match place {\n-        Place::Base(PlaceBase::Local(_)) => Ok(()),\n-        // promoteds are always fine, they are essentially constants\n-        Place::Base(PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. })) => Ok(()),\n-        Place::Base(PlaceBase::Static(box Static { kind: StaticKind::Static(_), .. })) =>\n-            Err((span, \"cannot access `static` items in const fn\".into())),\n-        Place::Projection(proj) => {\n+fn check_place(place: &Place<'tcx>, span: Span) -> McfResult {\n+    place.iterate(|place_base, place_projection| {\n+        for proj in place_projection {\n             match proj.elem {\n-                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. }\n-                | ProjectionElem::Deref | ProjectionElem::Field(..) | ProjectionElem::Index(_) => {\n-                    check_place(&proj.base, span)\n-                }\n-                | ProjectionElem::Downcast(..) => {\n-                    Err((span, \"`match` or `if let` in `const fn` is unstable\".into()))\n+                ProjectionElem::Downcast(..) => {\n+                    return Err((span, \"`match` or `if let` in `const fn` is unstable\".into()));\n                 }\n+                ProjectionElem::ConstantIndex { .. }\n+                | ProjectionElem::Subslice { .. }\n+                | ProjectionElem::Deref\n+                | ProjectionElem::Field(..)\n+                | ProjectionElem::Index(_) => {}\n             }\n         }\n-    }\n+\n+        match place_base {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static(_), .. }) => {\n+                Err((span, \"cannot access `static` items in const fn\".into()))\n+            }\n+            PlaceBase::Local(_)\n+            | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => Ok(()),\n+        }\n+    })\n }\n \n fn check_terminator("}]}