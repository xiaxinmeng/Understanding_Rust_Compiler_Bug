{"sha": "e3930463801cfcc4c98974d627e8bbe8c9880fa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOTMwNDYzODAxY2ZjYzRjOTg5NzRkNjI3ZThiYmU4Yzk4ODBmYTA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-05T19:22:58Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-11T02:42:37Z"}, "message": "Simplify code since CEnum is always immediate now.", "tree": {"sha": "065bac410e05fdbc361f748c3915f1ae21df11b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065bac410e05fdbc361f748c3915f1ae21df11b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3930463801cfcc4c98974d627e8bbe8c9880fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3930463801cfcc4c98974d627e8bbe8c9880fa0", "html_url": "https://github.com/rust-lang/rust/commit/e3930463801cfcc4c98974d627e8bbe8c9880fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3930463801cfcc4c98974d627e8bbe8c9880fa0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08290b20c4e406349d6bb11422558b095223a4ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/08290b20c4e406349d6bb11422558b095223a4ac", "html_url": "https://github.com/rust-lang/rust/commit/08290b20c4e406349d6bb11422558b095223a4ac"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "1b97a8d010cfeafbe13f12ae03c000505beec03c", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e3930463801cfcc4c98974d627e8bbe8c9880fa0/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3930463801cfcc4c98974d627e8bbe8c9880fa0/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=e3930463801cfcc4c98974d627e8bbe8c9880fa0", "patch": "@@ -260,37 +260,24 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         let r_t_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                         let ll_t_in = type_of::immediate_type_of(bcx.ccx, operand.ty);\n                         let ll_t_out = type_of::immediate_type_of(bcx.ccx, cast_ty);\n-                        let (llval, signed) = if let CastTy::Int(IntTy::CEnum) = r_t_in {\n-                            let l = bcx.ccx.layout_of(operand.ty);\n-                            let discr = match operand.val {\n-                                OperandValue::Immediate(llval) => llval,\n-                                OperandValue::Ref(llptr) => {\n-                                    adt::trans_get_discr(&bcx, operand.ty, llptr, None, true)\n-                                }\n-                                OperandValue::Pair(..) => bug!(\"Unexpected Pair operand\")\n-                            };\n-                            let (signed, min, max) = match l {\n-                                &Layout::CEnum { signed, min, max, .. } => {\n-                                    (signed, min, max)\n-                                }\n-                                _ => bug!(\"CEnum {:?} is not an enum\", operand)\n-                            };\n-\n+                        let llval = operand.immediate();\n+                        let l = bcx.ccx.layout_of(operand.ty);\n+                        let signed = if let Layout::CEnum { signed, min, max, .. } = *l {\n                             if max > min {\n                                 // We want `table[e as usize]` to not\n                                 // have bound checks, and this is the most\n                                 // convenient place to put the `assume`.\n \n                                 base::call_assume(&bcx, bcx.icmp(\n                                     llvm::IntULE,\n-                                    discr,\n-                                    C_integral(common::val_ty(discr), max, false)\n-                                ))\n+                                    llval,\n+                                    C_integral(common::val_ty(llval), max, false)\n+                                ));\n                             }\n \n-                            (discr, signed)\n+                            signed\n                         } else {\n-                            (operand.immediate(), operand.ty.is_signed())\n+                            operand.ty.is_signed()\n                         };\n \n                         let newval = match (r_t_in, r_t_out) {"}]}