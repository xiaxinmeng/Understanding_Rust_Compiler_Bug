{"sha": "eaadb8947b850a025404082f6297766c4680a42a", "node_id": "C_kwDOAAsO6NoAKGVhYWRiODk0N2I4NTBhMDI1NDA0MDgyZjYyOTc3NjZjNDY4MGE0MmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T16:57:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T16:57:19Z"}, "message": "Auto merge of #100591 - est31:stabilization_placeholder, r=Mark-Simulacrum\n\nRequire stabilizations to use a placeholder instead of writing out stabilization version\n\nImplements the idea from [this](https://rust-lang.zulipchat.com/#narrow/stream/241545-t-release/topic/libs.20stabilization.20placeholder) zulip stream.\n\nIt's a common phenomenon that feature stabilizations don't make it into a particular release, but the version is still inaccurate. Often this is caught in the PR, but it can also require subsequent changes to adjust/correct the version. A list with examples of such PRs is given in #100577, but it's far from complete.\n\nThis PR requires stabilization PRs to use the placeholder `CURRENT_RUSTC_VERSION`, enforced via tidy tooling. The PR also adds a tool that replaces the placeholder with the version number. It can be invoked via `./x.py run src/tools/replace-version-placeholder` and is supposed to be ran upon beta branching as well as version bumping and any backports to the beta branch.  I filed PRs to the dev guide and forge to document these changes in the release and stabilization workflows:\n\n* The [dev guide](https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#determining-the-stabilization-version) PR: https://github.com/rust-lang/rustc-dev-guide/pull/1443\n* The [std dev guide](https://std-dev-guide.rust-lang.org/) PR: https://github.com/rust-lang/std-dev-guide/pull/43\n* The [forge](https://github.com/rust-lang/rust-forge) PR: https://github.com/rust-lang/rust-forge/pull/643\n\nAlternative to #100577 which added checking.", "tree": {"sha": "18ace630fe710347223eb01bb339be5f28635d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ace630fe710347223eb01bb339be5f28635d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaadb8947b850a025404082f6297766c4680a42a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaadb8947b850a025404082f6297766c4680a42a", "html_url": "https://github.com/rust-lang/rust/commit/eaadb8947b850a025404082f6297766c4680a42a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaadb8947b850a025404082f6297766c4680a42a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332cc8fb752fe98c21837ed6f3571f6adb0d08b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/332cc8fb752fe98c21837ed6f3571f6adb0d08b8", "html_url": "https://github.com/rust-lang/rust/commit/332cc8fb752fe98c21837ed6f3571f6adb0d08b8"}, {"sha": "d32ff14b86c72f55a113a3f477c42b2995e8c620", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32ff14b86c72f55a113a3f477c42b2995e8c620", "html_url": "https://github.com/rust-lang/rust/commit/d32ff14b86c72f55a113a3f477c42b2995e8c620"}], "stats": {"total": 357, "additions": 271, "deletions": 86}, "files": [{"sha": "dda8c03e256f1475677470e512a812ada8910311", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -3293,6 +3293,14 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"replace-version-placeholder\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"tidy\",\n+ \"walkdir\",\n+]\n+\n [[package]]\n name = \"rls\"\n version = \"1.41.0\""}, {"sha": "1e83f05e0ca74ed2d0b849654df63464635bbec0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -35,6 +35,7 @@ members = [\n   \"src/tools/jsondocck\",\n   \"src/tools/html-checker\",\n   \"src/tools/bump-stage0\",\n+  \"src/tools/replace-version-placeholder\",\n   \"src/tools/lld-wrapper\",\n ]\n "}, {"sha": "fb1ad8d6beb3dfbc417d2a52c20264d0c85b9f80", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -187,7 +187,7 @@ declare_features! (\n     /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     /// Allows `'a: { break 'a; }`.\n-    (accepted, label_break_value, \"1.65.0\", Some(48594), None),\n+    (accepted, label_break_value, \"CURRENT_RUSTC_VERSION\", Some(48594), None),\n     /// Allows `if/while p && let q = r && ...` chains.\n     (accepted, let_chains, \"1.64.0\", Some(53667), None),\n     /// Allows `break {expr}` with a value inside `loop`s."}, {"sha": "70b6bfd1e582d1422eb92148c145fe4725bb4016", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -54,6 +54,14 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                         }\n                     }\n                 }\n+                const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n+\n+                if let Some(s) = since && s.as_str() == VERSION_PLACEHOLDER {\n+                    let version = option_env!(\"CFG_VERSION\").unwrap_or(\"<current>\");\n+                    let version = version.split(' ').next().unwrap();\n+                    since = Some(Symbol::intern(&version));\n+                }\n+\n                 if let Some(feature) = feature {\n                     // This additional check for stability is to make sure we\n                     // don't emit additional, irrelevant errors for malformed"}, {"sha": "b8486af00186b74b0b7bd01ec5e669b0425448ce", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -95,8 +95,8 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n     /// refactored.\n-    #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n-    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn cast_mut(self) -> *mut T {\n         self as _\n     }"}, {"sha": "a1836140559345faedb7f3011899e4e89b492cca", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -100,8 +100,8 @@ impl<T: ?Sized> *mut T {\n     /// coercion.\n     ///\n     /// [`cast_mut`]: #method.cast_mut\n-    #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n-    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn cast_const(self) -> *const T {\n         self as _\n     }"}, {"sha": "354200d4c95e99a0261d6ea5a2b5568560ca4e9f", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -58,7 +58,7 @@\n //! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime might not actually change\n //! how backtraces are captured.\n \n-#![stable(feature = \"backtrace\", since = \"1.65.0\")]\n+#![stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n \n #[cfg(test)]\n mod tests;\n@@ -104,29 +104,29 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n-#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n #[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n \n /// The current status of a backtrace, indicating whether it was captured or\n /// whether it is empty for some other reason.\n-#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n #[non_exhaustive]\n #[derive(Debug, PartialEq, Eq)]\n pub enum BacktraceStatus {\n     /// Capturing a backtrace is not supported, likely because it's not\n     /// implemented for the current platform.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     Unsupported,\n     /// Capturing a backtrace has been disabled through either the\n     /// `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` environment variables.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     Disabled,\n     /// A backtrace has been captured and the `Backtrace` should print\n     /// reasonable information when rendered.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     Captured,\n }\n \n@@ -173,7 +173,7 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n-#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {\n@@ -289,7 +289,7 @@ impl Backtrace {\n     ///\n     /// To forcibly capture a backtrace regardless of environment variables, use\n     /// the `Backtrace::force_capture` function.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn capture() -> Backtrace {\n         if !Backtrace::enabled() {\n@@ -308,16 +308,16 @@ impl Backtrace {\n     /// Note that capturing a backtrace can be an expensive operation on some\n     /// platforms, so this should be used with caution in performance-sensitive\n     /// parts of code.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn force_capture() -> Backtrace {\n         Backtrace::create(Backtrace::force_capture as usize)\n     }\n \n     /// Forcibly captures a disabled backtrace, regardless of environment\n     /// variable configuration.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n-    #[rustc_const_stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn disabled() -> Backtrace {\n         Backtrace { inner: Inner::Disabled }\n     }\n@@ -361,7 +361,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n-    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n@@ -381,7 +381,7 @@ impl<'a> Backtrace {\n     }\n }\n \n-#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+#[stable(feature = \"backtrace\", since = \"CURRENT_RUSTC_VERSION\")]\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}, {"sha": "c4710e8faecbee40da707f1121f1d7425fbaabef", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -647,6 +647,7 @@ impl<'a> Builder<'a> {\n                 test::CrateRustdocJsonTypes,\n                 test::Linkcheck,\n                 test::TierCheck,\n+                test::ReplacePlaceholderTest,\n                 test::Cargotest,\n                 test::Cargo,\n                 test::Rls,\n@@ -746,7 +747,12 @@ impl<'a> Builder<'a> {\n                 install::Src,\n                 install::Rustc\n             ),\n-            Kind::Run => describe!(run::ExpandYamlAnchors, run::BuildManifest, run::BumpStage0),\n+            Kind::Run => describe!(\n+                run::ExpandYamlAnchors,\n+                run::BuildManifest,\n+                run::BumpStage0,\n+                run::ReplaceVersionPlaceholder,\n+            ),\n             // These commands either don't use paths, or they're special-cased in Build::build()\n             Kind::Clean | Kind::Format | Kind::Setup => vec![],\n         }"}, {"sha": "511872903d14e29d7e2c28ff6efa7b2584785a3d", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -103,3 +103,25 @@ impl Step for BumpStage0 {\n         builder.run(&mut cmd);\n     }\n }\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct ReplaceVersionPlaceholder;\n+\n+impl Step for ReplaceVersionPlaceholder {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/replace-version-placeholder\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(ReplaceVersionPlaceholder);\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let mut cmd = builder.tool_cmd(Tool::ReplaceVersionPlaceholder);\n+        cmd.arg(&builder.src);\n+        builder.run(&mut cmd);\n+    }\n+}"}, {"sha": "9cbdb3aca3223b02b42b507aaa97a08b1c0367d6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -2527,6 +2527,43 @@ impl Step for TierCheck {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct ReplacePlaceholderTest;\n+\n+impl Step for ReplacePlaceholderTest {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    /// Ensure the version placeholder replacement tool builds\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.info(\"build check for version replacement placeholder\");\n+\n+        // Test the version placeholder replacement tool itself.\n+        let bootstrap_host = builder.config.build;\n+        let compiler = builder.compiler(0, bootstrap_host);\n+        let cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolBootstrap,\n+            bootstrap_host,\n+            \"test\",\n+            \"src/tools/replace-version-placeholder\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        try_run(builder, &mut cargo.into());\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/replace-version-placeholder\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Self);\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct LintDocs {\n     pub compiler: Compiler,"}, {"sha": "5bb40014eb97f20f9977bcf469b106f6379736a2", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -378,6 +378,7 @@ bootstrap_tool!(\n     JsonDocCk, \"src/tools/jsondocck\", \"jsondocck\";\n     HtmlChecker, \"src/tools/html-checker\", \"html-checker\";\n     BumpStage0, \"src/tools/bump-stage0\", \"bump-stage0\";\n+    ReplaceVersionPlaceholder, \"src/tools/replace-version-placeholder\", \"replace-version-placeholder\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "346ce6bd1dbfd2ec71a436058306ad840eabdfe3", "filename": "src/tools/replace-version-placeholder/Cargo.toml", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Freplace-version-placeholder%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Freplace-version-placeholder%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2FCargo.toml?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -0,0 +1,10 @@\n+[package]\n+name = \"replace-version-placeholder\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]\n+tidy = { path = \"../tidy\" }\n+walkdir = \"2\""}, {"sha": "146e53f2e9a0f16a1bf1e07bfa3fd3e2fb6e23ce", "filename": "src/tools/replace-version-placeholder/src/main.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -0,0 +1,30 @@\n+use std::path::PathBuf;\n+use tidy::{t, walk};\n+\n+pub const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n+\n+fn main() {\n+    let root_path: PathBuf = std::env::args_os().nth(1).expect(\"need path to root of repo\").into();\n+    let version_path = root_path.join(\"src\").join(\"version\");\n+    let version_str = t!(std::fs::read_to_string(&version_path), version_path);\n+    let version_str = version_str.trim();\n+    walk::walk(\n+        &root_path,\n+        &mut |path| {\n+            walk::filter_dirs(path)\n+                // We exempt these as they require the placeholder\n+                // for their operation\n+                || path.ends_with(\"compiler/rustc_passes/src/lib_features.rs\")\n+                || path.ends_with(\"src/tools/tidy/src/features/version.rs\")\n+                || path.ends_with(\"src/tools/replace-version-placeholder\")\n+        },\n+        &mut |entry, contents| {\n+            if !contents.contains(VERSION_PLACEHOLDER) {\n+                return;\n+            }\n+            let new_contents = contents.replace(VERSION_PLACEHOLDER, version_str);\n+            let path = entry.path();\n+            t!(std::fs::write(&path, new_contents), path);\n+        },\n+    );\n+}"}, {"sha": "de292d3305db812cd5113b444dda39b32eff8e55", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -175,6 +175,36 @@ pub fn check(\n         tidy_error!(bad, \"Found {} features without a gate test.\", gate_untested.len());\n     }\n \n+    let (version, channel) = get_version_and_channel(src_path);\n+\n+    let all_features_iter = features\n+        .iter()\n+        .map(|feat| (feat, \"lang\"))\n+        .chain(lib_features.iter().map(|feat| (feat, \"lib\")));\n+    for ((feature_name, feature), kind) in all_features_iter {\n+        let since = if let Some(since) = feature.since { since } else { continue };\n+        if since > version && since != Version::CurrentPlaceholder {\n+            tidy_error!(\n+                bad,\n+                \"The stabilization version {since} of {kind} feature `{feature_name}` is newer than the current {version}\"\n+            );\n+        }\n+        if channel == \"nightly\" && since == version {\n+            tidy_error!(\n+                bad,\n+                \"The stabilization version {since} of {kind} feature `{feature_name}` is written out but should be {}\",\n+                version::VERSION_PLACEHOLDER\n+            );\n+        }\n+        if channel != \"nightly\" && since == Version::CurrentPlaceholder {\n+            tidy_error!(\n+                bad,\n+                \"The placeholder use of {kind} feature `{feature_name}` is not allowed on the {} channel\",\n+                version::VERSION_PLACEHOLDER\n+            );\n+        }\n+    }\n+\n     if *bad {\n         return CollectedFeatures { lib: lib_features, lang: features };\n     }\n@@ -195,6 +225,14 @@ pub fn check(\n     CollectedFeatures { lib: lib_features, lang: features }\n }\n \n+fn get_version_and_channel(src_path: &Path) -> (Version, String) {\n+    let version_str = t!(std::fs::read_to_string(src_path.join(\"version\")));\n+    let version_str = version_str.trim();\n+    let version = t!(std::str::FromStr::from_str(&version_str).map_err(|e| format!(\"{e:?}\")));\n+    let channel_str = t!(std::fs::read_to_string(src_path.join(\"ci\").join(\"channel\")));\n+    (version, channel_str.trim().to_owned())\n+}\n+\n fn format_features<'a>(\n     features: &'a Features,\n     family: &'a str,"}, {"sha": "0830c226caf41c71708b1e4e3ba23d3c88838778", "filename": "src/tools/tidy/src/features/version.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -5,14 +5,22 @@ use std::str::FromStr;\n #[cfg(test)]\n mod tests;\n \n+pub const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n-pub struct Version {\n-    parts: [u32; 3],\n+pub enum Version {\n+    Explicit { parts: [u32; 3] },\n+    CurrentPlaceholder,\n }\n \n impl fmt::Display for Version {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(&format!(\"{}.{}.{}\", self.parts[0], self.parts[1], self.parts[2]))\n+        match self {\n+            Version::Explicit { parts } => {\n+                f.pad(&format!(\"{}.{}.{}\", parts[0], parts[1], parts[2]))\n+            }\n+            Version::CurrentPlaceholder => f.pad(&format!(\"CURRENT\")),\n+        }\n     }\n }\n \n@@ -32,6 +40,9 @@ impl FromStr for Version {\n     type Err = ParseVersionError;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        if s == VERSION_PLACEHOLDER {\n+            return Ok(Version::CurrentPlaceholder);\n+        }\n         let mut iter = s.split('.').map(|part| Ok(part.parse()?));\n \n         let mut part = || iter.next().unwrap_or(Err(ParseVersionError::WrongNumberOfParts));\n@@ -43,6 +54,6 @@ impl FromStr for Version {\n             return Err(ParseVersionError::WrongNumberOfParts);\n         }\n \n-        Ok(Self { parts })\n+        Ok(Version::Explicit { parts })\n     }\n }"}, {"sha": "12d3bdcd76f8257f922951187a3903029f215773", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 11, "deletions": 63, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -3,12 +3,14 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n-use std::fs::File;\n-use std::io::Read;\n-use walkdir::{DirEntry, WalkDir};\n-\n-use std::path::Path;\n-\n+use walk::{filter_dirs, walk, walk_many, walk_no_read};\n+\n+/// A helper macro to `unwrap` a result except also print out details like:\n+///\n+/// * The expression that failed\n+/// * The error itself\n+/// * (optionally) a path connected to the error (e.g. failure to open a file)\n+#[macro_export]\n macro_rules! t {\n     ($e:expr, $p:expr) => {\n         match $e {\n@@ -28,7 +30,8 @@ macro_rules! t {\n macro_rules! tidy_error {\n     ($bad:expr, $fmt:expr) => ({\n         *$bad = true;\n-        eprintln!(\"tidy error: {}\", $fmt);\n+        eprint!(\"tidy error: \");\n+        eprintln!($fmt);\n     });\n     ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n         *$bad = true;\n@@ -52,59 +55,4 @@ pub mod target_specific_tests;\n pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n-\n-fn filter_dirs(path: &Path) -> bool {\n-    let skip = [\n-        \"tidy-test-file\",\n-        \"compiler/rustc_codegen_cranelift\",\n-        \"compiler/rustc_codegen_gcc\",\n-        \"src/llvm-project\",\n-        \"library/backtrace\",\n-        \"library/portable-simd\",\n-        \"library/stdarch\",\n-        \"src/tools/cargo\",\n-        \"src/tools/clippy\",\n-        \"src/tools/miri\",\n-        \"src/tools/rls\",\n-        \"src/tools/rust-analyzer\",\n-        \"src/tools/rust-installer\",\n-        \"src/tools/rustfmt\",\n-        \"src/doc/book\",\n-        // Filter RLS output directories\n-        \"target/rls\",\n-    ];\n-    skip.iter().any(|p| path.ends_with(p))\n-}\n-\n-fn walk_many(\n-    paths: &[&Path],\n-    skip: &mut dyn FnMut(&Path) -> bool,\n-    f: &mut dyn FnMut(&DirEntry, &str),\n-) {\n-    for path in paths {\n-        walk(path, skip, f);\n-    }\n-}\n-\n-fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n-    let mut contents = String::new();\n-    walk_no_read(path, skip, &mut |entry| {\n-        contents.clear();\n-        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n-            contents.clear();\n-        }\n-        f(&entry, &contents);\n-    });\n-}\n-\n-fn walk_no_read(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry)) {\n-    let walker = WalkDir::new(path).into_iter().filter_entry(|e| !skip(e.path()));\n-    for entry in walker {\n-        if let Ok(entry) = entry {\n-            if entry.file_type().is_dir() {\n-                continue;\n-            }\n-            f(&entry);\n-        }\n-    }\n-}\n+pub mod walk;"}, {"sha": "6dca55dfa9fa9097abac561265935f508d1107f3", "filename": "src/tools/tidy/src/walk.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaadb8947b850a025404082f6297766c4680a42a/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=eaadb8947b850a025404082f6297766c4680a42a", "patch": "@@ -0,0 +1,65 @@\n+use std::fs::File;\n+use std::io::Read;\n+use walkdir::{DirEntry, WalkDir};\n+\n+use std::path::Path;\n+\n+pub fn filter_dirs(path: &Path) -> bool {\n+    let skip = [\n+        \"tidy-test-file\",\n+        \"compiler/rustc_codegen_cranelift\",\n+        \"compiler/rustc_codegen_gcc\",\n+        \"src/llvm-project\",\n+        \"library/backtrace\",\n+        \"library/portable-simd\",\n+        \"library/stdarch\",\n+        \"src/tools/cargo\",\n+        \"src/tools/clippy\",\n+        \"src/tools/miri\",\n+        \"src/tools/rls\",\n+        \"src/tools/rust-analyzer\",\n+        \"src/tools/rust-installer\",\n+        \"src/tools/rustfmt\",\n+        \"src/doc/book\",\n+        // Filter RLS output directories\n+        \"target/rls\",\n+    ];\n+    skip.iter().any(|p| path.ends_with(p))\n+}\n+\n+pub fn walk_many(\n+    paths: &[&Path],\n+    skip: &mut dyn FnMut(&Path) -> bool,\n+    f: &mut dyn FnMut(&DirEntry, &str),\n+) {\n+    for path in paths {\n+        walk(path, skip, f);\n+    }\n+}\n+\n+pub fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n+    let mut contents = String::new();\n+    walk_no_read(path, skip, &mut |entry| {\n+        contents.clear();\n+        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n+            contents.clear();\n+        }\n+        f(&entry, &contents);\n+    });\n+}\n+\n+pub(crate) fn walk_no_read(\n+    path: &Path,\n+    skip: &mut dyn FnMut(&Path) -> bool,\n+    f: &mut dyn FnMut(&DirEntry),\n+) {\n+    let walker = WalkDir::new(path).into_iter().filter_entry(|e| !skip(e.path()));\n+    for entry in walker {\n+        if let Ok(entry) = entry {\n+            if entry.file_type().is_dir() {\n+                continue;\n+            }\n+            f(&entry);\n+        }\n+    }\n+}"}]}