{"sha": "8c5dee6f882d51c4ecfe12109557f29fa8893771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNWRlZTZmODgyZDUxYzRlY2ZlMTIxMDk1NTdmMjlmYTg4OTM3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T21:24:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T21:24:30Z"}, "message": "Auto merge of #1155 - divergentdave:shim-posix_fadivse, r=RalfJung\n\nAdd no-op shim for posix_fadvise\n\nThis function is present in the libc crate, but not exposed through the standard library anywhere, so I haven't included a test for it.", "tree": {"sha": "96e1fcac87a90298d959ab6ca7977762095f0b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e1fcac87a90298d959ab6ca7977762095f0b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5dee6f882d51c4ecfe12109557f29fa8893771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5dee6f882d51c4ecfe12109557f29fa8893771", "html_url": "https://github.com/rust-lang/rust/commit/8c5dee6f882d51c4ecfe12109557f29fa8893771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5dee6f882d51c4ecfe12109557f29fa8893771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4be45838fd67885f6f4a8b65db6e7be3681b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4be45838fd67885f6f4a8b65db6e7be3681b4a", "html_url": "https://github.com/rust-lang/rust/commit/5e4be45838fd67885f6f4a8b65db6e7be3681b4a"}, {"sha": "a30914bcddeca1ae58e578a0aa1d49580c0cfcee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a30914bcddeca1ae58e578a0aa1d49580c0cfcee", "html_url": "https://github.com/rust-lang/rust/commit/a30914bcddeca1ae58e578a0aa1d49580c0cfcee"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "7bd85a4e94d42c7602b65378f949afe339587d78", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c5dee6f882d51c4ecfe12109557f29fa8893771/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5dee6f882d51c4ecfe12109557f29fa8893771/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=8c5dee6f882d51c4ecfe12109557f29fa8893771", "patch": "@@ -780,6 +780,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n+            \"posix_fadvise\" => {\n+                // fadvise is only informational, we can ignore it.\n+                this.write_null(dest)?;\n+            }\n+\n             \"mmap\" => {\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let addr = this.read_scalar(args[0])?.not_undef()?;"}, {"sha": "5b7b37db327be78db0208d0ccf9d3df34464f27e", "filename": "tests/run-pass/libc.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8c5dee6f882d51c4ecfe12109557f29fa8893771/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5dee6f882d51c4ecfe12109557f29fa8893771/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=8c5dee6f882d51c4ecfe12109557f29fa8893771", "patch": "@@ -0,0 +1,43 @@\n+// ignore-windows: No libc on Windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+#![feature(rustc_private)]\n+\n+#[allow(unused)] // necessary on macos due to conditional compilation\n+extern crate libc;\n+\n+#[cfg(not(target_os = \"macos\"))]\n+fn test_posix_fadvise() {\n+    use std::convert::TryInto;\n+    use std::env::temp_dir;\n+    use std::fs::{File, remove_file};\n+    use std::io::Write;\n+    use std::os::unix::io::AsRawFd;\n+\n+    let path = temp_dir().join(\"miri_test_libc.txt\");\n+    // Cleanup before test\n+    remove_file(&path).ok();\n+\n+    // Set up an open file\n+    let mut file = File::create(&path).unwrap();\n+    let bytes = b\"Hello, World!\\n\";\n+    file.write(bytes).unwrap();\n+\n+    // Test calling posix_fadvise on a file.\n+    let result = unsafe {\n+        libc::posix_fadvise(\n+            file.as_raw_fd(),\n+            0,\n+            bytes.len().try_into().unwrap(),\n+            libc::POSIX_FADV_DONTNEED,\n+        )\n+    };\n+    drop(file);\n+    remove_file(&path).unwrap();\n+    assert_eq!(result, 0);\n+}\n+\n+fn main() {\n+    #[cfg(not(target_os = \"macos\"))]\n+    test_posix_fadvise();\n+}"}]}