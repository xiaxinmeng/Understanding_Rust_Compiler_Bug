{"sha": "eab201df7028ebb6812c0b1a01702ac6ecfcceed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYjIwMWRmNzAyOGViYjY4MTJjMGIxYTAxNzAyYWM2ZWNmY2NlZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T16:47:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T16:47:05Z"}, "message": "Auto merge of #86003 - pnkfelix:issue-84297-revert-81238, r=Mark-Simulacrum\n\nMake copy/copy_nonoverlapping fn's again\n\nMake copy/copy_nonoverlapping fn's again, rather than intrinsics.\n\nThis a short-term change to address issue #84297.\n\nIt effectively reverts PRs #81167 #81238 (and part of #82967), #83091, and parts of #79684.", "tree": {"sha": "3ea930b40b8dfb019a462c4a2fa59d7a5adadccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea930b40b8dfb019a462c4a2fa59d7a5adadccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eab201df7028ebb6812c0b1a01702ac6ecfcceed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eab201df7028ebb6812c0b1a01702ac6ecfcceed", "html_url": "https://github.com/rust-lang/rust/commit/eab201df7028ebb6812c0b1a01702ac6ecfcceed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eab201df7028ebb6812c0b1a01702ac6ecfcceed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d38752c65359e1f4558d7a06935982fb8b486f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d38752c65359e1f4558d7a06935982fb8b486f", "html_url": "https://github.com/rust-lang/rust/commit/47d38752c65359e1f4558d7a06935982fb8b486f"}, {"sha": "f08f933b7c161c3e2a9095c659db04c3b1a2ac2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f08f933b7c161c3e2a9095c659db04c3b1a2ac2f", "html_url": "https://github.com/rust-lang/rust/commit/f08f933b7c161c3e2a9095c659db04c3b1a2ac2f"}], "stats": {"total": 639, "additions": 225, "deletions": 414}, "files": [{"sha": "70ab27cbfac57172d489d784cd92268920195faa", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 186, "deletions": 151, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -1742,157 +1742,6 @@ extern \"rust-intrinsic\" {\n     /// Allocate at compile time. Should not be called at runtime.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n-\n-    /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n-    /// and destination must *not* overlap.\n-    ///\n-    /// For regions of memory which might overlap, use [`copy`] instead.\n-    ///\n-    /// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n-    /// with the argument order swapped.\n-    ///\n-    /// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n-    ///\n-    /// # Safety\n-    ///\n-    /// Behavior is undefined if any of the following conditions are violated:\n-    ///\n-    /// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * Both `src` and `dst` must be properly aligned.\n-    ///\n-    /// * The region of memory beginning at `src` with a size of `count *\n-    ///   size_of::<T>()` bytes must *not* overlap with the region of memory\n-    ///   beginning at `dst` with the same size.\n-    ///\n-    /// Like [`read`], `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of\n-    /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using *both* the values\n-    /// in the region beginning at `*src` and the region beginning at `*dst` can\n-    /// [violate memory safety][read-ownership].\n-    ///\n-    /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n-    /// `0`, the pointers must be non-null and properly aligned.\n-    ///\n-    /// [`read`]: crate::ptr::read\n-    /// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n-    /// [valid]: crate::ptr#safety\n-    ///\n-    /// # Examples\n-    ///\n-    /// Manually implement [`Vec::append`]:\n-    ///\n-    /// ```\n-    /// use std::ptr;\n-    ///\n-    /// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n-    /// fn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n-    ///     let src_len = src.len();\n-    ///     let dst_len = dst.len();\n-    ///\n-    ///     // Ensure that `dst` has enough capacity to hold all of `src`.\n-    ///     dst.reserve(src_len);\n-    ///\n-    ///     unsafe {\n-    ///         // The call to offset is always safe because `Vec` will never\n-    ///         // allocate more than `isize::MAX` bytes.\n-    ///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n-    ///         let src_ptr = src.as_ptr();\n-    ///\n-    ///         // Truncate `src` without dropping its contents. We do this first,\n-    ///         // to avoid problems in case something further down panics.\n-    ///         src.set_len(0);\n-    ///\n-    ///         // The two regions cannot overlap because mutable references do\n-    ///         // not alias, and two different vectors cannot own the same\n-    ///         // memory.\n-    ///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n-    ///\n-    ///         // Notify `dst` that it now holds the contents of `src`.\n-    ///         dst.set_len(dst_len + src_len);\n-    ///     }\n-    /// }\n-    ///\n-    /// let mut a = vec!['r'];\n-    /// let mut b = vec!['u', 's', 't'];\n-    ///\n-    /// append(&mut a, &mut b);\n-    ///\n-    /// assert_eq!(a, &['r', 'u', 's', 't']);\n-    /// assert!(b.is_empty());\n-    /// ```\n-    ///\n-    /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n-    #[doc(alias = \"memcpy\")]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n-    pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n-\n-    /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n-    /// and destination may overlap.\n-    ///\n-    /// If the source and destination will *never* overlap,\n-    /// [`copy_nonoverlapping`] can be used instead.\n-    ///\n-    /// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n-    /// order swapped. Copying takes place as if the bytes were copied from `src`\n-    /// to a temporary array and then copied from the array to `dst`.\n-    ///\n-    /// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n-    ///\n-    /// # Safety\n-    ///\n-    /// Behavior is undefined if any of the following conditions are violated:\n-    ///\n-    /// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * Both `src` and `dst` must be properly aligned.\n-    ///\n-    /// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n-    /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the values\n-    /// in the region beginning at `*src` and the region beginning at `*dst` can\n-    /// [violate memory safety][read-ownership].\n-    ///\n-    /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n-    /// `0`, the pointers must be non-null and properly aligned.\n-    ///\n-    /// [`read`]: crate::ptr::read\n-    /// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n-    /// [valid]: crate::ptr#safety\n-    ///\n-    /// # Examples\n-    ///\n-    /// Efficiently create a Rust vector from an unsafe buffer:\n-    ///\n-    /// ```\n-    /// use std::ptr;\n-    ///\n-    /// /// # Safety\n-    /// ///\n-    /// /// * `ptr` must be correctly aligned for its type and non-zero.\n-    /// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n-    /// /// * Those elements must not be used after calling this function unless `T: Copy`.\n-    /// # #[allow(dead_code)]\n-    /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n-    ///     let mut dst = Vec::with_capacity(elts);\n-    ///\n-    ///     // SAFETY: Our precondition ensures the source is aligned and valid,\n-    ///     // and `Vec::with_capacity` ensures that we have usable space to write them.\n-    ///     ptr::copy(ptr, dst.as_mut_ptr(), elts);\n-    ///\n-    ///     // SAFETY: We created it with this much capacity earlier,\n-    ///     // and the previous `copy` has initialized these elements.\n-    ///     dst.set_len(elts);\n-    ///     dst\n-    /// }\n-    /// ```\n-    #[doc(alias = \"memmove\")]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n-    pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n }\n \n // Some functions are defined here because they accidentally got made\n@@ -1906,6 +1755,192 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr as usize % mem::align_of::<T>() == 0\n }\n \n+/// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n+/// and destination must *not* overlap.\n+///\n+/// For regions of memory which might overlap, use [`copy`] instead.\n+///\n+/// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n+/// with the argument order swapped.\n+///\n+/// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n+///\n+/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n+///\n+/// * Both `src` and `dst` must be properly aligned.\n+///\n+/// * The region of memory beginning at `src` with a size of `count *\n+///   size_of::<T>()` bytes must *not* overlap with the region of memory\n+///   beginning at `dst` with the same size.\n+///\n+/// Like [`read`], `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of\n+/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using *both* the values\n+/// in the region beginning at `*src` and the region beginning at `*dst` can\n+/// [violate memory safety][read-ownership].\n+///\n+/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n+/// `0`, the pointers must be non-null and properly aligned.\n+///\n+/// [`read`]: crate::ptr::read\n+/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n+/// [valid]: crate::ptr#safety\n+///\n+/// # Examples\n+///\n+/// Manually implement [`Vec::append`]:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n+/// fn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n+///     let src_len = src.len();\n+///     let dst_len = dst.len();\n+///\n+///     // Ensure that `dst` has enough capacity to hold all of `src`.\n+///     dst.reserve(src_len);\n+///\n+///     unsafe {\n+///         // The call to offset is always safe because `Vec` will never\n+///         // allocate more than `isize::MAX` bytes.\n+///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n+///         let src_ptr = src.as_ptr();\n+///\n+///         // Truncate `src` without dropping its contents. We do this first,\n+///         // to avoid problems in case something further down panics.\n+///         src.set_len(0);\n+///\n+///         // The two regions cannot overlap because mutable references do\n+///         // not alias, and two different vectors cannot own the same\n+///         // memory.\n+///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n+///\n+///         // Notify `dst` that it now holds the contents of `src`.\n+///         dst.set_len(dst_len + src_len);\n+///     }\n+/// }\n+///\n+/// let mut a = vec!['r'];\n+/// let mut b = vec!['u', 's', 't'];\n+///\n+/// append(&mut a, &mut b);\n+///\n+/// assert_eq!(a, &['r', 'u', 's', 't']);\n+/// assert!(b.is_empty());\n+/// ```\n+///\n+/// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n+#[doc(alias = \"memcpy\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[inline]\n+pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions)\n+        && !(is_aligned_and_not_null(src)\n+            && is_aligned_and_not_null(dst)\n+            && is_nonoverlapping(src, dst, count))\n+    {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }*/\n+\n+    // SAFETY: the safety contract for `copy_nonoverlapping` must be\n+    // upheld by the caller.\n+    unsafe { copy_nonoverlapping(src, dst, count) }\n+}\n+\n+/// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n+/// and destination may overlap.\n+///\n+/// If the source and destination will *never* overlap,\n+/// [`copy_nonoverlapping`] can be used instead.\n+///\n+/// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n+/// order swapped. Copying takes place as if the bytes were copied from `src`\n+/// to a temporary array and then copied from the array to `dst`.\n+///\n+/// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n+///\n+/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n+///\n+/// * Both `src` and `dst` must be properly aligned.\n+///\n+/// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n+/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the values\n+/// in the region beginning at `*src` and the region beginning at `*dst` can\n+/// [violate memory safety][read-ownership].\n+///\n+/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n+/// `0`, the pointers must be non-null and properly aligned.\n+///\n+/// [`read`]: crate::ptr::read\n+/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n+/// [valid]: crate::ptr#safety\n+///\n+/// # Examples\n+///\n+/// Efficiently create a Rust vector from an unsafe buffer:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// /// # Safety\n+/// ///\n+/// /// * `ptr` must be correctly aligned for its type and non-zero.\n+/// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n+/// /// * Those elements must not be used after calling this function unless `T: Copy`.\n+/// # #[allow(dead_code)]\n+/// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n+///     let mut dst = Vec::with_capacity(elts);\n+///\n+///     // SAFETY: Our precondition ensures the source is aligned and valid,\n+///     // and `Vec::with_capacity` ensures that we have usable space to write them.\n+///     ptr::copy(ptr, dst.as_mut_ptr(), elts);\n+///\n+///     // SAFETY: We created it with this much capacity earlier,\n+///     // and the previous `copy` has initialized these elements.\n+///     dst.set_len(elts);\n+///     dst\n+/// }\n+/// ```\n+#[doc(alias = \"memmove\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[inline]\n+pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }*/\n+\n+    // SAFETY: the safety contract for `copy` must be upheld by the caller.\n+    unsafe { copy(src, dst, count) }\n+}\n+\n /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n /// `val`.\n ///"}, {"sha": "c6750c52d16c8616508247fc0a5f14cd2f9eb5ce", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -682,8 +682,7 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n-pub const fn swap<T>(x: &mut T, y: &mut T) {\n+pub fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n@@ -813,8 +812,7 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n-pub const fn replace<T>(dest: &mut T, src: T) -> T {\n+pub fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n     // nothing here can panic."}, {"sha": "6a6cee0911feacf5253d08294e70d0773646cbe0", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -430,8 +430,7 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n-pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary\n     // reinterpretation of values as (chunkable) byte arrays, and the loop in the\n     // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back\n@@ -564,8 +563,7 @@ const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n-pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n+pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n     // SAFETY: the caller must guarantee that `dst` is valid to be\n     // cast to a mutable reference (valid for writes, aligned, initialized),\n     // and cannot overlap `src` since `dst` must point to a distinct\n@@ -871,14 +869,18 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n-pub const unsafe fn write<T>(dst: *mut T, src: T) {\n+pub unsafe fn write<T>(dst: *mut T, src: T) {\n+    // We are calling the intrinsics directly to avoid function calls in the generated code\n+    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n+    extern \"rust-intrinsic\" {\n+        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n     unsafe {\n         copy_nonoverlapping(&src as *const T, dst, 1);\n-        // We are calling the intrinsic directly to avoid function calls in the generated code.\n         intrinsics::forget(src);\n     }\n }"}, {"sha": "a6424041542d9054c79e060f23772de186088cc3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -1002,9 +1002,8 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n     #[inline(always)]\n-    pub const unsafe fn write(self, val: T)\n+    pub unsafe fn write(self, val: T)\n     where\n         T: Sized,\n     {"}, {"sha": "4acd059ab03dfeaab4b80dd7338e3c5330e9eced", "filename": "library/core/tests/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -49,53 +49,3 @@ fn mut_ptr_read() {\n     const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n     assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n }\n-\n-#[test]\n-fn write() {\n-    use core::ptr;\n-\n-    const fn write_aligned() -> i32 {\n-        let mut res = 0;\n-        unsafe {\n-            ptr::write(&mut res as *mut _, 42);\n-        }\n-        res\n-    }\n-    const ALIGNED: i32 = write_aligned();\n-    assert_eq!(ALIGNED, 42);\n-\n-    const fn write_unaligned() -> [u16; 2] {\n-        let mut two_aligned = [0u16; 2];\n-        unsafe {\n-            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n-            ptr::write_unaligned(unaligned_ptr, u16::from_ne_bytes([0x23, 0x45]));\n-        }\n-        two_aligned\n-    }\n-    const UNALIGNED: [u16; 2] = write_unaligned();\n-    assert_eq!(UNALIGNED, [u16::from_ne_bytes([0x00, 0x23]), u16::from_ne_bytes([0x45, 0x00])]);\n-}\n-\n-#[test]\n-fn mut_ptr_write() {\n-    const fn aligned() -> i32 {\n-        let mut res = 0;\n-        unsafe {\n-            (&mut res as *mut i32).write(42);\n-        }\n-        res\n-    }\n-    const ALIGNED: i32 = aligned();\n-    assert_eq!(ALIGNED, 42);\n-\n-    const fn write_unaligned() -> [u16; 2] {\n-        let mut two_aligned = [0u16; 2];\n-        unsafe {\n-            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n-            unaligned_ptr.write_unaligned(u16::from_ne_bytes([0x23, 0x45]));\n-        }\n-        two_aligned\n-    }\n-    const UNALIGNED: [u16; 2] = write_unaligned();\n-    assert_eq!(UNALIGNED, [u16::from_ne_bytes([0x00, 0x23]), u16::from_ne_bytes([0x45, 0x00])]);\n-}"}, {"sha": "183aa9e51228c985651854a1134a7a6f098b8874", "filename": "src/test/ui/const-ptr/out_of_bounds_read.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=47d38752c65359e1f4558d7a06935982fb8b486f", "patch": "@@ -1,16 +0,0 @@\n-// error-pattern: any use of this value will cause an error\n-\n-#![feature(const_ptr_read)]\n-#![feature(const_ptr_offset)]\n-\n-fn main() {\n-    use std::ptr;\n-\n-    const DATA: [u32; 1] = [42];\n-\n-    const PAST_END_PTR: *const u32 = unsafe { DATA.as_ptr().add(1) };\n-\n-    const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-    const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-    const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-}"}, {"sha": "6c4092e3e5cc82d9c9f79eb753be09e41a338630", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=47d38752c65359e1f4558d7a06935982fb8b486f", "patch": "@@ -1,59 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |         inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n-   | \n-  ::: $DIR/out_of_bounds_read.rs:13:5\n-   |\n-LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |     ------------------------------------------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n-   | \n-  ::: $DIR/out_of_bounds_read.rs:14:5\n-   |\n-LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |     --------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |         inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   |         inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n-   | \n-  ::: $DIR/out_of_bounds_read.rs:15:5\n-   |\n-LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |     --------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "9dc595f37faaeb1488026123baa62321909fec08", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=47d38752c65359e1f4558d7a06935982fb8b486f", "patch": "@@ -1,45 +0,0 @@\n-// ignore-tidy-linelength\n-#![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n-use std::{ptr, mem};\n-\n-const COPY_ZERO: () = unsafe {\n-    // Since we are not copying anything, this should be allowed.\n-    let src = ();\n-    let mut dst = ();\n-    ptr::copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n-};\n-\n-const COPY_OOB_1: () = unsafe {\n-    let mut x = 0i32;\n-    let dangle = (&mut x as *mut i32).wrapping_add(10);\n-    // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-    ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n-    //~| memory access failed: pointer must be in-bounds\n-    //~| previously accepted\n-};\n-const COPY_OOB_2: () = unsafe {\n-    let x = 0i32;\n-    let dangle = (&x as *const i32).wrapping_add(10);\n-    // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-    ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n-    //~| memory access failed: pointer must be in-bounds\n-    //~| previously accepted\n-};\n-\n-const COPY_SIZE_OVERFLOW: () = unsafe {\n-    let x = 0;\n-    let mut y = 0;\n-    ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n-    //~| overflow computing total size of `copy`\n-    //~| previously accepted\n-};\n-const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n-    let x = 0;\n-    let mut y = 0;\n-    ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n-    //~| overflow computing total size of `copy_nonoverlapping`\n-    //~| previously accepted\n-};\n-\n-fn main() {\n-}"}, {"sha": "2736cdeac690e9c52440a08ce364ba5778b0fd03", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47d38752c65359e1f4558d7a06935982fb8b486f/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=47d38752c65359e1f4558d7a06935982fb8b486f", "patch": "@@ -1,69 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:16:5\n-   |\n-LL | / const COPY_OOB_1: () = unsafe {\n-LL | |     let mut x = 0i32;\n-LL | |     let dangle = (&mut x as *mut i32).wrapping_add(10);\n-LL | |     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-LL | |     ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:24:5\n-   |\n-LL | / const COPY_OOB_2: () = unsafe {\n-LL | |     let x = 0i32;\n-LL | |     let dangle = (&x as *const i32).wrapping_add(10);\n-LL | |     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-LL | |     ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:32:5\n-   |\n-LL | / const COPY_SIZE_OVERFLOW: () = unsafe {\n-LL | |     let x = 0;\n-LL | |     let mut y = 0;\n-LL | |     ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:39:5\n-   |\n-LL | / const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n-LL | |     let x = 0;\n-LL | |     let mut y = 0;\n-LL | |     ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "08ba9ce7ecb292962727e0acadf76adde1330a43", "filename": "src/test/ui/intrinsics/issue-84297-reifying-copy.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Fintrinsics%2Fissue-84297-reifying-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Fintrinsics%2Fissue-84297-reifying-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fissue-84297-reifying-copy.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+fn main() {\n+    let _unused = if true {\n+        core::ptr::copy::<i32>\n+    } else {\n+        core::ptr::copy_nonoverlapping::<i32>\n+    };\n+}"}, {"sha": "9eb2f724017ed40dd33c9441ce144673b6eeac72", "filename": "src/test/ui/reify-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Freify-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Freify-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -1,6 +1,6 @@\n // check-fail\n \n-#![feature(intrinsics)]\n+#![feature(core_intrinsics, intrinsics)]\n \n fn a() {\n     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n@@ -14,8 +14,8 @@ fn b() {\n \n fn c() {\n     let _ = [\n-        std::intrinsics::copy_nonoverlapping::<i32>,\n-        std::intrinsics::copy::<i32>,\n+        std::intrinsics::likely,\n+        std::intrinsics::unlikely,\n         //~^ ERROR cannot coerce\n     ];\n }"}, {"sha": "69c11b5c56fd387cb729bbb6976ffcfc23c1972d", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -22,11 +22,11 @@ LL |     let _ = std::mem::transmute as unsafe extern \"rust-intrinsic\" fn(isize)\n error[E0308]: cannot coerce intrinsics to function pointers\n   --> $DIR/reify-intrinsic.rs:18:9\n    |\n-LL |         std::intrinsics::copy::<i32>,\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot coerce intrinsics to function pointers\n+LL |         std::intrinsics::unlikely,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot coerce intrinsics to function pointers\n    |\n-   = note: expected type `unsafe extern \"rust-intrinsic\" fn(_, _, _) {copy_nonoverlapping::<i32>}`\n-           found fn item `unsafe extern \"rust-intrinsic\" fn(_, _, _) {std::intrinsics::copy::<i32>}`\n+   = note: expected type `extern \"rust-intrinsic\" fn(_) -> _ {likely}`\n+           found fn item `extern \"rust-intrinsic\" fn(_) -> _ {unlikely}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dc542fe2db961747857f5c519a307be920efa872", "filename": "src/test/ui/thread-local-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Fthread-local-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Fthread-local-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -11,6 +11,7 @@ const fn g(x: &mut [u32; 8]) {\n     //~| ERROR mutable references are not allowed\n     //~| ERROR use of mutable static is unsafe\n     //~| constant functions cannot refer to statics\n+    //~| ERROR calls in constant functions are limited to constant functions\n }\n \n fn main() {}"}, {"sha": "a213282eb85cd5b3273bf5a9116121520a180430", "filename": "src/test/ui/thread-local-static.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Fthread-local-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftest%2Fui%2Fthread-local-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.stderr?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -30,6 +30,12 @@ LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/thread-local-static.rs:9:5\n+   |\n+LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n   --> $DIR/thread-local-static.rs:9:23\n    |\n@@ -38,7 +44,7 @@ LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0013, E0133, E0658.\n+Some errors have detailed explanations: E0013, E0015, E0133, E0658.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "b913d1ce8b1f769cc2b1884feb5fae2d19722eb6", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab201df7028ebb6812c0b1a01702ac6ecfcceed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=eab201df7028ebb6812c0b1a01702ac6ecfcceed", "patch": "@@ -116,8 +116,8 @@ pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"os\", \"imp\", \"unix\", \"fs\",\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n-pub const PTR_COPY: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy\"];\n-pub const PTR_COPY_NONOVERLAPPING: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy_nonoverlapping\"];\n+pub const PTR_COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n+pub const PTR_COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];"}]}