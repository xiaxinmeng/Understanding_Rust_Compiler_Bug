{"sha": "b14a6aca9f5f62df2ac12ee92d0ca37514908305", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNGE2YWNhOWY1ZjYyZGYyYWMxMmVlOTJkMGNhMzc1MTQ5MDgzMDU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-03T00:14:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-03T01:06:33Z"}, "message": "Cleanups in the int and uint templates.", "tree": {"sha": "22a2d20f663669c894cab75e309b028f8c335200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a2d20f663669c894cab75e309b028f8c335200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14a6aca9f5f62df2ac12ee92d0ca37514908305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14a6aca9f5f62df2ac12ee92d0ca37514908305", "html_url": "https://github.com/rust-lang/rust/commit/b14a6aca9f5f62df2ac12ee92d0ca37514908305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14a6aca9f5f62df2ac12ee92d0ca37514908305/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4019d3a86b907c80de8b26c5b5c1f5bb52636fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4019d3a86b907c80de8b26c5b5c1f5bb52636fb1", "html_url": "https://github.com/rust-lang/rust/commit/4019d3a86b907c80de8b26c5b5c1f5bb52636fb1"}], "stats": {"total": 212, "additions": 114, "deletions": 98}, "files": [{"sha": "1cd1480ec4332c4879ff152c471a6d521c1b0239", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 59, "deletions": 54, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -12,8 +12,12 @@ export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n export num, ord, eq, times, timesi;\n+export bits, bytes;\n \n-const min_value: T = -1 as T << (inst::bits - 1 as T);\n+const bits : uint = inst::bits;\n+const bytes : uint = (inst::bits / 8);\n+\n+const min_value: T = (-1 as T) << (bits - 1);\n const max_value: T = min_value - 1 as T;\n \n pure fn min(&&x: T, &&y: T) -> T { if x < y { x } else { y } }\n@@ -58,59 +62,6 @@ pure fn abs(i: T) -> T {\n     if is_negative(i) { -i } else { i }\n }\n \n-/**\n- * Parse a buffer of bytes\n- *\n- * # Arguments\n- *\n- * * buf - A byte buffer\n- * * radix - The base of the number\n- */\n-fn parse_buf(buf: ~[u8], radix: uint) -> option<T> {\n-    if vec::len(buf) == 0u { return none; }\n-    let mut i = vec::len(buf) - 1u;\n-    let mut start = 0u;\n-    let mut power = 1 as T;\n-\n-    if buf[0] == ('-' as u8) {\n-        power = -1 as T;\n-        start = 1u;\n-    }\n-    let mut n = 0 as T;\n-    loop {\n-        alt char::to_digit(buf[i] as char, radix) {\n-          some(d) { n += (d as T) * power; }\n-          none { return none; }\n-        }\n-        power *= radix as T;\n-        if i <= start { return some(n); }\n-        i -= 1u;\n-    };\n-}\n-\n-/// Parse a string to an int\n-fn from_str(s: ~str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n-\n-/// Convert to a string in a given base\n-fn to_str(n: T, radix: uint) -> ~str {\n-    do to_str_bytes(n, radix) |slice| {\n-        do vec::as_buf(slice) |p, len| {\n-            unsafe { str::unsafe::from_buf_len(p, len) }\n-        }\n-    }\n-}\n-\n-fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n-    if n < 0 as T {\n-        uint::to_str_bytes(true, -n as uint, radix, f)\n-    } else {\n-        uint::to_str_bytes(false, n as uint, radix, f)\n-    }\n-}\n-\n-/// Convert to a string\n-fn str(i: T) -> ~str { return to_str(i, 10u); }\n-\n impl ord of ord for T {\n     pure fn lt(&&other: T) -> bool {\n         return self < other;\n@@ -123,6 +74,7 @@ impl eq of eq for T {\n     }\n }\n \n+\n impl num of num::num for T {\n     pure fn add(&&other: T)    -> T { return self + other; }\n     pure fn sub(&&other: T)    -> T { return self - other; }\n@@ -172,6 +124,59 @@ impl timesi of iter::timesi for T {\n     }\n }\n \n+/**\n+ * Parse a buffer of bytes\n+ *\n+ * # Arguments\n+ *\n+ * * buf - A byte buffer\n+ * * radix - The base of the number\n+ */\n+fn parse_buf(buf: ~[u8], radix: uint) -> option<T> {\n+    if vec::len(buf) == 0u { return none; }\n+    let mut i = vec::len(buf) - 1u;\n+    let mut start = 0u;\n+    let mut power = 1 as T;\n+\n+    if buf[0] == ('-' as u8) {\n+        power = -1 as T;\n+        start = 1u;\n+    }\n+    let mut n = 0 as T;\n+    loop {\n+        alt char::to_digit(buf[i] as char, radix) {\n+          some(d) { n += (d as T) * power; }\n+          none { return none; }\n+        }\n+        power *= radix as T;\n+        if i <= start { return some(n); }\n+        i -= 1u;\n+    };\n+}\n+\n+/// Parse a string to an int\n+fn from_str(s: ~str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n+\n+/// Convert to a string in a given base\n+fn to_str(n: T, radix: uint) -> ~str {\n+    do to_str_bytes(n, radix) |slice| {\n+        do vec::as_buf(slice) |p, len| {\n+            unsafe { str::unsafe::from_buf_len(p, len) }\n+        }\n+    }\n+}\n+\n+fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n+    if n < 0 as T {\n+        uint::to_str_bytes(true, -n as uint, radix, f)\n+    } else {\n+        uint::to_str_bytes(false, n as uint, radix, f)\n+    }\n+}\n+\n+/// Convert to a string\n+fn str(i: T) -> ~str { return to_str(i, 10u); }\n+\n // FIXME: Has alignment issues on windows and 32-bit linux (#2609)\n #[test]\n #[ignore]"}, {"sha": "75a8409f6eddc9c3f2a6bd25450f7b11aca6cd17", "filename": "src/libcore/int-template/i16.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi16.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,3 +1,2 @@\n type T = i16;\n-\n-const bits: T = 16 as T;\n+const bits: uint = u16::bits;\n\\ No newline at end of file"}, {"sha": "043ab95f579f5d793576c9caca0067cdfe7383e6", "filename": "src/libcore/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi32.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,3 +1,2 @@\n type T = i32;\n-\n-const bits: T = 32 as T;\n+const bits: uint = u32::bits;"}, {"sha": "cea3c77c7f5800df718bcc8e064d3369dab7f3cc", "filename": "src/libcore/int-template/i64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi64.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,3 +1,2 @@\n type T = i64;\n-\n-const bits: T = 64 as T;\n+const bits: uint = u64::bits;\n\\ No newline at end of file"}, {"sha": "25614791ad63bd715e72b468de3fc31b95107fb8", "filename": "src/libcore/int-template/i8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi8.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,3 +1,2 @@\n type T = i8;\n-\n-const bits: T = 8 as T;\n+const bits: uint = u8::bits;\n\\ No newline at end of file"}, {"sha": "96ca59335a582e4acff8305f540a487a398da91c", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,13 +1,11 @@\n type T = int;\n-\n-#[cfg(target_arch = \"x86\")]\n-const bits: T = 32 as T;\n-\n-#[cfg(target_arch = \"x86_64\")]\n-const bits: T = 64 as T;\n+const bits: uint = uint::bits;\n \n /// Produce a uint suitable for use in a hash table\n-pure fn hash(x: &int) -> uint { *x as uint }\n+pure fn hash(x: &int) -> uint {\n+    let u : uint = *x as uint;\n+    uint::hash(&u)\n+}\n \n /// Returns `base` raised to the power of `exponent`\n fn pow(base: int, exponent: uint) -> int {"}, {"sha": "d3e1fb41ca2d2f89888d6531554894be2b3e77e3", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -12,6 +12,10 @@ export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n export num, ord, eq, times, timesi;\n+export bits, bytes;\n+\n+const bits : uint = inst::bits;\n+const bytes : uint = (inst::bits / 8);\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -76,34 +80,6 @@ impl num of num::num for T {\n     pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n-/**\n- * Parse a buffer of bytes\n- *\n- * # Arguments\n- *\n- * * buf - A byte buffer\n- * * radix - The base of the number\n- *\n- * # Failure\n- *\n- * `buf` must not be empty\n- */\n-fn parse_buf(buf: ~[u8], radix: uint) -> option<T> {\n-    if vec::len(buf) == 0u { return none; }\n-    let mut i = vec::len(buf) - 1u;\n-    let mut power = 1u as T;\n-    let mut n = 0u as T;\n-    loop {\n-        alt char::to_digit(buf[i] as char, radix) {\n-          some(d) { n += d as T * power; }\n-          none { return none; }\n-        }\n-        power *= radix as T;\n-        if i == 0u { return some(n); }\n-        i -= 1u;\n-    };\n-}\n-\n impl times of iter::times for T {\n     #[inline(always)]\n     #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n@@ -133,6 +109,34 @@ impl timesi of iter::timesi for T {\n     }\n }\n \n+/**\n+ * Parse a buffer of bytes\n+ *\n+ * # Arguments\n+ *\n+ * * buf - A byte buffer\n+ * * radix - The base of the number\n+ *\n+ * # Failure\n+ *\n+ * `buf` must not be empty\n+ */\n+fn parse_buf(buf: ~[u8], radix: uint) -> option<T> {\n+    if vec::len(buf) == 0u { return none; }\n+    let mut i = vec::len(buf) - 1u;\n+    let mut power = 1u as T;\n+    let mut n = 0u as T;\n+    loop {\n+        alt char::to_digit(buf[i] as char, radix) {\n+          some(d) { n += d as T * power; }\n+          none { return none; }\n+        }\n+        power *= radix as T;\n+        if i == 0u { return some(n); }\n+        i -= 1u;\n+    };\n+}\n+\n /// Parse a string to an int\n fn from_str(s: ~str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n "}, {"sha": "b84b975c6859c1e3fd41026b1db522a90f9fc310", "filename": "src/libcore/uint-template/u16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu16.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1 +1,2 @@\n type T = u16;\n+const bits: uint = 16;"}, {"sha": "d5324e03a16d0c636483332b4368a0aaaf42b968", "filename": "src/libcore/uint-template/u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu32.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1 +1,2 @@\n type T = u32;\n+const bits: uint = 32;\n\\ No newline at end of file"}, {"sha": "ee7f35bf6e315d869c402d1ed9daa7ec3231d327", "filename": "src/libcore/uint-template/u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu64.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1 +1,2 @@\n type T = u64;\n+const bits: uint = 64;\n\\ No newline at end of file"}, {"sha": "b7df2605db41092abda08ee98f0fe69b30a2b247", "filename": "src/libcore/uint-template/u8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,4 +1,5 @@\n type T = u8;\n+const bits: uint = 8;\n \n // Type-specific functions here. These must be reexported by the\n // parent module so that they appear in core::u8 and not core::u8::u8;"}, {"sha": "fc65d9a63e4ed709aa5afda684a5a202c661a214", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14a6aca9f5f62df2ac12ee92d0ca37514908305/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=b14a6aca9f5f62df2ac12ee92d0ca37514908305", "patch": "@@ -1,5 +1,12 @@\n type T = uint;\n \n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"arm\")]\n+const bits: uint = 32;\n+\n+#[cfg(target_arch = \"x86_64\")]\n+const bits: uint = 64;\n+\n /**\n  * Divide two numbers, return the result, rounded up.\n  *\n@@ -54,7 +61,9 @@ pure fn div_round(x: uint, y: uint) -> uint {\n pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n /// Produce a uint suitable for use in a hash table\n-pure fn hash(x: &uint) -> uint { *x }\n+pure fn hash(x: &uint) -> uint {\n+    hash::hash_uint(*x) as uint\n+}\n \n /**\n  * Iterate over the range [`lo`..`hi`), or stop when requested"}]}