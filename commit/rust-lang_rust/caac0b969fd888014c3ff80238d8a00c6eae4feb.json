{"sha": "caac0b969fd888014c3ff80238d8a00c6eae4feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYWMwYjk2OWZkODg4MDE0YzNmZjgwMjM4ZDhhMDBjNmVhZTRmZWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-19T11:13:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:42:52Z"}, "message": "reformat mir text pretty printer", "tree": {"sha": "71b29d4f53d24c4a84e2c909fcb51e0a69488955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b29d4f53d24c4a84e2c909fcb51e0a69488955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caac0b969fd888014c3ff80238d8a00c6eae4feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caac0b969fd888014c3ff80238d8a00c6eae4feb", "html_url": "https://github.com/rust-lang/rust/commit/caac0b969fd888014c3ff80238d8a00c6eae4feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caac0b969fd888014c3ff80238d8a00c6eae4feb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d00deee9619db6722b27630bd037ab32fc3b9ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d00deee9619db6722b27630bd037ab32fc3b9ab", "html_url": "https://github.com/rust-lang/rust/commit/9d00deee9619db6722b27630bd037ab32fc3b9ab"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "0f1891bf37bfa52eb3c76532b29bc6b9db2b943d", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/caac0b969fd888014c3ff80238d8a00c6eae4feb/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caac0b969fd888014c3ff80238d8a00c6eae4feb/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=caac0b969fd888014c3ff80238d8a00c6eae4feb", "patch": "@@ -16,21 +16,33 @@ use syntax::ast::NodeId;\n const INDENT: &'static str = \"    \";\n \n /// Write out a human-readable textual representation for the given MIR.\n-pub fn write_mir_pretty<'a, 't, W, I>(tcx: &ty::TyCtxt<'t>, iter: I, w: &mut W) -> io::Result<()>\n-where W: Write, I: Iterator<Item=(&'a NodeId, &'a Mir<'a>)> {\n-    for (&nodeid, mir) in iter {\n-        write_mir_intro(tcx, nodeid, mir, w)?;\n-        // Nodes\n-        for block in mir.all_basic_blocks() {\n-            write_basic_block(block, mir, w)?;\n-        }\n-        writeln!(w, \"}}\")?\n+pub fn write_mir_pretty<'a, 'tcx, I>(tcx: &ty::TyCtxt<'tcx>,\n+                                     iter: I,\n+                                     w: &mut Write)\n+                                     -> io::Result<()>\n+    where I: Iterator<Item=(&'a NodeId, &'a Mir<'tcx>)>, 'tcx: 'a\n+{\n+    for (&node_id, mir) in iter {\n+        write_mir_fn(tcx, node_id, mir, w)?;\n+    }\n+    Ok(())\n+}\n+\n+pub fn write_mir_fn<'tcx>(tcx: &ty::TyCtxt<'tcx>,\n+                          node_id: NodeId,\n+                          mir: &Mir<'tcx>,\n+                          w: &mut Write)\n+                          -> io::Result<()> {\n+    write_mir_intro(tcx, node_id, mir, w)?;\n+    for block in mir.all_basic_blocks() {\n+        write_basic_block(block, mir, w)?;\n     }\n+    writeln!(w, \"}}\")?;\n     Ok(())\n }\n \n /// Write out a human-readable textual representation for the given basic block.\n-fn write_basic_block<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n+fn write_basic_block(block: BasicBlock, mir: &Mir, w: &mut Write) -> io::Result<()> {\n     let data = mir.basic_block_data(block);\n \n     // Basic block label at the top.\n@@ -49,9 +61,8 @@ fn write_basic_block<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::R\n \n /// Write out a human-readable textual representation of the MIR's `fn` type and the types of its\n /// local variables (both user-defined bindings and compiler temporaries).\n-fn write_mir_intro<W: Write>(tcx: &ty::TyCtxt, nid: NodeId, mir: &Mir, w: &mut W)\n--> io::Result<()> {\n-\n+fn write_mir_intro(tcx: &ty::TyCtxt, nid: NodeId, mir: &Mir, w: &mut Write)\n+                   -> io::Result<()> {\n     write!(w, \"fn {}(\", tcx.map.path_to_string(nid))?;\n \n     // fn argument types."}]}