{"sha": "34f6408ea2f0cf0b66eea083169217399b77ff96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZjY0MDhlYTJmMGNmMGI2NmVlYTA4MzE2OTIxNzM5OWI3N2ZmOTY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T12:55:16Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T12:55:16Z"}, "message": "Update Configurations.md", "tree": {"sha": "21717d1bedf6406bad51f5701f77149e5320d453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21717d1bedf6406bad51f5701f77149e5320d453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f6408ea2f0cf0b66eea083169217399b77ff96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f6408ea2f0cf0b66eea083169217399b77ff96", "html_url": "https://github.com/rust-lang/rust/commit/34f6408ea2f0cf0b66eea083169217399b77ff96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f6408ea2f0cf0b66eea083169217399b77ff96/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f49587a2cdcb74727c63516e589b3a047d547a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f49587a2cdcb74727c63516e589b3a047d547a1", "html_url": "https://github.com/rust-lang/rust/commit/5f49587a2cdcb74727c63516e589b3a047d547a1"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "324546f5a0d58a4c5d5ea903e28f11256c91d45c", "filename": "Configurations.md", "status": "modified", "additions": 113, "deletions": 6, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/34f6408ea2f0cf0b66eea083169217399b77ff96/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/34f6408ea2f0cf0b66eea083169217399b77ff96/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=34f6408ea2f0cf0b66eea083169217399b77ff96", "patch": "@@ -579,24 +579,23 @@ Don't reformat anything\n \n ## `error_on_line_overflow`\n \n-Error if unable to get all lines within `max_width`\n+Error if unable to get all lines within `max_width`, except for comments and string literals.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n - **Stable**: No\n \n See also [`max_width`](#max_width).\n \n-## `error_on_line_overflow_comments`\n+## `error_on_unformatted`\n \n-Error if unable to get all comment lines within `comment_width`.\n+Error if unable to get comments or string literals within `max_width`, or they are left with\n+trailing whitespaces.\n \n-- **Default value**: `true`\n+- **Default value**: `false`\n - **Possible values**: `true`, `false`\n - **Stable**: No\n \n-See also [`comment_width`](#comment_width).\n-\n ## `fn_args_density`\n \n Argument density in functions\n@@ -1379,6 +1378,41 @@ extern crate sit;\n \n This value has no influence beyond the effect of the [`reorder_extern_crates`](#reorder_extern_crates) option. Set [`reorder_extern_crates`](#reorder_extern_crates) to `false` if you do not want `extern crate` groups to be collapsed and ordered.\n \n+## `reorder_modules`\n+\n+Reorder `mod` declarations alphabetically in group.\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `true`\n+\n+```rust\n+mod a;\n+mod b;\n+\n+mod dolor;\n+mod ipsum;\n+mod lorem;\n+mod sit;\n+```\n+\n+#### `false`\n+\n+```rust\n+mod b;\n+mod a;\n+\n+mod lorem;\n+mod ipsum;\n+mod dolor;\n+mod sit;\n+```\n+\n+**Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantic\n+of the original source code.\n+\n ## `report_todo`\n \n Report `TODO` items in comments.\n@@ -2008,3 +2042,76 @@ fn bar() {\n     println!(\"c\");\n }\n ```\n+\n+## `remove_blank_lines_at_start_or_end_of_block`\n+\n+Remove blank lines at the start or the end of a block.\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `true`\n+\n+```rust\n+fn foo() {\n+    let msg = {\n+        let mut str = String::new();\n+        str.push_str(\"hello, \");\n+        str.push_str(\"world!\");\n+        str\n+    };\n+    println!(\"{}\", msg);\n+}\n+```\n+\n+#### `false`\n+\n+```rust\n+fn foo() {\n+\n+    let msg = {\n+\n+        let mut str = String::new();\n+        str.push_str(\"hello, \");\n+        str.push_str(\"world!\");\n+        str\n+\n+    };\n+    println!(\"{}\", msg);\n+\n+}\n+```\n+\n+## `required_version`\n+\n+Require a specific version of rustfmt. If you want to make sure that the \n+specific version of rustfmt is used in your CI, use this option.\n+\n+- **Default value**: `CARGO_PKG_VERSION`\n+- **Possible values**: any published version (e.g. `\"0.3.8\"`)\n+- **Stable**: No\n+\n+## `hide_parse_errors`\n+\n+Do not show parse errors if the parser failed to parse files.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+## `color`\n+\n+Whether to use colored output or not.\n+\n+- **Default value**: `\"Auto\"`\n+- **Possible values**: \"Auto\", \"Always\", \"Never\"\n+- **Stable**: No\n+\n+## `unstable_features`\n+\n+Enable unstable featuers on stable channel.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: Yes"}]}