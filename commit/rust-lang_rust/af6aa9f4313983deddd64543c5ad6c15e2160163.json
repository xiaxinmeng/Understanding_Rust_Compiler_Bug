{"sha": "af6aa9f4313983deddd64543c5ad6c15e2160163", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNmFhOWY0MzEzOTgzZGVkZGQ2NDU0M2M1YWQ2YzE1ZTIxNjAxNjM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-12T03:36:51Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-12T05:00:09Z"}, "message": "Pass Session into renderer", "tree": {"sha": "b00071b29dbdc4e25533bd4f7dbac318e3334f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00071b29dbdc4e25533bd4f7dbac318e3334f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6aa9f4313983deddd64543c5ad6c15e2160163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6aa9f4313983deddd64543c5ad6c15e2160163", "html_url": "https://github.com/rust-lang/rust/commit/af6aa9f4313983deddd64543c5ad6c15e2160163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6aa9f4313983deddd64543c5ad6c15e2160163/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b841dfe36f90a7cd111e7f0c55f32594f6e578", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b841dfe36f90a7cd111e7f0c55f32594f6e578", "html_url": "https://github.com/rust-lang/rust/commit/39b841dfe36f90a7cd111e7f0c55f32594f6e578"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "6334524eb1ca39774c0b3be287e330b763a76142", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=af6aa9f4313983deddd64543c5ad6c15e2160163", "patch": "@@ -1,5 +1,7 @@\n use std::sync::Arc;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n \n use crate::clean;\n@@ -19,6 +21,7 @@ crate trait FormatRenderer: Clone {\n         render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n+        sess: Lrc<Session>,\n     ) -> Result<(Self, clean::Crate), Error>;\n \n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n@@ -49,6 +52,7 @@ crate fn run_format<T: FormatRenderer>(\n     render_info: RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: Edition,\n+    sess: Lrc<Session>,\n ) -> Result<(), Error> {\n     let (krate, mut cache) = Cache::from_krate(\n         render_info.clone(),\n@@ -59,7 +63,7 @@ crate fn run_format<T: FormatRenderer>(\n     );\n \n     let (mut format_renderer, mut krate) =\n-        T::init(krate, options, render_info, edition, &mut cache)?;\n+        T::init(krate, options, render_info, edition, &mut cache, sess)?;\n \n     let cache = Arc::new(cache);\n     // Freeze the cache now that the index has been built. Put an Arc into TLS for future"}, {"sha": "ff8fd208eea4e9e4415f31c5f9ad82ff105c3ef7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=af6aa9f4313983deddd64543c5ad6c15e2160163", "patch": "@@ -52,10 +52,12 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::FileName;\n@@ -101,6 +103,7 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n /// rustdoc tree).\n #[derive(Clone)]\n crate struct Context {\n+    crate sess: Lrc<Session>,\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n     crate current: Vec<String>,\n@@ -383,6 +386,7 @@ impl FormatRenderer for Context {\n         _render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n+        sess: Lrc<Session>,\n     ) -> Result<(Context, clean::Crate), Error> {\n         // need to save a copy of the options for rendering the index page\n         let md_opts = options.clone();\n@@ -494,6 +498,7 @@ impl FormatRenderer for Context {\n \n         let cache = Arc::new(cache);\n         let mut cx = Context {\n+            sess,\n             current: Vec::new(),\n             dst,\n             render_redirect_pages: false,"}, {"sha": "884c4c7253303a08300274ecc12a272f1c3ad7f8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=af6aa9f4313983deddd64543c5ad6c15e2160163", "patch": "@@ -13,6 +13,8 @@ use std::path::PathBuf;\n use std::rc::Rc;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n \n use crate::clean;\n@@ -124,6 +126,7 @@ impl FormatRenderer for JsonRenderer {\n         _render_info: RenderInfo,\n         _edition: Edition,\n         _cache: &mut Cache,\n+        _sess: Lrc<Session>,\n     ) -> Result<(Self, clean::Crate), Error> {\n         debug!(\"Initializing json renderer\");\n         Ok(("}, {"sha": "fbab5735ee7ac4ae28a015786f2545e0757baca9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6aa9f4313983deddd64543c5ad6c15e2160163/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=af6aa9f4313983deddd64543c5ad6c15e2160163", "patch": "@@ -61,9 +61,11 @@ use std::default::Default;\n use std::env;\n use std::process;\n \n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n use rustc_session::getopts;\n+use rustc_session::Session;\n use rustc_session::{early_error, early_warn};\n \n #[macro_use]\n@@ -483,8 +485,9 @@ fn run_renderer<T: formats::FormatRenderer>(\n     render_info: config::RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n+    sess: Lrc<Session>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition) {\n+    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, sess) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n             let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n@@ -554,10 +557,12 @@ fn main_options(options: config::Options) -> MainResult {\n     let diag = core::new_handler(error_format, None, &debugging_options);\n     match output_format {\n         None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n-            run_renderer::<html::render::Context>(krate, renderopts, renderinfo, &diag, edition)\n+            run_renderer::<html::render::Context>(\n+                krate, renderopts, renderinfo, &diag, edition, sess,\n+            )\n         }),\n         Some(config::OutputFormat::Json) => sess.time(\"render_json\", || {\n-            run_renderer::<json::JsonRenderer>(krate, renderopts, renderinfo, &diag, edition)\n+            run_renderer::<json::JsonRenderer>(krate, renderopts, renderinfo, &diag, edition, sess)\n         }),\n     }\n }"}]}