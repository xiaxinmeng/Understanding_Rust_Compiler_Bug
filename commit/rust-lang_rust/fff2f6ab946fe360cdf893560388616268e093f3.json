{"sha": "fff2f6ab946fe360cdf893560388616268e093f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjJmNmFiOTQ2ZmUzNjBjZGY4OTM1NjAzODg2MTYyNjhlMDkzZjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-02T12:46:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-16T09:54:38Z"}, "message": "Fix test", "tree": {"sha": "a11491ff570efd3aee2d7b2445eb8e01136965dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a11491ff570efd3aee2d7b2445eb8e01136965dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff2f6ab946fe360cdf893560388616268e093f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff2f6ab946fe360cdf893560388616268e093f3", "html_url": "https://github.com/rust-lang/rust/commit/fff2f6ab946fe360cdf893560388616268e093f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff2f6ab946fe360cdf893560388616268e093f3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f67de35ed0aadc351e55dad47d49bc7c89c399", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f67de35ed0aadc351e55dad47d49bc7c89c399", "html_url": "https://github.com/rust-lang/rust/commit/50f67de35ed0aadc351e55dad47d49bc7c89c399"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "5330470da16b038d218c4806dc73ac18fb2bc662", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fff2f6ab946fe360cdf893560388616268e093f3/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff2f6ab946fe360cdf893560388616268e093f3/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=fff2f6ab946fe360cdf893560388616268e093f3", "patch": "@@ -3,9 +3,13 @@\n extern crate syntax;\n extern crate rustc;\n extern crate rustc_codegen_utils;\n+#[macro_use]\n+extern crate rustc_data_structures;\n+extern crate rustc_target;\n \n use std::any::Any;\n-use std::sync::mpsc;\n+use std::sync::{Arc, mpsc};\n+use std::path::Path;\n use syntax::symbol::Symbol;\n use rustc::session::Session;\n use rustc::session::config::OutputFilenames;\n@@ -14,21 +18,44 @@ use rustc::ty::query::Providers;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc::util::common::ErrorReported;\n-use rustc_codegen_utils::codegen_backend::{CodegenBackend, MetadataOnlyCodegenBackend};\n+use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_data_structures::sync::MetadataRef;\n+use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_target::spec::Target;\n \n-struct TheBackend(Box<CodegenBackend>);\n+pub struct NoLlvmMetadataLoader;\n+\n+impl MetadataLoader for NoLlvmMetadataLoader {\n+    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n+        let buf = std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n+        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n+        Ok(rustc_erase_owner!(buf.map_owner_box()))\n+    }\n+\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n+        self.get_rlib_metadata(target, filename)\n+    }\n+}\n+\n+struct TheBackend;\n \n impl CodegenBackend for TheBackend {\n     fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n-        self.0.metadata_loader()\n+        Box::new(NoLlvmMetadataLoader)\n     }\n \n     fn provide(&self, providers: &mut Providers) {\n-        self.0.provide(providers);\n+        rustc_codegen_utils::symbol_names::provide(providers);\n+\n+        providers.target_features_whitelist = |_tcx, _cnum| {\n+            Default::default() // Just a dummy\n+        };\n+        providers.is_reachable_non_generic = |_tcx, _defid| true;\n+        providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n     }\n \n     fn provide_extern(&self, providers: &mut Providers) {\n-        self.0.provide_extern(providers);\n+        providers.is_reachable_non_generic = |_tcx, _defid| true;\n     }\n \n     fn codegen_crate<'a, 'tcx>(\n@@ -69,5 +96,5 @@ impl CodegenBackend for TheBackend {\n /// This is the entrypoint for a hot plugged rustc_codegen_llvm\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n-    Box::new(TheBackend(MetadataOnlyCodegenBackend::boxed()))\n+    Box::new(TheBackend)\n }"}]}