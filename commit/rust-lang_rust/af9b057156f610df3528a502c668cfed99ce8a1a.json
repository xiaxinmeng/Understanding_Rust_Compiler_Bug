{"sha": "af9b057156f610df3528a502c668cfed99ce8a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOWIwNTcxNTZmNjEwZGYzNTI4YTUwMmM2NjhjZmVkOTljZThhMWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-22T12:43:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-22T15:08:58Z"}, "message": "drop glue takes in mutable references, it should reflect that in its type", "tree": {"sha": "d593b21ccab9ff40fb52bfe990efe2b781483785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d593b21ccab9ff40fb52bfe990efe2b781483785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9b057156f610df3528a502c668cfed99ce8a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9b057156f610df3528a502c668cfed99ce8a1a", "html_url": "https://github.com/rust-lang/rust/commit/af9b057156f610df3528a502c668cfed99ce8a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9b057156f610df3528a502c668cfed99ce8a1a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bec59c93baa71d599a616fda9f1180febb08386", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bec59c93baa71d599a616fda9f1180febb08386", "html_url": "https://github.com/rust-lang/rust/commit/4bec59c93baa71d599a616fda9f1180febb08386"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "ba1028f76c1c3a5288abf148a069e2ada4aab471", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af9b057156f610df3528a502c668cfed99ce8a1a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9b057156f610df3528a502c668cfed99ce8a1a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=af9b057156f610df3528a502c668cfed99ce8a1a", "patch": "@@ -189,12 +189,22 @@ pub use intrinsics::write_bytes;\n /// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`\n /// manually.\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n+#[inline(always)]\n+pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+    real_drop_in_place(&mut *to_drop)\n+}\n+\n+// The real `drop_in_place` -- the one that gets called implicitly when variables go\n+// out of scope -- should have a safe reference and not a raw pointer as argument\n+// type.  When we drop a local variable, we access it with a pointer that behaves\n+// like a safe reference; transmuting that to a raw pointer does not mean we can\n+// actually access it with raw pointers.\n #[lang = \"drop_in_place\"]\n #[allow(unconditional_recursion)]\n-pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+unsafe fn real_drop_in_place<T: ?Sized>(to_drop: &mut T) {\n     // Code here does not matter - this is replaced by the\n     // real drop glue by the compiler.\n-    drop_in_place(to_drop);\n+    real_drop_in_place(to_drop)\n }\n \n /// Creates a null raw pointer."}, {"sha": "4489465679740c912a145416e27f26fda1042c78", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af9b057156f610df3528a502c668cfed99ce8a1a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9b057156f610df3528a502c668cfed99ce8a1a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=af9b057156f610df3528a502c668cfed99ce8a1a", "patch": "@@ -196,6 +196,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 // that will take care to make it UB to leave the range, just\n                 // like for transmute).\n                 caller.value == callee.value,\n+            (layout::Abi::ScalarPair(ref caller1, ref caller2),\n+             layout::Abi::ScalarPair(ref callee1, ref callee2)) =>\n+                caller1.value == callee1.value && caller2.value == callee2.value,\n             // Be conservative\n             _ => false\n         }"}, {"sha": "04079319a787771e42f80ba6ad870716b12dd325", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af9b057156f610df3528a502c668cfed99ce8a1a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9b057156f610df3528a502c668cfed99ce8a1a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=af9b057156f610df3528a502c668cfed99ce8a1a", "patch": "@@ -226,8 +226,13 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // The first argument (index 0), but add 1 for the return value.\n         let dropee_ptr = Place::Local(Local::new(1+0));\n         if tcx.sess.opts.debugging_opts.mir_emit_retag {\n-            // We use raw ptr operations, better prepare the alias tracking for that\n+            // Function arguments should be retagged\n             mir.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n+                source_info,\n+                kind: StatementKind::Retag { fn_entry: true, place: dropee_ptr.clone() },\n+            });\n+            // We use raw ptr operations, better prepare the alias tracking for that\n+            mir.basic_blocks_mut()[START_BLOCK].statements.insert(1, Statement {\n                 source_info,\n                 kind: StatementKind::EscapeToRaw(Operand::Copy(dropee_ptr.clone())),\n             })"}]}