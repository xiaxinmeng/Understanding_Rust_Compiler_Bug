{"sha": "9cdfe03b0601d5328406746a7923a8a4eaa0cf3c", "node_id": "C_kwDOAAsO6NoAKDljZGZlMDNiMDYwMWQ1MzI4NDA2NzQ2YTc5MjNhOGE0ZWFhMGNmM2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T10:09:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T10:09:39Z"}, "message": "Auto merge of #103390 - compiler-errors:metadata-mod-regions, r=eholk\n\nCheck fat pointer metadata compatibility modulo regions\n\nRegions don't really mean anything anyways during hir typeck.\n\nIf this `erase_regions` makes anyone nervous, it's probably equally valid to just equate the types using a type relation, but regardless we should _not_ be using strict type equality while region variables are present.\n\nFixes #103384", "tree": {"sha": "99a05baf61e6eaf41ecd8dc27f83f0e612ec71b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99a05baf61e6eaf41ecd8dc27f83f0e612ec71b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c", "html_url": "https://github.com/rust-lang/rust/commit/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07425d55b77fde99af2092a92109a0da0860692", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07425d55b77fde99af2092a92109a0da0860692", "html_url": "https://github.com/rust-lang/rust/commit/e07425d55b77fde99af2092a92109a0da0860692"}, {"sha": "83332539dd19f61893846e907d55c9abd613d007", "url": "https://api.github.com/repos/rust-lang/rust/commits/83332539dd19f61893846e907d55c9abd613d007", "html_url": "https://github.com/rust-lang/rust/commit/83332539dd19f61893846e907d55c9abd613d007"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "e5dc4b06c0ba620ade32f1d8a79b7feab64bd322", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=9cdfe03b0601d5328406746a7923a8a4eaa0cf3c", "patch": "@@ -33,6 +33,7 @@ use super::FnCtxt;\n use crate::type_error_struct;\n use rustc_errors::{struct_span_err, Applicability, DelayDm, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n@@ -67,7 +68,7 @@ pub struct CastCheck<'tcx> {\n /// The kind of pointer and associated metadata (thin, length or vtable) - we\n /// only allow casts between fat pointers if their metadata have the same\n /// kind.\n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, TypeVisitable, TypeFoldable)]\n enum PointerKind<'tcx> {\n     /// No metadata attached, ie pointer to sized type or foreign type\n     Thin,\n@@ -76,11 +77,11 @@ enum PointerKind<'tcx> {\n     /// Slice\n     Length,\n     /// The unsize info of this projection\n-    OfProjection(&'tcx ty::ProjectionTy<'tcx>),\n+    OfProjection(ty::ProjectionTy<'tcx>),\n     /// The unsize info of this opaque ty\n     OfOpaque(DefId, SubstsRef<'tcx>),\n     /// The unsize info of this parameter\n-    OfParam(&'tcx ty::ParamTy),\n+    OfParam(ty::ParamTy),\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -118,9 +119,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Pointers to foreign types are thin, despite being unsized\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n-            ty::Projection(ref pi) => Some(PointerKind::OfProjection(pi)),\n+            ty::Projection(pi) => Some(PointerKind::OfProjection(pi)),\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n-            ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n+            ty::Param(p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n             ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) => None,\n \n@@ -909,7 +910,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         }\n \n         // vtable kinds must match\n-        if cast_kind == expr_kind {\n+        if fcx.tcx.erase_regions(cast_kind) == fcx.tcx.erase_regions(expr_kind) {\n             Ok(CastKind::PtrPtrCast)\n         } else {\n             Err(CastError::DifferingKinds)"}, {"sha": "f51c5f20f167c5e53959cca3bd3bdbc1db581820", "filename": "src/test/ui/cast/cast-pointee-projection.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c/src%2Ftest%2Fui%2Fcast%2Fcast-pointee-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdfe03b0601d5328406746a7923a8a4eaa0cf3c/src%2Ftest%2Fui%2Fcast%2Fcast-pointee-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-pointee-projection.rs?ref=9cdfe03b0601d5328406746a7923a8a4eaa0cf3c", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+trait Tag<'a> {\n+    type Type: ?Sized;\n+}\n+\n+trait IntoRaw: for<'a> Tag<'a> {\n+    fn into_raw(this: *const <Self as Tag<'_>>::Type) -> *mut <Self as Tag<'_>>::Type;\n+}\n+\n+impl<T: for<'a> Tag<'a>> IntoRaw for T {\n+    fn into_raw(this: *const <Self as Tag<'_>>::Type) -> *mut <Self as Tag<'_>>::Type {\n+        this as *mut T::Type\n+    }\n+}\n+\n+fn main() {}"}]}