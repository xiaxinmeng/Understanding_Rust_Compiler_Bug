{"sha": "b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YmQ3YzEwMjRhMTQ0OTQ0OWMzYWU3YjRiNGM2M2E5MDRhNjIwZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-28T12:28:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-28T12:28:24Z"}, "message": "Auto merge of #71636 - Dylan-DPC:rollup-9gc24ak, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71311 (On `FnDef` type annotation suggestion, use fn-pointer output)\n - #71488 (normalize field projection ty to fix broken MIR issue)\n - #71489 (Fix off by one in treat err as bug)\n - #71585 (remove obsolete comment)\n - #71634 (Revert #71372 (\"Fix #! (shebang) stripping account space issue\").)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9c580230414c88a55eba7dd075fa6274cde01da8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c580230414c88a55eba7dd075fa6274cde01da8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "html_url": "https://github.com/rust-lang/rust/commit/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7afaa7247cc81e0cca7aa438aa1e1672328c0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7afaa7247cc81e0cca7aa438aa1e1672328c0a2", "html_url": "https://github.com/rust-lang/rust/commit/d7afaa7247cc81e0cca7aa438aa1e1672328c0a2"}, {"sha": "6cad1e30061a80a47faf6a2e1b3626de5af3c48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cad1e30061a80a47faf6a2e1b3626de5af3c48d", "html_url": "https://github.com/rust-lang/rust/commit/6cad1e30061a80a47faf6a2e1b3626de5af3c48d"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "e4a560e434aaaf87cf3bef793e63b8a08cba1777", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -869,7 +869,10 @@ impl HandlerInner {\n     }\n \n     fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {\n-        if self.treat_err_as_bug() {\n+        // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n+        // incrementing `err_count` by one, so we need to +1 the comparing.\n+        // FIXME: Would be nice to increment err_count in a more coherent way.\n+        if self.flags.treat_err_as_bug.map(|c| self.err_count() + 1 >= c).unwrap_or(false) {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }"}, {"sha": "93c8e505697b40230eace65f36e1135935a348b3", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -257,7 +257,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 None\n             };\n             printer.name_resolver = Some(Box::new(&getter));\n-            let _ = ty.print(printer);\n+            let _ = if let ty::FnDef(..) = ty.kind {\n+                // We don't want the regular output for `fn`s because it includes its path in\n+                // invalid pseduo-syntax, we want the `fn`-pointer output instead.\n+                ty.fn_sig(self.tcx).print(printer)\n+            } else {\n+                ty.print(printer)\n+            };\n             s\n         };\n "}, {"sha": "5ccfc1b276bfa0e1c71372aa4f3c99e588d0eff8", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -236,17 +236,12 @@ pub enum Base {\n /// (e.g. \"#![deny(missing_docs)]\").\n pub fn strip_shebang(input: &str) -> Option<usize> {\n     debug_assert!(!input.is_empty());\n-    let s: &str = &remove_whitespace(input);\n-    if !s.starts_with(\"#!\") || s.starts_with(\"#![\") {\n+    if !input.starts_with(\"#!\") || input.starts_with(\"#![\") {\n         return None;\n     }\n     Some(input.find('\\n').unwrap_or(input.len()))\n }\n \n-fn remove_whitespace(s: &str) -> String {\n-    s.chars().filter(|c| !c.is_whitespace()).collect()\n-}\n-\n /// Parses the first token from the provided input string.\n pub fn first_token(input: &str) -> Token {\n     debug_assert!(!input.is_empty());"}, {"sha": "06fc159fe2516a86f5a9e3e54efb1726a12bae4d", "filename": "src/librustc_lexer/src/tests.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -145,22 +145,4 @@ mod tests {\n             }),\n         );\n     }\n-\n-    #[test]\n-    fn test_valid_shebang() {\n-        // https://github.com/rust-lang/rust/issues/70528\n-        let input = \"#!/usr/bin/rustrun\";\n-        let actual = strip_shebang(input);\n-        let expected: Option<usize> = Some(18);\n-        assert_eq!(expected, actual);\n-    }\n-\n-    #[test]\n-    fn test_invalid_shebang_valid_rust_syntax() {\n-        // https://github.com/rust-lang/rust/issues/70528\n-        let input = \"#!    [bad_attribute]\";\n-        let actual = strip_shebang(input);\n-        let expected: Option<usize> = None;\n-        assert_eq!(expected, actual);\n-    }\n }"}, {"sha": "7f554742777e2fba137f7ee901d5e266a979550c", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -689,6 +689,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 let fty = self.sanitize_type(place, fty);\n                 match self.field_ty(place, base, field, location) {\n                     Ok(ty) => {\n+                        let ty = self.cx.normalize(ty, location);\n                         if let Err(terr) = self.cx.eq_types(\n                             ty,\n                             fty,"}, {"sha": "43fa7b9922d746b6843f9bdf2051b50c38d5e739", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -835,13 +835,6 @@ where\n         }\n     }\n \n-    /// Returns a basic block that drop a place using the context\n-    /// and path in `c`. If `mode` is something, also clear `c`\n-    /// according to it.\n-    ///\n-    /// if FLAG(self.path)\n-    ///     if let Some(mode) = mode: FLAG(self.path)[mode] = false\n-    ///     drop(self.place)\n     fn complete_drop(\n         &mut self,\n         drop_mode: Option<DropFlagMode>,"}, {"sha": "57cac76aec2a5384243aa2d6fed45add8a19c416", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -3,3 +3,5 @@\n all:\n \t$(RUSTC) err.rs -Z treat-err-as-bug 2>&1 \\\n \t    | $(CGREP) \"panicked at 'aborting due to \\`-Z treat-err-as-bug=1\\`'\"\n+\t$(RUSTC) delay_span_bug.rs -Z treat-err-as-bug 2>&1 \\\n+\t    | $(CGREP) \"panicked at 'aborting due to \\`-Z treat-err-as-bug=1\\`'\""}, {"sha": "dad33e498b52fb57eb49660aef11acbf0de48242", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/delay_span_bug.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Fdelay_span_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Fdelay_span_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2Fdelay_span_bug.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -0,0 +1,4 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_error(delay_span_bug_from_inside_query)]\n+fn main() {}"}, {"sha": "9d44aa1361cfc53223d221f3e6b093c153e5c2f4", "filename": "src/test/ui/consts/issue-70773-mir-typeck-lt-norm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -7,6 +7,7 @@ fn init_hash(_: &mut [u8; HASH_LEN]) {}\n fn foo<'a>() -> &'a () {\n     Hash([0; HASH_LEN]);\n     init_hash(&mut [0; HASH_LEN]);\n+    let (_array,) = ([0; HASH_LEN],);\n     &()\n }\n "}, {"sha": "2f140f823afb923707f116ba589670d9c35542ae", "filename": "src/test/ui/suggestions/fn-needing-specified-return-type-param.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.rs?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -0,0 +1,5 @@\n+fn f<A>() -> A { unimplemented!() }\n+fn foo() {\n+    let _ = f; //~ ERROR type annotations needed for `fn() -> A`\n+}\n+fn main() {}"}, {"sha": "b59a3818e704253358074c2a397e6c513a3dbe4b", "filename": "src/test/ui/suggestions/fn-needing-specified-return-type-param.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr?ref=b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed for `fn() -> A`\n+  --> $DIR/fn-needing-specified-return-type-param.rs:3:13\n+   |\n+LL |     let _ = f;\n+   |         -   ^ cannot infer type for type parameter `A` declared on the function `f`\n+   |         |\n+   |         consider giving this pattern the explicit type `fn() -> A`, where the type parameter `A` is specified\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}