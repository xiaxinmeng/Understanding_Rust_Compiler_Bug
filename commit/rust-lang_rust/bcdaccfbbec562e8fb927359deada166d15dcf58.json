{"sha": "bcdaccfbbec562e8fb927359deada166d15dcf58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZGFjY2ZiYmVjNTYyZThmYjkyNzM1OWRlYWRhMTY2ZDE1ZGNmNTg=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-25T17:31:27Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc: replace span_bug calls with span_bug!()", "tree": {"sha": "d6205e2f0ec6a4b58b804ddb931d904db440e334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6205e2f0ec6a4b58b804ddb931d904db440e334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdaccfbbec562e8fb927359deada166d15dcf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdaccfbbec562e8fb927359deada166d15dcf58", "html_url": "https://github.com/rust-lang/rust/commit/bcdaccfbbec562e8fb927359deada166d15dcf58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdaccfbbec562e8fb927359deada166d15dcf58/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859b5a141c14ee875dcc1d061f4c94378a989844", "url": "https://api.github.com/repos/rust-lang/rust/commits/859b5a141c14ee875dcc1d061f4c94378a989844", "html_url": "https://github.com/rust-lang/rust/commit/859b5a141c14ee875dcc1d061f4c94378a989844"}], "stats": {"total": 338, "additions": 162, "deletions": 176}, "files": [{"sha": "cd1e3b5f30e9ce22b0e6dd045e85e2255a6e6419", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -583,13 +583,11 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                         return *l;\n                     }\n                 }\n-                self.tcx.sess.span_bug(expr.span,\n-                    &format!(\"no loop scope for id {}\", loop_id));\n+                span_bug!(expr.span, \"no loop scope for id {}\", loop_id);\n             }\n \n             r => {\n-                self.tcx.sess.span_bug(expr.span,\n-                    &format!(\"bad entry `{:?}` in def_map for label\", r));\n+                span_bug!(expr.span, \"bad entry `{:?}` in def_map for label\", r);\n             }\n         }\n     }"}, {"sha": "8edf24fbc25acb509f492acb53abf27f54a12d81", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -339,10 +339,10 @@ impl<'cx, 'tcx> ty::fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n             // Early-bound regions should really have been substituted away before\n             // we get to this point.\n             ty::ReEarlyBound(..) => {\n-                self.tcx().sess.span_bug(\n+                span_bug!(\n                     self.span,\n-                    &format!(\"Encountered early bound region when generalizing: {:?}\",\n-                            r));\n+                    \"Encountered early bound region when generalizing: {:?}\",\n+                    r);\n             }\n \n             // Always make a fresh region variable for skolemized regions;"}, {"sha": "d89ef8ef6c31dbf2bb80df81d92d6967a9a7d907", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -183,11 +183,10 @@ impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> {\n                 }\n             }\n \n-            infcx.tcx.sess.span_bug(\n+            span_bug!(\n                 span,\n-                &format!(\"region {:?} is not associated with \\\n-                         any bound region from A!\",\n-                        r0))\n+                \"region {:?} is not associated with any bound region from A!\",\n+                r0)\n         }\n     }\n \n@@ -297,7 +296,7 @@ impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> {\n \n             if a_r.is_some() && b_r.is_some() && only_new_vars {\n                 // Related to exactly one bound variable from each fn:\n-                return rev_lookup(infcx, span, a_map, a_r.unwrap());\n+                return rev_lookup(span, a_map, a_r.unwrap());\n             } else if a_r.is_none() && b_r.is_none() {\n                 // Not related to bound variables from either fn:\n                 assert!(!r0.is_bound());\n@@ -308,8 +307,7 @@ impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> {\n             }\n         }\n \n-        fn rev_lookup(infcx: &InferCtxt,\n-                      span: Span,\n+        fn rev_lookup(span: Span,\n                       a_map: &FnvHashMap<ty::BoundRegion, ty::Region>,\n                       r: ty::Region) -> ty::Region\n         {\n@@ -318,9 +316,10 @@ impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> {\n                     return ty::ReLateBound(ty::DebruijnIndex::new(1), *a_br);\n                 }\n             }\n-            infcx.tcx.sess.span_bug(\n+            span_bug!(\n                 span,\n-                &format!(\"could not find original bound region for {:?}\", r));\n+                \"could not find original bound region for {:?}\",\n+                r);\n         }\n \n         fn fresh_bound_variable(infcx: &InferCtxt, debruijn: ty::DebruijnIndex) -> ty::Region {\n@@ -336,9 +335,10 @@ fn var_ids<'a, 'tcx>(fields: &CombineFields<'a, 'tcx>,\n        .map(|(_, r)| match *r {\n            ty::ReVar(r) => { r }\n            r => {\n-               fields.tcx().sess.span_bug(\n+               span_bug!(\n                    fields.trace.origin.span(),\n-                   &format!(\"found non-region-vid: {:?}\", r));\n+                   \"found non-region-vid: {:?}\",\n+                   r);\n            }\n        })\n        .collect()"}, {"sha": "35e1be7e5f440495d667daac3a6f396f19d6e6e2", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -536,10 +536,10 @@ pub fn drain_fulfillment_cx_or_panic<'a,'tcx,T>(span: Span,\n     match drain_fulfillment_cx(infcx, fulfill_cx, result) {\n         Ok(v) => v,\n         Err(errors) => {\n-            infcx.tcx.sess.span_bug(\n+            span_bug!(\n                 span,\n-                &format!(\"Encountered errors `{:?}` fulfilling during trans\",\n-                         errors));\n+                \"Encountered errors `{:?}` fulfilling during trans\",\n+                errors);\n         }\n     }\n }"}, {"sha": "32eeb9c4ea39d39a53d7a8036b5339141ec70f88", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -497,10 +497,10 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             (ReLateBound(..), _) |\n             (_, ReEarlyBound(..)) |\n             (_, ReLateBound(..)) => {\n-                self.tcx.sess.span_bug(origin.span(),\n-                                       &format!(\"cannot relate bound region: {:?} <= {:?}\",\n-                                                sub,\n-                                                sup));\n+                span_bug!(origin.span(),\n+                          \"cannot relate bound region: {:?} <= {:?}\",\n+                          sub,\n+                          sup);\n             }\n             (_, ReStatic) => {\n                 // all regions are subregions of static, so we can ignore this\n@@ -570,9 +570,9 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     pub fn resolve_var(&self, rid: RegionVid) -> ty::Region {\n         match *self.values.borrow() {\n             None => {\n-                self.tcx.sess.span_bug((*self.var_origins.borrow())[rid.index as usize].span(),\n-                                       \"attempt to resolve region variable before values have \\\n-                                        been computed!\")\n+                span_bug!((*self.var_origins.borrow())[rid.index as usize].span(),\n+                          \"attempt to resolve region variable before values have \\\n+                           been computed!\")\n             }\n             Some(ref values) => {\n                 let r = lookup(values, rid);\n@@ -745,11 +745,11 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             }\n \n             (ReVar(v_id), _) | (_, ReVar(v_id)) => {\n-                self.tcx.sess.span_bug((*self.var_origins.borrow())[v_id.index as usize].span(),\n-                                       &format!(\"lub_concrete_regions invoked with non-concrete \\\n-                                                 regions: {:?}, {:?}\",\n-                                                a,\n-                                                b));\n+                span_bug!((*self.var_origins.borrow())[v_id.index as usize].span(),\n+                          \"lub_concrete_regions invoked with non-concrete \\\n+                           regions: {:?}, {:?}\",\n+                          a,\n+                          b);\n             }\n \n             (ReFree(ref fr), ReScope(s_id)) |\n@@ -1193,13 +1193,13 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             }\n         }\n \n-        self.tcx.sess.span_bug((*self.var_origins.borrow())[node_idx.index as usize].span(),\n-                               &format!(\"collect_error_for_expanding_node() could not find \\\n-                                         error for var {:?}, lower_bounds={:?}, \\\n-                                         upper_bounds={:?}\",\n-                                        node_idx,\n-                                        lower_bounds,\n-                                        upper_bounds));\n+        span_bug!((*self.var_origins.borrow())[node_idx.index as usize].span(),\n+                  \"collect_error_for_expanding_node() could not find \\\n+                   error for var {:?}, lower_bounds={:?}, \\\n+                   upper_bounds={:?}\",\n+                  node_idx,\n+                  lower_bounds,\n+                  upper_bounds);\n     }\n \n     fn collect_concrete_regions(&self,"}, {"sha": "7e6eb0146fcfe6825822809a6ee84621ec596262", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -1275,9 +1275,9 @@ pub fn check_crate(tcx: &TyCtxt, access_levels: &AccessLevels) {\n     // in the iteration code.\n     for (id, v) in tcx.sess.lints.borrow().iter() {\n         for &(lint, span, ref msg) in v {\n-            tcx.sess.span_bug(span,\n-                              &format!(\"unprocessed lint {} at {}: {}\",\n-                                       lint.as_str(), tcx.map.node_to_string(*id), *msg))\n+            span_bug!(span,\n+                      \"unprocessed lint {} at {}: {}\",\n+                      lint.as_str(), tcx.map.node_to_string(*id), *msg)\n         }\n     }\n \n@@ -1314,9 +1314,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // in the iteration code.\n     for (_, v) in sess.lints.borrow().iter() {\n         for &(lint, span, ref msg) in v {\n-            sess.span_bug(span,\n-                          &format!(\"unprocessed lint {}: {}\",\n-                                   lint.as_str(), *msg))\n+            span_bug!(span, \"unprocessed lint {}: {}\", lint.as_str(), *msg)\n         }\n     }\n }"}, {"sha": "b86d74545cb8ee700912cad20caaac32e710498d", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -67,8 +67,7 @@ pub fn ast_ty_to_prim_ty<'tcx>(tcx: &TyCtxt<'tcx>, ast_ty: &ast::Ty)\n     if let ast::TyPath(None, ref path) = ast_ty.node {\n         let def = match tcx.def_map.borrow().get(&ast_ty.id) {\n             None => {\n-                tcx.sess.span_bug(ast_ty.span,\n-                                  &format!(\"unbound path {:?}\", path))\n+                span_bug!(ast_ty.span, \"unbound path {:?}\", path)\n             }\n             Some(d) => d.full_def()\n         };"}, {"sha": "18bea745858a3aea21bd80c3e7ec1acc814cc123", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         if let ty::TyStruct(def, _) = self.tcx.expr_ty_adjusted(lhs).sty {\n             self.insert_def_id(def.struct_variant().field_named(name).did);\n         } else {\n-            self.tcx.sess.span_bug(lhs.span, \"named field access on non-struct\")\n+            span_bug!(lhs.span, \"named field access on non-struct\")\n         }\n     }\n \n@@ -141,7 +141,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         let pat_ty = self.tcx.node_id_to_type(lhs.id);\n         let variant = match pat_ty.sty {\n             ty::TyStruct(adt, _) | ty::TyEnum(adt, _) => adt.variant_of_def(def),\n-            _ => self.tcx.sess.span_bug(lhs.span, \"non-ADT in struct pattern\")\n+            _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")\n         };\n         for pat in pats {\n             if let PatKind::Wild = pat.node.pat.node {"}, {"sha": "bfc96005bc8a41d260189c768fe14e014637690d", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -564,9 +564,10 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                             OverloadedCallType::from_method_id(self.tcx(), method_id)\n                         }\n                         None => {\n-                            self.tcx().sess.span_bug(\n+                            span_bug!(\n                                 callee.span,\n-                                &format!(\"unexpected callee type {}\", callee_ty))\n+                                \"unexpected callee type {}\",\n+                                callee_ty)\n                         }\n                     };\n                 match overloaded_call_type {\n@@ -683,7 +684,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n             // may not. This will generate an error earlier in typeck,\n             // so we can just ignore it.\n             if !self.tcx().sess.has_errors() {\n-                self.tcx().sess.span_bug(\n+                span_bug!(\n                     with_expr.span,\n                     \"with expression doesn't evaluate to a struct\");\n             }\n@@ -750,9 +751,9 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n \n                     let (m, r) = match self_ty.sty {\n                         ty::TyRef(r, ref m) => (m.mutbl, r),\n-                        _ => self.tcx().sess.span_bug(expr.span,\n-                                &format!(\"bad overloaded deref type {:?}\",\n-                                    method_ty))\n+                        _ => span_bug!(expr.span,\n+                                \"bad overloaded deref type {:?}\",\n+                                method_ty)\n                     };\n                     let bk = ty::BorrowKind::from_mutbl(m);\n                     self.delegate.borrow(expr.id, expr.span, cmt,\n@@ -934,7 +935,6 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         debug!(\"determine_pat_move_mode cmt_discr={:?} pat={:?}\", cmt_discr,\n                pat);\n         return_if_err!(self.mc.cat_pattern(cmt_discr, pat, |_mc, cmt_pat, pat| {\n-            let tcx = self.tcx();\n             let def_map = &self.tcx().def_map;\n             if pat_util::pat_is_binding(&def_map.borrow(), pat) {\n                 match pat.node {\n@@ -947,7 +947,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                         }\n                     }\n                     _ => {\n-                        tcx.sess.span_bug(\n+                        span_bug!(\n                             pat.span,\n                             \"binding pattern not an identifier\");\n                     }\n@@ -972,8 +972,6 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         let delegate = &mut self.delegate;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |mc, cmt_pat, pat| {\n             if pat_util::pat_is_binding(&def_map.borrow(), pat) {\n-                let tcx = typer.tcx;\n-\n                 debug!(\"binding cmt_pat={:?} pat={:?} match_mode={:?}\",\n                        cmt_pat,\n                        pat,\n@@ -1007,7 +1005,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                         delegate.consume_pat(pat, cmt_pat, mode);\n                     }\n                     _ => {\n-                        tcx.sess.span_bug(\n+                        span_bug!(\n                             pat.span,\n                             \"binding pattern not an identifier\");\n                     }\n@@ -1117,10 +1115,10 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                             // reported.\n \n                             if !tcx.sess.has_errors() {\n-                                let msg = format!(\"Pattern has unexpected def: {:?} and type {:?}\",\n-                                                  def,\n-                                                  cmt_pat.ty);\n-                                tcx.sess.span_bug(pat.span, &msg[..])\n+                                span_bug!(pat.span,\n+                                          \"Pattern has unexpected def: {:?} and type {:?}\",\n+                                          def,\n+                                          cmt_pat.ty);\n                             }\n                         }\n                     }"}, {"sha": "fd74ccac975967e52fc3c7fd24f42110d7da5385", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n         let param_env = match self.param_envs.last() {\n             Some(p) => p,\n             None => {\n-                self.tcx.sess.span_bug(\n+                span_bug!(\n                     span,\n                     \"transmute encountered outside of any fn\");\n             }\n@@ -245,9 +245,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            self.tcx\n-                                .sess\n-                                .span_bug(expr.span, \"transmute wasn't a bare fn?!\");\n+                            span_bug!(expr.span, \"transmute wasn't a bare fn?!\");\n                         }\n                     }\n                 }"}, {"sha": "cc37ee7dbda051571308108b50e9a7025f5a594d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -325,13 +325,10 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n \n     fn variable(&self, node_id: NodeId, span: Span) -> Variable {\n         match self.variable_map.get(&node_id) {\n-          Some(&var) => var,\n-          None => {\n-            self.tcx\n-                .sess\n-                .span_bug(span, &format!(\"no variable registered for id {}\",\n-                                        node_id));\n-          }\n+            Some(&var) => var,\n+            None => {\n+                span_bug!(span, \"no variable registered for id {}\", node_id);\n+            }\n         }\n     }\n \n@@ -578,10 +575,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             // above and the propagation code below; the two sets of\n             // code have to agree about which AST nodes are worth\n             // creating liveness nodes for.\n-            self.ir.tcx.sess.span_bug(\n+            span_bug!(\n                 span,\n-                &format!(\"no live node registered for node {}\",\n-                        node_id));\n+                \"no live node registered for node {}\",\n+                node_id);\n           }\n         }\n     }\n@@ -703,15 +700,15 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // to find with one\n                 match self.ir.tcx.def_map.borrow().get(&id).map(|d| d.full_def()) {\n                     Some(Def::Label(loop_id)) => loop_id,\n-                    _ => self.ir.tcx.sess.span_bug(sp, \"label on break/loop \\\n-                                                        doesn't refer to a loop\")\n+                    _ => span_bug!(sp, \"label on break/loop \\\n+                                        doesn't refer to a loop\")\n                 }\n             }\n             None => {\n                 // Vanilla 'break' or 'loop', so use the enclosing\n                 // loop scope\n                 if self.loop_scope.is_empty() {\n-                    self.ir.tcx.sess.span_bug(sp, \"break outside loop\");\n+                    span_bug!(sp, \"break outside loop\");\n                 } else {\n                     *self.loop_scope.last().unwrap()\n                 }\n@@ -967,7 +964,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                  let caps = match this.ir.capture_info_map.get(&expr.id) {\n                     Some(caps) => caps.clone(),\n                     None => {\n-                        this.ir.tcx.sess.span_bug(expr.span, \"no registered caps\");\n+                        span_bug!(expr.span, \"no registered caps\");\n                      }\n                  };\n                  caps.iter().rev().fold(succ, |succ, cap| {\n@@ -1061,8 +1058,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n               match self.break_ln.get(&sc) {\n                   Some(&b) => b,\n-                  None => self.ir.tcx.sess.span_bug(expr.span,\n-                                                    \"break to unknown label\")\n+                  None => span_bug!(expr.span, \"break to unknown label\")\n               }\n           }\n \n@@ -1075,8 +1071,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n               match self.cont_ln.get(&sc) {\n                   Some(&b) => b,\n-                  None => self.ir.tcx.sess.span_bug(expr.span,\n-                                                    \"loop to unknown label\")\n+                  None => span_bug!(expr.span, \"loop to unknown label\")\n               }\n           }\n "}, {"sha": "aede30d23abe157ed75ec0df1f3034cfee485946", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -312,9 +312,9 @@ impl MutabilityCategory {\n                         McImmutable\n                     }\n                 }\n-                _ => tcx.sess.span_bug(p.span, \"expected identifier pattern\")\n+                _ => span_bug!(p.span, \"expected identifier pattern\")\n             },\n-            _ => tcx.sess.span_bug(tcx.map.span(id), \"expected identifier pattern\")\n+            _ => span_bug!(tcx.map.span(id), \"expected identifier pattern\")\n         };\n         debug!(\"MutabilityCategory::{}(tcx, id={:?}) => {:?}\",\n                \"from_local\", id, ret);\n@@ -559,8 +559,8 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n           Def::TyParam(..) |\n           Def::Label(_) | Def::SelfTy(..) |\n           Def::AssociatedTy(..) => {\n-              self.tcx().sess.span_bug(span, &format!(\"Unexpected definition in \\\n-                                                       memory categorization: {:?}\", def));\n+              span_bug!(span, \"Unexpected definition in \\\n+                               memory categorization: {:?}\", def);\n           }\n \n           Def::Static(_, mutbl) => {\n@@ -583,18 +583,19 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                               self.cat_upvar(id, span, var_id, fn_node_id, kind)\n                           }\n                           None => {\n-                              self.tcx().sess.span_bug(\n+                              span_bug!(\n                                   span,\n-                                  &format!(\"No closure kind for {:?}\", closure_id));\n+                                  \"No closure kind for {:?}\",\n+                                  closure_id);\n                           }\n                       }\n                   }\n                   _ => {\n-                      self.tcx().sess.span_bug(\n+                      span_bug!(\n                           span,\n-                          &format!(\"Upvar of non-closure {} - {:?}\",\n-                                  fn_node_id,\n-                                  ty));\n+                          \"Upvar of non-closure {} - {:?}\",\n+                          fn_node_id,\n+                          ty);\n                   }\n               }\n           }\n@@ -926,7 +927,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                 let ptr = if implicit {\n                     match ptr {\n                         BorrowedPtr(bk, r) => Implicit(bk, r),\n-                        _ => self.tcx().sess.span_bug(node.span(),\n+                        _ => span_bug!(node.span(),\n                             \"Implicit deref of non-borrowed pointer\")\n                     }\n                 } else {\n@@ -1092,8 +1093,8 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                 },\n \n                 _ => {\n-                    tcx.sess.span_bug(pat.span,\n-                                      \"type of slice pattern is not a slice\");\n+                    span_bug!(pat.span,\n+                              \"type of slice pattern is not a slice\");\n                 }\n             }\n         }\n@@ -1261,9 +1262,10 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n                     }\n                 }\n                 _ => {\n-                    self.tcx().sess.span_bug(\n+                    span_bug!(\n                         pat.span,\n-                        &format!(\"enum pattern didn't resolve to enum or struct {:?}\", opt_def));\n+                        \"enum pattern didn't resolve to enum or struct {:?}\",\n+                        opt_def);\n                 }\n             }\n           }"}, {"sha": "149e895717c00e72525bb81bc9c6bbf1cca46570", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -67,10 +67,10 @@ fn method_might_be_inlined(tcx: &TyCtxt, sig: &hir::MethodSig,\n             Some(ast_map::NodeItem(item)) =>\n                 item_might_be_inlined(&item),\n             Some(..) | None =>\n-                tcx.sess.span_bug(impl_item.span, \"impl did is not an item\")\n+                span_bug!(impl_item.span, \"impl did is not an item\")\n         }\n     } else {\n-        tcx.sess.span_bug(impl_item.span, \"found a foreign impl as a parent of a local method\")\n+        span_bug!(impl_item.span, \"found a foreign impl as a parent of a local method\")\n     }\n }\n \n@@ -94,8 +94,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n                 let def = match self.tcx.def_map.borrow().get(&expr.id) {\n                     Some(d) => d.full_def(),\n                     None => {\n-                        self.tcx.sess.span_bug(expr.span,\n-                                               \"def ID not in def map?!\")\n+                        span_bug!(expr.span, \"def ID not in def map?!\")\n                     }\n                 };\n "}, {"sha": "7b16d682809f6a556134e87577493eb25a673fcc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -747,9 +747,9 @@ impl<'a> LifetimeContext<'a> {\n                        lifetime_ref: &hir::Lifetime,\n                        def: DefRegion) {\n         if lifetime_ref.id == ast::DUMMY_NODE_ID {\n-            self.sess.span_bug(lifetime_ref.span,\n-                               \"lifetime reference not renumbered, \\\n-                               probably a bug in syntax::fold\");\n+            span_bug!(lifetime_ref.span,\n+                      \"lifetime reference not renumbered, \\\n+                       probably a bug in syntax::fold\");\n         }\n \n         debug!(\"lifetime_ref={:?} id={:?} resolved to {:?}\","}, {"sha": "e589743222b72c7c048e42a048d9a1575e13dc6f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -516,18 +516,18 @@ pub fn check_expr(tcx: &TyCtxt, e: &hir::Expr,\n             span = field.span;\n             match tcx.expr_ty_adjusted(base_e).sty {\n                 ty::TyStruct(def, _) => def.struct_variant().field_named(field.node).did,\n-                _ => tcx.sess.span_bug(e.span,\n-                                       \"stability::check_expr: named field access on non-struct\")\n+                _ => span_bug!(e.span,\n+                               \"stability::check_expr: named field access on non-struct\")\n             }\n         }\n         hir::ExprTupField(ref base_e, ref field) => {\n             span = field.span;\n             match tcx.expr_ty_adjusted(base_e).sty {\n                 ty::TyStruct(def, _) => def.struct_variant().fields[field.node].did,\n                 ty::TyTuple(..) => return,\n-                _ => tcx.sess.span_bug(e.span,\n-                                       \"stability::check_expr: unnamed field access on \\\n-                                        something other than a tuple or struct\")\n+                _ => span_bug!(e.span,\n+                               \"stability::check_expr: unnamed field access on \\\n+                                something other than a tuple or struct\")\n             }\n         }\n         hir::ExprStruct(_, ref expr_fields, _) => {\n@@ -551,10 +551,10 @@ pub fn check_expr(tcx: &TyCtxt, e: &hir::Expr,\n                 // a bug to have construct one.\n                 ty::TyEnum(..) => return,\n                 _ => {\n-                    tcx.sess.span_bug(e.span,\n-                                      &format!(\"stability::check_expr: struct construction \\\n-                                                of non-struct, type {:?}\",\n-                                               type_));\n+                    span_bug!(e.span,\n+                              \"stability::check_expr: struct construction \\\n+                               of non-struct, type {:?}\",\n+                              type_);\n                 }\n             }\n         }"}, {"sha": "edbeb3930244c695526c0574f5d94905269c4c57", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -268,9 +268,9 @@ pub fn try_report_overflow_error_type_of_infinite_size<'a, 'tcx>(\n                      }\n                  }\n                  _ => {\n-                     infcx.tcx.sess.span_bug(obligation.cause.span,\n-                                             &format!(\"Sized cycle involving non-trait-ref: {:?}\",\n-                                                      obligation.predicate));\n+                     span_bug!(obligation.cause.span,\n+                               \"Sized cycle involving non-trait-ref: {:?}\",\n+                               obligation.predicate);\n                  }\n              })\n              .collect();\n@@ -472,9 +472,10 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                         // ambiguity; otherwise, they always\n                         // degenerate into other obligations\n                         // (which may fail).\n-                        infcx.tcx.sess.span_bug(\n+                        span_bug!(\n                             obligation.cause.span,\n-                            &format!(\"WF predicate not satisfied for {:?}\", ty));\n+                            \"WF predicate not satisfied for {:?}\",\n+                            ty);\n                     }\n                 }\n             }"}, {"sha": "f7b75c2259eb157b8e76ade7bdcdee340ca220ac", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -858,10 +858,10 @@ fn assemble_candidates_from_object_type<'cx,'tcx>(\n     let data = match object_ty.sty {\n         ty::TyTrait(ref data) => data,\n         _ => {\n-            selcx.tcx().sess.span_bug(\n+            span_bug!(\n                 obligation.cause.span,\n-                &format!(\"assemble_candidates_from_object_type called with non-object: {:?}\",\n-                         object_ty));\n+                \"assemble_candidates_from_object_type called with non-object: {:?}\",\n+                object_ty);\n         }\n     };\n     let projection_bounds = data.projection_bounds_with_self_ty(selcx.tcx(), object_ty);\n@@ -951,10 +951,10 @@ fn assemble_candidates_from_impls<'cx,'tcx>(\n         super::VtableDefaultImpl(..) |\n         super::VtableBuiltin(..) => {\n             // These traits have no associated types.\n-            selcx.tcx().sess.span_bug(\n+            span_bug!(\n                 obligation.cause.span,\n-                &format!(\"Cannot project an associated type from `{:?}`\",\n-                         vtable));\n+                \"Cannot project an associated type from `{:?}`\",\n+                vtable);\n         }\n     }\n \n@@ -1084,12 +1084,12 @@ fn confirm_param_env_candidate<'cx,'tcx>(\n                               projection.projection_ty.trait_ref.clone()) {\n         Ok(()) => { }\n         Err(e) => {\n-            selcx.tcx().sess.span_bug(\n+            span_bug!(\n                 obligation.cause.span,\n-                &format!(\"Failed to unify `{:?}` and `{:?}` in projection: {}\",\n-                         obligation,\n-                         projection,\n-                         e));\n+                \"Failed to unify `{:?}` and `{:?}` in projection: {}\",\n+                obligation,\n+                projection,\n+                e);\n         }\n     }\n \n@@ -1124,8 +1124,9 @@ fn confirm_impl_candidate<'cx,'tcx>(\n             (ty.subst(tcx, substs), nested)\n         }\n         None => {\n-            tcx.sess.span_bug(obligation.cause.span,\n-                              &format!(\"No associated type for {:?}\", trait_ref));\n+            span_bug!(obligation.cause.span,\n+                      \"No associated type for {:?}\",\n+                      trait_ref);\n         }\n     }\n }"}, {"sha": "9c7ddabc8facba038307831fb2f8816dcf05978b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -1088,7 +1088,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let trait_def_id = match obligation.predicate.0.trait_ref.self_ty().sty {\n             ty::TyProjection(ref data) => data.trait_ref.def_id,\n             ty::TyInfer(ty::TyVar(_)) => {\n-                self.tcx().sess.span_bug(obligation.cause.span,\n+                span_bug!(obligation.cause.span,\n                     \"Self=_ should have been handled by assemble_candidates\");\n             }\n             _ => { return; }\n@@ -1125,11 +1125,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let projection_trait_ref = match skol_trait_predicate.trait_ref.self_ty().sty {\n             ty::TyProjection(ref data) => &data.trait_ref,\n             _ => {\n-                self.tcx().sess.span_bug(\n+                span_bug!(\n                     obligation.cause.span,\n-                    &format!(\"match_projection_obligation_against_bounds_from_trait() called \\\n-                              but self-ty not a projection: {:?}\",\n-                             skol_trait_predicate.trait_ref.self_ty()));\n+                    \"match_projection_obligation_against_bounds_from_trait() called \\\n+                     but self-ty not a projection: {:?}\",\n+                    skol_trait_predicate.trait_ref.self_ty());\n             }\n         };\n         debug!(\"match_projection_obligation_against_bounds_from_trait: \\\n@@ -2150,10 +2150,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match self.builtin_bound(bound, obligation)? {\n             If(nested) => Ok(self.vtable_builtin_data(obligation, bound, nested)),\n             AmbiguousBuiltin | ParameterBuiltin => {\n-                self.tcx().sess.span_bug(\n+                span_bug!(\n                     obligation.cause.span,\n-                    &format!(\"builtin bound for {:?} was ambig\",\n-                            obligation));\n+                    \"builtin bound for {:?} was ambig\",\n+                    obligation);\n             }\n         }\n     }\n@@ -2353,8 +2353,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 data.principal_trait_ref_with_self_ty(self.tcx(), self_ty)\n             }\n             _ => {\n-                self.tcx().sess.span_bug(obligation.cause.span,\n-                                         \"object candidate with non-object\");\n+                span_bug!(obligation.cause.span,\n+                          \"object candidate with non-object\");\n             }\n         };\n "}, {"sha": "90ccdeea9289036282af36e28845f66fb658915c", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -234,12 +234,11 @@ impl<'tcx> ty::TyS<'tcx> {\n         match adjusted_ty.builtin_deref(true, NoPreference) {\n             Some(mt) => mt.ty,\n             None => {\n-                cx.sess.span_bug(\n+                span_bug!(\n                     expr_span,\n-                    &format!(\"the {}th autoderef failed: {}\",\n-                             autoderef,\n-                             adjusted_ty)\n-                        );\n+                    \"the {}th autoderef failed: {}\",\n+                    autoderef,\n+                    adjusted_ty);\n             }\n         }\n     }"}, {"sha": "b52460f6c5791f80a00691d7fb285f4f079587d9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -1339,10 +1339,10 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                                            cx.region_maps.item_extent(id))\n                     }\n                     _ => {\n-                        cx.sess.span_bug(item.span,\n-                                         \"ParameterEnvironment::for_item():\n-                                          can't create a parameter \\\n-                                          environment for this kind of item\")\n+                        span_bug!(item.span,\n+                                  \"ParameterEnvironment::for_item():\n+                                   can't create a parameter \\\n+                                   environment for this kind of item\")\n                     }\n                 }\n             }\n@@ -2003,8 +2003,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         match self.def_map.borrow().get(&expr.id) {\n             Some(def) => def.full_def(),\n             None => {\n-                self.sess.span_bug(expr.span, &format!(\n-                    \"no def-map entry for expr {}\", expr.id));\n+                span_bug!(expr.span, \"no def-map entry for expr {}\", expr.id);\n             }\n         }\n     }\n@@ -2027,8 +2026,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                     Some(&def::PathResolution { base_def: Def::Err, .. })=> true,\n                     Some(..) => false,\n-                    None => self.sess.span_bug(expr.span, &format!(\n-                        \"no def for path {}\", expr.id))\n+                    None => span_bug!(expr.span, \"no def for path {}\", expr.id)\n                 }\n             }\n "}, {"sha": "81f50e2e0a1619a63873c20d9a473927d79cbab2", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdaccfbbec562e8fb927359deada166d15dcf58/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=bcdaccfbbec562e8fb927359deada166d15dcf58", "patch": "@@ -604,15 +604,15 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                     }\n                     None => {\n                         let span = self.span.unwrap_or(DUMMY_SP);\n-                        self.tcx().sess.span_bug(\n+                        span_bug!(\n                             span,\n-                            &format!(\"Region parameter out of range \\\n-                                      when substituting in region {} (root type={:?}) \\\n-                                      (space={:?}, index={})\",\n-                                     data.name,\n-                                     self.root_ty,\n-                                     data.space,\n-                                     data.index));\n+                            \"Region parameter out of range \\\n+                             when substituting in region {} (root type={:?}) \\\n+                             (space={:?}, index={})\",\n+                            data.name,\n+                            self.root_ty,\n+                            data.space,\n+                            data.index);\n                     }\n                 }\n             }\n@@ -659,16 +659,16 @@ impl<'a,'tcx> SubstFolder<'a,'tcx> {\n             Some(t) => *t,\n             None => {\n                 let span = self.span.unwrap_or(DUMMY_SP);\n-                self.tcx().sess.span_bug(\n+                span_bug!(\n                     span,\n-                    &format!(\"Type parameter `{:?}` ({:?}/{:?}/{}) out of range \\\n-                                 when substituting (root type={:?}) substs={:?}\",\n-                            p,\n-                            source_ty,\n-                            p.space,\n-                            p.idx,\n-                            self.root_ty,\n-                            self.substs));\n+                    \"Type parameter `{:?}` ({:?}/{:?}/{}) out of range \\\n+                         when substituting (root type={:?}) substs={:?}\",\n+                    p,\n+                    source_ty,\n+                    p.space,\n+                    p.idx,\n+                    self.root_ty,\n+                    self.substs);\n             }\n         };\n "}]}