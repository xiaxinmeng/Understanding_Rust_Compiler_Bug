{"sha": "347d19934db06f0467377ec138e7415a119f2a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0N2QxOTkzNGRiMDZmMDQ2NzM3N2VjMTM4ZTc0MTVhMTE5ZjJhM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-02T23:33:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-02T23:33:39Z"}, "message": "auto merge of #5198 : youknowone/rust/repeat-count, r=brson\n\nBefore:\r\n````\r\ntest.rs:3:21: 3:30 error: expected constant integer for repeat count but found variable\r\ntest.rs:3             let a = ~[0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\r\n                              ^~~~~~~~~\r\n````\r\n\r\nAfter:\r\n````\r\ntest.rs:3:27: 3:28 error: expected constant integer for repeat count but found variable\r\ntest.rs:3             let a = ~[0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\r\n                                     ^\r\n````", "tree": {"sha": "c744ed58153bd4f3316d273ad4343377840e05da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c744ed58153bd4f3316d273ad4343377840e05da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347d19934db06f0467377ec138e7415a119f2a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347d19934db06f0467377ec138e7415a119f2a3c", "html_url": "https://github.com/rust-lang/rust/commit/347d19934db06f0467377ec138e7415a119f2a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347d19934db06f0467377ec138e7415a119f2a3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19cbf8da3b59393bdb9c06d8b03e558c7575dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19cbf8da3b59393bdb9c06d8b03e558c7575dbd", "html_url": "https://github.com/rust-lang/rust/commit/d19cbf8da3b59393bdb9c06d8b03e558c7575dbd"}, {"sha": "b662d3c922f1922da55d324aa65dfe268c2bb971", "url": "https://api.github.com/repos/rust-lang/rust/commits/b662d3c922f1922da55d324aa65dfe268c2bb971", "html_url": "https://github.com/rust-lang/rust/commit/b662d3c922f1922da55d324aa65dfe268c2bb971"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "355ec5bf9e541be0084115c65de41bc69722cf34", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=347d19934db06f0467377ec138e7415a119f2a3c", "patch": "@@ -240,7 +240,7 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n                        \"explicit copy requires a copyable argument\");\n         }\n         expr_repeat(element, count_expr, _) => {\n-            let count = ty::eval_repeat_count(cx.tcx, count_expr, e.span);\n+            let count = ty::eval_repeat_count(cx.tcx, count_expr);\n             if count > 1 {\n                 let element_ty = ty::expr_ty(cx.tcx, element);\n                 check_copy(cx, element_ty, element.span,"}, {"sha": "9e9b9da369a91307ea36f9fea2654867242957aa", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=347d19934db06f0467377ec138e7415a119f2a3c", "patch": "@@ -410,8 +410,7 @@ pub fn write_content(bcx: block,\n                     return expr::trans_into(bcx, element, Ignore);\n                 }\n                 SaveIn(lldest) => {\n-                    let count = ty::eval_repeat_count(bcx.tcx(), count_expr,\n-                                                      count_expr.span);\n+                    let count = ty::eval_repeat_count(bcx.tcx(), count_expr);\n                     if count == 0 {\n                         return bcx;\n                     }\n@@ -476,7 +475,7 @@ pub fn elements_required(bcx: block, content_expr: @ast::expr) -> uint {\n         },\n         ast::expr_vec(es, _) => es.len(),\n         ast::expr_repeat(_, count_expr, _) => {\n-            ty::eval_repeat_count(bcx.tcx(), count_expr, content_expr.span)\n+            ty::eval_repeat_count(bcx.tcx(), count_expr)\n         }\n         _ => bcx.tcx().sess.span_bug(content_expr.span,\n                                      ~\"Unexpected evec content\")"}, {"sha": "3c25f2bfc5952c0ae80139009480a0c0932af0d5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=347d19934db06f0467377ec138e7415a119f2a3c", "patch": "@@ -4247,35 +4247,32 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n }\n \n // Returns the repeat count for a repeating vector expression.\n-pub fn eval_repeat_count(tcx: ctxt,\n-                         count_expr: @ast::expr,\n-                         span: span)\n-                      -> uint {\n+pub fn eval_repeat_count(tcx: ctxt, count_expr: @ast::expr) -> uint {\n     match const_eval::eval_const_expr_partial(tcx, count_expr) {\n       Ok(ref const_val) => match *const_val {\n         const_eval::const_int(count) => return count as uint,\n         const_eval::const_uint(count) => return count as uint,\n         const_eval::const_float(count) => {\n-            tcx.sess.span_err(span,\n+            tcx.sess.span_err(count_expr.span,\n                               ~\"expected signed or unsigned integer for \\\n                                 repeat count but found float\");\n             return count as uint;\n         }\n         const_eval::const_str(_) => {\n-            tcx.sess.span_err(span,\n+            tcx.sess.span_err(count_expr.span,\n                               ~\"expected signed or unsigned integer for \\\n                                 repeat count but found string\");\n             return 0;\n         }\n         const_eval::const_bool(_) => {\n-            tcx.sess.span_err(span,\n+            tcx.sess.span_err(count_expr.span,\n                               ~\"expected signed or unsigned integer for \\\n                                 repeat count but found boolean\");\n             return 0;\n         }\n       },\n       Err(*) => {\n-        tcx.sess.span_err(span,\n+        tcx.sess.span_err(count_expr.span,\n                           ~\"expected constant integer for repeat count \\\n                             but found variable\");\n         return 0;"}, {"sha": "570793e1b437a03848ad39ddc2d8668c2419c826", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347d19934db06f0467377ec138e7415a119f2a3c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=347d19934db06f0467377ec138e7415a119f2a3c", "patch": "@@ -2157,7 +2157,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             ty::mk_evec(tcx, ty::mt {ty: t, mutbl: mutability}, tt)\n           }\n           ast::expr_repeat(element, count_expr, mutbl) => {\n-            let count = ty::eval_repeat_count(tcx, count_expr, expr.span);\n+            let count = ty::eval_repeat_count(tcx, count_expr);\n             fcx.write_ty(count_expr.id, ty::mk_uint(tcx));\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, count, vst);\n             let t: ty::t = fcx.infcx().next_ty_var();\n@@ -2484,7 +2484,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_repeat(element, count_expr, mutbl) => {\n-        let count = ty::eval_repeat_count(tcx, count_expr, expr.span);\n+        let count = ty::eval_repeat_count(tcx, count_expr);\n         fcx.write_ty(count_expr.id, ty::mk_uint(tcx));\n         let t: ty::t = fcx.infcx().next_ty_var();\n         bot |= check_expr_has_type(fcx, element, t);"}]}