{"sha": "1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "node_id": "C_kwDOAAsO6NoAKDFkZGI5NDQzMTE2ZGNhMmZjMGNhZWRjNjE2YjliMjk3YTliNGJlYTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-08T19:38:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:05:15Z"}, "message": "Use tables for macros.", "tree": {"sha": "2df68540d85d744e86ab9efdfdee2913866c01bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df68540d85d744e86ab9efdfdee2913866c01bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "html_url": "https://github.com/rust-lang/rust/commit/1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9f5645f3d4e363cad96bdacef8998cb30207d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9f5645f3d4e363cad96bdacef8998cb30207d6", "html_url": "https://github.com/rust-lang/rust/commit/ca9f5645f3d4e363cad96bdacef8998cb30207d6"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "a29e1edc641d0ad74b4628c70417607846df9f3e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "patch": "@@ -4,7 +4,6 @@ use crate::creader::{CStore, CrateMetadataRef};\n use crate::rmeta::*;\n \n use rustc_ast as ast;\n-use rustc_ast::ptr::P;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n@@ -1025,10 +1024,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 let vis = self.get_visibility(child_index);\n                 let span = self.get_span(child_index, sess);\n                 let macro_rules = match kind {\n-                    DefKind::Macro(..) => match self.kind(child_index) {\n-                        EntryKind::MacroDef(_, macro_rules) => macro_rules,\n-                        _ => unreachable!(),\n-                    },\n+                    DefKind::Macro(..) => {\n+                        self.root\n+                            .tables\n+                            .macro_definition\n+                            .get(self, child_index)\n+                            .unwrap()\n+                            .decode((self, sess))\n+                            .macro_rules\n+                    }\n                     _ => false,\n                 };\n \n@@ -1344,8 +1348,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_macro(self, id: DefIndex, sess: &Session) -> ast::MacroDef {\n         match self.kind(id) {\n-            EntryKind::MacroDef(mac_args, macro_rules) => {\n-                ast::MacroDef { body: P(mac_args.decode((self, sess))), macro_rules }\n+            EntryKind::MacroDef => {\n+                self.root.tables.macro_definition.get(self, id).unwrap().decode((self, sess))\n             }\n             _ => bug!(),\n         }"}, {"sha": "fdc25270e9715fbf16e23353946014fd052646a9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "patch": "@@ -1512,7 +1512,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 EntryKind::Fn\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n-                EntryKind::MacroDef(self.lazy(&*macro_def.body), macro_def.macro_rules)\n+                record!(self.tables.macro_definition[def_id] <- macro_def);\n+                EntryKind::MacroDef\n             }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.def_id, m);\n@@ -1819,7 +1820,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                 let def_id = id.to_def_id();\n                 self.tables.opt_def_kind.set(def_id.index, DefKind::Macro(macro_kind));\n-                record!(self.tables.kind[def_id] <- EntryKind::ProcMacro(macro_kind));\n+                self.tables.proc_macro.set(def_id.index, macro_kind);\n+                record!(self.tables.kind[def_id] <- EntryKind::ProcMacro);\n                 self.encode_attrs(id);\n                 record!(self.tables.def_keys[def_id] <- def_key);\n                 record!(self.tables.def_ident_span[def_id] <- span);"}, {"sha": "0367f244c000345b8bd59f399501005187f90e54", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "patch": "@@ -395,6 +395,8 @@ define_tables! {\n     may_have_doc_links: Table<DefIndex, ()>,\n     variant_data: Table<DefIndex, LazyValue<VariantData>>,\n     assoc_container: Table<DefIndex, ty::AssocItemContainer>,\n+    macro_definition: Table<DefIndex, LazyValue<ast::MacroDef>>,\n+    proc_macro: Table<DefIndex, MacroKind>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]\n@@ -418,8 +420,8 @@ enum EntryKind {\n     Fn,\n     ForeignFn,\n     Mod(LazyArray<ModChild>),\n-    MacroDef(LazyValue<ast::MacArgs>, /*macro_rules*/ bool),\n-    ProcMacro(MacroKind),\n+    MacroDef,\n+    ProcMacro,\n     Closure,\n     Generator,\n     Trait,"}, {"sha": "9f88aeec921422151ba55017beac30dbc98ea333", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "patch": "@@ -148,6 +148,14 @@ fixed_size_enum! {\n     }\n }\n \n+fixed_size_enum! {\n+    MacroKind {\n+        ( Attr   )\n+        ( Bang   )\n+        ( Derive )\n+    }\n+}\n+\n // We directly encode `DefPathHash` because a `LazyValue` would incur a 25% cost.\n impl FixedSizeEncoding for Option<DefPathHash> {\n     type ByteArray = [u8; 16];"}, {"sha": "504d02c1608c2842f5774c91beee827072d9bbab", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ddb9443116dca2fc0caedc616b9b297a9b4bea4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "patch": "@@ -64,7 +64,7 @@ trivially_parameterized_over_tcx! {\n     ty::adjustment::CoerceUnsizedInfo,\n     ty::fast_reject::SimplifiedTypeGen<DefId>,\n     rustc_ast::Attribute,\n-    rustc_ast::MacArgs,\n+    rustc_ast::MacroDef,\n     rustc_attr::ConstStability,\n     rustc_attr::DefaultBodyStability,\n     rustc_attr::Deprecation,"}]}