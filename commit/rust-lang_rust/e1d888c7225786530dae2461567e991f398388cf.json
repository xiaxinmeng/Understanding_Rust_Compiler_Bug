{"sha": "e1d888c7225786530dae2461567e991f398388cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDg4OGM3MjI1Nzg2NTMwZGFlMjQ2MTU2N2U5OTFmMzk4Mzg4Y2Y=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-26T22:21:08Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:21:08Z"}, "message": "Remove methods from ast::GenericParam and ast::Generics", "tree": {"sha": "9dfe0820628b915474bcd1bab7bf61a681f22deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dfe0820628b915474bcd1bab7bf61a681f22deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d888c7225786530dae2461567e991f398388cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d888c7225786530dae2461567e991f398388cf", "html_url": "https://github.com/rust-lang/rust/commit/e1d888c7225786530dae2461567e991f398388cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d888c7225786530dae2461567e991f398388cf/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c6ff2469a94e37b9605a43bc861de66830a94d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6ff2469a94e37b9605a43bc861de66830a94d4", "html_url": "https://github.com/rust-lang/rust/commit/2c6ff2469a94e37b9605a43bc861de66830a94d4"}], "stats": {"total": 64, "additions": 17, "deletions": 47}, "files": [{"sha": "67afe58912992f3a8852a1df7aae8ba550294e4a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -324,7 +324,10 @@ impl<'a> LoweringContext<'a> {\n                         let count = generics\n                             .params\n                             .iter()\n-                            .filter(|param| param.is_lifetime_param())\n+                            .filter(|param| match param.kind {\n+                                ast::GenericParamKindAST::Lifetime { .. } => true,\n+                                _ => false,\n+                            })\n                             .count();\n                         self.lctx.type_def_lifetime_params.insert(def_id, count);\n                     }"}, {"sha": "9a1dfbd931a3c0d2652395fcf3dde34bcf7625d5", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -294,7 +294,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n-                    if generics.is_parameterized() {\n+                    if !generics.params.is_empty() {\n                         struct_span_err!(self.session, item.span, E0567,\n                                         \"auto traits cannot have generic parameters\").emit();\n                     }"}, {"sha": "715e4d233dfbdf36b2976f701da61bf54bdcf382", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -342,22 +342,6 @@ pub struct GenericParamAST {\n     pub kind: GenericParamKindAST,\n }\n \n-impl GenericParamAST {\n-    pub fn is_lifetime_param(&self) -> bool {\n-        match self.kind {\n-            GenericParamKindAST::Lifetime { .. } => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_type_param(&self) -> bool {\n-        match self.kind {\n-            GenericParamKindAST::Type { .. } => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n /// Represents lifetime, type and const parameters attached to a declaration of\n /// a function, enum, trait, etc.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -367,29 +351,6 @@ pub struct Generics {\n     pub span: Span,\n }\n \n-impl Generics {\n-    pub fn is_lt_parameterized(&self) -> bool {\n-        self.params.iter().any(|param| param.is_lifetime_param())\n-    }\n-\n-    pub fn is_type_parameterized(&self) -> bool {\n-        self.params.iter().any(|param| param.is_type_param())\n-    }\n-\n-    pub fn is_parameterized(&self) -> bool {\n-        !self.params.is_empty()\n-    }\n-\n-    pub fn span_for_name(&self, name: &str) -> Option<Span> {\n-        for param in &self.params {\n-            if param.ident.name == name {\n-                return Some(param.ident.span);\n-            }\n-        }\n-        None\n-    }\n-}\n-\n impl Default for Generics {\n     /// Creates an instance of `Generics`.\n     fn default() ->  Generics {"}, {"sha": "be4cf197be4eb2c569abe0511cf99e6ee1bdd207", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -1797,7 +1797,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, associated_type_defaults, ti.span,\n                                        \"associated type defaults are unstable\");\n                 }\n-                if ti.generics.is_parameterized() {\n+                if !ti.generics.params.is_empty() {\n                     gate_feature_post!(&self, generic_associated_types, ti.span,\n                                        \"generic associated types are unstable\");\n                 }\n@@ -1824,7 +1824,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::ImplItemKind::Type(_) if ii.generics.is_parameterized() => {\n+            ast::ImplItemKind::Type(_) if !ii.generics.params.is_empty() => {\n                 gate_feature_post!(&self, generic_associated_types, ii.span,\n                                    \"generic associated types are unstable\");\n             }"}, {"sha": "458947299c81653db0960e6c99b59941d28f3686", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -1329,7 +1329,7 @@ impl<'a> State<'a> {\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n \n-                if generics.is_parameterized() {\n+                if !generics.params.is_empty() {\n                     self.print_generic_params(&generics.params)?;\n                     self.s.space()?;\n                 }"}, {"sha": "f896fa351b0af4210fb525113be4dec96388248d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -353,7 +353,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n \n                 match (has_output, has_should_panic_attr) {\n                     (true, true) => No(BadTestSignature::ShouldPanicOnlyWithNoArgs),\n-                    (true, false) => if generics.is_parameterized() {\n+                    (true, false) => if !generics.params.is_empty() {\n                         No(BadTestSignature::WrongTypeSignature)\n                     } else {\n                         Yes"}, {"sha": "5f943a4cd00d583f286390dc52e2f06688832572", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -49,7 +49,10 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                 ItemKind::Struct(_, Generics { ref params, .. }) |\n                 ItemKind::Enum(_, Generics { ref params, .. }) => {\n                     if attr::contains_name(&annitem.attrs, \"rustc_copy_clone_marker\") &&\n-                        !params.iter().any(|param| param.is_type_param())\n+                        !params.iter().any(|param| match param.kind {\n+                            ast::GenericParamKindAST::Type { .. } => true,\n+                            _ => false,\n+                        })\n                     {\n                         bounds = vec![];\n                         is_shallow = true;"}, {"sha": "e461c9640d1a7970fbc3d5715a9893983ed3685c", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d888c7225786530dae2461567e991f398388cf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e1d888c7225786530dae2461567e991f398388cf", "patch": "@@ -422,7 +422,10 @@ impl<'a> TraitDef<'a> {\n                     ast::ItemKind::Struct(_, ref generics) |\n                     ast::ItemKind::Enum(_, ref generics) |\n                     ast::ItemKind::Union(_, ref generics) => {\n-                        !generics.params.iter().any(|p| p.is_type_param())\n+                        !generics.params.iter().any(|param| match param.kind {\n+                            ast::GenericParamKindAST::Type { .. } => true,\n+                            _ => false,\n+                        })\n                     }\n                     _ => {\n                         // Non-ADT derive is an error, but it should have been"}]}