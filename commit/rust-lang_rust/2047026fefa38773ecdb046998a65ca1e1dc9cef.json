{"sha": "2047026fefa38773ecdb046998a65ca1e1dc9cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNDcwMjZmZWZhMzg3NzNlY2RiMDQ2OTk4YTY1Y2ExZTFkYzljZWY=", "commit": {"author": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2013-08-01T21:58:37Z"}, "committer": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2013-08-02T06:41:33Z"}, "message": "Fix calling destructor on uninitialized dynamic library crash.\n\nA test case was also created for this situation to prevent the problem\noccuring again.\n\nA similar problem was also fixed for the symbol method.\n\nThere was some minor code cleanup.", "tree": {"sha": "28368ba95aac0063582e58b6b9e8144284651607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28368ba95aac0063582e58b6b9e8144284651607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2047026fefa38773ecdb046998a65ca1e1dc9cef", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2047026fefa38773ecdb046998a65ca1e1dc9cef", "html_url": "https://github.com/rust-lang/rust/commit/2047026fefa38773ecdb046998a65ca1e1dc9cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2047026fefa38773ecdb046998a65ca1e1dc9cef/comments", "author": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b24559e6aa0914f8a49e0a9dbfb3cf35372515", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b24559e6aa0914f8a49e0a9dbfb3cf35372515", "html_url": "https://github.com/rust-lang/rust/commit/82b24559e6aa0914f8a49e0a9dbfb3cf35372515"}], "stats": {"total": 106, "additions": 70, "deletions": 36}, "files": [{"sha": "8d5654255f14a7264f50a9b3294dec4b49ffcc3c", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 70, "deletions": 36, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2047026fefa38773ecdb046998a65ca1e1dc9cef/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2047026fefa38773ecdb046998a65ca1e1dc9cef/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=2047026fefa38773ecdb046998a65ca1e1dc9cef", "patch": "@@ -31,7 +31,7 @@ impl Drop for DynamicLibrary {\n                 dl::close(self.handle)\n             }\n         } {\n-            Ok(()) => { },\n+            Ok(()) => {},\n             Err(str) => fail!(str)\n         }\n     }\n@@ -41,14 +41,20 @@ impl DynamicLibrary {\n     /// Lazily open a dynamic library. When passed None it gives a\n     /// handle to the calling process\n     pub fn open(filename: Option<&path::Path>) -> Result<DynamicLibrary, ~str> {\n-        do dl::check_for_errors_in {\n-            unsafe {\n-                DynamicLibrary { handle:\n-                    match filename {\n-                        Some(name) => dl::open_external(name),\n-                        None => dl::open_internal()\n-                    }\n+        unsafe {\n+            let maybe_library = do dl::check_for_errors_in {\n+                match filename {\n+                    Some(name) => dl::open_external(name),\n+                    None => dl::open_internal()\n                 }\n+            };\n+\n+            // The dynamic library must not be constructed if there is\n+            // an error opening the library so the destructor does not\n+            // run.\n+            match maybe_library {\n+                Err(err) => Err(err),\n+                Ok(handle) => Ok(DynamicLibrary { handle: handle })\n             }\n         }\n     }\n@@ -58,41 +64,69 @@ impl DynamicLibrary {\n         // This function should have a lifetime constraint of 'self on\n         // T but that feature is still unimplemented\n \n-        do dl::check_for_errors_in {\n-            let symbol_value = do symbol.as_c_str |raw_string| {\n+        let maybe_symbol_value = do dl::check_for_errors_in {\n+            do symbol.as_c_str |raw_string| {\n                 dl::symbol(self.handle, raw_string)\n-            };\n+            }\n+        };\n \n-            cast::transmute(symbol_value)\n+        // The value must not be constructed if there is an error so\n+        // the destructor does not run.\n+        match maybe_symbol_value {\n+            Err(err) => Err(err),\n+            Ok(symbol_value) => Ok(cast::transmute(symbol_value))\n         }\n     }\n }\n \n-#[test]\n-#[ignore(cfg(windows))]\n-priv fn test_loading_cosine () {\n-    // The math library does not need to be loaded since it is already\n-    // statically linked in\n-    let libm = match DynamicLibrary::open(None) {\n-        Err (error) => fail!(\"Could not load self as module: %s\", error),\n-        Ok (libm) => libm\n-    };\n-\n-    // Unfortunately due to issue #6194 it is not possible to call\n-    // this as a C function\n-    let cosine: extern fn(libc::c_double) -> libc::c_double = unsafe {\n-        match libm.symbol(\"cos\") {\n-            Err (error) => fail!(\"Could not load function cos: %s\", error),\n-            Ok (cosine) => cosine\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use option::*;\n+    use result::*;\n+    use path::*;\n+    use libc;\n+\n+    #[test]\n+    fn test_loading_cosine() {\n+        // The math library does not need to be loaded since it is already\n+        // statically linked in\n+        let libm = match DynamicLibrary::open(None) {\n+            Err(error) => fail!(\"Could not load self as module: %s\", error),\n+            Ok(libm) => libm\n+        };\n+\n+        // Unfortunately due to issue #6194 it is not possible to call\n+        // this as a C function\n+        let cosine: extern fn(libc::c_double) -> libc::c_double = unsafe {\n+            match libm.symbol(\"cos\") {\n+                Err(error) => fail!(\"Could not load function cos: %s\", error),\n+                Ok(cosine) => cosine\n+            }\n+        };\n+\n+        let argument = 0.0;\n+        let expected_result = 1.0;\n+        let result = cosine(argument);\n+        if result != expected_result {\n+            fail!(\"cos(%?) != %? but equaled %? instead\", argument,\n+                  expected_result, result)\n+        }\n+    }\n+\n+    #[test]\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn test_errors_do_not_crash() {\n+        // Open /dev/null as a library to get an error, and make sure\n+        // that only causes an error, and not a crash.\n+        let path = GenericPath::from_str(\"/dev/null\");\n+        match DynamicLibrary::open(Some(&path)) {\n+            Err(_) => {}\n+            Ok(_) => fail!(\"Successfully opened the empty library.\")\n         }\n-    };\n-\n-    let argument = 0.0;\n-    let expected_result = 1.0;\n-    let result = cosine(argument);\n-    if result != expected_result {\n-        fail!(\"cos(%?) != %? but equaled %? instead\", argument,\n-              expected_result, result)\n     }\n }\n "}]}