{"sha": "170ccd615f976fc9e90a8f14ce6c373bfdf01533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MGNjZDYxNWY5NzZmYzllOTBhOGYxNGNlNmMzNzNiZmRmMDE1MzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-15T05:47:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-15T22:03:54Z"}, "message": "Error if `pub use` references a private item.\n\n[breaking-change]\n\nCloses #23266", "tree": {"sha": "5a52a42204b6cc769bd2761b438f1e9a55060b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a52a42204b6cc769bd2761b438f1e9a55060b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170ccd615f976fc9e90a8f14ce6c373bfdf01533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170ccd615f976fc9e90a8f14ce6c373bfdf01533", "html_url": "https://github.com/rust-lang/rust/commit/170ccd615f976fc9e90a8f14ce6c373bfdf01533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170ccd615f976fc9e90a8f14ce6c373bfdf01533/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73afbef3aaf42288a766186628207d46fbde1ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/73afbef3aaf42288a766186628207d46fbde1ee0", "html_url": "https://github.com/rust-lang/rust/commit/73afbef3aaf42288a766186628207d46fbde1ee0"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "c586faae6e886dd32f5c398085c401904fe3fa41", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/170ccd615f976fc9e90a8f14ce6c373bfdf01533/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170ccd615f976fc9e90a8f14ce6c373bfdf01533/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=170ccd615f976fc9e90a8f14ce6c373bfdf01533", "patch": "@@ -24,7 +24,9 @@ register_diagnostics! {\n     E0258, // import conflicts with existing submodule\n     E0259, // an extern crate has already been imported into this module\n     E0260, // name conflicts with an external crate that has been imported into this module\n-    E0317 // user-defined types or type parameters cannot shadow the primitive types\n+    E0317, // user-defined types or type parameters cannot shadow the primitive types\n+    E0364, // item is private\n+    E0365  // item is private\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "cf974024e8b554248786aaf1a07831329dac2b6b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/170ccd615f976fc9e90a8f14ce6c373bfdf01533/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170ccd615f976fc9e90a8f14ce6c373bfdf01533/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=170ccd615f976fc9e90a8f14ce6c373bfdf01533", "patch": "@@ -857,6 +857,19 @@ impl NameBindings {\n             None\n         }\n     }\n+\n+    fn is_public(&self, namespace: Namespace) -> bool {\n+        match namespace {\n+            TypeNS  => {\n+                let type_def = self.type_def.borrow();\n+                type_def.as_ref().unwrap().modifiers.contains(PUBLIC)\n+            }\n+            ValueNS => {\n+                let value_def = self.value_def.borrow();\n+                value_def.as_ref().unwrap().modifiers.contains(PUBLIC)\n+            }\n+        }\n+    }\n }\n \n /// Interns the names of the primitive types.\n@@ -1334,22 +1347,33 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut type_result = UnknownResult;\n \n         // Search for direct children of the containing module.\n-        build_reduced_graph::populate_module_if_necessary(self, &containing_module);\n+        build_reduced_graph::populate_module_if_necessary(self, &target_module);\n \n-        match containing_module.children.borrow().get(&source) {\n+        match target_module.children.borrow().get(&source) {\n             None => {\n                 // Continue.\n             }\n             Some(ref child_name_bindings) => {\n+                // pub_err makes sure we don't give the same error twice.\n+                let mut pub_err = false;\n                 if child_name_bindings.defined_in_namespace(ValueNS) {\n                     debug!(\"(resolving single import) found value binding\");\n-                    value_result = BoundResult(containing_module.clone(),\n+                    value_result = BoundResult(target_module.clone(),\n                                                (*child_name_bindings).clone());\n+                    if directive.is_public && !child_name_bindings.is_public(ValueNS) {\n+                        let msg = format!(\"`{}` is private\", token::get_name(source));\n+                        span_err!(self.session, directive.span, E0364, \"{}\", &msg);\n+                        pub_err = true;\n+                    }\n                 }\n                 if child_name_bindings.defined_in_namespace(TypeNS) {\n                     debug!(\"(resolving single import) found type binding\");\n-                    type_result = BoundResult(containing_module.clone(),\n+                    type_result = BoundResult(target_module.clone(),\n                                               (*child_name_bindings).clone());\n+                    if !pub_err && directive.is_public && !child_name_bindings.is_public(TypeNS) {\n+                        let msg = format!(\"`{}` is private\", token::get_name(source));\n+                        span_err!(self.session, directive.span, E0365, \"{}\", &msg);\n+                    }\n                 }\n             }\n         }"}]}