{"sha": "4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODFjNGVmNmZmMzg4ZGQ2MjRiZGNlYjQ4NGZiMDNjMzNkN2JhZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-11T08:46:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-11T08:46:43Z"}, "message": "Auto merge of #87042 - petrochenkov:cleanquotspan, r=Aaron1011\n\nCleanup span quoting\n\nI finally got to reviewing https://github.com/rust-lang/rust/pull/84278.\nSee the individual commit messages.\nr? `@Aaron1011`", "tree": {"sha": "734a1f1bf766994dac153ee2c5c0ed2ddba6c16e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734a1f1bf766994dac153ee2c5c0ed2ddba6c16e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "html_url": "https://github.com/rust-lang/rust/commit/4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d76b7374589c45e3e9290309781a1ed9a461951", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d76b7374589c45e3e9290309781a1ed9a461951", "html_url": "https://github.com/rust-lang/rust/commit/0d76b7374589c45e3e9290309781a1ed9a461951"}, {"sha": "4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "html_url": "https://github.com/rust-lang/rust/commit/4ba91a063d2c22587bca2c89740214ac7f4ab8d9"}], "stats": {"total": 292, "additions": 89, "deletions": 203}, "files": [{"sha": "ba27f1033092807402f6a470e21efd051563cf32", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -19,7 +19,6 @@ use crate::deriving::*;\n \n use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n \n mod asm;\n@@ -113,8 +112,5 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     }\n \n     let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n-    register(\n-        sym::quote,\n-        SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client, krate: LOCAL_CRATE })),\n-    );\n+    register(sym::quote, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })));\n }"}, {"sha": "fd024a8ecfa4a8ee09cbc85e3a14021df86045f5", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -309,9 +309,7 @@ pub trait Emitter {\n                     // are some which do actually involve macros.\n                     ExpnKind::Inlined | ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n \n-                    ExpnKind::Macro { kind: macro_kind, name, proc_macro: _ } => {\n-                        Some((macro_kind, name))\n-                    }\n+                    ExpnKind::Macro(macro_kind, name) => Some((macro_kind, name)),\n                 }\n             });\n \n@@ -372,19 +370,10 @@ pub trait Emitter {\n                     new_labels\n                         .push((trace.call_site, \"in the inlined copy of this code\".to_string()));\n                 } else if always_backtrace {\n-                    let proc_macro = if let ExpnKind::Macro { kind: _, name: _, proc_macro: true } =\n-                        trace.kind\n-                    {\n-                        \"procedural macro \"\n-                    } else {\n-                        \"\"\n-                    };\n-\n                     new_labels.push((\n                         trace.def_site,\n                         format!(\n-                            \"in this expansion of {}`{}`{}\",\n-                            proc_macro,\n+                            \"in this expansion of `{}`{}\",\n                             trace.kind.descr(),\n                             if macro_backtrace.len() > 1 {\n                                 // if macro_backtrace.len() == 1 it'll be\n@@ -410,11 +399,7 @@ pub trait Emitter {\n                 // and it needs an \"in this macro invocation\" label to match that.\n                 let redundant_span = trace.call_site.contains(sp);\n \n-                if !redundant_span\n-                    && matches!(\n-                        trace.kind,\n-                        ExpnKind::Macro { kind: MacroKind::Bang, name: _, proc_macro: _ }\n-                    )\n+                if !redundant_span && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push(("}, {"sha": "b3e52502b0739245b962c190a53de2db75ddc199", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -811,16 +811,8 @@ impl SyntaxExtension {\n         macro_def_id: Option<DefId>,\n         parent_module: Option<DefId>,\n     ) -> ExpnData {\n-        use SyntaxExtensionKind::*;\n-        let proc_macro = match self.kind {\n-            // User-defined proc macro\n-            Bang(..) | Attr(..) | Derive(..) => true,\n-            // Consider everthing else to be not a proc\n-            // macro for diagnostic purposes\n-            LegacyBang(..) | LegacyAttr(..) | NonMacroAttr { .. } | LegacyDerive(..) => false,\n-        };\n         ExpnData::new(\n-            ExpnKind::Macro { kind: self.macro_kind(), name: descr, proc_macro },\n+            ExpnKind::Macro(self.macro_kind(), descr),\n             parent,\n             call_site,\n             self.span,"}, {"sha": "3f84979ac05e762bbc26b4bd404c52b2352356a2", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -9,14 +9,12 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_parse::nt_to_tokenstream;\n use rustc_parse::parser::ForceCollect;\n-use rustc_span::def_id::CrateNum;\n use rustc_span::{Span, DUMMY_SP};\n \n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n \n pub struct BangProcMacro {\n     pub client: pm::bridge::client::Client<fn(pm::TokenStream) -> pm::TokenStream>,\n-    pub krate: CrateNum,\n }\n \n impl base::ProcMacro for BangProcMacro {\n@@ -26,7 +24,7 @@ impl base::ProcMacro for BangProcMacro {\n         span: Span,\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorReported> {\n-        let server = proc_macro_server::Rustc::new(ecx, self.krate);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, ecx.ecfg.proc_macro_backtrace).map_err(|e| {\n             let mut err = ecx.struct_span_err(span, \"proc macro panicked\");\n             if let Some(s) = e.as_str() {\n@@ -40,7 +38,6 @@ impl base::ProcMacro for BangProcMacro {\n \n pub struct AttrProcMacro {\n     pub client: pm::bridge::client::Client<fn(pm::TokenStream, pm::TokenStream) -> pm::TokenStream>,\n-    pub krate: CrateNum,\n }\n \n impl base::AttrProcMacro for AttrProcMacro {\n@@ -51,7 +48,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotation: TokenStream,\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorReported> {\n-        let server = proc_macro_server::Rustc::new(ecx, self.krate);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n             .run(&EXEC_STRATEGY, server, annotation, annotated, ecx.ecfg.proc_macro_backtrace)\n             .map_err(|e| {\n@@ -67,7 +64,6 @@ impl base::AttrProcMacro for AttrProcMacro {\n \n pub struct ProcMacroDerive {\n     pub client: pm::bridge::client::Client<fn(pm::TokenStream) -> pm::TokenStream>,\n-    pub krate: CrateNum,\n }\n \n impl MultiItemModifier for ProcMacroDerive {\n@@ -101,7 +97,7 @@ impl MultiItemModifier for ProcMacroDerive {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::No)\n         };\n \n-        let server = proc_macro_server::Rustc::new(ecx, self.krate);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         let stream =\n             match self.client.run(&EXEC_STRATEGY, server, input, ecx.ecfg.proc_macro_backtrace) {\n                 Ok(stream) => stream,"}, {"sha": "ff135f60a822a70ab52cf5f924650793e922fc4f", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -14,7 +14,6 @@ use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n use rustc_span::def_id::CrateNum;\n-use rustc_span::hygiene::ExpnId;\n use rustc_span::hygiene::ExpnKind;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, MultiSpan, Pos, RealFileName, SourceFile, Span};\n@@ -363,26 +362,20 @@ pub(crate) struct Rustc<'a> {\n     mixed_site: Span,\n     span_debug: bool,\n     krate: CrateNum,\n-    expn_id: ExpnId,\n     rebased_spans: FxHashMap<usize, Span>,\n }\n \n impl<'a> Rustc<'a> {\n-    pub fn new(cx: &'a ExtCtxt<'_>, krate: CrateNum) -> Self {\n+    pub fn new(cx: &'a ExtCtxt<'_>) -> Self {\n         let expn_data = cx.current_expansion.id.expn_data();\n-        let def_site = cx.with_def_site_ctxt(expn_data.def_site);\n-        let call_site = cx.with_call_site_ctxt(expn_data.call_site);\n-        let mixed_site = cx.with_mixed_site_ctxt(expn_data.call_site);\n-        let sess = cx.parse_sess();\n         Rustc {\n             resolver: cx.resolver,\n-            sess,\n-            def_site,\n-            call_site,\n-            mixed_site,\n+            sess: cx.parse_sess(),\n+            def_site: cx.with_def_site_ctxt(expn_data.def_site),\n+            call_site: cx.with_call_site_ctxt(expn_data.call_site),\n+            mixed_site: cx.with_mixed_site_ctxt(expn_data.call_site),\n             span_debug: cx.ecfg.span_debug,\n-            krate,\n-            expn_id: cx.current_expansion.id,\n+            krate: expn_data.macro_def_id.unwrap().krate,\n             rebased_spans: FxHashMap::default(),\n         }\n     }\n@@ -782,25 +775,15 @@ impl server::Span for Rustc<'_> {\n     /// span from the metadata of `my_proc_macro` (which we have access to,\n     /// since we've loaded `my_proc_macro` from disk in order to execute it).\n     /// In this way, we have obtained a span pointing into `my_proc_macro`\n-    fn save_span(&mut self, mut span: Self::Span) -> usize {\n-        // Throw away the `SyntaxContext`, since we currently\n-        // skip serializing `SyntaxContext`s for proc-macro crates\n-        span = span.with_ctxt(rustc_span::SyntaxContext::root());\n+    fn save_span(&mut self, span: Self::Span) -> usize {\n         self.sess.save_proc_macro_span(span)\n     }\n     fn recover_proc_macro_span(&mut self, id: usize) -> Self::Span {\n-        let resolver = self.resolver;\n-        let krate = self.krate;\n-        let expn_id = self.expn_id;\n+        let (resolver, krate, def_site) = (self.resolver, self.krate, self.def_site);\n         *self.rebased_spans.entry(id).or_insert_with(|| {\n-            let raw_span = resolver.get_proc_macro_quoted_span(krate, id);\n-            // Ignore the deserialized `SyntaxContext` entirely.\n-            // FIXME: Preserve the macro backtrace from the serialized span\n-            // For example, if a proc-macro crate has code like\n-            // `macro_one!() -> macro_two!() -> quote!()`, we might\n-            // want to 'concatenate' this backtrace with the backtrace from\n-            // our current call site.\n-            raw_span.with_def_site_ctxt(expn_id)\n+            // FIXME: `SyntaxContext` for spans from proc macro crates is lost during encoding,\n+            // replace it with a def-site context until we are encoding it properly.\n+            resolver.get_proc_macro_quoted_span(krate, id).with_ctxt(def_site.ctxt())\n         })\n     }\n }\n@@ -812,7 +795,7 @@ fn ident_name_compatibility_hack(\n     rustc: &mut Rustc<'_>,\n ) -> Option<(rustc_span::symbol::Ident, bool)> {\n     if let NtIdent(ident, is_raw) = nt {\n-        if let ExpnKind::Macro { name: macro_name, .. } = orig_span.ctxt().outer_expn_data().kind {\n+        if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n             let source_map = rustc.sess.source_map();\n             let filename = source_map.span_to_filename(orig_span);\n             if let FileName::Real(RealFileName::LocalPath(path)) = filename {"}, {"sha": "9b1a339572ec3cfe5b9fde1709d72415c3aba51a", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -248,21 +248,10 @@ impl EarlyLintPass for LintPassImpl {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();\n                     let call_site = expn_data.call_site;\n-                    if !matches!(\n-                        expn_data.kind,\n-                        ExpnKind::Macro {\n-                            kind: MacroKind::Bang,\n-                            name: sym::impl_lint_pass,\n-                            proc_macro: _\n-                        }\n-                    ) && !matches!(\n-                        call_site.ctxt().outer_expn_data().kind,\n-                        ExpnKind::Macro {\n-                            kind: MacroKind::Bang,\n-                            name: sym::declare_lint_pass,\n-                            proc_macro: _\n-                        }\n-                    ) {\n+                    if expn_data.kind != ExpnKind::Macro(MacroKind::Bang, sym::impl_lint_pass)\n+                        && call_site.ctxt().outer_expn_data().kind\n+                            != ExpnKind::Macro(MacroKind::Bang, sym::declare_lint_pass)\n+                    {\n                         cx.struct_span_lint(\n                             LINT_PASS_IMPL_WITHOUT_MACRO,\n                             lint_pass.path.span,"}, {"sha": "a32caf1bc433df1cbf94ffa4f3d7322f2ff43ed5", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -256,10 +256,6 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n     }\n \n     let macro_symbol =\n-        if let hygiene::ExpnKind::Macro { kind: _, name: symbol, proc_macro: _ } = expn.kind {\n-            symbol\n-        } else {\n-            Symbol::intern(\"panic\")\n-        };\n+        if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind { symbol } else { sym::panic };\n     (expn.call_site, panic_macro, macro_symbol.as_str())\n }"}, {"sha": "6ecd4a512e9b40e5b66b56d6409688d36decb029", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -725,37 +725,30 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, sess))\n     }\n \n-    fn load_proc_macro(&self, def_id: DefId, sess: &Session) -> SyntaxExtension {\n-        let (name, kind, helper_attrs) = match *self.raw_proc_macro(def_id.index) {\n+    fn load_proc_macro(&self, id: DefIndex, sess: &Session) -> SyntaxExtension {\n+        let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {\n             ProcMacro::CustomDerive { trait_name, attributes, client } => {\n                 let helper_attrs =\n                     attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n                 (\n                     trait_name,\n-                    SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive {\n-                        client,\n-                        krate: def_id.krate,\n-                    })),\n+                    SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),\n                     helper_attrs,\n                 )\n             }\n-            ProcMacro::Attr { name, client } => (\n-                name,\n-                SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client, krate: def_id.krate })),\n-                Vec::new(),\n-            ),\n-            ProcMacro::Bang { name, client } => (\n-                name,\n-                SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client, krate: def_id.krate })),\n-                Vec::new(),\n-            ),\n+            ProcMacro::Attr { name, client } => {\n+                (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())\n+            }\n+            ProcMacro::Bang { name, client } => {\n+                (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())\n+            }\n         };\n \n-        let attrs: Vec<_> = self.get_item_attrs(def_id.index, sess).collect();\n+        let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();\n         SyntaxExtension::new(\n             sess,\n             kind,\n-            self.get_span(def_id.index, sess),\n+            self.get_span(id, sess),\n             helper_attrs,\n             self.root.edition,\n             Symbol::intern(name),"}, {"sha": "473ae4eb386413725b0dce32629128a4b5d3c89d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -411,7 +411,7 @@ impl CStore {\n \n         let data = self.get_crate_data(id.krate);\n         if data.root.is_proc_macro_crate() {\n-            return LoadedMacro::ProcMacro(data.load_proc_macro(id, sess));\n+            return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n         }\n \n         let span = data.get_span(id.index, sess);"}, {"sha": "63872ca9017668c0015993b0347d816bce958b6d", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -387,7 +387,7 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n             false\n         }\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n-        ExpnKind::Macro { kind: MacroKind::Bang, name: _, proc_macro: _ } => {\n+        ExpnKind::Macro(MacroKind::Bang, _) => {\n             // Dummy span for the `def_site` means it's an external macro.\n             expn_data.def_site.is_dummy() || sess.source_map().is_imported(expn_data.def_site)\n         }"}, {"sha": "08cc87ccc349d5c51068e5203bb3b0c710c64675", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -184,11 +184,8 @@ impl CoverageSpan {\n         self.current_macro_or_none\n             .borrow_mut()\n             .get_or_insert_with(|| {\n-                if let ExpnKind::Macro {\n-                    kind: MacroKind::Bang,\n-                    name: current_macro,\n-                    proc_macro: _,\n-                } = self.expn_span.ctxt().outer_expn_data().kind\n+                if let ExpnKind::Macro(MacroKind::Bang, current_macro) =\n+                    self.expn_span.ctxt().outer_expn_data().kind\n                 {\n                     return Some(current_macro);\n                 }"}, {"sha": "bcdae1cb43dbdfd8804643b4803e5f514561f48c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -1775,11 +1775,9 @@ impl<'a> Resolver<'a> {\n                     let expn_data = expn_id.expn_data();\n                     match expn_data.kind {\n                         ExpnKind::Root\n-                        | ExpnKind::Macro {\n-                            kind: MacroKind::Bang | MacroKind::Derive,\n-                            name: _,\n-                            proc_macro: _,\n-                        } => Scope::DeriveHelpersCompat,\n+                        | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n+                            Scope::DeriveHelpersCompat\n+                        }\n                         _ => Scope::DeriveHelpers(expn_data.parent),\n                     }\n                 }"}, {"sha": "e024ade7b3c844a383df7e957ebf3b7efb115a52", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -319,11 +319,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                         let expn_data = expn_id.expn_data();\n                         match expn_data.kind {\n                             ExpnKind::Root\n-                            | ExpnKind::Macro {\n-                                name: _,\n-                                kind: MacroKind::Bang | MacroKind::Derive,\n-                                proc_macro: _,\n-                            } => {\n+                            | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n                                 break;\n                             }\n                             _ => expn_id = expn_data.parent,"}, {"sha": "0a8a88132e33de65849e710a2d069da135a1c5d6", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -788,7 +788,7 @@ impl<'tcx> SaveContext<'tcx> {\n         let callee = span.source_callee()?;\n \n         let mac_name = match callee.kind {\n-            ExpnKind::Macro { kind, name, proc_macro: _ } => match kind {\n+            ExpnKind::Macro(kind, name) => match kind {\n                 MacroKind::Bang => name,\n \n                 // Ignore attribute macros, their spans are usually mangled"}, {"sha": "78b181aa3300a55887aa9c0137baf582710d0137", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -144,10 +144,7 @@ impl ExpnId {\n             let expn_data = self.expn_data();\n             // Stop going up the backtrace once include! is encountered\n             if expn_data.is_root()\n-                || matches!(\n-                    expn_data.kind,\n-                    ExpnKind::Macro { kind: MacroKind::Bang, name: sym::include, proc_macro: _ }\n-                )\n+                || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)\n             {\n                 break;\n             }\n@@ -712,31 +709,6 @@ pub struct ExpnData {\n     /// call_site span would have its own ExpnData, with the call_site\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n-\n-    // --- The part specific to the macro/desugaring definition.\n-    // --- It may be reasonable to share this part between expansions with the same definition,\n-    // --- but such sharing is known to bring some minor inconveniences without also bringing\n-    // --- noticeable perf improvements (PR #62898).\n-    /// The span of the macro definition (possibly dummy).\n-    /// This span serves only informational purpose and is not used for resolution.\n-    pub def_site: Span,\n-    /// List of `#[unstable]`/feature-gated features that the macro is allowed to use\n-    /// internally without forcing the whole crate to opt-in\n-    /// to them.\n-    pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    /// Whether the macro is allowed to use `unsafe` internally\n-    /// even if the user crate has `#![forbid(unsafe_code)]`.\n-    pub allow_internal_unsafe: bool,\n-    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n-    /// for a given macro.\n-    pub local_inner_macros: bool,\n-    /// Edition of the crate in which the macro is defined.\n-    pub edition: Edition,\n-    /// The `DefId` of the macro being invoked,\n-    /// if this `ExpnData` corresponds to a macro invocation\n-    pub macro_def_id: Option<DefId>,\n-    /// The normal module (`mod`) in which the expanded macro was defined.\n-    pub parent_module: Option<DefId>,\n     /// The crate that originally created this `ExpnData`. During\n     /// metadata serialization, we only encode `ExpnData`s that were\n     /// created locally - when our serialized metadata is decoded,\n@@ -751,7 +723,6 @@ pub struct ExpnData {\n     // be considered equivalent.\n     #[stable_hasher(ignore)]\n     orig_id: Option<u32>,\n-\n     /// Used to force two `ExpnData`s to have different `Fingerprint`s.\n     /// Due to macro expansion, it's possible to end up with two `ExpnId`s\n     /// that have identical `ExpnData`s. This violates the contract of `HashStable`\n@@ -763,6 +734,31 @@ pub struct ExpnData {\n     /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes\n     /// a `krate` field, this value only needs to be unique within a single crate.\n     disambiguator: u32,\n+\n+    // --- The part specific to the macro/desugaring definition.\n+    // --- It may be reasonable to share this part between expansions with the same definition,\n+    // --- but such sharing is known to bring some minor inconveniences without also bringing\n+    // --- noticeable perf improvements (PR #62898).\n+    /// The span of the macro definition (possibly dummy).\n+    /// This span serves only informational purpose and is not used for resolution.\n+    pub def_site: Span,\n+    /// List of `#[unstable]`/feature-gated features that the macro is allowed to use\n+    /// internally without forcing the whole crate to opt-in\n+    /// to them.\n+    pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n+    /// Whether the macro is allowed to use `unsafe` internally\n+    /// even if the user crate has `#![forbid(unsafe_code)]`.\n+    pub allow_internal_unsafe: bool,\n+    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n+    /// for a given macro.\n+    pub local_inner_macros: bool,\n+    /// Edition of the crate in which the macro is defined.\n+    pub edition: Edition,\n+    /// The `DefId` of the macro being invoked,\n+    /// if this `ExpnData` corresponds to a macro invocation\n+    pub macro_def_id: Option<DefId>,\n+    /// The normal module (`mod`) in which the expanded macro was defined.\n+    pub parent_module: Option<DefId>,\n }\n \n // These would require special handling of `orig_id`.\n@@ -850,13 +846,7 @@ pub enum ExpnKind {\n     /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.\n     Root,\n     /// Expansion produced by a macro.\n-    Macro {\n-        kind: MacroKind,\n-        name: Symbol,\n-        /// If `true`, this macro is a procedural macro. This\n-        /// flag is only used for diagnostic purposes\n-        proc_macro: bool,\n-    },\n+    Macro(MacroKind, Symbol),\n     /// Transform done by the compiler on the AST.\n     AstPass(AstPass),\n     /// Desugaring done by the compiler during HIR lowering.\n@@ -869,7 +859,7 @@ impl ExpnKind {\n     pub fn descr(&self) -> String {\n         match *self {\n             ExpnKind::Root => kw::PathRoot.to_string(),\n-            ExpnKind::Macro { kind, name, proc_macro: _ } => match kind {\n+            ExpnKind::Macro(macro_kind, name) => match macro_kind {\n                 MacroKind::Bang => format!(\"{}!\", name),\n                 MacroKind::Attr => format!(\"#[{}]\", name),\n                 MacroKind::Derive => format!(\"#[derive({})]\", name),"}, {"sha": "84bef4b113c1532f4f435178be523e2c5d633fab", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -520,10 +520,7 @@ impl Span {\n \n     /// Returns `true` if `span` originates in a derive-macro's expansion.\n     pub fn in_derive_expansion(self) -> bool {\n-        matches!(\n-            self.ctxt().outer_expn_data().kind,\n-            ExpnKind::Macro { kind: MacroKind::Derive, name: _, proc_macro: _ }\n-        )\n+        matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))\n     }\n \n     #[inline]"}, {"sha": "84ca046212dc556395a75a1070cc2143b192836f", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -20,7 +20,7 @@ fn y /* 0#0 */() { }\n /*\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"foo\", proc_macro: false }\n+1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "dc63d014451db8b1f5705b297de01fbc938ca36a", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -45,10 +45,10 @@ fn main /* 0#0 */() { ; }\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n 1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"produce_it\", proc_macro: false }\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n 3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"meta_macro::print_def_site\", proc_macro: true }\n-5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"$crate::dummy\", proc_macro: true }\n+4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n+5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "75e6a49b314dfe56f65ef616aaef13c6b4acb604", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -69,10 +69,10 @@ fn main /* 0#0 */() { }\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n 1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"outer\", proc_macro: false }\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n 3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro { kind: Bang, name: \"inner\", proc_macro: false }\n-5: parent: ExpnId(4), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"print_bang\", proc_macro: true }\n+4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n+5: parent: ExpnId(4), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "9152ee60a7ed46a51d127250f69a7e9f9ad1442f", "filename": "src/test/ui/proc-macro/span-from-proc-macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -2,7 +2,7 @@ error[E0412]: cannot find type `MissingType` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:37:20\n    |\n LL | pub fn error_from_attribute(_args: TokenStream, _input: TokenStream) -> TokenStream {\n-   | ----------------------------------------------------------------------------------- in this expansion of procedural macro `#[error_from_attribute]`\n+   | ----------------------------------------------------------------------------------- in this expansion of `#[error_from_attribute]`\n ...\n LL |             field: MissingType\n    |                    ^^^^^^^^^^^ not found in this scope\n@@ -16,7 +16,7 @@ error[E0412]: cannot find type `OtherMissingType` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:46:21\n    |\n LL | pub fn error_from_derive(_input: TokenStream) -> TokenStream {\n-   | ------------------------------------------------------------ in this expansion of procedural macro `#[derive(ErrorFromDerive)]`\n+   | ------------------------------------------------------------ in this expansion of `#[derive(ErrorFromDerive)]`\n ...\n LL |             Variant(OtherMissingType)\n    |                     ^^^^^^^^^^^^^^^^ not found in this scope\n@@ -30,7 +30,7 @@ error[E0425]: cannot find value `my_ident` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:29:9\n    |\n LL | pub fn other_error_from_bang(_input: TokenStream) -> TokenStream {\n-   | ---------------------------------------------------------------- in this expansion of procedural macro `other_error_from_bang!`\n+   | ---------------------------------------------------------------- in this expansion of `other_error_from_bang!`\n LL |     custom_quote::custom_quote! {\n LL |         my_ident\n    |         ^^^^^^^^ not found in this scope\n@@ -49,7 +49,7 @@ LL |             let bang_error: bool = 25;\n    |                             expected due to this\n ...\n LL | pub fn error_from_bang(_input: TokenStream) -> TokenStream {\n-   | ---------------------------------------------------------- in this expansion of procedural macro `error_from_bang!`\n+   | ---------------------------------------------------------- in this expansion of `error_from_bang!`\n    | \n   ::: $DIR/span-from-proc-macro.rs:15:5\n    |"}, {"sha": "7cfce2e61cca59e153cf08caf4c40fb08880cd99", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -662,14 +662,7 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-        matches!(\n-            data.kind,\n-            ExpnKind::Macro {\n-                kind: MacroKind::Attr,\n-                name: _,\n-                proc_macro: _\n-            }\n-        )\n+        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr, _))\n     } else {\n         false\n     }"}, {"sha": "85257f3113cb774adc43f326707c0182b1eac616", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -8,12 +8,7 @@ use super::UNIT_CMP;\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if expr.span.from_expansion() {\n         if let Some(callee) = expr.span.source_callee() {\n-            if let ExpnKind::Macro {\n-                kind: MacroKind::Bang,\n-                name: symbol,\n-                proc_macro: _,\n-            } = callee.kind\n-            {\n+            if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {"}, {"sha": "2f10472180f5e4f56b00177a927df3aab30dec31", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581c4ef6ff388dd624bdceb484fb03c33d7bae4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=4581c4ef6ff388dd624bdceb484fb03c33d7bae4", "patch": "@@ -953,12 +953,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n             let data = span.ctxt().outer_expn_data();\n             let new_span = data.call_site;\n \n-            if let ExpnKind::Macro {\n-                kind: MacroKind::Bang,\n-                name: mac_name,\n-                proc_macro: _,\n-            } = data.kind\n-            {\n+            if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n                 if mac_name.as_str() == name {\n                     return Some(new_span);\n                 }\n@@ -986,12 +981,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n         let data = span.ctxt().outer_expn_data();\n         let new_span = data.call_site;\n \n-        if let ExpnKind::Macro {\n-            kind: MacroKind::Bang,\n-            name: mac_name,\n-            proc_macro: _,\n-        } = data.kind\n-        {\n+        if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n             if mac_name.as_str() == name {\n                 return Some(new_span);\n             }"}]}