{"sha": "1f6583fe06ecb307004a6a7744c43a26bac85e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNjU4M2ZlMDZlY2IzMDcwMDRhNmE3NzQ0YzQzYTI2YmFjODVlOGM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-07T09:02:02Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-07T09:02:02Z"}, "message": "Implement drop/deallocation for Box.", "tree": {"sha": "25451732a4910cc6c9c382b8a6e49274742871be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25451732a4910cc6c9c382b8a6e49274742871be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f6583fe06ecb307004a6a7744c43a26bac85e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f6583fe06ecb307004a6a7744c43a26bac85e8c", "html_url": "https://github.com/rust-lang/rust/commit/1f6583fe06ecb307004a6a7744c43a26bac85e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f6583fe06ecb307004a6a7744c43a26bac85e8c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef57b291b55e81a1dc14c0e3926e254ad6876eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef57b291b55e81a1dc14c0e3926e254ad6876eb", "html_url": "https://github.com/rust-lang/rust/commit/bef57b291b55e81a1dc14c0e3926e254ad6876eb"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "324a2008e38108049c271e4b1691185e258fdb69", "filename": "src/interpreter.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f6583fe06ecb307004a6a7744c43a26bac85e8c/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6583fe06ecb307004a6a7744c43a26bac85e8c/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=1f6583fe06ecb307004a6a7744c43a26bac85e8c", "patch": "@@ -360,8 +360,10 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 }\n             }\n \n-            Drop { target, .. } => {\n-                // TODO: Handle destructors and dynamic drop.\n+            Drop { ref value, target, .. } => {\n+                let ptr = try!(self.eval_lvalue(value)).to_ptr();\n+                let ty = self.lvalue_ty(value);\n+                try!(self.drop(ptr, ty));\n                 TerminatorTarget::Block(target)\n             }\n \n@@ -371,6 +373,28 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(target)\n     }\n \n+    fn drop(&mut self, ptr: Pointer, ty: ty::Ty<'tcx>) -> EvalResult<()> {\n+        if !self.type_needs_drop(ty) {\n+            self.log(1, || print!(\"no need to drop {:?}\", ty));\n+            return Ok(());\n+        }\n+        self.log(1, || print!(\"need to drop {:?}\", ty));\n+\n+        match ty.sty {\n+            ty::TyBox(contents_ty) => {\n+                let contents_ptr = try!(self.memory.read_ptr(ptr));\n+                try!(self.drop(contents_ptr, contents_ty));\n+                self.log(1, || print!(\"deallocating box\"));\n+                try!(self.memory.deallocate(contents_ptr));\n+            }\n+\n+            // TODO(tsion): Implement drop for other relevant types (e.g. aggregates).\n+            _ => {}\n+        }\n+\n+        Ok(())\n+    }\n+\n     fn call_intrinsic(\n         &mut self,\n         name: &str,\n@@ -847,6 +871,10 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         infer::normalize_associated_type(self.tcx, &substituted)\n     }\n \n+    fn type_needs_drop(&self, ty: ty::Ty<'tcx>) -> bool {\n+        self.tcx.type_needs_drop_given_env(ty, &self.tcx.empty_parameter_environment())\n+    }\n+\n     fn type_is_sized(&self, ty: ty::Ty<'tcx>) -> bool {\n         ty.is_sized(&self.tcx.empty_parameter_environment(), DUMMY_SP)\n     }"}, {"sha": "661f45672648b5554aa01736af72fe0f23b08377", "filename": "src/memory.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f6583fe06ecb307004a6a7744c43a26bac85e8c/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6583fe06ecb307004a6a7744c43a26bac85e8c/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=1f6583fe06ecb307004a6a7744c43a26bac85e8c", "patch": "@@ -140,6 +140,22 @@ impl Memory {\n         Ok(())\n     }\n \n+    // TODO(tsion): See comment on `reallocate`.\n+    pub fn deallocate(&mut self, ptr: Pointer) -> EvalResult<()> {\n+        if ptr.offset != 0 {\n+            // TODO(tsion): Report error about non-__rust_allocate'd pointer.\n+            panic!()\n+        }\n+\n+        if self.alloc_map.remove(&ptr.alloc_id.0).is_none() {\n+            // TODO(tsion): Report error about erroneous free. This is blocked on properly tracking\n+            // already-dropped state since this if-statement is entered even in safe code without\n+            // it.\n+        }\n+\n+        Ok(())\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////////////\n     // Allocation accessors\n     ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "a488d7acb433fe2efc5b57dbe73eaa3bb40ef3b8", "filename": "test/errors.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f6583fe06ecb307004a6a7744c43a26bac85e8c/test%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f6583fe06ecb307004a6a7744c43a26bac85e8c/test%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Ferrors.rs?ref=1f6583fe06ecb307004a6a7744c43a26bac85e8c", "patch": "@@ -19,20 +19,29 @@ fn pointers_to_different_allocations_are_unorderable() -> bool {\n }\n \n #[miri_run]\n-fn invalid_bools_are_rejected() -> u8 {\n+fn invalid_bool() -> u8 {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n     if b { 1 } else { 2 }\n }\n \n #[miri_run]\n-fn undefined_byte_reads_are_rejected() -> u8 {\n+fn undefined_byte_read() -> u8 {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n     undef + 1\n }\n \n #[miri_run]\n-fn out_of_bounds_reads_are_rejected() -> u8 {\n+fn out_of_bounds_read() -> u8 {\n     let v: Vec<u8> = vec![1, 2];\n     unsafe { *v.get_unchecked(5) }\n }\n+\n+#[miri_run]\n+fn dangling_pointer_deref() -> i32 {\n+    let p = {\n+        let b = Box::new(42);\n+        &*b as *const i32\n+    };\n+    unsafe { *p }\n+}"}]}