{"sha": "dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNzE4M2VkMGU1ZGE2MzE3ZDdiM2NjM2VhMjVhZTMwZTFhOTFiY2Q=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-07T16:38:24Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-09T16:55:37Z"}, "message": "core: rename MutableVector to OwnedVector", "tree": {"sha": "721979aa8d44f33078d37a410d382129659300e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/721979aa8d44f33078d37a410d382129659300e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "html_url": "https://github.com/rust-lang/rust/commit/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b7d44b8c340deeadcdaab60316764830fee597", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b7d44b8c340deeadcdaab60316764830fee597", "html_url": "https://github.com/rust-lang/rust/commit/d1b7d44b8c340deeadcdaab60316764830fee597"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "f8658b8e46e164c10db29d9e68262528e185cc1c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "patch": "@@ -191,7 +191,7 @@ pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n-pub use vec::{MutableVector, MutableCopyableVector};\n+pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n "}, {"sha": "f2f6659278d44a99089f78b6431484acfbe93fb9", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "patch": "@@ -21,7 +21,7 @@ pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n-pub use vec::{MutableVector, MutableCopyableVector};\n+pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n "}, {"sha": "ae72e425d2034904e08af0f7f4b42d76614f337d", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=dc7183ed0e5da6317d7b3cc3ea25ae30e1a91bcd", "patch": "@@ -1599,13 +1599,6 @@ pub trait ImmutableVector<T> {\n     pure fn filter_map<U: Copy>(f: fn(t: &T) -> Option<U>) -> ~[U];\n }\n \n-pub trait ImmutableEqVector<T: Eq> {\n-    pure fn position(f: fn(t: &T) -> bool) -> Option<uint>;\n-    pure fn position_elem(t: &T) -> Option<uint>;\n-    pure fn rposition(f: fn(t: &T) -> bool) -> Option<uint>;\n-    pure fn rposition_elem(t: &T) -> Option<uint>;\n-}\n-\n /// Extension methods for vectors\n impl<T> &[T]: ImmutableVector<T> {\n     /// Return a slice that points into another slice.\n@@ -1671,6 +1664,13 @@ impl<T> &[T]: ImmutableVector<T> {\n     }\n }\n \n+pub trait ImmutableEqVector<T: Eq> {\n+    pure fn position(f: fn(t: &T) -> bool) -> Option<uint>;\n+    pure fn position_elem(t: &T) -> Option<uint>;\n+    pure fn rposition(f: fn(t: &T) -> bool) -> Option<uint>;\n+    pure fn rposition_elem(t: &T) -> Option<uint>;\n+}\n+\n impl<T: Eq> &[T]: ImmutableEqVector<T> {\n     /**\n      * Find the first index matching some predicate\n@@ -1740,7 +1740,7 @@ impl<T: Copy> &[T]: ImmutableCopyableVector<T> {\n     pure fn rfind(f: fn(t: &T) -> bool) -> Option<T> { rfind(self, f) }\n }\n \n-pub trait MutableVector<T> {\n+pub trait OwnedVector<T> {\n     fn push(&mut self, t: T);\n     fn push_all_move(&mut self, rhs: ~[T]);\n     fn pop(&mut self) -> T;\n@@ -1753,18 +1753,7 @@ pub trait MutableVector<T> {\n     fn retain(&mut self, f: pure fn(t: &T) -> bool);\n }\n \n-pub trait MutableCopyableVector<T: Copy> {\n-    fn push_all(&mut self, rhs: &[const T]);\n-    fn grow(&mut self, n: uint, initval: &T);\n-    fn grow_fn(&mut self, n: uint, op: iter::InitOp<T>);\n-    fn grow_set(&mut self, index: uint, initval: &T, val: T);\n-}\n-\n-trait MutableEqVector<T: Eq> {\n-    fn dedup(&mut self);\n-}\n-\n-impl<T> ~[T]: MutableVector<T> {\n+impl<T> ~[T]: OwnedVector<T> {\n     #[inline]\n     fn push(&mut self, t: T) {\n         push(self, t);\n@@ -1817,7 +1806,14 @@ impl<T> ~[T]: MutableVector<T> {\n \n }\n \n-impl<T: Copy> ~[T]: MutableCopyableVector<T> {\n+pub trait OwnedCopyableVector<T: Copy> {\n+    fn push_all(&mut self, rhs: &[const T]);\n+    fn grow(&mut self, n: uint, initval: &T);\n+    fn grow_fn(&mut self, n: uint, op: iter::InitOp<T>);\n+    fn grow_set(&mut self, index: uint, initval: &T, val: T);\n+}\n+\n+impl<T: Copy> ~[T]: OwnedCopyableVector<T> {\n     #[inline]\n     fn push_all(&mut self, rhs: &[const T]) {\n         push_all(self, rhs);\n@@ -1839,14 +1835,17 @@ impl<T: Copy> ~[T]: MutableCopyableVector<T> {\n     }\n }\n \n-impl<T: Eq> ~[T]: MutableEqVector<T> {\n+trait OwnedEqVector<T: Eq> {\n+    fn dedup(&mut self);\n+}\n+\n+impl<T: Eq> ~[T]: OwnedEqVector<T> {\n     #[inline]\n     fn dedup(&mut self) {\n         dedup(self)\n     }\n }\n \n-\n /**\n * Constructs a vector from an unsafe pointer to a buffer\n *"}]}