{"sha": "69cf48344b14f596bcc91db01c24e76b5b2f37ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Y2Y0ODM0NGIxNGY1OTZiY2M5MWRiMDFjMjRlNzZiNWIyZjM3YWQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-25T06:04:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-25T06:04:33Z"}, "message": "fix handling of nested comments in patterns and ControlFlows (#3869)", "tree": {"sha": "5ddcaeed98fb1b412a8c0488e4614e836065453e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ddcaeed98fb1b412a8c0488e4614e836065453e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69cf48344b14f596bcc91db01c24e76b5b2f37ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdspBxCRBK7hj4Ov3rIwAAdHIIACKhWkMu+Jmx3fiFZWV+91mO\n0s9LMxEglXza2Wkj4TtcLGdbws7cZGqI2rgAHw0pSHKOxab5JVYqYV1BNeO7E+H0\n9lxWIyAA1Rk9r9hwKoga4jmIl7sRgFvpCL7qdg8fj7jGr7RQ5b9TqMwCIGHLcyeJ\nciSN2GGEykcs8S9skd/7AYaRez5dML/JjQiT8ZZaY/qMaUV8p5gAo4RAC2Xww3af\nYb1m1KgfhC3rQ/DyxRrPXAjR385seH6y+yhYieE0+ECJmHo6tk7jfqW46nE/0NTG\nrCjat61UIx9MycQ8RDrzIkhwp5CRpGnyHtNQ73f6YMYc43g8Tk7sM0M+IaQUX2M=\n=IRA+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ddcaeed98fb1b412a8c0488e4614e836065453e\nparent 233497aceb3542aaa40fd8011bb8e5339f5ed60f\nparent fd6e960648b8a8d46e31bf4989928cae82e9684f\nauthor Seiichi Uchida <seuchida@gmail.com> 1571983473 +0900\ncommitter GitHub <noreply@github.com> 1571983473 +0900\n\nfix handling of nested comments in patterns and ControlFlows (#3869)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69cf48344b14f596bcc91db01c24e76b5b2f37ad", "html_url": "https://github.com/rust-lang/rust/commit/69cf48344b14f596bcc91db01c24e76b5b2f37ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69cf48344b14f596bcc91db01c24e76b5b2f37ad/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "233497aceb3542aaa40fd8011bb8e5339f5ed60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/233497aceb3542aaa40fd8011bb8e5339f5ed60f", "html_url": "https://github.com/rust-lang/rust/commit/233497aceb3542aaa40fd8011bb8e5339f5ed60f"}, {"sha": "fd6e960648b8a8d46e31bf4989928cae82e9684f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6e960648b8a8d46e31bf4989928cae82e9684f", "html_url": "https://github.com/rust-lang/rust/commit/fd6e960648b8a8d46e31bf4989928cae82e9684f"}], "stats": {"total": 215, "additions": 199, "deletions": 16}, "files": [{"sha": "c721f07d0199e3e453b9b6c78d0533eaca67bafe", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69cf48344b14f596bcc91db01c24e76b5b2f37ad/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf48344b14f596bcc91db01c24e76b5b2f37ad/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=69cf48344b14f596bcc91db01c24e76b5b2f37ad", "patch": "@@ -112,7 +112,7 @@ impl<'a> CommentStyle<'a> {\n     }\n }\n \n-fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle<'_> {\n+pub(crate) fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle<'_> {\n     if !normalize_comments {\n         if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n             CommentStyle::DoubleBullet"}, {"sha": "851e1f707094db6c3680c5d1b50dce4c7dfeb9af", "filename": "src/expr.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/69cf48344b14f596bcc91db01c24e76b5b2f37ad/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf48344b14f596bcc91db01c24e76b5b2f37ad/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=69cf48344b14f596bcc91db01c24e76b5b2f37ad", "patch": "@@ -9,8 +9,8 @@ use syntax::{ast, ptr};\n use crate::chains::rewrite_chain;\n use crate::closures;\n use crate::comment::{\n-    combine_strs_with_missing_comments, contains_comment, recover_comment_removed, rewrite_comment,\n-    rewrite_missing_comment, CharClasses, FindUncommented,\n+    combine_strs_with_missing_comments, comment_style, contains_comment, recover_comment_removed,\n+    rewrite_comment, rewrite_missing_comment, CharClasses, FindUncommented,\n };\n use crate::config::lists::*;\n use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n@@ -808,7 +808,7 @@ impl<'a> ControlFlow<'a> {\n         debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, self.pat, expr);\n \n         let cond_shape = shape.offset_left(offset)?;\n-        if !self.pat.is_none() {\n+        if let Some(pat) = self.pat {\n             let matcher = if self.matcher.is_empty() {\n                 self.matcher.to_owned()\n             } else {\n@@ -817,12 +817,41 @@ impl<'a> ControlFlow<'a> {\n             let pat_shape = cond_shape\n                 .offset_left(matcher.len())?\n                 .sub_width(self.connector.len())?;\n-            let pat_string = if let Some(pat) = self.pat {\n-                pat.rewrite(context, pat_shape)?\n+            let pat_string = pat.rewrite(context, pat_shape)?;\n+            let comments_lo = context\n+                .snippet_provider\n+                .span_after(self.span, self.connector.trim());\n+            let missing_comments = if let Some(comment) =\n+                rewrite_missing_comment(mk_sp(comments_lo, expr.span.lo()), cond_shape, context)\n+            {\n+                if !self.connector.is_empty() && !comment.is_empty() {\n+                    if comment_style(&comment, false).is_line_comment() || comment.contains(\"\\n\") {\n+                        let newline = &pat_shape\n+                            .indent\n+                            .block_indent(context.config)\n+                            .to_string_with_newline(context.config);\n+                        // An extra space is added when the lhs and rhs are joined\n+                        // so we need to remove one space from the end to ensure\n+                        // the comment and rhs are aligned.\n+                        let mut suffix = newline.as_ref().to_string();\n+                        if !suffix.is_empty() {\n+                            suffix.truncate(suffix.len() - 1);\n+                        }\n+                        format!(\"{}{}{}\", newline, comment, suffix)\n+                    } else {\n+                        format!(\" {}\", comment)\n+                    }\n+                } else {\n+                    comment\n+                }\n             } else {\n                 \"\".to_owned()\n             };\n-            let result = format!(\"{}{}{}\", matcher, pat_string, self.connector);\n+\n+            let result = format!(\n+                \"{}{}{}{}\",\n+                matcher, pat_string, self.connector, missing_comments\n+            );\n             return rewrite_assign_rhs(context, result, expr, cond_shape);\n         }\n "}, {"sha": "baa39dbbce641a1dc7368d4a3adb0c43bee93d50", "filename": "src/patterns.rs", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/69cf48344b14f596bcc91db01c24e76b5b2f37ad/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf48344b14f596bcc91db01c24e76b5b2f37ad/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=69cf48344b14f596bcc91db01c24e76b5b2f37ad", "patch": "@@ -89,26 +89,81 @@ impl Rewrite for Pat {\n             PatKind::Box(ref pat) => rewrite_unary_prefix(context, \"box \", &**pat, shape),\n             PatKind::Ident(binding_mode, ident, ref sub_pat) => {\n                 let (prefix, mutability) = match binding_mode {\n-                    BindingMode::ByRef(mutability) => (\"ref \", mutability),\n+                    BindingMode::ByRef(mutability) => (\"ref\", mutability),\n                     BindingMode::ByValue(mutability) => (\"\", mutability),\n                 };\n-                let mut_infix = format_mutability(mutability);\n+                let mut_infix = format_mutability(mutability).trim();\n                 let id_str = rewrite_ident(context, ident);\n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n-                        // 3 - ` @ `.\n+                        // 2 - `@ `.\n                         let width = shape\n                             .width\n-                            .checked_sub(prefix.len() + mut_infix.len() + id_str.len() + 3)?;\n-                        format!(\n-                            \" @ {}\",\n-                            p.rewrite(context, Shape::legacy(width, shape.indent))?\n-                        )\n+                            .checked_sub(prefix.len() + mut_infix.len() + id_str.len() + 2)?;\n+                        let lo = context.snippet_provider.span_after(self.span, \"@\");\n+                        combine_strs_with_missing_comments(\n+                            context,\n+                            \"@\",\n+                            &p.rewrite(context, Shape::legacy(width, shape.indent))?,\n+                            mk_sp(lo, p.span.lo()),\n+                            shape,\n+                            true,\n+                        )?\n                     }\n                     None => \"\".to_owned(),\n                 };\n \n-                Some(format!(\"{}{}{}{}\", prefix, mut_infix, id_str, sub_pat))\n+                // combine prefix and mut\n+                let (first_lo, first) = if !prefix.is_empty() && !mut_infix.is_empty() {\n+                    let hi = context.snippet_provider.span_before(self.span, \"mut\");\n+                    let lo = context.snippet_provider.span_after(self.span, \"ref\");\n+                    (\n+                        context.snippet_provider.span_after(self.span, \"mut\"),\n+                        combine_strs_with_missing_comments(\n+                            context,\n+                            prefix,\n+                            mut_infix,\n+                            mk_sp(lo, hi),\n+                            shape,\n+                            true,\n+                        )?,\n+                    )\n+                } else if !prefix.is_empty() {\n+                    (\n+                        context.snippet_provider.span_after(self.span, \"ref\"),\n+                        prefix.to_owned(),\n+                    )\n+                } else if !mut_infix.is_empty() {\n+                    (\n+                        context.snippet_provider.span_after(self.span, \"mut\"),\n+                        mut_infix.to_owned(),\n+                    )\n+                } else {\n+                    (self.span.lo(), \"\".to_owned())\n+                };\n+\n+                let next = if !sub_pat.is_empty() {\n+                    let hi = context.snippet_provider.span_before(self.span, \"@\");\n+                    combine_strs_with_missing_comments(\n+                        context,\n+                        id_str,\n+                        &sub_pat,\n+                        mk_sp(ident.span.hi(), hi),\n+                        shape,\n+                        true,\n+                    )?\n+                } else {\n+                    id_str.to_owned()\n+                };\n+\n+                combine_strs_with_missing_comments(\n+                    context,\n+                    &first,\n+                    &next,\n+                    mk_sp(first_lo, ident.span.lo()),\n+                    shape,\n+                    true,\n+                )\n             }\n             PatKind::Wild => {\n                 if 1 <= shape.width {"}, {"sha": "c41309bc7882843b1ff2f3cf816e19c2a324709a", "filename": "tests/source/issue_3853.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/69cf48344b14f596bcc91db01c24e76b5b2f37ad/tests%2Fsource%2Fissue_3853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf48344b14f596bcc91db01c24e76b5b2f37ad/tests%2Fsource%2Fissue_3853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_3853.rs?ref=69cf48344b14f596bcc91db01c24e76b5b2f37ad", "patch": "@@ -0,0 +1,52 @@\n+fn by_ref_with_block_before_ident() {\n+if let Some(ref     /*def*/      state)=        foo{\n+\t\t\t\tprintln!(\n+        \"asdfasdfasdf\");\t}\n+}\n+\n+fn mut_block_before_ident() {\n+if   let Some(mut     /*def*/    state  ) =foo{\n+\t\t\t\tprintln!(\n+        \"123\"   );\t}\n+}\n+\n+fn ref_and_mut_blocks_before_ident() {\n+if   let Some(ref  /*abc*/\n+    mut     /*def*/    state  )    =       foo {\n+\t\t\t\tprintln!(\n+ \"deefefefefefwea\"   );\t}\n+}\n+\n+fn sub_pattern() {\n+    let foo @             /*foo*/\n+bar(f) = 42;\n+}\n+\n+fn no_prefix_block_before_ident() {\n+if   let Some(\n+    /*def*/    state  )    =       foo {\n+\t\t\t\tprintln!(\n+ \"129387123123\"   );\t}\n+}\n+\n+fn issue_3853() {\n+if let Some(ref /*mut*/ state) = foo {\n+\t\t\t\t\t}\n+}\n+\n+fn double_slash_comment_between_lhs_and_rhs() {\n+    if let Some(e) =\n+\t\t\t\t // self.foo.bar(e, tx)\n+\t\t\t\t packet.transaction.state.committed\n+                {\n+            // body\n+                            println!(\n+                                \"a2304712836123\");\n+                                }\n+}\n+\n+fn block_comment_between_lhs_and_rhs() {\n+if let Some(ref     /*def*/  mut     /*abc*/       state)=          /*abc*/foo{\n+\t\t\t\tprintln!(\n+        \"asdfasdfasdf\");\t}\n+}"}, {"sha": "eae59eff94e563a6164bbebd24ef76111a7ccbf9", "filename": "tests/target/issue_3853.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/69cf48344b14f596bcc91db01c24e76b5b2f37ad/tests%2Ftarget%2Fissue_3853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf48344b14f596bcc91db01c24e76b5b2f37ad/tests%2Ftarget%2Fissue_3853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_3853.rs?ref=69cf48344b14f596bcc91db01c24e76b5b2f37ad", "patch": "@@ -0,0 +1,47 @@\n+fn by_ref_with_block_before_ident() {\n+    if let Some(ref /*def*/ state) = foo {\n+        println!(\"asdfasdfasdf\");\n+    }\n+}\n+\n+fn mut_block_before_ident() {\n+    if let Some(mut /*def*/ state) = foo {\n+        println!(\"123\");\n+    }\n+}\n+\n+fn ref_and_mut_blocks_before_ident() {\n+    if let Some(ref /*abc*/ mut /*def*/ state) = foo {\n+        println!(\"deefefefefefwea\");\n+    }\n+}\n+\n+fn sub_pattern() {\n+    let foo @ /*foo*/ bar(f) = 42;\n+}\n+\n+fn no_prefix_block_before_ident() {\n+    if let Some(/*def*/ state) = foo {\n+        println!(\"129387123123\");\n+    }\n+}\n+\n+fn issue_3853() {\n+    if let Some(ref /*mut*/ state) = foo {}\n+}\n+\n+fn double_slash_comment_between_lhs_and_rhs() {\n+    if let Some(e) =\n+        // self.foo.bar(e, tx)\n+        packet.transaction.state.committed\n+    {\n+        // body\n+        println!(\"a2304712836123\");\n+    }\n+}\n+\n+fn block_comment_between_lhs_and_rhs() {\n+    if let Some(ref /*def*/ mut /*abc*/ state) = /*abc*/ foo {\n+        println!(\"asdfasdfasdf\");\n+    }\n+}"}]}