{"sha": "1988f28009479484362f7718371618a9c1d31b84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODhmMjgwMDk0Nzk0ODQzNjJmNzcxODM3MTYxOGE5YzFkMzFiODQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-07T00:20:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T00:20:34Z"}, "message": "Rollup merge of #65945 - tmiasko:long-linker-command-line, r=alexcrichton\n\nOptimize long-linker-command-line test\n\nReplace O(n^3) text matching with inexpensive hash set lookups.\n\nOn my machine this reduces the total runtime of complete\nrun-make-fulldeps suite from roughly 75 seconds to 45 seconds.", "tree": {"sha": "4abc7d2c9782a17b2ded41eb3a458c53237c9318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4abc7d2c9782a17b2ded41eb3a458c53237c9318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1988f28009479484362f7718371618a9c1d31b84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw2NSCRBK7hj4Ov3rIwAAdHIIABuWlNiUWBC1Dfo+hQxwixa2\no5smufDtpJ0jdfyaNGdUIfyioP9Xq+hk57pY6RpIIeWzF+gmFOVzc9yLLUvSi9z5\nnCe8UxojeqyjXC8wffdFNV2qd5rAa6BZ9pAIswTpAp5YaPvZzU2XcT6wubOUXKfD\nzkceGZNINR5mJhKYIB+XJ/R2QUu8a9JsO8vvkfWne0iffIZ17gus8jsUNhBHrDS/\nGQmkbd9nfKLdtycY/0iXlS+B5closI0JHXgOy06914vBMTlps/TOjbs7oCtq08VE\nCi7pbjuNKhujw5SxwJQd03E/zEYT4E90osu/zLYu4cuzbJNrss6CeUyw9Pwf72U=\n=HWWY\n-----END PGP SIGNATURE-----\n", "payload": "tree 4abc7d2c9782a17b2ded41eb3a458c53237c9318\nparent 082a07695b6472f8b9e3b26925a77865555a9159\nparent 6bbe162c4d83f98e77e6646dfa95e0f9957dd257\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573086034 +0900\ncommitter GitHub <noreply@github.com> 1573086034 +0900\n\nRollup merge of #65945 - tmiasko:long-linker-command-line, r=alexcrichton\n\nOptimize long-linker-command-line test\n\nReplace O(n^3) text matching with inexpensive hash set lookups.\n\nOn my machine this reduces the total runtime of complete\nrun-make-fulldeps suite from roughly 75 seconds to 45 seconds.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1988f28009479484362f7718371618a9c1d31b84", "html_url": "https://github.com/rust-lang/rust/commit/1988f28009479484362f7718371618a9c1d31b84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1988f28009479484362f7718371618a9c1d31b84/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "082a07695b6472f8b9e3b26925a77865555a9159", "url": "https://api.github.com/repos/rust-lang/rust/commits/082a07695b6472f8b9e3b26925a77865555a9159", "html_url": "https://github.com/rust-lang/rust/commit/082a07695b6472f8b9e3b26925a77865555a9159"}, {"sha": "6bbe162c4d83f98e77e6646dfa95e0f9957dd257", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbe162c4d83f98e77e6646dfa95e0f9957dd257", "html_url": "https://github.com/rust-lang/rust/commit/6bbe162c4d83f98e77e6646dfa95e0f9957dd257"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "96fb16b1fcc8f4457208f9e0599f13c2980b13a8", "filename": "src/test/run-make-fulldeps/long-linker-command-lines/foo.rs", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1988f28009479484362f7718371618a9c1d31b84/src%2Ftest%2Frun-make-fulldeps%2Flong-linker-command-lines%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1988f28009479484362f7718371618a9c1d31b84/src%2Ftest%2Frun-make-fulldeps%2Flong-linker-command-lines%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flong-linker-command-lines%2Ffoo.rs?ref=1988f28009479484362f7718371618a9c1d31b84", "patch": "@@ -7,12 +7,43 @@\n // Eventually we should see an argument that looks like `@` as we switch from\n // passing literal arguments to passing everything in the file.\n \n+use std::collections::HashSet;\n use std::env;\n use std::fs::{self, File};\n-use std::io::{BufWriter, Write, Read};\n-use std::path::PathBuf;\n+use std::io::{BufWriter, Write};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n+fn write_test_case(file: &Path, n: usize) -> HashSet<String> {\n+    let mut libs = HashSet::new();\n+    let mut f = BufWriter::new(File::create(&file).unwrap());\n+    let mut prefix = String::new();\n+    for _ in 0..n {\n+        prefix.push_str(\"foo\");\n+    }\n+    for i in 0..n {\n+        writeln!(f, \"#[link(name = \\\"S{}{}S\\\")]\", prefix, i).unwrap();\n+        libs.insert(format!(\"{}{}\", prefix, i));\n+    }\n+    writeln!(f, \"extern {{}}\\nfn main() {{}}\").unwrap();\n+    f.into_inner().unwrap();\n+\n+    libs\n+}\n+\n+fn read_linker_args(path: &Path) -> String {\n+    let contents = fs::read(path).unwrap();\n+    if cfg!(target_env = \"msvc\") {\n+        let mut i = contents.chunks(2).map(|c| {\n+            c[0] as u16 | ((c[1] as u16) << 8)\n+        });\n+        assert_eq!(i.next(), Some(0xfeff), \"Expected UTF-16 BOM\");\n+        String::from_utf16(&i.collect::<Vec<u16>>()).unwrap()\n+    } else {\n+        String::from_utf8(contents).unwrap()\n+    }\n+}\n+\n fn main() {\n     let tmpdir = PathBuf::from(env::var_os(\"TMPDIR\").unwrap());\n     let ok = tmpdir.join(\"ok\");\n@@ -29,16 +60,7 @@ fn main() {\n     for i in (1..).map(|i| i * 100) {\n         println!(\"attempt: {}\", i);\n         let file = tmpdir.join(\"bar.rs\");\n-        let mut f = BufWriter::new(File::create(&file).unwrap());\n-        let mut lib_name = String::new();\n-        for _ in 0..i {\n-            lib_name.push_str(\"foo\");\n-        }\n-        for j in 0..i {\n-            writeln!(f, \"#[link(name = \\\"{}{}\\\")]\", lib_name, j).unwrap();\n-        }\n-        writeln!(f, \"extern {{}}\\nfn main() {{}}\").unwrap();\n-        f.into_inner().unwrap();\n+        let mut expected_libs = write_test_case(&file, i);\n \n         drop(fs::remove_file(&ok));\n         let output = Command::new(&rustc)\n@@ -67,25 +89,18 @@ fn main() {\n             continue\n         }\n \n-        let mut contents = Vec::new();\n-        File::open(&ok).unwrap().read_to_end(&mut contents).unwrap();\n-\n-        for j in 0..i {\n-            let exp = format!(\"{}{}\", lib_name, j);\n-            let exp = if cfg!(target_env = \"msvc\") {\n-                let mut out = Vec::with_capacity(exp.len() * 2);\n-                for c in exp.encode_utf16() {\n-                    // encode in little endian\n-                    out.push(c as u8);\n-                    out.push((c >> 8) as u8);\n-                }\n-                out\n-            } else {\n-                exp.into_bytes()\n-            };\n-            assert!(contents.windows(exp.len()).any(|w| w == &exp[..]));\n+        let linker_args = read_linker_args(&ok);\n+        for mut arg in linker_args.split('S') {\n+            expected_libs.remove(arg);\n         }\n \n+        assert!(\n+            expected_libs.is_empty(),\n+            \"expected but missing libraries: {:#?}\\nlinker arguments: \\n{}\",\n+            expected_libs,\n+            linker_args,\n+        );\n+\n         break\n     }\n }"}]}