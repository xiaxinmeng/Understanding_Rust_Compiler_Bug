{"sha": "b5bcb28b72097c5633922b437f9eca57d6791c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YmNiMjhiNzIwOTdjNTYzMzkyMmI0MzdmOWVjYTU3ZDY3OTFjOTU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-05T13:36:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-05T13:36:59Z"}, "message": "Rollup merge of #66012 - nnethercote:dequery-trivial_dropck_outlives, r=michaelwoerister\n\nDe-querify `trivial_dropck_outlives`.\n\nIt's sufficiently simple and fast that memoizing it is a slight\npessimization.\n\nr? @michaelwoerister", "tree": {"sha": "f11dfe5ee1edd1c5e255917eff88d90fbce09cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11dfe5ee1edd1c5e255917eff88d90fbce09cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5bcb28b72097c5633922b437f9eca57d6791c95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwXr7CRBK7hj4Ov3rIwAAdHIIAKAOiVOpP3y25DQQRM2iiK1f\nTjIZr5kJLm42LA1kc5PF4fxN58rOqnvTpowk+s7b+qyCd84x/SkjfBsKDofGEYEM\nm1iGbQsu0sWJ4VTvpZj8NpFxLB+yM4yr7sBVoQ0lLwGqO0MyDel9XpUN2BUzKiIH\n11bfSX1zxV459FQjwUoDgSR4xeeumALnLzjmjd/7KGOCcOs/V9U0LNjQhbqgmGre\nOYw7wyl93bmZEt6M+kD6XTFSAMpgSPwP8sbMlLiJXmhyD5zzXc3P7HyqGDIibSRK\n2s5ebaXA9c7+N4BTAnJle0k8NRF7xMb0x5hi2lONiXdhz+7ZQY6SogfKYYKE80w=\n=YINl\n-----END PGP SIGNATURE-----\n", "payload": "tree f11dfe5ee1edd1c5e255917eff88d90fbce09cca\nparent 26449f8db46eada190e5b2a48039bb7e10a715d2\nparent 89719726ca7073ba6e767d767e9eba2f52ace3b3\nauthor Pietro Albini <pietro@pietroalbini.org> 1572961019 +0100\ncommitter GitHub <noreply@github.com> 1572961019 +0100\n\nRollup merge of #66012 - nnethercote:dequery-trivial_dropck_outlives, r=michaelwoerister\n\nDe-querify `trivial_dropck_outlives`.\n\nIt's sufficiently simple and fast that memoizing it is a slight\npessimization.\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bcb28b72097c5633922b437f9eca57d6791c95", "html_url": "https://github.com/rust-lang/rust/commit/b5bcb28b72097c5633922b437f9eca57d6791c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5bcb28b72097c5633922b437f9eca57d6791c95/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26449f8db46eada190e5b2a48039bb7e10a715d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/26449f8db46eada190e5b2a48039bb7e10a715d2", "html_url": "https://github.com/rust-lang/rust/commit/26449f8db46eada190e5b2a48039bb7e10a715d2"}, {"sha": "89719726ca7073ba6e767d767e9eba2f52ace3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/89719726ca7073ba6e767d767e9eba2f52ace3b3", "html_url": "https://github.com/rust-lang/rust/commit/89719726ca7073ba6e767d767e9eba2f52ace3b3"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "12ae2c3201547b93a6d1b683d3f2182b8732148b", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=b5bcb28b72097c5633922b437f9eca57d6791c95", "patch": "@@ -228,12 +228,6 @@ rustc_queries! {\n             cycle_delay_bug\n         }\n \n-        query trivial_dropck_outlives(ty: Ty<'tcx>) -> bool {\n-            anon\n-            no_force\n-            desc { \"checking if `{:?}` has trivial dropck\", ty }\n-        }\n-\n         query adt_dtorck_constraint(\n             _: DefId\n         ) -> Result<DtorckConstraint<'tcx>, NoSolution> {}"}, {"sha": "eaf5971e4592f32044765236d47701f36a4e49a6", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=b5bcb28b72097c5633922b437f9eca57d6791c95", "patch": "@@ -5,7 +5,6 @@ use std::iter::FromIterator;\n use syntax::source_map::Span;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::query::Providers;\n \n impl<'cx, 'tcx> At<'cx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -34,7 +33,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n         // Quick check: there are a number of cases that we know do not require\n         // any destructor.\n         let tcx = self.infcx.tcx;\n-        if tcx.trivial_dropck_outlives(ty) {\n+        if trivial_dropck_outlives(tcx, ty) {\n             return InferOk {\n                 value: vec![],\n                 obligations: vec![],\n@@ -208,15 +207,15 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Error => true,\n \n         // [T; N] and [T] have same properties as T.\n-        ty::Array(ty, _) | ty::Slice(ty) => tcx.trivial_dropck_outlives(ty),\n+        ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),\n \n         // (T1..Tn) and closures have same properties as T1..Tn --\n         // check if *any* of those are trivial.\n-        ty::Tuple(ref tys) => tys.iter().all(|t| tcx.trivial_dropck_outlives(t.expect_ty())),\n+        ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n         ty::Closure(def_id, ref substs) => substs\n             .as_closure()\n             .upvar_tys(def_id, tcx)\n-            .all(|t| tcx.trivial_dropck_outlives(t)),\n+            .all(|t| trivial_dropck_outlives(tcx, t)),\n \n         ty::Adt(def, _) => {\n             if Some(def.did) == tcx.lang_items().manually_drop() {\n@@ -244,10 +243,3 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }\n-\n-crate fn provide(p: &mut Providers<'_>) {\n-    *p = Providers {\n-        trivial_dropck_outlives,\n-        ..*p\n-    };\n-}"}, {"sha": "81c3857cbf8d83d407e0a790d8dd0ad705072d39", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=b5bcb28b72097c5633922b437f9eca57d6791c95", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n-use crate::traits::query::dropck_outlives::DropckOutlivesResult;\n+use crate::traits::query::dropck_outlives::{DropckOutlivesResult, trivial_dropck_outlives};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n@@ -21,7 +21,7 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n-        if tcx.trivial_dropck_outlives(key.value.dropped_ty) {\n+        if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n             Some(DropckOutlivesResult::default())\n         } else {\n             None"}, {"sha": "1b1cc423fd457df5eb5c64a8d224c8a15aedab06", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b5bcb28b72097c5633922b437f9eca57d6791c95", "patch": "@@ -3407,7 +3407,6 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     layout::provide(providers);\n     util::provide(providers);\n     constness::provide(providers);\n-    crate::traits::query::dropck_outlives::provide(providers);\n     *providers = ty::query::Providers {\n         asyncness,\n         associated_item,"}, {"sha": "d77ec3010f4b7843d49d68d7d8b0aab1a020b5bc", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bcb28b72097c5633922b437f9eca57d6791c95/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=b5bcb28b72097c5633922b437f9eca57d6791c95", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstraint};\n+use rustc::traits::query::dropck_outlives::trivial_dropck_outlives;\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::{TraitEngine, Normalized, ObligationCause, TraitEngineExt};\n use rustc::ty::query::Providers;\n@@ -172,7 +173,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n         return Ok(());\n     }\n \n-    if tcx.trivial_dropck_outlives(ty) {\n+    if trivial_dropck_outlives(tcx, ty) {\n         return Ok(());\n     }\n "}]}