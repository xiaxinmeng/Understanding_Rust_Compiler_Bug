{"sha": "f56e8b7eb47402056b851b11203acfa0994bc8e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NmU4YjdlYjQ3NDAyMDU2Yjg1MWIxMTIwM2FjZmEwOTk0YmM4ZTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-17T09:36:17Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-17T10:07:08Z"}, "message": "Rename `FunctionRetTy` to `FnRetTy`", "tree": {"sha": "9ddd6c0977ca4f08eca97dfb271b533c757d1e5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ddd6c0977ca4f08eca97dfb271b533c757d1e5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f56e8b7eb47402056b851b11203acfa0994bc8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f56e8b7eb47402056b851b11203acfa0994bc8e0", "html_url": "https://github.com/rust-lang/rust/commit/f56e8b7eb47402056b851b11203acfa0994bc8e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f56e8b7eb47402056b851b11203acfa0994bc8e0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f5e348fa9cf1bd3c701eed9d664948275509dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f5e348fa9cf1bd3c701eed9d664948275509dd", "html_url": "https://github.com/rust-lang/rust/commit/74f5e348fa9cf1bd3c701eed9d664948275509dd"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "ce0bfea5160e359bb153cb4cd4eff9bc0ca48358", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -468,8 +468,8 @@ fn check_must_use_candidate<'a, 'tcx>(\n \n fn returns_unit(decl: &hir::FnDecl<'_>) -> bool {\n     match decl.output {\n-        hir::FunctionRetTy::DefaultReturn(_) => true,\n-        hir::FunctionRetTy::Return(ref ty) => match ty.kind {\n+        hir::FnRetTy::DefaultReturn(_) => true,\n+        hir::FnRetTy::Return(ref ty) => match ty.kind {\n             hir::TyKind::Tup(ref tys) => tys.is_empty(),\n             hir::TyKind::Never => true,\n             _ => false,"}, {"sha": "f98021bca459bd547ebf6809abb12a520a121cb1", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::in_external_macro;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::*;\n-use rustc_hir::FunctionRetTy::Return;\n+use rustc_hir::FnRetTy::Return;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "00a9fd8946471627b252a9fbe661fa9e7ea57ea2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -3406,14 +3406,14 @@ enum OutType {\n }\n \n impl OutType {\n-    fn matches(self, cx: &LateContext<'_, '_>, ty: &hir::FunctionRetTy<'_>) -> bool {\n+    fn matches(self, cx: &LateContext<'_, '_>, ty: &hir::FnRetTy<'_>) -> bool {\n         let is_unit = |ty: &hir::Ty<'_>| SpanlessEq::new(cx).eq_ty_kind(&ty.kind, &hir::TyKind::Tup(&[]));\n         match (self, ty) {\n-            (Self::Unit, &hir::FunctionRetTy::DefaultReturn(_)) => true,\n-            (Self::Unit, &hir::FunctionRetTy::Return(ref ty)) if is_unit(ty) => true,\n-            (Self::Bool, &hir::FunctionRetTy::Return(ref ty)) if is_bool(ty) => true,\n-            (Self::Any, &hir::FunctionRetTy::Return(ref ty)) if !is_unit(ty) => true,\n-            (Self::Ref, &hir::FunctionRetTy::Return(ref ty)) => matches!(ty.kind, hir::TyKind::Rptr(_, _)),\n+            (Self::Unit, &hir::FnRetTy::DefaultReturn(_)) => true,\n+            (Self::Unit, &hir::FnRetTy::Return(ref ty)) if is_unit(ty) => true,\n+            (Self::Bool, &hir::FnRetTy::Return(ref ty)) if is_bool(ty) => true,\n+            (Self::Any, &hir::FnRetTy::Return(ref ty)) if !is_unit(ty) => true,\n+            (Self::Ref, &hir::FnRetTy::Return(ref ty)) => matches!(ty.kind, hir::TyKind::Rptr(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "33cfa5d75c621be4fa75c97a5505d4461ab94677", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -253,7 +253,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n         }\n     }\n \n-    if let FunctionRetTy::Return(ref ty) = decl.output {\n+    if let FnRetTy::Return(ref ty) = decl.output {\n         if let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty) {\n             let mut immutables = vec![];\n             for (_, ref mutbl, ref argspan) in decl"}, {"sha": "fc371dccd732df6bbec26fdb7eea4b24a3e66e80", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -242,7 +242,7 @@ impl EarlyLintPass for Return {\n             FnKind::Fn(.., None) => {},\n         }\n         if_chain! {\n-            if let ast::FunctionRetTy::Ty(ref ty) = kind.decl().output;\n+            if let ast::FnRetTy::Ty(ref ty) = kind.decl().output;\n             if let ast::TyKind::Tup(ref vals) = ty.kind;\n             if vals.is_empty() && !ty.span.from_expansion() && get_def(span) == get_def(ty.span);\n             then {"}, {"sha": "d23487b5b334e35cb9da08676212a25672419dc9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -242,7 +242,7 @@ impl Types {\n             self.check_ty(cx, input, false);\n         }\n \n-        if let FunctionRetTy::Return(ref ty) = decl.output {\n+        if let FnRetTy::Return(ref ty) = decl.output {\n             self.check_ty(cx, ty, false);\n         }\n     }\n@@ -1476,7 +1476,7 @@ impl<'a, 'tcx> TypeComplexity {\n         for arg in decl.inputs {\n             self.check_type(cx, arg);\n         }\n-        if let FunctionRetTy::Return(ref ty) = decl.output {\n+        if let FnRetTy::Return(ref ty) = decl.output {\n             self.check_type(cx, ty);\n         }\n     }"}, {"sha": "da961a5f89da6e39087b4458b6d2a5ac3017a1a2", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -141,7 +141,7 @@ fn check_trait_method_impl_decl<'a, 'tcx>(\n     let impl_method_sig = cx.tcx.fn_sig(impl_method_def_id);\n     let impl_method_sig = cx.tcx.erase_late_bound_regions(&impl_method_sig);\n \n-    let output_ty = if let FunctionRetTy::Return(ty) = &impl_decl.output {\n+    let output_ty = if let FnRetTy::Return(ty) = &impl_decl.output {\n         Some(&**ty)\n     } else {\n         None"}, {"sha": "f5f35afa9baaff194a93bd4704f6b931119e75e7", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56e8b7eb47402056b851b11203acfa0994bc8e0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=f56e8b7eb47402056b851b11203acfa0994bc8e0", "patch": "@@ -633,10 +633,10 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_ty(&arg);\n                 }\n                 match bfn.decl.output {\n-                    FunctionRetTy::DefaultReturn(_) => {\n+                    FnRetTy::DefaultReturn(_) => {\n                         ().hash(&mut self.s);\n                     },\n-                    FunctionRetTy::Return(ref ty) => {\n+                    FnRetTy::Return(ref ty) => {\n                         self.hash_ty(ty);\n                     },\n                 }"}]}