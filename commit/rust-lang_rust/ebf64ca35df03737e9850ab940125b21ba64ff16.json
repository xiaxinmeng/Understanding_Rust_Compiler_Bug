{"sha": "ebf64ca35df03737e9850ab940125b21ba64ff16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjY0Y2EzNWRmMDM3MzdlOTg1MGFiOTQwMTI1YjIxYmE2NGZmMTY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-23T23:00:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-26T01:54:22Z"}, "message": "Heuristic max width for function calls", "tree": {"sha": "26f63b2dcccf6de351457c19a0bfb958cecd2cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f63b2dcccf6de351457c19a0bfb958cecd2cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf64ca35df03737e9850ab940125b21ba64ff16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf64ca35df03737e9850ab940125b21ba64ff16", "html_url": "https://github.com/rust-lang/rust/commit/ebf64ca35df03737e9850ab940125b21ba64ff16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf64ca35df03737e9850ab940125b21ba64ff16/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e161de0daa6d13642942883454a5676c7e7a3793", "url": "https://api.github.com/repos/rust-lang/rust/commits/e161de0daa6d13642942883454a5676c7e7a3793", "html_url": "https://github.com/rust-lang/rust/commit/e161de0daa6d13642942883454a5676c7e7a3793"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "4779d0e9b98c704e2ea3452046b0eed5990f319f", "filename": "src/config.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=ebf64ca35df03737e9850ab940125b21ba64ff16", "patch": "@@ -215,9 +215,11 @@ macro_rules! create_config {\n \n create_config! {\n     max_width: usize, \"Maximum width of each line\",\n-    ideal_width: usize, \"Ideal width of each line\",\n-    leeway: usize, \"Leeway of line width\",\n+    ideal_width: usize, \"Ideal width of each line (only used for comments)\",\n+    leeway: usize, \"Leeway of line width (deprecated)\",\n     tab_spaces: usize, \"Number of spaces per tab\",\n+    list_width: usize, \"Maximum width in a struct literal or function \\\n+                        call before faling back to vertical formatting\",\n     newline_style: NewlineStyle, \"Unix or Windows line endings\",\n     fn_brace_style: BraceStyle, \"Brace style for functions\",\n     fn_return_indent: ReturnIndent, \"Location of return type in function declaration\",\n@@ -256,6 +258,7 @@ impl Default for Config {\n             ideal_width: 80,\n             leeway: 5,\n             tab_spaces: 4,\n+            list_width: 50,\n             newline_style: NewlineStyle::Unix,\n             fn_brace_style: BraceStyle::SameLineWhere,\n             fn_return_indent: ReturnIndent::WithArgs,"}, {"sha": "3656fcdf982b6a370e8efcd7b07088d0a38bef9d", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ebf64ca35df03737e9850ab940125b21ba64ff16", "patch": "@@ -948,7 +948,7 @@ impl<'a> FmtVisitor<'a> {\n             item.item = ty;\n         }\n \n-        let fmt = ListFormatting::for_fn(h_budget, offset, self.config);\n+        let fmt = ListFormatting::for_item(h_budget, offset, self.config);\n         let list_str = try_opt!(write_list(&items, &fmt));\n \n         Some(format!(\"<{}>\", list_str))"}, {"sha": "cf1d433a25c2db6923c1e7fb7407f2f863c99ff9", "filename": "src/lists.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=ebf64ca35df03737e9850ab940125b21ba64ff16", "patch": "@@ -26,6 +26,8 @@ pub enum ListTactic {\n     Horizontal,\n     // Try Horizontal layout, if that fails then vertical\n     HorizontalVertical,\n+    // HorizontalVertical with a soft limit.\n+    LimitedHorizontalVertical(usize),\n     // Pack as many items as possible per row over (possibly) many rows.\n     Mixed,\n }\n@@ -59,6 +61,19 @@ pub struct ListFormatting<'a> {\n \n impl<'a> ListFormatting<'a> {\n     pub fn for_fn(width: usize, offset: Indent, config: &'a Config) -> ListFormatting<'a> {\n+        ListFormatting {\n+            tactic: ListTactic::LimitedHorizontalVertical(config.list_width),\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: offset,\n+            h_width: width,\n+            v_width: width,\n+            ends_with_newline: false,\n+            config: config,\n+        }\n+    }\n+\n+    pub fn for_item(width: usize, offset: Indent, config: &'a Config) -> ListFormatting<'a> {\n         ListFormatting {\n             tactic: ListTactic::HorizontalVertical,\n             separator: \",\",\n@@ -118,6 +133,13 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> Op\n     let fits_single = total_width + total_sep_len <= formatting.h_width;\n \n     // Check if we need to fallback from horizontal listing, if possible.\n+    if let ListTactic::LimitedHorizontalVertical(limit) = tactic {\n+        if total_width > limit {\n+            tactic = ListTactic::Vertical;\n+        } else {\n+            tactic = ListTactic::HorizontalVertical;\n+        }\n+    }\n     if tactic == ListTactic::HorizontalVertical {\n         debug!(\"write_list: total_width: {}, total_sep_len: {}, h_width: {}\",\n                total_width,"}, {"sha": "b1af98afbda6e9f05099cc63708cc7dbc12b9570", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf64ca35df03737e9850ab940125b21ba64ff16/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ebf64ca35df03737e9850ab940125b21ba64ff16", "patch": "@@ -230,7 +230,7 @@ fn rewrite_segment(segment: &ast::PathSegment,\n                                      list_lo,\n                                      span_hi);\n \n-            let fmt = ListFormatting::for_fn(list_width, offset + extra_offset, context.config);\n+            let fmt = ListFormatting::for_item(list_width, offset + extra_offset, context.config);\n             let list_str = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n \n             // Update position of last bracket."}]}