{"sha": "9bab0f09d30c90126993fa824171925a8fa579a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYWIwZjA5ZDMwYzkwMTI2OTkzZmE4MjQxNzE5MjVhOGZhNTc5YTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-01T00:35:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T10:03:02Z"}, "message": "Hide suggestion to use struct ctor when it is not visible", "tree": {"sha": "43e8dec251bf64e2ac33dc633d7912a157df3297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43e8dec251bf64e2ac33dc633d7912a157df3297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bab0f09d30c90126993fa824171925a8fa579a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bab0f09d30c90126993fa824171925a8fa579a7", "html_url": "https://github.com/rust-lang/rust/commit/9bab0f09d30c90126993fa824171925a8fa579a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bab0f09d30c90126993fa824171925a8fa579a7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb345a0be3ba3fa1970fe02789791c5c72788d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb345a0be3ba3fa1970fe02789791c5c72788d8f", "html_url": "https://github.com/rust-lang/rust/commit/bb345a0be3ba3fa1970fe02789791c5c72788d8f"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "d67578e8c06d8cb8cba1b23d8b2141a4cdace3d1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9bab0f09d30c90126993fa824171925a8fa579a7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bab0f09d30c90126993fa824171925a8fa579a7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9bab0f09d30c90126993fa824171925a8fa579a7", "patch": "@@ -2568,7 +2568,8 @@ impl<'a> Resolver<'a> {\n             let code = source.error_code(def.is_some());\n             let (base_msg, fallback_label, base_span) = if let Some(def) = def {\n                 (format!(\"expected {}, found {} `{}`\", expected, def.kind_name(), path_str),\n-                 format!(\"not a {}\", expected), span)\n+                 format!(\"not a {}\", expected),\n+                 span)\n             } else {\n                 let item_str = path[path.len() - 1].node;\n                 let item_span = path[path.len() - 1].span;\n@@ -2585,7 +2586,8 @@ impl<'a> Resolver<'a> {\n                     (mod_prefix, format!(\"`{}`\", names_to_string(mod_path)))\n                 };\n                 (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n-                 format!(\"not found in {}\", mod_str), item_span)\n+                 format!(\"not found in {}\", mod_str),\n+                 item_span)\n             };\n             let code = DiagnosticId::Error(code.into());\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n@@ -2701,17 +2703,21 @@ impl<'a> Resolver<'a> {\n                         return (err, candidates);\n                     },\n                     _ if ns == ValueNS && is_struct_like(def) => {\n+                        let mut accessible_ctor = true;\n                         if let Def::Struct(def_id) = def {\n                             if let Some((ctor_def, ctor_vis))\n                                     = this.struct_constructors.get(&def_id).cloned() {\n-                                if is_expected(ctor_def) && !this.is_accessible(ctor_vis) {\n+                                accessible_ctor = this.is_accessible(ctor_vis);\n+                                if is_expected(ctor_def) && !accessible_ctor {\n                                     err.span_label(span, format!(\"constructor is not visible \\\n                                                                    here due to private fields\"));\n                                 }\n                             }\n                         }\n-                        err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                                     path_str));\n+                        if accessible_ctor {\n+                            err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n+                                                         path_str));\n+                        }\n                         return (err, candidates);\n                     }\n                     _ => {}"}, {"sha": "b688d2fc95bafaebe44df536e4f430642bee8a8d", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bab0f09d30c90126993fa824171925a8fa579a7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bab0f09d30c90126993fa824171925a8fa579a7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=9bab0f09d30c90126993fa824171925a8fa579a7", "patch": "@@ -6,7 +6,6 @@ error[E0423]: expected value, found struct `Z`\n    |         |\n    |         did you mean `S`?\n    |         constructor is not visible here due to private fields\n-   |         did you mean `Z { /* fields */ }`?\n help: possible better candidate is found in another module, you can import it into scope\n    |\n 22 |     use m::n::Z;\n@@ -16,10 +15,7 @@ error[E0423]: expected value, found struct `S`\n   --> $DIR/privacy-struct-ctor.rs:35:5\n    |\n 35 |     S;\n-   |     ^\n-   |     |\n-   |     constructor is not visible here due to private fields\n-   |     did you mean `S { /* fields */ }`?\n+   |     ^ constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n 31 | use m::S;\n@@ -29,10 +25,7 @@ error[E0423]: expected value, found struct `xcrate::S`\n   --> $DIR/privacy-struct-ctor.rs:40:5\n    |\n 40 |     xcrate::S;\n-   |     ^^^^^^^^^\n-   |     |\n-   |     constructor is not visible here due to private fields\n-   |     did you mean `xcrate::S { /* fields */ }`?\n+   |     ^^^^^^^^^ constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n 31 | use m::S;"}]}