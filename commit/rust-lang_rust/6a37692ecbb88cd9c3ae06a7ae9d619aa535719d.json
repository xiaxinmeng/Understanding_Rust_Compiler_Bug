{"sha": "6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzc2OTJlY2JiODhjZDljM2FlMDZhN2FlOWQ2MTlhYTUzNTcxOWQ=", "commit": {"author": {"name": "gamazeps", "email": "gamaz3ps@gmail.com", "date": "2014-09-18T10:13:30Z"}, "committer": {"name": "gamazeps", "email": "gamaz3ps@gmail.com", "date": "2014-09-18T10:13:30Z"}, "message": "Document that CStrings live in the libc heap\n\nCloses issue #17067 and improves pr #17355", "tree": {"sha": "a6260558245a62171353f4b41d1dc6a7c885a4a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6260558245a62171353f4b41d1dc6a7c885a4a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "html_url": "https://github.com/rust-lang/rust/commit/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d/comments", "author": {"login": "gamazeps", "id": 4716134, "node_id": "MDQ6VXNlcjQ3MTYxMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4716134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamazeps", "html_url": "https://github.com/gamazeps", "followers_url": "https://api.github.com/users/gamazeps/followers", "following_url": "https://api.github.com/users/gamazeps/following{/other_user}", "gists_url": "https://api.github.com/users/gamazeps/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamazeps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamazeps/subscriptions", "organizations_url": "https://api.github.com/users/gamazeps/orgs", "repos_url": "https://api.github.com/users/gamazeps/repos", "events_url": "https://api.github.com/users/gamazeps/events{/privacy}", "received_events_url": "https://api.github.com/users/gamazeps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gamazeps", "id": 4716134, "node_id": "MDQ6VXNlcjQ3MTYxMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4716134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gamazeps", "html_url": "https://github.com/gamazeps", "followers_url": "https://api.github.com/users/gamazeps/followers", "following_url": "https://api.github.com/users/gamazeps/following{/other_user}", "gists_url": "https://api.github.com/users/gamazeps/gists{/gist_id}", "starred_url": "https://api.github.com/users/gamazeps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gamazeps/subscriptions", "organizations_url": "https://api.github.com/users/gamazeps/orgs", "repos_url": "https://api.github.com/users/gamazeps/repos", "events_url": "https://api.github.com/users/gamazeps/events{/privacy}", "received_events_url": "https://api.github.com/users/gamazeps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce2c51c4677865da469e61d22602752c39679da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce2c51c4677865da469e61d22602752c39679da", "html_url": "https://github.com/rust-lang/rust/commit/9ce2c51c4677865da469e61d22602752c39679da"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "cbf97c6ca20408b4b7b38360393bd0cc8674343c", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a37692ecbb88cd9c3ae06a7ae9d619aa535719d/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=6a37692ecbb88cd9c3ae06a7ae9d619aa535719d", "patch": "@@ -36,10 +36,10 @@ not tied to the lifetime of the original string/data buffer). If C strings are\n heavily used in applications, then caching may be advisable to prevent\n unnecessary amounts of allocations.\n \n-Be carefull to remember that the memory is managed by libc's malloc and not\n-by jemalloc which is the 'normal' rust memory allocator.\n-That means that the CString pointers should only be freed with \n-alloc::libc_heap::malloc_raw if you intend to do that on your own.\n+Be carefull to remember that the memory is managed by C allocator API and not\n+by Rust allocator API.\n+That means that the CString pointers should only be freed with C allocator API\n+if you intend to do that on your own.\n \n An example of creating and using a C string would be:\n \n@@ -97,7 +97,7 @@ pub struct CString {\n impl Clone for CString {\n     /// Clone this CString into a new, uniquely owned CString. For safety\n     /// reasons, this is always a deep clone with the memory allocated\n-    /// with libc's malloc, rather than the usual shallow clone.\n+    /// with C's allocator API, rather than the usual shallow clone.\n     fn clone(&self) -> CString {\n         let len = self.len() + 1;\n         let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n@@ -136,8 +136,9 @@ impl<S: hash::Writer> hash::Hash<S> for CString {\n }\n \n impl CString {\n-    /// Create a C String from a pointer, with memory managed by libc's malloc,\n-    /// so do not call it with a pointer allocated by jemalloc.\n+    /// Create a C String from a pointer, with memory managed by C's allocator\n+    /// API, so do not call it with a pointer to memory managed by Rust's\n+    /// allocator API.\n     ///\n     ///# Failure\n     ///"}]}