{"sha": "98e8fe12d232bd77d46c75e69236d11277732e82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZThmZTEyZDIzMmJkNzdkNDZjNzVlNjkyMzZkMTEyNzc3MzJlODI=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-20T15:35:02Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-22T10:24:19Z"}, "message": "core: replace uses of old deriving attribute with new one", "tree": {"sha": "deac908e21d4a59d4eaeee1deb02a10c003010ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deac908e21d4a59d4eaeee1deb02a10c003010ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e8fe12d232bd77d46c75e69236d11277732e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e8fe12d232bd77d46c75e69236d11277732e82", "html_url": "https://github.com/rust-lang/rust/commit/98e8fe12d232bd77d46c75e69236d11277732e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e8fe12d232bd77d46c75e69236d11277732e82/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9584c60871dc712f95a2f37f24853cf3faf6191e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9584c60871dc712f95a2f37f24853cf3faf6191e", "html_url": "https://github.com/rust-lang/rust/commit/9584c60871dc712f95a2f37f24853cf3faf6191e"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "fc8ed5d70c33d2c49da4074b22ab410c90f1acee", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -37,7 +37,7 @@ pub trait Eq {\n     pure fn ne(&self, other: &Self) -> bool;\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Ordering { Less, Equal, Greater }\n \n /// Trait for types that form a total order"}, {"sha": "a036c19c1580e7aa9caf386dc6208bd11524a5e6", "filename": "src/libcore/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -17,7 +17,7 @@ use result;\n use vec;\n \n /// The either type\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Either<T, U> {\n     Left(T),\n     Right(U)"}, {"sha": "94e06924e6957ef12e98f05d91d0a8d20cf152a8", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -630,7 +630,7 @@ pub pure fn with_str_reader<T>(s: &str, f: &fn(@Reader) -> T) -> T {\n pub enum FileFlag { Append, Create, Truncate, NoFlag, }\n \n // What type of writer are we?\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum WriterType { Screen, File }\n \n // FIXME (#2004): Seekable really should be orthogonal."}, {"sha": "c12b78b393f65f39183f6f97356d842e75d9f63d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -52,7 +52,7 @@ use iter::{BaseIter, MutableIter};\n #[cfg(test)] use str;\n \n /// The option type\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Option<T> {\n     None,\n     Some(T),"}, {"sha": "df4a3fdfb9e4a83ece928281f8518301d6a3de02", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -20,7 +20,7 @@ use option::{None, Option, Some};\n use str;\n use to_str::ToStr;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct WindowsPath {\n     host: Option<~str>,\n     device: Option<~str>,\n@@ -32,7 +32,7 @@ pub pure fn WindowsPath(s: &str) -> WindowsPath {\n     GenericPath::from_str(s)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct PosixPath {\n     is_absolute: bool,\n     components: ~[~str],"}, {"sha": "18594a73d65ede8cdce8391221ef2d7fd77fa2ab", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -20,7 +20,7 @@ use option::{None, Option, Some};\n use vec;\n \n /// The result type\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Result<T, U> {\n     /// Contains the successful result value\n     Ok(T),"}, {"sha": "1ef2316ec07afecb6acf68509ca678e91902ac87", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -50,13 +50,13 @@ pub mod rt;\n pub mod spawn;\n \n /// A handle to a scheduler\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Scheduler {\n     SchedulerHandle(sched_id)\n }\n \n /// A handle to a task\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Task {\n     TaskHandle(task_id)\n }\n@@ -88,7 +88,7 @@ impl Eq for TaskResult {\n }\n \n /// Scheduler modes\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum SchedMode {\n     /// Run task on the default scheduler\n     DefaultScheduler,"}, {"sha": "28f810c3a28710c8fa1c93128ab311ed634ad919", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8fe12d232bd77d46c75e69236d11277732e82/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=98e8fe12d232bd77d46c75e69236d11277732e82", "patch": "@@ -97,13 +97,13 @@ pub mod ct {\n     use prelude::*;\n     use str;\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Signedness { Signed, Unsigned, }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Caseness { CaseUpper, CaseLower, }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Ty {\n         TyBool,\n         TyStr,\n@@ -116,7 +116,7 @@ pub mod ct {\n         TyPoly,\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Flag {\n         FlagLeftJustify,\n         FlagLeftZeroPad,\n@@ -125,15 +125,15 @@ pub mod ct {\n         FlagAlternate,\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Count {\n         CountIs(uint),\n         CountIsParam(uint),\n         CountIsNextParam,\n         CountImplied,\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     struct Parsed<T> {\n         val: T,\n         next: uint\n@@ -146,7 +146,7 @@ pub mod ct {\n     }\n \n     // A formatted conversion from an expression to a string\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub struct Conv {\n         param: Option<uint>,\n         flags: ~[Flag],\n@@ -156,7 +156,7 @@ pub mod ct {\n     }\n \n     // A fragment of the output sequence\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Piece { PieceString(~str), PieceConv(Conv), }\n \n     pub type ErrorFn = @fn(&str) -> !;\n@@ -596,7 +596,7 @@ pub mod rt {\n             };\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum PadMode { PadSigned, PadUnsigned, PadNozero, PadFloat }\n \n     pub fn pad(cv: Conv, s: ~str, mode: PadMode) -> ~str {"}]}