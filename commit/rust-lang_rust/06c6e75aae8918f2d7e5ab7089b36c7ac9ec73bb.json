{"sha": "06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YzZlNzVhYWU4OTE4ZjJkN2U1YWI3MDg5YjM2YzdhYzllYzczYmI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-21T22:39:35Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-29T21:52:20Z"}, "message": "Optimize try_eval_bits to avoid layout queries\n\nThis specifically targets match checking, but is possibly more widely\nuseful as well. In code with large, single-value match statements, we\nwere previously spending a lot of time running layout_of for the\nprimitive types (integers, chars) -- which is essentially useless. This\noptimizes the code to avoid those query calls by directly obtaining the\nsize for these types, when possible.\n\nIt may be worth considering adding a `size_of` query in the future which\nmight be far faster, especially if specialized for \"const\" cases --\nmatch arms being the most obvious example. It's possibly such a function\nwould benefit from *not* being a query as well, since it's trivially\nevaluatable from the sty for many cases whereas a query needs to hash\nthe input and such.", "tree": {"sha": "617a0b4e24695f73b82319c29b7d04478271d6a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617a0b4e24695f73b82319c29b7d04478271d6a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb", "html_url": "https://github.com/rust-lang/rust/commit/06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c68947ad88f22a8342fe6b54dc0fe54de6e011", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c68947ad88f22a8342fe6b54dc0fe54de6e011", "html_url": "https://github.com/rust-lang/rust/commit/06c68947ad88f22a8342fe6b54dc0fe54de6e011"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "cfad02c152d872af26287b5770b3ef72e1a99172", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=06c6e75aae8918f2d7e5ab7089b36c7ac9ec73bb", "patch": "@@ -13,7 +13,7 @@ use rustc_macros::HashStable;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef, GenericArg, GenericArgKind};\n use crate::ty::{self, AdtDef, Discr, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n-use crate::ty::layout::VariantIdx;\n+use crate::ty::layout::{Size, Integer, IntegerExt, VariantIdx};\n use crate::util::captures::Captures;\n use crate::mir::interpret::{Scalar, GlobalId};\n \n@@ -24,6 +24,7 @@ use std::marker::PhantomData;\n use std::ops::Range;\n use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n+use syntax::attr::{SignedInt, UnsignedInt};\n use syntax::symbol::{kw, InternedString};\n \n use self::InferTy::*;\n@@ -2298,8 +2299,21 @@ impl<'tcx> Const<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> Option<u128> {\n         assert_eq!(self.ty, ty);\n+        // This is purely an optimization -- layout_of is a pretty expensive operation,\n+        // but if we can determine the size without calling it, we don't need all that complexity\n+        // (hashing, caching, etc.). As such, try to skip it.\n+        let size = match ty.kind {\n+            ty::Bool => Size::from_bytes(1),\n+            ty::Char => Size::from_bytes(4),\n+            ty::Int(ity) => {\n+                Integer::from_attr(&tcx, SignedInt(ity)).size()\n+            }\n+            ty::Uint(uty) => {\n+                Integer::from_attr(&tcx, UnsignedInt(uty)).size()\n+            }\n+            _ => tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size,\n+        };\n         // if `ty` does not depend on generic parameters, use an empty param_env\n-        let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n         self.eval(tcx, param_env).val.try_to_bits(size)\n     }\n "}]}