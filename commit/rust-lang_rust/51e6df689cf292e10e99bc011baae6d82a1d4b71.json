{"sha": "51e6df689cf292e10e99bc011baae6d82a1d4b71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTZkZjY4OWNmMjkyZTEwZTk5YmMwMTFiYWFlNmQ4MmExZDRiNzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T02:16:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T02:16:56Z"}, "message": "rustc: Allow the test runner to run unexported tests", "tree": {"sha": "89713dc098d8b184b76ebd8e5498ec43dafc44ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89713dc098d8b184b76ebd8e5498ec43dafc44ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e6df689cf292e10e99bc011baae6d82a1d4b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e6df689cf292e10e99bc011baae6d82a1d4b71", "html_url": "https://github.com/rust-lang/rust/commit/51e6df689cf292e10e99bc011baae6d82a1d4b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e6df689cf292e10e99bc011baae6d82a1d4b71/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2218d9c9cb4cbd28e3de44c152f1b270f185e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2218d9c9cb4cbd28e3de44c152f1b270f185e58", "html_url": "https://github.com/rust-lang/rust/commit/d2218d9c9cb4cbd28e3de44c152f1b270f185e58"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "bb2e5426938913f9de7f2e9b0810a6add5441cb3", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51e6df689cf292e10e99bc011baae6d82a1d4b71/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e6df689cf292e10e99bc011baae6d82a1d4b71/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=51e6df689cf292e10e99bc011baae6d82a1d4b71", "patch": "@@ -187,9 +187,12 @@ fn mk_test_module(cx: test_ctxt) -> @ast::item {\n     let mainfn = mk_main(cx);\n     let testmod: ast::_mod = {view_items: [], items: [mainfn, testsfn]};\n     let item_ = ast::item_mod(testmod);\n+    // This attribute tells resolve to let us call unexported functions\n+    let resolve_unexported_attr =\n+        attr::mk_attr(attr::mk_word_item(\"!resolve_unexported\"));\n     let item: ast::item =\n         {ident: \"__test\",\n-         attrs: [],\n+         attrs: [resolve_unexported_attr],\n          id: cx.sess.next_node_id(),\n          node: item_,\n          span: dummy_sp()};"}, {"sha": "9aa57e182ccad8300b1532d7ee12ab926aeef8a9", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/51e6df689cf292e10e99bc011baae6d82a1d4b71/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e6df689cf292e10e99bc011baae6d82a1d4b71/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=51e6df689cf292e10e99bc011baae6d82a1d4b71", "patch": "@@ -2,8 +2,9 @@\n import syntax::{ast, ast_util, codemap};\n import syntax::ast::*;\n import ast::{ident, fn_ident, def, def_id, node_id};\n-import syntax::ast_util::{local_def, def_id_of_def, is_exported};\n+import syntax::ast_util::{local_def, def_id_of_def};\n \n+import front::attr;\n import metadata::{csearch, cstore};\n import driver::session::session;\n import util::common::*;\n@@ -143,6 +144,7 @@ type env =\n      mutable reported: [{ident: str, sc: scope}],\n      mutable ignored_imports: [node_id],\n      mutable current_tp: option::t<uint>,\n+     mutable resolve_unexported: bool,\n      sess: session};\n \n \n@@ -170,6 +172,7 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n           mutable reported: [],\n           mutable ignored_imports: [],\n           mutable current_tp: none,\n+          mutable resolve_unexported: false,\n           sess: sess};\n     map_crate(e, crate);\n     resolve_imports(*e);\n@@ -231,7 +234,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n         path\n     }\n     fn index_i(e: @env, i: @ast::item, sc: scopes, v: vt<scopes>) {\n-        visit_item_with_scope(i, sc, v);\n+        visit_item_with_scope(e, i, sc, v);\n         alt i.node {\n           ast::item_mod(md) {\n             e.mod_map.insert(i.id,\n@@ -257,7 +260,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n     let v_link_glob =\n         @{visit_view_item: bind link_glob(e, _, _, _),\n           visit_block: visit_block_with_scope,\n-          visit_item: visit_item_with_scope\n+          visit_item: bind visit_item_with_scope(e, _, _, _)\n           with *visit::default_visitor::<scopes>()};\n     visit::visit_crate(*c, cons(scope_crate, @nil),\n                        visit::mk_vt(v_link_glob));\n@@ -331,7 +334,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n     e.used_imports.track = true;\n     let v =\n         @{visit_native_item: visit_native_item_with_scope,\n-          visit_item: visit_item_with_scope,\n+          visit_item: bind visit_item_with_scope(e, _, _, _),\n           visit_block: visit_block_with_scope,\n           visit_decl: visit_decl_with_scope,\n           visit_arm: visit_arm_with_scope,\n@@ -413,7 +416,17 @@ fn resolve_names(e: @env, c: @ast::crate) {\n \n \n // Visit helper functions\n-fn visit_item_with_scope(i: @ast::item, sc: scopes, v: vt<scopes>) {\n+fn visit_item_with_scope(e: @env, i: @ast::item, sc: scopes, v: vt<scopes>) {\n+\n+    // Some magic here. Items with the !resolve_unexported attribute\n+    // cause us to consider every name to be exported when resolving their\n+    // contents. This is used to allow the test runner to run unexported\n+    // tests.\n+    let old_resolve_unexported = e.resolve_unexported;\n+    e.resolve_unexported |=\n+        attr::contains_name(attr::attr_metas(i.attrs),\n+                            \"!resolve_unexported\");\n+\n     let sc = cons(scope_item(i), @sc);\n     alt i.node {\n       ast::item_impl(tps, ifce, sty, methods) {\n@@ -436,6 +449,8 @@ fn visit_item_with_scope(i: @ast::item, sc: scopes, v: vt<scopes>) {\n       }\n       _ { visit::visit_item(i, sc, v); }\n     }\n+\n+    e.resolve_unexported = old_resolve_unexported;\n }\n \n fn visit_native_item_with_scope(ni: @ast::native_item, sc: scopes,\n@@ -1187,10 +1202,14 @@ fn lookup_in_local_native_mod(e: env, node_id: node_id, sp: span, id: ident,\n     ret lookup_in_local_mod(e, node_id, sp, id, ns, inside);\n }\n \n+fn is_exported(e: env, i: ident, m: _mod) -> bool {\n+    ast_util::is_exported(i, m) || e.resolve_unexported\n+}\n+\n fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n                        ns: namespace, dr: dir) -> option::t<def> {\n     let info = e.mod_map.get(node_id);\n-    if dr == outside && !is_exported(id, option::get(info.m)) {\n+    if dr == outside && !is_exported(e, id, option::get(info.m)) {\n         // if we're in a native mod, then dr==inside, so info.m is some _mod\n         ret none::<def>; // name is not visible\n     }\n@@ -1792,7 +1811,10 @@ fn find_impls_in_item(e: env, i: @ast::item, &impls: [@_impl],\n     alt i.node {\n       ast::item_impl(_, ifce, _, mthds) {\n         if alt name { some(n) { n == i.ident } _ { true } } &&\n-           alt ck_exports { some(m) { is_exported(i.ident, m) } _ { true } } {\n+           alt ck_exports {\n+             some(m) { is_exported(e, i.ident, m) }\n+             _ { true }\n+           } {\n             impls += [@{did: local_def(i.id),\n                         iface_did: alt ifce {\n                             some(@{node: ast::ty_path(_, id), _}) {"}, {"sha": "c0512a4e213402d13e9648aaced981bf0519b8cb", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/51e6df689cf292e10e99bc011baae6d82a1d4b71/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e6df689cf292e10e99bc011baae6d82a1d4b71/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=51e6df689cf292e10e99bc011baae6d82a1d4b71", "patch": "@@ -0,0 +1,13 @@\n+// error-pattern:runned an unexported test\n+// compile-flags:--test\n+\n+use std;\n+\n+mod m {\n+    export exported;\n+\n+    fn exported() { }\n+\n+    #[test]\n+    fn unexported() { fail \"runned an unexported test\"; }\n+}"}]}