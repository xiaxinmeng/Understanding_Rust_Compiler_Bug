{"sha": "a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "node_id": "C_kwDOAAsO6NoAKGE5NmYwYWE3Y2RlYzBkNWMxNDUwZmU3NjYxZGZkYTIzNWJkNWI5NGM", "commit": {"author": {"name": "Artur Sinila", "email": "personal@logarithmus.dev", "date": "2022-07-17T01:18:53Z"}, "committer": {"name": "Artur Sinila", "email": "personal@logarithmus.dev", "date": "2022-07-17T01:18:53Z"}, "message": "feat: support negative const generic parameters\n\n* feat: support `bool` & `char` const generics", "tree": {"sha": "88dcae54498d95459539c64d404cc807bf73156f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88dcae54498d95459539c64d404cc807bf73156f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRdoiNI+SeWALw+khR3DmnWkHNcYQUCYtNjfQAKCRB3DmnWkHNc\nYbciAPsEIWg/tBT9crYftilQ4g3NZ7o4Cjebc5OTugGTQBOebQD/WwSIRnv7dOwB\nxXJmOtitlkOT+WP+ivDihhoSmsPorAg=\n=FHDQ\n-----END PGP SIGNATURE-----", "payload": "tree 88dcae54498d95459539c64d404cc807bf73156f\nparent b9b42e867066288f2cd1fc835c77a31e27439496\nauthor Artur Sinila <personal@logarithmus.dev> 1658020733 +0300\ncommitter Artur Sinila <personal@logarithmus.dev> 1658020733 +0300\n\nfeat: support negative const generic parameters\n\n* feat: support `bool` & `char` const generics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "html_url": "https://github.com/rust-lang/rust/commit/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/comments", "author": {"login": "Logarithmus", "id": 29541480, "node_id": "MDQ6VXNlcjI5NTQxNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/29541480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Logarithmus", "html_url": "https://github.com/Logarithmus", "followers_url": "https://api.github.com/users/Logarithmus/followers", "following_url": "https://api.github.com/users/Logarithmus/following{/other_user}", "gists_url": "https://api.github.com/users/Logarithmus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Logarithmus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Logarithmus/subscriptions", "organizations_url": "https://api.github.com/users/Logarithmus/orgs", "repos_url": "https://api.github.com/users/Logarithmus/repos", "events_url": "https://api.github.com/users/Logarithmus/events{/privacy}", "received_events_url": "https://api.github.com/users/Logarithmus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Logarithmus", "id": 29541480, "node_id": "MDQ6VXNlcjI5NTQxNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/29541480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Logarithmus", "html_url": "https://github.com/Logarithmus", "followers_url": "https://api.github.com/users/Logarithmus/followers", "following_url": "https://api.github.com/users/Logarithmus/following{/other_user}", "gists_url": "https://api.github.com/users/Logarithmus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Logarithmus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Logarithmus/subscriptions", "organizations_url": "https://api.github.com/users/Logarithmus/orgs", "repos_url": "https://api.github.com/users/Logarithmus/repos", "events_url": "https://api.github.com/users/Logarithmus/events{/privacy}", "received_events_url": "https://api.github.com/users/Logarithmus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b42e867066288f2cd1fc835c77a31e27439496", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b42e867066288f2cd1fc835c77a31e27439496", "html_url": "https://github.com/rust-lang/rust/commit/b9b42e867066288f2cd1fc835c77a31e27439496"}], "stats": {"total": 277, "additions": 152, "deletions": 125}, "files": [{"sha": "5c4e7bc33865d434f5770eb85509974771dc30ff", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -238,7 +238,7 @@ pub struct Mark {\n }\n \n /// The body of an item (function, const etc.).\n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Default, Eq, PartialEq)]\n pub struct Body {\n     pub exprs: Arena<Expr>,\n     pub pats: Arena<Pat>,"}, {"sha": "37a0940a3f88ca56589cae9e372c487561024375", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -1,7 +1,7 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{mem, sync::Arc};\n+use std::{collections::HashMap, mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n@@ -10,8 +10,6 @@ use hir_expand::{\n     name::{name, AsName, Name},\n     ExpandError, HirFileId, InFile,\n };\n-use la_arena::Arena;\n-use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{\n@@ -28,8 +26,8 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n     expr::{\n-        dummy_expr_id, Array, BindingAnnotation, Expr, ExprId, FloatTypeWrapper, Label, LabelId,\n-        Literal, MatchArm, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n+        Array, BindingAnnotation, Expr, ExprId, FloatTypeWrapper, Label, LabelId, Literal,\n+        MatchArm, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     intern::Interned,\n     item_scope::BuiltinShadowMode,\n@@ -82,24 +80,8 @@ pub(super) fn lower(\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n-    ExprCollector {\n-        db,\n-        source_map: BodySourceMap::default(),\n-        body: Body {\n-            exprs: Arena::default(),\n-            pats: Arena::default(),\n-            labels: Arena::default(),\n-            params: Vec::new(),\n-            body_expr: dummy_expr_id(),\n-            block_scopes: Vec::new(),\n-            _c: Count::new(),\n-            or_pats: Default::default(),\n-        },\n-        expander,\n-        name_to_pat_grouping: Default::default(),\n-        is_lowering_inside_or_pat: false,\n-    }\n-    .collect(params, body)\n+    let collector = ExprCollector::new(db, expander);\n+    collector.collect(params, body)\n }\n \n struct ExprCollector<'a> {\n@@ -112,7 +94,18 @@ struct ExprCollector<'a> {\n     is_lowering_inside_or_pat: bool,\n }\n \n-impl ExprCollector<'_> {\n+impl<'a> ExprCollector<'a> {\n+    pub(crate) fn new(db: &'a dyn DefDatabase, expander: Expander) -> Self {\n+        Self {\n+            db,\n+            expander,\n+            body: Body::default(),\n+            source_map: BodySourceMap::default(),\n+            name_to_pat_grouping: HashMap::default(),\n+            is_lowering_inside_or_pat: false,\n+        }\n+    }\n+\n     fn collect(\n         mut self,\n         param_list: Option<ast::ParamList>,\n@@ -197,7 +190,8 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {\n-        self.maybe_collect_expr(expr).unwrap_or_else(|| self.missing_expr())\n+        let expr_id = self.maybe_collect_expr(expr).unwrap_or_else(|| self.missing_expr());\n+        expr_id\n     }\n \n     /// Returns `None` if and only if the expression is `#[cfg]`d out.\n@@ -689,7 +683,6 @@ impl ExprCollector<'_> {\n         };\n         let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n         let prev_local_module = mem::replace(&mut self.expander.module, module);\n-\n         let mut statements: Vec<_> =\n             block.statements().filter_map(|s| self.collect_stmt(s)).collect();\n         let tail = block.tail_expr().and_then(|e| self.maybe_collect_expr(e));"}, {"sha": "c25aa0bcafcc6c38522158b80aed9eab71b87f6f", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -13,7 +13,7 @@\n //! See also a neighboring `body` module.\n \n use hir_expand::name::Name;\n-use la_arena::{Idx, RawIdx};\n+use la_arena::Idx;\n \n use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n@@ -26,9 +26,6 @@ use crate::{\n pub use syntax::ast::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp};\n \n pub type ExprId = Idx<Expr>;\n-pub(crate) fn dummy_expr_id() -> ExprId {\n-    ExprId::from_raw(RawIdx::from(!0))\n-}\n \n pub type PatId = Idx<Pat>;\n "}, {"sha": "6a15b1c0854fa159d4e482b928097f8970a40ab0", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -1,6 +1,9 @@\n //! Transforms syntax into `Path` objects, ideally with accounting for hygiene\n \n-use crate::{intern::Interned, type_ref::ConstScalarOrPath};\n+use crate::{\n+    intern::Interned,\n+    type_ref::{ConstScalar, ConstScalarOrPath},\n+};\n \n use either::Either;\n use hir_expand::name::{name, AsName};\n@@ -181,7 +184,10 @@ pub(super) fn lower_generic_args(\n                 }\n             }\n             ast::GenericArg::ConstArg(arg) => {\n-                let arg = ConstScalarOrPath::from_expr_opt(arg.expr());\n+                let arg = arg.expr().map_or(\n+                    ConstScalarOrPath::Scalar(ConstScalar::Unknown),\n+                    ConstScalarOrPath::from_expr,\n+                );\n                 args.push(GenericArg::Const(arg))\n             }\n         }"}, {"sha": "1916a6b3c5e272d733e0f8d09f2efe3018f697a4", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -5,10 +5,15 @@ use hir_expand::{\n     name::{AsName, Name},\n     AstId, InFile,\n };\n-use std::{convert::TryInto, fmt::Write};\n use syntax::ast::{self, HasName};\n \n-use crate::{body::LowerCtx, intern::Interned, path::Path};\n+use crate::{\n+    body::LowerCtx,\n+    builtin_type::{BuiltinInt, BuiltinType, BuiltinUint},\n+    expr::Literal,\n+    intern::Interned,\n+    path::Path,\n+};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Mutability {\n@@ -177,7 +182,10 @@ impl TypeRef {\n                 // `hir_def::body::lower` to lower this into an `Expr` and then evaluate it at the\n                 // `hir_ty` level, which would allow knowing the type of:\n                 // let v: [u8; 2 + 2] = [0u8; 4];\n-                let len = ConstScalarOrPath::from_expr_opt(inner.expr());\n+                let len = inner.expr().map_or(\n+                    ConstScalarOrPath::Scalar(ConstScalar::Unknown),\n+                    ConstScalarOrPath::from_expr,\n+                );\n \n                 TypeRef::Array(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())), len)\n             }\n@@ -386,39 +394,41 @@ impl std::fmt::Display for ConstScalarOrPath {\n }\n \n impl ConstScalarOrPath {\n-    pub(crate) fn from_expr_opt(expr: Option<ast::Expr>) -> Self {\n-        match expr {\n-            Some(x) => Self::from_expr(x),\n-            None => Self::Scalar(ConstScalar::Unknown),\n-        }\n-    }\n-\n     // FIXME: as per the comments on `TypeRef::Array`, this evaluation should not happen at this\n     // parse stage.\n-    fn from_expr(expr: ast::Expr) -> Self {\n+    pub(crate) fn from_expr(expr: ast::Expr) -> Self {\n         match expr {\n             ast::Expr::PathExpr(p) => {\n                 match p.path().and_then(|x| x.segment()).and_then(|x| x.name_ref()) {\n                     Some(x) => Self::Path(x.as_name()),\n                     None => Self::Scalar(ConstScalar::Unknown),\n                 }\n             }\n-            ast::Expr::Literal(lit) => {\n-                let lkind = lit.kind();\n-                match lkind {\n-                    ast::LiteralKind::IntNumber(num)\n-                        if num.suffix() == None || num.suffix() == Some(\"usize\") =>\n-                    {\n-                        Self::Scalar(\n-                            num.value()\n-                                .and_then(|v| v.try_into().ok())\n-                                .map(ConstScalar::Usize)\n-                                .unwrap_or(ConstScalar::Unknown),\n-                        )\n+            ast::Expr::PrefixExpr(prefix_expr) => match prefix_expr.op_kind() {\n+                Some(ast::UnaryOp::Neg) => {\n+                    let unsigned = prefix_expr\n+                        .expr()\n+                        .map_or(Self::Scalar(ConstScalar::Unknown), Self::from_expr);\n+                    // Add sign\n+                    match unsigned {\n+                        Self::Scalar(ConstScalar::UInt(num)) => {\n+                            Self::Scalar(ConstScalar::Int(-(num as i128)))\n+                        }\n+                        other => other,\n                     }\n-                    _ => Self::Scalar(ConstScalar::Unknown),\n                 }\n-            }\n+                _ => prefix_expr.expr().map_or(Self::Scalar(ConstScalar::Unknown), Self::from_expr),\n+            },\n+            ast::Expr::Literal(literal) => Self::Scalar(match literal.kind() {\n+                ast::LiteralKind::IntNumber(num) => {\n+                    num.value().map(ConstScalar::UInt).unwrap_or(ConstScalar::Unknown)\n+                }\n+                ast::LiteralKind::Char(c) => {\n+                    c.value().map(ConstScalar::Char).unwrap_or(ConstScalar::Unknown)\n+                }\n+                ast::LiteralKind::Bool(f) => ConstScalar::Bool(f),\n+                _ => ConstScalar::Unknown,\n+            }),\n             _ => Self::Scalar(ConstScalar::Unknown),\n         }\n     }\n@@ -427,9 +437,10 @@ impl ConstScalarOrPath {\n /// A concrete constant value\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ConstScalar {\n-    // for now, we only support the trivial case of constant evaluating the length of an array\n-    // Note that this is u64 because the target usize may be bigger than our usize\n-    Usize(u64),\n+    Int(i128),\n+    UInt(u128),\n+    Bool(bool),\n+    Char(char),\n \n     /// Case of an unknown value that rustc might know but we don't\n     // FIXME: this is a hack to get around chalk not being able to represent unevaluatable\n@@ -439,21 +450,37 @@ pub enum ConstScalar {\n     Unknown,\n }\n \n-impl std::fmt::Display for ConstScalar {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n+impl ConstScalar {\n+    pub fn builtin_type(&self) -> BuiltinType {\n         match self {\n-            ConstScalar::Usize(us) => us.fmt(f),\n-            ConstScalar::Unknown => f.write_char('_'),\n+            ConstScalar::UInt(_) | ConstScalar::Unknown => BuiltinType::Uint(BuiltinUint::U128),\n+            ConstScalar::Int(_) => BuiltinType::Int(BuiltinInt::I128),\n+            ConstScalar::Char(_) => BuiltinType::Char,\n+            ConstScalar::Bool(_) => BuiltinType::Bool,\n         }\n     }\n }\n \n-impl ConstScalar {\n-    /// Gets a target usize out of the ConstScalar\n-    pub fn as_usize(&self) -> Option<u64> {\n+impl From<Literal> for ConstScalar {\n+    fn from(literal: Literal) -> Self {\n+        match literal {\n+            Literal::Char(c) => Self::Char(c),\n+            Literal::Bool(flag) => Self::Bool(flag),\n+            Literal::Int(num, _) => Self::Int(num),\n+            Literal::Uint(num, _) => Self::UInt(num),\n+            _ => Self::Unknown,\n+        }\n+    }\n+}\n+\n+impl std::fmt::Display for ConstScalar {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n         match self {\n-            &ConstScalar::Usize(us) => Some(us),\n-            _ => None,\n+            ConstScalar::Int(num) => num.fmt(f),\n+            ConstScalar::UInt(num) => num.fmt(f),\n+            ConstScalar::Bool(flag) => flag.fmt(f),\n+            ConstScalar::Char(c) => write!(f, \"'{c}'\"),\n+            ConstScalar::Unknown => f.write_str(\"{unknown}\"),\n         }\n     }\n }"}, {"sha": "61183be04f5ef9a80b068afcb3bec95a17c90e72", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -347,17 +347,6 @@ pub fn eval_const(\n     }\n }\n \n-pub fn eval_usize(expr: Idx<Expr>, mut ctx: ConstEvalCtx<'_>) -> Option<u64> {\n-    if let Ok(ce) = eval_const(expr, &mut ctx) {\n-        match ce {\n-            ComputedExpr::Literal(Literal::Int(x, _)) => return x.try_into().ok(),\n-            ComputedExpr::Literal(Literal::Uint(x, _)) => return x.try_into().ok(),\n-            _ => {}\n-        }\n-    }\n-    None\n-}\n-\n pub(crate) fn path_to_const(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n@@ -406,19 +395,24 @@ pub fn unknown_const_as_generic(ty: Ty) -> GenericArg {\n }\n \n /// Interns a constant scalar with the given type\n-pub fn intern_scalar_const(value: ConstScalar, ty: Ty) -> Const {\n+pub fn intern_const_scalar_with_type(value: ConstScalar, ty: Ty) -> Const {\n     ConstData { ty, value: ConstValue::Concrete(chalk_ir::ConcreteConst { interned: value }) }\n         .intern(Interner)\n }\n \n /// Interns a possibly-unknown target usize\n-pub fn usize_const(value: Option<u64>) -> Const {\n-    intern_scalar_const(\n-        value.map(ConstScalar::Usize).unwrap_or(ConstScalar::Unknown),\n+pub fn usize_const(value: Option<u128>) -> Const {\n+    intern_const_scalar_with_type(\n+        value.map(ConstScalar::UInt).unwrap_or(ConstScalar::Unknown),\n         TyBuilder::usize(),\n     )\n }\n \n+/// Interns a constant scalar with the default type\n+pub fn intern_const_scalar(value: ConstScalar) -> Const {\n+    intern_const_scalar_with_type(value, TyBuilder::builtin(value.builtin_type()))\n+}\n+\n pub(crate) fn const_eval_recover(\n     _: &dyn HirDatabase,\n     _: &[String],\n@@ -463,15 +457,20 @@ pub(crate) fn eval_to_const<'a>(\n         }\n     }\n     let body = ctx.body.clone();\n-    let ctx = ConstEvalCtx {\n+    let mut ctx = ConstEvalCtx {\n         db: ctx.db,\n         owner: ctx.owner,\n         exprs: &body.exprs,\n         pats: &body.pats,\n         local_data: HashMap::default(),\n         infer: &ctx.result,\n     };\n-    usize_const(eval_usize(expr, ctx))\n+    let computed_expr = eval_const(expr, &mut ctx);\n+    let const_scalar = match computed_expr {\n+        Ok(ComputedExpr::Literal(literal)) => literal.into(),\n+        _ => ConstScalar::Unknown,\n+    };\n+    intern_const_scalar_with_type(const_scalar, TyBuilder::usize())\n }\n \n #[cfg(test)]"}, {"sha": "c7c8deaaeed3b6e70b78a654b7a73ff72d009463", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -605,10 +605,10 @@ impl<'a> InferenceContext<'a> {\n         let data = c.data(Interner);\n         match data.value {\n             ConstValue::Concrete(cc) => match cc.interned {\n-                hir_def::type_ref::ConstScalar::Usize(_) => c,\n                 hir_def::type_ref::ConstScalar::Unknown => {\n                     self.table.new_const_var(data.ty.clone())\n                 }\n+                _ => c,\n             },\n             _ => c,\n         }"}, {"sha": "2f3346707209527bc535f097d3501523508e6ef2", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -729,7 +729,7 @@ impl<'a> InferenceContext<'a> {\n                             let cur_elem_ty = self.infer_expr_inner(expr, &expected);\n                             coerce.coerce(self, Some(expr), &cur_elem_ty);\n                         }\n-                        consteval::usize_const(Some(items.len() as u64))\n+                        consteval::usize_const(Some(items.len() as u128))\n                     }\n                     &Array::Repeat { initializer, repeat } => {\n                         self.infer_expr_coerce(initializer, &Expectation::has_type(elem_ty));\n@@ -766,7 +766,7 @@ impl<'a> InferenceContext<'a> {\n                 Literal::ByteString(bs) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(Interner);\n \n-                    let len = consteval::usize_const(Some(bs.len() as u64));\n+                    let len = consteval::usize_const(Some(bs.len() as u128));\n \n                     let array_type = TyKind::Array(byte_type, len).intern(Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(Interner)"}, {"sha": "327e463eec5143b75cfc2acbbb210a9c88333ae6", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -11,6 +11,7 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n+    consteval::intern_const_scalar,\n     infer::{BindingMode, Expectation, InferenceContext, TypeMismatch},\n     lower::lower_to_chalk_mutability,\n     static_lifetime, ConcreteConst, ConstValue, Interner, Substitution, Ty, TyBuilder, TyExt,\n@@ -262,13 +263,18 @@ impl<'a> InferenceContext<'a> {\n                 if let &Some(slice_pat_id) = slice {\n                     let rest_pat_ty = match expected.kind(Interner) {\n                         TyKind::Array(_, length) => {\n-                            let length = match length.data(Interner).value {\n+                            let len = match length.data(Interner).value {\n                                 ConstValue::Concrete(ConcreteConst {\n-                                    interned: ConstScalar::Usize(length),\n-                                }) => length.checked_sub((prefix.len() + suffix.len()) as u64),\n+                                    interned: ConstScalar::UInt(len),\n+                                }) => len.checked_sub((prefix.len() + suffix.len()) as u128),\n                                 _ => None,\n                             };\n-                            TyKind::Array(elem_ty.clone(), crate::consteval::usize_const(length))\n+                            TyKind::Array(\n+                                elem_ty.clone(),\n+                                intern_const_scalar(\n+                                    len.map_or(ConstScalar::Unknown, |len| ConstScalar::UInt(len)),\n+                                ),\n+                            )\n                         }\n                         _ => TyKind::Slice(elem_ty.clone()),\n                     }"}, {"sha": "479521e8ba2a882917e4d5ebb0cce830f036970c", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -257,12 +257,7 @@ impl chalk_ir::interner::Interner for Interner {\n         c1: &Self::InternedConcreteConst,\n         c2: &Self::InternedConcreteConst,\n     ) -> bool {\n-        match (c1, c2) {\n-            (&ConstScalar::Usize(a), &ConstScalar::Usize(b)) => a == b,\n-            // we were previously assuming this to be true, I'm not whether true or false on\n-            // unknown values is safer.\n-            (_, _) => true,\n-        }\n+        c1 == c2\n     }\n \n     fn intern_generic_arg("}, {"sha": "f62972b1eb84c2c3fb9ea2af29a8ed8c65c1d5d6", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -44,7 +44,9 @@ use syntax::{ast, SmolStr};\n \n use crate::{\n     all_super_traits,\n-    consteval::{intern_scalar_const, path_to_const, unknown_const, unknown_const_as_generic},\n+    consteval::{\n+        intern_const_scalar_with_type, path_to_const, unknown_const, unknown_const_as_generic,\n+    },\n     db::HirDatabase,\n     make_binders,\n     mapping::ToChalk,\n@@ -1742,7 +1744,7 @@ pub(crate) fn const_or_path_to_chalk(\n     debruijn: DebruijnIndex,\n ) -> Const {\n     match value {\n-        ConstScalarOrPath::Scalar(s) => intern_scalar_const(s.clone(), expected_ty),\n+        ConstScalarOrPath::Scalar(s) => intern_const_scalar_with_type(s.clone(), expected_ty),\n         ConstScalarOrPath::Path(n) => {\n             let path = ModPath::from_segments(PathKind::Plain, Some(n.clone()));\n             path_to_const(db, resolver, &path, mode, args, debruijn)"}, {"sha": "4d4795e9334976ddfeb86b425964b5bbf34856eb", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -3011,14 +3011,14 @@ struct TS(usize);\n fn main() {\n     let x;\n     [x,] = &[1,];\n-  //^^^^expected &[i32; 1], got [{unknown}; _]\n+  //^^^^expected &[i32; 1], got [{unknown}; {unknown}]\n \n     // FIXME we only want the outermost error, but this matches the current\n     // behavior of slice patterns\n     let x;\n     [(x,),] = &[(1,),];\n   // ^^^^expected {unknown}, got ({unknown},)\n-  //^^^^^^^expected &[(i32,); 1], got [{unknown}; _]\n+  //^^^^^^^expected &[(i32,); 1], got [{unknown}; {unknown}]\n \n     let x;\n     ((x,),) = &((1,),);"}, {"sha": "afb4facb0d11136fcfba4d0cd213631413dd4bfd", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -328,7 +328,7 @@ fn div(x: i32, y: i32) -> Option<i32> {\n             }\n             fn main() {\n                 run(f()) // FIXME: remove this error\n-                  //^^^ error: expected Rate<5>, found Rate<_>\n+                  //^^^ error: expected Rate<5>, found Rate<{unknown}>\n             }\n \"#,\n         );"}, {"sha": "592fff322e53100d107f685fe9f72487f4f2b651", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -173,27 +173,17 @@ pub(crate) fn hover_for_definition(\n         Definition::BuiltinType(_) => Some(FamousDefs(sema, sema.scope(node)?.krate())),\n         _ => None,\n     };\n-    if let Some(markup) = render::definition(sema.db, definition, famous_defs.as_ref(), config) {\n-        let mut res = HoverResult::default();\n-        res.markup = render::process_markup(sema.db, definition, &markup, config);\n-        if let Some(action) = show_implementations_action(sema.db, definition) {\n-            res.actions.push(action);\n+    render::definition(sema.db, definition, famous_defs.as_ref(), config).map(|markup| {\n+        HoverResult {\n+            markup: render::process_markup(sema.db, definition, &markup, config),\n+            actions: show_implementations_action(sema.db, definition)\n+                .into_iter()\n+                .chain(show_fn_references_action(sema.db, definition))\n+                .chain(runnable_action(sema, definition, file_id))\n+                .chain(goto_type_action_for_def(sema.db, definition))\n+                .collect(),\n         }\n-\n-        if let Some(action) = show_fn_references_action(sema.db, definition) {\n-            res.actions.push(action);\n-        }\n-\n-        if let Some(action) = runnable_action(sema, definition, file_id) {\n-            res.actions.push(action);\n-        }\n-\n-        if let Some(action) = goto_type_action_for_def(sema.db, definition) {\n-            res.actions.push(action);\n-        }\n-        return Some(res);\n-    }\n-    None\n+    })\n }\n \n fn hover_ranged("}, {"sha": "0e218806f70aed6eccc42690e97ef54f2151c286", "filename": "lib/la-arena/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/lib%2Fla-arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c/lib%2Fla-arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Flib.rs?ref=a96f0aa7cdec0d5c1450fe7661dfda235bd5b94c", "patch": "@@ -17,6 +17,12 @@ pub use map::ArenaMap;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct RawIdx(u32);\n \n+impl Default for RawIdx {\n+    fn default() -> Self {\n+        Self(u32::MAX)\n+    }\n+}\n+\n impl From<RawIdx> for u32 {\n     fn from(raw: RawIdx) -> u32 {\n         raw.0\n@@ -47,6 +53,12 @@ pub struct Idx<T> {\n     _ty: PhantomData<fn() -> T>,\n }\n \n+impl<T> Default for Idx<T> {\n+    fn default() -> Self {\n+        Self::from_raw(RawIdx::default())\n+    }\n+}\n+\n impl<T> Clone for Idx<T> {\n     fn clone(&self) -> Self {\n         *self"}]}