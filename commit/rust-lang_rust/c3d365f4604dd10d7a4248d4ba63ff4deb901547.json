{"sha": "c3d365f4604dd10d7a4248d4ba63ff4deb901547", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZDM2NWY0NjA0ZGQxMGQ3YTQyNDhkNGJhNjNmZjRkZWI5MDE1NDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-08T23:16:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-08T23:16:01Z"}, "message": "Rollup merge of #58260 - taiki-e:librustc_borrowck-2018, r=Centril\n\nlibrustc_borrowck => 2018\n\nTransitions `librustc_borrowck` to Rust 2018; cc #58099\n\nr? @Centril", "tree": {"sha": "44c224334075a7afd5ae4c32205216c6d7a05e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c224334075a7afd5ae4c32205216c6d7a05e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3d365f4604dd10d7a4248d4ba63ff4deb901547", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcXg2xCRBK7hj4Ov3rIwAAdHIIAF25fB7B/e0mRKGYG0bqRcO3\nxJciGnvajqUxYbXgmsullIfvJthkvl0KQn1HGRKH7/J7YJ+rTWXeCkhDiB/9a0O5\nmtnonYMP8LVhpmjBk7rK4c8V5JrjTOSovrZ4MpuChQvr39dw+VNW+Tl9keplQ9Rx\n4mQ19/n05lyfCvKNnjtCACzOc5SSAzXz+5or6qdjOrmeGppvnOeo/Ezg5N2Wg26q\n6ghpe9x6WqEfzF9jzLeehSxYRJzMwgKIQ5ydQKsQ4l7VXwRDnffEzig3sRaPFu+K\ncG9N32zf+NG3juOTYY0TE9NJaUFsqlQ1supHWcfoz6b2h5PUA5DuBo2nzf1PALo=\n=7g4k\n-----END PGP SIGNATURE-----\n", "payload": "tree 44c224334075a7afd5ae4c32205216c6d7a05e17\nparent d7a4dd10741d1e6e3526adb59d740e6a6faea7d9\nparent a2c4a36c6132ad6e462992e1c8ab9c2c22eb5e0f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1549667761 +0100\ncommitter GitHub <noreply@github.com> 1549667761 +0100\n\nRollup merge of #58260 - taiki-e:librustc_borrowck-2018, r=Centril\n\nlibrustc_borrowck => 2018\n\nTransitions `librustc_borrowck` to Rust 2018; cc #58099\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d365f4604dd10d7a4248d4ba63ff4deb901547", "html_url": "https://github.com/rust-lang/rust/commit/c3d365f4604dd10d7a4248d4ba63ff4deb901547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3d365f4604dd10d7a4248d4ba63ff4deb901547/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a4dd10741d1e6e3526adb59d740e6a6faea7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a4dd10741d1e6e3526adb59d740e6a6faea7d9", "html_url": "https://github.com/rust-lang/rust/commit/d7a4dd10741d1e6e3526adb59d740e6a6faea7d9"}, {"sha": "a2c4a36c6132ad6e462992e1c8ab9c2c22eb5e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2c4a36c6132ad6e462992e1c8ab9c2c22eb5e0f", "html_url": "https://github.com/rust-lang/rust/commit/a2c4a36c6132ad6e462992e1c8ab9c2c22eb5e0f"}], "stats": {"total": 140, "additions": 71, "deletions": 69}, "files": [{"sha": "f293739dec727970f98cce2e10aede9345f4e356", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_borrowck\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_borrowck\"\n@@ -13,8 +14,10 @@ test = false\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-graphviz = { path = \"../libgraphviz\" }\n+# for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n+# refers to the borrowck-specific graphviz adapter traits.\n+dot = { path = \"../libgraphviz\", package = \"graphviz\" }\n rustc = { path = \"../librustc\" }\n rustc_mir = { path = \"../librustc_mir\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "f675c8d38a6768d89d312a8d0c3eb56945067625", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -7,10 +7,10 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n \n-use self::UseError::*;\n+use UseError::*;\n \n-use borrowck::*;\n-use borrowck::InteriorKind::{InteriorElement, InteriorField};\n+use crate::borrowck::*;\n+use crate::borrowck::InteriorKind::{InteriorElement, InteriorField};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::expr_use_visitor::MutateMode;\n use rustc::middle::mem_categorization as mc;\n@@ -22,6 +22,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n+use log::debug;\n \n use std::rc::Rc;\n \n@@ -101,7 +102,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n \n     fn matched_pat(&mut self,\n                    _matched_pat: &hir::Pat,\n-                   _cmt: &mc::cmt_,\n+                   _cmt: &mc::cmt_<'_>,\n                    _mode: euv::MatchMode) { }\n \n     fn consume_pat(&mut self,\n@@ -910,7 +911,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n     pub fn report_illegal_mutation(&self,\n                                    span: Span,\n                                    loan_path: &LoanPath<'tcx>,\n-                                   loan: &Loan) {\n+                                   loan: &Loan<'_>) {\n         self.bccx.cannot_assign_to_borrowed(\n             span, loan.span, &self.bccx.loan_path_to_string(loan_path), Origin::Ast)\n             .emit();"}, {"sha": "6b050fd9ba2303236c566c9e21f6bff5ab376ea0", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -1,9 +1,9 @@\n //! Computes moves.\n \n-use borrowck::*;\n-use borrowck::gather_loans::move_error::MovePlace;\n-use borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n-use borrowck::move_data::*;\n+use crate::borrowck::*;\n+use crate::borrowck::gather_loans::move_error::MovePlace;\n+use crate::borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n+use crate::borrowck::move_data::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -15,6 +15,7 @@ use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir::*;\n use rustc::hir::Node;\n+use log::debug;\n \n struct GatherMoveInfo<'c, 'tcx: 'c> {\n     id: hir::ItemLocalId,"}, {"sha": "11597455bca8faf1c79908d4bef3fb7f59840e53", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -1,7 +1,7 @@\n //! This module implements the check that the lifetime of a borrow\n //! does not exceed the lifetime of the value being borrowed.\n \n-use borrowck::*;\n+use crate::borrowck::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -10,6 +10,7 @@ use rustc::ty;\n \n use syntax::ast;\n use syntax_pos::Span;\n+use log::debug;\n \n type R = Result<(),()>;\n "}, {"sha": "c21a43bc68333637fe6368b75ace205aa2455a11", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -6,8 +6,8 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use borrowck::*;\n-use borrowck::move_data::MoveData;\n+use crate::borrowck::*;\n+use crate::borrowck::move_data::MoveData;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -17,8 +17,9 @@ use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n+use log::debug;\n \n-use self::restrictions::RestrictionResult;\n+use restrictions::RestrictionResult;\n \n mod lifetime;\n mod restrictions;\n@@ -427,7 +428,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         // }\n     }\n \n-    pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath) {\n+    pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath<'_>) {\n         //! For mutable loans of content whose mutability derives\n         //! from a local variable, mark the mutability decl as necessary.\n "}, {"sha": "622dd8e891ac71b8cb6e77ea5f9ad607fbc9a11b", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -1,4 +1,4 @@\n-use borrowck::BorrowckCtxt;\n+use crate::borrowck::BorrowckCtxt;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::NoteClosureEnv;\n@@ -8,7 +8,8 @@ use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use syntax::ast;\n use syntax_pos;\n use errors::{DiagnosticBuilder, Applicability};\n-use borrowck::gather_loans::gather_moves::PatternSource;\n+use crate::borrowck::gather_loans::gather_moves::PatternSource;\n+use log::debug;\n \n pub struct MoveErrorCollector<'tcx> {\n     errors: Vec<MoveError<'tcx>>\n@@ -167,10 +168,10 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn note_move_destination(mut err: DiagnosticBuilder,\n+fn note_move_destination(mut err: DiagnosticBuilder<'_>,\n                          move_to_span: syntax_pos::Span,\n                          pat_name: ast::Name,\n-                         is_first_note: bool) -> DiagnosticBuilder {\n+                         is_first_note: bool) -> DiagnosticBuilder<'_> {\n     if is_first_note {\n         err.span_label(\n             move_to_span,"}, {"sha": "9f4c05a6b255f2a5c474d556b788943ac55e6751", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -1,13 +1,14 @@\n //! Computes the restrictions that result from a borrow.\n \n-use borrowck::*;\n+use crate::borrowck::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty;\n use syntax_pos::Span;\n+use log::debug;\n \n-use borrowck::ToInteriorKind;\n+use crate::borrowck::ToInteriorKind;\n \n use std::rc::Rc;\n "}, {"sha": "4ced72cd279b249a8279c33ddea51944038c4c27", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -2,13 +2,13 @@\n \n #![allow(non_camel_case_types)]\n \n-pub use self::LoanPathKind::*;\n-pub use self::LoanPathElem::*;\n-pub use self::bckerr_code::*;\n-pub use self::AliasableViolationKind::*;\n-pub use self::MovedValueUseKind::*;\n+pub use LoanPathKind::*;\n+pub use LoanPathElem::*;\n+pub use bckerr_code::*;\n+pub use AliasableViolationKind::*;\n+pub use MovedValueUseKind::*;\n \n-use self::InteriorKind::*;\n+use InteriorKind::*;\n \n use rustc::hir::HirId;\n use rustc::hir::Node;\n@@ -37,10 +37,11 @@ use std::hash::{Hash, Hasher};\n use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use log::debug;\n \n use rustc::hir;\n \n-use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n+use crate::dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n \n pub mod check_loans;\n \n@@ -61,7 +62,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     });\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         borrowck,\n         ..*providers\n@@ -398,7 +399,7 @@ pub enum LoanPathElem<'tcx> {\n }\n \n fn closure_to_block(closure_id: LocalDefId,\n-                    tcx: TyCtxt) -> ast::NodeId {\n+                    tcx: TyCtxt<'_, '_, '_>) -> ast::NodeId {\n     let closure_id = tcx.hir().local_def_id_to_node_id(closure_id);\n     match tcx.hir().get(closure_id) {\n         Node::Expr(expr) => match expr.node {\n@@ -1214,8 +1215,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn note_immutability_blame(&self,\n-                               db: &mut DiagnosticBuilder,\n-                               blame: Option<ImmutabilityBlame>,\n+                               db: &mut DiagnosticBuilder<'_>,\n+                               blame: Option<ImmutabilityBlame<'_>>,\n                                error_node_id: ast::NodeId) {\n         match blame {\n             None => {}\n@@ -1271,7 +1272,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n      // binding: either to make the binding mutable (if its type is\n      // not a mutable reference) or to avoid borrowing altogether\n     fn note_immutable_local(&self,\n-                            db: &mut DiagnosticBuilder,\n+                            db: &mut DiagnosticBuilder<'_>,\n                             borrowed_node_id: ast::NodeId,\n                             binding_node_id: ast::NodeId) {\n         let let_span = self.tcx.hir().span(binding_node_id);\n@@ -1349,7 +1350,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder, err: &BckError<'a, 'tcx>,\n+    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder<'_>, err: &BckError<'a, 'tcx>,\n                                     error_span: &Span) {\n         match err.cmt.note {\n             mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n@@ -1487,7 +1488,7 @@ impl DataFlowOperator for LoanDataFlowOperator {\n }\n \n impl<'tcx> fmt::Debug for InteriorKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             InteriorField(mc::FieldIndex(_, info)) => write!(f, \"{}\", info),\n             InteriorElement => write!(f, \"[]\"),\n@@ -1496,7 +1497,7 @@ impl<'tcx> fmt::Debug for InteriorKind {\n }\n \n impl<'tcx> fmt::Debug for Loan<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"Loan_{}({:?}, {:?}, {:?}-{:?}, {:?})\",\n                self.index,\n                self.loan_path,\n@@ -1508,7 +1509,7 @@ impl<'tcx> fmt::Debug for Loan<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.kind {\n             LpVar(id) => {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir().node_to_string(id)))\n@@ -1543,7 +1544,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n }\n \n impl<'tcx> fmt::Display for LoanPath<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.kind {\n             LpVar(id) => {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir().node_to_user_string(id)))"}, {"sha": "a206c37e97b091687420410ee26c24514ae1105a", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -1,11 +1,11 @@\n //! Data structures used for tracking moves. Please see the extensive\n //! comments in the section \"Moves and initialization\" in `README.md`.\n \n-pub use self::MoveKind::*;\n+pub use MoveKind::*;\n \n-use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n+use crate::dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n \n-use borrowck::*;\n+use crate::borrowck::*;\n use rustc::cfg;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n@@ -15,6 +15,7 @@ use std::rc::Rc;\n use std::usize;\n use syntax_pos::Span;\n use rustc::hir;\n+use log::debug;\n \n #[derive(Default)]\n pub struct MoveData<'tcx> {\n@@ -145,7 +146,7 @@ pub struct AssignDataFlowOperator;\n \n pub type AssignDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, AssignDataFlowOperator>;\n \n-fn loan_path_is_precise(loan_path: &LoanPath) -> bool {\n+fn loan_path_is_precise(loan_path: &LoanPath<'_>) -> bool {\n     match loan_path.kind {\n         LpVar(_) | LpUpvar(_) => {\n             true\n@@ -428,8 +429,8 @@ impl<'a, 'tcx> MoveData<'tcx> {\n     /// killed by scoping. See `README.md` for more details.\n     fn add_gen_kills(&self,\n                      bccx: &BorrowckCtxt<'a, 'tcx>,\n-                     dfcx_moves: &mut MoveDataFlow,\n-                     dfcx_assign: &mut AssignDataFlow) {\n+                     dfcx_moves: &mut MoveDataFlow<'_, '_>,\n+                     dfcx_assign: &mut AssignDataFlow<'_, '_>) {\n         for (i, the_move) in self.moves.borrow().iter().enumerate() {\n             dfcx_moves.add_gen(the_move.id, i);\n         }\n@@ -537,7 +538,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                   path: MovePathIndex,\n                   kill_id: hir::ItemLocalId,\n                   kill_kind: KillFrom,\n-                  dfcx_moves: &mut MoveDataFlow) {\n+                  dfcx_moves: &mut MoveDataFlow<'_, '_>) {\n         // We can only perform kills for paths that refer to a unique location,\n         // since otherwise we may kill a move from one location with an\n         // assignment referring to another location."}, {"sha": "60a9c18e95ee9bac025839de33c8a1a3e6e50618", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -7,7 +7,7 @@ use errors::Applicability;\n use std::slice;\n use syntax::ptr::P;\n \n-use borrowck::BorrowckCtxt;\n+use crate::borrowck::BorrowckCtxt;\n \n pub fn check<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, body: &'tcx hir::Body) {\n     let mut used_mut = bccx.used_mut_nodes.borrow().clone();"}, {"sha": "90f33ede62c21714c20b28fd74e8546fe3b9abae", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -10,6 +10,7 @@ use std::io;\n use std::mem;\n use std::usize;\n use syntax::print::pprust::PrintState;\n+use log::debug;\n \n use rustc_data_structures::graph::implementation::OUTGOING;\n \n@@ -80,7 +81,7 @@ pub trait DataFlowOperator : BitwiseOperator {\n     fn initial_value(&self) -> bool;\n }\n \n-struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O: 'a> {\n+struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O> {\n     dfcx: &'a mut DataFlowContext<'b, 'tcx, O>,\n     changed: bool\n }\n@@ -99,12 +100,12 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n }\n \n impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O> {\n-    fn nested(&self, state: &mut pprust::State, nested: pprust::Nested) -> io::Result<()> {\n+    fn nested(&self, state: &mut pprust::State<'_>, nested: pprust::Nested) -> io::Result<()> {\n         pprust::PpAnn::nested(self.tcx.hir(), state, nested)\n     }\n     fn pre(&self,\n-           ps: &mut pprust::State,\n-           node: pprust::AnnNode) -> io::Result<()> {\n+           ps: &mut pprust::State<'_>,\n+           node: pprust::AnnNode<'_>) -> io::Result<()> {\n         let id = match node {\n             pprust::AnnNode::Name(_) => return Ok(()),\n             pprust::AnnNode::Expr(expr) => expr.hir_id.local_id,"}, {"sha": "77056d4d3eb1516df86cf751ff23b998618f5ec9", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -2,16 +2,15 @@\n //! libgraphviz traits, specialized to attaching borrowck analysis\n //! data to rendered labels.\n \n-pub use self::Variant::*;\n+pub use Variant::*;\n \n pub use rustc::cfg::graphviz::{Node, Edge};\n use rustc::cfg::graphviz as cfg_dot;\n \n-use borrowck;\n-use borrowck::{BorrowckCtxt, LoanPath};\n-use dot;\n+use crate::borrowck::{self, BorrowckCtxt, LoanPath};\n+use crate::dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n+use log::debug;\n use rustc::cfg::CFGIndex;\n-use dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n use std::rc::Rc;\n \n #[derive(Debug, Copy, Clone)]\n@@ -53,7 +52,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n         sets\n     }\n \n-    fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node, v: Variant) -> String {\n+    fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node<'_>, v: Variant) -> String {\n         let cfgidx = n.0;\n         match v {\n             Loans   => self.dataflow_loans_for(e, cfgidx),\n@@ -89,7 +88,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n         let dfcx = &self.analysis_data.loans;\n         let loan_index_to_path = |loan_index| {\n             let all_loans = &self.analysis_data.all_loans;\n-            let l: &borrowck::Loan = &all_loans[loan_index];\n+            let l: &borrowck::Loan<'_> = &all_loans[loan_index];\n             l.loan_path()\n         };\n         self.build_set(e, cfgidx, dfcx, loan_index_to_path)"}, {"sha": "cf4669db87e5e9e4450793494a02ad5ef8c7bd5e", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d365f4604dd10d7a4248d4ba63ff4deb901547/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=c3d365f4604dd10d7a4248d4ba63ff4deb901547", "patch": "@@ -1,23 +1,14 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n+#![deny(rust_2018_idioms)]\n \n #![feature(nll)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use] extern crate log;\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_errors as errors;\n-extern crate rustc_data_structures;\n-\n-// for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n-// refers to the borrowck-specific graphviz adapter traits.\n-extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_mir;\n \n pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;"}]}