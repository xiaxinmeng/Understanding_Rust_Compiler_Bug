{"sha": "ccef802163ddc560a107371f256b1cbd82abeb00", "node_id": "C_kwDOAAsO6NoAKGNjZWY4MDIxNjNkZGM1NjBhMTA3MzcxZjI1NmIxY2JkODJhYmViMDA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T18:10:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:14:14Z"}, "message": "Add debuginfo test.", "tree": {"sha": "158e99b4dea9c47386ea31e258bbd676a65a691d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158e99b4dea9c47386ea31e258bbd676a65a691d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccef802163ddc560a107371f256b1cbd82abeb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccef802163ddc560a107371f256b1cbd82abeb00", "html_url": "https://github.com/rust-lang/rust/commit/ccef802163ddc560a107371f256b1cbd82abeb00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccef802163ddc560a107371f256b1cbd82abeb00/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de9aac4fbe87f98903ce332e8e2c99d18a414da", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de9aac4fbe87f98903ce332e8e2c99d18a414da", "html_url": "https://github.com/rust-lang/rust/commit/7de9aac4fbe87f98903ce332e8e2c99d18a414da"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "2371535b18cff45df3e26683e902e2dd53357e55", "filename": "tests/debuginfo/reference-debuginfo.rs", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/ccef802163ddc560a107371f256b1cbd82abeb00/tests%2Fdebuginfo%2Freference-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccef802163ddc560a107371f256b1cbd82abeb00/tests%2Fdebuginfo%2Freference-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Freference-debuginfo.rs?ref=ccef802163ddc560a107371f256b1cbd82abeb00", "patch": "@@ -0,0 +1,165 @@\n+// Copy of `borrowed-basic.rs` which enables the `ReferencePropagation` MIR pass.\n+// That pass replaces debuginfo for `a => _x` where `_x = &b` to be `a => &b`,\n+// and leaves codegen to create a ladder of allocations so as `*a == b`.\n+//\n+// compile-flags:-g -Zmir-enable-passes=+ReferencePropagation,-ConstDebugInfo\n+// min-lldb-version: 310\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print *bool_ref\n+// gdb-check:$1 = true\n+\n+// gdb-command:print *int_ref\n+// gdb-check:$2 = -1\n+\n+// gdb-command:print/d *char_ref\n+// gdb-check:$3 = 97\n+\n+// gdb-command:print *i8_ref\n+// gdbg-check:$4 = 68 'D'\n+// gdbr-check:$4 = 68\n+\n+// gdb-command:print *i16_ref\n+// gdb-check:$5 = -16\n+\n+// gdb-command:print *i32_ref\n+// gdb-check:$6 = -32\n+\n+// gdb-command:print *i64_ref\n+// gdb-check:$7 = -64\n+\n+// gdb-command:print *uint_ref\n+// gdb-check:$8 = 1\n+\n+// gdb-command:print *u8_ref\n+// gdbg-check:$9 = 100 'd'\n+// gdbr-check:$9 = 100\n+\n+// gdb-command:print *u16_ref\n+// gdb-check:$10 = 16\n+\n+// gdb-command:print *u32_ref\n+// gdb-check:$11 = 32\n+\n+// gdb-command:print *u64_ref\n+// gdb-check:$12 = 64\n+\n+// gdb-command:print *f32_ref\n+// gdb-check:$13 = 2.5\n+\n+// gdb-command:print *f64_ref\n+// gdb-check:$14 = 3.5\n+\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print *bool_ref\n+// lldbg-check:[...]$0 = true\n+// lldbr-check:(bool) *bool_ref = true\n+\n+// lldb-command:print *int_ref\n+// lldbg-check:[...]$1 = -1\n+// lldbr-check:(isize) *int_ref = -1\n+\n+// NOTE: only rust-enabled lldb supports 32bit chars\n+// lldbr-command:print *char_ref\n+// lldbr-check:(char) *char_ref = 'a'\n+\n+// lldb-command:print *i8_ref\n+// lldbg-check:[...]$2 = 'D'\n+// lldbr-check:(i8) *i8_ref = 68\n+\n+// lldb-command:print *i16_ref\n+// lldbg-check:[...]$3 = -16\n+// lldbr-check:(i16) *i16_ref = -16\n+\n+// lldb-command:print *i32_ref\n+// lldbg-check:[...]$4 = -32\n+// lldbr-check:(i32) *i32_ref = -32\n+\n+// lldb-command:print *i64_ref\n+// lldbg-check:[...]$5 = -64\n+// lldbr-check:(i64) *i64_ref = -64\n+\n+// lldb-command:print *uint_ref\n+// lldbg-check:[...]$6 = 1\n+// lldbr-check:(usize) *uint_ref = 1\n+\n+// lldb-command:print *u8_ref\n+// lldbg-check:[...]$7 = 'd'\n+// lldbr-check:(u8) *u8_ref = 100\n+\n+// lldb-command:print *u16_ref\n+// lldbg-check:[...]$8 = 16\n+// lldbr-check:(u16) *u16_ref = 16\n+\n+// lldb-command:print *u32_ref\n+// lldbg-check:[...]$9 = 32\n+// lldbr-check:(u32) *u32_ref = 32\n+\n+// lldb-command:print *u64_ref\n+// lldbg-check:[...]$10 = 64\n+// lldbr-check:(u64) *u64_ref = 64\n+\n+// lldb-command:print *f32_ref\n+// lldbg-check:[...]$11 = 2.5\n+// lldbr-check:(f32) *f32_ref = 2.5\n+\n+// lldb-command:print *f64_ref\n+// lldbg-check:[...]$12 = 3.5\n+// lldbr-check:(f64) *f64_ref = 3.5\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+fn main() {\n+    let bool_val: bool = true;\n+    let bool_ref: &bool = &bool_val;\n+\n+    let int_val: isize = -1;\n+    let int_ref: &isize = &int_val;\n+\n+    let char_val: char = 'a';\n+    let char_ref: &char = &char_val;\n+\n+    let i8_val: i8 = 68;\n+    let i8_ref: &i8 = &i8_val;\n+\n+    let i16_val: i16 = -16;\n+    let i16_ref: &i16 = &i16_val;\n+\n+    let i32_val: i32 = -32;\n+    let i32_ref: &i32 = &i32_val;\n+\n+    let i64_val: i64 = -64;\n+    let i64_ref: &i64 = &i64_val;\n+\n+    let uint_val: usize = 1;\n+    let uint_ref: &usize = &uint_val;\n+\n+    let u8_val: u8 = 100;\n+    let u8_ref: &u8 = &u8_val;\n+\n+    let u16_val: u16 = 16;\n+    let u16_ref: &u16 = &u16_val;\n+\n+    let u32_val: u32 = 32;\n+    let u32_ref: &u32 = &u32_val;\n+\n+    let u64_val: u64 = 64;\n+    let u64_ref: &u64 = &u64_val;\n+\n+    let f32_val: f32 = 2.5;\n+    let f32_ref: &f32 = &f32_val;\n+\n+    let f64_val: f64 = 3.5;\n+    let f64_ref: &f64 = &f64_val;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {()}"}]}