{"sha": "d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjJhZDVhZGMyMTY0ZTM0ZTU5YTdlOWU3ZThkYTJkZmJhN2ZmYjU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-24T10:19:58Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-24T11:13:15Z"}, "message": "Address some issues with multiline patterns in let statements", "tree": {"sha": "47c808713a466de490677005fa422f27a0260164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c808713a466de490677005fa422f27a0260164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "html_url": "https://github.com/rust-lang/rust/commit/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ff0d8730806332e05b34189d91c8504f71eccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ff0d8730806332e05b34189d91c8504f71eccc", "html_url": "https://github.com/rust-lang/rust/commit/58ff0d8730806332e05b34189d91c8504f71eccc"}], "stats": {"total": 224, "additions": 151, "deletions": 73}, "files": [{"sha": "16c46f6bef191f038d78363e9af724499808e7d5", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "patch": "@@ -1398,7 +1398,10 @@ pub fn rewrite_tuple<'a, R>(context: &RewriteContext,\n                              |item| item.span().lo,\n                              |item| item.span().hi,\n                              |item| {\n-                                 let inner_width = context.config.max_width - indent.width() - 1;\n+                                 let inner_width = try_opt!(context.config\n+                                                                   .max_width\n+                                                                   .checked_sub(indent.width() +\n+                                                                                1));\n                                  item.rewrite(context, inner_width, indent)\n                              },\n                              span.lo + BytePos(1), // Remove parens\n@@ -1522,10 +1525,15 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n                                            offset: Indent)\n                                            -> Option<String> {\n     let mut result = lhs.into();\n-\n+    let last_line_width = last_line_width(&result) -\n+                          if result.contains('\\n') {\n+        offset.width()\n+    } else {\n+        0\n+    };\n     // 1 = space between operator and rhs.\n-    let max_width = try_opt!(width.checked_sub(result.len() + 1));\n-    let rhs = ex.rewrite(&context, max_width, offset + result.len() + 1);\n+    let max_width = try_opt!(width.checked_sub(last_line_width + 1));\n+    let rhs = ex.rewrite(&context, max_width, offset + last_line_width + 1);\n \n     match rhs {\n         Some(new_str) => {"}, {"sha": "e6b401d2ff3a0979f46220d7c8046feddb47e0e1", "filename": "src/items.rs", "status": "modified", "additions": 42, "deletions": 68, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "patch": "@@ -26,85 +26,59 @@ use syntax::codemap::{Span, BytePos, mk_sp};\n use syntax::print::pprust;\n use syntax::parse::token;\n \n-impl<'a> FmtVisitor<'a> {\n-    pub fn visit_let(&mut self, local: &ast::Local, span: Span) {\n-        self.format_missing_with_indent(span.lo);\n-\n-        // New scope so we drop the borrow of self (context) in time to mutably\n-        // borrow self to mutate its buffer.\n-        let result = {\n-            let context = self.get_context();\n-            let mut result = \"let \".to_owned();\n-            let pattern_offset = self.block_indent + result.len();\n-            // 1 = ;\n-            let pattern_width = match self.config\n-                                          .max_width\n-                                          .checked_sub(pattern_offset.width() + 1) {\n-                Some(width) => width,\n-                None => return,\n-            };\n+// Statements of the form\n+// let pat: ty = init;\n+impl Rewrite for ast::Local {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        let mut result = \"let \".to_owned();\n+        let pattern_offset = offset + result.len();\n+        // 1 = ;\n+        let pattern_width = try_opt!(width.checked_sub(pattern_offset.width() + 1));\n \n-            match local.pat.rewrite(&context, pattern_width, pattern_offset) {\n-                Some(ref pat_string) => result.push_str(pat_string),\n-                None => return,\n-            }\n+        let pat_str = try_opt!(self.pat.rewrite(&context, pattern_width, pattern_offset));\n+        result.push_str(&pat_str);\n \n-            // String that is placed within the assignment pattern and expression.\n-            let infix = {\n-                let mut infix = String::new();\n-\n-                if let Some(ref ty) = local.ty {\n-                    // 2 = \": \".len()\n-                    // 1 = ;\n-                    let offset = self.block_indent + result.len() + 2;\n-                    let width = match self.config.max_width.checked_sub(offset.width() + 1) {\n-                        Some(w) => w,\n-                        None => return,\n-                    };\n-                    let rewrite = ty.rewrite(&self.get_context(), width, offset);\n-\n-                    match rewrite {\n-                        Some(result) => {\n-                            infix.push_str(\": \");\n-                            infix.push_str(&result);\n-                        }\n-                        None => return,\n-                    }\n-                }\n+        // String that is placed within the assignment pattern and expression.\n+        let infix = {\n+            let mut infix = String::new();\n \n-                if local.init.is_some() {\n-                    infix.push_str(\" =\");\n-                }\n+            if let Some(ref ty) = self.ty {\n+                // 2 = \": \".len()\n+                // 1 = ;\n+                let indent = offset + last_line_width(&result) + 2;\n+                let budget = try_opt!(width.checked_sub(indent.width() + 1));\n+                let rewrite = try_opt!(ty.rewrite(context, budget, indent));\n \n-                infix\n-            };\n+                infix.push_str(\": \");\n+                infix.push_str(&rewrite);\n+            }\n \n-            result.push_str(&infix);\n+            if self.init.is_some() {\n+                infix.push_str(\" =\");\n+            }\n \n-            if let Some(ref ex) = local.init {\n-                let max_width = self.config.max_width.checked_sub(context.block_indent.width() + 1);\n-                let max_width = match max_width {\n-                    Some(width) => width,\n-                    None => return,\n-                };\n+            infix\n+        };\n \n-                // 1 = trailing semicolon;\n-                let rhs = rewrite_assign_rhs(&context, result, ex, max_width, context.block_indent);\n+        result.push_str(&infix);\n \n-                match rhs {\n-                    Some(s) => s,\n-                    None => return,\n-                }\n-            } else {\n-                result\n-            }\n-        };\n+        if let Some(ref ex) = self.init {\n+            let budget = try_opt!(width.checked_sub(context.block_indent.width() + 1));\n \n-        self.buffer.push_str(&result);\n-        self.buffer.push_str(\";\");\n-        self.last_pos = span.hi;\n+            // 1 = trailing semicolon;\n+            result = try_opt!(rewrite_assign_rhs(&context,\n+                                                 result,\n+                                                 ex,\n+                                                 budget,\n+                                                 context.block_indent));\n+        }\n+\n+        result.push(';');\n+        Some(result)\n     }\n+}\n \n+impl<'a> FmtVisitor<'a> {\n     pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n         self.buffer.push_str(\"extern \");\n "}, {"sha": "a22e797fb68ac3dd8c5b3d8be13809a100562834", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "patch": "@@ -168,6 +168,14 @@ impl Add<usize> for Indent {\n     }\n }\n \n+impl Sub<usize> for Indent {\n+    type Output = Indent;\n+\n+    fn sub(self, rhs: usize) -> Indent {\n+        Indent::new(self.block_indent, self.alignment - rhs)\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub enum WriteMode {\n     // Backups the original file and overwrites the orignal."}, {"sha": "bd30e80e5a907d50a7ce494cba8b6b6b15443873", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "patch": "@@ -37,7 +37,13 @@ impl<'a> FmtVisitor<'a> {\n         match stmt.node {\n             ast::Stmt_::StmtDecl(ref decl, _) => {\n                 match decl.node {\n-                    ast::Decl_::DeclLocal(ref local) => self.visit_let(local, stmt.span),\n+                    ast::Decl_::DeclLocal(ref local) => {\n+                        let rewrite = {\n+                            let context = self.get_context();\n+                            local.rewrite(&context, self.config.max_width, self.block_indent)\n+                        };\n+                        self.push_rewrite(stmt.span, rewrite);\n+                    }\n                     ast::Decl_::DeclItem(ref item) => self.visit_item(item),\n                 }\n             }"}, {"sha": "faf3d657ada27e9d5f4359183fb8a3c265dcd4b3", "filename": "tests/source/issue-510.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/tests%2Fsource%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/tests%2Fsource%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-510.rs?ref=d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "patch": "@@ -0,0 +1,39 @@\n+impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n+fn solve_inline_size_constraints(&self,\n+block: &mut BlockFlow,\n+input: &ISizeConstraintInput)\n+-> ISizeConstraintSolution {\n+\n+let (inline_start,inline_size,margin_inline_start,margin_inline_end) =\n+match (inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx) {\n+(MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n+let margin_start = inline_start_margin.specified_or_zero();\n+let margin_end = inline_end_margin.specified_or_zero();\n+// Now it is the same situation as inline-start Specified and inline-end\n+// and inline-size Auto.\n+//\n+// Set inline-end to zero to calculate inline-size.\n+let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n+(margin_start + margin_end));\n+(Au(0), inline_size, margin_start, margin_end)\n+}\n+};\n+\n+// FIXME(#501): tuple width heuristic may not be optimal for patterns.\n+        let (inline_start, inline_size, margin_inline_start, margin_inline_end) =\n+            match (inline_start, inline_end, computed_inline_size) {\n+                (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n+                    let margin_start = inline_start_margin.specified_or_zero();\n+                    let margin_end = inline_end_margin.specified_or_zero();\n+                    // Now it is the same situation as inline-start Specified and inline-end\n+                    // and inline-size Auto.\n+                    //\n+                    // Set inline-end to zero to calculate inline-size.\n+                    let inline_size =\n+                        block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                            (margin_start + margin_end));\n+                    (Au(0), inline_size, margin_start, margin_end)\n+                }\n+            };\n+}\n+}"}, {"sha": "5b427ef14020ddc09a6eb6d7be68317e81d1c167", "filename": "tests/target/issue-510.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/tests%2Ftarget%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5/tests%2Ftarget%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-510.rs?ref=d122ad5adc2164e34e59a7e9e7e8da2dfba7ffb5", "patch": "@@ -0,0 +1,43 @@\n+impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n+    fn solve_inline_size_constraints(&self,\n+                                     block: &mut BlockFlow,\n+                                     input: &ISizeConstraintInput)\n+                                     -> ISizeConstraintSolution {\n+\n+        let (inline_start,\n+             inline_size,\n+             margin_inline_start,\n+             margin_inline_end) = match (inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx,\n+                                         inline_startssssssxxxxxxsssssxxxxxxxxxssssssxxx) {\n+            (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n+                let margin_start = inline_start_margin.specified_or_zero();\n+                let margin_end = inline_end_margin.specified_or_zero();\n+                // Now it is the same situation as inline-start Specified and inline-end\n+                // and inline-size Auto.\n+                //\n+                // Set inline-end to zero to calculate inline-size.\n+                let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                                      (margin_start + margin_end));\n+                (Au(0), inline_size, margin_start, margin_end)\n+            }\n+        };\n+\n+        // FIXME(#501): tuple width heuristic may not be optimal for patterns.\n+        let (inline_start,\n+             inline_size,\n+             margin_inline_start,\n+             margin_inline_end) = match (inline_start, inline_end, computed_inline_size) {\n+            (MaybeAuto::Auto, MaybeAuto::Auto, MaybeAuto::Auto) => {\n+                let margin_start = inline_start_margin.specified_or_zero();\n+                let margin_end = inline_end_margin.specified_or_zero();\n+                // Now it is the same situation as inline-start Specified and inline-end\n+                // and inline-size Auto.\n+                //\n+                // Set inline-end to zero to calculate inline-size.\n+                let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                                      (margin_start + margin_end));\n+                (Au(0), inline_size, margin_start, margin_end)\n+            }\n+        };\n+    }\n+}"}]}