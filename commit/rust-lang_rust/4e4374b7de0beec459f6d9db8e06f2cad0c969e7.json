{"sha": "4e4374b7de0beec459f6d9db8e06f2cad0c969e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDM3NGI3ZGUwYmVlYzQ1OWY2ZDlkYjhlMDZmMmNhZDBjOTY5ZTc=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-19T01:33:17Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-19T01:33:17Z"}, "message": "collections: Avoid unstable code in examples for String\n\nPrefer String::from over from_str; String::from_str is unstable while\nString::from is stable. Promote the latter by using it in examples.\n\nSimply migrating unstable function to the closest alternative.", "tree": {"sha": "b0f1e553dc26cdd66b1af1ef233c5dd2fc571abc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f1e553dc26cdd66b1af1ef233c5dd2fc571abc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4374b7de0beec459f6d9db8e06f2cad0c969e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4374b7de0beec459f6d9db8e06f2cad0c969e7", "html_url": "https://github.com/rust-lang/rust/commit/4e4374b7de0beec459f6d9db8e06f2cad0c969e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4374b7de0beec459f6d9db8e06f2cad0c969e7/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4daa62a55f906bd7ec7ad265cb23d49d9d0db66a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4daa62a55f906bd7ec7ad265cb23d49d9d0db66a", "html_url": "https://github.com/rust-lang/rust/commit/4daa62a55f906bd7ec7ad265cb23d49d9d0db66a"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "1e773b7f206bdcf6ed68046974e7f996bc45768b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e4374b7de0beec459f6d9db8e06f2cad0c969e7/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4374b7de0beec459f6d9db8e06f2cad0c969e7/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=4e4374b7de0beec459f6d9db8e06f2cad0c969e7", "patch": "@@ -32,7 +32,7 @@\n //! and have the `Owner` remain allocated as long as any `Gadget` points at it.\n //!\n //! ```rust\n-//! # #![feature(alloc, collections)]\n+//! # #![feature(alloc)]\n //! use std::rc::Rc;\n //!\n //! struct Owner {\n@@ -49,7 +49,7 @@\n //! fn main() {\n //!     // Create a reference counted Owner.\n //!     let gadget_owner : Rc<Owner> = Rc::new(\n-//!             Owner { name: String::from_str(\"Gadget Man\") }\n+//!             Owner { name: String::from(\"Gadget Man\") }\n //!     );\n //!\n //!     // Create Gadgets belonging to gadget_owner. To increment the reference"}, {"sha": "7563bb76b52f803b7b5321a68bf6cd07e36de1ab", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e4374b7de0beec459f6d9db8e06f2cad0c969e7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4374b7de0beec459f6d9db8e06f2cad0c969e7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=4e4374b7de0beec459f6d9db8e06f2cad0c969e7", "patch": "@@ -121,9 +121,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n-    /// use std::str::Utf8Error;\n-    ///\n     /// let hello_vec = vec![104, 101, 108, 108, 111];\n     /// let s = String::from_utf8(hello_vec).unwrap();\n     /// assert_eq!(s, \"hello\");\n@@ -346,8 +343,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let s = String::from_str(\"hello\");\n+    /// let s = String::from(\"hello\");\n     /// let bytes = s.into_bytes();\n     /// assert_eq!(bytes, [104, 101, 108, 108, 111]);\n     /// ```\n@@ -370,8 +366,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// s.push_str(\"bar\");\n     /// assert_eq!(s, \"foobar\");\n     /// ```\n@@ -447,8 +442,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// s.reserve(100);\n     /// assert!(s.capacity() >= 100);\n     /// s.shrink_to_fit();\n@@ -465,8 +459,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"abc\");\n+    /// let mut s = String::from(\"abc\");\n     /// s.push('1');\n     /// s.push('2');\n     /// s.push('3');\n@@ -501,8 +494,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let s = String::from_str(\"hello\");\n+    /// let s = String::from(\"hello\");\n     /// let b: &[_] = &[104, 101, 108, 108, 111];\n     /// assert_eq!(s.as_bytes(), b);\n     /// ```\n@@ -522,8 +514,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"hello\");\n+    /// let mut s = String::from(\"hello\");\n     /// s.truncate(2);\n     /// assert_eq!(s, \"he\");\n     /// ```\n@@ -540,8 +531,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// assert_eq!(s.pop(), Some('o'));\n     /// assert_eq!(s.pop(), Some('o'));\n     /// assert_eq!(s.pop(), Some('f'));\n@@ -578,8 +568,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"foo\");\n+    /// let mut s = String::from(\"foo\");\n     /// assert_eq!(s.remove(0), 'f');\n     /// assert_eq!(s.remove(1), 'o');\n     /// assert_eq!(s.remove(0), 'o');\n@@ -641,8 +630,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n-    /// let mut s = String::from_str(\"hello\");\n+    /// let mut s = String::from(\"hello\");\n     /// unsafe {\n     ///     let vec = s.as_mut_vec();\n     ///     assert!(vec == &[104, 101, 108, 108, 111]);"}]}