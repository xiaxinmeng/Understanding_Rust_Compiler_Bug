{"sha": "a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDRkMmI5NDU1YTc5NTRhNDMyMWIyYjNhZjNkM2FhOGRjZGQwOGE=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-06T10:44:42Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-06T10:44:42Z"}, "message": "refactor", "tree": {"sha": "a3c3dc898f7c165f76207cc42832397018c93455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c3dc898f7c165f76207cc42832397018c93455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "html_url": "https://github.com/rust-lang/rust/commit/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065", "html_url": "https://github.com/rust-lang/rust/commit/ff83ef0c24f866ff1b07fd27bbce5b931b9dc065"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "e363d73fc6a9d6672224b17ca4a512aac1eab92e", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "patch": "@@ -13,9 +13,10 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{\n-    Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause, WhereClauseAtom,\n+    Clause, Clauses, DomainGoal, FromEnv, Goal, PolyDomainGoal, ProgramClause, WellFormed,\n+    WhereClause,\n };\n-use rustc::ty::subst::Substs;\n+use rustc::ty::query::Providers;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::mem;\n@@ -139,11 +140,13 @@ impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n \n impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n     fn into_wellformed_goal(self) -> DomainGoal<'tcx> {\n-        use self::DomainGoal::*;\n+        use self::WhereClause::*;\n+\n         match self {\n-            Holds(wc_atom) => WellFormed(wc_atom),\n-            WellFormed(..) | FromEnv(..) | WellFormedTy(..) | FromEnvTy(..) | Normalize(..)\n-            | RegionOutlives(..) | TypeOutlives(..) => self,\n+            DomainGoal::Holds(Implemented(trait_ref)) => {\n+                DomainGoal::WellFormed(WellFormed::Trait(trait_ref))\n+            }\n+            other => other,\n         }\n     }\n }\n@@ -256,6 +259,8 @@ fn program_clauses_for_trait<'a, 'tcx>(\n \n     let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n \n+    let where_clauses = &tcx.predicates_defined_on(def_id).predicates;\n+\n     // Rule Implied-Bound-From-Trait\n     //\n     // For each where clause WC:\n@@ -266,7 +271,6 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // ```\n \n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`, for each where clause WC\n-    let where_clauses = &tcx.predicates_defined_on(def_id).predicates;\n     let implied_bound_clauses = where_clauses\n         .into_iter()\n         .map(|wc| wc.lower())\n@@ -276,43 +280,36 @@ fn program_clauses_for_trait<'a, 'tcx>(\n             goal: goal.into_from_env_goal(),\n             hypotheses,\n         }))\n-        .map(|wc| implied_bound_from_trait(tcx, trait_pred, wc));\n-    let wellformed_clauses = wellformed_from_bound(tcx, trait_pred, &where_clauses[1..]);\n-    tcx.mk_clauses(clauses.chain(implied_bound_clauses).chain(wellformed_clauses))\n-}\n+        .map(Clause::ForAll);\n \n-fn wellformed_from_bound<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    trait_pred: ty::TraitPredicate<'tcx>,\n-    where_clauses: &[ty::Predicate<'tcx>],\n-) -> iter::Once<Clause<'tcx>> {\n     // Rule WellFormed-TraitRef\n     //\n     // For each where clause WC:\n     // forall<Self, P1..Pn> {\n     //   WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n     // }\n \n-    // WellFormed(Self: Trait<P1..Pn>)\n-    let wellformed_trait = DomainGoal::WellFormed(WhereClauseAtom::Implemented(trait_pred));\n-    // Implemented(Self: Trait<P1..Pn>)\n-    let impl_trait = ty::Binder::dummy(DomainGoal::Holds(WhereClauseAtom::Implemented(trait_pred)));\n-    // WellFormed(WC)\n-    let wellformed_wc = where_clause\n-        .lower()\n-        .map_bound(|wc| wc.into_wellformed_goal());\n-    // Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n-    let mut wcs = vec![impl_trait];\n-    wcs.extend(wellformed_wcs);\n+    let wellformed_clauses = where_clauses\n+        .into_iter()\n+        .map(|wc| wc.lower())\n+        // WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n+        .map(|wc| {\n+            wc.map_bound(|goal| ProgramClause {\n+                goal: goal.into_wellformed_goal(),\n+                hypotheses: tcx.mk_goals(\n+                    where_clauses\n+                        .into_iter()\n+                        .map(|wc| Goal::from_poly_domain_goal(wc.lower(), tcx)),\n+                ),\n+            })\n+        })\n+        .map(Clause::ForAll);\n \n-    let clause = ProgramClause {\n-        goal: wellformed_trait,\n-        hypotheses: tcx.mk_goals(\n-            wcs.into_iter()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n-        ),\n-    };\n-    iter::once(Clause::ForAll(ty::Binder::dummy(clause)))\n+    tcx.mk_clauses(\n+        clauses\n+            .chain(implied_bound_clauses)\n+            .chain(wellformed_clauses),\n+    )\n }\n \n fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {"}]}