{"sha": "4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMTFkN2UxYTAwODM0NTZkZmRiOWFkNDY2OTA3ZWQxN2VkMjNjZDQ=", "commit": {"author": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-20T21:58:57Z"}, "committer": {"name": "Christian Poveda", "email": "cpovedar@fnal.gov", "date": "2019-06-20T21:58:57Z"}, "message": "Update tag methods to match Machine changes", "tree": {"sha": "67170713b2ccfccf813e9d83adc82fbc77f73ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67170713b2ccfccf813e9d83adc82fbc77f73ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "html_url": "https://github.com/rust-lang/rust/commit/4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4211d7e1a0083456dfdb9ad466907ed17ed23cd4/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b298bc4f5a7e86eb78404e25de08f179091e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b298bc4f5a7e86eb78404e25de08f179091e03", "html_url": "https://github.com/rust-lang/rust/commit/e4b298bc4f5a7e86eb78404e25de08f179091e03"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9072f141f89d9d3759873c71791352741b03f83f", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4211d7e1a0083456dfdb9ad466907ed17ed23cd4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4211d7e1a0083456dfdb9ad466907ed17ed23cd4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "patch": "@@ -508,21 +508,21 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n         let (extra, base_tag) = Stacks::new_allocation(\n             id,\n             Size::from_bytes(alloc.bytes.len() as u64),\n-            Rc::clone(memory_extra),\n+            Rc::clone(&memory.extra),\n             kind,\n         );\n         if kind != MiriMemoryKind::Static.into() {\n             assert!(alloc.relocations.is_empty(), \"Only statics can come initialized with inner pointers\");\n             // Now we can rely on the inner pointers being static, too.\n         }\n-        let mut memory_extra = memory_extra.borrow_mut();\n+        let mut memory_extra = memory.extra.borrow_mut();\n         let alloc: Allocation<Tag, Self::AllocExtra> = Allocation {\n             bytes: alloc.bytes,\n             relocations: Relocations::from_presorted(\n@@ -543,9 +543,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn tag_static_base_pointer(\n         id: AllocId,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag {\n-        memory_extra.borrow_mut().static_base_ptr(id)\n+        memory.extra.borrow_mut().static_base_ptr(id)\n     }\n \n     #[inline(always)]"}]}