{"sha": "adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYjQ2ZmQwYTQ5MTA4ZjA4YmQwZDRiOGM5NTMxN2NmYmNiYjc5NDE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-05T23:00:47Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-05T23:00:47Z"}, "message": "Silence `TooGeneric` error\n\nThis error may be produced during intermediate failed attempts at evaluation of a generic const, which may nevertheless succeed later.", "tree": {"sha": "b553ad5b460ca34b40c604808f7f894376b55238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b553ad5b460ca34b40c604808f7f894376b55238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "html_url": "https://github.com/rust-lang/rust/commit/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760ce94c69ca510d44087291c311296f6d9ccdf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/760ce94c69ca510d44087291c311296f6d9ccdf5", "html_url": "https://github.com/rust-lang/rust/commit/760ce94c69ca510d44087291c311296f6d9ccdf5"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "6ac24196e574a8dca35bde115c600b7d14a54a84", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "patch": "@@ -12,6 +12,7 @@ use crate::hir::Node;\n use crate::infer::error_reporting::TypeAnnotationNeeded as ErrorCode;\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt};\n+use crate::mir::interpret::ErrorHandled;\n use crate::session::DiagnosticMessageId;\n use crate::ty::error::ExpectedFound;\n use crate::ty::fast_reject;\n@@ -1086,6 +1087,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             // already reported in the query\n             ConstEvalFailure(err) => {\n+                if let ErrorHandled::TooGeneric = err {\n+                    // Silence this error, as it can be produced during intermediate steps\n+                    // when a constant is not yet able to be evaluated (but will be later).\n+                    return;\n+                }\n                 self.tcx.sess.delay_span_bug(\n                     span,\n                     &format!(\"constant in type had an ignored error: {:?}\", err),"}, {"sha": "ea99ba8dc8bc4fc76926b6d58ae1fe356082923a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "patch": "@@ -98,7 +98,10 @@ fn enforce_impl_params_are_constrained(\n         // (#36836)\n         tcx.sess.delay_span_bug(\n             tcx.def_span(impl_def_id),\n-            \"potentially unconstrained type parameters weren't evaluated\",\n+            &format!(\n+                \"potentially unconstrained type parameters weren't evaluated: {:?}\",\n+                impl_self_ty,\n+            ),\n         );\n         return;\n     }"}, {"sha": "f3be7b56db589ab2e3c114d7e46e3113bf9a72d3", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+#[allow(dead_code)]\n+struct ArithArrayLen<const N: usize>([u32; 0 + N]); // ok\n+\n+#[derive(PartialEq, Eq)]\n+struct Config {\n+    arr_size: usize,\n+}\n+\n+struct B<const CFG: Config> {\n+    arr: [u8; CFG.arr_size], // ok\n+}\n+\n+const C: Config = Config { arr_size: 5 };\n+\n+fn main() {\n+    let b = B::<C> { arr: [1, 2, 3, 4, 5] };\n+    assert_eq!(b.arr.len(), 5);\n+}"}, {"sha": "274f97697029e1767048569bcec70c684949209e", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adb46fd0a49108f08bd0d4b8c95317cfbcbb7941/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=adb46fd0a49108f08bd0d4b8c95317cfbcbb7941", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/array-size-in-generic-struct-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}