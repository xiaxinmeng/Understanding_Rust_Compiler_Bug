{"sha": "118aae2af1a8dfa9500b26f2542825291c9ae1f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOGFhZTJhZjFhOGRmYTk1MDBiMjZmMjU0MjgyNTI5MWM5YWUxZjg=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-19T23:09:18Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-20T12:45:47Z"}, "message": "insert storageDead for not equal temp", "tree": {"sha": "12ddda01d3c50bd2e2923379e6fd7b6ed99439dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ddda01d3c50bd2e2923379e6fd7b6ed99439dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/118aae2af1a8dfa9500b26f2542825291c9ae1f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/118aae2af1a8dfa9500b26f2542825291c9ae1f8", "html_url": "https://github.com/rust-lang/rust/commit/118aae2af1a8dfa9500b26f2542825291c9ae1f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/118aae2af1a8dfa9500b26f2542825291c9ae1f8/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25302740231152bccebc391e893d48ef9f3ca50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/25302740231152bccebc391e893d48ef9f3ca50a", "html_url": "https://github.com/rust-lang/rust/commit/25302740231152bccebc391e893d48ef9f3ca50a"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "b0b9d5a8895616bfc19a8595718e330d1cd7ea3b", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/118aae2af1a8dfa9500b26f2542825291c9ae1f8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118aae2af1a8dfa9500b26f2542825291c9ae1f8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=118aae2af1a8dfa9500b26f2542825291c9ae1f8", "patch": "@@ -46,27 +46,32 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n \n         for opt_to_apply in opts_to_apply {\n             trace!(\"SUCCESS: found optimization possibility to apply: {:?}\", &opt_to_apply);\n-            // create the patch using MirPatch\n-            let mut patch = MirPatch::new(body);\n \n-            // create temp to store second discriminant in\n-            let discr_type = opt_to_apply.infos[0].second_switch_info.discr_ty;\n-            let discr_span = opt_to_apply.infos[0].second_switch_info.discr_source_info.span;\n-            let temp = patch.new_temp(discr_type, discr_span);\n             let statements_before =\n                 body.basic_blocks()[opt_to_apply.basic_block_first_switch].statements.len();\n             let end_of_block_location = Location {\n                 block: opt_to_apply.basic_block_first_switch,\n                 statement_index: statements_before,\n             };\n-            patch.add_statement(end_of_block_location, StatementKind::StorageLive(temp));\n+\n+            let mut patch = MirPatch::new(body);\n+\n+            // create temp to store second discriminant in\n+            let discr_type = opt_to_apply.infos[0].second_switch_info.discr_ty;\n+            let discr_span = opt_to_apply.infos[0].second_switch_info.discr_source_info.span;\n+            let second_discriminant_temp = patch.new_temp(discr_type, discr_span);\n+\n+            patch.add_statement(\n+                end_of_block_location,\n+                StatementKind::StorageLive(second_discriminant_temp),\n+            );\n \n             // create assignment of discriminant\n             let place_of_adt_to_get_discriminant_of =\n                 opt_to_apply.infos[0].second_switch_info.place_of_adt_discr_read;\n             patch.add_assign(\n                 end_of_block_location,\n-                Place::from(temp),\n+                Place::from(second_discriminant_temp),\n                 Rvalue::Discriminant(place_of_adt_to_get_discriminant_of),\n             );\n \n@@ -81,7 +86,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 opt_to_apply.infos[0].first_switch_info.discr_used_in_switch;\n             let not_equal_rvalue = Rvalue::BinaryOp(\n                 not_equal,\n-                Operand::Copy(Place::from(temp)),\n+                Operand::Copy(Place::from(second_discriminant_temp)),\n                 Operand::Copy(Place::from(first_descriminant_place)),\n             );\n             patch.add_statement(\n@@ -126,8 +131,19 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 ),\n             );\n \n-            // generate StorageDead for the temp not in use anymore. We use the not_equal_temp in the switch, so we can't mark that dead\n-            patch.add_statement(end_of_block_location, StatementKind::StorageDead(temp));\n+            // generate StorageDead for the second_discriminant_temp not in use anymore\n+            patch.add_statement(\n+                end_of_block_location,\n+                StatementKind::StorageDead(second_discriminant_temp),\n+            );\n+\n+            // Generate a StorageDead for not_equal_temp in each of the targets, since we moved it into the switch\n+            for bb in [false_case, true_case].iter() {\n+                patch.add_statement(\n+                    Location { block: *bb, statement_index: 0 },\n+                    StatementKind::StorageDead(not_equal_temp),\n+                );\n+            }\n \n             patch.apply(body);\n         }"}, {"sha": "ce0f0cf0a30ef38bd952177bc7d465fdb841da66", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=118aae2af1a8dfa9500b26f2542825291c9ae1f8", "patch": "@@ -40,6 +40,7 @@\n       }\n   \n       bb1: {\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n           goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n       }\n@@ -70,6 +71,7 @@\n +     }\n + \n +     bb6: {\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n +         switchInt(_7) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n       }\n   }"}, {"sha": "e9361f895bf2218e11b37f0185960180a3d22ce6", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=118aae2af1a8dfa9500b26f2542825291c9ae1f8", "patch": "@@ -46,6 +46,7 @@\n       }\n   \n       bb2: {\n++         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n           goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n       }\n@@ -81,6 +82,7 @@\n +     }\n + \n +     bb8: {\n++         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n +         switchInt(_8) -> [0_isize: bb5, 1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n       }\n   }"}, {"sha": "80bbc30124d9fc1dd15e4e632bdb844e8fbfd79f", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=118aae2af1a8dfa9500b26f2542825291c9ae1f8", "patch": "@@ -51,6 +51,8 @@\n       }\n   \n       bb1: {\n++         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n++         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n           goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n       }\n@@ -95,10 +97,12 @@\n +     }\n + \n +     bb7: {\n++         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n +         switchInt(_10) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n +     }\n + \n +     bb8: {\n++         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n +         switchInt(_9) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n       }\n   }"}, {"sha": "9abbe767cae2b9069cbf4d64011ef70e55940cfc", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/118aae2af1a8dfa9500b26f2542825291c9ae1f8/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=118aae2af1a8dfa9500b26f2542825291c9ae1f8", "patch": "@@ -82,6 +82,7 @@\n       }\n   \n       bb2: {\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:25: 24:27\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:25: 24:27\n           ((_0 as Err).0: ()) = const ();  // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:28\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:28\n@@ -207,6 +208,7 @@\n +     }\n + \n +     bb13: {\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:20:21: 20:30\n +         switchInt(_11) -> [0_isize: bb6, 1_isize: bb7, 2_isize: bb8, 3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:20:21: 20:30\n       }\n   }"}]}