{"sha": "6bc236253dd9cd8e0729bbb681f0e03b20bc3627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzIzNjI1M2RkOWNkOGUwNzI5YmJiNjgxZjBlMDNiMjBiYzM2Mjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T16:52:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T16:52:58Z"}, "message": "Correctly discover module containers", "tree": {"sha": "4b07ef6bdf3b8173a9456f8659cfeabb83772a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b07ef6bdf3b8173a9456f8659cfeabb83772a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc236253dd9cd8e0729bbb681f0e03b20bc3627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc236253dd9cd8e0729bbb681f0e03b20bc3627", "html_url": "https://github.com/rust-lang/rust/commit/6bc236253dd9cd8e0729bbb681f0e03b20bc3627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc236253dd9cd8e0729bbb681f0e03b20bc3627/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595b06a1b8fcd215c828d65ee1dd1a30c2697de9", "url": "https://api.github.com/repos/rust-lang/rust/commits/595b06a1b8fcd215c828d65ee1dd1a30c2697de9", "html_url": "https://github.com/rust-lang/rust/commit/595b06a1b8fcd215c828d65ee1dd1a30c2697de9"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "b2b17d51024223f60427e12a0b80d72495f8f011", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6bc236253dd9cd8e0729bbb681f0e03b20bc3627/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc236253dd9cd8e0729bbb681f0e03b20bc3627/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6bc236253dd9cd8e0729bbb681f0e03b20bc3627", "patch": "@@ -111,7 +111,10 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n                         let def: UnionId = self.to_id(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },\n-                    // FIXME: handle out-of-line modules here\n+                    ast::Module(it) => {\n+                        let def: ModuleId = self.to_id(container.with_value(it))?;\n+                        def.into()\n+                    },\n                     _ => { continue },\n                 }\n             };\n@@ -162,6 +165,7 @@ macro_rules! to_def_impls {\n }\n \n to_def_impls![\n+    (crate::Module, ast::Module),\n     (crate::Struct, ast::StructDef),\n     (crate::Enum, ast::EnumDef),\n     (crate::Union, ast::UnionDef),\n@@ -318,13 +322,13 @@ impl ToDef for ast::TypeParam {\n     }\n }\n \n-impl ToDef for ast::Module {\n-    type Def = Module;\n+impl ToId for ast::Module {\n+    type ID = ModuleId;\n \n-    fn to_def<DB: HirDatabase>(\n+    fn to_id<DB: HirDatabase>(\n         sb: &mut SourceBinder<'_, DB>,\n         src: InFile<ast::Module>,\n-    ) -> Option<Module> {\n+    ) -> Option<ModuleId> {\n         {\n             let _p = profile(\"ast::Module::to_def\");\n             let parent_declaration = src\n@@ -339,17 +343,17 @@ impl ToDef for ast::Module {\n                 });\n \n             let parent_module = match parent_declaration {\n-                Some(parent_declaration) => sb.to_def(parent_declaration),\n+                Some(parent_declaration) => sb.to_id(parent_declaration)?,\n                 None => {\n                     let file_id = src.file_id.original_file(sb.db);\n-                    sb.to_module_def(file_id)\n+                    sb.to_module_def(file_id)?.id\n                 }\n-            }?;\n+            };\n \n             let child_name = src.value.name()?.as_name();\n-            let def_map = sb.db.crate_def_map(parent_module.id.krate);\n-            let child_id = def_map[parent_module.id.local_id].children.get(&child_name)?;\n-            Some(parent_module.with_module_id(*child_id))\n+            let def_map = sb.db.crate_def_map(parent_module.krate);\n+            let child_id = *def_map[parent_module.local_id].children.get(&child_name)?;\n+            Some(ModuleId { krate: parent_module.krate, local_id: child_id })\n         }\n     }\n }"}]}