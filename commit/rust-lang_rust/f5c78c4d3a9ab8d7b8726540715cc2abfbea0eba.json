{"sha": "f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "node_id": "C_kwDOAAsO6NoAKGY1Yzc4YzRkM2E5YWI4ZDdiODcyNjU0MDcxNWNjMmFiZmJlYTBlYmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-30T00:23:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-30T00:53:16Z"}, "message": "Don't ICE on DiscriminantKind projection in new solver", "tree": {"sha": "dd91c56d4f268873ff6cf4a1a04a176ed5e42882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd91c56d4f268873ff6cf4a1a04a176ed5e42882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "html_url": "https://github.com/rust-lang/rust/commit/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c11672167827b0dd92c88ef69f24346d1286dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c11672167827b0dd92c88ef69f24346d1286dd", "html_url": "https://github.com/rust-lang/rust/commit/17c11672167827b0dd92c88ef69f24346d1286dd"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "c7ff3a3b0edb6faca22ed9acdc1f9a30d7787f4d", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "patch": "@@ -485,9 +485,49 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let discriminant = goal.predicate.self_ty().discriminant_ty(ecx.tcx());\n+        let self_ty = goal.predicate.self_ty();\n+        let discriminant_ty = match *self_ty.kind() {\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(..)\n+            | ty::Uint(..)\n+            | ty::Float(..)\n+            | ty::Array(..)\n+            | ty::RawPtr(..)\n+            | ty::Ref(..)\n+            | ty::FnDef(..)\n+            | ty::FnPtr(..)\n+            | ty::Closure(..)\n+            | ty::Infer(ty::IntVar(..) | ty::FloatVar(..))\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Never\n+            | ty::Foreign(..)\n+            | ty::Adt(_, _)\n+            | ty::Str\n+            | ty::Slice(_)\n+            | ty::Dynamic(_, _, _)\n+            | ty::Tuple(_)\n+            | ty::Error(_) => self_ty.discriminant_ty(ecx.tcx()),\n+\n+            // We do not call `Ty::discriminant_ty` on alias, param, or placeholder\n+            // types, which return `<self_ty as DiscriminantKind>::Discriminant`\n+            // (or ICE in the case of placeholders). Projecting a type to itself\n+            // is never really productive.\n+            ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n+                return Err(NoSolution);\n+            }\n+\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\n+                \"unexpected self ty `{:?}` when normalizing `<T as DiscriminantKind>::Discriminant`\",\n+                goal.predicate.self_ty()\n+            ),\n+        };\n+\n         ecx.probe(|ecx| {\n-            ecx.eq(goal.param_env, goal.predicate.term, discriminant.into())?;\n+            ecx.eq(goal.param_env, goal.predicate.term, discriminant_ty.into())?;\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }"}, {"sha": "e319ddea106bc792809eb51117fafb197b1db9df", "filename": "tests/ui/traits/new-solver/param-discr-kind.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-discr-kind.rs?ref=f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn foo<T>(x: T) {\n+    std::mem::discriminant(&x);\n+}\n+\n+fn main() {}"}, {"sha": "20296b287b17e8f419125860ea55e8d9bd697f95", "filename": "tests/ui/traits/new-solver/projection-discr-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.rs?ref=f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// Check that `<T::Assoc as DiscriminantKind>::Discriminant` doesn't normalize\n+// to itself and cause overflow/ambiguity.\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+fn needs_bar(_: impl Bar) {}\n+\n+fn foo<T: Foo>(x: T::Assoc) {\n+    needs_bar(std::mem::discriminant(&x));\n+    //~^ ERROR the trait bound `Discriminant<<T as Foo>::Assoc>: Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "03e28f993e25dccf2ad5fb393ca08d9dd39c72aa", "filename": "tests/ui/traits/new-solver/projection-discr-kind.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprojection-discr-kind.stderr?ref=f5c78c4d3a9ab8d7b8726540715cc2abfbea0eba", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `Discriminant<<T as Foo>::Assoc>: Bar` is not satisfied\n+  --> $DIR/projection-discr-kind.rs:14:15\n+   |\n+LL |     needs_bar(std::mem::discriminant(&x));\n+   |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `Discriminant<<T as Foo>::Assoc>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_bar`\n+  --> $DIR/projection-discr-kind.rs:11:22\n+   |\n+LL | fn needs_bar(_: impl Bar) {}\n+   |                      ^^^ required by this bound in `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}