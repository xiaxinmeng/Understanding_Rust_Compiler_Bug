{"sha": "962957f11f456949395535037b45b98d18bbcf19", "node_id": "C_kwDOAAsO6NoAKDk2Mjk1N2YxMWY0NTY5NDkzOTU1MzUwMzdiNDViOThkMThiYmNmMTk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-30T10:56:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-30T10:56:34Z"}, "message": "make it possible to test more of ui_test", "tree": {"sha": "636e6237f5ef7131c29c572be05e35485d610340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636e6237f5ef7131c29c572be05e35485d610340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/962957f11f456949395535037b45b98d18bbcf19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/962957f11f456949395535037b45b98d18bbcf19", "html_url": "https://github.com/rust-lang/rust/commit/962957f11f456949395535037b45b98d18bbcf19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/962957f11f456949395535037b45b98d18bbcf19/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d80880854b2ae832d9e490f0d761bbc5170c3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d80880854b2ae832d9e490f0d761bbc5170c3bb", "html_url": "https://github.com/rust-lang/rust/commit/4d80880854b2ae832d9e490f0d761bbc5170c3bb"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "6052efe02e06af3929a6fda2e116fe55574dc402", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/962957f11f456949395535037b45b98d18bbcf19/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962957f11f456949395535037b45b98d18bbcf19/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=962957f11f456949395535037b45b98d18bbcf19", "patch": "@@ -235,11 +235,34 @@ fn run_test(\n     }\n     let output = miri.output().expect(\"could not execute miri\");\n     let mut errors = config.mode.ok(output.status);\n+    check_test_result(\n+        path,\n+        config,\n+        target,\n+        revision,\n+        comments,\n+        &mut errors,\n+        &output.stdout,\n+        &output.stderr,\n+    );\n+    (miri, errors)\n+}\n+\n+fn check_test_result(\n+    path: &Path,\n+    config: &Config,\n+    target: &str,\n+    revision: &str,\n+    comments: &Comments,\n+    errors: &mut Errors,\n+    stdout: &[u8],\n+    stderr: &[u8],\n+) {\n     // Always remove annotation comments from stderr.\n     let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n-    let stderr = std::str::from_utf8(&output.stderr).unwrap();\n+    let stderr = std::str::from_utf8(stderr).unwrap();\n     let stderr = annotations.replace_all(stderr, \"\");\n-    let stdout = std::str::from_utf8(&output.stdout).unwrap();\n+    let stdout = std::str::from_utf8(stdout).unwrap();\n     // Check output files (if any)\n     let revised = |extension: &str| {\n         if revision.is_empty() {\n@@ -252,7 +275,7 @@ fn run_test(\n     check_output(\n         &stderr,\n         path,\n-        &mut errors,\n+        errors,\n         revised(\"stderr\"),\n         target,\n         &config.stderr_filters,\n@@ -262,16 +285,15 @@ fn run_test(\n     check_output(\n         &stdout,\n         path,\n-        &mut errors,\n+        errors,\n         revised(\"stdout\"),\n         target,\n         &config.stdout_filters,\n         &config,\n         comments,\n     );\n     // Check error annotations in the source against output\n-    check_annotations(&stderr, &mut errors, config, revision, comments);\n-    (miri, errors)\n+    check_annotations(&stderr, errors, config, revision, comments);\n }\n \n fn check_annotations("}, {"sha": "d0ef1195d888aec8f7dc33f668b0e937ad9fd85c", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/962957f11f456949395535037b45b98d18bbcf19/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962957f11f456949395535037b45b98d18bbcf19/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=962957f11f456949395535037b45b98d18bbcf19", "patch": "@@ -1,14 +1,14 @@\n use std::path::{Path, PathBuf};\n \n-use super::{check_annotations, Comments, Config, Error, Mode, OutputConflictHandling};\n+use super::*;\n \n fn config() -> Config {\n     Config {\n         args: vec![],\n         target: None,\n         stderr_filters: vec![],\n         stdout_filters: vec![],\n-        root_dir: PathBuf::from(\".\"),\n+        root_dir: PathBuf::from(\"$RUSTROOT\"),\n         mode: Mode::Fail,\n         path_filter: vec![],\n         program: PathBuf::from(\"cake\"),\n@@ -25,10 +25,12 @@ fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let path = Path::new(\"$DIR/<dummy>\");\n+    let comments = Comments::parse(&path, s);\n     let mut errors = vec![];\n     let config = config();\n-    let unnormalized_stderr = r\"\n+    // Crucially, the intended error string *does* appear in this output, as a quote of the comment itself.\n+    let stderr = br\"\n error: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x10 is unallocated)\n   --> tests/compile-fail/validity/dangling_ref1.rs:6:29\n    |\n@@ -42,9 +44,10 @@ LL |     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountere\n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n error: aborting due to previous error\n     \";\n-    check_annotations(unnormalized_stderr, &mut errors, &config, \"\", &comments);\n+    check_test_result(&path, &config, \"\", \"\", &comments, &mut errors, /*stdout*/ br\"\", stderr);\n+    // The \"OutputDiffers\" is because we cannot open the .rs file\n     match &errors[..] {\n-        [Error::PatternNotFound { .. }] => {}\n+        [Error::OutputDiffers { .. }, Error::PatternNotFound { .. }] => {}\n         _ => panic!(\"not the expected error: {:#?}\", errors),\n     }\n }"}]}