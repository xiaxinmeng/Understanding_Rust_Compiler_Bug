{"sha": "8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMTllZjViNzhhMTBiM2E4ZGU0MTA5YmI4YjBlNmQyM2ZiZTRkZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-19T03:10:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-19T03:10:53Z"}, "message": "Auto merge of #50709 - alexcrichton:revert-musl, r=sfackler\n\nRevert #50105 until regression is fixed\n\nDiscovered at https://github.com/rust-lang/rust/pull/50105#issuecomment-388630750 it looks like this caused a regression with i686 musl, so let's revert in the meantime while a fix is worked out", "tree": {"sha": "131333a33ae4979adbb7e2109a53946985d844a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131333a33ae4979adbb7e2109a53946985d844a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "html_url": "https://github.com/rust-lang/rust/commit/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6a1979e2046a8eb56900f3191ef69d11e7455e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a1979e2046a8eb56900f3191ef69d11e7455e3", "html_url": "https://github.com/rust-lang/rust/commit/c6a1979e2046a8eb56900f3191ef69d11e7455e3"}, {"sha": "acc874fbcda98bb5ec95399bea76b9f83227b758", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc874fbcda98bb5ec95399bea76b9f83227b758", "html_url": "https://github.com/rust-lang/rust/commit/acc874fbcda98bb5ec95399bea76b9f83227b758"}], "stats": {"total": 178, "additions": 15, "deletions": 163}, "files": [{"sha": "6f27402233f987e617b61df7cdb3305afa652348", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -268,15 +268,6 @@ fn main() {\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n-\n-        if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n-            if s == \"true\" {\n-                cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n-            }\n-            if s == \"false\" {\n-                cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n-            }\n-        }\n     }\n \n     if env::var_os(\"RUSTC_PARALLEL_QUERIES\").is_some() {"}, {"sha": "487440becf630de7471c0228bab09c014e33d2ac", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -489,7 +489,7 @@ def bin_root(self):\n         \"\"\"\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n-    def get_toml(self, key, section=None):\n+    def get_toml(self, key):\n         \"\"\"Returns the value of the given key in config.toml, otherwise returns None\n \n         >>> rb = RustBuild()\n@@ -501,29 +501,12 @@ def get_toml(self, key, section=None):\n \n         >>> rb.get_toml(\"key3\") is None\n         True\n-\n-        Optionally also matches the section the key appears in\n-\n-        >>> rb.config_toml = '[a]\\\\nkey = \"value1\"\\\\n[b]\\\\nkey = \"value2\"'\n-        >>> rb.get_toml('key', 'a')\n-        'value1'\n-        >>> rb.get_toml('key', 'b')\n-        'value2'\n-        >>> rb.get_toml('key', 'c') is None\n-        True\n         \"\"\"\n-\n-        cur_section = None\n         for line in self.config_toml.splitlines():\n-            section_match = re.match(r'^\\s*\\[(.*)\\]\\s*$', line)\n-            if section_match is not None:\n-                cur_section = section_match.group(1)\n-\n             match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n             if match is not None:\n                 value = match.group(1)\n-                if section is None or section == cur_section:\n-                    return self.get_string(value) or value.strip()\n+                return self.get_string(value) or value.strip()\n         return None\n \n     def cargo(self):\n@@ -606,17 +589,7 @@ def build_bootstrap(self):\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n-        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2 \"\n-\n-        build_section = \"target.{}\".format(self.build_triple())\n-        target_features = []\n-        if self.get_toml(\"crt-static\", build_section) == \"true\":\n-            target_features += [\"+crt-static\"]\n-        elif self.get_toml(\"crt-static\", build_section) == \"false\":\n-            target_features += [\"-crt-static\"]\n-        if target_features:\n-            env[\"RUSTFLAGS\"] += \"-C target-feature=\" + (\",\".join(target_features)) + \" \"\n-\n+        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2\"\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):"}, {"sha": "84d294006693138f4516c260c8a073c972b0cfc7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -697,10 +697,6 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_CRT_STATIC\", x.to_string());\n         }\n \n-        if let Some(x) = self.crt_static(compiler.host) {\n-            cargo.env(\"RUSTC_HOST_CRT_STATIC\", x.to_string());\n-        }\n-\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);"}, {"sha": "735c4d2f76fc1273250f2f32ac16d4ca1ad0b02f", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -625,11 +625,6 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n-    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n-        if sess.crt_static() {\n-            cmd.args(args);\n-        }\n-    }\n     if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n         cmd.args(args);\n     }\n@@ -644,18 +639,6 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n-    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n-        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n-            cmd.arg(root.join(obj));\n-        }\n-\n-        for obj in &sess.target.target.options.pre_link_objects_exe_crt_sys {\n-            if flavor == LinkerFlavor::Gcc {\n-                cmd.arg(format!(\"-l:{}\", obj));\n-            }\n-        }\n-    }\n-\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -677,16 +660,6 @@ fn link_natively(sess: &Session,\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n-    if sess.crt_static() {\n-        for obj in &sess.target.target.options.post_link_objects_crt_sys {\n-            if flavor == LinkerFlavor::Gcc {\n-                cmd.arg(format!(\"-l:{}\", obj));\n-            }\n-        }\n-        for obj in &sess.target.target.options.post_link_objects_crt {\n-            cmd.arg(root.join(obj));\n-        }\n-    }\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}, {"sha": "293f23eab388317c4b5a5d0bdbd8f50ca3d2426a", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -15,8 +15,7 @@ pub fn opts() -> TargetOptions {\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args_crt.insert(LinkerFlavor::Gcc, Vec::new());\n-    base.pre_link_args_crt.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -56,11 +55,9 @@ pub fn opts() -> TargetOptions {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n-    base.pre_link_objects_exe_crt_sys.push(\"crtbegin.o\".to_string());\n-    base.post_link_objects_crt_sys.push(\"crtend.o\".to_string());\n-    base.post_link_objects_crt.push(\"crtn.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n+    base.post_link_objects.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "0f870b5b9570cd4788d2798c394f52b27db9f604", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -422,26 +422,20 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// Linker arguments that are passed *before* any user-defined libraries.\n-    pub pre_link_args: LinkArgs, // ... unconditionally\n-    pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n-    /// Objects to link before all others, all except *_sys found within the\n+    /// Linker arguments that are unconditionally passed *before* any\n+    /// user-defined libraries.\n+    pub pre_link_args: LinkArgs,\n+    /// Objects to link before all others, always found within the\n     /// sysroot folder.\n-    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n-    pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n-    pub pre_link_objects_exe_crt_sys: Vec<String>, // ... when linking an executable with a bundled\n-                                                   //  crt, from the system library search path\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n-    /// Objects to link after all others, all except *_sys found within the\n+    /// Objects to link after all others, always found within the\n     /// sysroot folder.\n-    pub post_link_objects: Vec<String>, // ... unconditionally\n-    pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n-    pub post_link_objects_crt_sys: Vec<String>, // ... when linking with a bundled crt, from the\n-                                                //  system library search path\n+    pub post_link_objects: Vec<String>,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -641,7 +635,6 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n-            pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n@@ -675,12 +668,8 @@ impl Default for TargetOptions {\n             position_independent_executables: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n-            pre_link_objects_exe_crt: Vec::new(),\n-            pre_link_objects_exe_crt_sys: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n-            post_link_objects_crt: Vec::new(),\n-            post_link_objects_crt_sys: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -899,15 +888,10 @@ impl Target {\n         key!(is_builtin, bool);\n         key!(linker, optional);\n         key!(pre_link_args, link_args);\n-        key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n-        key!(pre_link_objects_exe_crt, list);\n-        key!(pre_link_objects_exe_crt_sys, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n-        key!(post_link_objects_crt, list);\n-        key!(post_link_objects_crt_sys, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1109,15 +1093,10 @@ impl ToJson for Target {\n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(link_args - pre_link_args);\n-        target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n-        target_option_val!(pre_link_objects_exe_crt);\n-        target_option_val!(pre_link_objects_exe_crt_sys);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n-        target_option_val!(post_link_objects_crt);\n-        target_option_val!(post_link_objects_crt_sys);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}, {"sha": "2cb0b4ccf2652e23addd8fab49c020f7c9781490", "filename": "src/test/run-make-fulldeps/issue-36710/Makefile", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6a1979e2046a8eb56900f3191ef69d11e7455e3/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c6a1979e2046a8eb56900f3191ef69d11e7455e3/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile?ref=c6a1979e2046a8eb56900f3191ef69d11e7455e3", "patch": "@@ -1,12 +0,0 @@\n--include ../tools.mk\n-\n-all: foo\n-\t$(call RUN,foo)\n-\n-foo: foo.rs $(call NATIVE_STATICLIB,foo)\n-\t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n-\n-$(TMPDIR)/libfoo.o: foo.cpp\n-\t$(call COMPILE_OBJ_CXX,$@,$<)\n-\n-.PHONY: all"}, {"sha": "fbd0ead7a506cb9de7ea3766d3b8c4a68c1a7738", "filename": "src/test/run-make-fulldeps/issue-36710/foo.cpp", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c6a1979e2046a8eb56900f3191ef69d11e7455e3/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6a1979e2046a8eb56900f3191ef69d11e7455e3/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp?ref=c6a1979e2046a8eb56900f3191ef69d11e7455e3", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdint.h>\n-\n-struct A {\n-    A() { v = 1234; }\n-    ~A() { v = 1; }\n-    uint32_t v;\n-};\n-\n-A a;\n-\n-extern \"C\" {\n-    uint32_t get() {\n-        return a.v;\n-    }\n-}"}, {"sha": "6e50566ddfde02850b20ff9acf743915ad94d7f3", "filename": "src/test/run-make-fulldeps/issue-36710/foo.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6a1979e2046a8eb56900f3191ef69d11e7455e3/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a1979e2046a8eb56900f3191ef69d11e7455e3/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs?ref=c6a1979e2046a8eb56900f3191ef69d11e7455e3", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests that linking to C++ code with global destructors works.\n-\n-extern { fn get() -> u32; }\n-\n-fn main() {\n-    let i = unsafe { get() };\n-    assert_eq!(i, 1234);\n-}"}, {"sha": "af1707de6c02f52432cfc241cca0df4f9e06ad70", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -59,14 +59,12 @@ endif\n \n ifdef IS_MSVC\n COMPILE_OBJ = $(CC) -c -Fo:`cygpath -w $(1)` $(2)\n-COMPILE_OBJ_CXX = $(CXX) -c -Fo:`cygpath -w $(1)` $(2)\n NATIVE_STATICLIB_FILE = $(1).lib\n NATIVE_STATICLIB = $(TMPDIR)/$(call NATIVE_STATICLIB_FILE,$(1))\n OUT_EXE=-Fe:`cygpath -w $(TMPDIR)/$(call BIN,$(1))` \\\n \t-Fo:`cygpath -w $(TMPDIR)/$(1).obj`\n else\n COMPILE_OBJ = $(CC) -c -o $(1) $(2)\n-COMPILE_OBJ_CXX = $(CXX) -c -o $(1) $(2)\n NATIVE_STATICLIB_FILE = lib$(1).a\n NATIVE_STATICLIB = $(call STATICLIB,$(1))\n OUT_EXE=-o $(TMPDIR)/$(1)"}, {"sha": "140c90aaeacc13dca77768aa7e126665c9678fbf", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "patch": "@@ -2502,7 +2502,7 @@ impl<'test> TestCx<'test> {\n                 .env(\"IS_WINDOWS\", \"1\")\n                 .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n                 .env(\"CC\", format!(\"'{}' {}\", self.config.cc, cflags))\n-                .env(\"CXX\", format!(\"'{}'\", &self.config.cxx));\n+                .env(\"CXX\", &self.config.cxx);\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n                 .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags))"}]}