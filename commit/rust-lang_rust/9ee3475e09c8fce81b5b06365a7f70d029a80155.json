{"sha": "9ee3475e09c8fce81b5b06365a7f70d029a80155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTM0NzVlMDljOGZjZTgxYjViMDYzNjVhN2Y3MGQwMjlhODAxNTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-10T00:03:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-10T00:06:40Z"}, "message": "Rewrite second pass of collect_item_types to use fold, therefore process all items in crate. Add testcase to check.", "tree": {"sha": "248109cb28a5f8edae035fe2d635ed6235d766ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248109cb28a5f8edae035fe2d635ed6235d766ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee3475e09c8fce81b5b06365a7f70d029a80155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee3475e09c8fce81b5b06365a7f70d029a80155", "html_url": "https://github.com/rust-lang/rust/commit/9ee3475e09c8fce81b5b06365a7f70d029a80155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee3475e09c8fce81b5b06365a7f70d029a80155/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c9dc2ca52cd4ab4d37734eeb8fd21f254162afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9dc2ca52cd4ab4d37734eeb8fd21f254162afe", "html_url": "https://github.com/rust-lang/rust/commit/1c9dc2ca52cd4ab4d37734eeb8fd21f254162afe"}], "stats": {"total": 102, "additions": 68, "deletions": 34}, "files": [{"sha": "150221c8a57043a4cbf45f21d1043466ca8a7bc1", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ee3475e09c8fce81b5b06365a7f70d029a80155/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9ee3475e09c8fce81b5b06365a7f70d029a80155/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=9ee3475e09c8fce81b5b06365a7f70d029a80155", "patch": "@@ -549,6 +549,7 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         rec-auto.rs \\\n                         rec-tup.rs \\\n                         return-nil.rs \\\n+                        type-in-nested-module.rs \\\n                         tup.rs \\\n                         u32-decr.rs \\\n                         u8-incr.rs \\"}, {"sha": "0e288d51b38b09db9547977def45d1fba0260896", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 67, "deletions": 34, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/9ee3475e09c8fce81b5b06365a7f70d029a80155/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee3475e09c8fce81b5b06365a7f70d029a80155/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9ee3475e09c8fce81b5b06365a7f70d029a80155", "patch": "@@ -461,52 +461,85 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         ret id_to_ty_item;\n     }\n     auto fld_1 = fold.new_identity_fold[@ty_item_table]();\n-    auto f = collect;\n-    fld_1 = @rec(update_env_for_item = f with *fld_1);\n+    fld_1 = @rec(update_env_for_item = bind collect(_, _)\n+                 with *fld_1);\n     fold.fold_crate[@ty_item_table](id_to_ty_item, fld_1, crate);\n \n \n \n     // Second pass: translate the types of all items.\n-    auto item_to_ty = @common.new_def_hash[@ty]();\n-    let vec[@ast.item] items_t = vec();\n-    for (@ast.item it in module.items) {\n-        let ast.item_ result;\n-        alt (it.node) {\n-            case (ast.item_const(?ident, ?at, ?e, ?def_id, _)) {\n-                auto t = ty_of_item(id_to_ty_item, item_to_ty, it);\n-                result = ast.item_const(ident, at, e, def_id,\n-                                        ast.ann_type(t));\n-            }\n-            case (ast.item_fn(?ident, ?fn_info, ?tps, ?def_id, _)) {\n-                // TODO: type-params\n+    let @ty_table item_to_ty = @common.new_def_hash[@ty]();\n \n-                auto t = ty_of_item(id_to_ty_item, item_to_ty, it);\n-                result = ast.item_fn(ident, fn_info, tps, def_id,\n-                                     ast.ann_type(t));\n-            }\n-            case (ast.item_ty(?ident, ?referent_ty, ?tps, ?def_id, _)) {\n-                auto t = ty_of_item(id_to_ty_item, item_to_ty, it);\n-                auto ann = ast.ann_type(t);\n-                result = ast.item_ty(ident, referent_ty, tps, def_id, ann);\n-            }\n+    type env = rec(@ty_item_table id_to_ty_item,\n+                   @ty_table item_to_ty);\n+    let @env e = @rec(id_to_ty_item=id_to_ty_item,\n+                      item_to_ty=item_to_ty);\n+\n+    fn convert(&@env e, @ast.item i) -> @env {\n+        alt (i.node) {\n             case (ast.item_mod(_, _, _)) {\n-                result = it.node;\n+                // ignore item_mod, it has no type.\n             }\n-            case (ast.item_tag(?ident, ?variants, ?tps, ?tag_id)) {\n-                auto variants_t = get_tag_variant_types(id_to_ty_item,\n-                                                        item_to_ty,\n-                                                        tag_id,\n-                                                        variants);\n-                result = ast.item_tag(ident, variants_t, tps, tag_id);\n+            case (_) {\n+                // This call populates the ty_table with the converted type of\n+                // the item in passing; we don't need to do anything else.\n+                ty_of_item(e.id_to_ty_item, e.item_to_ty, i);\n             }\n         }\n-        items_t += vec(@fold.respan[ast.item_](it.span, result));\n+        ret e;\n+    }\n+\n+    fn fold_item_const(&@env e, &span sp, ast.ident i,\n+                       @ast.ty t, @ast.expr ex,\n+                       ast.def_id id, ast.ann a) -> @ast.item {\n+        check (e.item_to_ty.contains_key(id));\n+        auto ty = e.item_to_ty.get(id);\n+        auto item = ast.item_const(i, t, ex, id,\n+                                   ast.ann_type(ty));\n+        ret @fold.respan[ast.item_](sp, item);\n+    }\n+\n+    fn fold_item_fn(&@env e, &span sp, ast.ident i,\n+                    &ast._fn f, vec[ast.ty_param] ty_params,\n+                    ast.def_id id, ast.ann a) -> @ast.item {\n+        check (e.item_to_ty.contains_key(id));\n+        auto ty = e.item_to_ty.get(id);\n+        auto item = ast.item_fn(i, f, ty_params, id,\n+                                ast.ann_type(ty));\n+        ret @fold.respan[ast.item_](sp, item);\n+    }\n+\n+    fn fold_item_ty(&@env e, &span sp, ast.ident i,\n+                    @ast.ty t, vec[ast.ty_param] ty_params,\n+                    ast.def_id id, ast.ann a) -> @ast.item {\n+        check (e.item_to_ty.contains_key(id));\n+        auto ty = e.item_to_ty.get(id);\n+        auto item = ast.item_ty(i, t, ty_params, id,\n+                                ast.ann_type(ty));\n+        ret @fold.respan[ast.item_](sp, item);\n+    }\n+\n+    fn fold_item_tag(&@env e, &span sp, ast.ident i,\n+                     vec[ast.variant] variants,\n+                     vec[ast.ty_param] ty_params,\n+                     ast.def_id id) -> @ast.item {\n+        auto variants_t = get_tag_variant_types(e.id_to_ty_item,\n+                                                e.item_to_ty,\n+                                                id, variants);\n+        auto item = ast.item_tag(i, variants_t, ty_params, id);\n+        ret @fold.respan[ast.item_](sp, item);\n     }\n \n-    auto module_t = rec(items=items_t, index=module.index);\n-    ret tup(@fold.respan[ast.crate_](crate.span, rec(module=module_t)),\n-            item_to_ty);\n+    auto fld_2 = fold.new_identity_fold[@env]();\n+    fld_2 =\n+        @rec(update_env_for_item = bind convert(_,_),\n+             fold_item_const = bind fold_item_const(_,_,_,_,_,_,_),\n+             fold_item_fn    = bind fold_item_fn(_,_,_,_,_,_,_),\n+             fold_item_ty    = bind fold_item_ty(_,_,_,_,_,_,_),\n+             fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)\n+             with *fld_2);\n+    auto crate_ = fold.fold_crate[@env](e, fld_2, crate);\n+    ret tup(crate_, item_to_ty);\n }\n \n // Expression utilities"}]}