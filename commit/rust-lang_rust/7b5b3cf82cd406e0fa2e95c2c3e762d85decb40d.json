{"sha": "7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d", "node_id": "C_kwDOAAsO6NoAKDdiNWIzY2Y4MmNkNDA2ZTBmYTJlOTVjMmMzZTc2MmQ4NWRlY2I0MGQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-15T05:29:52Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-17T20:08:08Z"}, "message": "Abstract the pretty printer's ringbuffer to be infinitely sized", "tree": {"sha": "f7c2e4d6874a1c0181e7d924500e5c679616bf60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c2e4d6874a1c0181e7d924500e5c679616bf60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHlzKgACgkQ+boUO5X/\nbYKiRw//ZnH97VMaDBvR+6GI60CeD4JMnTisxDGrKw+5DGG6C5JohAKZ3j9SUqjz\nndpFbdNCL/l6P+eFv8cPsSQR6aK27Kp4/VJGL1mDKWh5fJrsV/bqoGfwgkPs0xtN\nQ926m4rs+VUQU0lnambbWZzg5cS5DTYyWojagqb6mtFeHYGNjS56EmXZllIGmSdE\nX/++w+u/jM1pJdKmdC+tbkVfWmSjJYc0+RpTIkhfchpsrdaBOfZMTKOubI9QWhjw\nNZE4qphe+haM2xsRuucT5OtzwsclVRrLG3FMSU/Bm6ImKHS5HQzEgsYBVVrIEhme\n9xMexzwjoTavmHT1a9tkvWFyM5rm6oF0R/kYZBz2Ci3r4vcO6OUMOBAB9tWhYFqa\nmb5i1Dm44yJMuEpx2PG3yhsjLqW+7EZIsEgHJn/KEtE2UkQ4m+3oEab3Q0CoR/Q9\nPFiojv58lJdsQ3Lc/bx11lrVkvhmUEyF7LFA1htJrIkVJ/+NyGgzn32zLwrhAqf7\nysdLjIv4OZFVBcQ734BfEz+gAiRAFxsMz+2XbfLibvHLyioysdGbeBt+WXHs/K5y\nP2qAv3lF0qOEGLJOd6uWQ+wCim8V0kLem6aFc1zr40qIn3zhY/Vp//h5j//c0RzI\nKeYH8bceWCVge22ZhsihLkzY2TFrBvw8wfsqk/b+q+a+KNPiwlw=\n=wCKR\n-----END PGP SIGNATURE-----", "payload": "tree f7c2e4d6874a1c0181e7d924500e5c679616bf60\nparent ee5d8d37baaf5b5a81a98396952839c73ae41c68\nauthor David Tolnay <dtolnay@gmail.com> 1642224592 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642450088 -0800\n\nAbstract the pretty printer's ringbuffer to be infinitely sized\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d", "html_url": "https://github.com/rust-lang/rust/commit/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5d8d37baaf5b5a81a98396952839c73ae41c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5d8d37baaf5b5a81a98396952839c73ae41c68", "html_url": "https://github.com/rust-lang/rust/commit/ee5d8d37baaf5b5a81a98396952839c73ae41c68"}], "stats": {"total": 89, "additions": 67, "deletions": 22}, "files": [{"sha": "ad9d15f1ce345811735a8c6944b5bf0121db95cd", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d", "patch": "@@ -132,6 +132,9 @@\n //! methods called `Printer::scan_*`, and the 'PRINT' process is the\n //! method called `Printer::print`.\n \n+mod ring;\n+\n+use ring::RingBuffer;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::fmt;\n@@ -190,8 +193,7 @@ impl fmt::Display for Token {\n     }\n }\n \n-fn buf_str(buf: &[BufEntry], left: usize, right: usize, lim: usize) -> String {\n-    let n = buf.len();\n+fn buf_str(buf: &RingBuffer<BufEntry>, left: usize, right: usize, lim: usize) -> String {\n     let mut i = left;\n     let mut l = lim;\n     let mut s = String::from(\"[\");\n@@ -202,7 +204,6 @@ fn buf_str(buf: &[BufEntry], left: usize, right: usize, lim: usize) -> String {\n         }\n         s.push_str(&format!(\"{}={}\", buf[i].size, &buf[i].token));\n         i += 1;\n-        i %= n;\n     }\n     s.push(']');\n     s\n@@ -224,7 +225,6 @@ const SIZE_INFINITY: isize = 0xffff;\n \n pub struct Printer {\n     out: String,\n-    buf_max_len: usize,\n     /// Width of lines we're constrained to\n     margin: isize,\n     /// Number of spaces left on line\n@@ -234,7 +234,7 @@ pub struct Printer {\n     /// Index of right side of input stream\n     right: usize,\n     /// Ring-buffer of tokens and calculated sizes\n-    buf: Vec<BufEntry>,\n+    buf: RingBuffer<BufEntry>,\n     /// Running size of stream \"...left\"\n     left_total: isize,\n     /// Running size of stream \"...right\"\n@@ -267,19 +267,16 @@ impl Default for BufEntry {\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        // Yes 55, it makes the ring buffers big enough to never fall behind.\n-        let n: usize = 55 * linewidth;\n         debug!(\"Printer::new {}\", linewidth);\n+        let mut buf = RingBuffer::new();\n+        buf.advance_right();\n         Printer {\n             out: String::new(),\n-            buf_max_len: n,\n             margin: linewidth as isize,\n             space: linewidth as isize,\n             left: 0,\n             right: 0,\n-            // Initialize a single entry; advance_right() will extend it on demand\n-            // up to `buf_max_len` elements.\n-            buf: vec![BufEntry::default()],\n+            buf,\n             left_total: 0,\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n@@ -308,8 +305,8 @@ impl Printer {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.left = 0;\n-            self.right = 0;\n+            self.right = self.left;\n+            self.buf.truncate(1);\n         } else {\n             self.advance_right();\n         }\n@@ -332,8 +329,8 @@ impl Printer {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.left = 0;\n-            self.right = 0;\n+            self.right = self.left;\n+            self.buf.truncate(1);\n         } else {\n             self.advance_right();\n         }\n@@ -400,12 +397,7 @@ impl Printer {\n \n     fn advance_right(&mut self) {\n         self.right += 1;\n-        self.right %= self.buf_max_len;\n-        // Extend the buf if necessary.\n-        if self.right == self.buf.len() {\n-            self.buf.push(BufEntry::default());\n-        }\n-        assert_ne!(self.right, self.left);\n+        self.buf.advance_right();\n     }\n \n     fn advance_left(&mut self) {\n@@ -437,8 +429,8 @@ impl Printer {\n                 break;\n             }\n \n+            self.buf.advance_left();\n             self.left += 1;\n-            self.left %= self.buf_max_len;\n \n             left_size = self.buf[self.left].size;\n         }"}, {"sha": "7e4e353ef1f8c1e3eb89ac5d3bf75deb70a7b761", "filename": "compiler/rustc_ast_pretty/src/pp/ring.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs?ref=7b5b3cf82cd406e0fa2e95c2c3e762d85decb40d", "patch": "@@ -0,0 +1,53 @@\n+use std::collections::VecDeque;\n+use std::ops::{Index, IndexMut};\n+\n+/// A view onto a finite range of an infinitely long sequence of T.\n+///\n+/// The Ts are indexed 0..infinity. A RingBuffer begins as a view of elements\n+/// 0..0 (i.e. nothing). The user of the RingBuffer advances its left and right\n+/// position independently, although only in the positive direction, and only\n+/// with left <= right at all times.\n+///\n+/// Holding a RingBuffer whose view is elements left..right gives the ability to\n+/// use Index and IndexMut to access elements i in the infinitely long queue for\n+/// which left <= i < right.\n+pub struct RingBuffer<T> {\n+    data: VecDeque<T>,\n+    // Abstract index of data[0] in the infinitely sized queue.\n+    offset: usize,\n+}\n+\n+impl<T> RingBuffer<T> {\n+    pub fn new() -> Self {\n+        RingBuffer { data: VecDeque::new(), offset: 0 }\n+    }\n+\n+    pub fn advance_right(&mut self)\n+    where\n+        T: Default,\n+    {\n+        self.data.push_back(T::default());\n+    }\n+\n+    pub fn advance_left(&mut self) {\n+        self.data.pop_front().unwrap();\n+        self.offset += 1;\n+    }\n+\n+    pub fn truncate(&mut self, len: usize) {\n+        self.data.truncate(len);\n+    }\n+}\n+\n+impl<T> Index<usize> for RingBuffer<T> {\n+    type Output = T;\n+    fn index(&self, index: usize) -> &Self::Output {\n+        &self.data[index.checked_sub(self.offset).unwrap()]\n+    }\n+}\n+\n+impl<T> IndexMut<usize> for RingBuffer<T> {\n+    fn index_mut(&mut self, index: usize) -> &mut Self::Output {\n+        &mut self.data[index.checked_sub(self.offset).unwrap()]\n+    }\n+}"}]}