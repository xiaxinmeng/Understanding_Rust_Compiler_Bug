{"sha": "36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "node_id": "C_kwDOAAsO6NoAKDM2ZWU2NmM2YzVlNWU1ZjFhMTMyZmFmMjhjNmE1ZDI4ZTk1MGEyYmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T03:43:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T17:24:36Z"}, "message": "Check impl's where clauses in consider_impl_candidate in experimental solver", "tree": {"sha": "9d983e4591ecd98242aba61852079e531092f04f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d983e4591ecd98242aba61852079e531092f04f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "html_url": "https://github.com/rust-lang/rust/commit/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d16171d7eebc08057a46aeed887252e7cc286b", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d16171d7eebc08057a46aeed887252e7cc286b", "html_url": "https://github.com/rust-lang/rust/commit/67d16171d7eebc08057a46aeed887252e7cc286b"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "3d649bea19ddfc966ed0f9ceb3e659e12f4a0950", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "patch": "@@ -131,8 +131,14 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             else {\n                 return\n             };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let where_clause_bounds = tcx\n+                .predicates_of(impl_def_id)\n+                .instantiate(tcx, impl_substs)\n+                .predicates\n+                .into_iter()\n+                .map(|pred| goal.with(tcx, pred));\n+\n+            let nested_goals = obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n             let Ok(trait_ref_certainty) = acx.cx.evaluate_all(acx.infcx, nested_goals) else { return };\n \n             let Some(assoc_def) = fetch_eligible_assoc_item_def("}, {"sha": "c69cc39acb53cea516568532d109556cfaee5a86", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "patch": "@@ -71,7 +71,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         goal: Goal<'tcx, TraitPredicate<'tcx>>,\n         impl_def_id: DefId,\n     ) {\n-        let impl_trait_ref = acx.cx.tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+        let tcx = acx.cx.tcx;\n+\n+        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n         if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n@@ -81,7 +83,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         acx.infcx.probe(|_| {\n             let impl_substs = acx.infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n-            let impl_trait_ref = impl_trait_ref.subst(acx.cx.tcx, impl_substs);\n+            let impl_trait_ref = impl_trait_ref.subst(tcx, impl_substs);\n \n             let Ok(InferOk { obligations, .. }) = acx\n                 .infcx\n@@ -92,8 +94,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             else {\n                 return\n             };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let where_clause_bounds = tcx\n+                .predicates_of(impl_def_id)\n+                .instantiate(tcx, impl_substs)\n+                .predicates\n+                .into_iter()\n+                .map(|pred| goal.with(tcx, pred));\n+\n+            let nested_goals =\n+                obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n \n             let Ok(certainty) = acx.cx.evaluate_all(acx.infcx, nested_goals) else { return };\n             acx.try_insert_candidate(CandidateSource::Impl(impl_def_id), certainty);"}]}