{"sha": "58e1234cddd996378cb9df6bed537b9c08a6df73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTEyMzRjZGRkOTk2Mzc4Y2I5ZGY2YmVkNTM3YjljMDhhNmRmNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-27T14:23:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-27T14:23:02Z"}, "message": "Auto merge of #44884 - arielb1:pack-safe, r=nikomatsakis,eddyb\n\nMake accesses to fields of packed structs unsafe\n\nTo handle packed structs with destructors (which you'll think are a rare\ncase, but the `#[repr(packed)] struct Packed<T>(T);` pattern is\never-popular, which requires handling packed structs with destructors to\navoid monomorphization-time errors), drops of subfields of packed\nstructs should drop a local move of the field instead of the original\none.\n\nThat's it, I think I'll use a strategy suggested by @Zoxc, where this mir\n```\ndrop(packed_struct.field)\n```\n\nis replaced by\n```\ntmp0 = packed_struct.field;\ndrop tmp0\n```\n\ncc #27060 - this should deal with that issue after codegen of drop glue\nis updated.\n\nThe new errors need to be changed to future-compatibility warnings, but\nI'll rather do a crater run first with them as errors to assess the\nimpact.\n\ncc @eddyb\n\nThings which still need to be done for this:\n - [ ] - handle `repr(packed)` structs in `derive` the same way I did in `Span`, and use derive there again\n - [ ] - implement the \"fix packed drops\" pass and call it in both the MIR shim and validated MIR pipelines\n - [ ] - do a crater run\n - [ ] - convert the errors to compatibility warnings", "tree": {"sha": "e728b9ff4fed7dd6ab051b63167ee379075edeb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e728b9ff4fed7dd6ab051b63167ee379075edeb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e1234cddd996378cb9df6bed537b9c08a6df73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e1234cddd996378cb9df6bed537b9c08a6df73", "html_url": "https://github.com/rust-lang/rust/commit/58e1234cddd996378cb9df6bed537b9c08a6df73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e1234cddd996378cb9df6bed537b9c08a6df73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5face5f4f58ceb6e68b44594489cafb6eb2e718e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5face5f4f58ceb6e68b44594489cafb6eb2e718e", "html_url": "https://github.com/rust-lang/rust/commit/5face5f4f58ceb6e68b44594489cafb6eb2e718e"}, {"sha": "f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "html_url": "https://github.com/rust-lang/rust/commit/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518"}], "stats": {"total": 1258, "additions": 1026, "deletions": 232}, "files": [{"sha": "e5e9775a924b4746db1f10bd695c736605d27a1c", "filename": "src/Cargo.lock", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -81,7 +81,7 @@ dependencies = [\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -118,7 +118,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"bitflags\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -127,14 +127,14 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -152,8 +152,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -200,8 +200,8 @@ dependencies = [\n  \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -218,8 +218,8 @@ name = \"cargo_metadata\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -277,10 +277,10 @@ dependencies = [\n  \"clippy_lints 0.0.171\",\n  \"compiletest_rs 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -293,22 +293,22 @@ version = \"0.0.171\"\n dependencies = [\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.26\"\n+version = \"0.1.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -342,7 +342,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n- \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -358,7 +358,7 @@ name = \"compiletest_rs\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -397,8 +397,8 @@ version = \"0.13.0\"\n dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -433,7 +433,7 @@ dependencies = [\n  \"cssparser-macros 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"procedural-masquerade 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"procedural-masquerade 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -444,7 +444,7 @@ version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"procedural-masquerade 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"procedural-masquerade 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -504,7 +504,7 @@ dependencies = [\n \n [[package]]\n name = \"diff\"\n-version = \"0.1.10\"\n+version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -520,10 +520,10 @@ name = \"docopt\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -545,7 +545,7 @@ dependencies = [\n \n [[package]]\n name = \"either\"\n-version = \"1.3.0\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -579,15 +579,15 @@ name = \"error-chain\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"error-chain\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -746,12 +746,12 @@ name = \"handlebars\"\n version = \"0.29.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -774,20 +774,20 @@ dependencies = [\n \n [[package]]\n name = \"html-diff\"\n-version = \"0.0.4\"\n+version = \"0.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kuchiki 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"html5ever\"\n-version = \"0.18.0\"\n+version = \"0.20.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"markup5ever 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -814,7 +814,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"globset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -842,7 +842,7 @@ dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -854,7 +854,7 @@ name = \"itertools\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"either 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -878,8 +878,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -894,11 +894,11 @@ dependencies = [\n \n [[package]]\n name = \"kuchiki\"\n-version = \"0.5.1\"\n+version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cssparser 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"html5ever 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"html5ever 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"selectors 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -909,16 +909,16 @@ version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.9\"\n+version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -944,7 +944,7 @@ version = \"0.6.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -958,7 +958,7 @@ name = \"libssh2-sys\"\n version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1003,15 +1003,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"markup5ever\"\n-version = \"0.3.2\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tendril 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tendril 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1028,13 +1028,13 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1197,7 +1197,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1256,7 +1256,7 @@ dependencies = [\n \n [[package]]\n name = \"percent-encoding\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1319,7 +1319,7 @@ dependencies = [\n \n [[package]]\n name = \"procedural-masquerade\"\n-version = \"0.1.3\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1379,7 +1379,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"clap 2.27.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1466,7 +1466,7 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jsonrpc-core 7.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1475,8 +1475,8 @@ dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-nightly 0.2.15\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1500,8 +1500,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1524,8 +1524,8 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1550,7 +1550,7 @@ name = \"rustc\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -1598,7 +1598,7 @@ dependencies = [\n name = \"rustc_apfloat\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n ]\n \n@@ -1609,7 +1609,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1628,7 +1628,7 @@ name = \"rustc_binaryen\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1674,7 +1674,7 @@ dependencies = [\n name = \"rustc_cratesio_shim\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1758,7 +1758,7 @@ dependencies = [\n name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n@@ -1771,7 +1771,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1797,7 +1797,7 @@ dependencies = [\n name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -1817,7 +1817,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1892,7 +1892,7 @@ dependencies = [\n name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1939,7 +1939,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1967,7 +1967,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"html-diff 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1984,17 +1984,17 @@ name = \"rustfmt-nightly\"\n version = \"0.2.15\"\n dependencies = [\n  \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2049,7 +2049,7 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2059,12 +2059,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.19\"\n+version = \"1.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.19\"\n+version = \"1.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2086,7 +2086,7 @@ name = \"serde_ignored\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2097,7 +2097,7 @@ dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2182,10 +2182,10 @@ version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2208,7 +2208,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"strings\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2241,7 +2241,7 @@ dependencies = [\n name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2326,7 +2326,7 @@ dependencies = [\n \n [[package]]\n name = \"tendril\"\n-version = \"0.3.1\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2403,7 +2403,7 @@ name = \"thread_local\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2424,7 +2424,7 @@ name = \"toml\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2498,15 +2498,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"url_serde\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2622,17 +2622,17 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n \"checksum ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35c7a5669cb64f085739387e1308b74e6d44022464b7f1b63bbd4ceb6379ec31\"\n \"checksum atty 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"21e50800ec991574876040fff8ee46b136a53e985286fbe6a3bdfe6421b78860\"\n-\"checksum backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99f2ce94e22b8e664d95c57fff45b98a966c2252b60691d0b7aeeccd88d70983\"\n+\"checksum backtrace 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8709cc7ec06f6f0ae6c2c7e12f6ed41540781f72b488d83734978295ceae182e\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n-\"checksum bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5cde24d1b2e2216a726368b2363a273739c91f4e3eb4e0dd12d672d396ad989\"\n+\"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9b13a57efd6b30ecd6598ebdb302cca617930b5470647570468a65d12ef9719\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum clap 2.27.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1b8c532887f1a292d17de05ae858a8fe50a301e196f9ef0ddb7ccd0d1d00f180\"\n-\"checksum cmake 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"357c07e7a1fc95732793c1edb5901e1a1f305cfcf63a90eb12dbd22bdb6b789d\"\n+\"checksum cmake 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e14cd15a7cbc2c6a905677e54b831ee91af2ff43b352010f6133236463b65cac\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n \"checksum compiletest_rs 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86f4663adfd113e17109c35c2067194eca782a5baf9c90f4696ca13d04631adb\"\n@@ -2648,11 +2648,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n \"checksum derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"415f627ab054041c3eb748c2e1da0ef751989f5f0c386b63a098e545854a98ba\"\n-\"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n+\"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b5b93718f8b3e5544fcc914c43de828ca6c6ace23e0332c6080a2977b49787a\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e45aa15fe0a8a8f511e6d834626afd55e49b62e5c8802e18328a87e8a8f6065c\"\n-\"checksum either 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e311a7479512fbdf858fb54d91ec59f3b9f85bc0113659f46bba12b199d273ce\"\n+\"checksum either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"740178ddf48b1a9e878e6d6509a1442a2d42fd2928aae8e7a6f8a36fb01981b3\"\n \"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n@@ -2676,8 +2676,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb04af2006ea09d985fef82b81e0eb25337e51b691c76403332378a53d521edc\"\n \"checksum hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6a22814455d41612f41161581c2883c0c6a1c41852729b17d5ed88f01e153aa\"\n \"checksum home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f25ae61099d8f3fee8b483df0bd4ecccf4b2731897aad40d50eca1b641fe6db\"\n-\"checksum html-diff 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5298d63081a642508fce965740ddb03a386c5d81bf1fef0579a815cf49cb8c68\"\n-\"checksum html5ever 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a49d5001dd1bddf042ea41ed4e0a671d50b1bf187e66b349d7ec613bdce4ad90\"\n+\"checksum html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9778743e3b3c3679f471f0ed1833c690f19f4a0919e33b281f12ef5f77ad64c6\"\n+\"checksum html5ever 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5bfb46978eb757a603b7dfe2dafb1c62cb4dee3428d8ac1de734d83d6b022d06\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61bb90bdd39e3af69b0172dfc6130f6cd6332bf040fbb9bdd4401d37adbd48b8\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n@@ -2686,9 +2686,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"931b04e5e57d88cc909528f0d701db36a870b72a052648ded8baf80f9f445e0f\"\n \"checksum jsonrpc-core 7.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1acd0f9934da94466d2370f36832b9b19271b4abdfdb5e69f0bcd991ebcd515\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef2ea4f2f7883cd7c6772b06c14abca01a2cc1f75c426cebffcf6b3b925ef9fc\"\n+\"checksum kuchiki 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e03098e8e719c92b7794515dfd5c1724e2b12f5ce1788e61cfa4663f82eba8d8\"\n \"checksum languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d52e477b23bf52cd3ca0f9fc6c5d14be954eec97e3b9cdfbd962d911bd533caf\"\n-\"checksum lazy_static 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c9e5e58fa1a4c3b915a561a78a22ee0cac6ab97dca2504428bc1cb074375f8d5\"\n+\"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \"checksum lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b585b7a6811fb03aa10e74b278a0f00f8dd9b45dc681f148bb29fa5cb61859b\"\n \"checksum libc 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ba3df4dcb460b9dfbd070d41c94c19209620c191b0340b929ce748a2bcd42d2\"\n \"checksum libgit2-sys 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f74b4959cef96898f5123148724fc7dee043b9a6b99f219d948851bfbe53cb2\"\n@@ -2697,7 +2697,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum lzma-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1b93b78f89e8737dac81837fc8f5521ac162abcba902e1a3db949d55346d1da\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n-\"checksum markup5ever 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff834ac7123c6a37826747e5ca09db41fd7a83126792021c2e636ad174bb77d3\"\n+\"checksum markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"047150a0e03b57e638fc45af33a0b63a0362305d5b9f92ecef81df472a4cceb0\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n \"checksum mdbook 0.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8a1ac668292d1e5c7b1c6fd64f70d3a85105b8069a89558a0d67bdb2ff298ca1\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n@@ -2721,15 +2721,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum openssl-sys 0.9.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92867746af30eea7a89feade385f7f5366776f1c52ec6f0de81360373fa88363\"\n \"checksum os_pipe 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"998bfbb3042e715190fe2a41abfa047d7e8cb81374d2977d7f100eacd8619cb1\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n-\"checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356\"\n+\"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n \"checksum phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb325642290f28ee14d8c6201159949a872f220c62af6e110a56ea914fbe42fc\"\n \"checksum phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d62594c0bb54c464f633175d502038177e90309daf2e0158be42ed5f023ce88f\"\n \"checksum phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b07ffcc532ccc85e3afc45865469bf5d9e4ef5bfcf9622e3cfe80c2d275ec03\"\n \"checksum phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e24b0ca9643bdecd0632f2b3da6b1b89bbb0030e0b992afc1113b23a7bc2f2\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n \"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n-\"checksum procedural-masquerade 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ae21842e88415394f6b6fccf1f4af4c98a5bfb3eab92188f2e83409cda0c995\"\n+\"checksum procedural-masquerade 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc1bcafee1590f81acb329ae45ec627b318123f085153913620316ae9a144b2a\"\n \"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n \"checksum pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"378e941dbd392c101f2cb88097fa4d7167bc421d4b88de3ff7dbee503bc3233b\"\n \"checksum pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a656fdb8b6848f896df5e478a0eb9083681663e37dcb77dd16981ff65329fe8b\"\n@@ -2759,8 +2759,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c9cab69e16835717c9b8bd13c29f92b6aa34fe32ce2866b1ab481cf2da8442a\"\n-\"checksum serde_derive 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3bdafe3e71710131a919735916caa5b18c2754ad0d33d8ae5d586ccc804a403e\"\n+\"checksum serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6eda663e865517ee783b0891a3f6eb3a253e0b0dabb46418969ee9635beadd9e\"\n+\"checksum serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"652bc323d694dc925829725ec6c890156d8e70ae5202919869cb00fe2eff3788\"\n \"checksum serde_derive_internals 0.17.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32f1926285523b2db55df263d2aa4eb69ddcfa7a7eade6430323637866b513ab\"\n \"checksum serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190e9765dcedb56be63b6e0993a006c7e3b071a016a304736e4a315dc01fb142\"\n \"checksum serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e4586746d1974a030c48919731ecffd0ed28d0c40749d0d18d43b3a7d6c9b20e\"\n@@ -2773,7 +2773,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum string_cache 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"413fc7852aeeb5472f1986ef755f561ddf0c789d3d796e65f0b6fe293ecd4ef8\"\n \"checksum string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"479cde50c3539481f33906a387f2bd17c8e87cb848c35b6021d41fb81ff9b4d7\"\n \"checksum string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1884d1bc09741d466d9b14e6d37ac89d6909cbcac41dd9ae982d4d063bbedfc\"\n-\"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n+\"checksum strings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa481ee1bc42fc3df8195f91f7cb43cf8f2b71b48bac40bf5381cfaf7e481f3c\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n@@ -2782,7 +2782,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76a302e717e348aa372ff577791c3832395650073b8d8432f8b3cb170b34afde\"\n \"checksum tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"281285b717926caa919ad905ef89c63d75805c7d89437fb873100925a53f2b1b\"\n \"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n-\"checksum tendril 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1b72f8e2f5b73b65c315b1a70c730f24b9d7a25f39e98de8acbe2bb795caea\"\n+\"checksum tendril 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de21546595a0873061940d994bbbc5c35f024ae4fd61ec5c5b159115684f508\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum termcolor 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9065bced9c3e43453aa3d56f1e98590b8455b341d2fa191a1090c0dd0b242c75\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\""}, {"sha": "00c602d033f8fd4eef0bbcb4c0d92fac141eb148", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -479,6 +479,7 @@ define_dep_nodes!( <'tcx>\n     [] BorrowCheck(DefId),\n     [] MirBorrowCheck(DefId),\n     [] UnsafetyCheckResult(DefId),\n+    [] UnsafeDeriveOnReprPacked(DefId),\n \n     [] Reachability,\n     [] MirKeys,"}, {"sha": "d9244c32dc429b6ca847b23d01330e69e0b0d867", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -33,9 +33,28 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });\n impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator, is_cleanup });\n-impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, lint_node_id });\n+impl_stable_hash_for!(struct mir::UnsafetyViolation { source_info, description, kind });\n impl_stable_hash_for!(struct mir::UnsafetyCheckResult { violations, unsafe_blocks });\n \n+impl<'gcx> HashStable<StableHashingContext<'gcx>>\n+for mir::UnsafetyViolationKind {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+\n+        match *self {\n+            mir::UnsafetyViolationKind::General => {}\n+            mir::UnsafetyViolationKind::ExternStatic(lint_node_id) |\n+            mir::UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n+                lint_node_id.hash_stable(hcx, hasher);\n+            }\n+\n+        }\n+    }\n+}\n impl<'gcx> HashStable<StableHashingContext<'gcx>>\n for mir::Terminator<'gcx> {\n     #[inline]"}, {"sha": "ef4a1c8c3994913b249f5eb57e4247a11d0e0436", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -155,6 +155,12 @@ declare_lint! {\n     \"safe access to extern statics was erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub SAFE_PACKED_BORROWS,\n+    Warn,\n+    \"safe borrows of fields of packed structs were was erroneously allowed\"\n+}\n+\n declare_lint! {\n     pub PATTERNS_IN_FNS_WITHOUT_BODY,\n     Warn,\n@@ -247,6 +253,7 @@ impl LintPass for HardwiredLints {\n             RENAMED_AND_REMOVED_LINTS,\n             RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n+            SAFE_PACKED_BORROWS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n             LEGACY_DIRECTORY_OWNERSHIP,\n             LEGACY_IMPORTS,"}, {"sha": "266f60094c30952ef0666a90a0e57f85216a7486", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -1722,11 +1722,18 @@ impl Location {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum UnsafetyViolationKind {\n+    General,\n+    ExternStatic(ast::NodeId),\n+    BorrowPacked(ast::NodeId),\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n     pub description: &'static str,\n-    pub lint_node_id: Option<ast::NodeId>,\n+    pub kind: UnsafetyViolationKind,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "2ca4628ab13f1c85378c3f68e3849d338854c6b7", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 79, "deletions": 46, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -19,8 +19,18 @@ use ty::subst::Subst;\n \n use infer::{InferCtxt, InferOk};\n \n-#[derive(Copy, Clone)]\n-struct InferIsLocal(bool);\n+#[derive(Copy, Clone, Debug)]\n+enum InferIsLocal {\n+    BrokenYes,\n+    Yes,\n+    No\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub enum Conflict {\n+    Upstream,\n+    Downstream\n+}\n \n pub struct OverlapResult<'tcx> {\n     pub impl_header: ty::ImplHeader<'tcx>,\n@@ -126,32 +136,46 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n }\n \n pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                             trait_ref: ty::TraitRef<'tcx>) -> bool\n+                                             trait_ref: ty::TraitRef<'tcx>,\n+                                             broken: bool)\n+                                             -> Option<Conflict>\n {\n-    debug!(\"trait_ref_is_knowable(trait_ref={:?})\", trait_ref);\n-\n-    // if the orphan rules pass, that means that no ancestor crate can\n-    // impl this, so it's up to us.\n-    if orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(false)).is_ok() {\n-        debug!(\"trait_ref_is_knowable: orphan check passed\");\n-        return true;\n+    debug!(\"trait_ref_is_knowable(trait_ref={:?}, broken={:?})\", trait_ref, broken);\n+    let mode = if broken {\n+        InferIsLocal::BrokenYes\n+    } else {\n+        InferIsLocal::Yes\n+    };\n+    if orphan_check_trait_ref(tcx, trait_ref, mode).is_ok() {\n+        // A downstream or cousin crate is allowed to implement some\n+        // substitution of this trait-ref.\n+        debug!(\"trait_ref_is_knowable: downstream crate might implement\");\n+        return Some(Conflict::Downstream);\n     }\n \n-    // if the trait is not marked fundamental, then it's always possible that\n-    // an ancestor crate will impl this in the future, if they haven't\n-    // already\n-    if !trait_ref_is_local_or_fundamental(tcx, trait_ref) {\n-        debug!(\"trait_ref_is_knowable: trait is neither local nor fundamental\");\n-        return false;\n+    if trait_ref_is_local_or_fundamental(tcx, trait_ref) {\n+        // This is a local or fundamental trait, so future-compatibility\n+        // is no concern. We know that downstream/cousin crates are not\n+        // allowed to implement a substitution of this trait ref, which\n+        // means impls could only come from dependencies of this crate,\n+        // which we already know about.\n+        return None;\n+    }\n+    // This is a remote non-fundamental trait, so if another crate\n+    // can be the \"final owner\" of a substitution of this trait-ref,\n+    // they are allowed to implement it future-compatibly.\n+    //\n+    // However, if we are a final owner, then nobody else can be,\n+    // and if we are an intermediate owner, then we don't care\n+    // about future-compatibility, which means that we're OK if\n+    // we are an owner.\n+    if orphan_check_trait_ref(tcx, trait_ref, InferIsLocal::No).is_ok() {\n+        debug!(\"trait_ref_is_knowable: orphan check passed\");\n+        return None;\n+    } else {\n+        debug!(\"trait_ref_is_knowable: nonlocal, nonfundamental, unowned\");\n+        return Some(Conflict::Upstream);\n     }\n-\n-    // find out when some downstream (or cousin) crate could impl this\n-    // trait-ref, presuming that all the parameters were instantiated\n-    // with downstream types. If not, then it could only be\n-    // implemented by an upstream crate, which means that the impl\n-    // must be visible to us, and -- since the trait is fundamental\n-    // -- we can test.\n-    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(true)).is_err()\n }\n \n pub fn trait_ref_is_local_or_fundamental<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n@@ -189,16 +213,16 @@ pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         return Ok(());\n     }\n \n-    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(false))\n+    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal::No)\n }\n \n fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n                                 trait_ref: ty::TraitRef<'tcx>,\n                                 infer_is_local: InferIsLocal)\n                                 -> Result<(), OrphanCheckErr<'tcx>>\n {\n-    debug!(\"orphan_check_trait_ref(trait_ref={:?}, infer_is_local={})\",\n-           trait_ref, infer_is_local.0);\n+    debug!(\"orphan_check_trait_ref(trait_ref={:?}, infer_is_local={:?})\",\n+           trait_ref, infer_is_local);\n \n     // First, create an ordered iterator over all the type parameters to the trait, with the self\n     // type appearing first.\n@@ -212,7 +236,9 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n             // uncovered type parameters.\n             let uncovered_tys = uncovered_tys(tcx, input_ty, infer_is_local);\n             for uncovered_ty in uncovered_tys {\n-                if let Some(param) = uncovered_ty.walk().find(|t| is_type_parameter(t)) {\n+                if let Some(param) = uncovered_ty.walk()\n+                    .find(|t| is_possibly_remote_type(t, infer_is_local))\n+                {\n                     debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n                     return Err(OrphanCheckErr::UncoveredTy(param));\n                 }\n@@ -224,11 +250,11 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n \n         // Otherwise, enforce invariant that there are no type\n         // parameters reachable.\n-        if !infer_is_local.0 {\n-            if let Some(param) = input_ty.walk().find(|t| is_type_parameter(t)) {\n-                debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n-                return Err(OrphanCheckErr::UncoveredTy(param));\n-            }\n+        if let Some(param) = input_ty.walk()\n+            .find(|t| is_possibly_remote_type(t, infer_is_local))\n+        {\n+            debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n+            return Err(OrphanCheckErr::UncoveredTy(param));\n         }\n     }\n \n@@ -250,7 +276,7 @@ fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, infer_is_local: InferIsLocal)\n     }\n }\n \n-fn is_type_parameter(ty: Ty) -> bool {\n+fn is_possibly_remote_type(ty: Ty, _infer_is_local: InferIsLocal) -> bool {\n     match ty.sty {\n         ty::TyProjection(..) | ty::TyParam(..) => true,\n         _ => false,\n@@ -273,7 +299,15 @@ fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal)-> bool {\n+fn def_id_is_local(def_id: DefId, infer_is_local: InferIsLocal) -> bool {\n+    match infer_is_local {\n+        InferIsLocal::Yes => false,\n+        InferIsLocal::No |\n+        InferIsLocal::BrokenYes => def_id.is_local()\n+    }\n+}\n+\n+fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal) -> bool {\n     debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.sty {\n@@ -296,20 +330,19 @@ fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal)-> bool {\n             false\n         }\n \n-        ty::TyInfer(..) => {\n-            infer_is_local.0\n-        }\n-\n-        ty::TyAdt(def, _) => {\n-            def.did.is_local()\n-        }\n+        ty::TyInfer(..) => match infer_is_local {\n+            InferIsLocal::No => false,\n+            InferIsLocal::Yes |\n+            InferIsLocal::BrokenYes => true\n+        },\n \n-        ty::TyForeign(did) => {\n-            did.is_local()\n-        }\n+        ty::TyAdt(def, _) => def_id_is_local(def.did, infer_is_local),\n+        ty::TyForeign(did) => def_id_is_local(did, infer_is_local),\n \n         ty::TyDynamic(ref tt, ..) => {\n-            tt.principal().map_or(false, |p| p.def_id().is_local())\n+            tt.principal().map_or(false, |p| {\n+                def_id_is_local(p.def_id(), infer_is_local)\n+            })\n         }\n \n         ty::TyError => {"}, {"sha": "f236216c096add9f5cb9c25b8f11a46d6d22e08a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -814,7 +814,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // terms of `Fn` etc, but we could probably make this more\n         // precise still.\n         let unbound_input_types = stack.fresh_trait_ref.input_types().any(|ty| ty.is_fresh());\n-        if unbound_input_types && self.intercrate {\n+        if unbound_input_types && self.intercrate && false {\n             debug!(\"evaluate_stack({:?}) --> unbound argument, intercrate -->  ambiguous\",\n                    stack.fresh_trait_ref);\n             // Heuristics: show the diagnostics when there are no candidates in crate.\n@@ -1221,7 +1221,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // bound regions\n         let trait_ref = predicate.skip_binder().trait_ref;\n \n-        coherence::trait_ref_is_knowable(self.tcx(), trait_ref)\n+        coherence::trait_ref_is_knowable(self.tcx(), trait_ref, false).is_none()\n     }\n \n     /// Returns true if the global caches can be used."}, {"sha": "fb3600182d8a6ce0901a1468db316f04eb79e8b7", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -169,6 +169,9 @@ define_maps! { <'tcx>\n     /// The result of unsafety-checking this def-id.\n     [] fn unsafety_check_result: UnsafetyCheckResult(DefId) -> mir::UnsafetyCheckResult,\n \n+    /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error\n+    [] fn unsafe_derive_on_repr_packed: UnsafeDeriveOnReprPacked(DefId) -> (),\n+\n     /// The signature of functions and closures.\n     [] fn fn_sig: FnSignature(DefId) -> ty::PolyFnSig<'tcx>,\n "}, {"sha": "07b97c27a9963b5210742c60702bd7e24bd930a1", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -768,6 +768,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::BorrowCheck => { force!(borrowck, def_id!()); }\n         DepKind::MirBorrowCheck => { force!(mir_borrowck, def_id!()); }\n         DepKind::UnsafetyCheckResult => { force!(unsafety_check_result, def_id!()); }\n+        DepKind::UnsafeDeriveOnReprPacked => { force!(unsafe_derive_on_repr_packed, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }"}, {"sha": "b4d439f0ba80986baaece998791f6cf216a1e5df", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -243,6 +243,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n             reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(SAFE_PACKED_BORROWS),\n+            reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n+        },\n+\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "0fa47d809994736a2f839fc0fe74a47c9369168a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -27,7 +27,8 @@ use syntax_pos::Span;\n use std::fmt;\n use std::iter;\n \n-use transform::{add_call_guards, no_landing_pads, simplify};\n+use transform::{add_moves_for_packed_drops, add_call_guards};\n+use transform::{no_landing_pads, simplify};\n use util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n use util::patch::MirPatch;\n \n@@ -114,6 +115,8 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n+    add_moves_for_packed_drops::add_moves_for_packed_drops(\n+        tcx, &mut result, instance.def_id());\n     no_landing_pads::no_landing_pads(tcx, &mut result);\n     simplify::simplify_cfg(&mut result);\n     add_call_guards::CriticalCallEdges.add_call_guards(&mut result);"}, {"sha": "297bc76d472f50a87060f0c104173339986fb2f6", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,141 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::mir::*;\n+use rustc::ty::TyCtxt;\n+\n+use transform::{MirPass, MirSource};\n+use util::patch::MirPatch;\n+use util;\n+\n+// This pass moves values being dropped that are within a packed\n+// struct to a separate local before dropping them, to ensure that\n+// they are dropped from an aligned address.\n+//\n+// For example, if we have something like\n+// ```Rust\n+//     #[repr(packed)]\n+//     struct Foo {\n+//         dealign: u8,\n+//         data: Vec<u8>\n+//     }\n+//\n+//     let foo = ...;\n+// ```\n+//\n+// We want to call `drop_in_place::<Vec<u8>>` on `data` from an aligned\n+// address. This means we can't simply drop `foo.data` directly, because\n+// its address is not aligned.\n+//\n+// Instead, we move `foo.data` to a local and drop that:\n+// ```\n+//     storage.live(drop_temp)\n+//     drop_temp = foo.data;\n+//     drop(drop_temp) -> next\n+// next:\n+//     storage.dead(drop_temp)\n+// ```\n+//\n+// The storage instructions are required to avoid stack space\n+// blowup.\n+\n+pub struct AddMovesForPackedDrops;\n+\n+impl MirPass for AddMovesForPackedDrops {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          src: MirSource,\n+                          mir: &mut Mir<'tcx>)\n+    {\n+        debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, mir.span);\n+        add_moves_for_packed_drops(tcx, mir, src.def_id);\n+    }\n+}\n+\n+pub fn add_moves_for_packed_drops<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &mut Mir<'tcx>,\n+    def_id: DefId)\n+{\n+    let patch = add_moves_for_packed_drops_patch(tcx, mir, def_id);\n+    patch.apply(mir);\n+}\n+\n+fn add_moves_for_packed_drops_patch<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    def_id: DefId)\n+    -> MirPatch<'tcx>\n+{\n+    let mut patch = MirPatch::new(mir);\n+    let param_env = tcx.param_env(def_id);\n+\n+    for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        let loc = Location { block: bb, statement_index: data.statements.len() };\n+        let terminator = data.terminator();\n+\n+        match terminator.kind {\n+            TerminatorKind::Drop { ref location, .. }\n+                if util::is_disaligned(tcx, mir, param_env, location) =>\n+            {\n+                add_move_for_packed_drop(tcx, mir, &mut patch, terminator,\n+                                         loc, data.is_cleanup);\n+            }\n+            TerminatorKind::DropAndReplace { .. } => {\n+                span_bug!(terminator.source_info.span,\n+                          \"replace in AddMovesForPackedDrops\");\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    patch\n+}\n+\n+fn add_move_for_packed_drop<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    patch: &mut MirPatch<'tcx>,\n+    terminator: &Terminator<'tcx>,\n+    loc: Location,\n+    is_cleanup: bool)\n+{\n+    debug!(\"add_move_for_packed_drop({:?} @ {:?})\", terminator, loc);\n+    let (location, target, unwind) = match terminator.kind {\n+        TerminatorKind::Drop { ref location, target, unwind } =>\n+            (location, target, unwind),\n+        _ => unreachable!()\n+    };\n+\n+    let source_info = terminator.source_info;\n+    let ty = location.ty(mir, tcx).to_ty(tcx);\n+    let temp = patch.new_temp(ty, terminator.source_info.span);\n+\n+    let storage_dead_block = patch.new_block(BasicBlockData {\n+        statements: vec![Statement {\n+            source_info, kind: StatementKind::StorageDead(temp)\n+        }],\n+        terminator: Some(Terminator {\n+            source_info, kind: TerminatorKind::Goto { target }\n+        }),\n+        is_cleanup\n+    });\n+\n+    patch.add_statement(\n+        loc, StatementKind::StorageLive(temp));\n+    patch.add_assign(loc, Lvalue::Local(temp),\n+                     Rvalue::Use(Operand::Consume(location.clone())));\n+    patch.patch_terminator(loc.block, TerminatorKind::Drop {\n+        location: Lvalue::Local(temp),\n+        target: storage_dead_block,\n+        unwind\n+    });\n+}"}, {"sha": "c8a23280079c1c12ce654c690d52afcaed78caf9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 103, "deletions": 36, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -15,14 +15,14 @@ use rustc::ty::maps::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::lint::builtin::{SAFE_EXTERN_STATICS, UNUSED_UNSAFE};\n+use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n \n use syntax::ast;\n \n use std::rc::Rc;\n-\n+use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n@@ -138,6 +138,19 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     lvalue: &Lvalue<'tcx>,\n                     context: LvalueContext<'tcx>,\n                     location: Location) {\n+        if let LvalueContext::Borrow { .. } = context {\n+            if util::is_disaligned(self.tcx, self.mir, self.param_env, lvalue) {\n+                let source_info = self.source_info;\n+                let lint_root =\n+                    self.visibility_scope_info[source_info.scope].lint_root;\n+                self.register_violations(&[UnsafetyViolation {\n+                    source_info,\n+                    description: \"borrow of packed field\",\n+                    kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n+                }], &[]);\n+            }\n+        }\n+\n         match lvalue {\n             &Lvalue::Projection(box Projection {\n                 ref base, ref elem\n@@ -156,26 +169,28 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     ty::TyRawPtr(..) => {\n                         self.require_unsafe(\"dereference of raw pointer\")\n                     }\n-                    ty::TyAdt(adt, _) if adt.is_union() => {\n-                        if context == LvalueContext::Store ||\n-                            context == LvalueContext::Drop\n-                        {\n-                            let elem_ty = match elem {\n-                                &ProjectionElem::Field(_, ty) => ty,\n-                                _ => span_bug!(\n-                                    self.source_info.span,\n-                                    \"non-field projection {:?} from union?\",\n-                                    lvalue)\n-                            };\n-                            if elem_ty.moves_by_default(self.tcx, self.param_env,\n-                                                        self.source_info.span) {\n-                                self.require_unsafe(\n-                                    \"assignment to non-`Copy` union field\")\n+                    ty::TyAdt(adt, _) => {\n+                        if adt.is_union() {\n+                            if context == LvalueContext::Store ||\n+                                context == LvalueContext::Drop\n+                            {\n+                                let elem_ty = match elem {\n+                                    &ProjectionElem::Field(_, ty) => ty,\n+                                    _ => span_bug!(\n+                                        self.source_info.span,\n+                                        \"non-field projection {:?} from union?\",\n+                                        lvalue)\n+                                };\n+                                if elem_ty.moves_by_default(self.tcx, self.param_env,\n+                                                            self.source_info.span) {\n+                                    self.require_unsafe(\n+                                        \"assignment to non-`Copy` union field\")\n+                                } else {\n+                                    // write to non-move union, safe\n+                                }\n                             } else {\n-                                // write to non-move union, safe\n+                                self.require_unsafe(\"access to union field\")\n                             }\n-                        } else {\n-                            self.require_unsafe(\"access to union field\")\n                         }\n                     }\n                     _ => {}\n@@ -195,11 +210,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: \"use of extern static\",\n-                        lint_node_id: Some(lint_root)\n+                        kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n             }\n-        }\n+        };\n         self.super_lvalue(lvalue, context, location);\n     }\n }\n@@ -210,7 +225,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n-            source_info, description, lint_node_id: None\n+            source_info, description, kind: UnsafetyViolationKind::General\n         }], &[]);\n     }\n \n@@ -244,6 +259,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         unsafety_check_result,\n+        unsafe_derive_on_repr_packed,\n         ..*providers\n     };\n }\n@@ -326,6 +342,27 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     }\n }\n \n+fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n+    let lint_node_id = match tcx.hir.as_local_node_id(def_id) {\n+        Some(node_id) => node_id,\n+        None => bug!(\"checking unsafety for non-local def id {:?}\", def_id)\n+    };\n+\n+    // FIXME: when we make this a hard error, this should have its\n+    // own error code.\n+    let message = if !tcx.generics_of(def_id).types.is_empty() {\n+        format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n+                 type parameters (error E0133)\")\n+    } else {\n+        format!(\"#[derive] can't be used on a non-Copy #[repr(packed)] struct \\\n+                 (error E0133)\")\n+    };\n+    tcx.lint_node(SAFE_PACKED_BORROWS,\n+                  lint_node_id,\n+                  tcx.def_span(def_id),\n+                  &message);\n+}\n+\n /// Return the NodeId for an enclosing scope that is also `unsafe`\n fn is_enclosed(tcx: TyCtxt,\n                used_unsafe: &FxHashSet<ast::NodeId>,\n@@ -358,6 +395,22 @@ fn report_unused_unsafe(tcx: TyCtxt, used_unsafe: &FxHashSet<ast::NodeId>, id: a\n     db.emit();\n }\n \n+fn builtin_derive_def_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+    debug!(\"builtin_derive_def_id({:?})\", def_id);\n+    if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n+        if tcx.has_attr(impl_def_id, \"automatically_derived\") {\n+            debug!(\"builtin_derive_def_id({:?}) - is {:?}\", def_id, impl_def_id);\n+            Some(impl_def_id)\n+        } else {\n+            debug!(\"builtin_derive_def_id({:?}) - not automatically derived\", def_id);\n+            None\n+        }\n+    } else {\n+        debug!(\"builtin_derive_def_id({:?}) - not a method\", def_id);\n+        None\n+    }\n+}\n+\n pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n@@ -372,21 +425,35 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation {\n-        source_info, description, lint_node_id\n+        source_info, description, kind\n     } in violations.iter() {\n         // Report an error.\n-        if let Some(lint_node_id) = lint_node_id {\n-            tcx.lint_node(SAFE_EXTERN_STATICS,\n-                          lint_node_id,\n-                          source_info.span,\n-                          &format!(\"{} requires unsafe function or \\\n-                                    block (error E0133)\", description));\n-        } else {\n-            struct_span_err!(\n-                tcx.sess, source_info.span, E0133,\n-                \"{} requires unsafe function or block\", description)\n-                .span_label(source_info.span, description)\n-                .emit();\n+        match kind {\n+            UnsafetyViolationKind::General => {\n+                struct_span_err!(\n+                    tcx.sess, source_info.span, E0133,\n+                    \"{} requires unsafe function or block\", description)\n+                    .span_label(source_info.span, description)\n+                    .emit();\n+            }\n+            UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n+                tcx.lint_node(SAFE_EXTERN_STATICS,\n+                              lint_node_id,\n+                              source_info.span,\n+                              &format!(\"{} requires unsafe function or \\\n+                                        block (error E0133)\", description));\n+            }\n+            UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n+                if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n+                    tcx.unsafe_derive_on_repr_packed(impl_def_id);\n+                } else {\n+                    tcx.lint_node(SAFE_PACKED_BORROWS,\n+                                  lint_node_id,\n+                                  source_info.span,\n+                                  &format!(\"{} requires unsafe function or \\\n+                                            block (error E0133)\", description));\n+                }\n+            }\n         }\n     }\n "}, {"sha": "418d3d220581e1db447f816c9625d7185bb6352f", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -23,6 +23,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n pub mod add_validation;\n+pub mod add_moves_for_packed_drops;\n pub mod clean_end_regions;\n pub mod check_unsafety;\n pub mod simplify_branches;\n@@ -236,7 +237,12 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         // an AllCallEdges pass right before it.\n         add_call_guards::AllCallEdges,\n         add_validation::AddValidation,\n+        // AddMovesForPackedDrops needs to run after drop\n+        // elaboration.\n+        add_moves_for_packed_drops::AddMovesForPackedDrops,\n+\n         simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+\n         // No lifetime analysis based on borrowing can be done from here on out.\n \n         // From here on out, regions are gone."}, {"sha": "afda6e4031c2bae8e102453f45e2665f06d87f18", "filename": "src/librustc_mir/util/alignment.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+use rustc::ty::{self, TyCtxt};\n+use rustc::mir::*;\n+\n+/// Return `true` if this lvalue is allowed to be less aligned\n+/// than its containing struct (because it is within a packed\n+/// struct).\n+pub fn is_disaligned<'a, 'tcx, L>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  local_decls: &L,\n+                                  param_env: ty::ParamEnv<'tcx>,\n+                                  lvalue: &Lvalue<'tcx>)\n+                                  -> bool\n+    where L: HasLocalDecls<'tcx>\n+{\n+    debug!(\"is_disaligned({:?})\", lvalue);\n+    if !is_within_packed(tcx, local_decls, lvalue) {\n+        debug!(\"is_disaligned({:?}) - not within packed\", lvalue);\n+        return false\n+    }\n+\n+    let ty = lvalue.ty(local_decls, tcx).to_ty(tcx);\n+    match tcx.layout_raw(param_env.and(ty)) {\n+        Ok(layout) if layout.align.abi() == 1 => {\n+            // if the alignment is 1, the type can't be further\n+            // disaligned.\n+            debug!(\"is_disaligned({:?}) - align = 1\", lvalue);\n+            false\n+        }\n+        _ => {\n+            debug!(\"is_disaligned({:?}) - true\", lvalue);\n+            true\n+        }\n+    }\n+}\n+\n+fn is_within_packed<'a, 'tcx, L>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 local_decls: &L,\n+                                 lvalue: &Lvalue<'tcx>)\n+                                 -> bool\n+    where L: HasLocalDecls<'tcx>\n+{\n+    let mut lvalue = lvalue;\n+    while let &Lvalue::Projection(box Projection {\n+        ref base, ref elem\n+    }) = lvalue {\n+        match *elem {\n+            // encountered a Deref, which is ABI-aligned\n+            ProjectionElem::Deref => break,\n+            ProjectionElem::Field(..) => {\n+                let ty = base.ty(local_decls, tcx).to_ty(tcx);\n+                match ty.sty {\n+                    ty::TyAdt(def, _) if def.repr.packed() => {\n+                        return true\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+        lvalue = base;\n+    }\n+\n+    false\n+}"}, {"sha": "feea0e2880974b492c3f36e1362e578db3911a2f", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -13,10 +13,12 @@ pub mod elaborate_drops;\n pub mod def_use;\n pub mod patch;\n \n+mod alignment;\n mod graphviz;\n mod pretty;\n pub mod liveness;\n \n+pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n pub use self::graphviz::{write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;"}, {"sha": "0ca259fd44d78020baf2fc30a883e3365b55ff2f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -13,7 +13,7 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Lift, Ty, TyCtxt};\n use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n@@ -224,10 +224,31 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     {\n         self.for_item(item).with_fcx(|fcx, this| {\n             let variants = lookup_fields(fcx);\n+            let def_id = fcx.tcx.hir.local_def_id(item.id);\n+            let packed = fcx.tcx.adt_def(def_id).repr.packed();\n \n             for variant in &variants {\n-                // For DST, all intermediate types must be sized.\n-                let unsized_len = if all_sized || variant.fields.is_empty() { 0 } else { 1 };\n+                // For DST, or when drop needs to copy things around, all\n+                // intermediate types must be sized.\n+                let needs_drop_copy = || {\n+                    packed && {\n+                        let ty = variant.fields.last().unwrap().ty;\n+                        let ty = fcx.tcx.erase_regions(&ty).lift_to_tcx(this.tcx)\n+                            .unwrap_or_else(|| {\n+                                span_bug!(item.span, \"inference variables in {:?}\", ty)\n+                            });\n+                        ty.needs_drop(this.tcx, this.tcx.param_env(def_id))\n+                    }\n+                };\n+                let unsized_len = if\n+                    all_sized ||\n+                    variant.fields.is_empty() ||\n+                    needs_drop_copy()\n+                {\n+                    0\n+                } else {\n+                    1\n+                };\n                 for field in &variant.fields[..variant.fields.len() - unsized_len] {\n                     fcx.register_bound(\n                         field.ty,\n@@ -246,7 +267,6 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 }\n             }\n \n-            let def_id = fcx.tcx.hir.local_def_id(item.id);\n             let predicates = fcx.tcx.predicates_of(def_id).instantiate_identity(fcx.tcx);\n             let predicates = fcx.normalize_associated_types_in(item.span, &predicates);\n             this.check_where_clauses(fcx, item.span, &predicates);"}, {"sha": "55d2df5f28bd9ba91e6f803e7fbec52cbbbb9ff8", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -14,7 +14,7 @@ doctest = false\n env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n pulldown-cmark = { version = \"0.1.0\", default-features = false }\n-html-diff = \"0.0.4\"\n+html-diff = \"0.0.5\"\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "c832f8a934d3d38873d3fe82538ebba5cb0613ad", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -719,7 +719,8 @@ impl Eq for Ipv4Addr {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for Ipv4Addr {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n-        self.inner.s_addr.hash(s)\n+        // `inner` is #[repr(packed)], so we need to copy `s_addr`.\n+        {self.inner.s_addr}.hash(s)\n     }\n }\n "}, {"sha": "c7fa0331c1bd5a9dc55c5f9897edf393212432de", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -74,7 +74,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n             let meta = cx.meta_word(span, Symbol::intern(\"structural_match\"));\n             attrs.push(cx.attribute(span, meta));\n         }\n-        if names.contains(&Symbol::intern(\"Copy\")) && names.contains(&Symbol::intern(\"Clone\")) {\n+        if names.contains(&Symbol::intern(\"Copy\")) {\n             let meta = cx.meta_word(span, Symbol::intern(\"rustc_copy_clone_marker\"));\n             attrs.push(cx.attribute(span, meta));\n         }"}, {"sha": "2b565ca51e9ec92c212d684c624a42a4ece404e3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 82, "deletions": 22, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -393,46 +393,71 @@ fn find_type_parameters(ty: &ast::Ty,\n }\n \n impl<'a> TraitDef<'a> {\n-    pub fn expand(&self,\n+    pub fn expand(self,\n                   cx: &mut ExtCtxt,\n                   mitem: &ast::MetaItem,\n                   item: &'a Annotatable,\n                   push: &mut FnMut(Annotatable)) {\n         self.expand_ext(cx, mitem, item, push, false);\n     }\n \n-    pub fn expand_ext(&self,\n+    pub fn expand_ext(self,\n                       cx: &mut ExtCtxt,\n                       mitem: &ast::MetaItem,\n                       item: &'a Annotatable,\n                       push: &mut FnMut(Annotatable),\n                       from_scratch: bool) {\n         match *item {\n             Annotatable::Item(ref item) => {\n+                let is_packed = item.attrs.iter().any(|attr| {\n+                    attr::find_repr_attrs(&cx.parse_sess.span_diagnostic, attr)\n+                        .contains(&attr::ReprPacked)\n+                });\n+                let has_no_type_params = match item.node {\n+                    ast::ItemKind::Struct(_, ref generics) |\n+                    ast::ItemKind::Enum(_, ref generics) |\n+                    ast::ItemKind::Union(_, ref generics) => {\n+                        generics.ty_params.is_empty()\n+                    }\n+                    _ => {\n+                        // Non-ADT derive is an error, but it should have been\n+                        // set earlier; see\n+                        // libsyntax/ext/expand.rs:MacroExpander::expand()\n+                        return;\n+                    }\n+                };\n+                let is_always_copy =\n+                    attr::contains_name(&item.attrs, \"rustc_copy_clone_marker\") &&\n+                    has_no_type_params;\n+                let use_temporaries = is_packed && is_always_copy;\n+\n                 let newitem = match item.node {\n                     ast::ItemKind::Struct(ref struct_def, ref generics) => {\n-                        self.expand_struct_def(cx, &struct_def, item.ident, generics, from_scratch)\n+                        self.expand_struct_def(cx, &struct_def, item.ident, generics, from_scratch,\n+                                               use_temporaries)\n                     }\n                     ast::ItemKind::Enum(ref enum_def, ref generics) => {\n+                        // We ignore `use_temporaries` here, because\n+                        // `repr(packed)` enums cause an error later on.\n+                        //\n+                        // This can only cause further compilation errors\n+                        // downstream in blatantly illegal code, so it\n+                        // is fine.\n                         self.expand_enum_def(cx, enum_def, &item.attrs,\n                                              item.ident, generics, from_scratch)\n                     }\n                     ast::ItemKind::Union(ref struct_def, ref generics) => {\n                         if self.supports_unions {\n                             self.expand_struct_def(cx, &struct_def, item.ident,\n-                                                   generics, from_scratch)\n+                                                   generics, from_scratch,\n+                                                   use_temporaries)\n                         } else {\n                             cx.span_err(mitem.span,\n                                         \"this trait cannot be derived for unions\");\n                             return;\n                         }\n                     }\n-                    _ => {\n-                        // Non-ADT derive is an error, but it should have been\n-                        // set earlier; see\n-                        // libsyntax/ext/expand.rs:MacroExpander::expand()\n-                        return;\n-                    }\n+                    _ => unreachable!(),\n                 };\n                 // Keep the lint attributes of the previous item to control how the\n                 // generated implementations are linted\n@@ -675,7 +700,8 @@ impl<'a> TraitDef<'a> {\n                          struct_def: &'a VariantData,\n                          type_ident: Ident,\n                          generics: &Generics,\n-                         from_scratch: bool)\n+                         from_scratch: bool,\n+                         use_temporaries: bool)\n                          -> P<ast::Item> {\n         let field_tys: Vec<P<ast::Ty>> = struct_def.fields()\n             .iter()\n@@ -701,7 +727,8 @@ impl<'a> TraitDef<'a> {\n                                                          struct_def,\n                                                          type_ident,\n                                                          &self_args[..],\n-                                                         &nonself_args[..])\n+                                                         &nonself_args[..],\n+                                                         use_temporaries)\n                 };\n \n                 method_def.create_method(cx,\n@@ -958,14 +985,31 @@ impl<'a> MethodDef<'a> {\n     ///         }\n     ///     }\n     /// }\n+    ///\n+    /// // or if A is repr(packed) - note fields are matched by-value\n+    /// // instead of by-reference.\n+    /// impl PartialEq for A {\n+    ///     fn eq(&self, __arg_1: &A) -> bool {\n+    ///         match *self {\n+    ///             A {x: __self_0_0, y: __self_0_1} => {\n+    ///                 match __arg_1 {\n+    ///                     A {x: __self_1_0, y: __self_1_1} => {\n+    ///                         __self_0_0.eq(&__self_1_0) && __self_0_1.eq(&__self_1_1)\n+    ///                     }\n+    ///                 }\n+    ///             }\n+    ///         }\n+    ///     }\n+    /// }\n     /// ```\n     fn expand_struct_method_body<'b>(&self,\n                                      cx: &mut ExtCtxt,\n                                      trait_: &TraitDef<'b>,\n                                      struct_def: &'b VariantData,\n                                      type_ident: Ident,\n                                      self_args: &[P<Expr>],\n-                                     nonself_args: &[P<Expr>])\n+                                     nonself_args: &[P<Expr>],\n+                                     use_temporaries: bool)\n                                      -> P<Expr> {\n \n         let mut raw_fields = Vec::new(); // Vec<[fields of self],\n@@ -977,7 +1021,8 @@ impl<'a> MethodDef<'a> {\n                                                                  struct_path,\n                                                                  struct_def,\n                                                                  &format!(\"__self_{}\", i),\n-                                                                 ast::Mutability::Immutable);\n+                                                                 ast::Mutability::Immutable,\n+                                                                 use_temporaries);\n             patterns.push(pat);\n             raw_fields.push(ident_expr);\n         }\n@@ -1140,7 +1185,6 @@ impl<'a> MethodDef<'a> {\n                                   self_args: Vec<P<Expr>>,\n                                   nonself_args: &[P<Expr>])\n                                   -> P<Expr> {\n-\n         let sp = trait_.span;\n         let variants = &enum_def.variants;\n \n@@ -1512,12 +1556,18 @@ impl<'a> TraitDef<'a> {\n     fn create_subpatterns(&self,\n                           cx: &mut ExtCtxt,\n                           field_paths: Vec<ast::SpannedIdent>,\n-                          mutbl: ast::Mutability)\n+                          mutbl: ast::Mutability,\n+                          use_temporaries: bool)\n                           -> Vec<P<ast::Pat>> {\n         field_paths.iter()\n             .map(|path| {\n+                let binding_mode = if use_temporaries {\n+                    ast::BindingMode::ByValue(ast::Mutability::Immutable)\n+                } else {\n+                    ast::BindingMode::ByRef(mutbl)\n+                };\n                 cx.pat(path.span,\n-                       PatKind::Ident(ast::BindingMode::ByRef(mutbl), (*path).clone(), None))\n+                       PatKind::Ident(binding_mode, (*path).clone(), None))\n             })\n             .collect()\n     }\n@@ -1528,8 +1578,10 @@ impl<'a> TraitDef<'a> {\n          struct_path: ast::Path,\n          struct_def: &'a VariantData,\n          prefix: &str,\n-         mutbl: ast::Mutability)\n-         -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n+         mutbl: ast::Mutability,\n+         use_temporaries: bool)\n+         -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>)\n+    {\n         let mut paths = Vec::new();\n         let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n@@ -1539,12 +1591,18 @@ impl<'a> TraitDef<'a> {\n                 span: sp,\n                 node: ident,\n             });\n-            let val = cx.expr_deref(sp, cx.expr_path(cx.path_ident(sp, ident)));\n+            let val = cx.expr_path(cx.path_ident(sp, ident));\n+            let val = if use_temporaries {\n+                val\n+            } else {\n+                cx.expr_deref(sp, val)\n+            };\n             let val = cx.expr(sp, ast::ExprKind::Paren(val));\n+\n             ident_exprs.push((sp, struct_field.ident, val, &struct_field.attrs[..]));\n         }\n \n-        let subpats = self.create_subpatterns(cx, paths, mutbl);\n+        let subpats = self.create_subpatterns(cx, paths, mutbl, use_temporaries);\n         let pattern = match *struct_def {\n             VariantData::Struct(..) => {\n                 let field_pats = subpats.into_iter()\n@@ -1588,7 +1646,9 @@ impl<'a> TraitDef<'a> {\n         let variant_ident = variant.node.name;\n         let sp = variant.span.with_ctxt(self.span.ctxt());\n         let variant_path = cx.path(sp, vec![enum_ident, variant_ident]);\n-        self.create_struct_pattern(cx, variant_path, &variant.node.data, prefix, mutbl)\n+        let use_temporaries = false; // enums can't be repr(packed)\n+        self.create_struct_pattern(cx, variant_path, &variant.node.data, prefix, mutbl,\n+                                   use_temporaries)\n     }\n }\n "}, {"sha": "28180b05c8de8dcca986f5a6e34915d90f3df295", "filename": "src/test/compile-fail/issue-27060-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(packed)]\n+pub struct Bad<T: ?Sized> {\n+    data: T, //~ ERROR `T: std::marker::Sized` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "37369d551fc7702270b03d505eeefb53dc047b2d", "filename": "src/test/compile-fail/issue-27060.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fcompile-fail%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fcompile-fail%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27060.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(packed)]\n+pub struct Good {\n+    data: &'static u32,\n+    data2: [&'static u32; 2],\n+    aligned: [u8; 32],\n+}\n+\n+#[repr(packed)]\n+pub struct JustArray {\n+    array: [u32]\n+}\n+\n+#[deny(safe_packed_borrows)]\n+fn main() {\n+    let good = Good {\n+        data: &0,\n+        data2: [&0, &0],\n+        aligned: [0; 32]\n+    };\n+\n+    unsafe {\n+        let _ = &good.data; // ok\n+        let _ = &good.data2[0]; // ok\n+    }\n+\n+    let _ = &good.data; //~ ERROR borrow of packed field requires unsafe\n+                        //~| hard error\n+    let _ = &good.data2[0]; //~ ERROR borrow of packed field requires unsafe\n+                            //~| hard error\n+    let _ = &*good.data; // ok, behind a pointer\n+    let _ = &good.aligned; // ok, has align 1\n+    let _ = &good.aligned[2]; // ok, has align 1\n+}"}, {"sha": "07a943976c3b8923de5e6ac713e392308f9454eb", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut x = Packed(Aligned(Droppy(0)));\n+    x.0 = Aligned(Droppy(0));\n+}\n+\n+struct Aligned(Droppy);\n+#[repr(packed)]\n+struct Packed(Aligned);\n+\n+struct Droppy(usize);\n+impl Drop for Droppy {\n+    fn drop(&mut self) {}\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.EraseRegions.before.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let mut _1: Packed;\n+//     }\n+//     scope 2 {\n+//     }\n+//     let mut _2: Aligned;\n+//     let mut _3: Droppy;\n+//     let mut _4: Aligned;\n+//     let mut _5: Droppy;\n+//     let mut _6: Aligned;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         ...\n+//         _1 = Packed::{{constructor}}(_2,);\n+//         ...\n+//         StorageLive(_6);\n+//         _6 = (_1.0: Aligned);\n+//         drop(_6) -> [return: bb4, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+//     bb3: {\n+//         (_1.0: Aligned) = _4;\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_6);\n+//         (_1.0: Aligned) = _4;\n+//         StorageDead(_4);\n+//         _0 = ();\n+//         drop(_1) -> bb2;\n+//     }\n+// }\n+// END rustc.main.EraseRegions.before.mir"}, {"sha": "f5130908c0b21099972f0a342fdb4a957aeca1ab", "filename": "src/test/run-pass/deriving-with-repr-packed.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-with-repr-packed.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that derive on a packed struct does not call field\n+// methods with a misaligned field.\n+\n+use std::mem;\n+\n+#[derive(Copy, Clone)]\n+struct Aligned(usize);\n+\n+#[inline(never)]\n+fn check_align(ptr: *const Aligned) {\n+    assert_eq!(ptr as usize % mem::align_of::<Aligned>(),\n+               0);\n+}\n+\n+impl PartialEq for Aligned {\n+    fn eq(&self, other: &Self) -> bool {\n+        check_align(self);\n+        check_align(other);\n+        self.0 == other.0\n+    }\n+}\n+\n+#[repr(packed)]\n+#[derive(Copy, Clone, PartialEq)]\n+struct Packed(Aligned, Aligned);\n+\n+#[derive(PartialEq)]\n+#[repr(C)]\n+struct Dealigned<T>(u8, T);\n+\n+fn main() {\n+    let d1 = Dealigned(0, Packed(Aligned(1), Aligned(2)));\n+    let ck = d1 == d1;\n+    assert!(ck);\n+}"}, {"sha": "809c45466f088dc3135a2cf49c25d5a2957dce8e", "filename": "src/test/run-pass/issue-27060.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27060.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(packed)]\n+pub struct Good {\n+    data: &'static u32,\n+    data2: [&'static u32; 2],\n+    aligned: [u8; 32],\n+}\n+\n+#[repr(packed)]\n+pub struct JustArray {\n+    array: [u32]\n+}\n+\n+// kill this test when that turns to a hard error\n+#[allow(safe_packed_borrows)]\n+fn main() {\n+    let good = Good {\n+        data: &0,\n+        data2: [&0, &0],\n+        aligned: [0; 32]\n+    };\n+\n+    unsafe {\n+        let _ = &good.data; // ok\n+        let _ = &good.data2[0]; // ok\n+    }\n+\n+    let _ = &good.data;\n+    let _ = &good.data2[0];\n+    let _ = &*good.data; // ok, behind a pointer\n+    let _ = &good.aligned; // ok, has align 1\n+    let _ = &good.aligned[2]; // ok, has align 1\n+}"}, {"sha": "3041c73afba8819ddbe2b500d9ea4a5400d3347d", "filename": "src/test/run-pass/packed-struct-borrow-element.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n \n pub fn main() {\n     let foo = Foo { bar: 1, baz: 2 };\n-    let brw = &foo.baz;\n+    let brw = unsafe { &foo.baz };\n \n     assert_eq!(*brw, 2);\n }"}, {"sha": "bbe31a65e86a2cbfdd91ca5a18be71f6d8813b10", "filename": "src/test/run-pass/packed-struct-drop-aligned.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-drop-aligned.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+use std::mem;\n+\n+struct Aligned<'a> {\n+    drop_count: &'a Cell<usize>\n+}\n+\n+#[inline(never)]\n+fn check_align(ptr: *const Aligned) {\n+    assert_eq!(ptr as usize % mem::align_of::<Aligned>(),\n+               0);\n+}\n+\n+impl<'a> Drop for Aligned<'a> {\n+    fn drop(&mut self) {\n+        check_align(self);\n+        self.drop_count.set(self.drop_count.get() + 1);\n+    }\n+}\n+\n+#[repr(packed)]\n+struct Packed<'a>(u8, Aligned<'a>);\n+\n+fn main() {\n+    let drop_count = &Cell::new(0);\n+    {\n+        let mut p = Packed(0, Aligned { drop_count });\n+        p.1 = Aligned { drop_count };\n+        assert_eq!(drop_count.get(), 1);\n+    }\n+    assert_eq!(drop_count.get(), 2);\n+}"}, {"sha": "876b74a042f8e04705e8f8cdc7d223cc19270f98", "filename": "src/test/run-pass/packed-struct-optimized-enum.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-optimized-enum.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -9,8 +9,12 @@\n // except according to those terms.\n \n #[repr(packed)]\n-#[derive(Copy, Clone)]\n-struct Packed<T>(T);\n+struct Packed<T: Copy>(T);\n+\n+impl<T: Copy> Copy for Packed<T> {}\n+impl<T: Copy> Clone for Packed<T> {\n+    fn clone(&self) -> Self { *self }\n+}\n \n fn main() {\n     let one = (Some(Packed((&(), 0))), true);"}, {"sha": "0c52829799ea80be7829ca6485e6912272d0d50a", "filename": "src/test/ui/deriving-with-repr-packed.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(safe_packed_borrows)]\n+\n+// check that derive on a packed struct with non-Copy fields\n+// correctly. This can't be made to work perfectly because\n+// we can't just use the field from the struct as it might\n+// not be aligned.\n+\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+//~^ ERROR #[derive] can't be used\n+//~| hard error\n+//~^^^ ERROR #[derive] can't be used\n+//~| hard error\n+#[repr(packed)]\n+pub struct Foo<T>(T, T, T);\n+\n+#[derive(PartialEq, Eq)]\n+//~^ ERROR #[derive] can't be used\n+//~| hard error\n+#[repr(packed)]\n+pub struct Bar(u32, u32, u32);\n+\n+#[derive(PartialEq)]\n+struct Y(usize);\n+\n+#[derive(PartialEq)]\n+//~^ ERROR #[derive] can't be used on a non-Copy #[repr(packed)]\n+//~| hard error\n+#[repr(packed)]\n+struct X(Y);\n+\n+fn main() {}"}, {"sha": "48208faa6b5e20c5f052c75fb6ec4012541314c9", "filename": "src/test/ui/deriving-with-repr-packed.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -0,0 +1,43 @@\n+error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:18:16\n+   |\n+18 | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/deriving-with-repr-packed.rs:11:9\n+   |\n+11 | #![deny(safe_packed_borrows)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:18:23\n+   |\n+18 | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                       ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:26:10\n+   |\n+26 | #[derive(PartialEq, Eq)]\n+   |          ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:35:10\n+   |\n+35 | #[derive(PartialEq)]\n+   |          ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "05dd8a650cf8bfafcc0b53dbe1a69d43b2704efb", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/58e1234cddd996378cb9df6bed537b9c08a6df73/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=58e1234cddd996378cb9df6bed537b9c08a6df73", "patch": "@@ -32,4 +32,4 @@ clippy = \"Broken\"\n rls = \"Testing\"\n \n # ping @nrc\n-rustfmt = \"Testing\"\n+rustfmt = \"Compiling\""}]}