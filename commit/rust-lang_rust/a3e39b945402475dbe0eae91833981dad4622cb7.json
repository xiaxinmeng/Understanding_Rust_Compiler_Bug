{"sha": "a3e39b945402475dbe0eae91833981dad4622cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZTM5Yjk0NTQwMjQ3NWRiZTBlYWU5MTgzMzk4MWRhZDQ2MjJjYjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-24T19:46:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-25T00:07:30Z"}, "message": "Introduce alternate forms of logging\n\nThese new macros are all based on format! instead of fmt! and purely exist for\nbootstrapping purposes. After the next snapshot, all uses of logging will be\nmigrated to these macros, and then after the next snapshot after that we can\ndrop the `2` suffix on everything", "tree": {"sha": "589de0a006aef2fcec4c186b3455d6a90cb4b0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589de0a006aef2fcec4c186b3455d6a90cb4b0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3e39b945402475dbe0eae91833981dad4622cb7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e39b945402475dbe0eae91833981dad4622cb7", "html_url": "https://github.com/rust-lang/rust/commit/a3e39b945402475dbe0eae91833981dad4622cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3e39b945402475dbe0eae91833981dad4622cb7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb836dd61ed2d780ca9639f73876c3d3e05ef079", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb836dd61ed2d780ca9639f73876c3d3e05ef079", "html_url": "https://github.com/rust-lang/rust/commit/eb836dd61ed2d780ca9639f73876c3d3e05ef079"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "7b493e11ef70903af2fe9f62a5661f3fde888e40", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a3e39b945402475dbe0eae91833981dad4622cb7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e39b945402475dbe0eae91833981dad4622cb7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a3e39b945402475dbe0eae91833981dad4622cb7", "patch": "@@ -758,32 +758,32 @@ pub fn std_macros() -> @str {\n         )\n     )\n \n-    // conditionally define debug!, but keep it type checking even\n-    // in non-debug builds.\n-    macro_rules! __debug (\n+    macro_rules! debug (\n         ($arg:expr) => (\n-            __log(4u32, fmt!( \\\"%?\\\", $arg ))\n+            if cfg!(debug) { __log(4u32, fmt!( \\\"%?\\\", $arg )) }\n         );\n         ($( $arg:expr ),+) => (\n-            __log(4u32, fmt!( $($arg),+ ))\n+            if cfg!(debug) { __log(4u32, fmt!( $($arg),+ )) }\n         )\n     )\n \n-    #[cfg(debug)]\n-    #[macro_escape]\n-    mod debug_macro {\n-        macro_rules! debug (($($arg:expr),*) => {\n-            __debug!($($arg),*)\n-        })\n-    }\n+    macro_rules! error2 (\n+        ($($arg:tt)*) => ( __log(1u32, format!($($arg)*)))\n+    )\n \n-    #[cfg(not(debug))]\n-    #[macro_escape]\n-    mod debug_macro {\n-        macro_rules! debug (($($arg:expr),*) => {\n-            if false { __debug!($($arg),*) }\n-        })\n-    }\n+    macro_rules! warn2 (\n+        ($($arg:tt)*) => ( __log(2u32, format!($($arg)*)))\n+    )\n+\n+    macro_rules! info2 (\n+        ($($arg:tt)*) => ( __log(3u32, format!($($arg)*)))\n+    )\n+\n+    macro_rules! debug2 (\n+        ($($arg:tt)*) => (\n+            if cfg!(debug) { __log(4u32, format!($($arg)*)) }\n+        )\n+    )\n \n     macro_rules! fail(\n         () => (\n@@ -797,6 +797,15 @@ pub fn std_macros() -> @str {\n         )\n     )\n \n+    macro_rules! fail2(\n+        () => (\n+            fail!(\\\"explicit failure\\\")\n+        );\n+        ($($arg:tt)+) => (\n+            ::std::sys::FailWithCause::fail_with(format!($($arg)+), file!(), line!())\n+        )\n+    )\n+\n     macro_rules! assert(\n         ($cond:expr) => {\n             if !$cond {\n@@ -964,15 +973,13 @@ pub fn std_macros() -> @str {\n     //              allocation but should rather delegate to an invocation of\n     //              write! instead of format!\n     macro_rules! print (\n-        () => ();\n-        ($arg:expr) => ( ::std::io::print(format!(\\\"{}\\\", $arg)));\n-        ($fmt:expr, $($arg:tt)+) => ( ::std::io::print(format!($fmt, $($arg)+)))\n+        ($($arg:tt)+) => ( ::std::io::print(format!($($arg)+)))\n     )\n \n     // FIXME(#6846) once stdio is redesigned, this shouldn't perform an\n     //              allocation but should rather delegate to an io::Writer\n     macro_rules! println (\n-        ($($arg:tt)*) => ({ print!($($arg)*); ::std::io::println(\\\"\\\"); })\n+        ($($arg:tt)+) => ({ print!($($arg)+); ::std::io::println(\\\"\\\"); })\n     )\n \n     // NOTE: use this after a snapshot lands to abstract the details"}, {"sha": "7bf9d004ee069d3c7613ec2dbf77f761e6c545b2", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3e39b945402475dbe0eae91833981dad4622cb7/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e39b945402475dbe0eae91833981dad4622cb7/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=a3e39b945402475dbe0eae91833981dad4622cb7", "patch": "@@ -240,7 +240,7 @@ fn test_write() {\n // Just make sure that the macros are defined, there's not really a lot that we\n // can do with them just yet (to test the output)\n fn test_print() {\n-    print!(1);\n+    print!(\"hi\");\n     print!(\"{:?}\", ~[0u8]);\n     println!(\"hello\");\n     println!(\"this is a {}\", \"test\");"}]}