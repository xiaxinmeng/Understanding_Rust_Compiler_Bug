{"sha": "bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjViNmMzZGFhMjc5N2M3MDRmMWYxYjMzNWIxMjgwYjhkOGZiZGI=", "commit": {"author": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-12T04:51:55Z"}, "committer": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-15T22:54:47Z"}, "message": "middle: Derive Show impls\n\nAnd change some uses of the `{:?}` format string to `{}`.", "tree": {"sha": "798350e17820d3946072996fa14f958f373d0c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/798350e17820d3946072996fa14f958f373d0c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "html_url": "https://github.com/rust-lang/rust/commit/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/comments", "author": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ffcdcccfec6e2af67c3b0b1e2ebef2d33847bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ffcdcccfec6e2af67c3b0b1e2ebef2d33847bd", "html_url": "https://github.com/rust-lang/rust/commit/69ffcdcccfec6e2af67c3b0b1e2ebef2d33847bd"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "914cf451ebe29380878c029370b34a4f2547e5ae", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "patch": "@@ -14,7 +14,7 @@ use syntax::ast_util::local_def;\n \n use std::gc::Gc;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Def {\n     DefFn(ast::DefId, ast::FnStyle),\n     DefStaticMethod(/* method */ ast::DefId, MethodProvenance, ast::FnStyle),\n@@ -51,7 +51,7 @@ pub enum Def {\n     DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),\n     FromImpl(ast::DefId),"}, {"sha": "98aef8ca49328131ced72b965465baba4ecde897", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "patch": "@@ -121,7 +121,7 @@ fn check_impl_of_trait(cx: &mut Context, it: &Item, trait_ref: &TraitRef, self_t\n \n     // If this trait has builtin-kind supertraits, meet them.\n     let self_ty: ty::t = ty::node_id_to_type(cx.tcx, it.id);\n-    debug!(\"checking impl with self type {:?}\", ty::get(self_ty).sty);\n+    debug!(\"checking impl with self type {}\", ty::get(self_ty).sty);\n     check_builtin_bounds(cx, self_ty, trait_def.bounds, |missing| {\n         cx.tcx.sess.span_err(self_type.span,\n             format!(\"the type `{}', which does not fulfill `{}`, cannot implement this \\"}, {"sha": "8f7c157308eb2b5c48e7cee8607f084ad3ab9de7", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "patch": "@@ -15,6 +15,7 @@ use middle::ty_fold;\n use middle::ty_fold::{TypeFoldable, TypeFolder};\n use util::ppaux::Repr;\n \n+use std::fmt;\n use std::mem;\n use std::raw;\n use std::slice::{Items, MutItems};\n@@ -83,7 +84,7 @@ impl<T> HomogeneousTuple3<T> for (T, T, T) {\n  * space* (which indices where the parameter is defined; see\n  * `ParamSpace`).\n  */\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct Substs {\n     pub types: VecPerParamSpace<ty::t>,\n     pub regions: RegionSubsts,\n@@ -93,7 +94,7 @@ pub struct Substs {\n  * Represents the values to use when substituting lifetime parameters.\n  * If the value is `ErasedRegions`, then this subst is occurring during\n  * trans, and all region parameters will be replaced with `ty::ReStatic`. */\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub enum RegionSubsts {\n     ErasedRegions,\n     NonerasedRegions(VecPerParamSpace<ty::Region>)\n@@ -275,6 +276,17 @@ pub struct VecPerParamSpace<T> {\n     content: Vec<T>,\n }\n \n+impl<T:fmt::Show> fmt::Show for VecPerParamSpace<T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(fmt, \"VecPerParamSpace {{\"));\n+        for space in ParamSpace::all().iter() {\n+            try!(write!(fmt, \"{}: {}, \", *space, self.get_slice(*space)));\n+        }\n+        try!(write!(fmt, \"}}\"));\n+        Ok(())\n+    }\n+}\n+\n impl<T:Clone> VecPerParamSpace<T> {\n     pub fn push_all(&mut self, space: ParamSpace, values: &[T]) {\n         // FIXME (#15435): slow; O(n^2); could enhance vec to make it O(n)."}, {"sha": "fcc2f008fc6c62b3939196a8786d0611ddc1f041", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "patch": "@@ -124,7 +124,7 @@ impl Method {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct mt {\n     pub ty: t,\n     pub mutbl: ast::Mutability,\n@@ -138,7 +138,7 @@ pub enum TraitStore {\n     RegionTraitStore(Region, ast::Mutability),\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n pub struct field_ty {\n     pub name: Name,\n     pub id: DefId,\n@@ -394,6 +394,7 @@ pub enum tbox_flag {\n \n pub type t_box = &'static t_box_;\n \n+#[deriving(Show)]\n pub struct t_box_ {\n     pub sty: sty,\n     pub id: uint,\n@@ -436,14 +437,14 @@ pub fn type_needs_infer(t: t) -> bool {\n }\n pub fn type_id(t: t) -> uint { get(t).id }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct BareFnTy {\n     pub fn_style: ast::FnStyle,\n     pub abi: abi::Abi,\n     pub sig: FnSig,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ClosureTy {\n     pub fn_style: ast::FnStyle,\n     pub onceness: ast::Onceness,\n@@ -472,7 +473,7 @@ pub struct FnSig {\n     pub variadic: bool\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ParamTy {\n     pub space: subst::ParamSpace,\n     pub idx: uint,\n@@ -712,7 +713,7 @@ mod primitives {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in libsyntax/ast.rs as well.\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub enum sty {\n     ty_nil,\n     ty_bot,\n@@ -741,14 +742,14 @@ pub enum sty {\n             // on non-useful type error messages)\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TyTrait {\n     pub def_id: DefId,\n     pub substs: Substs,\n     pub bounds: BuiltinBounds\n }\n \n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(PartialEq, Eq, Hash, Show)]\n pub struct TraitRef {\n     pub def_id: DefId,\n     pub substs: Substs,\n@@ -808,7 +809,7 @@ pub enum type_err {\n     terr_variadic_mismatch(expected_found<bool>)\n }\n \n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(PartialEq, Eq, Hash, Show)]\n pub struct ParamBounds {\n     pub builtin_bounds: BuiltinBounds,\n     pub trait_bounds: Vec<Rc<TraitRef>>\n@@ -948,7 +949,7 @@ impl fmt::Show for IntVarValue {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n pub struct TypeParameterDef {\n     pub ident: ast::Ident,\n     pub def_id: ast::DefId,\n@@ -958,7 +959,7 @@ pub struct TypeParameterDef {\n     pub default: Option<ty::t>\n }\n \n-#[deriving(Encodable, Decodable, Clone)]\n+#[deriving(Encodable, Decodable, Clone, Show)]\n pub struct RegionParameterDef {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n@@ -968,7 +969,7 @@ pub struct RegionParameterDef {\n \n /// Information about the type/lifetime parameters associated with an\n /// item or method. Analogous to ast::Generics.\n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n pub struct Generics {\n     pub types: VecPerParamSpace<TypeParameterDef>,\n     pub regions: VecPerParamSpace<RegionParameterDef>,\n@@ -1014,7 +1015,7 @@ pub struct ParameterEnvironment {\n /// - `generics`: the set of type parameters and their bounds\n /// - `ty`: the base types, which may reference the parameters defined\n ///   in `generics`\n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n pub struct Polytype {\n     pub generics: Generics,\n     pub ty: t"}, {"sha": "5ed92b305be0d1c4da438ea9fc1e247b4941f6f2", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "patch": "@@ -141,7 +141,7 @@ pub fn opt_ast_region_to_region<AC:AstConv,RS:RegionScope>(\n         }\n     };\n \n-    debug!(\"opt_ast_region_to_region(opt_lifetime={:?}) yields {}\",\n+    debug!(\"opt_ast_region_to_region(opt_lifetime={}) yields {}\",\n             opt_lifetime.as_ref().map(|e| lifetime_to_string(e)),\n             r.repr(this.tcx()));\n \n@@ -504,6 +504,7 @@ pub fn ast_ty_to_builtin_ty<AC:AstConv,\n     }\n }\n \n+#[deriving(Show)]\n enum PointerTy {\n     Box,\n     RPtr(ty::Region),\n@@ -565,7 +566,7 @@ fn mk_pointer<AC:AstConv,\n               constr: |ty::t| -> ty::t)\n               -> ty::t {\n     let tcx = this.tcx();\n-    debug!(\"mk_pointer(ptr_ty={:?})\", ptr_ty);\n+    debug!(\"mk_pointer(ptr_ty={})\", ptr_ty);\n \n     match a_seq_ty.ty.node {\n         ast::TyVec(ref ty) => {"}, {"sha": "28240686dc358f2fdb7e8d3dc288e60a0f540c67", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=bdf5b6c3daa2797c704f1f1b335b1280b8d8fbdb", "patch": "@@ -246,7 +246,7 @@ impl<'a> RegionVarBindings<'a> {\n         if self.in_snapshot() {\n             self.undo_log.borrow_mut().push(AddVar(vid));\n         }\n-        debug!(\"created new region variable {:?} with origin {:?}\",\n+        debug!(\"created new region variable {} with origin {}\",\n                vid, origin.repr(self.tcx));\n         return vid;\n     }"}]}