{"sha": "2931a9df2f5813568537d79fe003cb94f7565c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzFhOWRmMmY1ODEzNTY4NTM3ZDc5ZmUwMDNjYjk0Zjc1NjVjNDE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-27T01:51:57Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:52Z"}, "message": "make check less conservative and add explanation", "tree": {"sha": "5a9079d001c48d556ae10c2979a31daa93da1e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a9079d001c48d556ae10c2979a31daa93da1e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2931a9df2f5813568537d79fe003cb94f7565c41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1QACgkQAn35M4hi\nrd3wrxAAhBwcQxktA/jSdUXUb41x8bV5n3KmQ2TrlCR41Z/M3pGFmfpMmrjWXi+7\n2eza3LN7FhDEYXO/XemCAzQK2KDc+dfY6yHGJZEKSe5CPSoyMm7gGSqHdWbbuIAJ\nN2fRDQSAsTsLFA5C9pD0x+YS+/MXmLVb5y+P4e9XDAofIh5ZoWEnD/++ju+5za2T\nlt+YayRfgFsEEoUAfwbBieKI50alet2D1OlPDKGcsVH22/0RDtLcyukxmd+H2jYv\natNBR+3W9X/tMAjrJ2jYzajxFE99QT9pcV9jO49FTHTLdo44v8O0Vo1n2a/ACvDI\nEqYp+qb3r5uyuCy0micLE9yYl4tM4+Q+LsYiX9NeGeDedjw0GDbYyE4gLt3aTo+8\nYJHy/17/wLB+kdE0jEsjCw2ef6Il+0XCSCLRJC/5D1+uDTlm1iEHvwlCGT3en1de\nu5EGp6PBjeMdWQb7KUJ78XAxfL5L7d4sHb3nwOtax/lK3w8H8828tJLsHBAp7Euz\ngUN1qerSWk218Q5E063kLOR5qrxVnOkWc1CalDVR6SkV9M7DeX7Auas3UnaObJo2\nikiWQToeOTiFEqCAPskMCgI05aJpySvfxCbyYcPjYV9sOWY4HZ/AQQ8aREenw/e3\nI3iwkTPU2IMXLdRlFEWJrD/49nK+XvV9K4M0qlsI4V44MkM+FAw=\n=HQ9s\n-----END PGP SIGNATURE-----", "payload": "tree 5a9079d001c48d556ae10c2979a31daa93da1e59\nparent 54d4fc245a7290c40479f48f5a6158525db38b4f\nauthor Deadbeef <ent3rm4n@gmail.com> 1627350717 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846932 +0000\n\nmake check less conservative and add explanation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2931a9df2f5813568537d79fe003cb94f7565c41", "html_url": "https://github.com/rust-lang/rust/commit/2931a9df2f5813568537d79fe003cb94f7565c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2931a9df2f5813568537d79fe003cb94f7565c41/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d4fc245a7290c40479f48f5a6158525db38b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d4fc245a7290c40479f48f5a6158525db38b4f", "html_url": "https://github.com/rust-lang/rust/commit/54d4fc245a7290c40479f48f5a6158525db38b4f"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "7048f0dbedcb670fe81f31d2b4e1e6b095bedd66", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2931a9df2f5813568537d79fe003cb94f7565c41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2931a9df2f5813568537d79fe003cb94f7565c41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=2931a9df2f5813568537d79fe003cb94f7565c41", "patch": "@@ -649,7 +649,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.is_global() {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n-            if infcx.predicate_must_hold_considering_regions(obligation) {\n+            //\n+            // If the predicate is considered const, then we cannot use this because\n+            // it will cause false negatives in the ui tests.\n+            if !self.selcx.is_predicate_const(obligation.predicate)\n+                && infcx.predicate_must_hold_considering_regions(obligation)\n+            {\n                 debug!(\n                     \"selecting trait at depth {} evaluated to holds\",\n                     obligation.recursion_depth\n@@ -703,7 +708,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.is_global() {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n-            if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {\n+            //\n+            // If the predicate is considered const, then we cannot use this because\n+            // it will cause false negatives in the ui tests.\n+            if !self.selcx.is_predicate_const(obligation.predicate)\n+                && self.selcx.infcx().predicate_must_hold_considering_regions(obligation)\n+            {\n                 return ProcessResult::Changed(vec![]);\n             } else {\n                 tracing::debug!(\"Does NOT hold: {:?}\", obligation);"}, {"sha": "2dc48e47efccdf6a9e150b8e3e88b844a82422ea", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2931a9df2f5813568537d79fe003cb94f7565c41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2931a9df2f5813568537d79fe003cb94f7565c41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=2931a9df2f5813568537d79fe003cb94f7565c41", "patch": "@@ -1,6 +1,3 @@\n-use rustc_hir as hir;\n-use rustc_middle::ty::PredicateKind;\n-\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::{\n@@ -49,12 +46,6 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n-        if let PredicateKind::Trait(pred) = obligation.predicate.kind().skip_binder() {\n-            if let hir::Constness::Const = pred.constness {\n-                // do not evaluate to holds when we have a const predicate.\n-                return false;\n-            }\n-        }\n         self.evaluate_obligation_no_overflow(obligation).must_apply_considering_regions()\n     }\n "}, {"sha": "dcf5ac63b78ea7dbd20a8739efe27b2fff70c46d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2931a9df2f5813568537d79fe003cb94f7565c41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2931a9df2f5813568537d79fe003cb94f7565c41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2931a9df2f5813568537d79fe003cb94f7565c41", "patch": "@@ -316,6 +316,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    /// returns `true` if the predicate is considered `const` to\n+    /// this selection context.\n+    pub fn is_predicate_const(&self, pred: ty::Predicate<'_>) -> bool {\n+        match pred.kind().skip_binder() {\n+            ty::PredicateKind::Trait(ty::TraitPredicate {\n+                constness: hir::Constness::Const,\n+                ..\n+            }) if self.const_impls_required => true,\n+            _ => false,\n+        }\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // Selection\n     //"}]}