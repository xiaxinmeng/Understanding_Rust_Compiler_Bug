{"sha": "d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZjJiYzNiODc4ZDFjMWQ4ZWFmMDgxZTZmNjcwZWJiOTI4YjdhNWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-15T20:05:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-15T20:05:07Z"}, "message": "Merge #9292\n\n9292: fix: Code: clean-up #8951 r=wxb1ank a=wxb1ank\n\n#8951 was a major change in the VS Code extension and caused quite a few problems. This PR is a catch-all for bugs and improvements in the new code.\r\n\r\nThis should fix:\r\n- #9284\r\n- [this unreported bug](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446)\r\n- ...and one or two uncaught exceptions I just found\r\n\r\nThe original lack of testing was my own fault, but this area of the VS Code API is also tricky for a couple reasons:\r\n- The [FileSystem](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446) API does not list or warn about any exceptions, but [FileSystemProvider](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446) (which `FileSystem` is a wrapper of, AFAICT) does.\r\n- At first glance, [Uri.path](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446) *looks* like it works for FS operations. It does not, at least, on Windows. You need to use `Uri.fsPath`.\r\n\r\nI only use Windows, so I need people on macOS, Linux, and (possibly) NixOS to test this.\n\nCo-authored-by: wxb1ank <wxblank@gmail.com>", "tree": {"sha": "d704be44422c3fe3981a43055a336141a88922c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d704be44422c3fe3981a43055a336141a88922c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgyQfzCRBK7hj4Ov3rIwAAahEIAIg8hGmmwbYVcUtKxw88UXoY\ntGA1XPQiDYy+Z/ael2PW7lYXYgohqRb4f3XuRU4Ce3OzDK7d6g5Svr7CvTwJez+3\nDEEFg4tqyvXkQICXw3U//gfEo5UnXqpH2dPMz3p/sbwoQg558VYIk0JjjqAg+G1a\nLTCdD9VzUa672X6iSbPmYdxEAUGkUk0UI0JYecXPLJxHAuRQFI7SelzPNm4wydtk\nVx2cqePyo2QDCXTX5SVx+XLalDX1OV4TkmpNh77ZxInnGXuQeh5EddmVTXRZm5pB\nYtoQJj3QoZoXU2HZG8XYSVOGJJ6bTewz8mEF8jpHsvDMAODhjv+lw2vDNaamZKY=\n=Xb1X\n-----END PGP SIGNATURE-----\n", "payload": "tree d704be44422c3fe3981a43055a336141a88922c9\nparent dcea1c536c351a6063ba887813d54911a2b7eb39\nparent a6b0c056dedb17fa2056e5186bd73af66c5e84e3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623787507 +0000\ncommitter GitHub <noreply@github.com> 1623787507 +0000\n\nMerge #9292\n\n9292: fix: Code: clean-up #8951 r=wxb1ank a=wxb1ank\n\n#8951 was a major change in the VS Code extension and caused quite a few problems. This PR is a catch-all for bugs and improvements in the new code.\r\n\r\nThis should fix:\r\n- #9284\r\n- [this unreported bug](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446)\r\n- ...and one or two uncaught exceptions I just found\r\n\r\nThe original lack of testing was my own fault, but this area of the VS Code API is also tricky for a couple reasons:\r\n- The [FileSystem](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446) API does not list or warn about any exceptions, but [FileSystemProvider](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446) (which `FileSystem` is a wrapper of, AFAICT) does.\r\n- At first glance, [Uri.path](https://github.com/rust-analyzer/rust-analyzer/pull/8951/files#r651570446) *looks* like it works for FS operations. It does not, at least, on Windows. You need to use `Uri.fsPath`.\r\n\r\nI only use Windows, so I need people on macOS, Linux, and (possibly) NixOS to test this.\n\nCo-authored-by: wxb1ank <wxblank@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "html_url": "https://github.com/rust-lang/rust/commit/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcea1c536c351a6063ba887813d54911a2b7eb39", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcea1c536c351a6063ba887813d54911a2b7eb39", "html_url": "https://github.com/rust-lang/rust/commit/dcea1c536c351a6063ba887813d54911a2b7eb39"}, {"sha": "a6b0c056dedb17fa2056e5186bd73af66c5e84e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b0c056dedb17fa2056e5186bd73af66c5e84e3", "html_url": "https://github.com/rust-lang/rust/commit/a6b0c056dedb17fa2056e5186bd73af66c5e84e3"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "15f2151ad899f69b04da68f6a9862fda3666224c", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "patch": "@@ -158,7 +158,7 @@ export async function deactivate() {\n }\n \n async function bootstrap(config: Config, state: PersistentState): Promise<string> {\n-    await vscode.workspace.fs.createDirectory(config.globalStorageUri);\n+    await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n \n     if (!config.currentExtensionIsNightly) {\n         await state.updateNightlyReleaseId(undefined);\n@@ -277,11 +277,11 @@ async function patchelf(dest: vscode.Uri): Promise<void> {\n                     '';\n                 }\n             `;\n-            const origFile = vscode.Uri.file(dest.path + \"-orig\");\n+            const origFile = vscode.Uri.file(dest.fsPath + \"-orig\");\n             await vscode.workspace.fs.rename(dest, origFile);\n             progress.report({ message: \"Patching executable\", increment: 20 });\n             await new Promise((resolve, reject) => {\n-                const handle = exec(`nix-build -E - --argstr srcStr '${origFile.path}' -o '${dest.path}'`,\n+                const handle = exec(`nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n                     (err, stdout, stderr) => {\n                         if (err != null) {\n                             reject(Error(stderr));\n@@ -338,14 +338,14 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         await state.updateServerVersion(undefined);\n     }\n \n-    if (state.serverVersion === config.package.version) return dest.path;\n+    if (state.serverVersion === config.package.version) return dest.fsPath;\n \n     if (config.askBeforeDownload) {\n         const userResponse = await vscode.window.showInformationMessage(\n             `Language server version ${config.package.version} for rust-analyzer is not installed.`,\n             \"Download now\"\n         );\n-        if (userResponse !== \"Download now\") return dest.path;\n+        if (userResponse !== \"Download now\") return dest.fsPath;\n     }\n \n     const releaseTag = config.package.releaseTag;\n@@ -372,7 +372,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n \n     await state.updateServerVersion(config.package.version);\n-    return dest.path;\n+    return dest.fsPath;\n }\n \n function serverPath(config: Config): string | null {\n@@ -383,7 +383,7 @@ async function isNixOs(): Promise<boolean> {\n     try {\n         const contents = (await vscode.workspace.fs.readFile(vscode.Uri.file(\"/etc/os-release\"))).toString();\n         return contents.indexOf(\"ID=nixos\") !== -1;\n-    } catch (e) {\n+    } catch {\n         return false;\n     }\n }"}, {"sha": "722dab756bde43ce3bba7340fdaf0482c6ff0a34", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "patch": "@@ -91,7 +91,7 @@ export async function download(opts: DownloadOpts) {\n     // to prevent partially downloaded files when user kills vscode\n     // This also avoids overwriting running executables\n     const randomHex = crypto.randomBytes(5).toString(\"hex\");\n-    const rawDest = path.parse(opts.dest.path);\n+    const rawDest = path.parse(opts.dest.fsPath);\n     const tempFilePath = vscode.Uri.joinPath(vscode.Uri.file(rawDest.dir), `${rawDest.name}${randomHex}`);\n \n     await vscode.window.withProgress(\n@@ -116,7 +116,7 @@ export async function download(opts: DownloadOpts) {\n         }\n     );\n \n-    await vscode.workspace.fs.rename(tempFilePath, opts.dest);\n+    await vscode.workspace.fs.rename(tempFilePath, opts.dest, { overwrite: true });\n }\n \n async function downloadFile(\n@@ -148,15 +148,15 @@ async function downloadFile(\n     const totalBytes = Number(res.headers.get('content-length'));\n     assert(!Number.isNaN(totalBytes), \"Sanity check of content-length protocol\");\n \n-    log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", urlString, \"to\", destFilePath.path);\n+    log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", urlString, \"to\", destFilePath.fsPath);\n \n     let readBytes = 0;\n     res.body.on(\"data\", (chunk: Buffer) => {\n         readBytes += chunk.length;\n         onProgress(readBytes, totalBytes);\n     });\n \n-    const destFileStream = fs.createWriteStream(destFilePath.path, { mode });\n+    const destFileStream = fs.createWriteStream(destFilePath.fsPath, { mode });\n     const srcStream = gunzip ? res.body.pipe(zlib.createGunzip()) : res.body;\n \n     await pipeline(srcStream, destFileStream);"}, {"sha": "355dd76fe5095551a5adfbc4ee6469acaf929183", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=d0f2bc3b878d1c1d8eaf081e6f670ebb928b7a5f", "patch": "@@ -159,7 +159,7 @@ export const getPathForExecutable = memoize(\n             // it is not mentioned in docs and cannot be infered by the type signature...\n             const standardPath = vscode.Uri.joinPath(vscode.Uri.file(os.homedir()), \".cargo\", \"bin\", executableName);\n \n-            if (isFile(standardPath.path)) return standardPath.path;\n+            if (isFileAtUri(standardPath)) return standardPath.fsPath;\n         } catch (err) {\n             log.error(\"Failed to read the fs info\", err);\n         }\n@@ -177,9 +177,17 @@ function lookupInPath(exec: string): boolean {\n             : [candidate];\n     });\n \n-    return candidates.some(isFile);\n+    return candidates.some(isFileAtPath);\n }\n \n-async function isFile(path: string): Promise<boolean> {\n-    return ((await vscode.workspace.fs.stat(vscode.Uri.file(path))).type & vscode.FileType.File) !== 0;\n+async function isFileAtPath(path: string): Promise<boolean> {\n+    return isFileAtUri(vscode.Uri.file(path));\n+}\n+\n+async function isFileAtUri(uri: vscode.Uri): Promise<boolean> {\n+    try {\n+        return ((await vscode.workspace.fs.stat(uri)).type & vscode.FileType.File) !== 0;\n+    } catch {\n+        return false;\n+    }\n }"}]}