{"sha": "b8214e9b44a5796749a70d7806e575412333e27c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjE0ZTliNDRhNTc5Njc0OWE3MGQ3ODA2ZTU3NTQxMjMzM2UyN2M=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T03:25:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T06:17:36Z"}, "message": "Convert fields within `DefPathData` from `InternedString` to `Symbol`.\n\nIt's a full conversion, except in `DefKey::compute_stable_hash()` where\na `Symbol` now is converted to an `InternedString` before being hashed.\nThis was necessary to avoid test failures.", "tree": {"sha": "35dccb23100b9f98843aa3bf07b32e55110d0a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35dccb23100b9f98843aa3bf07b32e55110d0a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8214e9b44a5796749a70d7806e575412333e27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8214e9b44a5796749a70d7806e575412333e27c", "html_url": "https://github.com/rust-lang/rust/commit/b8214e9b44a5796749a70d7806e575412333e27c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8214e9b44a5796749a70d7806e575412333e27c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c342730840248a98d81f7cc10b06c69831751b", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c342730840248a98d81f7cc10b06c69831751b", "html_url": "https://github.com/rust-lang/rust/commit/78c342730840248a98d81f7cc10b06c69831751b"}], "stats": {"total": 122, "additions": 59, "deletions": 63}, "files": [{"sha": "7971c33426b2e8b5a0f444380d7fcf21f26d7999", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -792,15 +792,15 @@ impl<'a> LoweringContext<'a> {\n         // really show up for end-user.\n         let (str_name, kind) = match hir_name {\n             ParamName::Plain(ident) => (\n-                ident.as_interned_str(),\n+                ident.name,\n                 hir::LifetimeParamKind::InBand,\n             ),\n             ParamName::Fresh(_) => (\n-                kw::UnderscoreLifetime.as_interned_str(),\n+                kw::UnderscoreLifetime,\n                 hir::LifetimeParamKind::Elided,\n             ),\n             ParamName::Error => (\n-                kw::UnderscoreLifetime.as_interned_str(),\n+                kw::UnderscoreLifetime,\n                 hir::LifetimeParamKind::Error,\n             ),\n         };\n@@ -1590,7 +1590,7 @@ impl<'a> LoweringContext<'a> {\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n                         def_node_id,\n-                        DefPathData::LifetimeNs(name.ident().as_interned_str()),\n+                        DefPathData::LifetimeNs(name.ident().name),\n                         ExpnId::root(),\n                         lifetime.span);\n "}, {"sha": "7c8fdcc8b12e9795b9ab9bd642a073d88ec841c4", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -57,7 +57,7 @@ impl<'a> DefCollector<'a> {\n \n         // For async functions, we need to create their inner defs inside of a\n         // closure to match their desugared representation.\n-        let fn_def_data = DefPathData::ValueNs(name.as_interned_str());\n+        let fn_def_data = DefPathData::ValueNs(name);\n         let fn_def = self.create_def(id, fn_def_data, span);\n         return self.with_parent(fn_def, |this| {\n             this.create_def(return_impl_trait_id, DefPathData::ImplTrait, span);\n@@ -83,8 +83,7 @@ impl<'a> DefCollector<'a> {\n                 .unwrap_or_else(|| {\n                     let node_id = NodeId::placeholder_from_expn_id(self.expansion);\n                     sym::integer(self.definitions.placeholder_field_indices[&node_id])\n-                })\n-                .as_interned_str();\n+                });\n             let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n             self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n@@ -109,7 +108,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n-            ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n+            ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             ItemKind::Fn(\n                 ref decl,\n                 ref header,\n@@ -127,8 +126,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 )\n             }\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.as_interned_str()),\n-            ItemKind::MacroDef(..) => DefPathData::MacroNs(i.ident.as_interned_str()),\n+                DefPathData::ValueNs(i.ident.name),\n+            ItemKind::MacroDef(..) => DefPathData::MacroNs(i.ident.name),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(..) => {\n@@ -162,7 +161,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n \n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.as_interned_str()),\n+                                  DefPathData::ValueNs(foreign_item.ident.name),\n                                   foreign_item.span);\n \n         self.with_parent(def, |this| {\n@@ -175,7 +174,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             return self.visit_macro_invoc(v.id);\n         }\n         let def = self.create_def(v.id,\n-                                  DefPathData::TypeNs(v.ident.as_interned_str()),\n+                                  DefPathData::TypeNs(v.ident.name),\n                                   v.span);\n         self.with_parent(def, |this| {\n             if let Some(ctor_hir_id) = v.data.ctor_id() {\n@@ -202,7 +201,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             self.visit_macro_invoc(param.id);\n             return;\n         }\n-        let name = param.ident.as_interned_str();\n+        let name = param.ident.name;\n         let def_path_data = match param.kind {\n             GenericParamKind::Lifetime { .. } => DefPathData::LifetimeNs(name),\n             GenericParamKind::Type { .. } => DefPathData::TypeNs(name),\n@@ -216,9 +215,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.kind {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.as_interned_str()),\n+                DefPathData::ValueNs(ti.ident.name),\n             TraitItemKind::Type(..) => {\n-                DefPathData::TypeNs(ti.ident.as_interned_str())\n+                DefPathData::TypeNs(ti.ident.name)\n             },\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n@@ -243,12 +242,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body,\n                 )\n             }\n-            ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.as_interned_str()),\n+            ImplItemKind::Method(..) |\n+            ImplItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n             ImplItemKind::TyAlias(..) |\n-            ImplItemKind::OpaqueTy(..) => {\n-                DefPathData::TypeNs(ii.ident.as_interned_str())\n-            },\n+            ImplItemKind::OpaqueTy(..) => DefPathData::TypeNs(ii.ident.name),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n "}, {"sha": "893b295c60a2833aafd64404e1e7f902ffcd2db3", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -18,7 +18,7 @@ use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n use syntax_expand::hygiene::ExpnId;\n-use syntax::symbol::{Symbol, sym, InternedString};\n+use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n@@ -136,7 +136,9 @@ impl DefKey {\n \n         ::std::mem::discriminant(data).hash(&mut hasher);\n         if let Some(name) = data.get_opt_name() {\n-            name.hash(&mut hasher);\n+            // Get a stable hash by considering the symbol chars rather than\n+            // the symbol index.\n+            name.as_str().hash(&mut hasher);\n         }\n \n         disambiguator.hash(&mut hasher);\n@@ -218,7 +220,7 @@ impl DefPath {\n         for component in &self.data {\n             write!(s,\n                    \"::{}[{}]\",\n-                   component.data.as_interned_str(),\n+                   component.data.as_symbol(),\n                    component.disambiguator)\n                 .unwrap();\n         }\n@@ -238,11 +240,11 @@ impl DefPath {\n \n         for component in &self.data {\n             if component.disambiguator == 0 {\n-                write!(s, \"::{}\", component.data.as_interned_str()).unwrap();\n+                write!(s, \"::{}\", component.data.as_symbol()).unwrap();\n             } else {\n                 write!(s,\n                        \"{}[{}]\",\n-                       component.data.as_interned_str(),\n+                       component.data.as_symbol(),\n                        component.disambiguator)\n                        .unwrap();\n             }\n@@ -262,11 +264,11 @@ impl DefPath {\n             opt_delimiter.map(|d| s.push(d));\n             opt_delimiter = Some('-');\n             if component.disambiguator == 0 {\n-                write!(s, \"{}\", component.data.as_interned_str()).unwrap();\n+                write!(s, \"{}\", component.data.as_symbol()).unwrap();\n             } else {\n                 write!(s,\n                        \"{}[{}]\",\n-                       component.data.as_interned_str(),\n+                       component.data.as_symbol(),\n                        component.disambiguator)\n                        .unwrap();\n             }\n@@ -290,13 +292,13 @@ pub enum DefPathData {\n     /// An impl.\n     Impl,\n     /// Something in the type namespace.\n-    TypeNs(InternedString),\n+    TypeNs(Symbol),\n     /// Something in the value namespace.\n-    ValueNs(InternedString),\n+    ValueNs(Symbol),\n     /// Something in the macro namespace.\n-    MacroNs(InternedString),\n+    MacroNs(Symbol),\n     /// Something in the lifetime namespace.\n-    LifetimeNs(InternedString),\n+    LifetimeNs(Symbol),\n     /// A closure expression.\n     ClosureExpr,\n \n@@ -311,7 +313,7 @@ pub enum DefPathData {\n     /// Identifies a piece of crate metadata that is global to a whole crate\n     /// (as opposed to just one item). `GlobalMetaData` components are only\n     /// supposed to show up right below the crate root.\n-    GlobalMetaData(InternedString),\n+    GlobalMetaData(Symbol),\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -545,7 +547,7 @@ impl Definitions {\n }\n \n impl DefPathData {\n-    pub fn get_opt_name(&self) -> Option<InternedString> {\n+    pub fn get_opt_name(&self) -> Option<Symbol> {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) |\n@@ -564,15 +566,15 @@ impl DefPathData {\n         }\n     }\n \n-    pub fn as_interned_str(&self) -> InternedString {\n+    pub fn as_symbol(&self) -> Symbol {\n         use self::DefPathData::*;\n-        let s = match *self {\n+        match *self {\n             TypeNs(name) |\n             ValueNs(name) |\n             MacroNs(name) |\n             LifetimeNs(name) |\n             GlobalMetaData(name) => {\n-                return name\n+                name\n             }\n             // Note that this does not show up in user print-outs.\n             CrateRoot => sym::double_braced_crate,\n@@ -582,13 +584,11 @@ impl DefPathData {\n             Ctor => sym::double_braced_constructor,\n             AnonConst => sym::double_braced_constant,\n             ImplTrait => sym::double_braced_opaque,\n-        };\n-\n-        s.as_interned_str()\n+        }\n     }\n \n     pub fn to_string(&self) -> String {\n-        self.as_interned_str().to_string()\n+        self.as_symbol().to_string()\n     }\n }\n \n@@ -611,7 +611,7 @@ macro_rules! define_global_metadata_kind {\n                     definitions.create_def_with_parent(\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name().as_interned_str()),\n+                        DefPathData::GlobalMetaData(instance.name()),\n                         ExpnId::root(),\n                         DUMMY_SP\n                     );\n@@ -625,7 +625,7 @@ macro_rules! define_global_metadata_kind {\n                 let def_key = DefKey {\n                     parent: Some(CRATE_DEF_INDEX),\n                     disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name().as_interned_str()),\n+                        data: DefPathData::GlobalMetaData(self.name()),\n                         disambiguator: 0,\n                     }\n                 };"}, {"sha": "7e1dcdfe18f90c0f7dce9f53970e227bc945a087", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 disambiguated_data: &DisambiguatedDefPathData,\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n-                path.push(disambiguated_data.data.as_interned_str().to_string());\n+                path.push(disambiguated_data.data.as_symbol().to_string());\n                 Ok(path)\n             }\n             fn path_generic_args("}, {"sha": "1b38c908917b8b3b595a43367320f8d5a5967df5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -875,7 +875,7 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                     _ => {}\n                 }\n \n-                path.push(disambiguated_data.data.as_interned_str().as_symbol());\n+                path.push(disambiguated_data.data.as_symbol());\n                 Ok(path)\n             }\n "}, {"sha": "f52d1bc5ffab16e1ade49542bf7456786d4aa76e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -3019,7 +3019,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }),\n                 _ => def_key.disambiguated_data.data.get_opt_name().unwrap_or_else(|| {\n                     bug!(\"item_name: no name for {:?}\", self.def_path(id));\n-                }).as_symbol(),\n+                }),\n             }\n         }\n     }"}, {"sha": "e72916de6a9c7a0311c6d3065084b79d27dfba36", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -218,9 +218,9 @@ impl DefPathBasedNames<'tcx> {\n         // foo::bar::ItemName::\n         for part in self.tcx.def_path(def_id).data {\n             if self.omit_disambiguators {\n-                write!(output, \"{}::\", part.data.as_interned_str()).unwrap();\n+                write!(output, \"{}::\", part.data.as_symbol()).unwrap();\n             } else {\n-                write!(output, \"{}[{}]::\", part.data.as_interned_str(), part.disambiguator)\n+                write!(output, \"{}[{}]::\", part.data.as_symbol(), part.disambiguator)\n                     .unwrap();\n             }\n         }"}, {"sha": "8a98a5d83615fbf4e2d8985afd7f0ffbf6adc4c7", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -384,15 +384,15 @@ pub trait PrettyPrinter<'tcx>:\n                 let reexport = self.tcx().item_children(visible_parent)\n                     .iter()\n                     .find(|child| child.res.def_id() == def_id)\n-                    .map(|child| child.ident.as_interned_str());\n+                    .map(|child| child.ident.name);\n                 if let Some(reexport) = reexport {\n                     *name = reexport;\n                 }\n             }\n             // Re-exported `extern crate` (#43189).\n             DefPathData::CrateRoot => {\n                 data = DefPathData::TypeNs(\n-                    self.tcx().original_crate_name(def_id.krate).as_interned_str(),\n+                    self.tcx().original_crate_name(def_id.krate),\n                 );\n             }\n             _ => {}\n@@ -1222,7 +1222,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n-        let name = disambiguated_data.data.as_interned_str().as_str();\n+        let name = disambiguated_data.data.as_symbol().as_str();\n         if !name.is_empty() {\n             if !self.empty_path {\n                 write!(self, \"::\")?;"}, {"sha": "628d1372b5702ecc0ab8e6e1973a3ef6afae7259", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -35,7 +35,7 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n \n     let namespace_name = match def_key.disambiguated_data.data {\n         DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate).as_str(),\n-        data => data.as_interned_str().as_str()\n+        data => data.as_symbol().as_str()\n     };\n \n     let namespace_name = SmallCStr::new(&namespace_name);"}, {"sha": "166a74fe48795adcfc7582fc060111570f228024", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -221,7 +221,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n             output.push_str(&tcx.crate_name(def_id.krate).as_str());\n             for path_element in tcx.def_path(def_id).data {\n                 output.push_str(\"::\");\n-                output.push_str(&path_element.data.as_interned_str().as_str());\n+                output.push_str(&path_element.data.as_symbol().as_str());\n             }\n         } else {\n             output.push_str(&tcx.item_name(def_id).as_str());"}, {"sha": "601a33a66bb32f383db6fcea8ef968422060817b", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -335,7 +335,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             self.path.finalize_pending_component();\n         }\n \n-        self.write_str(&disambiguated_data.data.as_interned_str().as_str())?;\n+        self.write_str(&disambiguated_data.data.as_symbol().as_str())?;\n         Ok(self)\n     }\n     fn path_generic_args("}, {"sha": "6aba66a79ab3be5f77a9c79b410b891a75634b01", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -460,7 +460,7 @@ impl cstore::CStore {\n \n         LoadedMacro::MacroDef(ast::Item {\n             // FIXME: cross-crate hygiene\n-            ident: ast::Ident::with_dummy_span(name.as_symbol()),\n+            ident: ast::Ident::with_dummy_span(name),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),"}, {"sha": "c9851694d446594843a96f6a284932ae883fd97c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -35,7 +35,7 @@ use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n use syntax::symbol::{Symbol, sym};\n use syntax_expand::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n-use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, symbol::{InternedString}};\n+use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n use syntax_expand::proc_macro::{AttrProcMacro, ProcMacroDerive, BangProcMacro};\n@@ -514,7 +514,6 @@ impl<'a, 'tcx> CrateMetadata {\n                 .data\n                 .get_opt_name()\n                 .expect(\"no name in item_name\")\n-                .as_symbol()\n         } else {\n             Symbol::intern(self.raw_proc_macro(item_index).name())\n         }\n@@ -864,7 +863,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 let span = self.get_span(child_index, sess);\n                 if let (Some(kind), Some(name)) =\n                     (self.def_kind(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    let ident = Ident::from_interned_str(name);\n+                    let ident = Ident::with_dummy_span(name);\n                     let vis = self.get_visibility(child_index);\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n@@ -987,7 +986,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         ty::AssocItem {\n-            ident: Ident::from_interned_str(name),\n+            ident: Ident::with_dummy_span(name),\n             kind,\n             vis: self.get_visibility(id),\n             defaultness: container.defaultness(),\n@@ -1262,7 +1261,7 @@ impl<'a, 'tcx> CrateMetadata {\n         let mut key = self.def_path_table.def_key(index);\n         if self.is_proc_macro(index) {\n             let name = self.raw_proc_macro(index).name();\n-            key.disambiguated_data.data = DefPathData::MacroNs(InternedString::intern(name));\n+            key.disambiguated_data.data = DefPathData::MacroNs(Symbol::intern(name));\n         }\n         key\n     }"}, {"sha": "f1f9fac08ca3a83c8a106e335832b19be25f348e", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n \n         self.path.push_str(\"::\");\n \n-        self.path.push_str(&disambiguated_data.data.as_interned_str().as_str());\n+        self.path.push_str(&disambiguated_data.data.as_symbol().as_str());\n         Ok(self)\n     }\n "}, {"sha": "b09f9e9e536a558080694d0b8520fdbf28f5c615", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -762,7 +762,7 @@ fn compute_codegen_unit_name(\n         let components = def_path\n             .data\n             .iter()\n-            .map(|part| part.data.as_interned_str());\n+            .map(|part| part.data.as_symbol());\n \n         let volatile_suffix = if volatile {\n             Some(\"volatile\")"}, {"sha": "6444a82fd7379407c536cad33209d8af02613e05", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8214e9b44a5796749a70d7806e575412333e27c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b8214e9b44a5796749a70d7806e575412333e27c", "patch": "@@ -110,14 +110,14 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.cstore.crate_name_untracked(def_id.krate).as_interned_str(), None)\n+            (self.cstore.crate_name_untracked(def_id.krate), None)\n         } else {\n             let def_key = self.cstore.def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n \n-        let kind = ModuleKind::Def(DefKind::Mod, def_id, name.as_symbol());\n+        let kind = ModuleKind::Def(DefKind::Mod, def_id, name);\n         let module = self.arenas.alloc_module(ModuleData::new(\n             parent, kind, def_id, ExpnId::root(), DUMMY_SP\n         ));"}]}