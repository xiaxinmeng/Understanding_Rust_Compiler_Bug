{"sha": "16ecd276f036de9b5dccdbcce55b25a2a5699385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZWNkMjc2ZjAzNmRlOWI1ZGNjZGJjY2U1NWIyNWEyYTU2OTkzODU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-04T06:54:54Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-04T07:02:01Z"}, "message": "Implement syntax tree support for syntax inside string\n\nThis allows us to select a string or portions of it and try parsing it as rust\nsyntax. This is mostly helpful when developing tests where the test\nitself contains some rust syntax as a string.", "tree": {"sha": "9e8e9ea50064a2987ca17a0e4bd5a75c80e2ab3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8e9ea50064a2987ca17a0e4bd5a75c80e2ab3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ecd276f036de9b5dccdbcce55b25a2a5699385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ecd276f036de9b5dccdbcce55b25a2a5699385", "html_url": "https://github.com/rust-lang/rust/commit/16ecd276f036de9b5dccdbcce55b25a2a5699385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ecd276f036de9b5dccdbcce55b25a2a5699385/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db95fc812d2c839e847527b774dfda170266cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db95fc812d2c839e847527b774dfda170266cec", "html_url": "https://github.com/rust-lang/rust/commit/0db95fc812d2c839e847527b774dfda170266cec"}], "stats": {"total": 214, "additions": 206, "deletions": 8}, "files": [{"sha": "b8a4adbceb0d2d777dc28cace933a469b926fec5", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16ecd276f036de9b5dccdbcce55b25a2a5699385/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ecd276f036de9b5dccdbcce55b25a2a5699385/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=16ecd276f036de9b5dccdbcce55b25a2a5699385", "patch": "@@ -32,13 +32,14 @@ mod references;\n mod impls;\n mod assists;\n mod diagnostics;\n+mod syntax_tree;\n \n #[cfg(test)]\n mod marks;\n \n use std::sync::Arc;\n \n-use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit, AstNode, algo};\n+use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n use ra_db::{\n     SourceDatabase, CheckCanceled,\n@@ -246,13 +247,7 @@ impl Analysis {\n     /// Returns a syntax tree represented as `String`, for debug purposes.\n     // FIXME: use a better name here.\n     pub fn syntax_tree(&self, file_id: FileId, text_range: Option<TextRange>) -> String {\n-        if let Some(text_range) = text_range {\n-            let file = self.db.parse(file_id);\n-            let node = algo::find_covering_node(file.syntax(), text_range);\n-            node.debug_dump()\n-        } else {\n-            self.db.parse(file_id).syntax().debug_dump()\n-        }\n+        syntax_tree::syntax_tree(&self.db, file_id, text_range)\n     }\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor"}, {"sha": "cdee63d59de8614dc3fad7763a6fa6ff846732ef", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/16ecd276f036de9b5dccdbcce55b25a2a5699385/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ecd276f036de9b5dccdbcce55b25a2a5699385/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=16ecd276f036de9b5dccdbcce55b25a2a5699385", "patch": "@@ -0,0 +1,85 @@\n+use ra_db::SourceDatabase;\r\n+use crate::db::RootDatabase;\r\n+use ra_syntax::{\r\n+    SourceFile, SyntaxNode, TextRange, AstNode,\r\n+    algo::{self, visit::{visitor, Visitor}}, ast::{self, AstToken}\r\n+};\r\n+\r\n+pub use ra_db::FileId;\r\n+\r\n+pub(crate) fn syntax_tree(\r\n+    db: &RootDatabase,\r\n+    file_id: FileId,\r\n+    text_range: Option<TextRange>,\r\n+) -> String {\r\n+    if let Some(text_range) = text_range {\r\n+        let file = db.parse(file_id);\r\n+        let node = algo::find_covering_node(file.syntax(), text_range);\r\n+\r\n+        if let Some(tree) = syntax_tree_for_string(node, text_range) {\r\n+            return tree;\r\n+        }\r\n+\r\n+        node.debug_dump()\r\n+    } else {\r\n+        db.parse(file_id).syntax().debug_dump()\r\n+    }\r\n+}\r\n+\r\n+/// Attempts parsing the selected contents of a string literal\r\n+/// as rust syntax and returns its syntax tree\r\n+fn syntax_tree_for_string(node: &SyntaxNode, text_range: TextRange) -> Option<String> {\r\n+    // When the range is inside a string\r\n+    // we'll attempt parsing it as rust syntax\r\n+    // to provide the syntax tree of the contents of the string\r\n+    visitor()\r\n+        .visit(|node: &ast::String| syntax_tree_for_token(node, text_range))\r\n+        .visit(|node: &ast::RawString| syntax_tree_for_token(node, text_range))\r\n+        .accept(node)?\r\n+}\r\n+\r\n+fn syntax_tree_for_token<T: AstToken>(node: &T, text_range: TextRange) -> Option<String> {\r\n+    // Range of the full node\r\n+    let node_range = node.syntax().range();\r\n+    let text = node.text().to_string();\r\n+\r\n+    // We start at some point inside the node\r\n+    // Either we have selected the whole string\r\n+    // or our selection is inside it\r\n+    let start = text_range.start() - node_range.start();\r\n+\r\n+    // how many characters we have selected\r\n+    let len = text_range.len().to_usize();\r\n+\r\n+    let node_len = node_range.len().to_usize();\r\n+\r\n+    let start = start.to_usize();\r\n+\r\n+    // We want to cap our length\r\n+    let len = len.min(node_len);\r\n+\r\n+    // Ensure our slice is inside the actual string\r\n+    let end = if start + len < text.len() { start + len } else { text.len() - start };\r\n+\r\n+    let text = &text[start..end];\r\n+\r\n+    // Remove possible extra string quotes from the start\r\n+    // and the end of the string\r\n+    let text = text\r\n+        .trim_start_matches('r')\r\n+        .trim_start_matches('#')\r\n+        .trim_start_matches('\"')\r\n+        .trim_end_matches('#')\r\n+        .trim_end_matches('\"')\r\n+        .trim();\r\n+\r\n+    let parsed = SourceFile::parse(&text);\r\n+\r\n+    // If the \"file\" parsed without errors,\r\n+    // return its syntax\r\n+    if parsed.errors().is_empty() {\r\n+        return Some(parsed.syntax().debug_dump());\r\n+    }\r\n+\r\n+    None\r\n+}\r"}, {"sha": "0f0766f621408e5bab834843ad710ae116c38c4e", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/16ecd276f036de9b5dccdbcce55b25a2a5699385/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ecd276f036de9b5dccdbcce55b25a2a5699385/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=16ecd276f036de9b5dccdbcce55b25a2a5699385", "patch": "@@ -272,3 +272,121 @@ EXPR_STMT@[16; 58)\n         .trim()\n     );\n }\n+\n+#[test]\n+fn test_syntax_tree_inside_string() {\n+    let (analysis, range) = single_file_with_range(\n+        r#\"fn test() {\n+    assert!(\"\n+<|>fn foo() {\n+}<|>\n+fn bar() {\n+}\n+    \", \"\");\n+}\"#\n+        .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 12)\n+  FN_DEF@[0; 12)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 12)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      R_CURLY@[11; 12)\n+\"#\n+        .trim()\n+    );\n+\n+    // With a raw string\n+    let (analysis, range) = single_file_with_range(\n+        r###\"fn test() {\n+    assert!(r#\"\n+<|>fn foo() {\n+}<|>\n+fn bar() {\n+}\n+    \"#, \"\");\n+}\"###\n+            .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 12)\n+  FN_DEF@[0; 12)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 12)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      R_CURLY@[11; 12)\n+\"#\n+        .trim()\n+    );\n+\n+    // With a raw string\n+    let (analysis, range) = single_file_with_range(\n+        r###\"fn test() {\n+    assert!(r<|>#\"\n+fn foo() {\n+}\n+fn bar() {\n+}\"<|>#, \"\");\n+}\"###\n+            .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 25)\n+  FN_DEF@[0; 12)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 12)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      R_CURLY@[11; 12)\n+  WHITESPACE@[12; 13)\n+  FN_DEF@[13; 25)\n+    FN_KW@[13; 15)\n+    WHITESPACE@[15; 16)\n+    NAME@[16; 19)\n+      IDENT@[16; 19) \"bar\"\n+    PARAM_LIST@[19; 21)\n+      L_PAREN@[19; 20)\n+      R_PAREN@[20; 21)\n+    WHITESPACE@[21; 22)\n+    BLOCK@[22; 25)\n+      L_CURLY@[22; 23)\n+      WHITESPACE@[23; 24)\n+      R_CURLY@[24; 25)\n+\n+\"#\n+        .trim()\n+    );\n+}"}]}