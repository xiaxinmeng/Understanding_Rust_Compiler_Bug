{"sha": "eb492455f2b840d28a10a68702727a5227343634", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDkyNDU1ZjJiODQwZDI4YTEwYTY4NzAyNzI3YTUyMjczNDM2MzQ=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-09-18T14:40:08Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-10-07T04:01:56Z"}, "message": "Address review comments.", "tree": {"sha": "a6fbccd84a419ef477692f736a5926b23373ce7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6fbccd84a419ef477692f736a5926b23373ce7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb492455f2b840d28a10a68702727a5227343634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb492455f2b840d28a10a68702727a5227343634", "html_url": "https://github.com/rust-lang/rust/commit/eb492455f2b840d28a10a68702727a5227343634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb492455f2b840d28a10a68702727a5227343634/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3462b58f21542b4e26e38419ab3a1b19a1609fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3462b58f21542b4e26e38419ab3a1b19a1609fdb", "html_url": "https://github.com/rust-lang/rust/commit/3462b58f21542b4e26e38419ab3a1b19a1609fdb"}], "stats": {"total": 118, "additions": 63, "deletions": 55}, "files": [{"sha": "065959ed09fd1da00ab9385ed7ae4f1785d5ffef", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -96,7 +96,7 @@ pub enum NativeLibraryKind {\n     NativeStaticNobundle,\n     /// macOS-specific\n     NativeFramework,\n-    /// windows dynamic library without import library\n+    /// Windows dynamic library without import library.\n     NativeRawDylib,\n     /// default way to specify a dynamic library\n     NativeUnknown,"}, {"sha": "24ed8fcd8dd09c11d5bba67b6d533c8c8b8a9106", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -176,7 +176,7 @@ impl Collector<'tcx> {\n                                            sym::raw_dylib,\n                                            span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n                                            GateIssue::Language,\n-                                           \"kind=\\\"raw-dylib\\\" is feature gated\");\n+                                           \"kind=\\\"raw-dylib\\\" is unstable\");\n         }\n         self.libs.push(lib);\n     }"}, {"sha": "9aeeffa70a131d02c261591870dec6e3150c50f8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -2642,33 +2642,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.check_name(sym::link_name) {\n             codegen_fn_attrs.link_name = attr.value_str();\n         } else if attr.check_name(sym::link_ordinal) {\n-            use syntax::ast::{Lit, LitIntType, LitKind};\n-            let meta_item_list = attr.meta_item_list();\n-            let sole_meta_lit = if let Some(meta_item_list) = &meta_item_list {\n-                if meta_item_list.len() == 1 {\n-                    meta_item_list.get(0).and_then(|item| item.literal())\n-                } else {\n-                    None\n-                }\n-            } else {\n-                None\n-            };\n-            if let Some(Lit { node: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) =\n-                sole_meta_lit\n-            {\n-                if *ordinal <= std::usize::MAX as u128 {\n-                    codegen_fn_attrs.link_ordinal = Some(*ordinal as usize);\n-                } else {\n-                    let msg = format!(\n-                        \"too large ordinal value in link_ordinal \\\n-                         value: `{}`\",\n-                        &ordinal\n-                    );\n-                    tcx.sess.span_err(attr.span, &msg);\n-                }\n-            } else {\n-                let msg = \"illegal ordinal format in link_ordinal\";\n-                tcx.sess.span_err(attr.span, &msg);\n+            if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n+                codegen_fn_attrs.link_ordinal = ordinal;\n             }\n         }\n     }\n@@ -2747,6 +2722,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     // purpose functions as they wouldn't have the right target features\n     // enabled. For that reason we also forbid #[inline(always)] as it can't be\n     // respected.\n+\n     if codegen_fn_attrs.target_features.len() > 0 {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let Some(span) = inline_span {\n@@ -2771,15 +2747,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }\n-    if codegen_fn_attrs.link_name.is_some() && codegen_fn_attrs.link_ordinal.is_some() {\n-        if let Some(span) = inline_span {\n-            tcx.sess.span_err(\n-                span,\n-                \"cannot use `#[link_name]` with \\\n-                 `#[link_ordinal]`\",\n-            );\n-        }\n-    }\n+    check_link_name_xor_ordinal(tcx, &codegen_fn_attrs, inline_span);\n \n     // Internal symbols to the standard library all have no_mangle semantics in\n     // that they have defined symbol names present in the function name. This\n@@ -2790,3 +2758,44 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n \n     codegen_fn_attrs\n }\n+\n+fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n+    use syntax::ast::{Lit, LitIntType, LitKind};\n+    let meta_item_list = attr.meta_item_list();\n+    let meta_item_list: Option<&[ast::NestedMetaItem]> = meta_item_list.as_ref().map(Vec::as_ref);\n+    let sole_meta_list = match meta_item_list {\n+        Some([item]) => item.literal(),\n+        _ => None,\n+    };\n+    if let Some(Lit { node: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) = sole_meta_list {\n+        if *ordinal <= std::usize::MAX as u128 {\n+            Some(*ordinal as usize)\n+        } else {\n+            let msg = format!(\n+                \"too large ordinal value in link_ordinal value: `{}`\",\n+                &ordinal\n+            );\n+            tcx.sess.span_err(attr.span, &msg);\n+            None\n+        }\n+    } else {\n+        tcx.sess.span_err(attr.span, \"illegal ordinal format in link_ordinal\");\n+        None\n+    }\n+}\n+\n+fn check_link_name_xor_ordinal(\n+    tcx: TyCtxt<'_>,\n+    codegen_fn_attrs: &CodegenFnAttrs,\n+    inline_span: Option<Span>,\n+) {\n+    if codegen_fn_attrs.link_name.is_none() || codegen_fn_attrs.link_ordinal.is_none() {\n+        return;\n+    }\n+    let msg = \"cannot use `#[link_name]` with `#[link_ordinal]`\";\n+    if let Some(span) = inline_span {\n+        tcx.sess.span_err(span, msg);\n+    } else {\n+        tcx.sess.err(msg);\n+    }\n+}"}, {"sha": "53bd34d96dd6a9a3f0631257e88bb4a53f93f714", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -539,4 +539,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_generics,\n     sym::or_patterns,\n     sym::let_chains,\n+    sym::raw_dylib,\n ];"}, {"sha": "c12d0ce06ffefd5d37acd4b843422299e7d664ef", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -277,12 +277,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n     ),\n     gated!(\n-        link_ordinal,\n-        Whitelisted,\n-        template!(List: \"ordinal\"),\n-        raw_dylib,\n+        link_ordinal, Whitelisted, template!(List: \"ordinal\"), raw_dylib,\n         experimental!(link_ordinal)\n     ),\n+\n     // Plugins:\n     (\n         sym::plugin_registrar, Normal, template!(Word),"}, {"sha": "d6aac45d28ffb0158c86b203d8b7eb3d434f5c6a", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-2.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3462b58f21542b4e26e38419ab3a1b19a1609fdb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462b58f21542b4e26e38419ab3a1b19a1609fdb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs?ref=3462b58f21542b4e26e38419ab3a1b19a1609fdb", "patch": "@@ -1,8 +0,0 @@\n-#[link(name=\"foo\")]\n-extern {\n-#[link_ordinal(42)]\n-//~^ ERROR: the `#[link_ordinal]` attribute is an experimental feature\n-fn foo();\n-}\n-\n-fn main() {}"}, {"sha": "14345bad6e5b9b8127b671900819146ec9cf7674", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -0,0 +1,8 @@\n+#[link(name=\"foo\")]\n+extern {\n+    #[link_ordinal(42)]\n+    //~^ ERROR: the `#[link_ordinal]` attribute is an experimental feature\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "0869d7ad48a8c4b43858c3e596cc908ac083733f", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: the `#[link_ordinal]` attribute is an experimental feature\n-  --> $DIR/feature-gate-raw-dylib-2.rs:3:1\n+  --> $DIR/feature-gate-raw-dylib-2.rs:3:5\n    |\n-LL | #[link_ordinal(42)]\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL |     #[link_ordinal(42)]\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n    = help: add `#![feature(raw_dylib)]` to the crate attributes to enable", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-2.stderr"}, {"sha": "f0f83e0426dd683f1e6aa04f1503af4dc50cde76", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -1,5 +1,5 @@\n #[link(name=\"foo\", kind=\"raw-dylib\")]\n-//~^ ERROR: kind=\"raw-dylib\" is feature gated\n+//~^ ERROR: kind=\"raw-dylib\" is unstable\n extern {}\n \n fn main() {}", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.rs"}, {"sha": "0ca9de28be1ac00d2d5d54768c6e8b199c978226", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb492455f2b840d28a10a68702727a5227343634/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr?ref=eb492455f2b840d28a10a68702727a5227343634", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: kind=\"raw-dylib\" is feature gated\n+error[E0658]: kind=\"raw-dylib\" is unstable\n   --> $DIR/feature-gate-raw-dylib.rs:1:1\n    |\n LL | #[link(name=\"foo\", kind=\"raw-dylib\")]", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.stderr"}]}