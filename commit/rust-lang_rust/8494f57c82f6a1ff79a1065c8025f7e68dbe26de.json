{"sha": "8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTRmNTdjODJmNmExZmY3OWExMDY1YzgwMjVmN2U2OGRiZTI2ZGU=", "commit": {"author": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-02-24T01:02:48Z"}, "committer": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-02-24T01:19:47Z"}, "message": "Fix author lint\n\nThe author lint was generating invalid code as shown on issue:\nhttps://github.com/rust-lang-nursery/rust-clippy/issues/2442\n\nI've changed the generated code to properly track cast\nexpressions.\n\nUnfortunatelly, I've had to rewrite the `visit_decl` method, to\navoid that last if of the chain will be added. After looking at the code,\nthis last line was being added because of the `let x: char` part, but not\nbecause of the `0x45df as char` expression.\n\nIt seems that let statements should not generate code on the author\nlint, but I'm not sure that this is true or if I'm breaking\nsomething on other code generation parts.\n\nFinally, I've added a test for the author lint, but I'm not sure that\nthis needs to be added to the testsuite.", "tree": {"sha": "6d9e95bb0612ba4e17b83e19ee2ec1644a3811fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9e95bb0612ba4e17b83e19ee2ec1644a3811fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "html_url": "https://github.com/rust-lang/rust/commit/8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/comments", "author": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "url": "https://api.github.com/repos/rust-lang/rust/commits/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "html_url": "https://github.com/rust-lang/rust/commit/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "d7d29ceda6e69ae51f45d8d48b0e706d53f4c0c2", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "patch": "@@ -5,8 +5,9 @@\n \n use rustc::lint::*;\n use rustc::hir;\n-use rustc::hir::{Expr, Expr_, QPath};\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::{Expr, Expr_, QPath, Ty_};\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor, walk_decl};\n+use rustc::hir::Decl;\n use syntax::ast::{self, Attribute, LitKind, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::Span;\n use std::collections::HashMap;\n@@ -79,6 +80,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         prelude();\n+\n         PrintVisitor::new(\"item\").visit_impl_item(item);\n         done();\n     }\n@@ -182,6 +184,18 @@ struct PrintVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n+    fn visit_decl(&mut self, d: &'tcx Decl) {\n+        match d.node {\n+            hir::DeclLocal(ref local) => {\n+                self.visit_pat(&local.pat);\n+                if let Some(ref e) = local.init {\n+                    self.visit_expr(e);\n+                }\n+            },\n+            _ => walk_decl(self, d)\n+        }\n+    }\n+\n     fn visit_expr(&mut self, expr: &Expr) {\n         print!(\"    if let Expr_::Expr\");\n         let current = format!(\"{}.node\", self.current);\n@@ -260,9 +274,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     },\n                 }\n             },\n-            Expr_::ExprCast(ref expr, ref _ty) => {\n+            Expr_::ExprCast(ref expr, ref ty) => {\n                 let cast_pat = self.next(\"expr\");\n-                println!(\"Cast(ref {}, _) = {};\", cast_pat, current);\n+                let cast_ty = self.next(\"cast_ty\");\n+                let qp_label = self.next(\"qp\");\n+\n+                println!(\"Cast(ref {}, ref {}) = {};\", cast_pat, cast_ty, current);\n+                if let Ty_::TyPath(ref qp) = ty.node {\n+                    println!(\"    if let Ty_::TyPath(ref {}) = {}.node;\", qp_label, cast_ty);\n+                    self.current = qp_label;\n+                    self.visit_qpath(&qp, ty.id, ty.span);\n+                }\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },"}, {"sha": "3a819872bc5d14d31651f74edd0ab7df8f1fbbea", "filename": "tests/ui/author.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/tests%2Fui%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/tests%2Fui%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.rs?ref=8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "patch": "@@ -0,0 +1,7 @@\n+#![feature(plugin, custom_attribute)]\n+\n+fn main() {\n+\n+    #[clippy(author)]\n+    let x: char = 0x45 as char;\n+}"}, {"sha": "0efb3e8b27274d6bee5e3d0a00f2836c003130f1", "filename": "tests/ui/author.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8494f57c82f6a1ff79a1065c8025f7e68dbe26de/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "patch": "@@ -0,0 +1,10 @@\n+if_chain! {\n+    if let Expr_::ExprCast(ref expr, ref cast_ty) = stmt.node;\n+    if let Ty_::TyPath(ref qp) = cast_ty.node;\n+    if match_qpath(qp, &[\"char\"]);\n+    if let Expr_::ExprLit(ref lit) = expr.node;\n+    if let LitKind::Int(69, _) = lit.node;\n+    then {\n+        // report your lint here\n+    }\n+}"}]}