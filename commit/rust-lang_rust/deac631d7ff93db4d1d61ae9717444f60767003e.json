{"sha": "deac631d7ff93db4d1d61ae9717444f60767003e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYWM2MzFkN2ZmOTNkYjRkMWQ2MWFlOTcxNzQ0NGY2MDc2NzAwM2U=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-30T14:20:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-27T18:20:27Z"}, "message": "Use Arena inside hir::FnSig.", "tree": {"sha": "698f5ccc1edc229206e51f4679c552603c72f1df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/698f5ccc1edc229206e51f4679c552603c72f1df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deac631d7ff93db4d1d61ae9717444f60767003e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deac631d7ff93db4d1d61ae9717444f60767003e", "html_url": "https://github.com/rust-lang/rust/commit/deac631d7ff93db4d1d61ae9717444f60767003e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deac631d7ff93db4d1d61ae9717444f60767003e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34", "html_url": "https://github.com/rust-lang/rust/commit/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "519c1fe4cc8e436d3f75335530ba04fd587d9efe", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -45,7 +45,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n     /// `fn foo(&self)`\n-    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a [Attribute]),\n+    Method(Ident, &'a FnSig<'a>, Option<&'a Visibility>, &'a [Attribute]),\n \n     /// `|x, y| {}`\n     Closure(&'a [Attribute]),"}, {"sha": "4f1769dfd245b9729bb7e25e0c6cdc8e19e6f851", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -323,6 +323,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             )\n                         },\n                     );\n+                    let decl = this.arena.alloc(decl.into_inner());\n                     let sig = hir::FnSig { decl, header: this.lower_fn_header(header) };\n                     hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n@@ -1253,7 +1254,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n-    ) -> (hir::Generics, hir::FnSig) {\n+    ) -> (hir::Generics, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n@@ -1268,6 +1269,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 )\n             },\n         );\n+        let decl = self.arena.alloc(decl.into_inner());\n         (generics, hir::FnSig { header, decl })\n     }\n "}, {"sha": "6d8fd9d2f011a956d4de1a1b60c6a01900d0fa28", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -151,31 +151,31 @@ impl<'a> FnLikeNode<'a> {\n     pub fn body(self) -> ast::BodyId {\n         self.handle(\n             |i: ItemFnParts<'a>| i.body,\n-            |_, _, _: &'a ast::FnSig, _, body: ast::BodyId, _, _| body,\n+            |_, _, _: &'a ast::FnSig<'a>, _, body: ast::BodyId, _, _| body,\n             |c: ClosureParts<'a>| c.body,\n         )\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n         self.handle(\n             |i: ItemFnParts<'a>| &*i.decl,\n-            |_, _, sig: &'a ast::FnSig, _, _, _, _| &sig.decl,\n+            |_, _, sig: &'a ast::FnSig<'a>, _, _, _, _| &sig.decl,\n             |c: ClosureParts<'a>| c.decl,\n         )\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(\n             |i: ItemFnParts<'_>| i.span,\n-            |_, _, _: &'a ast::FnSig, _, _, span, _| span,\n+            |_, _, _: &'a ast::FnSig<'a>, _, _, span, _| span,\n             |c: ClosureParts<'_>| c.span,\n         )\n     }\n \n     pub fn id(self) -> ast::HirId {\n         self.handle(\n             |i: ItemFnParts<'_>| i.id,\n-            |id, _, _: &'a ast::FnSig, _, _, _, _| id,\n+            |id, _, _: &'a ast::FnSig<'a>, _, _, _, _| id,\n             |c: ClosureParts<'_>| c.id,\n         )\n     }\n@@ -197,7 +197,7 @@ impl<'a> FnLikeNode<'a> {\n             FnKind::ItemFn(p.ident, p.generics, p.header, p.vis, p.attrs)\n         };\n         let closure = |c: ClosureParts<'a>| FnKind::Closure(c.attrs);\n-        let method = |_, ident: Ident, sig: &'a ast::FnSig, vis, _, _, attrs| {\n+        let method = |_, ident: Ident, sig: &'a ast::FnSig<'a>, vis, _, _, attrs| {\n             FnKind::Method(ident, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n@@ -209,7 +209,7 @@ impl<'a> FnLikeNode<'a> {\n         M: FnOnce(\n             ast::HirId,\n             Ident,\n-            &'a ast::FnSig,\n+            &'a ast::FnSig<'a>,\n             Option<&'a ast::Visibility>,\n             ast::BodyId,\n             Span,"}, {"sha": "d933f1e49e4a3b512fd7f491f6b3abd7f933a05d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -69,7 +69,7 @@ impl<'hir> Entry<'hir> {\n         }\n     }\n \n-    fn fn_sig(&self) -> Option<&'hir FnSig> {\n+    fn fn_sig(&self) -> Option<&'hir FnSig<'hir>> {\n         match &self.node {\n             Node::Item(item) => match &item.kind {\n                 ItemKind::Fn(sig, _, _) => Some(sig),\n@@ -437,7 +437,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig> {\n+    pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {\n         if let Some(entry) = self.find_entry(hir_id) {\n             entry.fn_sig()\n         } else {"}, {"sha": "f54bc51baf1fe5930a8c54d73f335e1e84a8994a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -1917,9 +1917,9 @@ pub struct MutTy {\n /// Represents a function's signature in a trait declaration,\n /// trait implementation, or a free function.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct FnSig {\n+pub struct FnSig<'hir> {\n     pub header: FnHeader,\n-    pub decl: P<FnDecl>,\n+    pub decl: &'hir FnDecl,\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -1960,7 +1960,7 @@ pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty, Option<BodyId>),\n     /// A method with an optional body.\n-    Method(FnSig, TraitMethod),\n+    Method(FnSig<'hir>, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds, Option<&'hir Ty>),\n@@ -1994,7 +1994,7 @@ pub enum ImplItemKind<'hir> {\n     /// of the expression.\n     Const(&'hir Ty, BodyId),\n     /// A method implementation with the given signature and body.\n-    Method(FnSig, BodyId),\n+    Method(FnSig<'hir>, BodyId),\n     /// An associated type.\n     TyAlias(&'hir Ty),\n     /// An associated `type = impl Trait`.\n@@ -2528,7 +2528,7 @@ pub enum ItemKind<'hir> {\n     /// A `const` item.\n     Const(&'hir Ty, BodyId),\n     /// A function declaration.\n-    Fn(FnSig, Generics, BodyId),\n+    Fn(FnSig<'hir>, Generics, BodyId),\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`."}, {"sha": "9e2702a0ff2562af8a92cd3e65d845416ff1044a", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -822,7 +822,7 @@ impl<'a> State<'a> {\n     pub fn print_method_sig(\n         &mut self,\n         ident: ast::Ident,\n-        m: &hir::FnSig,\n+        m: &hir::FnSig<'_>,\n         generics: &hir::Generics,\n         vis: &hir::Visibility,\n         arg_names: &[ast::Ident],"}, {"sha": "1c8278480aa20e07ff39fec596a441452e5f3b37", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -194,7 +194,7 @@ fn check_associated_item(\n     tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n-    sig_if_method: Option<&hir::FnSig>,\n+    sig_if_method: Option<&hir::FnSig<'_>>,\n ) {\n     debug!(\"check_associated_item: {:?}\", item_id);\n \n@@ -774,7 +774,7 @@ const HELP_FOR_SELF_TYPE: &str = \"consider changing to `self`, `&self`, `&mut se\n \n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n-    fn_sig: &hir::FnSig,\n+    fn_sig: &hir::FnSig<'_>,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {"}, {"sha": "bf0e3872995b629c7e78ea0a2622164a50ade1d7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deac631d7ff93db4d1d61ae9717444f60767003e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=deac631d7ff93db4d1d61ae9717444f60767003e", "patch": "@@ -892,7 +892,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n }\n \n impl<'a> Clean<Method>\n-    for (&'a hir::FnSig, &'a hir::Generics, hir::BodyId, Option<hir::Defaultness>)\n+    for (&'a hir::FnSig<'a>, &'a hir::Generics, hir::BodyId, Option<hir::Defaultness>)\n {\n     fn clean(&self, cx: &DocContext<'_>) -> Method {\n         let (generics, decl) ="}]}