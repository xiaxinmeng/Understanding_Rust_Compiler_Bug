{"sha": "7a5376d23cb3324edcfaa278a9387898960d5f7c", "node_id": "C_kwDOAAsO6NoAKDdhNTM3NmQyM2NiMzMyNGVkY2ZhYTI3OGE5Mzg3ODk4OTYwZDVmN2M", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-25T16:15:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-21T19:40:06Z"}, "message": "Unreserve braced enum variants in value namespace", "tree": {"sha": "4bb2b3044fc029c8fb3d1a4cbbf91907c214540e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bb2b3044fc029c8fb3d1a4cbbf91907c214540e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5376d23cb3324edcfaa278a9387898960d5f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5376d23cb3324edcfaa278a9387898960d5f7c", "html_url": "https://github.com/rust-lang/rust/commit/7a5376d23cb3324edcfaa278a9387898960d5f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5376d23cb3324edcfaa278a9387898960d5f7c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cbc45942d5c0f6eb5d94e3b10762ba541958035", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbc45942d5c0f6eb5d94e3b10762ba541958035", "html_url": "https://github.com/rust-lang/rust/commit/1cbc45942d5c0f6eb5d94e3b10762ba541958035"}], "stats": {"total": 1006, "additions": 364, "deletions": 642}, "files": [{"sha": "1f5e3405951d0d01b8e72e1f5c001a47fc124a0a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2664,7 +2664,7 @@ impl VariantData {\n     }\n \n     /// Return the `NodeId` of this variant's constructor, if it has one.\n-    pub fn ctor_id(&self) -> Option<NodeId> {\n+    pub fn ctor_node_id(&self) -> Option<NodeId> {\n         match *self {\n             VariantData::Struct(..) => None,\n             VariantData::Tuple(_, id) | VariantData::Unit(id) => Some(id),"}, {"sha": "4c3216d98783b4f893103ee94f95a9e717d8f8eb", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -350,7 +350,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     } else {\n                         def.non_enum_variant()\n                     };\n-                    if !including_tuple_field.0 && variant.ctor_kind == CtorKind::Fn {\n+                    if !including_tuple_field.0 && variant.ctor_kind() == Some(CtorKind::Fn) {\n                         return None;\n                     }\n                     Some(variant.fields[field.index()].name.to_string())"}, {"sha": "d87117dffdc60b41c33f6fc778a11ae719561864", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -998,7 +998,7 @@ fn build_struct_type_di_node<'ll, 'tcx>(\n                 .iter()\n                 .enumerate()\n                 .map(|(i, f)| {\n-                    let field_name = if variant_def.ctor_kind == CtorKind::Fn {\n+                    let field_name = if variant_def.ctor_kind() == Some(CtorKind::Fn) {\n                         // This is a tuple struct\n                         tuple_field_name(i)\n                     } else {"}, {"sha": "564ab351bd41ffbd0d55ebc3e57f2072d1cda594", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -269,7 +269,7 @@ fn build_enum_variant_struct_type_di_node<'ll, 'tcx>(\n         |cx, struct_type_di_node| {\n             (0..variant_layout.fields.count())\n                 .map(|field_index| {\n-                    let field_name = if variant_def.ctor_kind != CtorKind::Fn {\n+                    let field_name = if variant_def.ctor_kind() != Some(CtorKind::Fn) {\n                         // Fields have names\n                         Cow::from(variant_def.fields[field_index].name.as_str())\n                     } else {"}, {"sha": "149cf4ece37d154613cd4bc44245ca60f2f73cd6", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -28,8 +28,6 @@ pub enum CtorKind {\n     Fn,\n     /// Constructor constant automatically created by a unit struct/variant.\n     Const,\n-    /// Unusable name in value namespace created by a struct variant.\n-    Fictive,\n }\n \n /// An attribute that is not a macro; e.g., `#[inline]` or `#[rustfmt::skip]`.\n@@ -132,13 +130,9 @@ impl DefKind {\n             DefKind::Variant => \"variant\",\n             DefKind::Ctor(CtorOf::Variant, CtorKind::Fn) => \"tuple variant\",\n             DefKind::Ctor(CtorOf::Variant, CtorKind::Const) => \"unit variant\",\n-            DefKind::Ctor(CtorOf::Variant, CtorKind::Fictive) => \"struct variant\",\n             DefKind::Struct => \"struct\",\n             DefKind::Ctor(CtorOf::Struct, CtorKind::Fn) => \"tuple struct\",\n             DefKind::Ctor(CtorOf::Struct, CtorKind::Const) => \"unit struct\",\n-            DefKind::Ctor(CtorOf::Struct, CtorKind::Fictive) => {\n-                panic!(\"impossible struct constructor\")\n-            }\n             DefKind::OpaqueTy => \"opaque type\",\n             DefKind::ImplTraitPlaceholder => \"opaque type in trait\",\n             DefKind::TyAlias => \"type alias\",\n@@ -562,19 +556,11 @@ impl<T> PerNS<Option<T>> {\n }\n \n impl CtorKind {\n-    pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {\n-        match *vdata {\n-            ast::VariantData::Tuple(..) => CtorKind::Fn,\n-            ast::VariantData::Unit(..) => CtorKind::Const,\n-            ast::VariantData::Struct(..) => CtorKind::Fictive,\n-        }\n-    }\n-\n-    pub fn from_hir(vdata: &hir::VariantData<'_>) -> CtorKind {\n+    pub fn from_ast(vdata: &ast::VariantData) -> Option<(CtorKind, NodeId)> {\n         match *vdata {\n-            hir::VariantData::Tuple(..) => CtorKind::Fn,\n-            hir::VariantData::Unit(..) => CtorKind::Const,\n-            hir::VariantData::Struct(..) => CtorKind::Fictive,\n+            ast::VariantData::Tuple(_, node_id) => Some((CtorKind::Fn, node_id)),\n+            ast::VariantData::Unit(node_id) => Some((CtorKind::Const, node_id)),\n+            ast::VariantData::Struct(..) => None,\n         }\n     }\n }"}, {"sha": "bd5b93293a9b65b4d748482d9cce2df4eb8d4e7a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2913,20 +2913,29 @@ impl<'hir> VariantData<'hir> {\n         }\n     }\n \n-    /// Return the `LocalDefId` of this variant's constructor, if it has one.\n-    pub fn ctor_def_id(&self) -> Option<LocalDefId> {\n+    pub fn ctor(&self) -> Option<(CtorKind, HirId, LocalDefId)> {\n         match *self {\n-            VariantData::Struct(_, _) => None,\n-            VariantData::Tuple(_, _, def_id) | VariantData::Unit(_, def_id) => Some(def_id),\n+            VariantData::Tuple(_, hir_id, def_id) => Some((CtorKind::Fn, hir_id, def_id)),\n+            VariantData::Unit(hir_id, def_id) => Some((CtorKind::Const, hir_id, def_id)),\n+            VariantData::Struct(..) => None,\n         }\n     }\n \n+    #[inline]\n+    pub fn ctor_kind(&self) -> Option<CtorKind> {\n+        self.ctor().map(|(kind, ..)| kind)\n+    }\n+\n     /// Return the `HirId` of this variant's constructor, if it has one.\n+    #[inline]\n     pub fn ctor_hir_id(&self) -> Option<HirId> {\n-        match *self {\n-            VariantData::Struct(_, _) => None,\n-            VariantData::Tuple(_, hir_id, _) | VariantData::Unit(hir_id, _) => Some(hir_id),\n-        }\n+        self.ctor().map(|(_, hir_id, _)| hir_id)\n+    }\n+\n+    /// Return the `LocalDefId` of this variant's constructor, if it has one.\n+    #[inline]\n+    pub fn ctor_def_id(&self) -> Option<LocalDefId> {\n+        self.ctor().map(|(.., def_id)| def_id)\n     }\n }\n "}, {"sha": "069b405423c46b16aa023d60acb5be0419dcba7a", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1165,7 +1165,7 @@ fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n     }\n \n     if def.repr().int.is_none() {\n-        let is_unit = |var: &ty::VariantDef| matches!(var.ctor_kind, CtorKind::Const);\n+        let is_unit = |var: &ty::VariantDef| matches!(var.ctor_kind(), Some(CtorKind::Const));\n         let has_disr = |var: &ty::VariantDef| matches!(var.discr, ty::VariantDiscr::Explicit(_));\n \n         let has_non_units = def.variants().iter().any(|var| !is_unit(var));"}, {"sha": "9b8cc884e181c64d9d2617f134a20f7bfda4bda2", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -24,7 +24,6 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n-use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::weak_lang_items::WEAK_LANG_ITEMS;\n@@ -794,7 +793,7 @@ fn convert_enum_variant_types(tcx: TyCtxt<'_>, def_id: DefId) {\n \n         // Convert the ctor, if any. This also registers the variant as\n         // an item.\n-        if let Some(ctor_def_id) = variant.ctor_def_id {\n+        if let Some(ctor_def_id) = variant.ctor_def_id() {\n             convert_variant_ctor(tcx, ctor_def_id.expect_local());\n         }\n     }\n@@ -803,7 +802,6 @@ fn convert_enum_variant_types(tcx: TyCtxt<'_>, def_id: DefId) {\n fn convert_variant(\n     tcx: TyCtxt<'_>,\n     variant_did: Option<LocalDefId>,\n-    ctor_did: Option<LocalDefId>,\n     ident: Ident,\n     discr: ty::VariantDiscr,\n     def: &hir::VariantData<'_>,\n@@ -840,10 +838,9 @@ fn convert_variant(\n     ty::VariantDef::new(\n         ident.name,\n         variant_did.map(LocalDefId::to_def_id),\n-        ctor_did.map(LocalDefId::to_def_id),\n+        def.ctor().map(|(kind, _, def_id)| (kind, def_id.to_def_id())),\n         discr,\n         fields,\n-        CtorKind::from_hir(def),\n         adt_kind,\n         parent_did.to_def_id(),\n         recovered,\n@@ -882,7 +879,6 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n                     convert_variant(\n                         tcx,\n                         Some(v.def_id),\n-                        v.data.ctor_def_id(),\n                         v.ident,\n                         discr,\n                         &v.data,\n@@ -894,35 +890,23 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n \n             (AdtKind::Enum, variants)\n         }\n-        ItemKind::Struct(ref def, _) => {\n-            let variants = std::iter::once(convert_variant(\n-                tcx,\n-                None,\n-                def.ctor_def_id(),\n-                item.ident,\n-                ty::VariantDiscr::Relative(0),\n-                def,\n-                AdtKind::Struct,\n-                def_id,\n-            ))\n-            .collect();\n-\n-            (AdtKind::Struct, variants)\n-        }\n-        ItemKind::Union(ref def, _) => {\n+        ItemKind::Struct(ref def, _) | ItemKind::Union(ref def, _) => {\n+            let adt_kind = match item.kind {\n+                ItemKind::Struct(..) => AdtKind::Struct,\n+                _ => AdtKind::Union,\n+            };\n             let variants = std::iter::once(convert_variant(\n                 tcx,\n                 None,\n-                def.ctor_def_id(),\n                 item.ident,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n-                AdtKind::Union,\n+                adt_kind,\n                 def_id,\n             ))\n             .collect();\n \n-            (AdtKind::Union, variants)\n+            (adt_kind, variants)\n         }\n         _ => bug!(),\n     };\n@@ -1171,7 +1155,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             compute_sig_of_foreign_fn_decl(tcx, def_id.to_def_id(), fn_decl, abi)\n         }\n \n-        Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n+        Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor().is_some() => {\n             let ty = tcx.type_of(tcx.hir().get_parent_item(hir_id));\n             let inputs = data.fields().iter().map(|f| tcx.type_of(f.def_id));\n             ty::Binder::dummy(tcx.mk_fn_sig("}, {"sha": "6ce0c18bf45f1368730d97a460aa0716eeca2900", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -72,8 +72,8 @@ pub fn add_constraints_from_crate<'a, 'tcx>(\n \n                 let adt = tcx.adt_def(def_id);\n                 for variant in adt.variants() {\n-                    if let Some(ctor) = variant.ctor_def_id {\n-                        constraint_cx.build_constraints_for_item(ctor.expect_local());\n+                    if let Some(ctor_def_id) = variant.ctor_def_id() {\n+                        constraint_cx.build_constraints_for_item(ctor_def_id.expect_local());\n                     }\n                 }\n             }"}, {"sha": "58e8f4747611af5c33bffca7e12477c4d5ff9437", "filename": "compiler/rustc_hir_analysis/src/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fterms.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -91,8 +91,8 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n \n                 let adt = tcx.adt_def(def_id);\n                 for variant in adt.variants() {\n-                    if let Some(ctor) = variant.ctor_def_id {\n-                        terms_cx.add_inferreds_for_item(ctor.expect_local());\n+                    if let Some(ctor_def_id) = variant.ctor_def_id() {\n+                        terms_cx.add_inferreds_for_item(ctor_def_id.expect_local());\n                     }\n                 }\n             }"}, {"sha": "42aa3bcee49a4215860400f088a9be508994e231", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -6,7 +6,7 @@ use crate::type_error_struct;\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, StashKey};\n use rustc_hir as hir;\n-use rustc_hir::def::{self, Namespace, Res};\n+use rustc_hir::def::{self, CtorKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n use rustc_infer::{\n     infer,\n@@ -595,7 +595,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let mut unit_variant = None;\n         if let hir::ExprKind::Path(qpath) = &callee_expr.kind\n-            && let Res::Def(def::DefKind::Ctor(kind, def::CtorKind::Const), _)\n+            && let Res::Def(def::DefKind::Ctor(kind, CtorKind::Const), _)\n                 = self.typeck_results.borrow().qpath_res(qpath, callee_expr.hir_id)\n             // Only suggest removing parens if there are no arguments\n             && arg_exprs.is_empty()"}, {"sha": "934d12404427e150a815484f3d9b3a1bca6afa9f", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2,6 +2,7 @@ use crate::FnCtxt;\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_hir::def::CtorKind;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_infer::infer::InferOk;\n@@ -404,27 +405,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\")\n                             && let Some((_, path)) = path.split_once(\"::\")\n                         {\n-                            return Some((path.to_string(), variant.ctor_kind, sole_field.name, note_about_variant_field_privacy));\n+                            return Some((path.to_string(), variant.ctor_kind(), sole_field.name, note_about_variant_field_privacy));\n                         }\n-                        Some((variant_path, variant.ctor_kind, sole_field.name, note_about_variant_field_privacy))\n+                        Some((variant_path, variant.ctor_kind(), sole_field.name, note_about_variant_field_privacy))\n                     } else {\n                         None\n                     }\n                 })\n                 .collect();\n \n-            let suggestions_for = |variant: &_, ctor, field_name| {\n+            let suggestions_for = |variant: &_, ctor_kind, field_name| {\n                 let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                     Some(ident) => format!(\"{ident}: \"),\n                     None => String::new(),\n                 };\n \n-                let (open, close) = match ctor {\n-                    hir::def::CtorKind::Fn => (\"(\".to_owned(), \")\"),\n-                    hir::def::CtorKind::Fictive => (format!(\" {{ {field_name}: \"), \" }\"),\n+                let (open, close) = match ctor_kind {\n+                    Some(CtorKind::Fn) => (\"(\".to_owned(), \")\"),\n+                    None => (format!(\" {{ {field_name}: \"), \" }\"),\n \n                     // unit variants don't have fields\n-                    hir::def::CtorKind::Const => unreachable!(),\n+                    Some(CtorKind::Const) => unreachable!(),\n                 };\n \n                 // Suggest constructor as deep into the block tree as possible."}, {"sha": "048bfd84e27097fbbecf37d7777917cc85e8718e", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -533,8 +533,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.set_tainted_by_errors(e);\n                 tcx.ty_error_with_guaranteed(e)\n             }\n-            Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                let e = report_unexpected_variant_res(tcx, res, qpath, expr.span);\n+            Res::Def(DefKind::Variant, _) => {\n+                let e = report_unexpected_variant_res(tcx, res, qpath, expr.span, \"E0533\", \"value\");\n                 tcx.ty_error_with_guaranteed(e)\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,\n@@ -2025,8 +2025,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         let variant_ident_span = self.tcx.def_ident_span(variant.def_id).unwrap();\n-        match variant.ctor_kind {\n-            CtorKind::Fn => match ty.kind() {\n+        match variant.ctor_kind() {\n+            Some(CtorKind::Fn) => match ty.kind() {\n                 ty::Adt(adt, ..) if adt.is_enum() => {\n                     err.span_label(\n                         variant_ident_span,"}, {"sha": "38499907663e1ab23c62dc2070e94528fa07371e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1164,11 +1164,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match *ty.kind() {\n                 ty::Adt(adt_def, substs) if adt_def.has_ctor() => {\n                     let variant = adt_def.non_enum_variant();\n-                    let ctor_def_id = variant.ctor_def_id.unwrap();\n-                    (\n-                        Res::Def(DefKind::Ctor(CtorOf::Struct, variant.ctor_kind), ctor_def_id),\n-                        Some(substs),\n-                    )\n+                    let (ctor_kind, ctor_def_id) = variant.ctor.unwrap();\n+                    (Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id), Some(substs))\n                 }\n                 _ => {\n                     let mut err = tcx.sess.struct_span_err("}, {"sha": "5104b448023236628cbd331d9ef885033017b8b9", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -53,9 +53,9 @@ use crate::check::check_fn;\n use crate::coercion::DynamicCoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::unord::UnordSet;\n-use rustc_errors::{struct_span_err, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{struct_span_err, DiagnosticId, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirIdMap, Node};\n use rustc_hir_analysis::astconv::AstConv;\n@@ -433,15 +433,27 @@ fn report_unexpected_variant_res(\n     res: Res,\n     qpath: &hir::QPath<'_>,\n     span: Span,\n+    err_code: &str,\n+    expected: &str,\n ) -> ErrorGuaranteed {\n-    struct_span_err!(\n-        tcx.sess,\n+    let res_descr = match res {\n+        Res::Def(DefKind::Variant, _) => \"struct variant\",\n+        _ => res.descr(),\n+    };\n+    let path_str = rustc_hir_pretty::qpath_to_string(qpath);\n+    let mut err = tcx.sess.struct_span_err_with_code(\n         span,\n-        E0533,\n-        \"expected unit struct, unit variant or constant, found {} `{}`\",\n-        res.descr(),\n-        rustc_hir_pretty::qpath_to_string(qpath),\n-    )\n+        format!(\"expected {expected}, found {res_descr} `{path_str}`\"),\n+        DiagnosticId::Error(err_code.into()),\n+    );\n+    match res {\n+        Res::Def(DefKind::Fn | DefKind::AssocFn, _) if err_code == \"E0164\" => {\n+            let patterns_url = \"https://doc.rust-lang.org/book/ch18-00-patterns.html\";\n+            err.span_label(span, \"`fn` calls are not allowed in patterns\");\n+            err.help(format!(\"for more information, visit {patterns_url}\"))\n+        }\n+        _ => err.span_label(span, format!(\"not a {expected}\")),\n+    }\n     .emit()\n }\n "}, {"sha": "9b1f0cff074a62e30deead5740a5374b62e76eed", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -566,23 +566,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n \n         // Check if we have an enum variant.\n+        let mut struct_variant = None;\n         if let ty::Adt(adt_def, _) = self_ty.kind() {\n             if adt_def.is_enum() {\n                 let variant_def = adt_def\n                     .variants()\n                     .iter()\n                     .find(|vd| tcx.hygienic_eq(method_name, vd.ident(tcx), adt_def.did()));\n                 if let Some(variant_def) = variant_def {\n-                    // Braced variants generate unusable names in value namespace (reserved for\n-                    // possible future use), so variants resolved as associated items may refer to\n-                    // them as well. It's ok to use the variant's id as a ctor id since an\n-                    // error will be reported on any use of such resolution anyway.\n-                    let ctor_def_id = variant_def.ctor_def_id.unwrap_or(variant_def.def_id);\n-                    tcx.check_stability(ctor_def_id, Some(expr_id), span, Some(method_name.span));\n-                    return Ok((\n-                        DefKind::Ctor(CtorOf::Variant, variant_def.ctor_kind),\n-                        ctor_def_id,\n-                    ));\n+                    if let Some((ctor_kind, ctor_def_id)) = variant_def.ctor {\n+                        tcx.check_stability(\n+                            ctor_def_id,\n+                            Some(expr_id),\n+                            span,\n+                            Some(method_name.span),\n+                        );\n+                        return Ok((DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id));\n+                    } else {\n+                        struct_variant = Some((DefKind::Variant, variant_def.def_id));\n+                    }\n                 }\n             }\n         }\n@@ -594,7 +596,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self_ty,\n             expr_id,\n             ProbeScope::TraitsInScope,\n-        )?;\n+        );\n+        let pick = match (pick, struct_variant) {\n+            // Fall back to a resolution that will produce an error later.\n+            (Err(_), Some(res)) => return Ok(res),\n+            (pick, _) => pick?,\n+        };\n \n         pick.maybe_emit_unstable_name_collision_hint(self.tcx, span, expr_id);\n "}, {"sha": "2fe1b1d8999bc6455e42bce4d988546e51a674f7", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -853,8 +853,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.set_tainted_by_errors(e);\n                 return tcx.ty_error_with_guaranteed(e);\n             }\n-            Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n-                let e = report_unexpected_variant_res(tcx, res, qpath, pat.span);\n+            Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::Variant, _) => {\n+                let expected = \"unit struct, unit variant or constant\";\n+                let e = report_unexpected_variant_res(tcx, res, qpath, pat.span, \"E0533\", expected);\n                 return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::SelfCtor(..)\n@@ -1002,30 +1003,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n-            let sm = tcx.sess.source_map();\n-            let path_str = sm\n-                .span_to_snippet(sm.span_until_char(pat.span, '('))\n-                .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s.trim_end()));\n-            let msg = format!(\n-                \"expected tuple struct or tuple variant, found {}{}\",\n-                res.descr(),\n-                path_str\n-            );\n-\n-            let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{msg}\");\n-            match res {\n-                Res::Def(DefKind::Fn | DefKind::AssocFn, _) => {\n-                    err.span_label(pat.span, \"`fn` calls are not allowed in patterns\");\n-                    err.help(\n-                        \"for more information, visit \\\n-                              https://doc.rust-lang.org/book/ch18-00-patterns.html\",\n-                    );\n-                }\n-                _ => {\n-                    err.span_label(pat.span, \"not a tuple variant or struct\");\n-                }\n-            }\n-            let e = err.emit();\n+            let expected = \"tuple struct or tuple variant\";\n+            let e = report_unexpected_variant_res(tcx, res, qpath, pat.span, \"E0164\", expected);\n             on_error(e);\n             e\n         };\n@@ -1481,8 +1460,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // if this is a tuple struct, then all field names will be numbers\n         // so if any fields in a struct pattern use shorthand syntax, they will\n         // be invalid identifiers (for example, Foo { 0, 1 }).\n-        if let (CtorKind::Fn, PatKind::Struct(qpath, field_patterns, ..)) =\n-            (variant.ctor_kind, &pat.kind)\n+        if let (Some(CtorKind::Fn), PatKind::Struct(qpath, field_patterns, ..)) =\n+            (variant.ctor_kind(), &pat.kind)\n         {\n             let has_shorthand_field_name = field_patterns.iter().any(|field| field.is_shorthand);\n             if has_shorthand_field_name {\n@@ -1659,7 +1638,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &'tcx [hir::PatField<'tcx>],\n         variant: &ty::VariantDef,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n-        if let (CtorKind::Fn, PatKind::Struct(qpath, ..)) = (variant.ctor_kind, &pat.kind) {\n+        if let (Some(CtorKind::Fn), PatKind::Struct(qpath, ..)) = (variant.ctor_kind(), &pat.kind) {\n             let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n                 s.print_qpath(qpath, false)\n             });"}, {"sha": "613a05e415ff9e2546e099d22b93e441aa4bcf53", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -65,7 +65,7 @@ use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n@@ -1967,7 +1967,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     .variants()\n                     .iter()\n                     .filter(|variant| {\n-                        variant.fields.len() == 1 && variant.ctor_kind == hir::def::CtorKind::Fn\n+                        variant.fields.len() == 1 && variant.ctor_kind() == Some(CtorKind::Fn)\n                     })\n                     .filter_map(|variant| {\n                         let sole_field = &variant.fields[0];"}, {"sha": "a7a4d0ca52772a7b15c754b22aef35cfb9512dad", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -159,8 +159,8 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_variant_data(&mut self, s: &'a ast::VariantData) {\n-        if let Some(ctor_hir_id) = s.ctor_id() {\n-            self.check_id(ctor_hir_id);\n+        if let Some(ctor_node_id) = s.ctor_node_id() {\n+            self.check_id(ctor_node_id);\n         }\n         ast_visit::walk_struct_def(self, s);\n     }"}, {"sha": "ac4b512619025968aec79d728ec45099b80661b5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::sync::{Lock, LockGuard, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, DeriveProcMacro};\n-use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n@@ -31,7 +31,7 @@ use rustc_session::cstore::{\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n use proc_macro::bridge::client::ProcMacro;\n@@ -866,12 +866,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         let variant_did =\n             if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };\n-        let ctor_did = data.ctor.map(|index| self.local_def_id(index));\n+        let ctor = data.ctor.map(|(kind, index)| (kind, self.local_def_id(index)));\n \n         ty::VariantDef::new(\n             self.item_name(index),\n             variant_did,\n-            ctor_did,\n+            ctor,\n             data.discr,\n             self.root\n                 .tables\n@@ -885,7 +885,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     vis: self.get_visibility(index),\n                 })\n                 .collect(),\n-            data.ctor_kind,\n             adt_kind,\n             parent_did,\n             false,\n@@ -1041,29 +1040,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 };\n \n                 callback(ModChild { ident, res, vis, span, macro_rules });\n-\n-                // For non-reexport variants add their fictive constructors to children.\n-                // Braced variants, unlike structs, generate unusable names in value namespace,\n-                // they are reserved for possible future use. It's ok to use the variant's id as\n-                // a ctor id since an error will be reported on any use of such resolution anyway.\n-                // Reexport lists automatically contain such constructors when necessary.\n-                if kind == DefKind::Variant && self.get_ctor_def_id_and_kind(child_index).is_none()\n-                {\n-                    let ctor_res =\n-                        Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fictive), def_id);\n-                    let mut vis = vis;\n-                    if vis.is_public() {\n-                        // For non-exhaustive variants lower the constructor visibility to\n-                        // within the crate. We only need this for fictive constructors,\n-                        // for other constructors correct visibilities\n-                        // were already encoded in metadata.\n-                        let mut attrs = self.get_item_attrs(def_id.index, sess);\n-                        if attrs.any(|item| item.has_name(sym::non_exhaustive)) {\n-                            vis = ty::Visibility::Restricted(self.local_def_id(CRATE_DEF_INDEX));\n-                        }\n-                    }\n-                    callback(ModChild { ident, res: ctor_res, vis, span, macro_rules: false });\n-                }\n             }\n         }\n \n@@ -1136,11 +1112,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {\n+    fn get_ctor(self, node_id: DefIndex) -> Option<(CtorKind, DefId)> {\n         match self.def_kind(node_id) {\n             DefKind::Struct | DefKind::Variant => {\n                 let vdata = self.root.tables.variant_data.get(self, node_id).unwrap().decode(self);\n-                vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))\n+                vdata.ctor.map(|(kind, index)| (kind, self.local_def_id(index)))\n             }\n             _ => None,\n         }"}, {"sha": "d96252ba569c6005e67ddca74192b62ecc198641", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -495,8 +495,8 @@ impl CStore {\n         self.get_crate_data(def.krate).get_struct_field_visibilities(def.index)\n     }\n \n-    pub fn ctor_def_id_and_kind_untracked(&self, def: DefId) -> Option<(DefId, CtorKind)> {\n-        self.get_crate_data(def.krate).get_ctor_def_id_and_kind(def.index)\n+    pub fn ctor_untracked(&self, def: DefId) -> Option<(CtorKind, DefId)> {\n+        self.get_crate_data(def.krate).get_ctor(def.index)\n     }\n \n     pub fn visibility_untracked(&self, def: DefId) -> Visibility<DefId> {"}, {"sha": "af4be12fe3a5dad4917750b90eed431ada951c1e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 21, "deletions": 40, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1221,9 +1221,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_enum_variant_info({:?})\", def_id);\n \n         let data = VariantData {\n-            ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n-            ctor: variant.ctor_def_id.map(|did| did.index),\n+            ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n@@ -1233,32 +1232,28 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             assert!(f.did.is_local());\n             f.did.index\n         }));\n-        if variant.ctor_kind == CtorKind::Fn {\n+        if let Some((CtorKind::Fn, ctor_def_id)) = variant.ctor {\n             // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.\n-            if let Some(ctor_def_id) = variant.ctor_def_id {\n-                record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n-            }\n+            record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n         }\n     }\n \n     fn encode_enum_variant_ctor(&mut self, def: ty::AdtDef<'tcx>, index: VariantIdx) {\n-        let tcx = self.tcx;\n         let variant = &def.variant(index);\n-        let def_id = variant.ctor_def_id.unwrap();\n+        let Some((ctor_kind, def_id)) = variant.ctor else { return };\n         debug!(\"EncodeContext::encode_enum_variant_ctor({:?})\", def_id);\n \n         // FIXME(eddyb) encode only the `CtorKind` for constructors.\n         let data = VariantData {\n-            ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n-            ctor: Some(def_id.index),\n+            ctor: Some((ctor_kind, def_id.index)),\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n         self.tables.constness.set(def_id.index, hir::Constness::Const);\n-        if variant.ctor_kind == CtorKind::Fn {\n-            record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n+        if ctor_kind == CtorKind::Fn {\n+            record!(self.tables.fn_sig[def_id] <- self.tcx.fn_sig(def_id));\n         }\n     }\n \n@@ -1313,23 +1308,22 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_struct_ctor(&mut self, adt_def: ty::AdtDef<'tcx>, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_struct_ctor({:?})\", def_id);\n-        let tcx = self.tcx;\n+    fn encode_struct_ctor(&mut self, adt_def: ty::AdtDef<'tcx>) {\n         let variant = adt_def.non_enum_variant();\n+        let Some((ctor_kind, def_id)) = variant.ctor else { return };\n+        debug!(\"EncodeContext::encode_struct_ctor({:?})\", def_id);\n \n         let data = VariantData {\n-            ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n-            ctor: Some(def_id.index),\n+            ctor: Some((ctor_kind, def_id.index)),\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n         record!(self.tables.variant_data[def_id] <- data);\n         self.tables.constness.set(def_id.index, hir::Constness::Const);\n-        if variant.ctor_kind == CtorKind::Fn {\n-            record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n+        if ctor_kind == CtorKind::Fn {\n+            record!(self.tables.fn_sig[def_id] <- self.tcx.fn_sig(def_id));\n         }\n     }\n \n@@ -1550,21 +1544,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n             }\n-            hir::ItemKind::Struct(ref struct_def, _) => {\n+            hir::ItemKind::Struct(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n                 self.tables.constness.set(def_id.index, hir::Constness::Const);\n \n-                // Encode def_ids for each field and method\n-                // for methods, write all the stuff get_trait_method\n-                // needs to know\n-                let ctor = struct_def.ctor_def_id().map(|ctor_def_id| ctor_def_id.local_def_index);\n-\n                 let variant = adt_def.non_enum_variant();\n                 record!(self.tables.variant_data[def_id] <- VariantData {\n-                    ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n-                    ctor,\n+                    ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 });\n             }\n@@ -1574,9 +1562,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n                 let variant = adt_def.non_enum_variant();\n                 record!(self.tables.variant_data[def_id] <- VariantData {\n-                    ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n-                    ctor: None,\n+                    ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 });\n             }\n@@ -1629,7 +1616,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     for variant in tcx.adt_def(def_id).variants() {\n                         yield variant.def_id.index;\n                         // Encode constructors which take a separate slot in value namespace.\n-                        if let Some(ctor_def_id) = variant.ctor_def_id {\n+                        if let Some(ctor_def_id) = variant.ctor_def_id() {\n                             yield ctor_def_id.index;\n                         }\n                     }\n@@ -1672,20 +1659,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         match item.kind {\n             hir::ItemKind::Enum(..) => {\n                 let def = self.tcx.adt_def(item.owner_id.to_def_id());\n-                for (i, variant) in def.variants().iter_enumerated() {\n+                for (i, _) in def.variants().iter_enumerated() {\n                     self.encode_enum_variant_info(def, i);\n-\n-                    if let Some(_ctor_def_id) = variant.ctor_def_id {\n-                        self.encode_enum_variant_ctor(def, i);\n-                    }\n+                    self.encode_enum_variant_ctor(def, i);\n                 }\n             }\n-            hir::ItemKind::Struct(ref struct_def, _) => {\n+            hir::ItemKind::Struct(..) => {\n                 let def = self.tcx.adt_def(item.owner_id.to_def_id());\n-                // If the struct has a constructor, encode it.\n-                if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n-                    self.encode_struct_ctor(def, ctor_def_id.to_def_id());\n-                }\n+                self.encode_struct_ctor(def);\n             }\n             hir::ItemKind::Impl { .. } => {\n                 for &trait_item_def_id in"}, {"sha": "5821bf8e74c77708adab9d2bda589114d6aafda3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -410,10 +410,9 @@ define_tables! {\n \n #[derive(TyEncodable, TyDecodable)]\n struct VariantData {\n-    ctor_kind: CtorKind,\n     discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n-    ctor: Option<DefIndex>,\n+    ctor: Option<(CtorKind, DefIndex)>,\n     is_non_exhaustive: bool,\n }\n "}, {"sha": "29fe6110797e3885947169dcbdccaa83432479b7", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -101,10 +101,8 @@ fixed_size_enum! {\n         ( Static(ast::Mutability::Mut)             )\n         ( Ctor(CtorOf::Struct, CtorKind::Fn)       )\n         ( Ctor(CtorOf::Struct, CtorKind::Const)    )\n-        ( Ctor(CtorOf::Struct, CtorKind::Fictive)  )\n         ( Ctor(CtorOf::Variant, CtorKind::Fn)      )\n         ( Ctor(CtorOf::Variant, CtorKind::Const)   )\n-        ( Ctor(CtorOf::Variant, CtorKind::Fictive) )\n         ( Macro(MacroKind::Bang)                   )\n         ( Macro(MacroKind::Attr)                   )\n         ( Macro(MacroKind::Derive)                 )"}, {"sha": "d4456adf201a61ec0fc2a9f3be24b0e857c1bcaa", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -245,15 +245,15 @@ impl<'hir> Map<'hir> {\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n-                // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?\n-                assert_ne!(variant_data.ctor_hir_id(), None);\n-\n                 let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n                 };\n-                DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))\n+                match variant_data.ctor_kind() {\n+                    Some(kind) => DefKind::Ctor(ctor_of, kind),\n+                    None => bug!(\"constructor node without a constructor\"),\n+                }\n             }\n             Node::AnonConst(_) => {\n                 let inline = match self.find(self.get_parent_node(hir_id)) {"}, {"sha": "ef0d7036775eb4b4598998f41929ba061d72171b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2115,10 +2115,10 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                                 .print_def_path(variant_def.def_id, substs)?\n                                 .into_buffer();\n \n-                            match variant_def.ctor_kind {\n-                                CtorKind::Const => fmt.write_str(&name),\n-                                CtorKind::Fn => fmt_tuple(fmt, &name),\n-                                CtorKind::Fictive => {\n+                            match variant_def.ctor_kind() {\n+                                Some(CtorKind::Const) => fmt.write_str(&name),\n+                                Some(CtorKind::Fn) => fmt_tuple(fmt, &name),\n+                                None => {\n                                     let mut struct_fmt = fmt.debug_struct(&name);\n                                     for (field, place) in iter::zip(&variant_def.fields, places) {\n                                         struct_fmt.field(field.name.as_str(), place);\n@@ -2955,14 +2955,14 @@ fn pretty_print_const_value<'tcx>(\n                             let cx = cx.print_value_path(variant_def.def_id, substs)?;\n                             fmt.write_str(&cx.into_buffer())?;\n \n-                            match variant_def.ctor_kind {\n-                                CtorKind::Const => {}\n-                                CtorKind::Fn => {\n+                            match variant_def.ctor_kind() {\n+                                Some(CtorKind::Const) => {}\n+                                Some(CtorKind::Fn) => {\n                                     fmt.write_str(\"(\")?;\n                                     comma_sep(fmt, fields)?;\n                                     fmt.write_str(\")\")?;\n                                 }\n-                                CtorKind::Fictive => {\n+                                None => {\n                                     fmt.write_str(\" {{ \")?;\n                                     let mut first = true;\n                                     for (field_def, field) in iter::zip(&variant_def.fields, fields)"}, {"sha": "8bef9dfe099b9e2a5838a2a7339395723a2c51c7", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -10,7 +10,6 @@\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir as hir;\n-use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::RangeEnd;\n use rustc_index::newtype_index;\n@@ -751,7 +750,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n \n                     // Only for Adt we can have `S {...}`,\n                     // which we handle separately here.\n-                    if variant.ctor_kind == CtorKind::Fictive {\n+                    if variant.ctor.is_none() {\n                         write!(f, \" {{ \")?;\n \n                         let mut printed = 0;"}, {"sha": "6b6aa40a1604f75f7fcef232faf9cb52cc2b46ee", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -230,7 +230,7 @@ impl AdtDefData {\n             AdtKind::Struct => AdtFlags::IS_STRUCT,\n         };\n \n-        if kind == AdtKind::Struct && variants[VariantIdx::new(0)].ctor_def_id.is_some() {\n+        if kind == AdtKind::Struct && variants[VariantIdx::new(0)].ctor.is_some() {\n             flags |= AdtFlags::HAS_CTOR;\n         }\n \n@@ -386,11 +386,9 @@ impl<'tcx> AdtDef<'tcx> {\n         //    Baz = 3,\n         // }\n         // ```\n-        if self\n-            .variants()\n-            .iter()\n-            .any(|v| matches!(v.discr, VariantDiscr::Explicit(_)) && v.ctor_kind != CtorKind::Const)\n-        {\n+        if self.variants().iter().any(|v| {\n+            matches!(v.discr, VariantDiscr::Explicit(_)) && v.ctor_kind() != Some(CtorKind::Const)\n+        }) {\n             return false;\n         }\n         self.variants().iter().all(|v| v.fields.is_empty())\n@@ -405,7 +403,7 @@ impl<'tcx> AdtDef<'tcx> {\n     pub fn variant_with_ctor_id(self, cid: DefId) -> &'tcx VariantDef {\n         self.variants()\n             .iter()\n-            .find(|v| v.ctor_def_id == Some(cid))\n+            .find(|v| v.ctor_def_id() == Some(cid))\n             .expect(\"variant_with_ctor_id: unknown variant\")\n     }\n \n@@ -422,7 +420,7 @@ impl<'tcx> AdtDef<'tcx> {\n     pub fn variant_index_with_ctor_id(self, cid: DefId) -> VariantIdx {\n         self.variants()\n             .iter_enumerated()\n-            .find(|(_, v)| v.ctor_def_id == Some(cid))\n+            .find(|(_, v)| v.ctor_def_id() == Some(cid))\n             .expect(\"variant_index_with_ctor_id: unknown variant\")\n             .0\n     }"}, {"sha": "8a36bd7ac081009292f2ed174c936efc25fd5ccf", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 40, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1808,15 +1808,13 @@ pub struct VariantDef {\n     pub def_id: DefId,\n     /// `DefId` that identifies the variant's constructor.\n     /// If this variant is a struct variant, then this is `None`.\n-    pub ctor_def_id: Option<DefId>,\n+    pub ctor: Option<(CtorKind, DefId)>,\n     /// Variant or struct name.\n     pub name: Symbol,\n     /// Discriminant of this variant.\n     pub discr: VariantDiscr,\n     /// Fields of this variant.\n     pub fields: Vec<FieldDef>,\n-    /// Type of constructor of variant.\n-    pub ctor_kind: CtorKind,\n     /// Flags of the variant (e.g. is field list non-exhaustive)?\n     flags: VariantFlags,\n }\n@@ -1841,19 +1839,18 @@ impl VariantDef {\n     pub fn new(\n         name: Symbol,\n         variant_did: Option<DefId>,\n-        ctor_def_id: Option<DefId>,\n+        ctor: Option<(CtorKind, DefId)>,\n         discr: VariantDiscr,\n         fields: Vec<FieldDef>,\n-        ctor_kind: CtorKind,\n         adt_kind: AdtKind,\n         parent_did: DefId,\n         recovered: bool,\n         is_field_list_non_exhaustive: bool,\n     ) -> Self {\n         debug!(\n-            \"VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},\n-             fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})\",\n-            name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,\n+            \"VariantDef::new(name = {:?}, variant_did = {:?}, ctor = {:?}, discr = {:?},\n+             fields = {:?}, adt_kind = {:?}, parent_did = {:?})\",\n+            name, variant_did, ctor, discr, fields, adt_kind, parent_did,\n         );\n \n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n@@ -1865,15 +1862,7 @@ impl VariantDef {\n             flags |= VariantFlags::IS_RECOVERED;\n         }\n \n-        VariantDef {\n-            def_id: variant_did.unwrap_or(parent_did),\n-            ctor_def_id,\n-            name,\n-            discr,\n-            fields,\n-            ctor_kind,\n-            flags,\n-        }\n+        VariantDef { def_id: variant_did.unwrap_or(parent_did), ctor, name, discr, fields, flags }\n     }\n \n     /// Is this field list non-exhaustive?\n@@ -1892,6 +1881,16 @@ impl VariantDef {\n     pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {\n         Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())\n     }\n+\n+    #[inline]\n+    pub fn ctor_kind(&self) -> Option<CtorKind> {\n+        self.ctor.map(|(kind, _)| kind)\n+    }\n+\n+    #[inline]\n+    pub fn ctor_def_id(&self) -> Option<DefId> {\n+        self.ctor.map(|(_, def_id)| def_id)\n+    }\n }\n \n impl PartialEq for VariantDef {\n@@ -1904,26 +1903,8 @@ impl PartialEq for VariantDef {\n         // definition of `VariantDef` changes, a compile-error will be produced,\n         // reminding us to revisit this assumption.\n \n-        let Self {\n-            def_id: lhs_def_id,\n-            ctor_def_id: _,\n-            name: _,\n-            discr: _,\n-            fields: _,\n-            ctor_kind: _,\n-            flags: _,\n-        } = &self;\n-\n-        let Self {\n-            def_id: rhs_def_id,\n-            ctor_def_id: _,\n-            name: _,\n-            discr: _,\n-            fields: _,\n-            ctor_kind: _,\n-            flags: _,\n-        } = other;\n-\n+        let Self { def_id: lhs_def_id, ctor: _, name: _, discr: _, fields: _, flags: _ } = &self;\n+        let Self { def_id: rhs_def_id, ctor: _, name: _, discr: _, fields: _, flags: _ } = other;\n         lhs_def_id == rhs_def_id\n     }\n }\n@@ -1940,9 +1921,7 @@ impl Hash for VariantDef {\n         // of `VariantDef` changes, a compile-error will be produced, reminding\n         // us to revisit this assumption.\n \n-        let Self { def_id, ctor_def_id: _, name: _, discr: _, fields: _, ctor_kind: _, flags: _ } =\n-            &self;\n-\n+        let Self { def_id, ctor: _, name: _, discr: _, fields: _, flags: _ } = &self;\n         def_id.hash(s)\n     }\n }"}, {"sha": "d828d08805ec35ba18c8320f5e32ef213c336523", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1487,12 +1487,12 @@ pub trait PrettyPrinter<'tcx>:\n                             contents.variant.expect(\"destructed const of adt without variant idx\");\n                         let variant_def = &def.variant(variant_idx);\n                         p!(print_value_path(variant_def.def_id, substs));\n-                        match variant_def.ctor_kind {\n-                            CtorKind::Const => {}\n-                            CtorKind::Fn => {\n+                        match variant_def.ctor_kind() {\n+                            Some(CtorKind::Const) => {}\n+                            Some(CtorKind::Fn) => {\n                                 p!(\"(\", comma_sep(fields), \")\");\n                             }\n-                            CtorKind::Fictive => {\n+                            None => {\n                                 p!(\" {{ \");\n                                 let mut first = true;\n                                 for (field_def, field) in iter::zip(&variant_def.fields, fields) {"}, {"sha": "ba04cb6eef82dbe3db5edfc9406629ede9fada89", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -564,7 +564,7 @@ fn check_for_bindings_named_same_as_variants(\n             && let ty::Adt(edef, _) = pat_ty.kind()\n             && edef.is_enum()\n             && edef.variants().iter().any(|variant| {\n-                variant.ident(cx.tcx) == ident && variant.ctor_kind == CtorKind::Const\n+                variant.ident(cx.tcx) == ident && variant.ctor_kind() == Some(CtorKind::Const)\n             })\n         {\n             let variant_count = edef.variants().len();"}, {"sha": "7ac4fcfa64c6879b8a9dab8c391470ea67fb3ba6", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n-                if let Some(ctor_node_id) = vdata.ctor_id() {\n+                if let Some((ctor_kind, ctor_node_id)) = CtorKind::from_ast(vdata) {\n                     // If the structure is marked as non_exhaustive then lower the visibility\n                     // to within the crate.\n                     let mut ctor_vis = if vis.is_public()\n@@ -773,10 +773,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         ret_fields.push(field_vis.to_def_id());\n                     }\n                     let ctor_def_id = self.r.local_def_id(ctor_node_id);\n-                    let ctor_res = Res::Def(\n-                        DefKind::Ctor(CtorOf::Struct, CtorKind::from_ast(vdata)),\n-                        ctor_def_id.to_def_id(),\n-                    );\n+                    let ctor_res =\n+                        Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id.to_def_id());\n                     self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));\n                     self.r.visibilities.insert(ctor_def_id, ctor_vis);\n \n@@ -999,8 +997,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             Res::Def(DefKind::Struct, def_id) => {\n                 let field_names =\n                     cstore.struct_field_names_untracked(def_id, self.r.session).collect();\n-                let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);\n-                if let Some((ctor_def_id, ctor_kind)) = ctor {\n+                if let Some((ctor_kind, ctor_def_id)) = cstore.ctor_untracked(def_id) {\n                     let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                     let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n                     let field_visibilities =\n@@ -1517,20 +1514,20 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         // Define a constructor name in the value namespace.\n-        // Braced variants, unlike structs, generate unusable names in\n-        // value namespace, they are reserved for possible future use.\n-        // It's ok to use the variant's id as a ctor id since an\n-        // error will be reported on any use of such resolution anyway.\n-        let ctor_node_id = variant.data.ctor_id().unwrap_or(variant.id);\n-        let ctor_def_id = self.r.local_def_id(ctor_node_id);\n-        let ctor_kind = CtorKind::from_ast(&variant.data);\n-        let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id.to_def_id());\n-        self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n-        if ctor_def_id != def_id {\n+        let fields_id = if let Some((ctor_kind, ctor_node_id)) = CtorKind::from_ast(&variant.data) {\n+            let ctor_def_id = self.r.local_def_id(ctor_node_id);\n+            let ctor_res =\n+                Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id.to_def_id());\n+            self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n             self.r.visibilities.insert(ctor_def_id, ctor_vis);\n-        }\n+            ctor_def_id\n+        } else {\n+            def_id\n+        };\n+\n         // Record field names for error reporting.\n-        self.insert_field_names_local(ctor_def_id.to_def_id(), &variant.data);\n+        // FIXME: Always use non-ctor id as the key.\n+        self.insert_field_names_local(fields_id.to_def_id(), &variant.data);\n \n         visit::walk_variant(self, variant);\n     }"}, {"sha": "4bd62d3d824d05460feefcb89e6e0e2b14028123", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -118,8 +118,8 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n                 match i.kind {\n                     ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n                         // If this is a unit or tuple-like struct, register the constructor.\n-                        if let Some(ctor_hir_id) = struct_def.ctor_id() {\n-                            this.create_def(ctor_hir_id, DefPathData::Ctor, i.span);\n+                        if let Some(ctor_node_id) = struct_def.ctor_node_id() {\n+                            this.create_def(ctor_node_id, DefPathData::Ctor, i.span);\n                         }\n                     }\n                     _ => {}\n@@ -196,8 +196,8 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         }\n         let def = self.create_def(v.id, DefPathData::TypeNs(v.ident.name), v.span);\n         self.with_parent(def, |this| {\n-            if let Some(ctor_hir_id) = v.data.ctor_id() {\n-                this.create_def(ctor_hir_id, DefPathData::Ctor, v.span);\n+            if let Some(ctor_node_id) = v.data.ctor_node_id() {\n+                this.create_def(ctor_node_id, DefPathData::Ctor, v.span);\n             }\n             visit::walk_variant(this, v)\n         });"}, {"sha": "b340bee28c3c3f5680dd0862dd854f299a3f6943", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1442,13 +1442,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n                 err.span_label(span, \"constructor is not visible here due to private fields\");\n             }\n-            (\n-                Res::Def(\n-                    DefKind::Union | DefKind::Variant | DefKind::Ctor(_, CtorKind::Fictive),\n-                    def_id,\n-                ),\n-                _,\n-            ) if ns == ValueNS => {\n+            (Res::Def(DefKind::Union | DefKind::Variant, def_id), _) if ns == ValueNS => {\n                 bad_struct_syntax_suggestion(def_id);\n             }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id), _) if ns == ValueNS => {\n@@ -1963,7 +1957,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 let has_no_fields = self.r.field_names.get(&def_id).map_or(false, |f| f.is_empty());\n                 match kind {\n                     CtorKind::Const => false,\n-                    CtorKind::Fn | CtorKind::Fictive if has_no_fields => false,\n+                    CtorKind::Fn if has_no_fields => false,\n                     _ => true,\n                 }\n             };\n@@ -1975,7 +1969,6 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 .map(|(variant, kind)| match kind {\n                     CtorKind::Const => variant,\n                     CtorKind::Fn => format!(\"({}())\", variant),\n-                    CtorKind::Fictive => format!(\"({} {{}})\", variant),\n                 })\n                 .collect::<Vec<_>>();\n             let no_suggestable_variant = suggestable_variants.is_empty();\n@@ -2001,7 +1994,6 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n                 .filter_map(|(variant, kind)| match kind {\n                     CtorKind::Fn => Some(format!(\"({}(/* fields */))\", variant)),\n-                    CtorKind::Fictive => Some(format!(\"({} {{ /* fields */ }})\", variant)),\n                     _ => None,\n                 })\n                 .collect::<Vec<_>>();"}, {"sha": "d1a2aee207dcd82a4de2d99e336eb3aa1106407a", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -689,15 +689,15 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                         self.push(\"V\");\n                         self = self.print_def_path(variant_def.def_id, substs)?;\n \n-                        match variant_def.ctor_kind {\n-                            CtorKind::Const => {\n+                        match variant_def.ctor_kind() {\n+                            Some(CtorKind::Const) => {\n                                 self.push(\"U\");\n                             }\n-                            CtorKind::Fn => {\n+                            Some(CtorKind::Fn) => {\n                                 self.push(\"T\");\n                                 self = print_field_list(self)?;\n                             }\n-                            CtorKind::Fictive => {\n+                            None => {\n                                 self.push(\"S\");\n                                 for (field_def, field) in iter::zip(&variant_def.fields, fields) {\n                                     // HACK(eddyb) this mimics `path_append`,"}, {"sha": "e7c3e5a45e8387f079015a7db93c30212ca8075f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -276,7 +276,7 @@ fn build_struct(cx: &mut DocContext<'_>, did: DefId) -> clean::Struct {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n-        struct_type: variant.ctor_kind,\n+        ctor_kind: variant.ctor_kind(),\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n         fields: variant.fields.iter().map(|x| clean_middle_field(x, cx)).collect(),\n     }"}, {"sha": "7085bc8d1be55601930e92eeeb5057f6308f4fb3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1842,16 +1842,16 @@ pub(crate) fn clean_field_with_def_id(\n }\n \n pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n-    let kind = match variant.ctor_kind {\n-        CtorKind::Const => Variant::CLike(match variant.discr {\n+    let kind = match variant.ctor_kind() {\n+        Some(CtorKind::Const) => Variant::CLike(match variant.discr {\n             ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n             ty::VariantDiscr::Relative(_) => None,\n         }),\n-        CtorKind::Fn => Variant::Tuple(\n+        Some(CtorKind::Fn) => Variant::Tuple(\n             variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         ),\n-        CtorKind::Fictive => Variant::Struct(VariantStruct {\n-            struct_type: CtorKind::Fictive,\n+        None => Variant::Struct(VariantStruct {\n+            ctor_kind: None,\n             fields: variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         }),\n     };\n@@ -1865,7 +1865,7 @@ fn clean_variant_data<'tcx>(\n ) -> Variant {\n     match variant {\n         hir::VariantData::Struct(..) => Variant::Struct(VariantStruct {\n-            struct_type: CtorKind::from_hir(variant),\n+            ctor_kind: None,\n             fields: variant.fields().iter().map(|x| clean_field(x, cx)).collect(),\n         }),\n         hir::VariantData::Tuple(..) => {\n@@ -2060,7 +2060,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),\n             ItemKind::Struct(ref variant_data, generics) => StructItem(Struct {\n-                struct_type: CtorKind::from_hir(variant_data),\n+                ctor_kind: variant_data.ctor_kind(),\n                 generics: clean_generics(generics, cx),\n                 fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),"}, {"sha": "340d6d7df180fc8696aaf5f227579738cfc08fb2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2081,7 +2081,7 @@ impl From<hir::PrimTy> for PrimitiveType {\n \n #[derive(Clone, Debug)]\n pub(crate) struct Struct {\n-    pub(crate) struct_type: CtorKind,\n+    pub(crate) ctor_kind: Option<CtorKind>,\n     pub(crate) generics: Generics,\n     pub(crate) fields: Vec<Item>,\n }\n@@ -2109,7 +2109,7 @@ impl Union {\n /// only as a variant in an enum.\n #[derive(Clone, Debug)]\n pub(crate) struct VariantStruct {\n-    pub(crate) struct_type: CtorKind,\n+    pub(crate) ctor_kind: Option<CtorKind>,\n     pub(crate) fields: Vec<Item>,\n }\n "}, {"sha": "d12874e1bfd1e23ddee95f51f07cdce0e9ff94e9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2280,12 +2280,12 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        match s.struct_type {\n-            CtorKind::Fictive => {\n+        match s.ctor_kind {\n+            None => {\n                 print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n             }\n-            CtorKind::Fn => print_sidebar_title(&mut sidebar, \"fields\", \"Tuple Fields\"),\n-            CtorKind::Const => {}\n+            Some(CtorKind::Fn) => print_sidebar_title(&mut sidebar, \"fields\", \"Tuple Fields\"),\n+            Some(CtorKind::Const) => {}\n         }\n     }\n "}, {"sha": "a0e5309a70cb0328659426a1d53e0f07a1071098", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1232,7 +1232,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                                     w,\n                                     v,\n                                     None,\n-                                    s.struct_type,\n+                                    s.ctor_kind,\n                                     &s.fields,\n                                     \"    \",\n                                     false,\n@@ -1458,7 +1458,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n     wrap_into_item_decl(w, |w| {\n         wrap_item(w, \"struct\", |w| {\n             render_attributes_in_code(w, it);\n-            render_struct(w, it, Some(&s.generics), s.struct_type, &s.fields, \"\", true, cx);\n+            render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n         });\n     });\n \n@@ -1472,14 +1472,14 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n             _ => None,\n         })\n         .peekable();\n-    if let CtorKind::Fictive | CtorKind::Fn = s.struct_type {\n+    if let None | Some(CtorKind::Fn) = s.ctor_kind {\n         if fields.peek().is_some() {\n             write!(\n                 w,\n                 \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\\\n                      {}{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a>\\\n                  </h2>\",\n-                if let CtorKind::Fictive = s.struct_type { \"Fields\" } else { \"Tuple Fields\" },\n+                if s.ctor_kind.is_none() { \"Fields\" } else { \"Tuple Fields\" },\n                 document_non_exhaustive_header(it)\n             );\n             document_non_exhaustive(w, it);\n@@ -1739,7 +1739,7 @@ fn render_struct(\n     w: &mut Buffer,\n     it: &clean::Item,\n     g: Option<&clean::Generics>,\n-    ty: CtorKind,\n+    ty: Option<CtorKind>,\n     fields: &[clean::Item],\n     tab: &str,\n     structhead: bool,\n@@ -1757,7 +1757,7 @@ fn render_struct(\n         write!(w, \"{}\", g.print(cx))\n     }\n     match ty {\n-        CtorKind::Fictive => {\n+        None => {\n             let where_diplayed = g.map(|g| print_where_clause_and_check(w, g, cx)).unwrap_or(false);\n \n             // If there wasn't a `where` clause, we add a whitespace.\n@@ -1799,7 +1799,7 @@ fn render_struct(\n             }\n             w.write_str(\"}\");\n         }\n-        CtorKind::Fn => {\n+        Some(CtorKind::Fn) => {\n             w.write_str(\"(\");\n             for (i, field) in fields.iter().enumerate() {\n                 if i > 0 {\n@@ -1827,7 +1827,7 @@ fn render_struct(\n                 w.write_str(\";\");\n             }\n         }\n-        CtorKind::Const => {\n+        Some(CtorKind::Const) => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n                 write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));"}, {"sha": "d7184053c87a4dd6b5521e99e1cb6672eba102f4", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -315,15 +315,15 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n impl FromWithTcx<clean::Struct> for Struct {\n     fn from_tcx(struct_: clean::Struct, tcx: TyCtxt<'_>) -> Self {\n         let fields_stripped = struct_.has_stripped_entries();\n-        let clean::Struct { struct_type, generics, fields } = struct_;\n+        let clean::Struct { ctor_kind, generics, fields } = struct_;\n \n-        let kind = match struct_type {\n-            CtorKind::Fn => StructKind::Tuple(ids_keeping_stripped(fields, tcx)),\n-            CtorKind::Const => {\n+        let kind = match ctor_kind {\n+            Some(CtorKind::Fn) => StructKind::Tuple(ids_keeping_stripped(fields, tcx)),\n+            Some(CtorKind::Const) => {\n                 assert!(fields.is_empty());\n                 StructKind::Unit\n             }\n-            CtorKind::Fictive => StructKind::Plain { fields: ids(fields, tcx), fields_stripped },\n+            None => StructKind::Plain { fields: ids(fields, tcx), fields_stripped },\n         };\n \n         Struct {"}, {"sha": "2aab3e7772cc068733044e31c40ea6949f1cb9e7", "filename": "src/test/ui/empty/empty-struct-braces-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     //~^ ERROR expected function, tuple struct or tuple variant, found struct `Empty1`\n     let e3 = E::Empty3; //~ ERROR expected value, found struct variant `E::Empty3`\n     let e3 = E::Empty3();\n-    //~^ ERROR expected function, tuple struct or tuple variant, found struct variant `E::Empty3`\n+    //~^ ERROR expected value, found struct variant `E::Empty3`\n \n     let xe1 = XEmpty1; //~ ERROR expected value, found struct `XEmpty1`\n     let xe1 = XEmpty1();"}, {"sha": "e1a7a02a56869ad056ca3a15f05c57805b31c2eb", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -21,24 +21,6 @@ help: a unit struct with a similar name exists\n LL |     let e1 = XEmpty2;\n    |              ~~~~~~~\n \n-error[E0423]: expected value, found struct variant `E::Empty3`\n-  --> $DIR/empty-struct-braces-expr.rs:18:14\n-   |\n-LL |     Empty3 {}\n-   |     --------- `E::Empty3` defined here\n-...\n-LL |     let e3 = E::Empty3;\n-   |              ^^^^^^^^^ help: use struct literal syntax instead: `E::Empty3 {}`\n-\n-error[E0423]: expected function, tuple struct or tuple variant, found struct variant `E::Empty3`\n-  --> $DIR/empty-struct-braces-expr.rs:19:14\n-   |\n-LL |     Empty3 {}\n-   |     --------- `E::Empty3` defined here\n-...\n-LL |     let e3 = E::Empty3();\n-   |              ^^^^^^^^^^^ help: use struct literal syntax instead: `E::Empty3 {}`\n-\n error[E0423]: expected value, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:22:15\n    |\n@@ -84,6 +66,18 @@ help: a unit struct with a similar name exists\n LL |     let e1 = XEmpty2();\n    |              ~~~~~~~\n \n+error[E0533]: expected value, found struct variant `E::Empty3`\n+  --> $DIR/empty-struct-braces-expr.rs:18:14\n+   |\n+LL |     let e3 = E::Empty3;\n+   |              ^^^^^^^^^ not a value\n+\n+error[E0533]: expected value, found struct variant `E::Empty3`\n+  --> $DIR/empty-struct-braces-expr.rs:19:14\n+   |\n+LL |     let e3 = E::Empty3();\n+   |              ^^^^^^^^^ not a value\n+\n error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:23:15\n    |\n@@ -132,5 +126,5 @@ LL |     XE::Empty1 {};\n \n error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0423, E0599.\n+Some errors have detailed explanations: E0423, E0533, E0599.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "14e09fc27a06d4eb1d0d2559762b2034ab13011c", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,34 +1,15 @@\n-error[E0532]: expected unit struct, unit variant or constant, found struct variant `E::Empty3`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:24:9\n    |\n-LL |     Empty3 {}\n-   |     --------- `E::Empty3` defined here\n-...\n LL |         E::Empty3 => ()\n-   |         ^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n+   |         ^^^^^^^^^ not a unit struct, unit variant or constant\n \n-error[E0532]: expected unit struct, unit variant or constant, found struct variant `XE::XEmpty3`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:31:9\n    |\n LL |         XE::XEmpty3 => ()\n-   |         ^^^^^^^^^^^\n-   |\n-  ::: $DIR/auxiliary/empty-struct.rs:6:5\n-   |\n-LL |     XEmpty3 {},\n-   |     ------- `XE::XEmpty3` defined here\n-LL |     XEmpty4,\n-   |     ------- similarly named unit variant `XEmpty4` defined here\n-   |\n-help: use struct pattern syntax instead\n-   |\n-LL |         XE::XEmpty3 { /* fields */ } => ()\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: a unit variant with a similar name exists\n-   |\n-LL |         XE::XEmpty4 => ()\n-   |             ~~~~~~~\n+   |         ^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0532`.\n+For more information about this error, try `rustc --explain E0533`."}, {"sha": "00c8b12e6f984a51e82bca4e8b417e1d16282943", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 9, "deletions": 49, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,67 +1,27 @@\n-error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:17:9\n    |\n-LL |     Empty3 {}\n-   |     --------- `E::Empty3` defined here\n-...\n LL |         E::Empty3() => ()\n-   |         ^^^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n+   |         ^^^^^^^^^^^ not a tuple struct or tuple variant\n \n-error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:21:9\n    |\n LL |         XE::XEmpty3() => ()\n-   |         ^^^^^^^^^^^^^\n-   |\n-  ::: $DIR/auxiliary/empty-struct.rs:6:5\n-   |\n-LL |     XEmpty3 {},\n-   |     ------- `XE::XEmpty3` defined here\n-LL |     XEmpty4,\n-LL |     XEmpty5(),\n-   |     ------- similarly named tuple variant `XEmpty5` defined here\n-   |\n-help: use struct pattern syntax instead\n-   |\n-LL |         XE::XEmpty3 { /* fields */ } => ()\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: a tuple variant with a similar name exists\n-   |\n-LL |         XE::XEmpty5() => ()\n-   |             ~~~~~~~\n+   |         ^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n-error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n    |\n-LL |     Empty3 {}\n-   |     --------- `E::Empty3` defined here\n-...\n LL |         E::Empty3(..) => ()\n-   |         ^^^^^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n+   |         ^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n-error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:29:9\n    |\n LL |         XE::XEmpty3(..) => ()\n-   |         ^^^^^^^^^^^^^^^\n-   |\n-  ::: $DIR/auxiliary/empty-struct.rs:6:5\n-   |\n-LL |     XEmpty3 {},\n-   |     ------- `XE::XEmpty3` defined here\n-LL |     XEmpty4,\n-LL |     XEmpty5(),\n-   |     ------- similarly named tuple variant `XEmpty5` defined here\n-   |\n-help: use struct pattern syntax instead\n-   |\n-LL |         XE::XEmpty3 { /* fields */ } => ()\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: a tuple variant with a similar name exists\n-   |\n-LL |         XE::XEmpty5(..) => ()\n-   |             ~~~~~~~\n+   |         ^^^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0532`.\n+For more information about this error, try `rustc --explain E0164`."}, {"sha": "5a80d6ec31aa9829e94c34ec54cfbdd3204049b1", "filename": "src/test/ui/error-codes/E0164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2,7 +2,7 @@ error[E0164]: expected tuple struct or tuple variant, found associated constant\n   --> $DIR/E0164.rs:9:9\n    |\n LL |         Foo::B(i) => i,\n-   |         ^^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to previous error\n "}, {"sha": "42148c5f5a18d2c312f4c5fcec729c8bd2eb7520", "filename": "src/test/ui/issues/issue-19086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-19086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-19086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let f = FooB { x: 3, y: 4 };\n     match f {\n         FooB(a, b) => println!(\"{} {}\", a, b),\n-        //~^ ERROR expected tuple struct or tuple variant, found struct variant `FooB`\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n     }\n }"}, {"sha": "a3c06a72511151dfb333aab2648ba9b69332d633", "filename": "src/test/ui/issues/issue-19086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct or tuple variant, found struct variant `FooB`\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n   --> $DIR/issue-19086.rs:10:9\n    |\n LL |     FooB { x: i32, y: i32 }"}, {"sha": "f69773b8c2b91037d036037bb7f495b2faa63742", "filename": "src/test/ui/issues/issue-28992-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -8,7 +8,7 @@ error[E0164]: expected tuple struct or tuple variant, found associated constant\n   --> $DIR/issue-28992-empty.rs:14:12\n    |\n LL |     if let S::C2(..) = 0 {}\n-   |            ^^^^^^^^^ not a tuple variant or struct\n+   |            ^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e949ae7b324029d25a02c7ba6b69eeb61c1891c4", "filename": "src/test/ui/issues/issue-56835.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56835.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -8,7 +8,7 @@ error[E0164]: expected tuple struct or tuple variant, found self constructor `Se\n   --> $DIR/issue-56835.rs:4:12\n    |\n LL |     fn bar(Self(foo): Self) {}\n-   |            ^^^^^^^^^ not a tuple variant or struct\n+   |            ^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f90c81116264ab037c8073bea05bfd47eebb00ed", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -7,15 +7,13 @@ LL |     Tuple(i32),\n LL |         MyEnum::Tuple => \"\",\n    |         ^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `MyEnum::Tuple(_)`\n \n-error[E0532]: expected unit struct, unit variant or constant, found struct variant `MyEnum::Struct`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `MyEnum::Struct`\n   --> $DIR/issue-63983.rs:10:9\n    |\n-LL |     Struct{ s: i32 },\n-   |     ---------------- `MyEnum::Struct` defined here\n-...\n LL |         MyEnum::Struct => \"\",\n-   |         ^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `MyEnum::Struct { s }`\n+   |         ^^^^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0532`.\n+Some errors have detailed explanations: E0532, E0533.\n+For more information about an error, try `rustc --explain E0532`."}, {"sha": "63c7abe0e4a63f416416c977144dcd6ab980c410", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2,37 +2,37 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n   --> $DIR/method-path-in-pattern.rs:15:9\n    |\n LL |         Foo::bar => {}\n-   |         ^^^^^^^^\n+   |         ^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n-   |         ^^^^^^^^^^\n+   |         ^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n-   |         ^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:26:12\n    |\n LL |     if let Foo::bar = 0u32 {}\n-   |            ^^^^^^^^\n+   |            ^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}\n-   |            ^^^^^^^^^^\n+   |            ^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:30:12\n    |\n LL |     if let Foo::trait_bar = 0u32 {}\n-   |            ^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c5b30f148bd5b7daf30ca6fdb2d87f308456e9cd", "filename": "src/test/ui/namespace/namespace-mix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -97,13 +97,13 @@ mod m8 {\n \n fn f78() {\n     check(m7::V{}); //~ ERROR c::Item\n-    check(m7::V); //~ ERROR expected value, found struct variant `m7::V`\n+    check(m7::V); //~ ERROR expected value, found type alias `m7::V`\n     check(m8::V{}); //~ ERROR c::E\n     check(m8::V); //~ ERROR c::Item\n }\n fn xf78() {\n     check(xm7::V{}); //~ ERROR c::Item\n-    check(xm7::V); //~ ERROR expected value, found struct variant `xm7::V`\n+    check(xm7::V); //~ ERROR expected value, found type alias `xm7::V`\n     check(xm8::V{}); //~ ERROR c::E\n     check(xm8::V); //~ ERROR c::Item\n }"}, {"sha": "cb72d4a1c429261c61d96c6b05b9dba3b1bb1318", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -52,21 +52,16 @@ LL -     check(xm1::S);\n LL +     check(S);\n    |\n \n-error[E0423]: expected value, found struct variant `m7::V`\n+error[E0423]: expected value, found type alias `m7::V`\n   --> $DIR/namespace-mix.rs:100:11\n    |\n-LL |         V {},\n-   |         ---- `m7::V` defined here\n LL |         TV(),\n    |         ---- similarly named tuple variant `TV` defined here\n ...\n LL |     check(m7::V);\n    |           ^^^^^\n    |\n-help: use struct literal syntax instead\n-   |\n-LL |     check(m7::V {});\n-   |           ~~~~~~~~\n+   = note: can't use a type alias as a constructor\n help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n@@ -83,23 +78,18 @@ LL -     check(m7::V);\n LL +     check(V);\n    |\n \n-error[E0423]: expected value, found struct variant `xm7::V`\n+error[E0423]: expected value, found type alias `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n    |\n LL |     check(xm7::V);\n    |           ^^^^^^\n    |\n-  ::: $DIR/auxiliary/namespace-mix.rs:6:9\n+  ::: $DIR/auxiliary/namespace-mix.rs:7:9\n    |\n-LL |         V {},\n-   |         - `xm7::V` defined here\n LL |         TV(),\n    |         -- similarly named tuple variant `TV` defined here\n    |\n-help: use struct literal syntax instead\n-   |\n-LL |     check(xm7::V { /* fields */ });\n-   |           ~~~~~~~~~~~~~~~~~~~~~~~\n+   = note: can't use a type alias as a constructor\n help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);"}, {"sha": "04968bbdf999dec7976fa2477d102e0fb18a6975", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -14,14 +14,11 @@ LL -     let x = Enum::Foo(a: 3, b: 4);\n LL +     let x = Enum::Foo(3, 4);\n    |\n \n-error[E0532]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9\n    |\n-LL |     Foo { a: usize, b: usize },\n-   |     -------------------------- `Enum::Foo` defined here\n-...\n LL |         Enum::Foo(a, b) => {}\n-   |         ^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `Enum::Foo { a, b }`\n+   |         ^^^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error[E0769]: tuple variant `Enum::Bar` written as struct variant\n   --> $DIR/recover-from-bad-variant.rs:12:9\n@@ -36,5 +33,5 @@ LL |         Enum::Bar(a, b) => {}\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0532, E0769.\n-For more information about an error, try `rustc --explain E0532`.\n+Some errors have detailed explanations: E0164, E0769.\n+For more information about an error, try `rustc --explain E0164`."}, {"sha": "9f0c0074d674ceac43093dc128f3cf1266f9a550", "filename": "src/test/ui/parser/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -42,16 +42,11 @@ help: surround the struct literal with parentheses\n LL |     if x == (E::K { field: \"\" }) {}\n    |             +                  +\n \n-error[E0423]: expected value, found struct variant `E::V`\n+error[E0533]: expected value, found struct variant `E::V`\n   --> $DIR/struct-literal-variant-in-if.rs:10:13\n    |\n LL |     if x == E::V { field } {}\n    |             ^^^^ not a value\n-   |\n-help: surround the struct literal with parentheses\n-   |\n-LL |     if x == (E::V { field }) {}\n-   |             +              +\n \n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n@@ -72,5 +67,5 @@ LL |     let y: usize = ();\n \n error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0308, E0423.\n+Some errors have detailed explanations: E0308, E0533.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "ce1d8c6c047b1429e2e6a2d0243326b8ed2eac87", "filename": "src/test/ui/pattern/pattern-binding-disambiguation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fpattern%2Fpattern-binding-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fpattern%2Fpattern-binding-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-binding-disambiguation.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -33,7 +33,7 @@ fn main() {\n         TupleVariant => {} //~ ERROR match bindings cannot shadow tuple variants\n     }\n     match doesnt_matter {\n-        BracedVariant => {} //~ ERROR match bindings cannot shadow struct variants\n+        BracedVariant => {} // OK, `BracedVariant` is a fresh binding\n     }\n     match CONST {\n         CONST => {} // OK, `CONST` is a const pattern\n@@ -50,7 +50,7 @@ fn main() {\n     let BracedStruct = doesnt_matter; // OK, `BracedStruct` is a fresh binding\n     let UnitVariant = UnitVariant; // OK, `UnitVariant` is a unit variant pattern\n     let TupleVariant = doesnt_matter; //~ ERROR let bindings cannot shadow tuple variants\n-    let BracedVariant = doesnt_matter; //~ ERROR let bindings cannot shadow struct variants\n+    let BracedVariant = doesnt_matter; // OK, `BracedVariant` is a fresh binding\n     let CONST = CONST; // OK, `CONST` is a const pattern\n     let STATIC = doesnt_matter; //~ ERROR let bindings cannot shadow statics\n     let function = doesnt_matter; // OK, `function` is a fresh binding"}, {"sha": "d54467b3c0c080ef2233d0d28338b94ee10079c2", "filename": "src/test/ui/pattern/pattern-binding-disambiguation.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fpattern%2Fpattern-binding-disambiguation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fpattern%2Fpattern-binding-disambiguation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-binding-disambiguation.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -22,15 +22,6 @@ LL |         TupleVariant => {}\n    |         cannot be named the same as a tuple variant\n    |         help: try specify the pattern arguments: `TupleVariant(..)`\n \n-error[E0530]: match bindings cannot shadow struct variants\n-  --> $DIR/pattern-binding-disambiguation.rs:36:9\n-   |\n-LL | use E::*;\n-   |     ---- the struct variant `BracedVariant` is imported here\n-...\n-LL |         BracedVariant => {}\n-   |         ^^^^^^^^^^^^^ cannot be named the same as a struct variant\n-\n error[E0530]: match bindings cannot shadow statics\n   --> $DIR/pattern-binding-disambiguation.rs:42:9\n    |\n@@ -58,15 +49,6 @@ LL | use E::*;\n LL |     let TupleVariant = doesnt_matter;\n    |         ^^^^^^^^^^^^ cannot be named the same as a tuple variant\n \n-error[E0530]: let bindings cannot shadow struct variants\n-  --> $DIR/pattern-binding-disambiguation.rs:53:9\n-   |\n-LL | use E::*;\n-   |     ---- the struct variant `BracedVariant` is imported here\n-...\n-LL |     let BracedVariant = doesnt_matter;\n-   |         ^^^^^^^^^^^^^ cannot be named the same as a struct variant\n-\n error[E0530]: let bindings cannot shadow statics\n   --> $DIR/pattern-binding-disambiguation.rs:55:9\n    |\n@@ -76,6 +58,6 @@ LL | static STATIC: () = ();\n LL |     let STATIC = doesnt_matter;\n    |         ^^^^^^ cannot be named the same as a static\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0530`."}, {"sha": "a49ed6c8f607adcc9a22efb79659b8b3ed6fab85", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2,7 +2,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/qualified-path-params.rs:22:15"}, {"sha": "f6ebe292076e897128ef6e819dfd1e4ba4b8ed6e", "filename": "src/test/ui/resolve/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -4,5 +4,5 @@ enum Foo {\n \n fn main() {\n     let f = Foo::Variant(42);\n-    //~^ ERROR expected function, tuple struct or tuple variant, found struct variant `Foo::Variant`\n+    //~^ ERROR expected value, found struct variant `Foo::Variant`\n }"}, {"sha": "d9006c0a6c2691b22373ed60c80b811a5695820d", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,12 +1,9 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found struct variant `Foo::Variant`\n+error[E0533]: expected value, found struct variant `Foo::Variant`\n   --> $DIR/issue-18252.rs:6:13\n    |\n-LL |     Variant { x: usize }\n-   |     -------------------- `Foo::Variant` defined here\n-...\n LL |     let f = Foo::Variant(42);\n-   |             ^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `Foo::Variant { x: val }`\n+   |             ^^^^^^^^^^^^ not a value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0423`.\n+For more information about this error, try `rustc --explain E0533`."}, {"sha": "eff89241fd218cf62ff13c2d371e35ec66bc3dfc", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,23 +1,15 @@\n-error[E0423]: expected value, found struct variant `Homura::Madoka`\n+error[E0533]: expected value, found struct variant `Homura::Madoka`\n   --> $DIR/issue-19452.rs:10:18\n    |\n-LL |     Madoka { age: u32 }\n-   |     ------------------- `Homura::Madoka` defined here\n-...\n LL |     let homura = Homura::Madoka;\n-   |                  ^^^^^^^^^^^^^^ help: use struct literal syntax instead: `Homura::Madoka { age: val }`\n+   |                  ^^^^^^^^^^^^^^ not a value\n \n-error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Madoka`\n+error[E0533]: expected value, found struct variant `issue_19452_aux::Homura::Madoka`\n   --> $DIR/issue-19452.rs:13:18\n    |\n LL |     let homura = issue_19452_aux::Homura::Madoka;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `issue_19452_aux::Homura::Madoka { /* fields */ }`\n-   |\n-  ::: $DIR/auxiliary/issue-19452-aux.rs:2:5\n-   |\n-LL |     Madoka { age: u32 }\n-   |     ------ `issue_19452_aux::Homura::Madoka` defined here\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0423`.\n+For more information about this error, try `rustc --explain E0533`."}, {"sha": "4af5f29d8093d1598361ba4f4f1c455e63cb5db6", "filename": "src/test/ui/resolve/issue-73427.stderr", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -17,24 +17,20 @@ LL | | }\n    | |_^\n help: you might have meant to use one of the following enum variants\n    |\n-LL |     (A::Struct {}).foo();\n-   |     ~~~~~~~~~~~~~~\n LL |     (A::Tuple()).foo();\n    |     ~~~~~~~~~~~~\n LL |     A::Unit.foo();\n    |     ~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n-LL |     (A::StructWithFields { /* fields */ }).foo();\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     (A::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found enum `B`\n   --> $DIR/issue-73427.rs:35:5\n    |\n LL |     B.foo();\n-   |     ^\n+   |     ^ help: the following enum variant is available: `(B::TupleWithFields(/* fields */))`\n    |\n note: the enum is defined here\n   --> $DIR/issue-73427.rs:9:1\n@@ -44,12 +40,6 @@ LL | |     StructWithFields { x: () },\n LL | |     TupleWithFields(()),\n LL | | }\n    | |_^\n-help: the following enum variants are available\n-   |\n-LL |     (B::StructWithFields { /* fields */ }).foo();\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |     (B::TupleWithFields(/* fields */)).foo();\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found enum `C`\n   --> $DIR/issue-73427.rs:37:5\n@@ -70,10 +60,8 @@ help: you might have meant to use the following enum variant\n    |\n LL |     C::Unit.foo();\n    |     ~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n-LL |     (C::StructWithFields { /* fields */ }).foo();\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     (C::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n@@ -130,7 +118,7 @@ error[E0532]: expected tuple struct or tuple variant, found enum `A`\n LL |     if let A(3) = x { }\n    |            ^\n    |\n-   = help: you might have meant to match against one of the enum's non-tuple variants\n+   = help: you might have meant to match against the enum's non-tuple variant\n note: the enum is defined here\n   --> $DIR/issue-73427.rs:1:1\n    |\n@@ -155,7 +143,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n LL |     let x = A(3);\n    |             ^\n    |\n-   = help: you might have meant to construct one of the enum's non-tuple variants\n+   = help: you might have meant to construct the enum's non-tuple variant\n note: the enum is defined here\n   --> $DIR/issue-73427.rs:1:1\n    |"}, {"sha": "d734fa76b4a35c52605537d33966584de58d9efe", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 30, "deletions": 60, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -19,12 +19,10 @@ help: you might have meant to use the following enum variant\n    |\n LL |         m::Z::Unit;\n    |         ~~~~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n LL |         (m::Z::Fn(/* fields */));\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |         (m::Z::Struct { /* fields */ });\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n@@ -47,23 +45,10 @@ help: you might have meant to use the following enum variant\n    |\n LL |         m::Z::Unit;\n    |         ~~~~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n LL |         (m::Z::Fn(/* fields */));\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |         (m::Z::Struct { /* fields */ });\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error[E0423]: expected value, found struct variant `Z::Struct`\n-  --> $DIR/privacy-enum-ctor.rs:29:20\n-   |\n-LL | /             Struct {\n-LL | |                 s: u8,\n-LL | |             },\n-   | |_____________- `Z::Struct` defined here\n-...\n-LL |           let _: Z = Z::Struct;\n-   |                      ^^^^^^^^^ help: use struct literal syntax instead: `Z::Struct { s: val }`\n \n error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n@@ -89,12 +74,10 @@ help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n LL |     let _: E = (E::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~\n-LL |     let _: E = (E::Struct { /* fields */ });\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n@@ -111,17 +94,6 @@ LL -     let _: E = m::E;\n LL +     let _: E = E;\n    |\n \n-error[E0423]: expected value, found struct variant `m::E::Struct`\n-  --> $DIR/privacy-enum-ctor.rs:45:16\n-   |\n-LL | /         Struct {\n-LL | |             s: u8,\n-LL | |         },\n-   | |_________- `m::E::Struct` defined here\n-...\n-LL |       let _: E = m::E::Struct;\n-   |                  ^^^^^^^^^^^^ help: use struct literal syntax instead: `m::E::Struct { s: val }`\n-\n error[E0423]: expected value, found enum `E`\n   --> $DIR/privacy-enum-ctor.rs:49:16\n    |\n@@ -143,30 +115,17 @@ help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n LL |     let _: E = (E::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~\n-LL |     let _: E = (E::Struct { /* fields */ });\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;\n    |\n LL | use std::f64::consts::E;\n    |\n \n-error[E0423]: expected value, found struct variant `E::Struct`\n-  --> $DIR/privacy-enum-ctor.rs:53:16\n-   |\n-LL | /         Struct {\n-LL | |             s: u8,\n-LL | |         },\n-   | |_________- `E::Struct` defined here\n-...\n-LL |       let _: E = E::Struct;\n-   |                  ^^^^^^^^^ help: use struct literal syntax instead: `E::Struct { s: val }`\n-\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n    |\n@@ -203,12 +162,10 @@ help: you might have meant to use the following enum variant\n    |\n LL |     let _: Z = m::Z::Unit;\n    |                ~~~~~~~~~~\n-help: alternatively, the following enum variants are also available\n+help: alternatively, the following enum variant is available\n    |\n LL |     let _: Z = (m::Z::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |     let _: Z = (m::Z::Struct { /* fields */ });\n-   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12\n@@ -240,17 +197,6 @@ note: enum `m::Z` exists but is inaccessible\n LL |         pub(in m) enum Z {\n    |         ^^^^^^^^^^^^^^^^ not accessible\n \n-error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n-  --> $DIR/privacy-enum-ctor.rs:64:16\n-   |\n-LL | /             Struct {\n-LL | |                 s: u8,\n-LL | |             },\n-   | |_____________- `m::n::Z::Struct` defined here\n-...\n-LL |       let _: Z = m::n::Z::Struct;\n-   |                  ^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `m::n::Z::Struct { s: val }`\n-\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12\n    |\n@@ -332,6 +278,12 @@ help: use parentheses to construct this tuple variant\n LL |         let _: Z = Z::Fn(/* u8 */);\n    |                         ++++++++++\n \n+error[E0533]: expected value, found struct variant `Z::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:29:20\n+   |\n+LL |         let _: Z = Z::Struct;\n+   |                    ^^^^^^^^^ not a value\n+\n error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n    |\n@@ -367,6 +319,12 @@ help: use parentheses to construct this tuple variant\n LL |     let _: E = m::E::Fn(/* u8 */);\n    |                        ++++++++++\n \n+error[E0533]: expected value, found struct variant `m::E::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:45:16\n+   |\n+LL |     let _: E = m::E::Struct;\n+   |                ^^^^^^^^^^^^ not a value\n+\n error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n    |\n@@ -402,6 +360,12 @@ help: use parentheses to construct this tuple variant\n LL |     let _: E = E::Fn(/* u8 */);\n    |                     ++++++++++\n \n+error[E0533]: expected value, found struct variant `E::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:53:16\n+   |\n+LL |     let _: E = E::Struct;\n+   |                ^^^^^^^^^ not a value\n+\n error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16\n    |\n@@ -419,7 +383,13 @@ LL -     let _: E = E::Unit();\n LL +     let _: E = E::Unit;\n    |\n \n+error[E0533]: expected value, found struct variant `m::n::Z::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:64:16\n+   |\n+LL |     let _: Z = m::n::Z::Struct;\n+   |                ^^^^^^^^^^^^^^^ not a value\n+\n error: aborting due to 23 previous errors\n \n-Some errors have detailed explanations: E0308, E0412, E0423, E0603, E0618.\n+Some errors have detailed explanations: E0308, E0412, E0423, E0533, E0603, E0618.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "d0ddb34d9fe2c1a353e7d9ec6edfa9f7fb0f82e8", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,23 +1,3 @@\n-error[E0423]: expected value, found struct variant `E::B`\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:36:16\n-   |\n-LL |     A(usize),\n-   |     -------- similarly named tuple variant `A` defined here\n-LL |     B { a: usize },\n-   |     -------------- `E::B` defined here\n-...\n-LL |     let _: E = E::B;\n-   |                ^^^^\n-   |\n-help: use struct literal syntax instead\n-   |\n-LL |     let _: E = E::B { a: val };\n-   |                ~~~~~~~~~~~~~~~\n-help: a tuple variant with a similar name exists\n-   |\n-LL |     let _: E = E::A;\n-   |                   ~\n-\n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:29:20\n    |\n@@ -144,6 +124,12 @@ help: use parentheses to construct this tuple variant\n LL |     let _: E = E::A(/* usize */);\n    |                    +++++++++++++\n \n+error[E0533]: expected value, found struct variant `E::B`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:36:16\n+   |\n+LL |     let _: E = E::B;\n+   |                ^^^^ not a value\n+\n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n    |\n@@ -293,5 +279,5 @@ LL |     let _: usize = closure();\n \n error: aborting due to 17 previous errors\n \n-Some errors have detailed explanations: E0308, E0423, E0615.\n+Some errors have detailed explanations: E0308, E0533, E0615.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "ac9f5ab0b0cbbd04f734b141b13f85fdd47c6c22", "filename": "src/test/ui/suggestions/issue-84700.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -7,15 +7,13 @@ LL |     Cow,\n LL |         FarmAnimal::Cow(_) => \"moo\".to_string(),\n    |         ^^^^^^^^^^^^^^^^^^ help: use this syntax instead: `FarmAnimal::Cow`\n \n-error[E0532]: expected tuple struct or tuple variant, found struct variant `FarmAnimal::Chicken`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `FarmAnimal::Chicken`\n   --> $DIR/issue-84700.rs:17:9\n    |\n-LL |     Chicken { num_eggs: usize },\n-   |     --------------------------- `FarmAnimal::Chicken` defined here\n-...\n LL |         FarmAnimal::Chicken(_) => \"cluck, cluck!\".to_string(),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `FarmAnimal::Chicken { num_eggs }`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0532`.\n+Some errors have detailed explanations: E0164, E0532.\n+For more information about an error, try `rustc --explain E0164`."}, {"sha": "6870b9d7d09f4cc278cb3cd58325c118530b79bd", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -2,7 +2,7 @@ error[E0533]: expected unit struct, unit variant or constant, found tuple varian\n   --> $DIR/incorrect-variant-form-through-Self-issue-58006.rs:8:13\n    |\n LL |             Self::A => (),\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not a unit struct, unit variant or constant\n \n error: aborting due to previous error\n "}, {"sha": "5ed7988e4da343f387cdc21f6aa88911c415ce37", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -6,7 +6,7 @@ type Alias = Enum;\n \n fn main() {\n     Alias::Braced;\n-    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `Alias::Braced` [E0533]\n+    //~^ ERROR expected value, found struct variant `Alias::Braced` [E0533]\n     let Alias::Braced = panic!();\n     //~^ ERROR expected unit struct, unit variant or constant, found struct variant `Alias::Braced` [E0533]\n     let Alias::Braced(..) = panic!();"}, {"sha": "c9ac99ede6f3166ceb3756362f94da0a9d02d6f7", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -1,20 +1,20 @@\n-error[E0533]: expected unit struct, unit variant or constant, found struct variant `Alias::Braced`\n+error[E0533]: expected value, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:8:5\n    |\n LL |     Alias::Braced;\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^ not a value\n \n error[E0533]: expected unit struct, unit variant or constant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:10:9\n    |\n LL |     let Alias::Braced = panic!();\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^ not a unit struct, unit variant or constant\n \n error[E0164]: expected tuple struct or tuple variant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:12:9\n    |\n LL |     let Alias::Braced(..) = panic!();\n-   |         ^^^^^^^^^^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error[E0618]: expected function, found enum variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:15:5\n@@ -37,7 +37,7 @@ error[E0164]: expected tuple struct or tuple variant, found unit variant `Alias:\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:17:9\n    |\n LL |     let Alias::Unit() = panic!();\n-   |         ^^^^^^^^^^^^^ not a tuple variant or struct\n+   |         ^^^^^^^^^^^^^ not a tuple struct or tuple variant\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7f8d124838cb8be5a64b48f6c0c0f1febeca8ff4", "filename": "src/tools/clippy/clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -65,14 +65,14 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                         _ => return,\n                     };\n                     if arm.guard.is_none() {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(id));\n+                        missing_variants.retain(|e| e.ctor_def_id() != Some(id));\n                     }\n                     path\n                 },\n                 PatKind::TupleStruct(path, patterns, ..) => {\n                     if let Some(id) = cx.qpath_res(path, pat.hir_id).opt_def_id() {\n                         if arm.guard.is_none() && patterns.iter().all(|p| !is_refutable(cx, p)) {\n-                            missing_variants.retain(|e| e.ctor_def_id != Some(id));\n+                            missing_variants.retain(|e| e.ctor_def_id() != Some(id));\n                         }\n                     }\n                     path\n@@ -122,11 +122,11 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                 s\n             },\n             variant.name,\n-            match variant.ctor_kind {\n-                CtorKind::Fn if variant.fields.len() == 1 => \"(_)\",\n-                CtorKind::Fn => \"(..)\",\n-                CtorKind::Const => \"\",\n-                CtorKind::Fictive => \"{ .. }\",\n+            match variant.ctor_kind() {\n+                Some(CtorKind::Fn) if variant.fields.len() == 1 => \"(_)\",\n+                Some(CtorKind::Fn) => \"(..)\",\n+                Some(CtorKind::Const) => \"\",\n+                None => \"{ .. }\",\n             }\n         )\n     };"}, {"sha": "f2276395fed0bb70b54ce85e5bfec6aeaedf4afd", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5376d23cb3324edcfaa278a9387898960d5f7c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=7a5376d23cb3324edcfaa278a9387898960d5f7c", "patch": "@@ -133,11 +133,11 @@ impl UnnecessaryDefPath {\n                 let has_ctor = match cx.tcx.def_kind(def_id) {\n                     DefKind::Struct => {\n                         let variant = cx.tcx.adt_def(def_id).non_enum_variant();\n-                        variant.ctor_def_id.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n+                        variant.ctor.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n                     },\n                     DefKind::Variant => {\n                         let variant = cx.tcx.adt_def(cx.tcx.parent(def_id)).variant_with_id(def_id);\n-                        variant.ctor_def_id.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n+                        variant.ctor.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n                     },\n                     _ => false,\n                 };"}]}