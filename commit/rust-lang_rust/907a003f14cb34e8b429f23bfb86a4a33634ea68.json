{"sha": "907a003f14cb34e8b429f23bfb86a4a33634ea68", "node_id": "C_kwDOAAsO6NoAKDkwN2EwMDNmMTRjYjM0ZThiNDI5ZjIzYmZiODZhNGEzMzYzNGVhNjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-06T13:47:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-06T13:47:48Z"}, "message": "tweak format strings", "tree": {"sha": "fa94c4bad73cedd52619727d4de1989c026497ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa94c4bad73cedd52619727d4de1989c026497ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907a003f14cb34e8b429f23bfb86a4a33634ea68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907a003f14cb34e8b429f23bfb86a4a33634ea68", "html_url": "https://github.com/rust-lang/rust/commit/907a003f14cb34e8b429f23bfb86a4a33634ea68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907a003f14cb34e8b429f23bfb86a4a33634ea68/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "html_url": "https://github.com/rust-lang/rust/commit/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9"}], "stats": {"total": 87, "additions": 37, "deletions": 50}, "files": [{"sha": "289c46a5d2ef8f723fa3b4dd89865d7c432eeada", "filename": "src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=907a003f14cb34e8b429f23bfb86a4a33634ea68", "patch": "@@ -40,24 +40,20 @@ impl fmt::Display for TerminationInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use TerminationInfo::*;\n         match self {\n-            Exit(code) => write!(f, \"the evaluated program completed with exit code {}\", code),\n-            Abort(msg) => write!(f, \"{}\", msg),\n-            UnsupportedInIsolation(msg) => write!(f, \"{}\", msg),\n+            Exit(code) => write!(f, \"the evaluated program completed with exit code {code}\"),\n+            Abort(msg) => write!(f, \"{msg}\"),\n+            UnsupportedInIsolation(msg) => write!(f, \"{msg}\"),\n             Int2PtrWithStrictProvenance =>\n                 write!(\n                     f,\n                     \"integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\"\n                 ),\n-            StackedBorrowsUb { msg, .. } => write!(f, \"{}\", msg),\n+            StackedBorrowsUb { msg, .. } => write!(f, \"{msg}\"),\n             Deadlock => write!(f, \"the evaluated program deadlocked\"),\n             MultipleSymbolDefinitions { link_name, .. } =>\n-                write!(f, \"multiple definitions of symbol `{}`\", link_name),\n+                write!(f, \"multiple definitions of symbol `{link_name}`\"),\n             SymbolShimClashing { link_name, .. } =>\n-                write!(\n-                    f,\n-                    \"found `{}` symbol definition that clashes with a built-in shim\",\n-                    link_name\n-                ),\n+                write!(f, \"found `{link_name}` symbol definition that clashes with a built-in shim\",),\n         }\n     }\n }\n@@ -200,11 +196,11 @@ pub fn report_error<'tcx, 'mir>(\n                 }\n                 MultipleSymbolDefinitions { first, first_crate, second, second_crate, .. } =>\n                     vec![\n-                        (Some(*first), format!(\"it's first defined here, in crate `{}`\", first_crate)),\n-                        (Some(*second), format!(\"then it's defined here again, in crate `{}`\", second_crate)),\n+                        (Some(*first), format!(\"it's first defined here, in crate `{first_crate}`\")),\n+                        (Some(*second), format!(\"then it's defined here again, in crate `{second_crate}`\")),\n                     ],\n                 SymbolShimClashing { link_name, span } =>\n-                    vec![(Some(*span), format!(\"the `{}` symbol is defined here\", link_name))],\n+                    vec![(Some(*span), format!(\"the `{link_name}` symbol is defined here\"))],\n                 Int2PtrWithStrictProvenance =>\n                     vec![(None, format!(\"use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\"))],\n                 _ => vec![],\n@@ -227,15 +223,15 @@ pub fn report_error<'tcx, 'mir>(\n                 ) =>\n                     \"post-monomorphization error\",\n                 kind =>\n-                    bug!(\"This error should be impossible in Miri: {:?}\", kind),\n+                    bug!(\"This error should be impossible in Miri: {kind:?}\"),\n             };\n             #[rustfmt::skip]\n             let helps = match e.kind() {\n                 Unsupported(\n                     UnsupportedOpInfo::ThreadLocalStatic(_) |\n                     UnsupportedOpInfo::ReadExternStatic(_)\n                 ) =>\n-                    panic!(\"Error should never be raised by Miri: {:?}\", e.kind()),\n+                    panic!(\"Error should never be raised by Miri: {kind:?}\", kind = e.kind()),\n                 Unsupported(\n                     UnsupportedOpInfo::Unsupported(_) |\n                     UnsupportedOpInfo::PartialPointerOverwrite(_) |\n@@ -295,9 +291,8 @@ pub fn report_error<'tcx, 'mir>(\n     match e.kind() {\n         UndefinedBehavior(UndefinedBehaviorInfo::InvalidUninitBytes(Some((alloc_id, access)))) => {\n             eprintln!(\n-                \"Uninitialized read occurred at offsets 0x{:x}..0x{:x} into this allocation:\",\n-                access.uninit_offset.bytes(),\n-                access.uninit_offset.bytes() + access.uninit_size.bytes(),\n+                \"Uninitialized read occurred at {alloc_id:?}{range:?}, in this allocation:\",\n+                range = alloc_range(access.uninit_offset, access.uninit_size),\n             );\n             eprintln!(\"{:?}\", ecx.dump_alloc(*alloc_id));\n         }"}, {"sha": "e569960f68fba42382071383d7516fd1255f6cb1", "filename": "src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=907a003f14cb34e8b429f23bfb86a4a33634ea68", "patch": "@@ -110,7 +110,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         addr: u64,\n     ) -> Pointer<Option<Tag>> {\n-        trace!(\"Transmuting 0x{:x} to a pointer\", addr);\n+        trace!(\"Transmuting {:#x} to a pointer\", addr);\n \n         let provenance = if ecx.machine.allow_ptr_int_transmute {\n             // When we allow transmutes, treat them like casts: generating a wildcard pointer.\n@@ -126,7 +126,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         addr: u64,\n     ) -> InterpResult<'tcx, Pointer<Option<Tag>>> {\n-        trace!(\"Casting 0x{:x} to a pointer\", addr);\n+        trace!(\"Casting {:#x} to a pointer\", addr);\n \n         let global_state = ecx.machine.intptrcast.borrow();\n "}, {"sha": "029c32cad9173ad88de14b0abf935509ce613997", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=907a003f14cb34e8b429f23bfb86a4a33634ea68", "patch": "@@ -155,7 +155,7 @@ impl Provenance for Tag {\n \n     fn fmt(ptr: &Pointer<Self>, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (tag, addr) = ptr.into_parts(); // address is absolute\n-        write!(f, \"0x{:x}\", addr.bytes())?;\n+        write!(f, \"{:#x}\", addr.bytes())?;\n \n         match tag {\n             Tag::Concrete { alloc_id, sb } => {"}, {"sha": "652f5c94cb372e4d9be6c758eb8bf3e8122d9be5", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=907a003f14cb34e8b429f23bfb86a4a33634ea68", "patch": "@@ -36,7 +36,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let intrinsic_name = this.tcx.item_name(instance.def_id());\n         let intrinsic_name = intrinsic_name.as_str();\n         let ret = match ret {\n-            None => throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name),\n+            None => throw_unsup_format!(\"unimplemented (diverging) intrinsic: `{intrinsic_name}`\"),\n             Some(p) => p,\n         };\n \n@@ -86,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n                 // but no actual allocation can be big enough for the difference to be noticeable.\n                 let byte_count = ty_layout.size.checked_mul(count, this).ok_or_else(|| {\n-                    err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name)\n+                    err_ub_format!(\"overflow computing total size of `{intrinsic_name}`\")\n                 })?;\n                 this.write_bytes_ptr(\n                     ptr,\n@@ -200,24 +200,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         ty::Float(FloatTy::F32) => x.to_scalar()?.to_f32()?.is_finite(),\n                         ty::Float(FloatTy::F64) => x.to_scalar()?.to_f64()?.is_finite(),\n                         _ => bug!(\n-                            \"`{}` called with non-float input type {:?}\",\n-                            intrinsic_name,\n-                            x.layout.ty\n+                            \"`{intrinsic_name}` called with non-float input type {ty:?}\",\n+                            ty = x.layout.ty,\n                         ),\n                     })\n                 };\n                 match (float_finite(a)?, float_finite(b)?) {\n                     (false, false) => throw_ub_format!(\n-                        \"`{}` intrinsic called with non-finite value as both parameters\",\n-                        intrinsic_name,\n+                        \"`{intrinsic_name}` intrinsic called with non-finite value as both parameters\",\n                     ),\n                     (false, _) => throw_ub_format!(\n-                        \"`{}` intrinsic called with non-finite value as first parameter\",\n-                        intrinsic_name,\n+                        \"`{intrinsic_name}` intrinsic called with non-finite value as first parameter\",\n                     ),\n                     (_, false) => throw_ub_format!(\n-                        \"`{}` intrinsic called with non-finite value as second parameter\",\n-                        intrinsic_name,\n+                        \"`{intrinsic_name}` intrinsic called with non-finite value as second parameter\",\n                     ),\n                     _ => {}\n                 }\n@@ -494,7 +490,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 // See <https://github.com/rust-lang/rust/issues/91237>.\n                                 if overflowed {\n                                     let r_val = right.to_scalar()?.to_bits(right.layout.size)?;\n-                                    throw_ub_format!(\"overflowing shift by {} in `{}` in SIMD lane {}\", r_val, intrinsic_name, i);\n+                                    throw_ub_format!(\"overflowing shift by {r_val} in `{intrinsic_name}` in SIMD lane {i}\");\n                                 }\n                             }\n                             if matches!(mir_op, BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge) {\n@@ -751,9 +747,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             this.float_to_int_unchecked(op.to_scalar()?.to_f64()?, dest.layout.ty)?.into(),\n                         _ =>\n                             throw_unsup_format!(\n-                                \"Unsupported SIMD cast from element type {} to {}\",\n-                                op.layout.ty,\n-                                dest.layout.ty\n+                                \"Unsupported SIMD cast from element type {from_ty} to {to_ty}\",\n+                                from_ty = op.layout.ty,\n+                                to_ty = dest.layout.ty,\n                             ),\n                     };\n                     this.write_immediate(val, &dest.into())?;\n@@ -1093,7 +1089,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 throw_machine_stop!(TerminationInfo::Abort(\"Trace/breakpoint trap\".to_string()))\n             }\n \n-            name => throw_unsup_format!(\"unimplemented intrinsic: {}\", name),\n+            name => throw_unsup_format!(\"unimplemented intrinsic: `{name}`\"),\n         }\n \n         trace!(\"{:?}\", this.dump_place(**dest));\n@@ -1340,9 +1336,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 } else {\n                     // `f` was not representable in this integer type.\n                     throw_ub_format!(\n-                        \"`float_to_int_unchecked` intrinsic called on {} which cannot be represented in target type `{:?}`\",\n-                        f,\n-                        dest_ty,\n+                        \"`float_to_int_unchecked` intrinsic called on {f} which cannot be represented in target type `{dest_ty:?}`\",\n                     );\n                 }\n             }\n@@ -1356,14 +1350,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 } else {\n                     // `f` was not representable in this integer type.\n                     throw_ub_format!(\n-                        \"`float_to_int_unchecked` intrinsic called on {} which cannot be represented in target type `{:?}`\",\n-                        f,\n-                        dest_ty,\n+                        \"`float_to_int_unchecked` intrinsic called on {f} which cannot be represented in target type `{dest_ty:?}`\",\n                     );\n                 }\n             }\n             // Nothing else\n-            _ => bug!(\"`float_to_int_unchecked` called with non-int output type {:?}\", dest_ty),\n+            _ => bug!(\"`float_to_int_unchecked` called with non-int output type {dest_ty:?}\"),\n         })\n     }\n }"}, {"sha": "d787865c4e2d236b4b00697b17095049d6325261", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907a003f14cb34e8b429f23bfb86a4a33634ea68/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=907a003f14cb34e8b429f23bfb86a4a33634ea68", "patch": "@@ -140,9 +140,9 @@ impl AllocHistory {\n         stack: &Stack,\n     ) -> InterpError<'tcx> {\n         let action = format!(\n-            \"trying to reborrow {derived_from:?} for {:?} permission at {alloc_id:?}[{:#x}]\",\n-            new.perm,\n-            error_offset.bytes(),\n+            \"trying to reborrow {derived_from:?} for {new_perm:?} permission at {alloc_id:?}[{offset:#x}]\",\n+            new_perm = new.perm,\n+            offset = error_offset.bytes(),\n         );\n         err_sb_ub(\n             format!(\"{}{}\", action, error_cause(stack, derived_from)),\n@@ -162,8 +162,8 @@ impl AllocHistory {\n         stack: &Stack,\n     ) -> InterpError<'tcx> {\n         let action = format!(\n-            \"attempting a {access} using {tag:?} at {alloc_id:?}[{:#x}]\",\n-            error_offset.bytes(),\n+            \"attempting a {access} using {tag:?} at {alloc_id:?}[{offset:#x}]\",\n+            offset = error_offset.bytes(),\n         );\n         err_sb_ub(\n             format!(\"{}{}\", action, error_cause(stack, tag)),"}, {"sha": "e8faf8dd8b97156e3b0b084cc2b95bbd85059336", "filename": "tests/fail/uninit_buffer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907a003f14cb34e8b429f23bfb86a4a33634ea68/tests%2Ffail%2Funinit_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/907a003f14cb34e8b429f23bfb86a4a33634ea68/tests%2Ffail%2Funinit_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_buffer.stderr?ref=907a003f14cb34e8b429f23bfb86a4a33634ea68", "patch": "@@ -17,7 +17,7 @@ LL |         drop(slice1.cmp(slice2));\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-Uninitialized read occurred at offsets 0x4..0x10 into this allocation:\n+Uninitialized read occurred at ALLOC[0x4..0x10], in this allocation:\n ALLOC (Rust heap, size: 32, align: 8) {\n     0x00 \u2502 41 42 43 44 __ __ __ __ __ __ __ __ __ __ __ __ \u2502 ABCD\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n     0x10 \u2502 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ \u2502 .\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591"}]}