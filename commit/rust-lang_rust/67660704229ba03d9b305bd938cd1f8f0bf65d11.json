{"sha": "67660704229ba03d9b305bd938cd1f8f0bf65d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NjYwNzA0MjI5YmEwM2Q5YjMwNWJkOTM4Y2QxZjhmMGJmNjVkMTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-12T01:28:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-16T03:07:38Z"}, "message": "Allow downloading LLVM on Windows\n\n- Don't ignore packaging `llvm/lib/` for `rust-dev` when LLVM is linked\nstatically\n- Add `link-type.txt` so bootstrap knows whether llvm was linked\n  statically or dynamically\n- Don't assume CI LLVM is linked dynamically in `bootstrap::config`\n- Fall back to dynamic linking if `link-type.txt` doesn't exist\n- Fix existing bug that split the output of `llvm-config` on lines, not spaces\n- Enable building LLVM tests\n\n  This works around the following llvm bug:\n\n  ```\n  llvm-config: error: component libraries and shared library\n\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libgtest.a\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libgtest_main.a\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libLLVMTestingSupport.a\n  thread 'main' panicked at 'command did not execute successfully: \"/home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-config\" \"--libfiles\"\n  ```\n\n  I'm not sure why llvm-config thinks these are required, but to avoid\n  the error, this builds them anyway.\n\n- Temporarily set windows as the try builder. This should be reverted\n  before merging.\n\n- Bump version of `download-ci-llvm-stamp`\n\n  `src/llvm-project` hasn't changed, but the generated tarball has.\n\n- Only special case MacOS when dynamic linking. Static linking works fine.\n- Store `link-type.txt` to the top-level of the tarball\n\n  This allows writing the link type unconditionally. Previously, bootstrap\n  had to keep track of whether the file IO *would* succeed (it would fail\n  if `lib/` didn't exist), which was prone to bugs.\n\n- Make `link-type.txt` required\n\n  Anyone downloading this from CI should be using a version of bootstrap\n  that matches the version of the uploaded artifacts. So a missing\n  link-type indicates a bug in x.py.", "tree": {"sha": "47f49aae485318d967f95073a5dc1ff17513b5f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47f49aae485318d967f95073a5dc1ff17513b5f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67660704229ba03d9b305bd938cd1f8f0bf65d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67660704229ba03d9b305bd938cd1f8f0bf65d11", "html_url": "https://github.com/rust-lang/rust/commit/67660704229ba03d9b305bd938cd1f8f0bf65d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67660704229ba03d9b305bd938cd1f8f0bf65d11/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48eb37b9470a26748c916f7153569906f3c67bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48eb37b9470a26748c916f7153569906f3c67bf", "html_url": "https://github.com/rust-lang/rust/commit/e48eb37b9470a26748c916f7153569906f3c67bf"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "ad937f79254447e21d4fe2de19e18d0f9511f430", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=67660704229ba03d9b305bd938cd1f8f0bf65d11", "patch": "@@ -816,8 +816,10 @@ impl Config {\n                 check_ci_llvm!(llvm.allow_old_toolchain);\n                 check_ci_llvm!(llvm.polly);\n \n-                // CI-built LLVM is shared\n-                config.llvm_link_shared = true;\n+                // CI-built LLVM can be either dynamic or static.\n+                let ci_llvm = config.out.join(&*config.build.triple).join(\"ci-llvm\");\n+                let link_type = t!(std::fs::read_to_string(ci_llvm.join(\"link-type.txt\")));\n+                config.llvm_link_shared = link_type == \"dynamic\";\n             }\n \n             if config.llvm_thin_lto {"}, {"sha": "af9c0fb04bc9d4858bc2e053f1747a61c0764d81", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=67660704229ba03d9b305bd938cd1f8f0bf65d11", "patch": "@@ -1800,19 +1800,11 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n     }\n }\n \n-/// Maybe add libLLVM.so to the given destination lib-dir. It will only have\n-/// been built if LLVM tools are linked dynamically.\n+/// Maybe add LLVM object files to the given destination lib-dir. Allows either static or dynamic linking.\n ///\n-/// Note: This function does not yet support Windows, but we also don't support\n-///       linking LLVM tools dynamically on Windows yet.\n-fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) {\n-    if !builder.config.llvm_link_shared {\n-        // We do not need to copy LLVM files into the sysroot if it is not\n-        // dynamically linked; it is already included into librustc_llvm\n-        // statically.\n-        return;\n-    }\n \n+/// Returns whether the files were actually copied.\n+fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) -> bool {\n     if let Some(config) = builder.config.target_config.get(&target) {\n         if config.llvm_config.is_some() && !builder.config.llvm_from_ci {\n             // If the LLVM was externally provided, then we don't currently copy\n@@ -1828,7 +1820,7 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             //\n             // If the LLVM is coming from ourselves (just from CI) though, we\n             // still want to install it, as it otherwise won't be available.\n-            return;\n+            return false;\n         }\n     }\n \n@@ -1837,31 +1829,48 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n     // clear why this is the case, though. llvm-config will emit the versioned\n     // paths and we don't want those in the sysroot (as we're expecting\n     // unversioned paths).\n-    if target.contains(\"apple-darwin\") {\n+    if target.contains(\"apple-darwin\") && builder.config.llvm_link_shared {\n         let src_libdir = builder.llvm_out(target).join(\"lib\");\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");\n         if llvm_dylib_path.exists() {\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n+        !builder.config.dry_run\n     } else if let Ok(llvm_config) = crate::native::prebuilt_llvm_config(builder, target) {\n-        let files = output(Command::new(llvm_config).arg(\"--libfiles\"));\n-        for file in files.lines() {\n+        let mut cmd = Command::new(llvm_config);\n+        cmd.arg(\"--libfiles\");\n+        builder.verbose(&format!(\"running {:?}\", cmd));\n+        let files = output(&mut cmd);\n+        for file in files.trim_end().split(' ') {\n             builder.install(Path::new(file), dst_libdir, 0o644);\n         }\n+        !builder.config.dry_run\n+    } else {\n+        false\n     }\n }\n \n /// Maybe add libLLVM.so to the target lib-dir for linking.\n pub fn maybe_install_llvm_target(builder: &Builder<'_>, target: TargetSelection, sysroot: &Path) {\n     let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target.triple).join(\"lib\");\n-    maybe_install_llvm(builder, target, &dst_libdir);\n+    // We do not need to copy LLVM files into the sysroot if it is not\n+    // dynamically linked; it is already included into librustc_llvm\n+    // statically.\n+    if builder.config.llvm_link_shared {\n+        maybe_install_llvm(builder, target, &dst_libdir);\n+    }\n }\n \n /// Maybe add libLLVM.so to the runtime lib-dir for rustc itself.\n pub fn maybe_install_llvm_runtime(builder: &Builder<'_>, target: TargetSelection, sysroot: &Path) {\n     let dst_libdir =\n         sysroot.join(builder.sysroot_libdir_relative(Compiler { stage: 1, host: target }));\n-    maybe_install_llvm(builder, target, &dst_libdir);\n+    // We do not need to copy LLVM files into the sysroot if it is not\n+    // dynamically linked; it is already included into librustc_llvm\n+    // statically.\n+    if builder.config.llvm_link_shared {\n+        maybe_install_llvm(builder, target, &dst_libdir);\n+    }\n }\n \n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n@@ -1973,7 +1982,10 @@ impl Step for RustDev {\n         // `$ORIGIN/../lib` can find it. It may also be used as a dependency\n         // of `rustc-dev` to support the inherited `-lLLVM` when using the\n         // compiler libraries.\n-        maybe_install_llvm(builder, target, &tarball.image_dir().join(\"lib\"));\n+        let dst_libdir = tarball.image_dir().join(\"lib\");\n+        maybe_install_llvm(builder, target, &dst_libdir);\n+        let link_type = if builder.config.llvm_link_shared { \"dynamic\" } else { \"static\" };\n+        t!(std::fs::write(tarball.image_dir().join(\"link-type.txt\"), link_type), dst_libdir);\n \n         Some(tarball.generate())\n     }"}, {"sha": "fb5b058cb4d74a46c6e4de30695d020f9a834a93", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=67660704229ba03d9b305bd938cd1f8f0bf65d11", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/80087\n+Last change is for: https://github.com/rust-lang/rust/pull/80932"}, {"sha": "609ac8b366952113bfb3be057b628a7107bdbd36", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67660704229ba03d9b305bd938cd1f8f0bf65d11/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=67660704229ba03d9b305bd938cd1f8f0bf65d11", "patch": "@@ -171,7 +171,6 @@ impl Step for Llvm {\n             .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n             .define(\"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD\", llvm_exp_targets)\n             .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n-            .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n             .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")\n             .define(\"LLVM_INCLUDE_BENCHMARKS\", \"OFF\")\n             .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")"}]}