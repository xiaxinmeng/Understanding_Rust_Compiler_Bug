{"sha": "31b25d81eb9efb392a0bd3b55d1387ff7724d0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYjI1ZDgxZWI5ZWZiMzkyYTBiZDNiNTVkMTM4N2ZmNzcyNGQwZmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-17T23:51:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-18T04:21:09Z"}, "message": "use 64-bit memset on 64-bit platforms. Fixes #1546. Fixes #843.\n\nActually, we don't \"fix\" #843 so much as close it: as with memmove,\nwe simply use an alignment of 1 with dynamically sized types.", "tree": {"sha": "39af743bbbbe05b8056ff879167bde6bfd1d12fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39af743bbbbe05b8056ff879167bde6bfd1d12fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31b25d81eb9efb392a0bd3b55d1387ff7724d0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31b25d81eb9efb392a0bd3b55d1387ff7724d0fe", "html_url": "https://github.com/rust-lang/rust/commit/31b25d81eb9efb392a0bd3b55d1387ff7724d0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31b25d81eb9efb392a0bd3b55d1387ff7724d0fe/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27", "html_url": "https://github.com/rust-lang/rust/commit/7bc2930cfaa1f4f5bf883b4df23b09cbb6fe6e27"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "f709ddb56bd968df0a24b131188567614d1fec4e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/31b25d81eb9efb392a0bd3b55d1387ff7724d0fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b25d81eb9efb392a0bd3b55d1387ff7724d0fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=31b25d81eb9efb392a0bd3b55d1387ff7724d0fe", "patch": "@@ -1944,24 +1944,6 @@ fn call_memmove(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n     ret rslt(cx, ret_val);\n }\n \n-fn call_bzero(cx: @block_ctxt, dst: ValueRef, n_bytes: ValueRef,\n-              align_bytes: ValueRef) -> result {\n-    // FIXME: switch to the 64-bit variant when on such a platform.\n-    let ccx = bcx_ccx(cx);\n-    let i = ccx.intrinsics;\n-    assert (i.contains_key(\"llvm.memset.p0i8.i32\"));\n-    let memset = i.get(\"llvm.memset.p0i8.i32\");\n-    let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n-    let size = IntCast(cx, n_bytes, T_i32());\n-    let align =\n-        if lib::llvm::llvm::LLVMIsConstant(align_bytes) == True {\n-            IntCast(cx, align_bytes, T_i32())\n-        } else { IntCast(cx, C_int(ccx, 0), T_i32()) };\n-    let volatile = C_bool(false);\n-    ret rslt(cx,\n-             Call(cx, memset, [dst_ptr, C_u8(0u), size, align, volatile]));\n-}\n-\n fn memmove_ty(bcx: @block_ctxt, dst: ValueRef, src: ValueRef, t: ty::t) ->\n     @block_ctxt {\n     let ccx = bcx_ccx(bcx);\n@@ -3985,10 +3967,18 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n         let llty = type_of(ccx, sp, t);\n         Store(bcx, C_null(llty), llptr);\n     } else {\n-        let llsz = size_of(bcx, t);\n-        // FIXME passing in the align here is correct, but causes issue #843\n-        // let llalign = align_of(llsz.bcx, t);\n-        bcx = call_bzero(llsz.bcx, llptr, llsz.val, C_int(ccx, 0)).bcx;\n+        let key = alt ccx.sess.targ_cfg.arch {\n+          session::arch_x86. | session::arch_arm. { \"llvm.memset.p0i8.i32\" }\n+          session::arch_x86_64. { \"llvm.memset.p0i8.i64\" }\n+        };\n+        let i = ccx.intrinsics;\n+        let memset = i.get(key);\n+        let dst_ptr = PointerCast(cx, llptr, T_ptr(T_i8()));\n+        let size = size_of(cx, t);\n+        bcx = size.bcx;\n+        let align = C_i32(1i32); // cannot use computed value here.\n+        let volatile = C_bool(false);\n+        Call(cx, memset, [dst_ptr, C_u8(0u), size.val, align, volatile]);\n     }\n     ret bcx;\n }"}]}