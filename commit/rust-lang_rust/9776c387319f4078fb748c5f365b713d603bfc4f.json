{"sha": "9776c387319f4078fb748c5f365b713d603bfc4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzZjMzg3MzE5ZjQwNzhmYjc0OGM1ZjM2NWI3MTNkNjAzYmZjNGY=", "commit": {"author": {"name": "Matthijs 'Thiez' Hofstra", "email": "thiezz@gmail.com", "date": "2013-02-20T19:41:24Z"}, "committer": {"name": "Matthijs 'Thiez' Hofstra", "email": "thiezz@gmail.com", "date": "2013-02-20T19:45:17Z"}, "message": "Changed a test to use intrinsics.rs and changed a few lines that were too long, had bad whitespace, etc.", "tree": {"sha": "11654a3c2a76fa4810650a0f8e4eb928ecf11f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11654a3c2a76fa4810650a0f8e4eb928ecf11f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9776c387319f4078fb748c5f365b713d603bfc4f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9776c387319f4078fb748c5f365b713d603bfc4f", "html_url": "https://github.com/rust-lang/rust/commit/9776c387319f4078fb748c5f365b713d603bfc4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9776c387319f4078fb748c5f365b713d603bfc4f/comments", "author": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "675bdcf341f7b8c3f550ad5469396116c38a7731", "url": "https://api.github.com/repos/rust-lang/rust/commits/675bdcf341f7b8c3f550ad5469396116c38a7731", "html_url": "https://github.com/rust-lang/rust/commit/675bdcf341f7b8c3f550ad5469396116c38a7731"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "6d6fd07dc5a8214298d11d11926e9aff8f6b561a", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=9776c387319f4078fb748c5f365b713d603bfc4f", "patch": "@@ -127,7 +127,8 @@ struct ArcDestruct<T> {\n             }\n             do task::unkillable {\n                 let data: ~ArcData<T> = cast::reinterpret_cast(&self.data);\n-                let new_count = intrinsics::atomic_xsub(&mut data.count, 1) - 1;\n+                let new_count =\n+                    intrinsics::atomic_xsub(&mut data.count, 1) - 1;\n                 assert new_count >= 0;\n                 if new_count == 0 {\n                     // Were we really last, or should we hand off to an"}, {"sha": "8f0067b739335d15baf1582b362751cf021dbc89", "filename": "src/libcore/private/intrinsics.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Flibcore%2Fprivate%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Flibcore%2Fprivate%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fintrinsics.rs?ref=9776c387319f4078fb748c5f365b713d603bfc4f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n /*!\n-An attempt to move all intrinsic declarations to a single place, as mentioned in #3369\n-\n+An attempt to move all intrinsic declarations to a single place,\n+as mentioned in #3369\n The intrinsics are defined in librustc/middle/trans/foreign.rs.\n */\n \n@@ -23,97 +23,97 @@ pub extern {\n     pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n     pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n-    \n+\n     pub fn atomic_xadd(dst: &mut int, src: int) -> int;\n     pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n     pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n-    \n+\n     pub fn atomic_xsub(dst: &mut int, src: int) -> int;\n     pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n     pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n-    \n+\n     pub fn size_of<T>() -> uint;\n-    \n+\n     pub fn move_val<T>(dst: &mut T, -src: T);\n     pub fn move_val_init<T>(dst: &mut T, -src: T);\n-    \n+\n     pub fn min_align_of<T>() -> uint;\n     pub fn pref_align_of<T>() -> uint;\n-    \n+\n     pub fn get_tydesc<T>() -> *();\n-    \n+\n     pub fn init<T>() -> T;\n-    \n+\n     pub fn forget<T>(_: T) -> ();\n \n-    // FIXME: intrinsic uses legacy modes\n+    // XXX: intrinsic uses legacy modes\n     fn reinterpret_cast<T,U>(&&src: T) -> U;\n-    // FIXME: intrinsic uses legacy modes\n+    // XXX: intrinsic uses legacy modes\n     fn addr_of<T>(&&scr: T) -> *T;\n-    \n+\n     pub fn needs_drop<T>() -> bool;\n-    \n-    // FIXME: intrinsic uses legacy modes and has reference to TyDesc\n+\n+    // XXX: intrinsic uses legacy modes and has reference to TyDesc\n     // and TyVisitor which are in librustc\n     //fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor) -> ();\n-    // FIXME: intrinsic uses legacy modes\n+    // XXX: intrinsic uses legacy modes\n     //fn frame_address(f: &once fn(*u8));\n-    \n+\n     pub fn morestack_addr() -> *();\n-    \n+\n     pub fn memmove32(dst: *mut u8, src: *u8, size: u32);\n     pub fn memmove64(dst: *mut u8, src: *u8, size: u64);\n-    \n+\n     pub fn sqrtf32(x: f32) -> f32;\n     pub fn sqrtf64(x: f64) -> f64;\n-    \n+\n     pub fn powif32(a: f32, x: i32) -> f32;\n     pub fn powif64(a: f64, x: i32) -> f64;\n-    \n+\n     pub fn sinf32(x: f32) -> f32;\n     pub fn sinf64(x: f64) -> f64;\n-    \n+\n     pub fn cosf32(x: f32) -> f32;\n     pub fn cosf64(x: f64) -> f64;\n-    \n+\n     pub fn powf32(a: f32, x: f32) -> f32;\n     pub fn powf64(a: f64, x: f64) -> f64;\n-    \n+\n     pub fn expf32(x: f32) -> f32;\n     pub fn expf64(x: f64) -> f64;\n-    \n+\n     pub fn exp2f32(x: f32) -> f32;\n     pub fn exp2f64(x: f64) -> f64;\n-    \n+\n     pub fn logf32(x: f32) -> f32;\n     pub fn logf64(x: f64) -> f64;\n-    \n+\n     pub fn log10f32(x: f32) -> f32;\n     pub fn log10f64(x: f64) -> f64;\n-    \n+\n     pub fn log2f32(x: f32) -> f32;\n     pub fn log2f64(x: f64) -> f64;\n \n     pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n     pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n-    \n+\n     pub fn fabsf32(x: f32) -> f32;\n     pub fn fabsf64(x: f64) -> f64;\n-    \n+\n     pub fn floorf32(x: f32) -> f32;\n     pub fn floorf64(x: f64) -> f64;\n \n     pub fn ceilf32(x: f32) -> f32;\n     pub fn ceilf64(x: f64) -> f64;\n-    \n+\n     pub fn truncf32(x: f32) -> f32;\n     pub fn truncf64(x: f64) -> f64;\n-    \n+\n     pub fn ctpop8(x: i8) -> i8;\n     pub fn ctpop16(x: i16) -> i16;\n     pub fn ctpop32(x: i32) -> i32;\n     pub fn ctpop64(x: i64) -> i64;\n-    \n+\n     pub fn ctlz8(x: i8) -> i8;\n     pub fn ctlz16(x: i16) -> i16;\n     pub fn ctlz32(x: i32) -> i32;\n@@ -123,7 +123,7 @@ pub extern {\n     pub fn cttz16(x: i16) -> i16;\n     pub fn cttz32(x: i32) -> i32;\n     pub fn cttz64(x: i64) -> i64;\n-    \n+\n     pub fn bswap16(x: i16) -> i16;\n     pub fn bswap32(x: i32) -> i32;\n     pub fn bswap64(x: i64) -> i64;"}, {"sha": "6c374d6101aef449433a2568ae8b481bf5eec5ea", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=9776c387319f4078fb748c5f365b713d603bfc4f", "patch": "@@ -114,7 +114,8 @@ pub pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> ~[T] {\n         do as_mut_buf(v) |p, _len| {\n             let mut i: uint = 0u;\n             while i < n_elts {\n-                intrinsics::move_val_init(&mut(*ptr::mut_offset(p, i)), op(i));\n+                intrinsics::move_val_init(&mut(*ptr::mut_offset(p, i)),\n+                                          op(i));\n                 i += 1u;\n             }\n         }\n@@ -551,7 +552,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        // FIXME #4204: Should be intrinsics::uninit() - we don't need this zeroed\n+        // FIXME #4204: Should be uninit() - we don't need this zeroed\n         let mut val = intrinsics::init();\n         val <-> *valptr;\n         raw::set_len(v, ln - 1u);\n@@ -626,7 +627,7 @@ pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n     unsafe {\n         do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                // FIXME #4204 Should be intrinsics::uninit() - don't need to zero\n+                // FIXME #4204 Should be uninit() - don't need to zero\n                 let mut x = intrinsics::init();\n                 x <-> *ptr::mut_offset(p, i);\n                 push(&mut *v, x);\n@@ -643,7 +644,7 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                // FIXME #4204 Should be intrinsics::uninit() - don't need to zero\n+                // FIXME #4204 Should be uninit() - don't need to zero\n                 let mut dropped = intrinsics::init();\n                 dropped <-> *ptr::mut_offset(p, i);\n             }\n@@ -669,7 +670,7 @@ pub fn dedup<T: Eq>(v: &mut ~[T]) {\n                 // last_written < next_to_read < ln\n                 if *ptr::mut_offset(p, next_to_read) ==\n                     *ptr::mut_offset(p, last_written) {\n-                    // FIXME #4204 Should be intrinsics::uninit() - don't need to\n+                    // FIXME #4204 Should be uninit() - don't need to\n                     // zero\n                     let mut dropped = intrinsics::init();\n                     dropped <-> *ptr::mut_offset(p, next_to_read);"}, {"sha": "d16b2e3e996ce3e913d0b0371f4eed8eb59a645c", "filename": "src/test/run-pass/type-use-i1-versus-i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9776c387319f4078fb748c5f365b713d603bfc4f/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs?ref=9776c387319f4078fb748c5f365b713d603bfc4f", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n     let mut x: bool = false;\n     // this line breaks it\n-    vec::rusti::move_val_init(&mut x, false);\n+    private::intrinsics::move_val_init(&mut x, false);\n }"}]}