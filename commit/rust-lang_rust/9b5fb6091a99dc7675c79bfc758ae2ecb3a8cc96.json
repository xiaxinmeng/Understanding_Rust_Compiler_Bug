{"sha": "9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWZiNjA5MWE5OWRjNzY3NWM3OWJmYzc1OGFlMmVjYjNhOGNjOTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T14:13:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T14:19:56Z"}, "message": "Update regionck to discharge the binder safely (using\n`assert_no_late_bound_regions`) and to give more helpful debug output.", "tree": {"sha": "8947d86048a7f5bbc26e08143e9479dc3f469f3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8947d86048a7f5bbc26e08143e9479dc3f469f3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96", "html_url": "https://github.com/rust-lang/rust/commit/9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92425496e525855fd772f771a35456a4b66c071f", "url": "https://api.github.com/repos/rust-lang/rust/commits/92425496e525855fd772f771a35456a4b66c071f", "html_url": "https://github.com/rust-lang/rust/commit/92425496e525855fd772f771a35456a4b66c071f"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "3b5027dbb9e69c22a0eedc4a26e9354386ba0928", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=9b5fb6091a99dc7675c79bfc758ae2ecb3a8cc96", "patch": "@@ -936,37 +936,55 @@ fn constrain_call<'a, I: Iterator<Item=&'a ast::Expr>>(rcx: &mut Rcx,\n fn constrain_autoderefs<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n                                   deref_expr: &ast::Expr,\n                                   derefs: uint,\n-                                  mut derefd_ty: Ty<'tcx>) {\n+                                  mut derefd_ty: Ty<'tcx>)\n+{\n+    debug!(\"constrain_autoderefs(deref_expr={}, derefs={}, derefd_ty={})\",\n+           deref_expr.repr(rcx.tcx()),\n+           derefs,\n+           derefd_ty.repr(rcx.tcx()));\n+\n     let r_deref_expr = ty::ReScope(CodeExtent::from_node_id(deref_expr.id));\n     for i in range(0u, derefs) {\n-        debug!(\"constrain_autoderefs(deref_expr=?, derefd_ty={}, derefs={}/{}\",\n-               rcx.fcx.infcx().ty_to_string(derefd_ty),\n-               i, derefs);\n-\n         let method_call = MethodCall::autoderef(deref_expr.id, i);\n+        debug!(\"constrain_autoderefs: method_call={:?} (of {:?} total)\", method_call, derefs);\n+\n         derefd_ty = match rcx.fcx.inh.method_map.borrow().get(&method_call) {\n             Some(method) => {\n+                debug!(\"constrain_autoderefs: #{} is overloaded, method={}\",\n+                       i, method.repr(rcx.tcx()));\n+\n                 // Treat overloaded autoderefs as if an AutoRef adjustment\n                 // was applied on the base type, as that is always the case.\n                 let fn_sig = ty::ty_fn_sig(method.ty);\n-                let self_ty = fn_sig.0.inputs[0];\n+                let fn_sig = // late-bound regions should have been instantiated\n+                    ty::assert_no_late_bound_regions(rcx.tcx(), fn_sig);\n+                let self_ty = fn_sig.inputs[0];\n                 let (m, r) = match self_ty.sty {\n                     ty::ty_rptr(r, ref m) => (m.mutbl, r),\n-                    _ => rcx.tcx().sess.span_bug(deref_expr.span,\n+                    _ => {\n+                        rcx.tcx().sess.span_bug(\n+                            deref_expr.span,\n                             &format!(\"bad overloaded deref type {}\",\n-                                    method.ty.repr(rcx.tcx()))[])\n+                                     method.ty.repr(rcx.tcx()))[])\n+                    }\n                 };\n+\n+                debug!(\"constrain_autoderefs: receiver r={:?} m={:?}\",\n+                       r.repr(rcx.tcx()), m);\n+\n                 {\n                     let mc = mc::MemCategorizationContext::new(rcx.fcx);\n                     let self_cmt = ignore_err!(mc.cat_expr_autoderefd(deref_expr, i));\n+                    debug!(\"constrain_autoderefs: self_cmt={:?}\",\n+                           self_cmt.repr(rcx.tcx()));\n                     link_region(rcx, deref_expr.span, *r,\n                                 ty::BorrowKind::from_mutbl(m), self_cmt);\n                 }\n \n                 // Specialized version of constrain_call.\n                 type_must_outlive(rcx, infer::CallRcvr(deref_expr.span),\n                                   self_ty, r_deref_expr);\n-                match fn_sig.0.output {\n+                match fn_sig.output {\n                     ty::FnConverging(return_type) => {\n                         type_must_outlive(rcx, infer::CallReturn(deref_expr.span),\n                                           return_type, r_deref_expr);\n@@ -1185,7 +1203,7 @@ fn link_region_from_node_type<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n                                         id: ast::NodeId,\n                                         mutbl: ast::Mutability,\n                                         cmt_borrowed: mc::cmt<'tcx>) {\n-    debug!(\"link_region_from_node_type(id={}, mutbl={}, cmt_borrowed={})\",\n+    debug!(\"link_region_from_node_type(id={:?}, mutbl={:?}, cmt_borrowed={})\",\n            id, mutbl, cmt_borrowed.repr(rcx.tcx()));\n \n     let rptr_ty = rcx.resolve_node_type(id);"}]}