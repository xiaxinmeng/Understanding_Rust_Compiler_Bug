{"sha": "12fd610e01bbab0c58170618caf03ac7d9ddb406", "node_id": "C_kwDOAAsO6NoAKDEyZmQ2MTBlMDFiYmFiMGM1ODE3MDYxOGNhZjAzYWM3ZDlkZGI0MDY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T21:40:39Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T21:40:39Z"}, "message": "Refactor tagged ptr packing into a function", "tree": {"sha": "0190c36de55f26f2b4596166e02ea5b9baf2ad0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0190c36de55f26f2b4596166e02ea5b9baf2ad0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12fd610e01bbab0c58170618caf03ac7d9ddb406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12fd610e01bbab0c58170618caf03ac7d9ddb406", "html_url": "https://github.com/rust-lang/rust/commit/12fd610e01bbab0c58170618caf03ac7d9ddb406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12fd610e01bbab0c58170618caf03ac7d9ddb406/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6f4c126027aca4153ba3a6b48c6abc164ef94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f4c126027aca4153ba3a6b48c6abc164ef94d", "html_url": "https://github.com/rust-lang/rust/commit/3c6f4c126027aca4153ba3a6b48c6abc164ef94d"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "065aaa40759a4ba4fca96d25bfae5687e4844407", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/12fd610e01bbab0c58170618caf03ac7d9ddb406/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fd610e01bbab0c58170618caf03ac7d9ddb406/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=12fd610e01bbab0c58170618caf03ac7d9ddb406", "patch": "@@ -50,6 +50,10 @@ where\n     P: Pointer,\n     T: Tag,\n {\n+    pub fn new(pointer: P, tag: T) -> Self {\n+        Self { packed: Self::pack(P::into_ptr(pointer), tag), data: PhantomData }\n+    }\n+\n     const TAG_BIT_SHIFT: usize = usize::BITS as usize - T::BITS;\n     const ASSERTION: () = {\n         assert!(T::BITS <= P::BITS);\n@@ -58,28 +62,28 @@ where\n         assert!(std::mem::size_of::<&P::Target>() == std::mem::size_of::<usize>());\n     };\n \n-    pub fn new(pointer: P, tag: T) -> Self {\n+    /// Pack pointer `ptr` that comes from [`P::into_ptr`] with a `tag`.\n+    ///\n+    /// [`P::into_ptr`]: Pointer::into_ptr\n+    fn pack(ptr: NonNull<P::Target>, tag: T) -> NonNull<P::Target> {\n         // Trigger assert!\n         let () = Self::ASSERTION;\n \n         let packed_tag = tag.into_usize() << Self::TAG_BIT_SHIFT;\n \n-        Self {\n-            packed: P::into_ptr(pointer).map_addr(|addr| {\n-                // SAFETY:\n-                // - The pointer is `NonNull` => it's address is `NonZeroUsize`\n-                // - `P::BITS` least significant bits are always zero (`Pointer` contract)\n-                // - `T::BITS <= P::BITS` (from `Self::ASSERTION`)\n-                //\n-                // Thus `addr >> T::BITS` is guaranteed to be non-zero.\n-                //\n-                // `{non_zero} | packed_tag` can't make the value zero.\n-\n-                let packed = (addr.get() >> T::BITS) | packed_tag;\n-                unsafe { NonZeroUsize::new_unchecked(packed) }\n-            }),\n-            data: PhantomData,\n-        }\n+        ptr.map_addr(|addr| {\n+            // SAFETY:\n+            // - The pointer is `NonNull` => it's address is `NonZeroUsize`\n+            // - `P::BITS` least significant bits are always zero (`Pointer` contract)\n+            // - `T::BITS <= P::BITS` (from `Self::ASSERTION`)\n+            //\n+            // Thus `addr >> T::BITS` is guaranteed to be non-zero.\n+            //\n+            // `{non_zero} | packed_tag` can't make the value zero.\n+\n+            let packed = (addr.get() >> T::BITS) | packed_tag;\n+            unsafe { NonZeroUsize::new_unchecked(packed) }\n+        })\n     }\n \n     pub(super) fn pointer_raw(&self) -> NonNull<P::Target> {\n@@ -117,12 +121,7 @@ where\n \n     #[inline]\n     pub fn set_tag(&mut self, tag: T) {\n-        // TODO: refactor packing into a function and reuse it here\n-        let new_tag = T::into_usize(tag) << Self::TAG_BIT_SHIFT;\n-        let tag_mask = (1 << T::BITS) - 1;\n-        self.packed = self.packed.map_addr(|addr| unsafe {\n-            NonZeroUsize::new_unchecked(addr.get() & !(tag_mask << Self::TAG_BIT_SHIFT) | new_tag)\n-        });\n+        self.packed = Self::pack(self.pointer_raw(), tag);\n     }\n }\n "}]}