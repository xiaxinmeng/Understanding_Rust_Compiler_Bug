{"sha": "048dad8c2e86006e53b3a134279729efb28b9e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OGRhZDhjMmU4NjAwNmU1M2IzYTEzNDI3OTcyOWVmYjI4YjllMzI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-17T00:56:31Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-17T00:56:31Z"}, "message": "don't clone types that are copy (clippy::clone_on_copy)", "tree": {"sha": "b9e584f4d1c276b60cb0bd7cee3a4ad158a0ac66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e584f4d1c276b60cb0bd7cee3a4ad158a0ac66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/048dad8c2e86006e53b3a134279729efb28b9e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/048dad8c2e86006e53b3a134279729efb28b9e32", "html_url": "https://github.com/rust-lang/rust/commit/048dad8c2e86006e53b3a134279729efb28b9e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/048dad8c2e86006e53b3a134279729efb28b9e32/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d654d5132b702d028ed00b5ec5c654a0b4a2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d654d5132b702d028ed00b5ec5c654a0b4a2fa", "html_url": "https://github.com/rust-lang/rust/commit/c5d654d5132b702d028ed00b5ec5c654a0b4a2fa"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "87cad326d1cbed20373c2fc30b12ae85ef797a45", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -23,7 +23,7 @@ pub struct Hygiene {\n \n impl Hygiene {\n     pub fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Hygiene {\n-        Hygiene { frames: Some(HygieneFrames::new(db, file_id.clone())) }\n+        Hygiene { frames: Some(HygieneFrames::new(db, file_id)) }\n     }\n \n     pub fn new_unhygienic() -> Hygiene {\n@@ -129,10 +129,7 @@ impl HygieneInfo {\n             mbe::Origin::Call => (&self.macro_arg.1, self.arg_start),\n             mbe::Origin::Def => (\n                 &self.macro_def.1,\n-                self.def_start\n-                    .as_ref()\n-                    .expect(\"`Origin::Def` used with non-`macro_rules!` macro\")\n-                    .clone(),\n+                *self.def_start.as_ref().expect(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n             ),\n         };\n "}, {"sha": "5ea9fc4fb3741d9268b9bfe1c17788a5166ea306", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n \n     let mut cb = |_: BrokenLink| {\n         let empty = InlineStr::try_from(\"\").unwrap();\n-        Some((CowStr::Inlined(empty.clone()), CowStr::Inlined(empty)))\n+        Some((CowStr::Inlined(empty), CowStr::Inlined(empty)))\n     };\n     let doc = Parser::new_with_broken_link_callback(markdown, opts, Some(&mut cb));\n     let doc = doc.filter_map(move |evt| match evt {\n@@ -147,7 +147,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n         _ => return None,\n     };\n \n-    let ns = ItemInNs::from(target_def.clone());\n+    let ns = ItemInNs::from(target_def);\n \n     let module = definition.module(db)?;\n     let krate = module.krate();"}, {"sha": "b71f4917c0c5978f75c02c01be1f0abc41a3611b", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -102,7 +102,7 @@ fn extract_positioned_link_from_comment(\n             None => comment_range.end(),\n         }\n     })?;\n-    Some((def_link.to_string(), ns.clone()))\n+    Some((def_link.to_string(), *ns))\n }\n \n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {"}, {"sha": "4f825523c429adb26aa0cc071c4c4784714d98ea", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -56,7 +56,7 @@ pub(super) fn ra_fixture(\n         for range in inj.map_range_up(hl_range.range) {\n             if let Some(range) = literal.map_range_up(range) {\n                 hl_range.range = range;\n-                hl.add(hl_range.clone());\n+                hl.add(hl_range);\n             }\n         }\n     }"}, {"sha": "596c536a763f21bfba77b475060e5c677675f397", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -145,11 +145,8 @@ fn insert_import(\n     variant_hir_name: &Name,\n ) -> Option<()> {\n     let db = ctx.db();\n-    let mod_path = module.find_use_path_prefixed(\n-        db,\n-        enum_module_def.clone(),\n-        ctx.config.insert_use.prefix_kind,\n-    );\n+    let mod_path =\n+        module.find_use_path_prefixed(db, *enum_module_def, ctx.config.insert_use.prefix_kind);\n     if let Some(mut mod_path) = mod_path {\n         mod_path.pop_segment();\n         mod_path.push_segment(variant_hir_name.clone());"}, {"sha": "476eecff0e18edc3bed5c37d240a86f0356cfafe", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -26,11 +26,11 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n         let add_resolution = match &res {\n             hir::ScopeDef::ModuleDef(def) => match def {\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    acc.add_struct_pat(ctx, strukt.clone(), Some(name.clone()));\n+                    acc.add_struct_pat(ctx, *strukt, Some(name.clone()));\n                     true\n                 }\n                 hir::ModuleDef::Variant(variant) if !ctx.is_irrefutable_pat_binding => {\n-                    acc.add_variant_pat(ctx, variant.clone(), Some(name.clone()));\n+                    acc.add_variant_pat(ctx, *variant, Some(name.clone()));\n                     true\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(..))"}, {"sha": "12921e12b794c719620cdbbd1ac562195d7805c4", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -81,7 +81,7 @@ impl<'a> RenderContext<'a> {\n     }\n \n     fn snippet_cap(&self) -> Option<SnippetCap> {\n-        self.completion.config.snippet_cap.clone()\n+        self.completion.config.snippet_cap\n     }\n \n     fn db(&self) -> &'a RootDatabase {"}, {"sha": "47434f4af84b6e7ee8f62d8e0a726f0b677bb32c", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -139,11 +139,8 @@ impl<'db> MatchFinder<'db> {\n     pub fn at_first_file(db: &'db ide_db::RootDatabase) -> Result<MatchFinder<'db>, SsrError> {\n         use ide_db::base_db::SourceDatabaseExt;\n         use ide_db::symbol_index::SymbolsDatabase;\n-        if let Some(first_file_id) = db\n-            .local_roots()\n-            .iter()\n-            .next()\n-            .and_then(|root| db.source_root(root.clone()).iter().next())\n+        if let Some(first_file_id) =\n+            db.local_roots().iter().next().and_then(|root| db.source_root(*root).iter().next())\n         {\n             Ok(MatchFinder::in_context(\n                 db,"}, {"sha": "b3072fb9f43ecfecaee45fd7d5fecd30c134d403", "filename": "crates/ide_ssr/src/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fide_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fmatching.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -127,7 +127,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         restrict_range: &Option<FileRange>,\n         sema: &'sema Semantics<'db, ide_db::RootDatabase>,\n     ) -> Result<Match, MatchFailed> {\n-        let match_state = Matcher { sema, restrict_range: restrict_range.clone(), rule };\n+        let match_state = Matcher { sema, restrict_range: *restrict_range, rule };\n         // First pass at matching, where we check that node types and idents match.\n         match_state.attempt_match_node(&mut Phase::First, &rule.pattern.node, code)?;\n         match_state.validate_range(&sema.original_range(code))?;"}, {"sha": "ba814a2e1adac951447307e4b3b7a693c8ebe81c", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -165,7 +165,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                                 }\n                                 Separator::Puncts(puncts) => {\n                                     for it in puncts {\n-                                        parent.token_trees.push(tt::Leaf::Punct(it.clone()).into())\n+                                        parent.token_trees.push(tt::Leaf::Punct(*it).into())\n                                     }\n                                 }\n                             };\n@@ -174,8 +174,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                 }\n             }\n             Op::Subtree { tokens, delimiter } => {\n-                let mut subtree =\n-                    tt::Subtree { delimiter: delimiter.clone(), token_trees: Vec::new() };\n+                let mut subtree = tt::Subtree { delimiter: *delimiter, token_trees: Vec::new() };\n                 tokens.iter().for_each(|it| {\n                     collect_from_op(it, &mut subtree, seed);\n                 });"}, {"sha": "7b5b8ec16495f77aaa7d8905ef882a8b46160b99", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -262,7 +262,7 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Par\n                                 if puncts.len() == 3 {\n                                     return Err(ParseError::InvalidRepeat);\n                                 }\n-                                puncts.push(punct.clone())\n+                                puncts.push(*punct)\n                             }\n                             _ => return Err(ParseError::InvalidRepeat),\n                         }"}, {"sha": "76994de71d1a314c70b23737909b43292fa4ed99", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048dad8c2e86006e53b3a134279729efb28b9e32/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=048dad8c2e86006e53b3a134279729efb28b9e32", "patch": "@@ -161,7 +161,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         return Vec::new();\n     }\n \n-    let severity = diagnostic_severity(config, rd.level.clone(), rd.code.clone());\n+    let severity = diagnostic_severity(config, rd.level, rd.code.clone());\n \n     let mut source = String::from(\"rustc\");\n     let mut code = rd.code.as_ref().map(|c| c.code.clone());"}]}