{"sha": "0cfdc99c71f132f967cf968e5b2c9d20adf14b46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZmRjOTljNzFmMTMyZjk2N2NmOTY4ZTViMmM5ZDIwYWRmMTRiNDY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T04:28:32Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcore: use unboxed closures in the fields of `SkipWhile`", "tree": {"sha": "700fe8e9ddf75e3849133e936f8d23ae49292b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700fe8e9ddf75e3849133e936f8d23ae49292b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cfdc99c71f132f967cf968e5b2c9d20adf14b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfdc99c71f132f967cf968e5b2c9d20adf14b46", "html_url": "https://github.com/rust-lang/rust/commit/0cfdc99c71f132f967cf968e5b2c9d20adf14b46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cfdc99c71f132f967cf968e5b2c9d20adf14b46/comments", "author": null, "committer": null, "parents": [{"sha": "ca001e1bd0accdfe285c50918d1d48730d124999", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca001e1bd0accdfe285c50918d1d48730d124999", "html_url": "https://github.com/rust-lang/rust/commit/ca001e1bd0accdfe285c50918d1d48730d124999"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e1d944dcb2d09c6d60cdb1b1f1cf7d60be83b083", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cfdc99c71f132f967cf968e5b2c9d20adf14b46/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfdc99c71f132f967cf968e5b2c9d20adf14b46/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=0cfdc99c71f132f967cf968e5b2c9d20adf14b46", "patch": "@@ -264,7 +264,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn skip_while<'r>(self, predicate: |&A|: 'r -> bool) -> SkipWhile<'r, A, Self> {\n+    fn skip_while<P>(self, predicate: P) -> SkipWhile<A, Self, P> where P: FnMut(&A) -> bool {\n         SkipWhile{iter: self, flag: false, predicate: predicate}\n     }\n \n@@ -1645,14 +1645,14 @@ impl<'a, A, T: Iterator<A>> Peekable<A, T> {\n /// An iterator which rejects elements while `predicate` is true\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n-pub struct SkipWhile<'a, A, T> {\n-    iter: T,\n+pub struct SkipWhile<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n+    iter: I,\n     flag: bool,\n-    predicate: |&A|: 'a -> bool\n+    predicate: P,\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n+impl<A, I, P> Iterator<A> for SkipWhile<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         for x in self.iter {"}]}