{"sha": "70a6ae67090196d8b750809909d46fedb7754ff7", "node_id": "C_kwDOAAsO6NoAKDcwYTZhZTY3MDkwMTk2ZDhiNzUwODA5OTA5ZDQ2ZmVkYjc3NTRmZjc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T01:13:53Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T01:13:53Z"}, "message": "rustdoc: use `collect()` instead of repeatedly pushing to bounds", "tree": {"sha": "be81de7141fc7fe51681b6f048f72566bb4b01b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be81de7141fc7fe51681b6f048f72566bb4b01b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a6ae67090196d8b750809909d46fedb7754ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a6ae67090196d8b750809909d46fedb7754ff7", "html_url": "https://github.com/rust-lang/rust/commit/70a6ae67090196d8b750809909d46fedb7754ff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a6ae67090196d8b750809909d46fedb7754ff7/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba51fa05b2e9406e753306c4dafe6bd34988310", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba51fa05b2e9406e753306c4dafe6bd34988310", "html_url": "https://github.com/rust-lang/rust/commit/7ba51fa05b2e9406e753306c4dafe6bd34988310"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5e6f3070d0bb2359514501c16743122383401ac6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70a6ae67090196d8b750809909d46fedb7754ff7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a6ae67090196d8b750809909d46fedb7754ff7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=70a6ae67090196d8b750809909d46fedb7754ff7", "patch": "@@ -1617,9 +1617,10 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             // HACK: pick the first `did` as the `did` of the trait object. Someone\n             // might want to implement \"native\" support for marker-trait-only\n             // trait objects.\n-            let mut dids = obj.principal_def_id().into_iter().chain(obj.auto_traits());\n-            let did = dids\n-                .next()\n+            let mut dids = obj.auto_traits();\n+            let did = obj\n+                .principal_def_id()\n+                .or_else(|| dids.next())\n                 .unwrap_or_else(|| panic!(\"found trait object `{:?}` with no traits?\", this));\n             let substs = match obj.principal() {\n                 Some(principal) => principal.skip_binder().substs,\n@@ -1630,15 +1631,14 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n             let lifetime = clean_middle_region(*reg);\n-            let mut bounds = vec![];\n-\n-            for did in dids {\n-                let empty = cx.tcx.intern_substs(&[]);\n-                let path = external_path(cx, did, false, vec![], empty);\n-                inline::record_extern_fqn(cx, did, ItemType::Trait);\n-                let bound = PolyTrait { trait_: path, generic_params: Vec::new() };\n-                bounds.push(bound);\n-            }\n+            let mut bounds = dids\n+                .map(|did| {\n+                    let empty = cx.tcx.intern_substs(&[]);\n+                    let path = external_path(cx, did, false, vec![], empty);\n+                    inline::record_extern_fqn(cx, did, ItemType::Trait);\n+                    PolyTrait { trait_: path, generic_params: Vec::new() }\n+                })\n+                .collect::<Vec<_>>();\n \n             let bindings = obj\n                 .projection_bounds()"}]}