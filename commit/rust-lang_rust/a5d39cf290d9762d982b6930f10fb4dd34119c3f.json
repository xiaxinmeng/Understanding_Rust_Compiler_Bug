{"sha": "a5d39cf290d9762d982b6930f10fb4dd34119c3f", "node_id": "C_kwDOAAsO6NoAKGE1ZDM5Y2YyOTBkOTc2MmQ5ODJiNjkzMGYxMGZiNGRkMzQxMTljM2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T01:02:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T01:03:04Z"}, "message": "review comment: Deduplicate dyn ty_and_layout_field code", "tree": {"sha": "54c11fb678022229506bb16f6080999f22b39c58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c11fb678022229506bb16f6080999f22b39c58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d39cf290d9762d982b6930f10fb4dd34119c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d39cf290d9762d982b6930f10fb4dd34119c3f", "html_url": "https://github.com/rust-lang/rust/commit/a5d39cf290d9762d982b6930f10fb4dd34119c3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d39cf290d9762d982b6930f10fb4dd34119c3f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "html_url": "https://github.com/rust-lang/rust/commit/2011316e596c19a8b5ae8cc00102667c2cdb1ef7"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "00f53afd6632854f824eb5df0d8256d61407ba18", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a5d39cf290d9762d982b6930f10fb4dd34119c3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d39cf290d9762d982b6930f10fb4dd34119c3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=a5d39cf290d9762d982b6930f10fb4dd34119c3f", "patch": "@@ -670,6 +670,23 @@ where\n                         });\n                     }\n \n+                    let mk_dyn_vtable = || {\n+                        tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.mk_array(tcx.types.usize, 3))\n+                        /* FIXME: use actual fn pointers\n+                        Warning: naively computing the number of entries in the\n+                        vtable by counting the methods on the trait + methods on\n+                        all parent traits does not work, because some methods can\n+                        be not object safe and thus excluded from the vtable.\n+                        Increase this counter if you tried to implement this but\n+                        failed to do it without duplicating a lot of code from\n+                        other places in the compiler: 2\n+                        tcx.mk_tup(&[\n+                            tcx.mk_array(tcx.types.usize, 3),\n+                            tcx.mk_array(Option<fn()>),\n+                        ])\n+                        */\n+                    };\n+\n                     let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n                         let metadata = tcx.normalize_erasing_regions(\n                             cx.param_env(),\n@@ -684,48 +701,14 @@ where\n                             && Some(def.did()) == tcx.lang_items().dyn_metadata()\n                             && substs.type_at(0).is_trait()\n                         {\n-                            tcx.mk_imm_ref(\n-                                tcx.lifetimes.re_static,\n-                                tcx.mk_array(tcx.types.usize, 3),\n-                            )\n-                            /* FIXME: use actual fn pointers\n-                            Warning: naively computing the number of entries in the\n-                            vtable by counting the methods on the trait + methods on\n-                            all parent traits does not work, because some methods can\n-                            be not object safe and thus excluded from the vtable.\n-                            Increase this counter if you tried to implement this but\n-                            failed to do it without duplicating a lot of code from\n-                            other places in the compiler: 2\n-                            tcx.mk_tup(&[\n-                                tcx.mk_array(tcx.types.usize, 3),\n-                                tcx.mk_array(Option<fn()>),\n-                            ])\n-                            */\n+                            mk_dyn_vtable()\n                         } else {\n                             metadata\n                         }\n                     } else {\n                         match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n                             ty::Slice(_) | ty::Str => tcx.types.usize,\n-                            ty::Dynamic(_, _, ty::Dyn) => {\n-                                tcx.mk_imm_ref(\n-                                    tcx.lifetimes.re_static,\n-                                    tcx.mk_array(tcx.types.usize, 3),\n-                                )\n-                                /* FIXME: use actual fn pointers\n-                                Warning: naively computing the number of entries in the\n-                                vtable by counting the methods on the trait + methods on\n-                                all parent traits does not work, because some methods can\n-                                be not object safe and thus excluded from the vtable.\n-                                Increase this counter if you tried to implement this but\n-                                failed to do it without duplicating a lot of code from\n-                                other places in the compiler: 2\n-                                tcx.mk_tup(&[\n-                                    tcx.mk_array(tcx.types.usize, 3),\n-                                    tcx.mk_array(Option<fn()>),\n-                                ])\n-                                */\n-                            }\n+                            ty::Dynamic(_, _, ty::Dyn) => mk_dyn_vtable(),\n                             _ => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n                         }\n                     };"}]}