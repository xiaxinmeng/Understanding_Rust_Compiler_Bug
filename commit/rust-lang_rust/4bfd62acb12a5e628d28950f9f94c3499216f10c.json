{"sha": "4bfd62acb12a5e628d28950f9f94c3499216f10c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZmQ2MmFjYjEyYTVlNjI4ZDI4OTUwZjlmOTRjMzQ5OTIxNmYxMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T07:52:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T07:52:42Z"}, "message": "Auto merge of #71323 - nnethercote:bitcode-in-rlib, r=alexcrichton\n\nAdd `-Cbitcode-in-rlib`.\n\nThis is a cut-down version of #70458 that gets the compile-time wins.\n\nr? @alexcrichton", "tree": {"sha": "b571cfb6cc6595d8ae1fa8fc53a56323457a95b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b571cfb6cc6595d8ae1fa8fc53a56323457a95b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bfd62acb12a5e628d28950f9f94c3499216f10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfd62acb12a5e628d28950f9f94c3499216f10c", "html_url": "https://github.com/rust-lang/rust/commit/4bfd62acb12a5e628d28950f9f94c3499216f10c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bfd62acb12a5e628d28950f9f94c3499216f10c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc5b602eee35d70e8e6e506a7ea07b6c7e0197d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc5b602eee35d70e8e6e506a7ea07b6c7e0197d", "html_url": "https://github.com/rust-lang/rust/commit/2dc5b602eee35d70e8e6e506a7ea07b6c7e0197d"}, {"sha": "a105c5c2c01ea66f59bc6f3f9ade65016af56160", "url": "https://api.github.com/repos/rust-lang/rust/commits/a105c5c2c01ea66f59bc6f3f9ade65016af56160", "html_url": "https://github.com/rust-lang/rust/commit/a105c5c2c01ea66f59bc6f3f9ade65016af56160"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "586a362b5e3febd2f63fa3bbf73cf8f7b9f42580", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -45,7 +45,7 @@ impl Step for Std {\n         let compiler = builder.compiler(0, builder.config.build);\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n-        std_cargo(builder, target, &mut cargo);\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo("}, {"sha": "06ab0a9c310af7ff40dca260489d7c911388819e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -86,7 +86,7 @@ impl Step for Std {\n         target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n-        std_cargo(builder, target, &mut cargo);\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\n             \"Building stage{} std artifacts ({} -> {})\",\n@@ -164,7 +164,7 @@ fn copy_third_party_objects(\n \n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n-pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, cargo: &mut Cargo) {\n+pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, cargo: &mut Cargo) {\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n@@ -231,6 +231,18 @@ pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, cargo: &mut Ca\n             }\n         }\n     }\n+\n+    // By default, rustc uses `-Cbitcode-in-rlib=yes`, and Cargo overrides that\n+    // with `-Cbitcode-in-rlib=no` for non-LTO builds. However, libstd must be\n+    // built with bitcode so that the produced rlibs can be used for both LTO\n+    // builds (which use bitcode) and non-LTO builds (which use object code).\n+    // So we override the override here!\n+    //\n+    // But we don't bother for the stage 0 compiler because it's never used\n+    // with LTO.\n+    if stage >= 1 {\n+        cargo.rustflag(\"-Cbitcode-in-rlib=yes\");\n+    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "fc217a707db9434b7f14457849c91944c45c01f1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -394,7 +394,7 @@ impl Step for Std {\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n-            compile::std_cargo(builder, target, &mut cargo);\n+            compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n             // build by the rustc step later if enabled."}, {"sha": "125563b7b60862f74391dd360bd8553d652e677f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -1725,7 +1725,7 @@ impl Step for Crate {\n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n             Mode::Std => {\n-                compile::std_cargo(builder, target, &mut cargo);\n+                compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n             }\n             Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });"}, {"sha": "eb7e34ad9ed2e85fb43bfece0d30c937f3ed8cff", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -387,6 +387,26 @@ It takes one of the following values:\n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n \n+## bitcode-in-rlib\n+\n+This flag controls whether or not the compiler puts compressed LLVM bitcode\n+into generated rlibs. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n+* `n`, `no`, or `off`: omit bitcode from rlibs.\n+\n+LLVM bitcode is only needed when link-time optimization (LTO) is being\n+performed, but it is enabled by default for backwards compatibility reasons.\n+\n+The use of `-C bitcode-in-rlib=no` can significantly improve compile times and\n+reduce generated file sizes. For these reasons, Cargo uses `-C\n+bitcode-in-rlib=no` whenever possible. Likewise, if you are building directly\n+with `rustc` we recommend using `-C bitcode-in-rlib=no` whenever you are not\n+using LTO.\n+\n+If combined with `-C lto`, `-C bitcode-in-rlib=no` will cause `rustc` to abort\n+at start-up, because the combination is invalid.\n+\n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n [profile-guided optimization]: ../profile-guided-optimization.md"}, {"sha": "db60760e4596f7c0f4af56293ad60a777dee9cbd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -378,7 +378,8 @@ pub struct CompiledModules {\n }\n \n fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n-    sess.crate_types.borrow().contains(&config::CrateType::Rlib)\n+    sess.opts.cg.bitcode_in_rlib\n+        && sess.crate_types.borrow().contains(&config::CrateType::Rlib)\n         && sess.opts.output_types.contains_key(&OutputType::Exe)\n }\n "}, {"sha": "02fad11d9b879b09283dbf62e786c5c281a4e343", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -505,6 +505,10 @@ fn test_codegen_options_tracking_hash() {\n     opts = reference.clone();\n     opts.cg.linker_plugin_lto = LinkerPluginLto::LinkerPluginAuto;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.cg.bitcode_in_rlib = false;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n }\n \n #[test]"}, {"sha": "12822cea418d7b9bdd83558b391d6b6d0789b0a4", "filename": "src/librustc_middle/mir/cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_middle%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_middle%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fcache.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -60,7 +60,6 @@ impl Cache {\n     }\n \n     /// This will recompute the predecessors cache if it is not available\n-    // njn: typedef?\n     fn predecessors(\n         &mut self,\n         body: &Body<'_>,"}, {"sha": "f6d7e091e00d6b6c5a74825152be8a7275ab9967", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -1685,6 +1685,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n+    if !cg.bitcode_in_rlib {\n+        match cg.lto {\n+            LtoCli::No | LtoCli::Unspecified => {}\n+            LtoCli::Yes | LtoCli::NoParam | LtoCli::Thin | LtoCli::Fat => early_error(\n+                error_format,\n+                \"options `-C bitcode-in-rlib=no` and `-C lto` are incompatible\",\n+            ),\n+        }\n+    }\n+\n     let prints = collect_print_requests(&mut cg, &mut debugging_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "62eb3fca595314a87fe635a05e230cadec737077", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -703,6 +703,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"compile the program with profiling instrumentation\"),\n     profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.profdata` file for profile-guided optimization\"),\n+    bitcode_in_rlib: bool = (true, parse_bool, [TRACKED],\n+        \"emit bitcode in rlibs (default: yes)\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,"}, {"sha": "1dd11ce3d24676fcb3712b29c480863bae56972d", "filename": "src/test/ui/lto-and-no-bitcode-in-rlib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.rs?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: -C lto -C bitcode-in-rlib=no\n+\n+fn main() {}"}, {"sha": "2221fc1645d61b7797a924c1b09a822670c11487", "filename": "src/test/ui/lto-and-no-bitcode-in-rlib.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bfd62acb12a5e628d28950f9f94c3499216f10c/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-and-no-bitcode-in-rlib.stderr?ref=4bfd62acb12a5e628d28950f9f94c3499216f10c", "patch": "@@ -0,0 +1,2 @@\n+error: options `-C bitcode-in-rlib=no` and `-C lto` are incompatible\n+"}]}