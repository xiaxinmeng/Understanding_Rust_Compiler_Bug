{"sha": "214d7650c91e777c445a8ef0733c8553e34b2658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNGQ3NjUwYzkxZTc3N2M0NDVhOGVmMDczM2M4NTUzZTM0YjI2NTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T13:47:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "introduce `prove_predicates` type op", "tree": {"sha": "3e838837fd9de8d141be3816ce7dfe9b897f9fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e838837fd9de8d141be3816ce7dfe9b897f9fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214d7650c91e777c445a8ef0733c8553e34b2658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214d7650c91e777c445a8ef0733c8553e34b2658", "html_url": "https://github.com/rust-lang/rust/commit/214d7650c91e777c445a8ef0733c8553e34b2658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214d7650c91e777c445a8ef0733c8553e34b2658/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "html_url": "https://github.com/rust-lang/rust/commit/7c62461c39d5cf8899d419be77a0ec48dd9f14bc"}], "stats": {"total": 96, "additions": 65, "deletions": 31}, "files": [{"sha": "5e9b3ad5054c323f5aef64a4573be4826d639a9f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/214d7650c91e777c445a8ef0733c8553e34b2658/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214d7650c91e777c445a8ef0733c8553e34b2658/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=214d7650c91e777c445a8ef0733c8553e34b2658", "patch": "@@ -28,7 +28,7 @@ use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::traits::query::NoSolution;\n-use rustc::traits::{self, ObligationCause, Normalized, TraitEngine};\n+use rustc::traits::{ObligationCause, Normalized, TraitEngine};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n@@ -833,7 +833,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.fully_perform_op(\n             locations,\n             || format!(\"eq_types({:?} = {:?})\", a, b),\n-            type_op::Eq::new(b, a)\n+            type_op::Eq::new(b, a),\n         )\n     }\n \n@@ -1590,27 +1590,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         );\n     }\n \n-    fn prove_predicates<T>(&mut self, predicates: T, location: Location)\n-    where\n-        T: IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n-    {\n-        let cause = ObligationCause::dummy();\n-        let obligations: Vec<_> = predicates\n-            .into_iter()\n-            .map(|p| traits::Obligation::new(cause.clone(), self.param_env, p))\n-            .collect();\n-\n-        // Micro-optimization\n-        if obligations.is_empty() {\n-            return;\n-        }\n-\n+    fn prove_predicates(\n+        &mut self,\n+        predicates: impl IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n+        location: Location,\n+    ) {\n         // This intermediate vector is mildly unfortunate, in that we\n         // sometimes create it even when logging is disabled, but only\n         // if debug-info is enabled, and I doubt it is actually\n         // expensive. -nmatsakis\n         let predicates_vec: Vec<_> = if cfg!(debug_assertions) {\n-            obligations.iter().map(|o| o.predicate).collect()\n+            predicates.clone().into_iter().collect()\n         } else {\n             Vec::new()\n         };\n@@ -1620,15 +1610,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             predicates_vec, location,\n         );\n \n+        let param_env = self.param_env;\n         self.fully_perform_op(\n             location.at_self(),\n             || format!(\"prove_predicates({:?})\", predicates_vec),\n-            CustomTypeOp::new(|_this| {\n-                Ok(InferOk {\n-                    value: (),\n-                    obligations,\n-                })\n-            }),\n+            type_op::ProvePredicates::new(param_env, predicates),\n         ).unwrap()\n     }\n "}, {"sha": "0b35f3501fc7988bc2ad8410b9e91fcdb7efc2ab", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/214d7650c91e777c445a8ef0733c8553e34b2658/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214d7650c91e777c445a8ef0733c8553e34b2658/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=214d7650c91e777c445a8ef0733c8553e34b2658", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use borrow_check::nll::type_check::TypeChecker;\n-use rustc::infer::InferResult;\n-use rustc::traits::ObligationCause;\n-use rustc::ty::Ty;\n+use rustc::infer::{InferOk, InferResult};\n+use rustc::traits::{Obligation, ObligationCause, PredicateObligation};\n+use rustc::ty::{ParamEnv, Predicate, Ty};\n \n pub(super) trait TypeOp<'gcx, 'tcx> {\n     type Output;\n@@ -75,8 +75,12 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n         }\n     }\n \n-    fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n-        type_checker.infcx\n+    fn perform(\n+        self,\n+        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n+    ) -> InferResult<'tcx, Self::Output> {\n+        type_checker\n+            .infcx\n             .at(&ObligationCause::dummy(), type_checker.param_env)\n             .sup(self.sup, self.sub)\n     }\n@@ -104,9 +108,53 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n         }\n     }\n \n-    fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n-        type_checker.infcx\n+    fn perform(\n+        self,\n+        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n+    ) -> InferResult<'tcx, Self::Output> {\n+        type_checker\n+            .infcx\n             .at(&ObligationCause::dummy(), type_checker.param_env)\n             .eq(self.a, self.b)\n     }\n }\n+\n+pub(super) struct ProvePredicates<'tcx> {\n+    obligations: Vec<PredicateObligation<'tcx>>,\n+}\n+\n+impl<'tcx> ProvePredicates<'tcx> {\n+    pub(super) fn new(\n+        param_env: ParamEnv<'tcx>,\n+        predicates: impl IntoIterator<Item = Predicate<'tcx>>,\n+    ) -> Self {\n+        ProvePredicates {\n+            obligations: predicates\n+                .into_iter()\n+                .map(|p| Obligation::new(ObligationCause::dummy(), param_env, p))\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n+    type Output = ();\n+\n+    fn trivial_noop(&self) -> Option<Self::Output> {\n+        if self.obligations.is_empty() {\n+            Some(())\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn perform(\n+        self,\n+        _type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n+    ) -> InferResult<'tcx, Self::Output> {\n+        Ok(InferOk {\n+            value: (),\n+            obligations: self.obligations,\n+        })\n+    }\n+}"}]}