{"sha": "d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "node_id": "C_kwDOAAsO6NoAKGQ4YmFjZjA3OGEwYzBkMWRkM2YxNWU2NTU0MzM4ODA1ZjJkNzI1NmI", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T22:33:11Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T22:33:11Z"}, "message": "All five `has_repr_attr` agree + are correct", "tree": {"sha": "b5fa83160055ce3b139a93027890eb61dc2dd547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5fa83160055ce3b139a93027890eb61dc2dd547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "html_url": "https://github.com/rust-lang/rust/commit/d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8bacf078a0c0d1dd3f15e6554338805f2d7256b/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "html_url": "https://github.com/rust-lang/rust/commit/3a41f226c5c89806f23ef67502ea29bedf7d9ce8"}], "stats": {"total": 115, "additions": 65, "deletions": 50}, "files": [{"sha": "10088ea55a902ea286fc434cf2859f351c88763d", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 65, "deletions": 50, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d8bacf078a0c0d1dd3f15e6554338805f2d7256b/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bacf078a0c0d1dd3f15e6554338805f2d7256b/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs?ref=d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "patch": "@@ -1,11 +1,15 @@\n-use clippy_utils::{diagnostics::{span_lint_and_help, span_lint_and_then, span_lint_and_sugg}, source::{indent_of, snippet}};\n+use clippy_utils::{\n+    diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then},\n+    source::{indent_of, snippet},\n+};\n use rustc_ast::Attribute;\n use rustc_errors::Applicability;\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{HirId, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::dep_graph::DepContext;\n-use rustc_middle::ty::Const;\n+use rustc_middle::ty::{self as ty_mod, Const, ReprFlags};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -38,48 +42,19 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutRepr => [TRAILING_ZERO_SIZED_ARR\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutRepr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if is_struct_with_trailing_zero_sized_array(cx, item) {\n-            // NOTE: This is to include attributes on the definition when we print the lint. If the convention\n-            // is to not do that with struct definitions (I'm not sure), then this isn't necessary. (note: if\n-            // you don't get rid of this, change `has_repr_attr` to `includes_repr_attr`).\n-            let attrs = cx.tcx.get_attrs(item.def_id.to_def_id());\n-            let first_attr = attrs.iter().min_by_key(|attr| attr.span.lo());\n-            let lint_span = if let Some(first_attr) = first_attr {\n-                first_attr.span.to(item.span)\n-            } else {\n-                item.span\n-            };\n-\n-            if !has_repr_attr(cx, attrs) {\n-                let suggestion_span = item.span.shrink_to_lo();\n-                let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n-\n-                span_lint_and_sugg(cx, TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR, item.span, \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\", \"consider adding `#[repr(C)]` or another `repr` attribute\", format!(\"#[repr(C)]\\n{}\", snippet(cx, item.span.shrink_to_lo().to(item.ident.span), \"..\")), Applicability::MaybeIncorrect);\n-\n-                // span_lint_and_then(\n-                //     cx,\n-                //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n-                //     item.span,\n-                //     \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n-                //     |diag| {\n-                //         let sugg = format!(\"#[repr(C)]\\n{}\", indent);\n-                //         let sugg2 = format!(\"#[repr(C)]\\n{}\", item.ident.span);\n-                //         diag.span_suggestion(item.span,\n-                //                               \"consider adding `#[repr(C)]` or another `repr` attribute\",\n-                //                               sugg2,\n-                //                               Applicability::MaybeIncorrect);\n-                //     }\n-                // );\n-              \n-                // span_lint_and_help(\n-                //     cx,\n-                //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n-                //     lint_span,\n-                //     \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n-                //     None,\n-                //     \"consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\",\n-                // );\n-            }\n+        dbg!(item.ident);\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item) {\n+            eprintln!(\"consider yourself linted \ud83d\ude0e\");\n+            // span_lint_and_help(\n+            //     cx,\n+            //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n+            //     item.span,\n+            //     \"trailing zero-sized array in a struct which is not marked with a `repr`\n+            //     attribute\",\n+            //     None,\n+            //     \"consider annotating the struct definition with `#[repr(C)]` or another\n+            //     `repr` attribute\",\n+            // );\n         }\n     }\n }\n@@ -108,12 +83,52 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n     }\n }\n \n-fn has_repr_attr(cx: &LateContext<'tcx>, attrs: &[Attribute]) -> bool {\n+fn has_repr_attr(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n     // NOTE: there's at least four other ways to do this but I liked this one the best. (All five agreed\n     // on all testcases (when i wrote this comment. I added a few since then).) Happy to use another;\n     // they're in the commit history if you want to look (or I can go find them).\n-    let sess = cx.tcx.sess(); // are captured values in closures evaluated once or every time?\n-    attrs\n-        .iter()\n-        .any(|attr| !rustc_attr::find_repr_attrs(sess, attr).is_empty())\n+\n+    let attrs1 = cx.tcx.hir().attrs(item.hir_id());\n+    let attrs2 = cx.tcx.get_attrs(item.def_id.to_def_id());\n+\n+    let res11 = {\n+        let sess = cx.tcx.sess(); // are captured values in closures evaluated once or every time?\n+        attrs1\n+            .iter()\n+            .any(|attr| !rustc_attr::find_repr_attrs(sess, attr).is_empty())\n+    };\n+    let res12 = { attrs1.iter().any(|attr| attr.has_name(sym::repr)) };\n+\n+    let res21 = {\n+        let sess = cx.tcx.sess(); // are captured values in closures evaluated once or every time?\n+        attrs2\n+            .iter()\n+            .any(|attr| !rustc_attr::find_repr_attrs(sess, attr).is_empty())\n+    };\n+    let res22 = { attrs2.iter().any(|attr| attr.has_name(sym::repr)) };\n+\n+    let res_adt = {\n+        let ty = cx.tcx.type_of(item.def_id.to_def_id());\n+        if let ty_mod::Adt(adt, _) = ty.kind() {\n+            if adt.is_struct() {\n+                let repr = adt.repr;\n+                let repr_attr = ReprFlags::IS_C | ReprFlags::IS_TRANSPARENT | ReprFlags::IS_SIMD | ReprFlags::IS_LINEAR;\n+                repr.int.is_some() || repr.align.is_some() || repr.pack.is_some() || repr.flags.intersects(repr_attr)\n+            } else {\n+                false\n+            }\n+        } else {\n+            false\n+        }\n+    };\n+\n+    let all_same = (res11 && res12 && res21 && res22 && res_adt) || (!res11 && !res12 && !res21 && !res22 && !res_adt);\n+\n+    \n+    dbg!((\n+        (res11, res12, res21, res22, res_adt),\n+        all_same,\n+    ));\n+\n+    res12\n }"}]}