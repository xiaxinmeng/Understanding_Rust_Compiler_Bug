{"sha": "550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "node_id": "C_kwDOAAsO6NoAKDU1MGJkMDk0NWZkNmI1MjI4MjA2YWFmNWU4ZmJmNjEzYTc3YWIxNmQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-19T12:29:12Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-19T12:30:39Z"}, "message": "Simplify rpitit handling on lower_fn_decl", "tree": {"sha": "5b5e6135fd5e637fd7a43bf584f1b07cfcb520dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5e6135fd5e637fd7a43bf584f1b07cfcb520dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMoYPEACgkQgTGiTgx5\n76+EBw/9GBzFC3hjY/MjbC39zq0vJhSbJOiQlGaorI7aZyya8bBI2nAj9uYLq77w\nX6idpvSHEgcp1aAL+1E8dveqgpPo1oLlWorl1Ctb1/MEPCcvD3qyL50gO20WN1T0\nOuJTE5KJKf7iRzswoyzssIQBca2Pui0jC9l2IF9/S4JgW5lkxvLFEb8MK0Nt+C46\nXwZ6n+t7JaJHqMMk4rpNCB1hQ2lbSOM+1EKjXRS6eizOYxQkMAEshFrcRL/xUnVn\nHnclbqS4AtpakgWinHW6QcUaGMF7R1cy9GYWahZuQWLgRudVZAsKHzIeNRsTOYmg\nieIG0yw/ZRXC0Bch1MwKUWin8+qZyqs548qhpCYXRp4y7bXFWk0reM9pFvnzs79B\nQqzM/e9tbSKhsUkhpa518Z8vvnbBAj10JPiqA/Ix+L7A/VC4BoXiDJ05mJSECZ7Q\nB/lrkklXCh7X8Kii66Sygp4F1R507FdnAmeEPcJXMVXPY131xHES/sX802AA1itl\nFx4gC285RL84lFyO7gtG0840AgdCGSVWeih1BKbq0TQwSqaNfy4SIPw3iSIIE0Av\nd1LAonYF/BozHNb166cZXTmucMTqM3zQTqCRzwmy0Ab+ECC7LcD+8AMyPJS5VzLx\nTv+n91kKAWRY9nbh0Qk2UVH5dzlaoajbSiLd4juPcymY52Ji1yw=\n=QuHG\n-----END PGP SIGNATURE-----", "payload": "tree 5b5e6135fd5e637fd7a43bf584f1b07cfcb520dd\nparent 503e19d01e941b88bf6d5b28e9108d046abcfa2d\nauthor Santiago Pastorino <spastorino@gmail.com> 1663590552 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1663590639 -0300\n\nSimplify rpitit handling on lower_fn_decl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "html_url": "https://github.com/rust-lang/rust/commit/550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/550bd0945fd6b5228206aaf5e8fbf613a77ab16d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503e19d01e941b88bf6d5b28e9108d046abcfa2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/503e19d01e941b88bf6d5b28e9108d046abcfa2d", "html_url": "https://github.com/rust-lang/rust/commit/503e19d01e941b88bf6d5b28e9108d046abcfa2d"}], "stats": {"total": 60, "additions": 15, "deletions": 45}, "files": [{"sha": "e9c05eb5f455fa79f0a454078e63a19e71235d25", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/550bd0945fd6b5228206aaf5e8fbf613a77ab16d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550bd0945fd6b5228206aaf5e8fbf613a77ab16d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "patch": "@@ -324,16 +324,10 @@ enum FnDeclKind {\n }\n \n impl FnDeclKind {\n-    fn impl_trait_return_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+    fn impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             FnDeclKind::Fn | FnDeclKind::Inherent => true,\n             FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,\n-            _ => false,\n-        }\n-    }\n-\n-    fn impl_trait_in_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n-        match self {\n             FnDeclKind::Trait if tcx.features().return_position_impl_trait_in_trait => true,\n             _ => false,\n         }\n@@ -1698,9 +1692,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }));\n \n         let output = if let Some((ret_id, span)) = make_ret_async {\n-            match kind {\n-                FnDeclKind::Trait => {\n-                    if !kind.impl_trait_in_trait_allowed(self.tcx) {\n+            if !kind.impl_trait_allowed(self.tcx) {\n+                match kind {\n+                    FnDeclKind::Trait | FnDeclKind::Impl => {\n                         self.tcx\n                             .sess\n                             .create_feature_err(\n@@ -1709,51 +1703,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             )\n                             .emit();\n                     }\n-                    self.lower_async_fn_ret_ty(\n-                        &decl.output,\n-                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n-                        ret_id,\n-                        true,\n-                    )\n-                }\n-                _ => {\n-                    if !kind.impl_trait_return_allowed(self.tcx) {\n-                        if kind == FnDeclKind::Impl {\n-                            self.tcx\n-                                .sess\n-                                .create_feature_err(\n-                                    TraitFnAsync { fn_span, span },\n-                                    sym::return_position_impl_trait_in_trait,\n-                                )\n-                                .emit();\n-                        } else {\n-                            self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n-                        }\n+                    _ => {\n+                        self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n                     }\n-                    self.lower_async_fn_ret_ty(\n-                        &decl.output,\n-                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n-                        ret_id,\n-                        false,\n-                    )\n                 }\n             }\n+\n+            self.lower_async_fn_ret_ty(\n+                &decl.output,\n+                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                ret_id,\n+                matches!(kind, FnDeclKind::Trait),\n+            )\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n                     let mut context = match fn_node_id {\n-                        Some(fn_node_id) if kind.impl_trait_return_allowed(self.tcx) => {\n-                            let fn_def_id = self.local_def_id(fn_node_id);\n-                            ImplTraitContext::ReturnPositionOpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                                in_trait: false,\n-                            }\n-                        }\n-                        Some(fn_node_id) if kind.impl_trait_in_trait_allowed(self.tcx) => {\n+                        Some(fn_node_id) if kind.impl_trait_allowed(self.tcx) => {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                                in_trait: true,\n+                                in_trait: matches!(kind, FnDeclKind::Trait),\n                             }\n                         }\n                         _ => ImplTraitContext::Disallowed(match kind {"}]}