{"sha": "6c883840e68860b834fecfa6df337241af3c2a67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjODgzODQwZTY4ODYwYjgzNGZlY2ZhNmRmMzM3MjQxYWYzYzJhNjc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-05-01T14:46:56Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-03T15:52:55Z"}, "message": "stop dropping impls from cause backtraces", "tree": {"sha": "761c289e1cc4839fada5535b56106fdcc0007bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/761c289e1cc4839fada5535b56106fdcc0007bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c883840e68860b834fecfa6df337241af3c2a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c883840e68860b834fecfa6df337241af3c2a67", "html_url": "https://github.com/rust-lang/rust/commit/6c883840e68860b834fecfa6df337241af3c2a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c883840e68860b834fecfa6df337241af3c2a67/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62db786fc82cff397bbb031cfb03fab34b5043a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/62db786fc82cff397bbb031cfb03fab34b5043a5", "html_url": "https://github.com/rust-lang/rust/commit/62db786fc82cff397bbb031cfb03fab34b5043a5"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "138ca7a0f350a4a857f085a1f72c186229250846", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6c883840e68860b834fecfa6df337241af3c2a67/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c883840e68860b834fecfa6df337241af3c2a67/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=6c883840e68860b834fecfa6df337241af3c2a67", "patch": "@@ -1823,20 +1823,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn collect_predicates_for_types(&mut self,\n-                                    obligation: &TraitObligation<'tcx>,\n+                                    cause: ObligationCause<'tcx>,\n+                                    recursion_depth: usize,\n                                     trait_def_id: DefId,\n                                     types: ty::Binder<Vec<Ty<'tcx>>>)\n                                     -> Vec<PredicateObligation<'tcx>>\n     {\n-        let derived_cause = match self.tcx().lang_items.to_builtin_kind(trait_def_id) {\n-            Some(_) => {\n-                self.derived_cause(obligation, BuiltinDerivedObligation)\n-            },\n-            None => {\n-                self.derived_cause(obligation, ImplDerivedObligation)\n-            }\n-        };\n-\n         // Because the types were potentially derived from\n         // higher-ranked obligations they may reference late-bound\n         // regions. For example, `for<'a> Foo<&'a int> : Copy` would\n@@ -1859,14 +1851,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     self.infcx().skolemize_late_bound_regions(&ty, snapshot);\n                 let Normalized { value: normalized_ty, mut obligations } =\n                     project::normalize_with_depth(self,\n-                                                  derived_cause.clone(),\n-                                                  obligation.recursion_depth + 1,\n+                                                  cause.clone(),\n+                                                  recursion_depth,\n                                                   &skol_ty);\n                 let skol_obligation =\n                     util::predicate_for_trait_def(self.tcx(),\n-                                                  derived_cause.clone(),\n+                                                  cause.clone(),\n                                                   trait_def_id,\n-                                                  obligation.recursion_depth + 1,\n+                                                  recursion_depth,\n                                                   normalized_ty,\n                                                   vec![]);\n                 obligations.push(skol_obligation);\n@@ -2013,7 +2005,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                           obligation)\n             };\n \n-            self.collect_predicates_for_types(obligation, trait_def, nested)\n+            let cause = self.derived_cause(obligation, BuiltinDerivedObligation);\n+            self.collect_predicates_for_types(cause,\n+                                              obligation.recursion_depth+1,\n+                                              trait_def,\n+                                              nested)\n         } else {\n             vec![]\n         };\n@@ -2087,17 +2083,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                            nested: ty::Binder<Vec<Ty<'tcx>>>)\n                            -> VtableDefaultImplData<PredicateObligation<'tcx>>\n     {\n-        debug!(\"vtable_default_impl_data: nested={:?}\", nested);\n+        debug!(\"vtable_default_impl: nested={:?}\", nested);\n \n-        let mut obligations = self.collect_predicates_for_types(obligation,\n-                                                                trait_def_id,\n-                                                                nested);\n+        let cause = self.derived_cause(obligation, BuiltinDerivedObligation);\n+        let mut obligations = self.collect_predicates_for_types(\n+            cause,\n+            obligation.recursion_depth+1,\n+            trait_def_id,\n+            nested);\n \n         let trait_obligations = self.infcx.in_snapshot(|snapshot| {\n             let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n             let (trait_ref, skol_map) =\n                 self.infcx().skolemize_late_bound_regions(&poly_trait_ref, snapshot);\n-            self.impl_or_trait_obligations(obligation.cause.clone(),\n+            let cause = self.derived_cause(obligation, ImplDerivedObligation);\n+            self.impl_or_trait_obligations(cause,\n                                            obligation.recursion_depth + 1,\n                                            trait_def_id,\n                                            &trait_ref.substs,\n@@ -2107,7 +2107,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         obligations.extend(trait_obligations);\n \n-        debug!(\"vtable_default_impl_data: obligations={:?}\", obligations);\n+        debug!(\"vtable_default_impl: obligations={:?}\", obligations);\n \n         VtableDefaultImplData {\n             trait_def_id: trait_def_id,\n@@ -2131,8 +2131,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.rematch_impl(impl_def_id, obligation,\n                                   snapshot);\n             debug!(\"confirm_impl_candidate substs={:?}\", substs);\n-            self.vtable_impl(impl_def_id, substs, obligation.cause.clone(),\n-                             obligation.recursion_depth + 1, skol_map, snapshot)\n+            let cause = self.derived_cause(obligation, ImplDerivedObligation);\n+            self.vtable_impl(impl_def_id, substs, cause,\n+                             obligation.recursion_depth + 1,\n+                             skol_map, snapshot)\n         })\n     }\n "}]}