{"sha": "462a791c341dbb0b0fd5e716082cd6d295ea44ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MmE3OTFjMzQxZGJiMGIwZmQ1ZTcxNjA4MmNkNmQyOTVlYTQ0YWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T02:32:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:25Z"}, "message": "librustc: De-`@mut` the `external` and `external_srcs` fields of\n`CrateContext`", "tree": {"sha": "df848c4b6aa68d2c2c201f25646bedf8792e710e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df848c4b6aa68d2c2c201f25646bedf8792e710e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462a791c341dbb0b0fd5e716082cd6d295ea44ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462a791c341dbb0b0fd5e716082cd6d295ea44ab", "html_url": "https://github.com/rust-lang/rust/commit/462a791c341dbb0b0fd5e716082cd6d295ea44ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462a791c341dbb0b0fd5e716082cd6d295ea44ab/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "html_url": "https://github.com/rust-lang/rust/commit/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72"}], "stats": {"total": 110, "additions": 72, "deletions": 38}, "files": [{"sha": "0babc88661cffa8bc7861e9a42e499a7e035a141", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=462a791c341dbb0b0fd5e716082cd6d295ea44ab", "patch": "@@ -2496,12 +2496,17 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             // using the current crate's name/version\n                             // information in the hash of the symbol\n                             debug!(\"making {}\", sym);\n-                            let sym = match ccx.external_srcs.find(&i.id) {\n-                                Some(&did) => {\n-                                    debug!(\"but found in other crate...\");\n-                                    csearch::get_symbol(ccx.sess.cstore, did)\n+                            let sym = {\n+                                let external_srcs = ccx.external_srcs\n+                                                       .borrow();\n+                                match external_srcs.get().find(&i.id) {\n+                                    Some(&did) => {\n+                                        debug!(\"but found in other crate...\");\n+                                        csearch::get_symbol(ccx.sess.cstore,\n+                                                            did)\n+                                    }\n+                                    None => sym\n                                 }\n-                                None => sym\n                             };\n \n                             // We need the translated value here, because for enums the"}, {"sha": "2d8fdde7e98bc4cfa63462a8494622b29583f6c2", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=462a791c341dbb0b0fd5e716082cd6d295ea44ab", "patch": "@@ -57,10 +57,10 @@ pub struct CrateContext {\n      // created.\n      finished_tydescs: bool,\n      // Track mapping of external ids to local items imported for inlining\n-     external: HashMap<ast::DefId, Option<ast::NodeId>>,\n+     external: RefCell<HashMap<ast::DefId, Option<ast::NodeId>>>,\n      // Backwards version of the `external` map (inlined items to where they\n      // came from)\n-     external_srcs: HashMap<ast::NodeId, ast::DefId>,\n+     external_srcs: RefCell<HashMap<ast::NodeId, ast::DefId>>,\n      // A set of static items which cannot be inlined into other crates. This\n      // will pevent in ii_item() structures from being encoded into the metadata\n      // that is generated\n@@ -190,8 +190,8 @@ impl CrateContext {\n                   link_meta: link_meta,\n                   tydescs: RefCell::new(HashMap::new()),\n                   finished_tydescs: false,\n-                  external: HashMap::new(),\n-                  external_srcs: HashMap::new(),\n+                  external: RefCell::new(HashMap::new()),\n+                  external_srcs: RefCell::new(HashMap::new()),\n                   non_inlineable_statics: RefCell::new(HashSet::new()),\n                   monomorphized: RefCell::new(HashMap::new()),\n                   monomorphizing: RefCell::new(HashMap::new()),"}, {"sha": "d87836072b95e84f7f594755dc92472d28719a72", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=462a791c341dbb0b0fd5e716082cd6d295ea44ab", "patch": "@@ -1796,11 +1796,15 @@ pub fn trans_log_level(bcx: @Block) -> DatumBlock {\n     let ccx = bcx.ccx();\n \n     let (modpath, modname) = {\n-        let srccrate = match ccx.external_srcs.find(&bcx.fcx.id) {\n-            Some(&src) => {\n-                ccx.sess.cstore.get_crate_data(src.crate).name\n-            }\n-            None => ccx.link_meta.pkgid.name.to_managed(),\n+        let srccrate;\n+        {\n+            let external_srcs = ccx.external_srcs.borrow();\n+            srccrate = match external_srcs.get().find(&bcx.fcx.id) {\n+                Some(&src) => {\n+                    ccx.sess.cstore.get_crate_data(src.crate).name\n+                }\n+                None => ccx.link_meta.pkgid.name.to_managed(),\n+            };\n         };\n         let mut modpath = ~[path_mod(ccx.sess.ident_of(srccrate))];\n         for e in bcx.fcx.path.iter() {"}, {"sha": "f6c424302e3a167ec14709f92e495dbd5877d4e1", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462a791c341dbb0b0fd5e716082cd6d295ea44ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=462a791c341dbb0b0fd5e716082cd6d295ea44ab", "patch": "@@ -26,18 +26,21 @@ use syntax::attr;\n pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n     -> ast::DefId {\n     let _icx = push_ctxt(\"maybe_instantiate_inline\");\n-    match ccx.external.find(&fn_id) {\n-        Some(&Some(node_id)) => {\n-            // Already inline\n-            debug!(\"maybe_instantiate_inline({}): already inline as node id {}\",\n-                   ty::item_path_str(ccx.tcx, fn_id), node_id);\n-            return local_def(node_id);\n-        }\n-        Some(&None) => {\n-            return fn_id; // Not inlinable\n-        }\n-        None => {\n-            // Not seen yet\n+    {\n+        let external = ccx.external.borrow();\n+        match external.get().find(&fn_id) {\n+            Some(&Some(node_id)) => {\n+                // Already inline\n+                debug!(\"maybe_instantiate_inline({}): already inline as node id {}\",\n+                       ty::item_path_str(ccx.tcx, fn_id), node_id);\n+                return local_def(node_id);\n+            }\n+            Some(&None) => {\n+                return fn_id; // Not inlinable\n+            }\n+            None => {\n+                // Not seen yet\n+            }\n         }\n     }\n \n@@ -49,12 +52,18 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n             });\n     return match csearch_result {\n         csearch::not_found => {\n-            ccx.external.insert(fn_id, None);\n+            let mut external = ccx.external.borrow_mut();\n+            external.get().insert(fn_id, None);\n             fn_id\n         }\n         csearch::found(ast::ii_item(item)) => {\n-            ccx.external.insert(fn_id, Some(item.id));\n-            ccx.external_srcs.insert(item.id, fn_id);\n+            {\n+                let mut external = ccx.external.borrow_mut();\n+                let mut external_srcs = ccx.external_srcs.borrow_mut();\n+                external.get().insert(fn_id, Some(item.id));\n+                external_srcs.get().insert(item.id, fn_id);\n+            }\n+\n             ccx.stats.n_inlines += 1;\n             trans_item(ccx, item);\n \n@@ -82,28 +91,39 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n             local_def(item.id)\n         }\n         csearch::found(ast::ii_foreign(item)) => {\n-          ccx.external.insert(fn_id, Some(item.id));\n-          ccx.external_srcs.insert(item.id, fn_id);\n-          local_def(item.id)\n+            {\n+                let mut external = ccx.external.borrow_mut();\n+                let mut external_srcs = ccx.external_srcs.borrow_mut();\n+                external.get().insert(fn_id, Some(item.id));\n+                external_srcs.get().insert(item.id, fn_id);\n+            }\n+            local_def(item.id)\n         }\n         csearch::found_parent(parent_id, ast::ii_item(item)) => {\n-          ccx.external.insert(parent_id, Some(item.id));\n-          ccx.external_srcs.insert(item.id, parent_id);\n+            {\n+                let mut external = ccx.external.borrow_mut();\n+                let mut external_srcs = ccx.external_srcs.borrow_mut();\n+                external.get().insert(parent_id, Some(item.id));\n+                external_srcs.get().insert(item.id, parent_id);\n+            }\n+\n           let mut my_id = 0;\n           match item.node {\n             ast::item_enum(_, _) => {\n               let vs_here = ty::enum_variants(ccx.tcx, local_def(item.id));\n               let vs_there = ty::enum_variants(ccx.tcx, parent_id);\n               for (here, there) in vs_here.iter().zip(vs_there.iter()) {\n                   if there.id == fn_id { my_id = here.id.node; }\n-                  ccx.external.insert(there.id, Some(here.id.node));\n+                  let mut external = ccx.external.borrow_mut();\n+                  external.get().insert(there.id, Some(here.id.node));\n               }\n             }\n             ast::item_struct(ref struct_def, _) => {\n               match struct_def.ctor_id {\n                 None => {}\n                 Some(ctor_id) => {\n-                    let _ = ccx.external.insert(fn_id, Some(ctor_id));\n+                    let mut external = ccx.external.borrow_mut();\n+                    let _ = external.get().insert(fn_id, Some(ctor_id));\n                     my_id = ctor_id;\n                 }\n               }\n@@ -119,9 +139,14 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n              with a non-item parent\");\n         }\n         csearch::found(ast::ii_method(impl_did, is_provided, mth)) => {\n+            {\n+                let mut external = ccx.external.borrow_mut();\n+                let mut external_srcs = ccx.external_srcs.borrow_mut();\n+                external.get().insert(fn_id, Some(mth.id));\n+                external_srcs.get().insert(mth.id, fn_id);\n+            }\n+\n           ccx.stats.n_inlines += 1;\n-          ccx.external.insert(fn_id, Some(mth.id));\n-          ccx.external_srcs.insert(mth.id, fn_id);\n           // If this is a default method, we can't look up the\n           // impl type. But we aren't going to translate anyways, so don't.\n           if is_provided { return local_def(mth.id); }"}]}