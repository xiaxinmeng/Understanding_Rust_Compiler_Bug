{"sha": "c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmM0ZjA0MjBiNjQyYTBlMDA0MWJiMTM0OTJkZjJkNGE2OGFlODA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T11:40:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T11:40:27Z"}, "message": "catch errors more locally around read_discriminant", "tree": {"sha": "4e1621efd940b42ba4dda95c2e0761fa20f7ff64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1621efd940b42ba4dda95c2e0761fa20f7ff64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "html_url": "https://github.com/rust-lang/rust/commit/c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd", "html_url": "https://github.com/rust-lang/rust/commit/54d95ed25aa45f94b2a3d0a0e3a3323852878ecd"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "2e28ed0f91765d1ef726e260b757803d4abdd224", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "patch": "@@ -276,19 +276,21 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         }\n     }\n \n-    fn visit_elem(\n+    fn with_elem<R>(\n         &mut self,\n-        new_op: OpTy<'tcx, M::PointerTag>,\n         elem: PathElem,\n-    ) -> InterpResult<'tcx> {\n+        f: impl FnOnce(&mut Self) -> InterpResult<'tcx, R>,\n+    ) -> InterpResult<'tcx, R> {\n         // Remember the old state\n         let path_len = self.path.len();\n-        // Perform operation\n+        // Record new element\n         self.path.push(elem);\n-        self.visit_value(new_op)?;\n+        // Perform operation\n+        let r = f(self)?;\n         // Undo changes\n         self.path.truncate(path_len);\n-        Ok(())\n+        // Done\n+        Ok(r)\n     }\n \n     fn check_wide_ptr_meta(\n@@ -649,6 +651,21 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         &self.ecx\n     }\n \n+    fn read_discriminant(&mut self, op: OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, VariantIdx> {\n+        self.with_elem(PathElem::EnumTag, move |this| {\n+            Ok(try_validation!(\n+                this.ecx.read_discriminant(op),\n+                this.path,\n+                err_ub!(InvalidTag(val)) =>\n+                    { \"{}\", val } expected { \"a valid enum tag\" },\n+                err_ub!(InvalidUninitBytes(None)) =>\n+                    { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n+                err_unsup!(ReadPointerAsBytes) =>\n+                    { \"a pointer\" } expected { \"a valid enum tag\" },\n+            ).1)\n+        })\n+    }\n+\n     #[inline]\n     fn visit_field(\n         &mut self,\n@@ -657,7 +674,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         new_op: OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         let elem = self.aggregate_field_path_elem(old_op.layout, field);\n-        self.visit_elem(new_op, elem)\n+        self.with_elem(elem, move |this| this.visit_value(new_op))\n     }\n \n     #[inline]\n@@ -673,7 +690,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             ty::Generator(..) => PathElem::GeneratorState(variant_id),\n             _ => bug!(\"Unexpected type with variant: {:?}\", old_op.layout.ty),\n         };\n-        self.visit_elem(new_op, name)\n+        self.with_elem(name, move |this| this.visit_value(new_op))\n     }\n \n     #[inline(always)]\n@@ -696,18 +713,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         // Sanity check: `builtin_deref` does not know any pointers that are not primitive.\n         assert!(op.layout.ty.builtin_deref(true).is_none());\n \n-        // Recursively walk the type. Translate some possible errors to something nicer.\n-        try_validation!(\n-            self.walk_value(op),\n-            self.path,\n-            err_ub!(InvalidTag(val)) =>\n-                { \"{}\", val } expected { \"a valid enum tag\" },\n-            // `InvalidUninitBytes` can be caused by `read_discriminant` in Miri if all initialized tags are valid.\n-            err_ub!(InvalidUninitBytes(None)) =>\n-                { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n-            err_unsup!(ReadPointerAsBytes) =>\n-                { \"a pointer\" } expected { \"plain (non-pointer) bytes\" },\n-        );\n+        // Recursively walk the value at its type.\n+        self.walk_value(op)?;\n \n         // *After* all of this, check the ABI.  We need to check the ABI to handle\n         // types like `NonNull` where the `Scalar` info is more restrictive than what\n@@ -822,6 +829,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n \n                                 throw_validation_failure!(self.path, { \"uninitialized bytes\" })\n                             }\n+                            err_unsup!(ReadPointerAsBytes) =>\n+                                throw_validation_failure!(self.path, { \"a pointer\" } expected { \"plain (non-pointer) bytes\" }),\n+\n                             // Propagate upwards (that will also check for unexpected errors).\n                             _ => return Err(err),\n                         }"}, {"sha": "6c53df40a7c9a6c732ea2753e7e1cab0d856778d", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "patch": "@@ -125,6 +125,15 @@ macro_rules! make_value_visitor {\n             fn ecx(&$($mutability)? self)\n                 -> &$($mutability)? InterpCx<'mir, 'tcx, M>;\n \n+            /// `read_discriminant` can be hooked for better error messages.\n+            #[inline(always)]\n+            fn read_discriminant(\n+                &mut self,\n+                op: OpTy<'tcx, M::PointerTag>,\n+            ) -> InterpResult<'tcx, VariantIdx> {\n+                Ok(self.ecx().read_discriminant(op)?.1)\n+            }\n+\n             // Recursive actions, ready to be overloaded.\n             /// Visits the given value, dispatching as appropriate to more specialized visitors.\n             #[inline(always)]\n@@ -245,7 +254,7 @@ macro_rules! make_value_visitor {\n                     // with *its* fields.\n                     Variants::Multiple { .. } => {\n                         let op = v.to_op(self.ecx())?;\n-                        let idx = self.ecx().read_discriminant(op)?.1;\n+                        let idx = self.read_discriminant(op)?;\n                         let inner = v.project_downcast(self.ecx(), idx)?;\n                         trace!(\"walk_value: variant layout: {:#?}\", inner.layout());\n                         // recurse with the inner type"}, {"sha": "513b71f0c6fdcf973572ad517ada9b1890c9a9b8", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "patch": "@@ -5,7 +5,7 @@ LL | / static FOO: (&Foo, &Bar) = unsafe {(\n LL | |     Union { u8: &BAR }.foo,\n LL | |     Union { u8: &BAR }.bar,\n LL | | )};\n-   | |___^ type validation failed: encountered 0x05 at .1.<deref>, but expected a valid enum tag\n+   | |___^ type validation failed: encountered 0x05 at .1.<deref>.<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "217bfb628a018673d4590618f07a08f31e39c910", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3fc4f0420b642a0e0041bb13492df2d4a68ae80/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=c3fc4f0420b642a0e0041bb13492df2d4a68ae80", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:24:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001 at .<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:42:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000 at .<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}