{"sha": "0a0c6da564e91a241feadae8bc1f5ad879045042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGM2ZGE1NjRlOTFhMjQxZmVhZGFlOGJjMWY1YWQ4NzkwNDUwNDI=", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2014-07-04T00:47:13Z"}, "committer": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2014-07-21T03:14:34Z"}, "message": "Fix :syn-include usage of Vim filetype.\n\nHere\u2019s what the Vim manual says in *:syn-include*:\n\n    :sy[ntax] include [@{grouplist-name}] {file-name}\n\n\tAll syntax items declared in the included file will have the\n\t\"contained\" flag added.  In addition, if a group list is\n\tspecified, all top-level syntax items in the included file will\n\tbe added to that list.\n\nWe had two rules for `rustModPath`, one `contained` and the other not.\nThe effect was that the second (now renamed to `rustModPathInUse`) was\nbeing included in the group list, and thus that all identifiers were\nbeing highlighted as `Include`, which is definitely not what we wanted.", "tree": {"sha": "59e6469c3b730e1809e9b9faf23d7e5df42eb863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e6469c3b730e1809e9b9faf23d7e5df42eb863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0c6da564e91a241feadae8bc1f5ad879045042", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0c6da564e91a241feadae8bc1f5ad879045042", "html_url": "https://github.com/rust-lang/rust/commit/0a0c6da564e91a241feadae8bc1f5ad879045042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0c6da564e91a241feadae8bc1f5ad879045042/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6ffac4e4683705b895e368375103315ca0e1ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6ffac4e4683705b895e368375103315ca0e1ca", "html_url": "https://github.com/rust-lang/rust/commit/ca6ffac4e4683705b895e368375103315ca0e1ca"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "e3fadccd1c9fde65979b0aa169f978b16b2f497f", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a0c6da564e91a241feadae8bc1f5ad879045042/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/0a0c6da564e91a241feadae8bc1f5ad879045042/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=0a0c6da564e91a241feadae8bc1f5ad879045042", "patch": "@@ -3,7 +3,7 @@\n \" Maintainer:   Patrick Walton <pcwalton@mozilla.com>\n \" Maintainer:   Ben Blum <bblum@cs.cmu.edu>\n \" Maintainer:   Chris Morgan <me@chrismorgan.info>\n-\" Last Change:  July 06, 2014\n+\" Last Change:  July 18, 2014\n \n if version < 600\n   syntax clear\n@@ -38,7 +38,7 @@ syn keyword   rustKeyword     for in if impl let\n syn keyword   rustKeyword     loop once proc pub\n syn keyword   rustKeyword     return super\n syn keyword   rustKeyword     unsafe virtual while\n-syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite skipempty\n+syn keyword   rustKeyword     use nextgroup=rustModPath,rustModPathInUse skipwhite skipempty\n \" FIXME: Scoped impl's name is also fallen in this category\n syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite skipempty\n syn keyword   rustStorage     mut ref static const\n@@ -142,8 +142,9 @@ syn keyword   rustBoolean     true false\n \" If foo::bar changes to foo.bar, change this (\"::\" to \"\\.\").\n \" If foo::bar changes to Foo::bar, change this (first \"\\w\" to \"\\u\").\n syn match     rustModPath     \"\\w\\(\\w\\)*::[^<]\"he=e-3,me=e-3\n-syn match     rustModPath     \"\\w\\(\\w\\)*\" contained \" only for 'use path;'\n+syn match     rustModPathInUse \"\\w\\(\\w\\)*\" contained \" only for 'use path;'\n syn match     rustModPathSep  \"::\"\n+\" rustModPathInUse is split out from rustModPath so that :syn-include can get the group list right.\n \n syn match     rustFuncCall    \"\\w\\(\\w\\)*(\"he=e-1,me=e-1\n syn match     rustFuncCall    \"\\w\\(\\w\\)*::<\"he=e-3,me=e-3 \" foo::<T>();\n@@ -262,6 +263,7 @@ hi def link rustReservedKeyword Error\n hi def link rustConditional   Conditional\n hi def link rustIdentifier    Identifier\n hi def link rustCapsIdent     rustIdentifier\n+hi def link rustModPathInUse  rustModPath\n hi def link rustModPath       Include\n hi def link rustModPathSep    Delimiter\n hi def link rustFunction      Function"}]}