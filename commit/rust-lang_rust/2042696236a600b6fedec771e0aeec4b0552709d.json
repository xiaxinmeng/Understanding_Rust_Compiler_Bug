{"sha": "2042696236a600b6fedec771e0aeec4b0552709d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNDI2OTYyMzZhNjAwYjZmZWRlYzc3MWUwYWVlYzRiMDU1MjcwOWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-19T23:50:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T22:21:29Z"}, "message": "core::rt: Implement Local for Task", "tree": {"sha": "7ec007bf7151d9c6fe08429d70610adabdca6db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec007bf7151d9c6fe08429d70610adabdca6db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2042696236a600b6fedec771e0aeec4b0552709d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2042696236a600b6fedec771e0aeec4b0552709d", "html_url": "https://github.com/rust-lang/rust/commit/2042696236a600b6fedec771e0aeec4b0552709d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2042696236a600b6fedec771e0aeec4b0552709d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f99fb8efad8803801628a507fe3ac06a70c7871", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99fb8efad8803801628a507fe3ac06a70c7871", "html_url": "https://github.com/rust-lang/rust/commit/2f99fb8efad8803801628a507fe3ac06a70c7871"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "be71714a048e334be3006dc4a03d970dd615a7ea", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -66,8 +66,11 @@ pub fn log_type<T>(level: u32, object: &T) {\n }\n \n fn newsched_log_str(msg: ~str) {\n+    use rt::task::Task;\n+    use rt::local::Local;\n+\n     unsafe {\n-        match rt::task::unsafe_try_borrow_local_task() {\n+        match Local::try_unsafe_borrow::<Task>() {\n             Some(local) => {\n                 // Use the available logger\n                 (*local).logger.log(Left(msg));"}, {"sha": "471d6983db2aa8c9ae0ae60c1929626e4786d305", "filename": "src/libcore/rt/local.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use option::{Option, Some, None};\n use rt::sched::Scheduler;\n+use rt::task::Task;\n use rt::local_ptr;\n \n pub trait Local {\n@@ -17,6 +19,7 @@ pub trait Local {\n     fn exists() -> bool;\n     fn borrow(f: &fn(&mut Self));\n     unsafe fn unsafe_borrow() -> *mut Self;\n+    unsafe fn try_unsafe_borrow() -> Option<*mut Self>;\n }\n \n impl Local for Scheduler {\n@@ -25,6 +28,44 @@ impl Local for Scheduler {\n     fn exists() -> bool { local_ptr::exists() }\n     fn borrow(f: &fn(&mut Scheduler)) { unsafe { local_ptr::borrow(f) } }\n     unsafe fn unsafe_borrow() -> *mut Scheduler { local_ptr::unsafe_borrow() }\n+    unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> { abort!(\"unimpl\") }\n+}\n+\n+impl Local for Task {\n+    fn put(value: ~Task) { abort!(\"unimpl\") }\n+    fn take() -> ~Task { abort!(\"unimpl\") }\n+    fn exists() -> bool { abort!(\"unimpl\") }\n+    fn borrow(f: &fn(&mut Task)) {\n+        do Local::borrow::<Scheduler> |sched| {\n+            match sched.current_task {\n+                Some(~ref mut task) => {\n+                    f(&mut *task.task)\n+                }\n+                None => {\n+                    abort!(\"no scheduler\")\n+                }\n+            }\n+        }\n+    }\n+    unsafe fn unsafe_borrow() -> *mut Task {\n+        match (*Local::unsafe_borrow::<Scheduler>()).current_task {\n+            Some(~ref mut task) => {\n+                let s: *mut Task = &mut *task.task;\n+                return s;\n+            }\n+            None => {\n+                // Don't fail. Infinite recursion\n+                abort!(\"no scheduler\")\n+            }\n+        }\n+    }\n+    unsafe fn try_unsafe_borrow() -> Option<*mut Task> {\n+        if Local::exists::<Scheduler>() {\n+            Some(Local::unsafe_borrow())\n+        } else {\n+            None\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "0314137fc7f9271151b7765aa590e7ceea118fe9", "filename": "src/libcore/rt/task.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftask.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -63,7 +63,7 @@ impl Task {\n     pub fn run(&mut self, f: &fn()) {\n         // This is just an assertion that `run` was called unsafely\n         // and this instance of Task is still accessible.\n-        do borrow_local_task |task| {\n+        do Local::borrow::<Task> |task| {\n             assert!(ptr::ref_eq(task, self));\n         }\n \n@@ -88,7 +88,7 @@ impl Task {\n     fn destroy(&mut self) {\n         // This is just an assertion that `destroy` was called unsafely\n         // and this instance of Task is still accessible.\n-        do borrow_local_task |task| {\n+        do Local::borrow::<Task> |task| {\n             assert!(ptr::ref_eq(task, self));\n         }\n         match self.storage {\n@@ -150,42 +150,6 @@ impl Unwinder {\n     }\n }\n \n-/// Borrow a pointer to the installed local services.\n-/// Fails (likely aborting the process) if local services are not available.\n-pub fn borrow_local_task(f: &fn(&mut Task)) {\n-    do Local::borrow::<Scheduler> |sched| {\n-        match sched.current_task {\n-            Some(~ref mut task) => {\n-                f(&mut *task.task)\n-            }\n-            None => {\n-                fail!(\"no local services for schedulers yet\")\n-            }\n-        }\n-    }\n-}\n-\n-pub unsafe fn unsafe_borrow_local_task() -> *mut Task {\n-    match (*Local::unsafe_borrow::<Scheduler>()).current_task {\n-        Some(~ref mut task) => {\n-            let s: *mut Task = &mut *task.task;\n-            return s;\n-        }\n-        None => {\n-            // Don't fail. Infinite recursion\n-            abort!(\"no local services for schedulers yet\")\n-        }\n-    }\n-}\n-\n-pub unsafe fn unsafe_try_borrow_local_task() -> Option<*mut Task> {\n-    if Local::exists::<Scheduler>() {\n-        Some(unsafe_borrow_local_task())\n-    } else {\n-        None\n-    }\n-}\n-\n #[cfg(test)]\n mod test {\n     use rt::test::*;"}, {"sha": "1f8dc8c00b5c9cb6cf3f994642b2867dab0c5559", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -204,7 +204,8 @@ impl FailWithCause for &'static str {\n pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n     use option::Option;\n     use rt::{context, OldTaskContext, TaskContext};\n-    use rt::task::{unsafe_borrow_local_task, Unwinder};\n+    use rt::task::{Task, Unwinder};\n+    use rt::local::Local;\n \n     let context = context();\n     match context {\n@@ -233,7 +234,7 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n \n                 gc::cleanup_stack_for_failure();\n \n-                let task = unsafe_borrow_local_task();\n+                let task = Local::unsafe_borrow::<Task>();\n                 let unwinder: &mut Option<Unwinder> = &mut (*task).unwinder;\n                 match *unwinder {\n                     Some(ref mut unwinder) => unwinder.begin_unwind(),"}, {"sha": "2f97eaacf4be2ab0bc1246d711d5a51a6e55b6bd", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -18,7 +18,7 @@ use task::rt;\n use local_data::LocalDataKey;\n \n use super::rt::rust_task;\n-use rt::task::LocalStorage;\n+use rt::task::{Task, LocalStorage};\n \n pub enum Handle {\n     OldHandle(*rust_task),\n@@ -28,14 +28,14 @@ pub enum Handle {\n impl Handle {\n     pub fn new() -> Handle {\n         use rt::{context, OldTaskContext};\n-        use rt::task::unsafe_borrow_local_task;\n+        use rt::local::Local;\n         unsafe {\n             match context() {\n                 OldTaskContext => {\n                     OldHandle(rt::rust_get_task())\n                 }\n                 _ => {\n-                    let task = unsafe_borrow_local_task();\n+                    let task = Local::unsafe_borrow::<Task>();\n                     NewHandle(&mut (*task).storage)\n                 }\n             }"}, {"sha": "490a69248eecb074812f72d11ce3ca59eff83706", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -504,7 +504,8 @@ pub fn failing() -> bool {\n     //! True if the running task has failed\n \n     use rt::{context, OldTaskContext};\n-    use rt::task::borrow_local_task;\n+    use rt::local::Local;\n+    use rt::task::Task;\n \n     match context() {\n         OldTaskContext => {\n@@ -514,7 +515,7 @@ pub fn failing() -> bool {\n         }\n         _ => {\n             let mut unwinding = false;\n-            do borrow_local_task |local| {\n+            do Local::borrow::<Task> |local| {\n                 unwinding = match local.unwinder {\n                     Some(unwinder) => {\n                         unwinder.unwinding"}, {"sha": "350b18d4541698a48b704340249faad1fa3d057b", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2042696236a600b6fedec771e0aeec4b0552709d/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=2042696236a600b6fedec771e0aeec4b0552709d", "patch": "@@ -17,7 +17,8 @@ use managed::raw::BoxRepr;\n use str;\n use sys;\n use rt::{context, OldTaskContext};\n-use rt::task::borrow_local_task;\n+use rt::task::Task;\n+use rt::local::Local;\n use option::{Option, Some, None};\n use io;\n use rt::global_heap;\n@@ -243,7 +244,7 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n         }\n         _ => {\n             let mut alloc = ::ptr::null();\n-            do borrow_local_task |task| {\n+            do Local::borrow::<Task> |task| {\n                 alloc = task.heap.alloc(td as *c_void, size as uint) as *c_char;\n             }\n             return alloc;\n@@ -261,7 +262,7 @@ pub unsafe fn local_free(ptr: *c_char) {\n             rustrt::rust_upcall_free_noswitch(ptr);\n         }\n         _ => {\n-            do borrow_local_task |task| {\n+            do Local::borrow::<Task> |task| {\n                 task.heap.free(ptr as *c_void);\n             }\n         }"}]}