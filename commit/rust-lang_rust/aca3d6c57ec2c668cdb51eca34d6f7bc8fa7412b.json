{"sha": "aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTNkNmM1N2VjMmM2NjhjZGI1MWVjYTM0ZDZmN2JjOGZhNzQxMmI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T21:28:07Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-10T12:44:54Z"}, "message": "Deduplicate unsafe method call into a single function", "tree": {"sha": "aece5efecb857d71c0cd9af2b78db8b8e314e905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aece5efecb857d71c0cd9af2b78db8b8e314e905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "html_url": "https://github.com/rust-lang/rust/commit/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f11e530dbf6edbdd0ca32d6cd5fafe634c8c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f11e530dbf6edbdd0ca32d6cd5fafe634c8c4a", "html_url": "https://github.com/rust-lang/rust/commit/d5f11e530dbf6edbdd0ca32d6cd5fafe634c8c4a"}], "stats": {"total": 72, "additions": 31, "deletions": 41}, "files": [{"sha": "02b16b13c04d21b51c20794d5928fb5250ff1662", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "patch": "@@ -743,6 +743,26 @@ fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     }\n }\n \n+fn is_method_call_unsafe(\n+    sema: &Semantics<RootDatabase>,\n+    method_call_expr: ast::MethodCallExpr,\n+) -> Option<()> {\n+    let expr = method_call_expr.expr()?;\n+    let field_expr =\n+        if let ast::Expr::FieldExpr(field_expr) = expr { field_expr } else { return None };\n+    let ty = sema.type_of_expr(&field_expr.expr()?)?;\n+    if !ty.is_packed(sema.db) {\n+        return None;\n+    }\n+\n+    let func = sema.resolve_method_call(&method_call_expr)?;\n+    if func.self_param(sema.db)?.is_ref {\n+        Some(())\n+    } else {\n+        None\n+    }\n+}\n+\n fn highlight_name(\n     sema: &Semantics<RootDatabase>,\n     db: &RootDatabase,\n@@ -769,28 +789,13 @@ fn highlight_name(\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n                 } else {\n-                    (|| {\n-                        let method_call_expr =\n-                            name_ref?.syntax().parent().and_then(ast::MethodCallExpr::cast)?;\n-                        let expr = method_call_expr.expr()?;\n-                        let field_expr = if let ast::Expr::FieldExpr(field_expr) = expr {\n-                            Some(field_expr)\n-                        } else {\n-                            None\n-                        }?;\n-                        let ty = sema.type_of_expr(&field_expr.expr()?)?;\n-                        if !ty.is_packed(db) {\n-                            return None;\n-                        }\n-\n-                        let func = sema.resolve_method_call(&method_call_expr)?;\n-                        if func.self_param(db)?.is_ref {\n-                            Some(HighlightModifier::Unsafe)\n-                        } else {\n-                            None\n-                        }\n-                    })()\n-                    .map(|modifier| h |= modifier);\n+                    let is_unsafe = name_ref\n+                        .and_then(|name_ref| name_ref.syntax().parent())\n+                        .and_then(ast::MethodCallExpr::cast)\n+                        .and_then(|method_call_expr| is_method_call_unsafe(sema, method_call_expr));\n+                    if is_unsafe.is_some() {\n+                        h |= HighlightModifier::Unsafe;\n+                    }\n                 }\n                 return h;\n             }\n@@ -865,26 +870,11 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n     match parent.kind() {\n         METHOD_CALL_EXPR => {\n             let mut h = Highlight::new(HighlightTag::Function);\n-            let modifier: Option<HighlightModifier> = (|| {\n-                let method_call_expr = ast::MethodCallExpr::cast(parent)?;\n-                let expr = method_call_expr.expr()?;\n-                let field_expr = if let ast::Expr::FieldExpr(field_expr) = expr {\n-                    field_expr\n-                } else {\n-                    return None;\n-                };\n-\n-                let expr = field_expr.expr()?;\n-                let ty = sema.type_of_expr(&expr)?;\n-                if ty.is_packed(sema.db) {\n-                    Some(HighlightModifier::Unsafe)\n-                } else {\n-                    None\n-                }\n-            })();\n+            let is_unsafe = ast::MethodCallExpr::cast(parent)\n+                .and_then(|method_call_expr| is_method_call_unsafe(sema, method_call_expr));\n \n-            if let Some(modifier) = modifier {\n-                h |= modifier;\n+            if is_unsafe.is_some() {\n+                h |= HighlightModifier::Unsafe;\n             }\n \n             h"}]}