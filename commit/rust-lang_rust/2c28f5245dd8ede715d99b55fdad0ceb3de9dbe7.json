{"sha": "2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjhmNTI0NWRkOGVkZTcxNWQ5OWI1NWZkYWQwY2ViM2RlOWRiZTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T11:36:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-08T11:36:39Z"}, "message": "make documenation a query", "tree": {"sha": "442fe94012c14d52143290b11af1161465a9d41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442fe94012c14d52143290b11af1161465a9d41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "html_url": "https://github.com/rust-lang/rust/commit/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33026c654e3a667e25ea27004c22be138ed83d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/33026c654e3a667e25ea27004c22be138ed83d33", "html_url": "https://github.com/rust-lang/rust/commit/33026c654e3a667e25ea27004c22be138ed83d33"}], "stats": {"total": 128, "additions": 62, "deletions": 66}, "files": [{"sha": "cf16ed94d152adfe0a8ec3ec59465b6b446ffe17", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "patch": "@@ -196,7 +196,7 @@ impl Module {\n     /// `None` for the crate root.\n     pub fn declaration_source(\n         self,\n-        db: &impl HirDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n     ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n         let def_map = db.crate_def_map(self.krate);\n         let decl = def_map[self.module_id].declaration?;"}, {"sha": "d2a372f3bd696424511c4e6f9c6247fb3a77458c", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "patch": "@@ -127,6 +127,9 @@ pub trait DefDatabase: SourceDatabase {\n \n     #[salsa::invoke(crate::lang_item::LangItems::lang_item_query)]\n     fn lang_item(&self, start_crate: Crate, item: SmolStr) -> Option<LangItemTarget>;\n+\n+    #[salsa::invoke(crate::docs::documentation_query)]\n+    fn documentation(&self, def: crate::docs::DocDef) -> Option<crate::docs::Documentation>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "900fd2aa8b82fc6b39c0ae668bbec71f5d82b103", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 58, "deletions": 65, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=2c28f5245dd8ede715d99b55fdad0ceb3de9dbe7", "patch": "@@ -1,24 +1,58 @@\n+use std::sync::Arc;\n+\n use ra_syntax::ast;\n \n-use crate::{HirDatabase, Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union, Trait, TypeAlias, FieldSource};\n+use crate::{\n+    HirDatabase, DefDatabase, AstDatabase,\n+    Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union, Trait, TypeAlias, FieldSource\n+};\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum DocDef {\n+    Module(Module),\n+    StructField(StructField),\n+    Struct(Struct),\n+    Enum(Enum),\n+    EnumVariant(EnumVariant),\n+    Static(Static),\n+    Const(Const),\n+    Function(Function),\n+    Union(Union),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+}\n+\n+impl_froms!(\n+    DocDef: Module,\n+    StructField,\n+    Struct,\n+    Enum,\n+    EnumVariant,\n+    Static,\n+    Const,\n+    Function,\n+    Union,\n+    Trait,\n+    TypeAlias\n+);\n \n /// Holds documentation\n-#[derive(Debug, Clone)]\n-pub struct Documentation(String);\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct Documentation(Arc<str>);\n \n impl Documentation {\n     fn new(s: &str) -> Documentation {\n         Documentation(s.into())\n     }\n \n     pub fn as_str(&self) -> &str {\n-        &self.0\n+        &*self.0\n     }\n }\n \n impl Into<String> for Documentation {\n     fn into(self) -> String {\n-        self.0.clone()\n+        self.as_str().to_owned()\n     }\n }\n \n@@ -30,71 +64,30 @@ pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documen\n     node.doc_comment_text().map(|it| Documentation::new(&it))\n }\n \n-impl Docs for Module {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        self.declaration_source(db).and_then(|it| docs_from_ast(&*it.1))\n-    }\n-}\n-\n-impl Docs for StructField {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        match self.source(db).1 {\n+pub(crate) fn documentation_query(\n+    db: &(impl DefDatabase + AstDatabase),\n+    def: DocDef,\n+) -> Option<Documentation> {\n+    match def {\n+        DocDef::Module(it) => docs_from_ast(&*it.declaration_source(db)?.1),\n+        DocDef::StructField(it) => match it.source(db).1 {\n             FieldSource::Named(named) => docs_from_ast(&*named),\n             FieldSource::Pos(..) => return None,\n-        }\n-    }\n-}\n-\n-impl Docs for Struct {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for Union {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for Enum {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for EnumVariant {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for Function {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for Const {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for Static {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n-impl Docs for Trait {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n+        },\n+        DocDef::Struct(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Enum(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Static(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Const(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Function(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Union(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Trait(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::TypeAlias(it) => docs_from_ast(&*it.source(db).1),\n     }\n }\n \n-impl Docs for TypeAlias {\n+impl<T: Into<DocDef> + Copy> Docs for T {\n     fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n+        db.documentation((*self).into())\n     }\n }"}]}