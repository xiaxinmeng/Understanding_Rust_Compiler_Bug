{"sha": "0cd0709f19d316c4796fa71c5f52c8612a5f3771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDA3MDlmMTlkMzE2YzQ3OTZmYTcxYzVmNTJjODYxMmE1ZjM3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T09:44:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-08T09:44:52Z"}, "message": "Auto merge of #86823 - the8472:opt-chunk-tra, r=kennytm\n\nOptimize unchecked indexing into chunks and chunks_mut\n\nFixes #53340\n\n```\n# BEFORE\n\n$ rustc +nightly -Copt-level=3 -Ccodegen-units=1 -Clto=fat chunks.rs\n$ perf stat ./chunks\n\n Performance counter stats for './chunks':\n\n          3,177.03 msec task-clock                #    1.000 CPUs utilized\n                 4      context-switches          #    0.001 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n           984,006      page-faults               #    0.310 M/sec\n    13,092,199,322      cycles                    #    4.121 GHz                      (83.29%)\n       384,543,475      stalled-cycles-frontend   #    2.94% frontend cycles idle     (83.35%)\n     7,414,280,722      stalled-cycles-backend    #   56.63% backend cycles idle      (83.38%)\n    50,493,980,662      instructions              #    3.86  insn per cycle\n                                                  #    0.15  stalled cycles per insn  (83.29%)\n     6,625,375,297      branches                  # 2085.396 M/sec                    (83.38%)\n         3,087,652      branch-misses             #    0.05% of all branches          (83.31%)\n\n       3.178079469 seconds time elapsed\n\n       2.327156000 seconds user\n       0.762041000 seconds sys\n\n# AFTER\n\n$ ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc -Copt-level=3 -Ccodegen-units=1 -Clto=fat chunks.rs\n$ perf stat ./chunks\n\n Performance counter stats for './chunks':\n\n          2,705.76 msec task-clock                #    1.000 CPUs utilized\n                 4      context-switches          #    0.001 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n           984,005      page-faults               #    0.364 M/sec\n    11,156,763,039      cycles                    #    4.123 GHz                      (83.26%)\n       342,198,882      stalled-cycles-frontend   #    3.07% frontend cycles idle     (83.37%)\n     6,486,263,637      stalled-cycles-backend    #   58.14% backend cycles idle      (83.37%)\n    40,553,476,617      instructions              #    3.63  insn per cycle\n                                                  #    0.16  stalled cycles per insn  (83.37%)\n     6,668,429,113      branches                  # 2464.532 M/sec                    (83.37%)\n         3,099,636      branch-misses             #    0.05% of all branches          (83.26%)\n\n       2.706725288 seconds time elapsed\n\n       1.782083000 seconds user\n       0.848424000 seconds sys\n```", "tree": {"sha": "9f229878d45f701b2f9aeee4b14c1e03b7da0b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f229878d45f701b2f9aeee4b14c1e03b7da0b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd0709f19d316c4796fa71c5f52c8612a5f3771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd0709f19d316c4796fa71c5f52c8612a5f3771", "html_url": "https://github.com/rust-lang/rust/commit/0cd0709f19d316c4796fa71c5f52c8612a5f3771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd0709f19d316c4796fa71c5f52c8612a5f3771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2daa26b7caad3742c9c61849c67d7341c3df5b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/2daa26b7caad3742c9c61849c67d7341c3df5b97", "html_url": "https://github.com/rust-lang/rust/commit/2daa26b7caad3742c9c61849c67d7341c3df5b97"}, {"sha": "24094a04b66467623174199b2605e2f49be166f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/24094a04b66467623174199b2605e2f49be166f9", "html_url": "https://github.com/rust-lang/rust/commit/24094a04b66467623174199b2605e2f49be166f9"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "5cbc6343e3a77424a85696d80abfe1941bd5211f", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cd0709f19d316c4796fa71c5f52c8612a5f3771/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd0709f19d316c4796fa71c5f52c8612a5f3771/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=0cd0709f19d316c4796fa71c5f52c8612a5f3771", "patch": "@@ -1418,18 +1418,17 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n-        let end = match start.checked_add(self.chunk_size) {\n-            None => self.v.len(),\n-            Some(end) => cmp::min(end, self.v.len()),\n-        };\n         // SAFETY: the caller guarantees that `i` is in bounds,\n         // which means that `start` must be in bounds of the\n-        // underlying `self.v` slice, and we made sure that `end`\n+        // underlying `self.v` slice, and we made sure that `len`\n         // is also in bounds of `self.v`. Thus, `start` cannot overflow\n         // an `isize`, and the slice constructed by `from_raw_parts`\n         // is a subslice of `self.v` which is guaranteed to be valid\n         // for the lifetime `'a` of `self.v`.\n-        unsafe { from_raw_parts(self.v.as_ptr().add(start), end - start) }\n+        unsafe {\n+            let len = cmp::min(self.v.len().unchecked_sub(start), self.chunk_size);\n+            from_raw_parts(self.v.as_ptr().add(start), len)\n+        }\n     }\n }\n \n@@ -1457,7 +1456,7 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n         } else {\n             let start = (len - 1 - n) * self.chunk_size;\n             let end = match start.checked_add(self.chunk_size) {\n-                Some(res) => cmp::min(res, self.v.len()),\n+                Some(res) => cmp::min(self.v.len(), res),\n                 None => self.v.len(),\n             };\n             let nth_back = &self.v[start..end];\n@@ -1579,17 +1578,16 @@ impl<'a, T> Iterator for ChunksMut<'a, T> {\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n-        let end = match start.checked_add(self.chunk_size) {\n-            None => self.v.len(),\n-            Some(end) => cmp::min(end, self.v.len()),\n-        };\n         // SAFETY: see comments for `Chunks::__iterator_get_unchecked`.\n         //\n         // Also note that the caller also guarantees that we're never called\n         // with the same index again, and that no other methods that will\n         // access this subslice are called, so it is valid for the returned\n         // slice to be mutable.\n-        unsafe { from_raw_parts_mut(self.v.as_mut_ptr().add(start), end - start) }\n+        unsafe {\n+            let len = cmp::min(self.v.len().unchecked_sub(start), self.chunk_size);\n+            from_raw_parts_mut(self.v.as_mut_ptr().add(start), len)\n+        }\n     }\n }\n \n@@ -1619,7 +1617,7 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n         } else {\n             let start = (len - 1 - n) * self.chunk_size;\n             let end = match start.checked_add(self.chunk_size) {\n-                Some(res) => cmp::min(res, self.v.len()),\n+                Some(res) => cmp::min(self.v.len(), res),\n                 None => self.v.len(),\n             };\n             let (temp, _tail) = mem::replace(&mut self.v, &mut []).split_at_mut(end);"}]}