{"sha": "8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjJiZDEzZDBkZDcwMTMxYmUxZTIxYTBhMDI2MWM5ZGM2OTkzN2E=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-24T13:02:51Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-28T01:22:05Z"}, "message": "update the lint messages and tests", "tree": {"sha": "cbec1312385c7ad256765cdbab8c18c1deaf39eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbec1312385c7ad256765cdbab8c18c1deaf39eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "html_url": "https://github.com/rust-lang/rust/commit/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53705768824aca634ea6366acd666344611d37e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/53705768824aca634ea6366acd666344611d37e3", "html_url": "https://github.com/rust-lang/rust/commit/53705768824aca634ea6366acd666344611d37e3"}], "stats": {"total": 630, "additions": 315, "deletions": 315}, "files": [{"sha": "e13f62d04281ac3cbfc5602a04ef4e3db3b0d5e1", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -209,7 +209,7 @@ fn lint_misrefactored_assign_op(\n                 diag.span_suggestion(\n                     expr.span,\n                     &format!(\n-                        \"Did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n+                        \"did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n                         snip_a,\n                         snip_a,\n                         op.node.as_str(),"}, {"sha": "bb7be3d472429a3ba4e868c3d4af1d162862e06f", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -639,7 +639,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                     diag.span_suggestion(span, \"try\", sugg, Applicability::MaybeIncorrect);\n \n                     if !unix_suggested && is_unix(os) {\n-                        diag.help(\"Did you mean `unix`?\");\n+                        diag.help(\"did you mean `unix`?\");\n                         unix_suggested = true;\n                     }\n                 }"}, {"sha": "fad3aff96cc82c9377fd47916da6704ea9208dbf", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -116,7 +116,7 @@ fn check_interior_types(cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorType\n                     cx,\n                     AWAIT_HOLDING_LOCK,\n                     ty_cause.span,\n-                    \"this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\",\n+                    \"this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\",\n                     ty_cause.scope_span.or(Some(span)),\n                     \"these are all the await points this lock is held through\",\n                 );\n@@ -126,7 +126,7 @@ fn check_interior_types(cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorType\n                         cx,\n                         AWAIT_HOLDING_REFCELL_REF,\n                         ty_cause.span,\n-                        \"this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\",\n+                        \"this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\",\n                         ty_cause.scope_span.or(Some(span)),\n                         \"these are all the await points this ref is held through\",\n                     );"}, {"sha": "e309db25995fbfa0f8bf5cbe716765047442e269", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n             expr.span,\n             \"`if` chain can be rewritten with `match`\",\n             None,\n-            \"Consider rewriting the `if` chain to use `cmp` and `match`.\",\n+            \"consider rewriting the `if` chain to use `cmp` and `match`\",\n         )\n     }\n }"}, {"sha": "2aea00d883c41c22eeb26515df8f39b7dffc9308", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -98,13 +98,13 @@ declare_clippy_lint! {\n }\n \n const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n-                                Dropping a reference does nothing.\";\n+                                Dropping a reference does nothing\";\n const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n-                                  Forgetting a reference does nothing.\";\n+                                  Forgetting a reference does nothing\";\n const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n-                                 Dropping a copy leaves the original intact.\";\n+                                 Dropping a copy leaves the original intact\";\n const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n-                                   Forgetting a copy leaves the original intact.\";\n+                                   Forgetting a copy leaves the original intact\";\n \n declare_lint_pass!(DropForgetRef => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n "}, {"sha": "f466dddc13c2044d7320f04fac2cec42403da220", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -133,7 +133,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n                         move |diag| {\n                             diag.help(\n                                 \"`From` is intended for infallible conversions only. \\\n-                                Use `TryFrom` if there's a possibility for the conversion to fail.\");\n+                                Use `TryFrom` if there's a possibility for the conversion to fail\");\n                             diag.span_note(fpu.result, \"potential failure(s)\");\n                         });\n                 }"}, {"sha": "c919ec097a2393a5c3c5ea1189e68278c7b54dfe", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -132,13 +132,13 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                 }\n \n                 let help_msg = match (range.start, range.end) {\n-                    (None, Some(_)) => \"Consider using `.get(..n)`or `.get_mut(..n)` instead\",\n-                    (Some(_), None) => \"Consider using `.get(n..)` or .get_mut(n..)` instead\",\n-                    (Some(_), Some(_)) => \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\",\n+                    (None, Some(_)) => \"consider using `.get(..n)`or `.get_mut(..n)` instead\",\n+                    (Some(_), None) => \"consider using `.get(n..)` or .get_mut(n..)` instead\",\n+                    (Some(_), Some(_)) => \"consider using `.get(n..m)` or `.get_mut(n..m)` instead\",\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", None, help_msg);\n+                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", None, help_msg);\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind() {\n@@ -153,9 +153,9 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     cx,\n                     INDEXING_SLICING,\n                     expr.span,\n-                    \"indexing may panic.\",\n+                    \"indexing may panic\",\n                     None,\n-                    \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n+                    \"consider using `.get(n)` or `.get_mut(n)` instead\",\n                 );\n             }\n         }"}, {"sha": "39b4605e72f103b6024bcbc03c02c15fb2d77dc3", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> LateLintPass<'tcx> for IntegerDivision {\n                 expr.span,\n                 \"integer division\",\n                 None,\n-                \"division of integers may cause loss of precision. consider using floats.\",\n+                \"division of integers may cause loss of precision. consider using floats\",\n             );\n         }\n     }"}, {"sha": "3ff9e1821210626f9e5ad6c0630a5c383f15c444", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1625,10 +1625,7 @@ fn check_for_loop_range<'tcx>(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         expr.span,\n-                        &format!(\n-                            \"the loop variable `{}` is only used to index `{}`.\",\n-                            ident.name, indexed\n-                        ),\n+                        &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n@@ -1763,7 +1760,7 @@ fn check_arg_type(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n-                `if let` statement.\",\n+                `if let` statement\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,\n@@ -1780,7 +1777,7 @@ fn check_arg_type(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\\n-                `if let` statement.\",\n+                `if let` statement\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,\n@@ -1826,7 +1823,7 @@ fn check_for_loop_explicit_counter<'tcx>(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n                         for_span.with_hi(arg.span.hi()),\n-                        &format!(\"the variable `{}` is used as a loop counter.\", name),\n+                        &format!(\"the variable `{}` is used as a loop counter\", name),\n                         \"consider using\",\n                         format!(\n                             \"for ({}, {}) in {}.enumerate()\",\n@@ -3055,16 +3052,16 @@ impl IterFunction {\n     fn get_suggestion_text(&self) -> &'static str {\n         match &self.func {\n             IterFunctionKind::IntoIter => {\n-                \"Use the original Iterator instead of collecting it and then producing a new one\"\n+                \"use the original Iterator instead of collecting it and then producing a new one\"\n             },\n             IterFunctionKind::Len => {\n-                \"Take the original Iterator's count instead of collecting it and finding the length\"\n+                \"take the original Iterator's count instead of collecting it and finding the length\"\n             },\n             IterFunctionKind::IsEmpty => {\n-                \"Check if the original Iterator has anything instead of collecting it and seeing if it's empty\"\n+                \"check if the original Iterator has anything instead of collecting it and seeing if it's empty\"\n             },\n             IterFunctionKind::Contains(_) => {\n-                \"Check if the original Iterator contains an element instead of collecting then checking\"\n+                \"check if the original Iterator contains an element instead of collecting then checking\"\n             },\n         }\n     }"}, {"sha": "0d79ffbe944e54ca5f66dd964960519b7ad8c936", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1173,9 +1173,9 @@ fn check_wild_in_or_pats(cx: &LateContext<'_>, arms: &[Arm<'_>]) {\n                     cx,\n                     WILDCARD_IN_OR_PATTERNS,\n                     arm.pat.span,\n-                    \"wildcard pattern covers any other pattern as it will match anyway.\",\n+                    \"wildcard pattern covers any other pattern as it will match anyway\",\n                     None,\n-                    \"Consider handling `_` separately.\",\n+                    \"consider handling `_` separately\",\n                 );\n             }\n         }"}, {"sha": "f5c01ac772987bb8e2eb2de9ab418d18ca4ec51e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -3081,7 +3081,7 @@ fn lint_filter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, fil\n     // lint if caller of `.filter().next()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find(..)` instead.\";\n+                   `.find(..)` instead\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n             let iter_snippet = snippet(cx, filter_args[0].span, \"..\");\n@@ -3209,7 +3209,7 @@ fn lint_filter_map_next<'tcx>(\n         }\n \n         let msg = \"called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n-                   `.find_map(..)` instead.\";\n+                   `.find_map(..)` instead\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n             let iter_snippet = snippet(cx, filter_args[0].span, \"..\");"}, {"sha": "40ccb8c80b342aa758a3e905b748d147b0a3640f", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -50,7 +50,7 @@ pub(super) fn lint<'tcx>(\n                     UNNECESSARY_LAZY_EVALUATIONS,\n                     expr.span,\n                     msg,\n-                    &format!(\"Use `{}` instead\", simplify_using),\n+                    &format!(\"use `{}` instead\", simplify_using),\n                     format!(\n                         \"{0}.{1}({2})\",\n                         snippet(cx, args[0].span, \"..\"),"}, {"sha": "12f91d7bf639b320793447aa31ca1d70f8096641", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -292,7 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                     TOPLEVEL_REF_ARG,\n                     arg.pat.span,\n                     \"`ref` directly on a function argument is ignored. \\\n-                    Consider using a reference type instead.\",\n+                    Consider using a reference type instead\",\n                 );\n             }\n         }\n@@ -422,7 +422,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 expr.span,\n                 &format!(\n                     \"used binding `{}` which is prefixed with an underscore. A leading \\\n-                     underscore signals that a binding will not be used.\",\n+                     underscore signals that a binding will not be used\",\n                     binding\n                 ),\n             );"}, {"sha": "a3293f1b3614925d017d33ce0e4a8546c0e92ef4", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -142,7 +142,7 @@ fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n         cx,\n         NEEDLESS_QUESTION_MARK,\n         entire_expr.span,\n-        \"Question mark operator is useless here\",\n+        \"question mark operator is useless here\",\n         \"try\",\n         format!(\"{}\", utils::snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n         Applicability::MachineApplicable,"}, {"sha": "5474fdf30bfaf6bad24c7685ec6e2dcf1f91dbad", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -188,7 +188,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         PTR_ARG,\n                         arg.span,\n                         \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n-                         with non-Vec-based slices.\",\n+                         with non-Vec-based slices\",\n                         |diag| {\n                             if let Some(ref snippet) = get_only_generic_arg_snippet(cx, arg) {\n                                 diag.span_suggestion(\n@@ -217,7 +217,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         cx,\n                         PTR_ARG,\n                         arg.span,\n-                        \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n+                        \"writing `&String` instead of `&str` involves a new object where a slice will do\",\n                         |diag| {\n                             diag.span_suggestion(arg.span, \"change this to\", \"&str\".into(), Applicability::Unspecified);\n                             for (clonespan, suggestion) in spans {\n@@ -239,7 +239,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         cx,\n                         PTR_ARG,\n                         arg.span,\n-                        \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\",\n+                        \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\",\n                         |diag| {\n                             diag.span_suggestion(\n                                 arg.span,\n@@ -278,7 +278,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                                 cx,\n                                 PTR_ARG,\n                                 arg.span,\n-                                \"using a reference to `Cow` is not recommended.\",\n+                                \"using a reference to `Cow` is not recommended\",\n                                 \"change this to\",\n                                 \"&\".to_owned() + &r,\n                                 Applicability::Unspecified,"}, {"sha": "2ff30698043dc10e852c69c47b88b7fb5d9dbed3", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -261,7 +261,7 @@ fn emit_suggestion(cx: &EarlyContext<'_>, span: Span, sugg: String, applicabilit\n         cx,\n         SUSPICIOUS_OPERATION_GROUPINGS,\n         span,\n-        \"This sequence of operators looks suspiciously like a bug.\",\n+        \"this sequence of operators looks suspiciously like a bug\",\n         \"I think you meant\",\n         sugg,\n         applicability,"}, {"sha": "2ba2b646f004fba256c2d05cf061ce2f2bdd6e80", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(TransmutingNull => [TRANSMUTING_NULL]);\n \n-const LINT_MSG: &str = \"transmuting a known null pointer into a reference.\";\n+const LINT_MSG: &str = \"transmuting a known null pointer into a reference\";\n \n impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "a18cba6fb44bdc8dba78786285765f6fe3c4058f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -388,7 +388,7 @@ impl Types {\n                                 hir_ty.span,\n                                 \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n                                 None,\n-                                \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n+                                \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\",\n                             );\n                             return; // don't recurse into the type\n                         }\n@@ -554,7 +554,7 @@ impl Types {\n                                     cx,\n                                     VEC_BOX,\n                                     hir_ty.span,\n-                                    \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n+                                    \"`Vec<T>` is already on the heap, the boxing is unnecessary\",\n                                     \"try\",\n                                     format!(\"Vec<{}>\", snippet(cx, boxed_ty.span, \"..\")),\n                                     Applicability::MachineApplicable,"}, {"sha": "11d96e15ff1512914717e6d8af61c62f42e7ff64", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for ZeroDiv {\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     None,\n                     &format!(\n-                        \"Consider using `{}::NAN` if you would like a constant representing NaN\",\n+                        \"consider using `{}::NAN` if you would like a constant representing NaN\",\n                         float_type,\n                     ),\n                 );"}, {"sha": "e316a884996d4a43373db8dc87030356f3bcadb5", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -38,8 +38,11 @@ impl Message {\n             r\".*the arguments may be inverted...\",\n             r\".*Intel x86 assembly syntax used\",\n             r\".*AT&T x86 assembly syntax used\",\n-            r\".*remove .* the return type...\",\n+            r\".*remove .*the return type...\",\n             r\"note: Clippy version: .*\",\n+            r\"the compiler unexpectedly panicked. this is a bug.\",\n+            r\".*help: I think you meant: .*\",\n+            r\"Iterator.* will panic at runtime\",\n         ])\n         .unwrap();\n \n@@ -96,7 +99,7 @@ fn lint_message_convention() {\n \n     eprintln!(\"\\n\\n\\nLint message should not start with a capital letter and should not have punctuation at the end of the message unless multiple sentences are needed.\");\n     eprintln!(\"Check out the rustc-dev-guide for more information:\");\n-    eprintln!(\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-structure\");\n+    eprintln!(\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-structure\\n\\n\\n\");\n \n     assert!(bad_tests.is_empty());\n }"}, {"sha": "cf194de3c55375f2aba1422fcf45527846678180", "filename": "tests/ui-toml/vec_box_sized/test.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui-toml%2Fvec_box_sized%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui-toml%2Fvec_box_sized%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fvec_box_sized%2Ftest.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,18 +1,18 @@\n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/test.rs:9:12\n    |\n LL | struct Foo(Vec<Box<u8>>);\n    |            ^^^^^^^^^^^^ help: try: `Vec<u8>`\n    |\n    = note: `-D clippy::vec-box` implied by `-D warnings`\n \n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/test.rs:10:12\n    |\n LL | struct Bar(Vec<Box<u32>>);\n    |            ^^^^^^^^^^^^^ help: try: `Vec<u32>`\n \n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/test.rs:13:18\n    |\n LL | struct FooBarBaz(Vec<Box<C>>);"}, {"sha": "e40668ed339f2ef40bf41e80d0fab5c881427110", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -5,7 +5,7 @@ LL |     a += a + 1;\n    |     ^^^^^^^^^^\n    |\n    = note: `-D clippy::misrefactored-assign-op` implied by `-D warnings`\n-help: Did you mean `a = a + 1` or `a = a + a + 1`? Consider replacing it with\n+help: did you mean `a = a + 1` or `a = a + a + 1`? Consider replacing it with\n    |\n LL |     a += 1;\n    |     ^^^^^^\n@@ -20,7 +20,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a += 1 + a;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean `a = a + 1` or `a = a + 1 + a`? Consider replacing it with\n+help: did you mean `a = a + 1` or `a = a + 1 + a`? Consider replacing it with\n    |\n LL |     a += 1;\n    |     ^^^^^^\n@@ -35,7 +35,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a -= a - 1;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean `a = a - 1` or `a = a - (a - 1)`? Consider replacing it with\n+help: did you mean `a = a - 1` or `a = a - (a - 1)`? Consider replacing it with\n    |\n LL |     a -= 1;\n    |     ^^^^^^\n@@ -50,7 +50,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a *= a * 99;\n    |     ^^^^^^^^^^^\n    |\n-help: Did you mean `a = a * 99` or `a = a * a * 99`? Consider replacing it with\n+help: did you mean `a = a * 99` or `a = a * a * 99`? Consider replacing it with\n    |\n LL |     a *= 99;\n    |     ^^^^^^^\n@@ -65,7 +65,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a *= 42 * a;\n    |     ^^^^^^^^^^^\n    |\n-help: Did you mean `a = a * 42` or `a = a * 42 * a`? Consider replacing it with\n+help: did you mean `a = a * 42` or `a = a * 42 * a`? Consider replacing it with\n    |\n LL |     a *= 42;\n    |     ^^^^^^^\n@@ -80,7 +80,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a /= a / 2;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean `a = a / 2` or `a = a / (a / 2)`? Consider replacing it with\n+help: did you mean `a = a / 2` or `a = a / (a / 2)`? Consider replacing it with\n    |\n LL |     a /= 2;\n    |     ^^^^^^\n@@ -95,7 +95,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a %= a % 5;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean `a = a % 5` or `a = a % (a % 5)`? Consider replacing it with\n+help: did you mean `a = a % 5` or `a = a % (a % 5)`? Consider replacing it with\n    |\n LL |     a %= 5;\n    |     ^^^^^^\n@@ -110,7 +110,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a &= a & 1;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean `a = a & 1` or `a = a & a & 1`? Consider replacing it with\n+help: did you mean `a = a & 1` or `a = a & a & 1`? Consider replacing it with\n    |\n LL |     a &= 1;\n    |     ^^^^^^\n@@ -125,7 +125,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a *= a * a;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean `a = a * a` or `a = a * a * a`? Consider replacing it with\n+help: did you mean `a = a * a` or `a = a * a * a`? Consider replacing it with\n    |\n LL |     a *= a;\n    |     ^^^^^^"}, {"sha": "a5fcff7e0e44363f02087f6c87fdfacc46638734", "filename": "tests/ui/await_holding_lock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fawait_holding_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fawait_holding_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_lock.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n+error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n   --> $DIR/await_holding_lock.rs:7:9\n    |\n LL |     let guard = x.lock().unwrap();\n@@ -13,7 +13,7 @@ LL | |     baz().await\n LL | | }\n    | |_^\n \n-error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n+error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n   --> $DIR/await_holding_lock.rs:28:9\n    |\n LL |     let guard = x.lock().unwrap();\n@@ -31,7 +31,7 @@ LL | |     first + second + third\n LL | | }\n    | |_^\n \n-error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n+error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n   --> $DIR/await_holding_lock.rs:41:13\n    |\n LL |         let guard = x.lock().unwrap();\n@@ -45,7 +45,7 @@ LL | |         baz().await\n LL | |     };\n    | |_____^\n \n-error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n+error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n   --> $DIR/await_holding_lock.rs:53:13\n    |\n LL |         let guard = x.lock().unwrap();"}, {"sha": "55e41dbca96f834046b43c624e377ddcb6bbb6d3", "filename": "tests/ui/await_holding_refcell_ref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n   --> $DIR/await_holding_refcell_ref.rs:7:9\n    |\n LL |     let b = x.borrow();\n@@ -13,7 +13,7 @@ LL | |     baz().await\n LL | | }\n    | |_^\n \n-error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n   --> $DIR/await_holding_refcell_ref.rs:12:9\n    |\n LL |     let b = x.borrow_mut();\n@@ -27,7 +27,7 @@ LL | |     baz().await\n LL | | }\n    | |_^\n \n-error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n   --> $DIR/await_holding_refcell_ref.rs:33:9\n    |\n LL |     let b = x.borrow_mut();\n@@ -45,7 +45,7 @@ LL | |     first + second + third\n LL | | }\n    | |_^\n \n-error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n   --> $DIR/await_holding_refcell_ref.rs:45:9\n    |\n LL |     let b = x.borrow_mut();\n@@ -63,7 +63,7 @@ LL | |     first + second + third\n LL | | }\n    | |_^\n \n-error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n   --> $DIR/await_holding_refcell_ref.rs:60:13\n    |\n LL |         let b = x.borrow_mut();\n@@ -77,7 +77,7 @@ LL | |         baz().await\n LL | |     };\n    | |_____^\n \n-error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n   --> $DIR/await_holding_refcell_ref.rs:72:13\n    |\n LL |         let b = x.borrow_mut();"}, {"sha": "9b789334baeecb8db138d49f08db25a68509af78", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -5,7 +5,7 @@ LL | pub fn test(foo: Box<Vec<bool>>) {\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::box-vec` implied by `-D warnings`\n-   = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n+   = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\n \n error: aborting due to previous error\n "}, {"sha": "be25a80dde0a199f80741787c8254b1e71e649af", "filename": "tests/ui/comparison_chain.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fcomparison_chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fcomparison_chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_chain.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -9,7 +9,7 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::comparison-chain` implied by `-D warnings`\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:27:5\n@@ -23,7 +23,7 @@ LL | |         c()\n LL | |     }\n    | |_____^\n    |\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:35:5\n@@ -37,7 +37,7 @@ LL | |         c()\n LL | |     }\n    | |_____^\n    |\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:43:5\n@@ -51,7 +51,7 @@ LL | |         c()\n LL | |     }\n    | |_____^\n    |\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:117:5\n@@ -63,7 +63,7 @@ LL | |         b()\n LL | |     }\n    | |_____^\n    |\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:123:5\n@@ -77,7 +77,7 @@ LL | |         c()\n LL | |     }\n    | |_____^\n    |\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: `if` chain can be rewritten with `match`\n   --> $DIR/comparison_chain.rs:131:5\n@@ -91,7 +91,7 @@ LL | |         c()\n LL | |     }\n    | |_____^\n    |\n-   = help: Consider rewriting the `if` chain to use `cmp` and `match`.\n+   = help: consider rewriting the `if` chain to use `cmp` and `match`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "01de0be7caea96cb907223cb49ddce57233d6eef", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:33:5\n    |\n LL |     drop(s1);\n@@ -11,7 +11,7 @@ note: argument has type SomeStruct\n LL |     drop(s1);\n    |          ^^\n \n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:34:5\n    |\n LL |     drop(s2);\n@@ -23,7 +23,7 @@ note: argument has type SomeStruct\n LL |     drop(s2);\n    |          ^^\n \n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:36:5\n    |\n LL |     drop(s4);\n@@ -35,7 +35,7 @@ note: argument has type SomeStruct\n LL |     drop(s4);\n    |          ^^\n \n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:39:5\n    |\n LL |     forget(s1);\n@@ -48,7 +48,7 @@ note: argument has type SomeStruct\n LL |     forget(s1);\n    |            ^^\n \n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:40:5\n    |\n LL |     forget(s2);\n@@ -60,7 +60,7 @@ note: argument has type SomeStruct\n LL |     forget(s2);\n    |            ^^\n \n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n   --> $DIR/drop_forget_copy.rs:42:5\n    |\n LL |     forget(s4);"}, {"sha": "531849f0680ae7ce424443ae6a2d9c13c34985e1", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:11:5\n    |\n LL |     drop(&SomeStruct);\n@@ -11,7 +11,7 @@ note: argument has type `&SomeStruct`\n LL |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:14:5\n    |\n LL |     drop(&owned1);\n@@ -23,7 +23,7 @@ note: argument has type `&SomeStruct`\n LL |     drop(&owned1);\n    |          ^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:15:5\n    |\n LL |     drop(&&owned1);\n@@ -35,7 +35,7 @@ note: argument has type `&&SomeStruct`\n LL |     drop(&&owned1);\n    |          ^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:16:5\n    |\n LL |     drop(&mut owned1);\n@@ -47,7 +47,7 @@ note: argument has type `&mut SomeStruct`\n LL |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:20:5\n    |\n LL |     drop(reference1);\n@@ -59,7 +59,7 @@ note: argument has type `&SomeStruct`\n LL |     drop(reference1);\n    |          ^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:23:5\n    |\n LL |     drop(reference2);\n@@ -71,7 +71,7 @@ note: argument has type `&mut SomeStruct`\n LL |     drop(reference2);\n    |          ^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:26:5\n    |\n LL |     drop(reference3);\n@@ -83,7 +83,7 @@ note: argument has type `&SomeStruct`\n LL |     drop(reference3);\n    |          ^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:31:5\n    |\n LL |     drop(&val);\n@@ -95,7 +95,7 @@ note: argument has type `&T`\n LL |     drop(&val);\n    |          ^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n   --> $DIR/drop_ref.rs:39:5\n    |\n LL |     std::mem::drop(&SomeStruct);"}, {"sha": "4cbacffe87bf47ce06072b8e263ba772e609258b", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,42 +1,42 @@\n-error: the variable `_index` is used as a loop counter.\n+error: the variable `_index` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:6:5\n    |\n LL |     for _v in &vec {\n    |     ^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n    |\n    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n \n-error: the variable `_index` is used as a loop counter.\n+error: the variable `_index` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:12:5\n    |\n LL |     for _v in &vec {\n    |     ^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n \n-error: the variable `_index` is used as a loop counter.\n+error: the variable `_index` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:17:5\n    |\n LL |     for _v in &mut vec {\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter_mut().enumerate()`\n \n-error: the variable `_index` is used as a loop counter.\n+error: the variable `_index` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:22:5\n    |\n LL |     for _v in vec {\n    |     ^^^^^^^^^^^^^ help: consider using: `for (_index, _v) in vec.into_iter().enumerate()`\n \n-error: the variable `count` is used as a loop counter.\n+error: the variable `count` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:61:9\n    |\n LL |         for ch in text.chars() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n-error: the variable `count` is used as a loop counter.\n+error: the variable `count` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:72:9\n    |\n LL |         for ch in text.chars() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n-error: the variable `count` is used as a loop counter.\n+error: the variable `count` is used as a loop counter\n   --> $DIR/explicit_counter_loop.rs:130:9\n    |\n LL |         for _i in 3..10 {"}, {"sha": "a938d234fa07b0cad80a8eb012c655eb452684b7", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -13,7 +13,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(clippy::fallible_impl_from)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:7:13\n    |\n@@ -32,7 +32,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:29:13\n    |\n@@ -52,7 +52,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:37:17\n    |\n@@ -79,7 +79,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:55:12\n    |"}, {"sha": "ddc982c93fe6d9838affcb89844978ce09fee1fb", "filename": "tests/ui/filter_map_next.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffilter_map_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffilter_map_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead\n   --> $DIR/filter_map_next.rs:7:26\n    |\n LL |       let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]"}, {"sha": "3bb062ffd7a32ab6f20b66770a58963c4ec1e564", "filename": "tests/ui/filter_map_next_fixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffilter_map_next_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffilter_map_next_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead\n   --> $DIR/filter_map_next_fixable.rs:8:32\n    |\n LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();"}, {"sha": "52b94875aec4d9cf483dee622a0f0cf31cfaf637", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n+error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:9:14\n    |\n LL |     for x in option {\n@@ -7,15 +7,15 @@ LL |     for x in option {\n    = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:14:14\n    |\n LL |     for x in result {\n    |              ^^^^^^\n    |\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n-error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:18:14\n    |\n LL |     for x in option.ok_or(\"x not found\") {\n@@ -31,15 +31,15 @@ LL |     for x in v.iter().next() {\n    |\n    = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n-error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n+error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:29:14\n    |\n LL |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n-error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:33:14\n    |\n LL |     for x in v.iter().next().ok_or(\"x not found\") {"}, {"sha": "73409388ed16ad0ae9adf9006788a747a26dac31", "filename": "tests/ui/forget_ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n@@ -11,7 +11,7 @@ note: argument has type `&SomeStruct`\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:13:5\n    |\n LL |     forget(&owned);\n@@ -23,7 +23,7 @@ note: argument has type `&SomeStruct`\n LL |     forget(&owned);\n    |            ^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&&owned);\n@@ -35,7 +35,7 @@ note: argument has type `&&SomeStruct`\n LL |     forget(&&owned);\n    |            ^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&mut owned);\n@@ -47,7 +47,7 @@ note: argument has type `&mut SomeStruct`\n LL |     forget(&mut owned);\n    |            ^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:19:5\n    |\n LL |     forget(&*reference1);\n@@ -59,7 +59,7 @@ note: argument has type `&SomeStruct`\n LL |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:22:5\n    |\n LL |     forget(reference2);\n@@ -71,7 +71,7 @@ note: argument has type `&mut SomeStruct`\n LL |     forget(reference2);\n    |            ^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:25:5\n    |\n LL |     forget(reference3);\n@@ -83,7 +83,7 @@ note: argument has type `&SomeStruct`\n LL |     forget(reference3);\n    |            ^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:30:5\n    |\n LL |     forget(&val);\n@@ -95,7 +95,7 @@ note: argument has type `&T`\n LL |     forget(&val);\n    |            ^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n   --> $DIR/forget_ref.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);"}, {"sha": "76ecec3348400f98e02de0356d316a619061c261", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,51 +1,51 @@\n-error: indexing may panic.\n+error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:10:5\n    |\n LL |     x[index];\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n-   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic.\n+error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:22:5\n    |\n LL |     v[0];\n    |     ^^^^\n    |\n-   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic.\n+error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:23:5\n    |\n LL |     v[10];\n    |     ^^^^^\n    |\n-   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic.\n+error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:24:5\n    |\n LL |     v[1 << 3];\n    |     ^^^^^^^^^\n    |\n-   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic.\n+error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:30:5\n    |\n LL |     v[N];\n    |     ^^^^\n    |\n-   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic.\n+error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:31:5\n    |\n LL |     v[M];\n    |     ^^^^\n    |\n-   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f70722b92a5b8186738a754850e171e3e8e93c42", "filename": "tests/ui/indexing_slicing_slice.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Findexing_slicing_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Findexing_slicing_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_slice.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,51 +1,51 @@\n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:12:6\n    |\n LL |     &x[index..];\n    |      ^^^^^^^^^^\n    |\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:13:6\n    |\n LL |     &x[..index];\n    |      ^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:14:6\n    |\n LL |     &x[index_from..index_to];\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:15:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:15:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:16:6\n    |\n LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |      ^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:16:8\n@@ -55,21 +55,21 @@ LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and ano\n    |\n    = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:17:6\n    |\n LL |     &x[0..][..3];\n    |      ^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:18:6\n    |\n LL |     &x[1..][..5];\n    |      ^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:25:12\n@@ -83,43 +83,43 @@ error: range is out of bounds\n LL |     &y[..=4];\n    |           ^\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:31:6\n    |\n LL |     &v[10..100];\n    |      ^^^^^^^^^^\n    |\n-   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:32:6\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |      ^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:32:8\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |        ^^\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:33:6\n    |\n LL |     &v[10..];\n    |      ^^^^^^^\n    |\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: slicing may panic.\n+error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:34:6\n    |\n LL |     &v[..100];\n    |      ^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "cbb7f881424956b51d75bab6d1eee7d188625714", "filename": "tests/ui/integer_division.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Finteger_division.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Finteger_division.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_division.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -5,23 +5,23 @@ LL |     let n = 1 / 2;\n    |             ^^^^^\n    |\n    = note: `-D clippy::integer-division` implied by `-D warnings`\n-   = help: division of integers may cause loss of precision. consider using floats.\n+   = help: division of integers may cause loss of precision. consider using floats\n \n error: integer division\n   --> $DIR/integer_division.rs:6:13\n    |\n LL |     let o = 1 / two;\n    |             ^^^^^^^\n    |\n-   = help: division of integers may cause loss of precision. consider using floats.\n+   = help: division of integers may cause loss of precision. consider using floats\n \n error: integer division\n   --> $DIR/integer_division.rs:7:13\n    |\n LL |     let p = two / 4;\n    |             ^^^^^^^\n    |\n-   = help: division of integers may cause loss of precision. consider using floats.\n+   = help: division of integers may cause loss of precision. consider using floats\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4643e09e2702835ac9803b6050b49f1ba7267171", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -8,7 +8,7 @@ LL | |     }\n    |\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n-error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n   --> $DIR/methods.rs:126:13\n    |\n LL |       let _ = v.iter().filter(|&x| {"}, {"sha": "852f48e32d678aa91a2fd32a591fa917212747d3", "filename": "tests/ui/methods_fixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fmethods_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fmethods_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n   --> $DIR/methods_fixable.rs:10:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();"}, {"sha": "ea39f5b5577beb12803a059f1b3c9322098e55c6", "filename": "tests/ui/mismatched_target_os_unix.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fmismatched_target_os_unix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fmismatched_target_os_unix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_unix.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -7,7 +7,7 @@ LL | #[cfg(linux)]\n    |       help: try: `target_os = \"linux\"`\n    |\n    = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:9:1\n@@ -17,7 +17,7 @@ LL | #[cfg(freebsd)]\n    |       |\n    |       help: try: `target_os = \"freebsd\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:12:1\n@@ -27,7 +27,7 @@ LL | #[cfg(dragonfly)]\n    |       |\n    |       help: try: `target_os = \"dragonfly\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:15:1\n@@ -37,7 +37,7 @@ LL | #[cfg(openbsd)]\n    |       |\n    |       help: try: `target_os = \"openbsd\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:18:1\n@@ -47,7 +47,7 @@ LL | #[cfg(netbsd)]\n    |       |\n    |       help: try: `target_os = \"netbsd\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:21:1\n@@ -57,7 +57,7 @@ LL | #[cfg(macos)]\n    |       |\n    |       help: try: `target_os = \"macos\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:24:1\n@@ -67,7 +67,7 @@ LL | #[cfg(ios)]\n    |       |\n    |       help: try: `target_os = \"ios\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:27:1\n@@ -77,7 +77,7 @@ LL | #[cfg(android)]\n    |       |\n    |       help: try: `target_os = \"android\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:30:1\n@@ -87,7 +87,7 @@ LL | #[cfg(emscripten)]\n    |       |\n    |       help: try: `target_os = \"emscripten\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:33:1\n@@ -97,7 +97,7 @@ LL | #[cfg(fuchsia)]\n    |       |\n    |       help: try: `target_os = \"fuchsia\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:36:1\n@@ -107,7 +107,7 @@ LL | #[cfg(haiku)]\n    |       |\n    |       help: try: `target_os = \"haiku\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:39:1\n@@ -117,7 +117,7 @@ LL | #[cfg(illumos)]\n    |       |\n    |       help: try: `target_os = \"illumos\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:42:1\n@@ -127,7 +127,7 @@ LL | #[cfg(l4re)]\n    |       |\n    |       help: try: `target_os = \"l4re\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:45:1\n@@ -137,7 +137,7 @@ LL | #[cfg(redox)]\n    |       |\n    |       help: try: `target_os = \"redox\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:48:1\n@@ -147,7 +147,7 @@ LL | #[cfg(solaris)]\n    |       |\n    |       help: try: `target_os = \"solaris\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:51:1\n@@ -157,15 +157,15 @@ LL | #[cfg(vxworks)]\n    |       |\n    |       help: try: `target_os = \"vxworks\"`\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n \n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_unix.rs:55:1\n    |\n LL | #[cfg(all(not(any(solaris, linux)), freebsd))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Did you mean `unix`?\n+   = help: did you mean `unix`?\n help: try\n    |\n LL | #[cfg(all(not(any(target_os = \"solaris\", linux)), freebsd))]"}, {"sha": "76e789d90525495e6200688688b566237c98586a", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -6,7 +6,7 @@ LL | |     indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>\n    | |____^\n    |\n    = note: `-D clippy::needless-collect` implied by `-D warnings`\n-help: Use the original Iterator instead of collecting it and then producing a new one\n+help: use the original Iterator instead of collecting it and then producing a new one\n    |\n LL |     \n LL |     sample.iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n@@ -19,7 +19,7 @@ LL | /     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_len.len();\n    | |____^\n    |\n-help: Take the original Iterator's count instead of collecting it and finding the length\n+help: take the original Iterator's count instead of collecting it and finding the length\n    |\n LL |     \n LL |     sample.iter().count();\n@@ -32,7 +32,7 @@ LL | /     let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_empty.is_empty();\n    | |____^\n    |\n-help: Check if the original Iterator has anything instead of collecting it and seeing if it's empty\n+help: check if the original Iterator has anything instead of collecting it and seeing if it's empty\n    |\n LL |     \n LL |     sample.iter().next().is_none();\n@@ -45,7 +45,7 @@ LL | /     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_contains.contains(&&5);\n    | |____^\n    |\n-help: Check if the original Iterator contains an element instead of collecting then checking\n+help: check if the original Iterator contains an element instead of collecting then checking\n    |\n LL |     \n LL |     sample.iter().any(|x| x == &5);\n@@ -58,7 +58,7 @@ LL | /     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n LL | |     non_copy_contains.contains(&a);\n    | |____^\n    |\n-help: Check if the original Iterator contains an element instead of collecting then checking\n+help: check if the original Iterator contains an element instead of collecting then checking\n    |\n LL |     \n LL |     sample.into_iter().any(|x| x == a);"}, {"sha": "983c56031d8f5301879a48ce16497a35ce065c5d", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,84 +1,84 @@\n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:23:12\n    |\n LL |     return Some(to.magic?);\n    |            ^^^^^^^^^^^^^^^ help: try: `to.magic`\n    |\n    = note: `-D clippy::needless-question-mark` implied by `-D warnings`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:31:12\n    |\n LL |     return Some(to.magic?)\n    |            ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:36:5\n    |\n LL |     Some(to.magic?)\n    |     ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:41:21\n    |\n LL |     to.and_then(|t| Some(t.magic?))\n    |                     ^^^^^^^^^^^^^^ help: try: `t.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:50:9\n    |\n LL |         Some(t.magic?)\n    |         ^^^^^^^^^^^^^^ help: try: `t.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:55:12\n    |\n LL |     return Ok(tr.magic?);\n    |            ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:62:12\n    |\n LL |     return Ok(tr.magic?)\n    |            ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:66:5\n    |\n LL |     Ok(tr.magic?)\n    |     ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:70:21\n    |\n LL |     tr.and_then(|t| Ok(t.magic?))\n    |                     ^^^^^^^^^^^^ help: try: `t.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:78:9\n    |\n LL |         Ok(t.magic?)\n    |         ^^^^^^^^^^^^ help: try: `t.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:85:16\n    |\n LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try: `t.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:138:9\n    |\n LL |         Ok(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^ help: try: `to.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:154:9\n    |\n LL |         Some(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n-error: Question mark operator is useless here\n+error: question mark operator is useless here\n   --> $DIR/needless_question_mark.rs:162:9\n    |\n LL |         Ok(to.magic?) // should be triggered"}, {"sha": "c898cd64a93925e0b5ef45fc640825bff9ff8f6d", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:10:14\n    |\n LL |     for i in 0..vec.len() {\n@@ -10,7 +10,7 @@ help: consider using an iterator\n LL |     for <item> in &vec {\n    |         ^^^^^^    ^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:19:14\n    |\n LL |     for i in 0..vec.len() {\n@@ -21,7 +21,7 @@ help: consider using an iterator\n LL |     for <item> in &vec {\n    |         ^^^^^^    ^^^^\n \n-error: the loop variable `j` is only used to index `STATIC`.\n+error: the loop variable `j` is only used to index `STATIC`\n   --> $DIR/needless_range_loop.rs:24:14\n    |\n LL |     for j in 0..4 {\n@@ -32,7 +32,7 @@ help: consider using an iterator\n LL |     for <item> in &STATIC {\n    |         ^^^^^^    ^^^^^^^\n \n-error: the loop variable `j` is only used to index `CONST`.\n+error: the loop variable `j` is only used to index `CONST`\n   --> $DIR/needless_range_loop.rs:28:14\n    |\n LL |     for j in 0..4 {\n@@ -54,7 +54,7 @@ help: consider using an iterator\n LL |     for (i, <item>) in vec.iter().enumerate() {\n    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec2`.\n+error: the loop variable `i` is only used to index `vec2`\n   --> $DIR/needless_range_loop.rs:40:14\n    |\n LL |     for i in 0..vec.len() {\n@@ -65,7 +65,7 @@ help: consider using an iterator\n LL |     for <item> in vec2.iter().take(vec.len()) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:44:14\n    |\n LL |     for i in 5..vec.len() {\n@@ -76,7 +76,7 @@ help: consider using an iterator\n LL |     for <item> in vec.iter().skip(5) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:48:14\n    |\n LL |     for i in 0..MAX_LEN {\n@@ -87,7 +87,7 @@ help: consider using an iterator\n LL |     for <item> in vec.iter().take(MAX_LEN) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:52:14\n    |\n LL |     for i in 0..=MAX_LEN {\n@@ -98,7 +98,7 @@ help: consider using an iterator\n LL |     for <item> in vec.iter().take(MAX_LEN + 1) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:56:14\n    |\n LL |     for i in 5..10 {\n@@ -109,7 +109,7 @@ help: consider using an iterator\n LL |     for <item> in vec.iter().take(10).skip(5) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop.rs:60:14\n    |\n LL |     for i in 5..=10 {"}, {"sha": "2e1f0fd0299b4cfb168785cc34b2bc11cfdf4110", "filename": "tests/ui/needless_range_loop2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_range_loop2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fneedless_range_loop2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop2.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,4 +1,4 @@\n-error: the loop variable `i` is only used to index `ns`.\n+error: the loop variable `i` is only used to index `ns`\n   --> $DIR/needless_range_loop2.rs:10:14\n    |\n LL |     for i in 3..10 {\n@@ -10,7 +10,7 @@ help: consider using an iterator\n LL |     for <item> in ns.iter().take(10).skip(3) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `ms`.\n+error: the loop variable `i` is only used to index `ms`\n   --> $DIR/needless_range_loop2.rs:31:14\n    |\n LL |     for i in 0..ms.len() {\n@@ -21,7 +21,7 @@ help: consider using an iterator\n LL |     for <item> in &mut ms {\n    |         ^^^^^^    ^^^^^^^\n \n-error: the loop variable `i` is only used to index `ms`.\n+error: the loop variable `i` is only used to index `ms`\n   --> $DIR/needless_range_loop2.rs:37:14\n    |\n LL |     for i in 0..ms.len() {\n@@ -32,7 +32,7 @@ help: consider using an iterator\n LL |     for <item> in &mut ms {\n    |         ^^^^^^    ^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop2.rs:61:14\n    |\n LL |     for i in x..x + 4 {\n@@ -43,7 +43,7 @@ help: consider using an iterator\n LL |     for <item> in vec.iter_mut().skip(x).take(4) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `vec`.\n+error: the loop variable `i` is only used to index `vec`\n   --> $DIR/needless_range_loop2.rs:68:14\n    |\n LL |     for i in x..=x + 4 {\n@@ -54,7 +54,7 @@ help: consider using an iterator\n LL |     for <item> in vec.iter_mut().skip(x).take(4 + 1) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `arr`.\n+error: the loop variable `i` is only used to index `arr`\n   --> $DIR/needless_range_loop2.rs:74:14\n    |\n LL |     for i in 0..3 {\n@@ -65,7 +65,7 @@ help: consider using an iterator\n LL |     for <item> in &arr {\n    |         ^^^^^^    ^^^^\n \n-error: the loop variable `i` is only used to index `arr`.\n+error: the loop variable `i` is only used to index `arr`\n   --> $DIR/needless_range_loop2.rs:78:14\n    |\n LL |     for i in 0..2 {\n@@ -76,7 +76,7 @@ help: consider using an iterator\n LL |     for <item> in arr.iter().take(2) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n \n-error: the loop variable `i` is only used to index `arr`.\n+error: the loop variable `i` is only used to index `arr`\n   --> $DIR/needless_range_loop2.rs:82:14\n    |\n LL |     for i in 1..3 {"}, {"sha": "d302b16d4b72ac801147a2056717b8f58a699b54", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,30 +1,30 @@\n-error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n   --> $DIR/ptr_arg.rs:7:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n-error: writing `&String` instead of `&str` involves a new object where a slice will do.\n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n-error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:25:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n-error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n   --> $DIR/ptr_arg.rs:38:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n-error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n   --> $DIR/ptr_arg.rs:51:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n@@ -43,7 +43,7 @@ help: change `x.clone()` to\n LL |     x.to_owned()\n    |\n \n-error: writing `&String` instead of `&str` involves a new object where a slice will do.\n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:60:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n@@ -66,7 +66,7 @@ help: change `x.clone()` to\n LL |     x.to_string()\n    |\n \n-error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:68:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n@@ -89,7 +89,7 @@ help: change `x.clone()` to\n LL |     x.to_path_buf()\n    |\n \n-error: writing `&String` instead of `&str` involves a new object where a slice will do.\n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:76:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n@@ -108,13 +108,13 @@ help: change `y.as_str()` to\n LL |     let c = y;\n    |             ^\n \n-error: using a reference to `Cow` is not recommended.\n+error: using a reference to `Cow` is not recommended\n   --> $DIR/ptr_arg.rs:90:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n-error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n   --> $DIR/ptr_arg.rs:143:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n@@ -133,7 +133,7 @@ help: change `vec.clone()` to\n LL |         let _ = vec.to_owned().clone();\n    |                 ^^^^^^^^^^^^^^\n \n-error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:148:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n@@ -152,7 +152,7 @@ help: change `path.clone()` to\n LL |         let _ = path.to_path_buf().clone();\n    |                 ^^^^^^^^^^^^^^^^^^\n \n-error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:153:21\n    |\n LL |     fn foo_str(str: &PathBuf) {"}, {"sha": "2da05399575a1d6b86b0c308bed0bf49c82f5356", "filename": "tests/ui/suspicious_operation_groupings.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fsuspicious_operation_groupings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fsuspicious_operation_groupings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_operation_groupings.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,162 +1,162 @@\n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:14:9\n    |\n LL |         self.x == other.y && self.y == other.y && self.z == other.z\n    |         ^^^^^^^^^^^^^^^^^ help: I think you meant: `self.x == other.x`\n    |\n    = note: `-D clippy::suspicious-operation-groupings` implied by `-D warnings`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:14:9\n    |\n LL |         self.x == other.y && self.y == other.y && self.z == other.z\n    |         ^^^^^^^^^^^^^^^^^ help: I think you meant: `self.x == other.x`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:27:20\n    |\n LL |     s1.a < s2.a && s1.a < s2.b\n    |                    ^^^^^^^^^^^ help: I think you meant: `s1.b < s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:75:33\n    |\n LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d\n    |                                 ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:80:19\n    |\n LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:80:19\n    |\n LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:85:19\n    |\n LL |     s1.a * s2.a + s2.b * s2.b + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:90:19\n    |\n LL |     s1.a * s2.a + s1.b * s1.b + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:95:5\n    |\n LL |     s1.a * s1.a + s1.b * s2.b + s1.c * s2.c\n    |     ^^^^^^^^^^^ help: I think you meant: `s1.a * s2.a`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:100:33\n    |\n LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s1.c\n    |                                 ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:113:20\n    |\n LL |     (s1.a * s2.a + s1.b * s1.b)\n    |                    ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:118:34\n    |\n LL |     (s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d)\n    |                                  ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:123:38\n    |\n LL |     (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)\n    |                                      ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:128:39\n    |\n LL |     ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d))\n    |                                       ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:133:42\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n    |                                          ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:133:42\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n    |                                          ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:138:40\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b)) + (s1.d * s2.d))\n    |                                        ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:143:40\n    |\n LL |     ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)))\n    |                                        ^^^^^^^^^^^ help: I think you meant: `s1.c * s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:148:20\n    |\n LL |     (s1.a * s2.a + s2.b * s2.b) / 2\n    |                    ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:153:35\n    |\n LL |     i32::swap_bytes(s1.a * s2.a + s2.b * s2.b)\n    |                                   ^^^^^^^^^^^ help: I think you meant: `s1.b * s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:158:29\n    |\n LL |     s1.a > 0 && s1.b > 0 && s1.d == s2.c && s1.d == s2.d\n    |                             ^^^^^^^^^^^^ help: I think you meant: `s1.c == s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:163:17\n    |\n LL |     s1.a > 0 && s1.d == s2.c && s1.b > 0 && s1.d == s2.d\n    |                 ^^^^^^^^^^^^ help: I think you meant: `s1.c == s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:172:77\n    |\n LL |     (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.1).0\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: I think you meant: `(n1.inner.2).0 == (n2.inner.2).0`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:186:25\n    |\n LL |         s1.a <= s2.a && s1.a <= s2.b\n    |                         ^^^^^^^^^^^^ help: I think you meant: `s1.b <= s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:192:23\n    |\n LL |     if s1.a < s2.a && s1.a < s2.b {\n    |                       ^^^^^^^^^^^ help: I think you meant: `s1.b < s2.b`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:199:48\n    |\n LL |     -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.b) + -(-s1.d * -s2.d)))\n    |                                                ^^^^^^^^^^^^^ help: I think you meant: `-s1.c * -s2.c`\n \n-error: This sequence of operators looks suspiciously like a bug.\n+error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:204:27\n    |\n LL |     -(if -s1.a < -s2.a && -s1.a < -s2.b { s1.c } else { s2.a })"}, {"sha": "b8cfd987394976da96c02ed4d70624068bbe68b6", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,12 +1,12 @@\n-error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n+error: `ref` directly on a function argument is ignored. Consider using a reference type instead\n   --> $DIR/toplevel_ref_arg_non_rustfix.rs:9:15\n    |\n LL | fn the_answer(ref mut x: u8) {\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n-error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n+error: `ref` directly on a function argument is ignored. Consider using a reference type instead\n   --> $DIR/toplevel_ref_arg_non_rustfix.rs:15:24\n    |\n LL |         fn fun_example(ref _x: usize) {}"}, {"sha": "1848fc2490a00c64a3860145700864745c51d558", "filename": "tests/ui/transmuting_null.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ftransmuting_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Ftransmuting_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmuting_null.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,18 +1,18 @@\n-error: transmuting a known null pointer into a reference.\n+error: transmuting a known null pointer into a reference\n   --> $DIR/transmuting_null.rs:10:23\n    |\n LL |         let _: &u64 = std::mem::transmute(0 as *const u64);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::transmuting-null` implied by `-D warnings`\n \n-error: transmuting a known null pointer into a reference.\n+error: transmuting a known null pointer into a reference\n   --> $DIR/transmuting_null.rs:11:23\n    |\n LL |         let _: &u64 = std::mem::transmute(std::ptr::null::<u64>());\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: transmuting a known null pointer into a reference.\n+error: transmuting a known null pointer into a reference\n   --> $DIR/transmuting_null.rs:21:23\n    |\n LL |         let _: &u64 = std::mem::transmute(ZPTR);"}, {"sha": "cc94bd5cd9e16bcc03ab9b8d765384e19ea3089a", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -2,195 +2,195 @@ error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:35:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `opt.unwrap_or(2)`\n    |\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(astronomers_pi)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `opt.unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(ext_str.some_field)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `opt.unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:39:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `opt.and(ext_opt)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `opt.and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(ext_opt)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `opt.or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:41:13\n    |\n LL |     let _ = opt.or_else(|| None);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(None)`\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `opt.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:42:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `opt.get_or_insert(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `get_or_insert` instead: `opt.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:43:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `opt.ok_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: use `ok_or` instead: `opt.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `nested_tuple_opt.unwrap_or(Some((1, 2)))`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `nested_tuple_opt.unwrap_or(Some((1, 2)))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:47:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Some(10).unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Some(10).unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:48:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `Some(10).and(ext_opt)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `Some(10).and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:49:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(ext_opt)`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `None.or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:50:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `None.get_or_insert(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `get_or_insert` instead: `None.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:51:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `None.ok_or(2)`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^ help: use `ok_or` instead: `None.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:52:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n-   |                            ^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(None)`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `None.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:55:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `deep.0.unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `deep.0.unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:56:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `deep.0.and(ext_opt)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `deep.0.and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `deep.0.or(None)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `deep.0.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `deep.0.get_or_insert(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `get_or_insert` instead: `deep.0.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:59:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `deep.0.ok_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `ok_or` instead: `deep.0.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:79:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(Some(3))`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `None.or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:80:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `deep.0.or(Some(3))`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `deep.0.or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:81:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(Some(3))`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `opt.or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:87:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `res2.unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:88:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(astronomers_pi)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `res2.unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:89:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(ext_str.some_field)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `res2.unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:111:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `res.and(Err(2))`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `res.and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:112:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `res.and(Err(astronomers_pi))`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `res.and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:113:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `res.and(Err(ext_str.some_field))`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `res.and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:115:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `res.or(Ok(2))`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `res.or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:116:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `res.or(Ok(astronomers_pi))`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `res.or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:117:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `res.or(Ok(ext_str.some_field))`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `res.or(Ok(ext_str.some_field))`\n \n error: aborting due to 32 previous errors\n "}, {"sha": "75674b0a9d20ae128c8f26f427ef381364d8b779", "filename": "tests/ui/unnecessary_lazy_eval_unfixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -2,21 +2,21 @@ error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval_unfixable.rs:12:13\n    |\n LL |     let _ = Ok(1).unwrap_or_else(|()| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n    |\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval_unfixable.rs:16:13\n    |\n LL |     let _ = Ok(1).unwrap_or_else(|e::E| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval_unfixable.rs:17:13\n    |\n LL |     let _ = Ok(1).unwrap_or_else(|SomeStruct { .. }| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2cbfc5ca2e2705e0bb618bfad420339277493f22", "filename": "tests/ui/used_underscore_binding.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,36 +1,36 @@\n-error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n   --> $DIR/used_underscore_binding.rs:26:5\n    |\n LL |     _foo + 1\n    |     ^^^^\n    |\n    = note: `-D clippy::used-underscore-binding` implied by `-D warnings`\n \n-error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n   --> $DIR/used_underscore_binding.rs:31:20\n    |\n LL |     println!(\"{}\", _foo);\n    |                    ^^^^\n \n-error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n   --> $DIR/used_underscore_binding.rs:32:16\n    |\n LL |     assert_eq!(_foo, _foo);\n    |                ^^^^\n \n-error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n   --> $DIR/used_underscore_binding.rs:32:22\n    |\n LL |     assert_eq!(_foo, _foo);\n    |                      ^^^^\n \n-error: used binding `_underscore_field` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+error: used binding `_underscore_field` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n   --> $DIR/used_underscore_binding.rs:45:5\n    |\n LL |     s._underscore_field += 1;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: used binding `_i` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+error: used binding `_i` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n   --> $DIR/used_underscore_binding.rs:100:16\n    |\n LL |         uses_i(_i);"}, {"sha": "83435a40aa16fc7bf972192cea76eebd9c39abc1", "filename": "tests/ui/vec_box_sized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,24 +1,24 @@\n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/vec_box_sized.rs:14:21\n    |\n LL |         sized_type: Vec<Box<SizedStruct>>,\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n    |\n    = note: `-D clippy::vec-box` implied by `-D warnings`\n \n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/vec_box_sized.rs:17:14\n    |\n LL |     struct A(Vec<Box<SizedStruct>>);\n    |              ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n \n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/vec_box_sized.rs:18:18\n    |\n LL |     struct B(Vec<Vec<Box<(u32)>>>);\n    |                  ^^^^^^^^^^^^^^^ help: try: `Vec<u32>`\n \n-error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary\n   --> $DIR/vec_box_sized.rs:46:23\n    |\n LL |         pub fn f() -> Vec<Box<S>> {"}, {"sha": "45b87aa0f20b9e7f4d90e88d4dfd87b64ee3747e", "filename": "tests/ui/wild_in_or_pats.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fwild_in_or_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fwild_in_or_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -1,35 +1,35 @@\n-error: wildcard pattern covers any other pattern as it will match anyway.\n+error: wildcard pattern covers any other pattern as it will match anyway\n   --> $DIR/wild_in_or_pats.rs:8:9\n    |\n LL |         \"bar\" | _ => {\n    |         ^^^^^^^^^\n    |\n    = note: `-D clippy::wildcard-in-or-patterns` implied by `-D warnings`\n-   = help: Consider handling `_` separately.\n+   = help: consider handling `_` separately\n \n-error: wildcard pattern covers any other pattern as it will match anyway.\n+error: wildcard pattern covers any other pattern as it will match anyway\n   --> $DIR/wild_in_or_pats.rs:16:9\n    |\n LL |         \"bar\" | \"bar2\" | _ => {\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Consider handling `_` separately.\n+   = help: consider handling `_` separately\n \n-error: wildcard pattern covers any other pattern as it will match anyway.\n+error: wildcard pattern covers any other pattern as it will match anyway\n   --> $DIR/wild_in_or_pats.rs:24:9\n    |\n LL |         _ | \"bar\" | _ => {\n    |         ^^^^^^^^^^^^^\n    |\n-   = help: Consider handling `_` separately.\n+   = help: consider handling `_` separately\n \n-error: wildcard pattern covers any other pattern as it will match anyway.\n+error: wildcard pattern covers any other pattern as it will match anyway\n   --> $DIR/wild_in_or_pats.rs:32:9\n    |\n LL |         _ | \"bar\" => {\n    |         ^^^^^^^^^\n    |\n-   = help: Consider handling `_` separately.\n+   = help: consider handling `_` separately\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0931dd32e7af2e5a5568def4a1c6ac039ff76170", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb2bd13d0dd70131be1e21a0a0261c9dc69937a/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=8eb2bd13d0dd70131be1e21a0a0261c9dc69937a", "patch": "@@ -13,7 +13,7 @@ LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::zero-divided-by-zero` implied by `-D warnings`\n-   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n+   = help: consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:5:19\n@@ -27,7 +27,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let f64_nan = 0.0 / 0.0f64;\n    |                   ^^^^^^^^^^^^\n    |\n-   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n+   = help: consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:6:25\n@@ -41,7 +41,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let other_f64_nan = 0.0f64 / 0.0;\n    |                         ^^^^^^^^^^^^\n    |\n-   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n+   = help: consider using `f64::NAN` if you would like a constant representing NaN\n \n error: equal expressions as operands to `/`\n   --> $DIR/zero_div_zero.rs:7:28\n@@ -55,7 +55,7 @@ error: constant division of `0.0` with `0.0` will always result in NaN\n LL |     let one_more_f64_nan = 0.0f64 / 0.0f64;\n    |                            ^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `f64::NAN` if you would like a constant representing NaN\n+   = help: consider using `f64::NAN` if you would like a constant representing NaN\n \n error: aborting due to 8 previous errors\n "}]}