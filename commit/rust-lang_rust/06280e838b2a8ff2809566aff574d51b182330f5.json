{"sha": "06280e838b2a8ff2809566aff574d51b182330f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjgwZTgzOGIyYThmZjI4MDk1NjZhZmY1NzRkNTFiMTgyMzMwZjU=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2017-09-29T19:25:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-29T19:25:10Z"}, "message": "Merge pull request #2097 from rust-lang-nursery/fix-2041\n\nFix detection of format and print macros", "tree": {"sha": "eb91b2ad383471d60a356b2c579ef49c770aa5c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb91b2ad383471d60a356b2c579ef49c770aa5c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06280e838b2a8ff2809566aff574d51b182330f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06280e838b2a8ff2809566aff574d51b182330f5", "html_url": "https://github.com/rust-lang/rust/commit/06280e838b2a8ff2809566aff574d51b182330f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06280e838b2a8ff2809566aff574d51b182330f5/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc76f397c6464d5946deaa8f658605a1c2f72ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc76f397c6464d5946deaa8f658605a1c2f72ac9", "html_url": "https://github.com/rust-lang/rust/commit/bc76f397c6464d5946deaa8f658605a1c2f72ac9"}, {"sha": "7e956ac7c4a38c862e344e5e60243b3995bc5831", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e956ac7c4a38c862e344e5e60243b3995bc5831", "html_url": "https://github.com/rust-lang/rust/commit/7e956ac7c4a38c862e344e5e60243b3995bc5831"}], "stats": {"total": 116, "additions": 72, "deletions": 44}, "files": [{"sha": "6a6cbadb6fa3eeb4d97dfcd7d5757a680571c33d", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/06280e838b2a8ff2809566aff574d51b182330f5/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06280e838b2a8ff2809566aff574d51b182330f5/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=06280e838b2a8ff2809566aff574d51b182330f5", "patch": "@@ -1,9 +1,7 @@\n use rustc::hir::*;\n-use rustc::hir::map::Node::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::LitKind;\n-use syntax::symbol::InternedString;\n use utils::paths;\n use utils::{is_expn_of, match_def_path, match_type, resolve_node, span_lint, walk_ptrs_ty, opt_def_id};\n \n@@ -50,8 +48,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id)),\n                         match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1),\n                         // ensure the format string is `\"{..}\"` with only one argument and no text\n-                        check_static_str(cx, &args[0]),\n+                        check_static_str(&args[0]),\n                         // ensure the format argument is `{}` ie. Display with no fancy option\n+                        // and that the argument is a string\n                         check_arg_is_display(cx, &args[1])\n                     ], {\n                         span_lint(cx, USELESS_FORMAT, span, \"useless use of `format!`\");\n@@ -69,44 +68,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-/// Returns the slice of format string parts in an `Arguments::new_v1` call.\n-/// Public because it's shared with a lint in print.rs.\n-pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Expr) -> Option<Vec<InternedString>> {\n+/// Checks if the expressions matches `&[\"\"]`\n+fn check_static_str(expr: &Expr) -> bool {\n     if_let_chain! {[\n-        let ExprBlock(ref block) = expr.node,\n-        block.stmts.len() == 1,\n-        let StmtDecl(ref decl, _) = block.stmts[0].node,\n-        let DeclItem(ref decl) = decl.node,\n-        let Some(NodeItem(decl)) = cx.tcx.hir.find(decl.id),\n-        decl.name == \"__STATIC_FMTSTR\",\n-        let ItemStatic(_, _, ref expr) = decl.node,\n-        let ExprAddrOf(_, ref expr) = cx.tcx.hir.body(*expr).value.node, // &[\"\u2026\", \"\u2026\", \u2026]\n-        let ExprArray(ref exprs) = expr.node,\n+        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\"]\n+        let ExprArray(ref exprs) = expr.node, // [\"\"]\n+        exprs.len() == 1,\n+        let ExprLit(ref lit) = exprs[0].node,\n+        let LitKind::Str(ref lit, _) = lit.node,\n     ], {\n-        let mut result = Vec::new();\n-        for expr in exprs {\n-            if let ExprLit(ref lit) = expr.node {\n-                if let LitKind::Str(ref lit, _) = lit.node {\n-                    result.push(lit.as_str());\n-                }\n-            }\n-        }\n-        return Some(result);\n+        return lit.as_str().is_empty();\n     }}\n-    None\n-}\n \n-/// Checks if the expressions matches\n-/// ```rust, ignore\n-/// { static __STATIC_FMTSTR: &'static[&'static str] = &[\"a\", \"b\", c];\n-/// __STATIC_FMTSTR }\n-/// ```\n-fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n-    if let Some(expr) = get_argument_fmtstr_parts(cx, expr) {\n-        expr.len() == 1 && expr[0].is_empty()\n-    } else {\n-        false\n-    }\n+    false\n }\n \n /// Checks if the expressions matches"}, {"sha": "96557b8b0cb4a478f0838ca0ac8f18aa1bd970aa", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06280e838b2a8ff2809566aff574d51b182330f5/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06280e838b2a8ff2809566aff574d51b182330f5/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=06280e838b2a8ff2809566aff574d51b182330f5", "patch": "@@ -1,9 +1,10 @@\n use rustc::hir::*;\n use rustc::hir::map::Node::{NodeImplItem, NodeItem};\n use rustc::lint::*;\n-use utils::{paths, opt_def_id};\n+use syntax::ast::LitKind;\n+use syntax::symbol::InternedString;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint};\n-use format::get_argument_fmtstr_parts;\n+use utils::{paths, opt_def_id};\n \n /// **What it does:** This lint warns when you using `print!()` with a format\n /// string that\n@@ -103,15 +104,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let ExprTup(ref args) = args.node,\n \n                         // collect the format string parts and check the last one\n-                        let Some(fmtstrs) = get_argument_fmtstr_parts(cx, &args_args[0]),\n-                        let Some(last_str) = fmtstrs.last(),\n-                        let Some('\\n') = last_str.chars().last(),\n+                        let Some((fmtstr, fmtlen)) = get_argument_fmtstr_parts(&args_args[0]),\n+                        let Some('\\n') = fmtstr.chars().last(),\n \n                         // \"foo{}bar\" is made into two strings + one argument,\n                         // if the format string starts with `{}` (eg. \"{}foo\"),\n                         // the string array is prepended an empty string \"\".\n                         // We only want to check the last string after any `{}`:\n-                        args.len() < fmtstrs.len(),\n+                        args.len() < fmtlen,\n                     ], {\n                         span_lint(cx, PRINT_WITH_NEWLINE, span,\n                                   \"using `print!()` with a format string that ends in a \\\n@@ -150,3 +150,17 @@ fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n \n     false\n }\n+\n+/// Returns the slice of format string parts in an `Arguments::new_v1` call.\n+fn get_argument_fmtstr_parts(expr: &Expr) -> Option<(InternedString, usize)> {\n+    if_let_chain! {[\n+        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\u2026\", \"\u2026\", \u2026]\n+        let ExprArray(ref exprs) = expr.node,\n+        let Some(expr) = exprs.last(),\n+        let ExprLit(ref lit) = expr.node,\n+        let LitKind::Str(ref lit, _) = lit.node,\n+    ], {\n+        return Some((lit.as_str(), exprs.len()));\n+    }}\n+    None\n+}"}, {"sha": "d2c9f393831278bfe5450877d83b74728a6190b0", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06280e838b2a8ff2809566aff574d51b182330f5/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06280e838b2a8ff2809566aff574d51b182330f5/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=06280e838b2a8ff2809566aff574d51b182330f5", "patch": "@@ -6,5 +6,17 @@ error: useless use of `format!`\n   |\n   = note: `-D useless-format` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: useless use of `format!`\n+ --> $DIR/format.rs:8:5\n+  |\n+8 |     format!(\"{}\", \"foo\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:15:5\n+   |\n+15 |     format!(\"{}\", arg);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "1bacc40bfb4fd6a3113ee69864dba48ea82356a7", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/06280e838b2a8ff2809566aff574d51b182330f5/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06280e838b2a8ff2809566aff574d51b182330f5/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=06280e838b2a8ff2809566aff574d51b182330f5", "patch": "@@ -0,0 +1,28 @@\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:6:5\n+  |\n+6 |     print!(\"Hello/n\");\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D print-with-newline` implied by `-D warnings`\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:7:5\n+  |\n+7 |     print!(\"Hello {}/n\", \"world\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:8:5\n+  |\n+8 |     print!(\"Hello {} {}/n/n\", \"world\", \"#2\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:9:5\n+  |\n+9 |     print!(\"{}/n\", 1265);\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}