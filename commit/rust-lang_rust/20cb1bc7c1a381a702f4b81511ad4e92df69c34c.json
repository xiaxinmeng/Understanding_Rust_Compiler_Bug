{"sha": "20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwY2IxYmM3YzFhMzgxYTcwMmY0YjgxNTExYWQ0ZTkyZGY2OWMzNGM=", "commit": {"author": {"name": "Elliot Bobrow", "email": "elliotgreybobrow@gmail.com", "date": "2021-06-14T19:23:33Z"}, "committer": {"name": "Elliot Bobrow", "email": "elliotgreybobrow@gmail.com", "date": "2021-06-21T15:52:09Z"}, "message": "check for unbalanced tick pairs in doc-markdown", "tree": {"sha": "a266e03b8b1810dc0397d773fc470642621fbfbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a266e03b8b1810dc0397d773fc470642621fbfbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "html_url": "https://github.com/rust-lang/rust/commit/20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/comments", "author": {"login": "ebobrow", "id": 77182873, "node_id": "MDQ6VXNlcjc3MTgyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/77182873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebobrow", "html_url": "https://github.com/ebobrow", "followers_url": "https://api.github.com/users/ebobrow/followers", "following_url": "https://api.github.com/users/ebobrow/following{/other_user}", "gists_url": "https://api.github.com/users/ebobrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebobrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebobrow/subscriptions", "organizations_url": "https://api.github.com/users/ebobrow/orgs", "repos_url": "https://api.github.com/users/ebobrow/repos", "events_url": "https://api.github.com/users/ebobrow/events{/privacy}", "received_events_url": "https://api.github.com/users/ebobrow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebobrow", "id": 77182873, "node_id": "MDQ6VXNlcjc3MTgyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/77182873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebobrow", "html_url": "https://github.com/ebobrow", "followers_url": "https://api.github.com/users/ebobrow/followers", "following_url": "https://api.github.com/users/ebobrow/following{/other_user}", "gists_url": "https://api.github.com/users/ebobrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebobrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebobrow/subscriptions", "organizations_url": "https://api.github.com/users/ebobrow/orgs", "repos_url": "https://api.github.com/users/ebobrow/repos", "events_url": "https://api.github.com/users/ebobrow/events{/privacy}", "received_events_url": "https://api.github.com/users/ebobrow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf8772702ef529544829be307c617002d7bc72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf8772702ef529544829be307c617002d7bc72b", "html_url": "https://github.com/rust-lang/rust/commit/6bf8772702ef529544829be307c617002d7bc72b"}], "stats": {"total": 166, "additions": 151, "deletions": 15}, "files": [{"sha": "4e164d33a0512b5ef15a909c82f52247520876df", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "patch": "@@ -1,4 +1,5 @@\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_note};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_note};\n+use clippy_utils::source::first_line_of_span;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{is_entrypoint_fn, is_expn_of, match_panic_def_id, method_chain_args, return_ty};\n use if_chain::if_chain;\n@@ -37,7 +38,8 @@ declare_clippy_lint! {\n     /// consider that.\n     ///\n     /// **Known problems:** Lots of bad docs won\u2019t be fixed, what the lint checks\n-    /// for is limited, and there are still false positives.\n+    /// for is limited, and there are still false positives. HTML elements and their\n+    /// content are not linted.\n     ///\n     /// In addition, when writing documentation comments, including `[]` brackets\n     /// inside a link text would trip the parser. Therfore, documenting link with\n@@ -469,11 +471,11 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     spans: &[(usize, Span)],\n ) -> DocHeaders {\n     // true if a safety header was found\n-    use pulldown_cmark::CodeBlockKind;\n     use pulldown_cmark::Event::{\n         Code, End, FootnoteReference, HardBreak, Html, Rule, SoftBreak, Start, TaskListMarker, Text,\n     };\n-    use pulldown_cmark::Tag::{CodeBlock, Heading, Link};\n+    use pulldown_cmark::Tag::{CodeBlock, Heading, Item, Link, Paragraph};\n+    use pulldown_cmark::{CodeBlockKind, CowStr};\n \n     let mut headers = DocHeaders {\n         safety: false,\n@@ -485,6 +487,9 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     let mut in_heading = false;\n     let mut is_rust = false;\n     let mut edition = None;\n+    let mut ticks_unbalanced = false;\n+    let mut text_to_check: Vec<(CowStr<'_>, Span)> = Vec::new();\n+    let mut paragraph_span = spans.get(0).expect(\"function isn't called if doc comment is empty\").1;\n     for (event, range) in events {\n         match event {\n             Start(CodeBlock(ref kind)) => {\n@@ -510,13 +515,42 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n             },\n             Start(Link(_, url, _)) => in_link = Some(url),\n             End(Link(..)) => in_link = None,\n-            Start(Heading(_)) => in_heading = true,\n-            End(Heading(_)) => in_heading = false,\n+            Start(Heading(_) | Paragraph | Item) => {\n+                if let Start(Heading(_)) = event {\n+                    in_heading = true;\n+                }\n+                ticks_unbalanced = false;\n+                let (_, span) = get_current_span(spans, range.start);\n+                paragraph_span = first_line_of_span(cx, span);\n+            },\n+            End(Heading(_) | Paragraph | Item) => {\n+                if let End(Heading(_)) = event {\n+                    in_heading = false;\n+                }\n+                if ticks_unbalanced {\n+                    span_lint_and_help(\n+                        cx,\n+                        DOC_MARKDOWN,\n+                        paragraph_span,\n+                        \"backticks are unbalanced\",\n+                        None,\n+                        \"a backtick may be missing a pair\",\n+                    );\n+                } else {\n+                    for (text, span) in text_to_check {\n+                        check_text(cx, valid_idents, &text, span);\n+                    }\n+                }\n+                text_to_check = Vec::new();\n+            },\n             Start(_tag) | End(_tag) => (), // We don't care about other tags\n             Html(_html) => (),             // HTML is weird, just ignore it\n             SoftBreak | HardBreak | TaskListMarker(_) | Code(_) | Rule => (),\n             FootnoteReference(text) | Text(text) => {\n-                if Some(&text) == in_link.as_ref() {\n+                let (begin, span) = get_current_span(spans, range.start);\n+                paragraph_span = paragraph_span.with_hi(span.hi());\n+                ticks_unbalanced |= text.contains('`');\n+                if Some(&text) == in_link.as_ref() || ticks_unbalanced {\n                     // Probably a link of the form `<http://example.com>`\n                     // Which are represented as a link to \"http://example.com\" with\n                     // text \"http://example.com\" by pulldown-cmark\n@@ -525,11 +559,6 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 headers.safety |= in_heading && text.trim() == \"Safety\";\n                 headers.errors |= in_heading && text.trim() == \"Errors\";\n                 headers.panics |= in_heading && text.trim() == \"Panics\";\n-                let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n-                    Ok(o) => o,\n-                    Err(e) => e - 1,\n-                };\n-                let (begin, span) = spans[index];\n                 if in_code {\n                     if is_rust {\n                         let edition = edition.unwrap_or_else(|| cx.tcx.sess.edition());\n@@ -538,15 +567,22 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 } else {\n                     // Adjust for the beginning of the current `Event`\n                     let span = span.with_lo(span.lo() + BytePos::from_usize(range.start - begin));\n-\n-                    check_text(cx, valid_idents, &text, span);\n+                    text_to_check.push((text, span));\n                 }\n             },\n         }\n     }\n     headers\n }\n \n+fn get_current_span(spans: &[(usize, Span)], idx: usize) -> (usize, Span) {\n+    let index = match spans.binary_search_by(|c| c.0.cmp(&idx)) {\n+        Ok(o) => o,\n+        Err(e) => e - 1,\n+    };\n+    spans[index]\n+}\n+\n fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n     fn has_needless_main(code: &str, edition: Edition) -> bool {\n         rustc_driver::catch_fatal_errors(|| {"}, {"sha": "5403d76ea30c8774c4f5c64e2b26a73a8821c3ab", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for IfLetMutex {\n     }\n }\n \n-/// Checks if `Mutex::lock` is called in the `if let _ = expr.\n+/// Checks if `Mutex::lock` is called in the `if let` expr.\n pub struct OppVisitor<'a, 'tcx> {\n     mutex_lock_called: bool,\n     found_mutex: Option<&'tcx Expr<'tcx>>,"}, {"sha": "8afef6b23d47653c27a9f2d2398ed411fd08667a", "filename": "tests/ui/doc/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc.rs?ref=20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "previous_filename": "tests/ui/doc.rs"}, {"sha": "7eab8a85f093d6f1de5a51e517605338f98fee33", "filename": "tests/ui/doc/doc.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc.stderr?ref=20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "previous_filename": "tests/ui/doc.stderr"}, {"sha": "78e87bc69062a351c4e3bccbd5e773b8b277c443", "filename": "tests/ui/doc/unbalanced_ticks.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Funbalanced_ticks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Funbalanced_ticks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Funbalanced_ticks.rs?ref=20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "patch": "@@ -0,0 +1,36 @@\n+//! This file tests for the `DOC_MARKDOWN` lint, specifically cases\n+//! where ticks are unbalanced (see issue #6753).\n+\n+#![allow(dead_code)]\n+#![warn(clippy::doc_markdown)]\n+\n+/// This is a doc comment with `unbalanced_tick marks and several words that\n+/// should be `encompassed_by` tick marks because they `contain_underscores`.\n+/// Because of the initial `unbalanced_tick` pair, the error message is\n+/// very `confusing_and_misleading`.\n+fn main() {}\n+\n+/// This paragraph has `unbalanced_tick marks and should stop_linting.\n+///\n+/// This paragraph is fine and should_be linted normally.\n+///\n+/// Double unbalanced backtick from ``here to here` should lint.\n+///\n+/// Double balanced back ticks ``start end`` is fine.\n+fn multiple_paragraphs() {}\n+\n+/// ```\n+/// // Unbalanced tick mark in code block shouldn't warn:\n+/// `\n+/// ```\n+fn in_code_block() {}\n+\n+/// # `Fine`\n+///\n+/// ## not_fine\n+///\n+/// ### `unbalanced\n+///\n+/// - This `item has unbalanced tick marks\n+/// - This item needs backticks_here\n+fn other_markdown() {}"}, {"sha": "45ca34e2a8c8b34a2e6ede2509ad9367abac2709", "filename": "tests/ui/doc/unbalanced_ticks.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20cb1bc7c1a381a702f4b81511ad4e92df69c34c/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr?ref=20cb1bc7c1a381a702f4b81511ad4e92df69c34c", "patch": "@@ -0,0 +1,64 @@\n+error: backticks are unbalanced\n+  --> $DIR/unbalanced_ticks.rs:7:1\n+   |\n+LL | / /// This is a doc comment with `unbalanced_tick marks and several words that\n+LL | | /// should be `encompassed_by` tick marks because they `contain_underscores`.\n+LL | | /// Because of the initial `unbalanced_tick` pair, the error message is\n+LL | | /// very `confusing_and_misleading`.\n+   | |____________________________________^\n+   |\n+   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n+   = help: a backtick may be missing a pair\n+\n+error: backticks are unbalanced\n+  --> $DIR/unbalanced_ticks.rs:13:1\n+   |\n+LL | /// This paragraph has `unbalanced_tick marks and should stop_linting.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: a backtick may be missing a pair\n+\n+error: you should put `should_be` between ticks in the documentation\n+  --> $DIR/unbalanced_ticks.rs:15:32\n+   |\n+LL | /// This paragraph is fine and should_be linted normally.\n+   |                                ^^^^^^^^^\n+\n+error: backticks are unbalanced\n+  --> $DIR/unbalanced_ticks.rs:17:1\n+   |\n+LL | /// Double unbalanced backtick from ``here to here` should lint.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: a backtick may be missing a pair\n+\n+error: you should put `not_fine` between ticks in the documentation\n+  --> $DIR/unbalanced_ticks.rs:30:8\n+   |\n+LL | /// ## not_fine\n+   |        ^^^^^^^^\n+\n+error: backticks are unbalanced\n+  --> $DIR/unbalanced_ticks.rs:32:1\n+   |\n+LL | /// ### `unbalanced\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: a backtick may be missing a pair\n+\n+error: backticks are unbalanced\n+  --> $DIR/unbalanced_ticks.rs:34:1\n+   |\n+LL | /// - This `item has unbalanced tick marks\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: a backtick may be missing a pair\n+\n+error: you should put `backticks_here` between ticks in the documentation\n+  --> $DIR/unbalanced_ticks.rs:35:23\n+   |\n+LL | /// - This item needs backticks_here\n+   |                       ^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}]}