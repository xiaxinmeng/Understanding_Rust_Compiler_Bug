{"sha": "5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "node_id": "C_kwDOAAsO6NoAKDViNmVkMjUzYzQyYTY5YjkzZTc0NDdmYjA4NzRhODlhYjZiYzFjZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-31T22:34:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-31T22:34:26Z"}, "message": "Auto merge of #102513 - RalfJung:no-more-unaligned-reference, r=cjgillot,scottmcm\n\nmake unaligned_reference a hard error\n\nThe `unaligned_references` lint has been warn-by-default since Rust 1.53 (https://github.com/rust-lang/rust/pull/82525) and deny-by-default with mention in cargo future-incompat reports since Rust 1.62 (https://github.com/rust-lang/rust/pull/95372). Current nightly will become Rust 1.66, so (unless major surprises show up with crater) I think it is time we make this a hard error, and close this old soundness gap in the language.\n\nEDIT: Turns out this will only land for Rust 1.67, so there is another 6 weeks of time here for crates to adjust.\n\nFixes https://github.com/rust-lang/rust/issues/82523.", "tree": {"sha": "ba7e23c105713658431c3101d22977d8282e397f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7e23c105713658431c3101d22977d8282e397f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "html_url": "https://github.com/rust-lang/rust/commit/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1d9d50fba2f6a1ccab8748a0050cde38253f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1d9d50fba2f6a1ccab8748a0050cde38253f60", "html_url": "https://github.com/rust-lang/rust/commit/dc1d9d50fba2f6a1ccab8748a0050cde38253f60"}, {"sha": "dfc4a7b2d02528f246e455f587605cce224bb99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc4a7b2d02528f246e455f587605cce224bb99c", "html_url": "https://github.com/rust-lang/rust/commit/dfc4a7b2d02528f246e455f587605cce224bb99c"}], "stats": {"total": 856, "additions": 170, "deletions": 686}, "files": [{"sha": "072b0f2fcceab7e4e357b10fe6f61f85358a66e0", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -5,7 +5,7 @@\n // /!\\ IMPORTANT /!\\\n //\n // Error messages' format must follow the RFC 1567 available here:\n-// https://github.com/rust-lang/rfcs/pull/1567\n+// https://rust-lang.github.io/rfcs/1567-long-error-codes-explanation-normalization.html\n \n register_diagnostics! {\n E0001: include_str!(\"./error_codes/E0001.md\"),\n@@ -510,6 +510,7 @@ E0789: include_str!(\"./error_codes/E0789.md\"),\n E0790: include_str!(\"./error_codes/E0790.md\"),\n E0791: include_str!(\"./error_codes/E0791.md\"),\n E0792: include_str!(\"./error_codes/E0792.md\"),\n+E0793: include_str!(\"./error_codes/E0793.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "b2e51e24e141fd2a61f53b3773f55392f93e8c2a", "filename": "compiler/rustc_error_codes/src/error_codes/E0793.md", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0793.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0793.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0793.md?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -0,0 +1,64 @@\n+An unaligned references to a field of a [packed] struct got created.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0793\n+#[repr(packed)]\n+pub struct Foo {\n+    field1: u64,\n+    field2: u8,\n+}\n+\n+unsafe {\n+    let foo = Foo { field1: 0, field2: 0 };\n+    // Accessing the field directly is fine.\n+    let val = foo.field1;\n+    // A reference to a packed field causes a error.\n+    let val = &foo.field1; // ERROR\n+    // An implicit `&` is added in format strings, causing the same error.\n+    println!(\"{}\", foo.field1); // ERROR\n+}\n+```\n+\n+Creating a reference to an insufficiently aligned packed field is\n+[undefined behavior] and therefore disallowed. Using an `unsafe` block does not\n+change anything about this. Instead, the code should do a copy of the data in\n+the packed field or use raw pointers and unaligned accesses.\n+\n+```\n+#[repr(packed)]\n+pub struct Foo {\n+    field1: u64,\n+    field2: u8,\n+}\n+\n+unsafe {\n+    let foo = Foo { field1: 0, field2: 0 };\n+\n+    // Instead of a reference, we can create a raw pointer...\n+    let ptr = std::ptr::addr_of!(foo.field1);\n+    // ... and then (crucially!) access it in an explicitly unaligned way.\n+    let val = unsafe { ptr.read_unaligned() };\n+    // This would *NOT* be correct:\n+    // let val = unsafe { *ptr }; // Undefined Behavior due to unaligned load!\n+\n+    // For formatting, we can create a copy to avoid the direct reference.\n+    let copy = foo.field1;\n+    println!(\"{}\", copy);\n+    // Creating a copy can be written in a single line with curly braces.\n+    // (This is equivalent to the two lines above.)\n+    println!(\"{}\", { foo.field1 });\n+}\n+```\n+\n+### Additional information\n+\n+Note that this error is specifically about *references* to packed fields.\n+Direct by-value access of those fields is fine, since then the compiler has\n+enough information to generate the correct kind of access.\n+\n+See [issue #82523] for more information.\n+\n+[packed]: https://doc.rust-lang.org/reference/type-layout.html#the-alignment-modifiers\n+[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+[issue #82523]: https://github.com/rust-lang/rust/issues/82523"}, {"sha": "4ca37ef6850c11bcc0a0e351c1725f1c353c9278", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -324,7 +324,6 @@ fn register_builtins(store: &mut LintStore) {\n     store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n     store.register_renamed(\"redundant_semicolon\", \"redundant_semicolons\");\n     store.register_renamed(\"overlapping_patterns\", \"overlapping_range_endpoints\");\n-    store.register_renamed(\"safe_packed_borrows\", \"unaligned_references\");\n     store.register_renamed(\"disjoint_capture_migration\", \"rust_2021_incompatible_closure_captures\");\n     store.register_renamed(\"or_patterns_back_compat\", \"rust_2021_incompatible_or_patterns\");\n     store.register_renamed(\"non_fmt_panic\", \"non_fmt_panics\");\n@@ -487,6 +486,16 @@ fn register_builtins(store: &mut LintStore) {\n         \"converted into hard error, see issue #71800 \\\n          <https://github.com/rust-lang/rust/issues/71800> for more information\",\n     );\n+    store.register_removed(\n+        \"safe_packed_borrows\",\n+        \"converted into hard error, see issue #82523 \\\n+         <https://github.com/rust-lang/rust/issues/82523> for more information\",\n+    );\n+    store.register_removed(\n+        \"unaligned_references\",\n+        \"converted into hard error, see issue #82523 \\\n+         <https://github.com/rust-lang/rust/issues/82523> for more information\",\n+    );\n }\n \n fn register_internals(store: &mut LintStore) {"}, {"sha": "7e9ba4cd22b8d8132f62ad6158678df3b74ad2a8", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1187,51 +1187,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    /// The `unaligned_references` lint detects unaligned references to fields\n-    /// of [packed] structs.\n-    ///\n-    /// [packed]: https://doc.rust-lang.org/reference/type-layout.html#the-alignment-modifiers\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #[repr(packed)]\n-    /// pub struct Foo {\n-    ///     field1: u64,\n-    ///     field2: u8,\n-    /// }\n-    ///\n-    /// fn main() {\n-    ///     unsafe {\n-    ///         let foo = Foo { field1: 0, field2: 0 };\n-    ///         let _ = &foo.field1;\n-    ///         println!(\"{}\", foo.field1); // An implicit `&` is added here, triggering the lint.\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// Creating a reference to an insufficiently aligned packed field is [undefined behavior] and\n-    /// should be disallowed. Using an `unsafe` block does not change anything about this. Instead,\n-    /// the code should do a copy of the data in the packed field or use raw pointers and unaligned\n-    /// accesses. See [issue #82523] for more information.\n-    ///\n-    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-    /// [issue #82523]: https://github.com/rust-lang/rust/issues/82523\n-    pub UNALIGNED_REFERENCES,\n-    Deny,\n-    \"detects unaligned references to fields of packed structs\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n-        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n-    };\n-    report_in_external_macro\n-}\n-\n declare_lint! {\n     /// The `const_item_mutation` lint detects attempts to mutate a `const`\n     /// item.\n@@ -3308,7 +3263,6 @@ declare_lint_pass! {\n         PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n         INVALID_TYPE_PARAM_DEFAULT,\n         RENAMED_AND_REMOVED_LINTS,\n-        UNALIGNED_REFERENCES,\n         CONST_ITEM_MUTATION,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,"}, {"sha": "9dc8dba23a4ec04e215d7eb44aff2f382ee0b3e8", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,7 +1,7 @@\n+use rustc_errors::struct_span_err;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n \n use crate::util;\n use crate::MirLint;\n@@ -49,31 +49,22 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                     // shouldn't do.\n                     unreachable!();\n                 } else {\n-                    let source_info = self.source_info;\n-                    let lint_root = self.body.source_scopes[source_info.scope]\n-                        .local_data\n-                        .as_ref()\n-                        .assert_crate_local()\n-                        .lint_root;\n-                    self.tcx.struct_span_lint_hir(\n-                        UNALIGNED_REFERENCES,\n-                        lint_root,\n-                        source_info.span,\n-                        \"reference to packed field is unaligned\",\n-                        |lint| {\n-                            lint\n-                                .note(\n-                                    \"fields of packed structs are not properly aligned, and creating \\\n-                                    a misaligned reference is undefined behavior (even if that \\\n-                                    reference is never dereferenced)\",\n-                                )\n-                                .help(\n-                                    \"copy the field contents to a local variable, or replace the \\\n-                                    reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n-                                    (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n-                                )\n-                        },\n-                    );\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        self.source_info.span,\n+                        E0793,\n+                        \"reference to packed field is unaligned\"\n+                    )\n+                    .note(\n+                        \"fields of packed structs are not properly aligned, and creating \\\n+                        a misaligned reference is undefined behavior (even if that \\\n+                        reference is never dereferenced)\",\n+                    ).help(\n+                        \"copy the field contents to a local variable, or replace the \\\n+                        reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n+                        (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n+                    )\n+                    .emit();\n                 }\n             }\n         }"}, {"sha": "816b6ab9fb32f307a66270e8c27153da9d2c3bae", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,19 +1,26 @@\n // This should fail even without validation/SB\n //@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-#![allow(dead_code, unused_variables, unaligned_references)]\n+#![allow(dead_code, unused_variables)]\n+\n+use std::{ptr, mem};\n \n #[repr(packed)]\n struct Foo {\n     x: i32,\n     y: i32,\n }\n \n+unsafe fn raw_to_ref<'a, T>(x: *const T) -> &'a T {\n+    mem::transmute(x)\n+}\n+\n fn main() {\n     // Try many times as this might work by chance.\n     for _ in 0..20 {\n         let foo = Foo { x: 42, y: 99 };\n-        let p = &foo.x;\n-        let i = *p; //~ERROR: alignment 4 is required\n+        // There seem to be implicit reborrows, which make the error already appear here\n+        let p: &i32 = unsafe { raw_to_ref(ptr::addr_of!(foo.x)) }; //~ERROR: alignment 4 is required\n+        let i = *p;\n     }\n }"}, {"sha": "7c246706dba5af1e8e9c4d07ef4560002b789c98", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/reference_to_packed.rs:LL:CC\n    |\n-LL |         let i = *p;\n-   |                 ^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |         let p: &i32 = unsafe { raw_to_ref(ptr::addr_of!(foo.x)) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "e234db516c7da23987c4bc7c66dab524074f5696", "filename": "tests/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -21,13 +21,11 @@ fn let_wild_gets_unsafe_field() {\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n     let _ = &p.b;  //~ ERROR    reference to packed field\n-    //~^  WARN will become a hard error\n     let _ = u1.a;  // #53114: should eventually signal error as well\n     let _ = &u2.a; //~ ERROR  [E0133]\n \n     // variation on above with `_` in substructure\n     let (_,) = (&p.b,);  //~ ERROR     reference to packed field\n-    //~^  WARN will become a hard error\n     let (_,) = (u1.a,);  //~ ERROR   [E0133]\n     let (_,) = (&u2.a,); //~ ERROR   [E0133]\n }\n@@ -37,13 +35,11 @@ fn match_unsafe_field_to_wild() {\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n     match &p.b  { _ => { } } //~ ERROR     reference to packed field\n-    //~^  WARN will become a hard error\n     match u1.a  { _ => { } } //~ ERROR   [E0133]\n     match &u2.a { _ => { } } //~ ERROR   [E0133]\n \n     // variation on above with `_` in substructure\n     match (&p.b,)  { (_,) => { } } //~ ERROR     reference to packed field\n-    //~^  WARN will become a hard error\n     match (u1.a,)  { (_,) => { } } //~ ERROR   [E0133]\n     match (&u2.a,) { (_,) => { } } //~ ERROR   [E0133]\n }"}, {"sha": "5c9d78772477883730bcd83e861cc5281496de37", "filename": "tests/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 16, "deletions": 76, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,98 +1,89 @@\n-error: reference to packed field is unaligned\n+error[E0793]: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:23:13\n    |\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n \n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:29:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:28:17\n    |\n LL |     let (_,) = (&p.b,);\n    |                 ^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:39:11\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:37:11\n    |\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:45:12\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:42:12\n    |\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:26:13\n+  --> $DIR/issue-53114-safety-checks.rs:25:13\n    |\n LL |     let _ = &u2.a;\n    |             ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:31:17\n+  --> $DIR/issue-53114-safety-checks.rs:29:17\n    |\n LL |     let (_,) = (u1.a,);\n    |                 ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:32:17\n+  --> $DIR/issue-53114-safety-checks.rs:30:17\n    |\n LL |     let (_,) = (&u2.a,);\n    |                 ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:41:11\n+  --> $DIR/issue-53114-safety-checks.rs:38:11\n    |\n LL |     match u1.a  { _ => { } }\n    |           ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:42:11\n+  --> $DIR/issue-53114-safety-checks.rs:39:11\n    |\n LL |     match &u2.a { _ => { } }\n    |           ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:47:12\n+  --> $DIR/issue-53114-safety-checks.rs:43:12\n    |\n LL |     match (u1.a,)  { (_,) => { } }\n    |            ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-53114-safety-checks.rs:48:12\n+  --> $DIR/issue-53114-safety-checks.rs:44:12\n    |\n LL |     match (&u2.a,) { (_,) => { } }\n    |            ^^^^^ access to union field\n@@ -101,56 +92,5 @@ LL |     match (&u2.a,) { (_,) => { } }\n \n error: aborting due to 11 previous errors\n \n-For more information about this error, try `rustc --explain E0133`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:23:13\n-   |\n-LL |     let _ = &p.b;\n-   |             ^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:29:17\n-   |\n-LL |     let (_,) = (&p.b,);\n-   |                 ^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:39:11\n-   |\n-LL |     match &p.b  { _ => { } }\n-   |           ^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-53114-safety-checks.rs:45:12\n-   |\n-LL |     match (&p.b,)  { (_,) => { } }\n-   |            ^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n+Some errors have detailed explanations: E0133, E0793.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "c7ee90ea73fd68db967b1ea0b3ebf52f9e16c9e6", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/repr_packed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -20,7 +20,6 @@ fn test_missing_unsafe_warning_on_repr_packed() {\n     let c = || {\n         println!(\"{}\", foo.x);\n         //~^ ERROR: reference to packed field is unaligned\n-        //~| WARNING: this was previously accepted by the compiler but is being phased out\n         let _z = foo.x;\n     };\n "}, {"sha": "9c2c434572ae59d5a3cd7015bf7daf31ac986159", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,29 +1,13 @@\n-error: reference to packed field is unaligned\n+error[E0793]: reference to packed field is unaligned\n   --> $DIR/repr_packed.rs:21:24\n    |\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/repr_packed.rs:21:24\n-   |\n-LL |         println!(\"{}\", foo.x);\n-   |                        ^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n+For more information about this error, try `rustc --explain E0793`."}, {"sha": "79aca74dfd416f1b80ca6cc3f98fcdbe2c3953e9", "filename": "tests/ui/derives/deriving-with-repr-packed-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unaligned_references)]\n-\n // Check that deriving certain builtin traits on certain packed structs cause\n // errors. To avoid potentially misaligned references, field copies must be\n // used, which involves adding `T: Copy` bounds."}, {"sha": "ab3646057a55cb240dc00f6a4bb0013aa4a8ad0b", "filename": "tests/ui/derives/deriving-with-repr-packed-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: the method `clone` exists for struct `Foo<NonCopy>`, but its trait bounds were not satisfied\n-  --> $DIR/deriving-with-repr-packed-2.rs:20:11\n+  --> $DIR/deriving-with-repr-packed-2.rs:18:11\n    |\n LL | pub struct Foo<T>(T, T, T);\n    | -----------------\n@@ -19,7 +19,7 @@ LL |     _ = x.clone();\n note: the following trait bounds were not satisfied:\n       `NonCopy: Clone`\n       `NonCopy: Copy`\n-  --> $DIR/deriving-with-repr-packed-2.rs:7:16\n+  --> $DIR/deriving-with-repr-packed-2.rs:5:16\n    |\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^ unsatisfied trait bound introduced in this `derive` macro"}, {"sha": "afa91da133dc0f0b862211777c837d3bb4564741", "filename": "tests/ui/derives/deriving-with-repr-packed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unaligned_references)]\n-\n // Check that deriving certain builtin traits on certain packed structs cause\n // errors. To avoid potentially misaligned references, field copies must be\n // used, which involves adding `T: Copy` bounds."}, {"sha": "7ed84af91bdc354d4a3eb14e6633c4f9e8040d1b", "filename": "tests/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,5 +1,5 @@\n warning: byte slice in a packed struct that derives a built-in trait\n-  --> $DIR/deriving-with-repr-packed.rs:33:5\n+  --> $DIR/deriving-with-repr-packed.rs:31:5\n    |\n LL | #[derive(Debug)]\n    |          ----- in this derive macro expansion\n@@ -14,7 +14,7 @@ LL |     data: [u8],\n    = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0507]: cannot move out of `self` which is behind a shared reference\n-  --> $DIR/deriving-with-repr-packed.rs:24:10\n+  --> $DIR/deriving-with-repr-packed.rs:22:10\n    |\n LL | #[derive(Debug, Default)]\n    |          ----- in this derive macro expansion\n@@ -29,7 +29,7 @@ error: aborting due to previous error; 1 warning emitted\n For more information about this error, try `rustc --explain E0507`.\n Future incompatibility report: Future breakage diagnostic:\n warning: byte slice in a packed struct that derives a built-in trait\n-  --> $DIR/deriving-with-repr-packed.rs:33:5\n+  --> $DIR/deriving-with-repr-packed.rs:31:5\n    |\n LL | #[derive(Debug)]\n    |          ----- in this derive macro expansion"}, {"sha": "04b66885e8522cf0865bfd26444a56e8701483b0", "filename": "tests/ui/lint/unaligned_references.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funaligned_references.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,5 +1,3 @@\n-#![deny(unaligned_references)]\n-\n #[repr(packed)]\n pub struct Good {\n     data: u64,\n@@ -20,20 +18,14 @@ fn main() {\n         let good = Good { data: 0, ptr: &0, data2: [0, 0], aligned: [0; 32] };\n \n         let _ = &good.ptr; //~ ERROR reference to packed field\n-        //~^ previously accepted\n         let _ = &good.data; //~ ERROR reference to packed field\n-        //~^ previously accepted\n         // Error even when turned into raw pointer immediately.\n         let _ = &good.data as *const _; //~ ERROR reference to packed field\n-        //~^ previously accepted\n         let _: *const _ = &good.data; //~ ERROR reference to packed field\n-        //~^ previously accepted\n         // Error on method call.\n         let _ = good.data.clone(); //~ ERROR reference to packed field\n-        //~^ previously accepted\n         // Error for nested fields.\n         let _ = &good.data2[0]; //~ ERROR reference to packed field\n-        //~^ previously accepted\n \n         let _ = &*good.ptr; // ok, behind a pointer\n         let _ = &good.aligned; // ok, has align 1\n@@ -43,7 +35,6 @@ fn main() {\n     unsafe {\n         let packed2 = Packed2 { x: 0, y: 0, z: 0 };\n         let _ = &packed2.x; //~ ERROR reference to packed field\n-        //~^ previously accepted\n         let _ = &packed2.y; // ok, has align 2 in packed(2) struct\n         let _ = &packed2.z; // ok, has align 1\n     }\n@@ -88,7 +79,6 @@ fn main() {\n             },\n         );\n         let _ref = &m1.1.a; //~ ERROR reference to packed field\n-        //~^ previously accepted\n \n         let m2 = Misalign(\n             0,\n@@ -98,6 +88,5 @@ fn main() {\n             },\n         );\n         let _ref = &m2.1.a; //~ ERROR reference to packed field\n-        //~^ previously accepted\n     }\n }"}, {"sha": "07b59464bdece1092962b48e8d0bd882c2bdb1ad", "filename": "tests/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 19, "deletions": 194, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funaligned_references.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,259 +1,84 @@\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:22:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:20:17\n    |\n LL |         let _ = &good.ptr;\n    |                 ^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:24:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:21:17\n    |\n LL |         let _ = &good.data;\n    |                 ^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:27:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:23:17\n    |\n LL |         let _ = &good.data as *const _;\n    |                 ^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:29:27\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:24:27\n    |\n LL |         let _: *const _ = &good.data;\n    |                           ^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:32:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:26:17\n    |\n LL |         let _ = good.data.clone();\n    |                 ^^^^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:35:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:28:17\n    |\n LL |         let _ = &good.data2[0];\n    |                 ^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:45:17\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:37:17\n    |\n LL |         let _ = &packed2.x;\n    |                 ^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:90:20\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:81:20\n    |\n LL |         let _ref = &m1.1.a;\n    |                    ^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:100:20\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:90:20\n    |\n LL |         let _ref = &m2.1.a;\n    |                    ^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 9 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:22:17\n-   |\n-LL |         let _ = &good.ptr;\n-   |                 ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:24:17\n-   |\n-LL |         let _ = &good.data;\n-   |                 ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:27:17\n-   |\n-LL |         let _ = &good.data as *const _;\n-   |                 ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:29:27\n-   |\n-LL |         let _: *const _ = &good.data;\n-   |                           ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:32:17\n-   |\n-LL |         let _ = good.data.clone();\n-   |                 ^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:35:17\n-   |\n-LL |         let _ = &good.data2[0];\n-   |                 ^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:45:17\n-   |\n-LL |         let _ = &packed2.x;\n-   |                 ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:90:20\n-   |\n-LL |         let _ref = &m1.1.a;\n-   |                    ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:100:20\n-   |\n-LL |         let _ref = &m2.1.a;\n-   |                    ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references.rs:1:9\n-   |\n-LL | #![deny(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n+For more information about this error, try `rustc --explain E0793`."}, {"sha": "b655a2a8f63a22086d756f994cbd917848614115", "filename": "tests/ui/lint/unaligned_references_external_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references_external_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references_external_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funaligned_references_external_macro.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -3,7 +3,6 @@\n extern crate unaligned_references_external_crate;\n \n unaligned_references_external_crate::mac! { //~ERROR reference to packed field is unaligned\n-    //~^ previously accepted\n     #[repr(packed)]\n     pub struct X {\n         pub field: u16"}, {"sha": "5b08f433e32809ed521c823f9562257647ddac88", "filename": "tests/ui/lint/unaligned_references_external_macro.stderr", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,61 +1,18 @@\n-error: reference to packed field is unaligned\n+error[E0793]: reference to packed field is unaligned\n   --> $DIR/unaligned_references_external_macro.rs:5:1\n    |\n LL | / unaligned_references_external_crate::mac! {\n-LL | |\n LL | |     #[repr(packed)]\n LL | |     pub struct X {\n LL | |         pub field: u16\n LL | |     }\n LL | | }\n    | |_^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references_external_macro.rs:5:1\n-   |\n-LL | / unaligned_references_external_crate::mac! {\n-LL | |\n-LL | |     #[repr(packed)]\n-LL | |     pub struct X {\n-LL | |         pub field: u16\n-LL | |     }\n-LL | | }\n-   | |_^\n    = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references_external_macro.rs:5:1\n-   |\n-LL | / unaligned_references_external_crate::mac! {\n-LL | |\n-LL | |     #[repr(packed)]\n-LL | |     pub struct X {\n-LL | |         pub field: u16\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/unaligned_references_external_macro.rs:5:1\n-   |\n-LL | / unaligned_references_external_crate::mac! {\n-LL | |\n-LL | |     #[repr(packed)]\n-LL | |     pub struct X {\n-LL | |         pub field: u16\n-LL | |     }\n-LL | | }\n-   | |_^\n-   = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n+For more information about this error, try `rustc --explain E0793`."}, {"sha": "d9159f6669d60881355049da9582a0901a2e058d", "filename": "tests/ui/packed/issue-27060-rpass.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc1d9d50fba2f6a1ccab8748a0050cde38253f60/tests%2Fui%2Fpacked%2Fissue-27060-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1d9d50fba2f6a1ccab8748a0050cde38253f60/tests%2Fui%2Fpacked%2Fissue-27060-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060-rpass.rs?ref=dc1d9d50fba2f6a1ccab8748a0050cde38253f60", "patch": "@@ -1,23 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-#[repr(packed)]\n-pub struct Good {\n-    data: &'static u32,\n-    data2: [&'static u32; 2],\n-    aligned: [u8; 32],\n-}\n-\n-// kill this test when that turns to a hard error\n-#[allow(unaligned_references)]\n-fn main() {\n-    let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n-\n-    let _ = &good.data; // ok\n-    let _ = &good.data2[0]; // ok\n-\n-    let _ = &good.data;\n-    let _ = &good.data2[0];\n-    let _ = &*good.data; // ok, behind a pointer\n-    let _ = &good.aligned; // ok, has align 1\n-    let _ = &good.aligned[2]; // ok, has align 1\n-}"}, {"sha": "adf9ae9f56f5abf93743e2c4aa874677fe9951a2", "filename": "tests/ui/packed/issue-27060-rpass.stderr", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dc1d9d50fba2f6a1ccab8748a0050cde38253f60/tests%2Fui%2Fpacked%2Fissue-27060-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc1d9d50fba2f6a1ccab8748a0050cde38253f60/tests%2Fui%2Fpacked%2Fissue-27060-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060-rpass.stderr?ref=dc1d9d50fba2f6a1ccab8748a0050cde38253f60", "patch": "@@ -1,68 +0,0 @@\n-Future incompatibility report: Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/issue-27060-rpass.rs:15:13\n-   |\n-LL |     let _ = &good.data; // ok\n-   |             ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/issue-27060-rpass.rs:11:9\n-   |\n-LL | #[allow(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/issue-27060-rpass.rs:16:13\n-   |\n-LL |     let _ = &good.data2[0]; // ok\n-   |             ^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/issue-27060-rpass.rs:11:9\n-   |\n-LL | #[allow(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/issue-27060-rpass.rs:18:13\n-   |\n-LL |     let _ = &good.data;\n-   |             ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/issue-27060-rpass.rs:11:9\n-   |\n-LL | #[allow(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/issue-27060-rpass.rs:19:13\n-   |\n-LL |     let _ = &good.data2[0];\n-   |             ^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/issue-27060-rpass.rs:11:9\n-   |\n-LL | #[allow(unaligned_references)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "a0e944caa0b551b6d262f6a1d49ec67e88a854f7", "filename": "tests/ui/packed/issue-27060.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -13,14 +13,10 @@ fn main() {\n     };\n \n     let _ = &good.data; //~ ERROR reference to packed field\n-    //~| hard error\n     let _ = &good.data2[0]; //~ ERROR reference to packed field\n-    //~| hard error\n \n     let _ = &good.data; //~ ERROR reference to packed field\n-                        //~| hard error\n     let _ = &good.data2[0]; //~ ERROR reference to packed field\n-                            //~| hard error\n     let _ = &*good.data; // ok, behind a pointer\n     let _ = &good.aligned; // ok, has align 1\n     let _ = &good.aligned[2]; // ok, has align 1"}, {"sha": "b4753284f725dca32c9be573459ce03cf16eb818", "filename": "tests/ui/packed/issue-27060.stderr", "status": "modified", "additions": 8, "deletions": 68, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,99 +1,39 @@\n-error: reference to packed field is unaligned\n+error[E0793]: reference to packed field is unaligned\n   --> $DIR/issue-27060.rs:15:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n \n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:17:13\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:16:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:20:13\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:18:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:22:13\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:19:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: aborting due to 4 previous errors\n \n-Future incompatibility report: Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:15:13\n-   |\n-LL |     let _ = &good.data;\n-   |             ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:17:13\n-   |\n-LL |     let _ = &good.data2[0];\n-   |             ^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:20:13\n-   |\n-LL |     let _ = &good.data;\n-   |             ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n-Future breakage diagnostic:\n-error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:22:13\n-   |\n-LL |     let _ = &good.data2[0];\n-   |             ^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: `#[deny(unaligned_references)]` on by default\n-\n+For more information about this error, try `rustc --explain E0793`."}, {"sha": "63315ea66737ae09043851c2669eede600d9dba0", "filename": "tests/ui/packed/packed-struct-borrow-element-64bit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,4 +1,3 @@\n-// run-pass (note: this is spec-UB, but it works for now)\n // ignore-32bit (needs `usize` to be 8-aligned to reproduce all the errors below)\n #![allow(dead_code)]\n // ignore-emscripten weird assertion?\n@@ -9,10 +8,8 @@ struct Foo4C {\n     baz: usize\n }\n \n-#[warn(unaligned_references)]\n pub fn main() {\n     let foo = Foo4C { bar: 1, baz: 2 };\n-    let brw = &foo.baz; //~WARN reference to packed field is unaligned\n-    //~^ previously accepted\n+    let brw = &foo.baz; //~ERROR reference to packed field is unaligned\n     assert_eq!(*brw, 2);\n }"}, {"sha": "32943b0f07b8c785e9b33248eec67a43afe54c6d", "filename": "tests/ui/packed/packed-struct-borrow-element-64bit.stderr", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,35 +1,12 @@\n-warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element-64bit.rs:15:15\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:13:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/packed-struct-borrow-element-64bit.rs:12:8\n-   |\n-LL | #[warn(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 1 warning emitted\n \n-Future incompatibility report: Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element-64bit.rs:15:15\n-   |\n-LL |     let brw = &foo.baz;\n-   |               ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/packed-struct-borrow-element-64bit.rs:12:8\n-   |\n-LL | #[warn(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0793`."}, {"sha": "6cbeca44bbcbf7f92fc6c23ed9c8a50e4973e235", "filename": "tests/ui/packed/packed-struct-borrow-element.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,4 +1,3 @@\n-// run-pass (note: this is spec-UB, but it works for now)\n #![allow(dead_code)]\n // ignore-emscripten weird assertion?\n \n@@ -20,15 +19,12 @@ struct Foo4C {\n     baz: usize\n }\n \n-#[warn(unaligned_references)]\n pub fn main() {\n     let foo = Foo1 { bar: 1, baz: 2 };\n-    let brw = &foo.baz; //~WARN reference to packed field is unaligned\n-    //~^ previously accepted\n+    let brw = &foo.baz; //~ERROR reference to packed field is unaligned\n     assert_eq!(*brw, 2);\n \n     let foo = Foo2 { bar: 1, baz: 2 };\n-    let brw = &foo.baz; //~WARN reference to packed field is unaligned\n-    //~^ previously accepted\n+    let brw = &foo.baz; //~ERROR reference to packed field is unaligned\n     assert_eq!(*brw, 2);\n }"}, {"sha": "29d867fc5b9ad038183c0ec1d2df93d0abd7befb", "filename": "tests/ui/packed/packed-struct-borrow-element.stderr", "status": "modified", "additions": 6, "deletions": 48, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr?ref=5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb", "patch": "@@ -1,63 +1,21 @@\n-warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:26:15\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element.rs:24:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/packed-struct-borrow-element.rs:23:8\n-   |\n-LL | #[warn(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n \n-warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:31:15\n+error[E0793]: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element.rs:28:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: 2 warnings emitted\n-\n-Future incompatibility report: Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:26:15\n-   |\n-LL |     let brw = &foo.baz;\n-   |               ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/packed-struct-borrow-element.rs:23:8\n-   |\n-LL | #[warn(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n-\n-Future breakage diagnostic:\n-warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:31:15\n-   |\n-LL |     let brw = &foo.baz;\n-   |               ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-note: the lint level is defined here\n-  --> $DIR/packed-struct-borrow-element.rs:23:8\n-   |\n-LL | #[warn(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0793`."}]}