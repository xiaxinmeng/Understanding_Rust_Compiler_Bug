{"sha": "65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTliYzBjOTNlYzdlNGIyNWI4ZmQwZTAzZTM3N2MwOWJmZDE3NDg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-08-22T14:39:21Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-24T17:46:52Z"}, "message": "store the CodeExtent directly in FreeRegion\n\nthis makes the code cleaner", "tree": {"sha": "25c88471a0ebb3820ab70a78f51914b4a0c4405f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c88471a0ebb3820ab70a78f51914b4a0c4405f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "html_url": "https://github.com/rust-lang/rust/commit/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc304384e6ed40f505fa0f04043044dd44e73118", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc304384e6ed40f505fa0f04043044dd44e73118", "html_url": "https://github.com/rust-lang/rust/commit/fc304384e6ed40f505fa0f04043044dd44e73118"}], "stats": {"total": 91, "additions": 36, "deletions": 55}, "files": [{"sha": "c66d4084aca9e15d8eef7fdb8a564d54c25613df", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -225,7 +225,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             }\n             'f' => {\n                 assert_eq!(self.next(), '[');\n-                let scope = self.parse_destruction_scope_data();\n+                let scope = self.parse_scope();\n                 assert_eq!(self.next(), '|');\n                 let br = self.parse_bound_region();\n                 assert_eq!(self.next(), ']');\n@@ -284,11 +284,6 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         })\n     }\n \n-    fn parse_destruction_scope_data(&mut self) -> region::DestructionScopeData {\n-        let node_id = self.parse_uint() as ast::NodeId;\n-        region::DestructionScopeData::new(node_id)\n-    }\n-\n     fn parse_opt<T, F>(&mut self, f: F) -> Option<T>\n         where F: FnOnce(&mut TyDecoder<'a, 'tcx>) -> T,\n     {"}, {"sha": "70345dc8bad11ee2ac0fcad65868009bb26ced3a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -255,7 +255,7 @@ pub fn enc_region(w: &mut Encoder, cx: &ctxt, r: ty::Region) {\n         }\n         ty::ReFree(ref fr) => {\n             mywrite!(w, \"f[\");\n-            enc_destruction_scope_data(w, fr.scope);\n+            enc_scope(w, cx, fr.scope);\n             mywrite!(w, \"|\");\n             enc_bound_region(w, cx, fr.bound_region);\n             mywrite!(w, \"]\");\n@@ -289,11 +289,6 @@ fn enc_scope(w: &mut Encoder, cx: &ctxt, scope: region::CodeExtent) {\n     }\n }\n \n-fn enc_destruction_scope_data(w: &mut Encoder,\n-                              d: region::DestructionScopeData) {\n-    mywrite!(w, \"{}\", d.node_id);\n-}\n-\n fn enc_bound_region(w: &mut Encoder, cx: &ctxt, br: ty::BoundRegion) {\n     match br {\n         ty::BrAnon(idx) => {"}, {"sha": "6ab56badbcf41df3e7ccfb93c9958161940f8004", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -135,8 +135,7 @@ impl FreeRegionMap {\n                     tcx.region_maps.is_subscope_of(sub_scope, super_scope),\n \n                 (ty::ReScope(sub_scope), ty::ReFree(fr)) =>\n-                    tcx.region_maps.is_subscope_of(sub_scope,\n-                                                   fr.scope.to_code_extent(&tcx.region_maps)) ||\n+                    tcx.region_maps.is_subscope_of(sub_scope, fr.scope) ||\n                     self.is_static(fr),\n \n                 (ty::ReFree(sub_fr), ty::ReFree(super_fr)) =>"}, {"sha": "9044bf4db8c3d3dfbb02132b8bd7f6a243669e4d", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -172,7 +172,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                     }\n                 };\n \n-                match self.map.find(fr.scope.node_id) {\n+                match self.map.find(fr.scope.node_id(&self.region_maps)) {\n                     Some(ast_map::NodeBlock(ref blk)) => {\n                         let (msg, opt_span) = explain_span(self, \"block\", blk.span);\n                         (format!(\"{} {}\", prefix, msg), opt_span)\n@@ -183,7 +183,8 @@ impl<'tcx> ty::ctxt<'tcx> {\n                         (format!(\"{} {}\", prefix, msg), opt_span)\n                     }\n                     Some(_) | None => {\n-                        // this really should not happen\n+                        // this really should not happen, but it does:\n+                        // FIXME(#27942)\n                         (format!(\"{} unknown free region bounded by scope {:?}\",\n                                  prefix, fr.scope), None)\n                     }\n@@ -422,7 +423,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         return None\n                     }\n                     assert!(fr1.scope == fr2.scope);\n-                    (fr1.scope.node_id, fr1, fr2)\n+                    (fr1.scope.node_id(&tcx.region_maps), fr1, fr2)\n                 },\n                 _ => return None\n             };"}, {"sha": "1785fe09f87a4c87903b0d1d0b356133aa4f06e3", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -790,10 +790,9 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             // A \"free\" region can be interpreted as \"some region\n             // at least as big as the block fr.scope_id\".  So, we can\n             // reasonably compare free regions and scopes:\n-            let fr_scope = fr.scope.to_code_extent(&self.tcx.region_maps);\n-            let r_id = self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id);\n+            let r_id = self.tcx.region_maps.nearest_common_ancestor(fr.scope, s_id);\n \n-            if r_id == fr_scope {\n+            if r_id == fr.scope {\n               // if the free region's scope `fr.scope_id` is bigger than\n               // the scope region `s_id`, then the LUB is the free\n               // region itself:\n@@ -871,8 +870,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 // than the scope `s_id`, then we can say that the GLB\n                 // is the scope `s_id`.  Otherwise, as we do not know\n                 // big the free region is precisely, the GLB is undefined.\n-                let fr_scope = fr.scope.to_code_extent(&self.tcx.region_maps);\n-                if self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) == fr_scope ||\n+                if self.tcx.region_maps.nearest_common_ancestor(fr.scope, s_id) == fr.scope ||\n                         free_regions.is_static(fr) {\n                     Ok(s)\n                 } else {\n@@ -927,8 +925,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 Ok(ty::ReFree(*b))\n             } else {\n                 this.intersect_scopes(ty::ReFree(*a), ty::ReFree(*b),\n-                                      a.scope.to_code_extent(&this.tcx.region_maps),\n-                                      b.scope.to_code_extent(&this.tcx.region_maps))\n+                                      a.scope, b.scope)\n             }\n         }\n     }"}, {"sha": "e1866d878bda63471f011df1cfd58e36e29e8ddb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -111,7 +111,6 @@ use self::VarKind::*;\n \n use middle::def::*;\n use middle::pat_util;\n-use middle::region;\n use middle::ty;\n use lint;\n use util::nodemap::NodeMap;\n@@ -1509,7 +1508,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // within the fn body, late-bound regions are liberated:\n         let fn_ret =\n             self.ir.tcx.liberate_late_bound_regions(\n-                region::DestructionScopeData::new(body.id),\n+                self.ir.tcx.region_maps.item_extent(body.id),\n                 &self.fn_ret(id));\n \n         match fn_ret {"}, {"sha": "a991407310204c6d565ad81f9225d05a846ea788", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -77,7 +77,6 @@ use middle::def_id::DefId;\n use middle::infer;\n use middle::check_const;\n use middle::def;\n-use middle::region;\n use middle::ty::{self, Ty};\n \n use syntax::ast::{MutImmutable, MutMutable};\n@@ -749,7 +748,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             // The environment of a closure is guaranteed to\n             // outlive any bindings introduced in the body of the\n             // closure itself.\n-            scope: region::DestructionScopeData::new(fn_body_id),\n+            scope: self.tcx().region_maps.item_extent(fn_body_id),\n             bound_region: ty::BrEnv\n         });\n "}, {"sha": "f9faba8c3198e4882407c4b4c12987a73c679fd9", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -309,6 +309,13 @@ impl RegionMaps {\n     pub fn lookup_code_extent(&self, e: CodeExtentData) -> CodeExtent {\n         self.code_extent_interner.borrow()[&e]\n     }\n+    pub fn node_extent(&self, n: ast::NodeId) -> CodeExtent {\n+        self.lookup_code_extent(CodeExtentData::Misc(n))\n+    }\n+    // Returns the code extent for an item - the destruction scope.\n+    pub fn item_extent(&self, n: ast::NodeId) -> CodeExtent {\n+        self.lookup_code_extent(CodeExtentData::DestructionScope(n))\n+    }\n     pub fn intern_code_extent(&self,\n                               e: CodeExtentData,\n                               parent: CodeExtent) -> CodeExtent {\n@@ -350,9 +357,6 @@ impl RegionMaps {\n                        parent: CodeExtent) -> CodeExtent {\n         self.intern_code_extent(CodeExtentData::Misc(n), parent)\n     }\n-    pub fn node_extent(&self, n: ast::NodeId) -> CodeExtent {\n-        self.lookup_code_extent(CodeExtentData::Misc(n))\n-    }\n     pub fn code_extent_data(&self, e: CodeExtent) -> CodeExtentData {\n         self.code_extents.borrow()[e.0 as usize]\n     }"}, {"sha": "eff560653c140ff226f0e6da440a649463efb708", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -1679,7 +1679,7 @@ impl Region {\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n-    pub scope: region::DestructionScopeData,\n+    pub scope: region::CodeExtent,\n     pub bound_region: BoundRegion\n }\n \n@@ -6610,7 +6610,7 @@ impl<'tcx> ctxt<'tcx> {\n             types.push(def.space, self.mk_param_from_def(def));\n         }\n \n-        let free_id_outlive = region::DestructionScopeData::new(free_id);\n+        let free_id_outlive = self.region_maps.item_extent(free_id);\n \n         // map bound 'a => free 'a\n         let mut regions = VecPerParamSpace::empty();\n@@ -6641,7 +6641,7 @@ impl<'tcx> ctxt<'tcx> {\n         //\n \n         let free_substs = self.construct_free_substs(generics, free_id);\n-        let free_id_outlive = region::DestructionScopeData::new(free_id);\n+        let free_id_outlive = self.region_maps.item_extent(free_id);\n \n         //\n         // Compute the bounds on Self and the type parameters.\n@@ -6673,8 +6673,7 @@ impl<'tcx> ctxt<'tcx> {\n         let unnormalized_env = ty::ParameterEnvironment {\n             tcx: self,\n             free_substs: free_substs,\n-            implicit_region_bound: ty::ReScope(\n-                free_id_outlive.to_code_extent(&self.region_maps)),\n+            implicit_region_bound: ty::ReScope(free_id_outlive),\n             caller_bounds: predicates,\n             selection_cache: traits::SelectionCache::new(),\n             free_id: free_id,\n@@ -6838,7 +6837,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// Replace any late-bound regions bound in `value` with free variants attached to scope-id\n     /// `scope_id`.\n     pub fn liberate_late_bound_regions<T>(&self,\n-        all_outlive_scope: region::DestructionScopeData,\n+        all_outlive_scope: region::CodeExtent,\n         value: &Binder<T>)\n         -> T\n         where T : TypeFoldable<'tcx>"}, {"sha": "cbdd0020a3032398bbcf0ad794e729dd602fab3c", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -360,9 +360,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                 let loan_scope = match loan_region {\n                     ty::ReScope(scope) => scope,\n \n-                    ty::ReFree(ref fr) => {\n-                        fr.scope.to_code_extent(&self.tcx().region_maps)\n-                    }\n+                    ty::ReFree(ref fr) => fr.scope,\n \n                     ty::ReStatic => {\n                         // If we get here, an error must have been"}, {"sha": "944169fc45ebbadde1641d501ddbcde506fccd59", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -179,7 +179,7 @@ pub fn ast_region_to_region(tcx: &ty::ctxt, lifetime: &ast::Lifetime)\n \n         Some(&rl::DefFreeRegion(scope, id)) => {\n             ty::ReFree(ty::FreeRegion {\n-                    scope: scope,\n+                    scope: tcx.region_maps.item_extent(scope.node_id),\n                     bound_region: ty::BrNamed(DefId::local(id),\n                                               lifetime.name)\n                 })"}, {"sha": "a3714fead8e28caaa29980fa28a3921af7dae7d2", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -14,7 +14,6 @@ use super::{check_fn, Expectation, FnCtxt};\n \n use astconv;\n use middle::def_id::DefId;\n-use middle::region;\n use middle::subst;\n use middle::ty::{self, ToPolyTraitRef, Ty};\n use std::cmp;\n@@ -77,7 +76,7 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     fcx.write_ty(expr.id, closure_type);\n \n     let fn_sig = fcx.tcx().liberate_late_bound_regions(\n-        region::DestructionScopeData::new(body.id), &fn_ty.sig);\n+        fcx.tcx().region_maps.item_extent(body.id), &fn_ty.sig);\n \n     check_fn(fcx.ccx,\n              ast::Unsafety::Normal,"}, {"sha": "cf08490d720c94cb6c0ee14bf8ed8de03559c616", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -91,7 +91,6 @@ use middle::infer;\n use middle::infer::type_variable;\n use middle::pat_util::{self, pat_id_map};\n use middle::privacy::{AllPublic, LastMod};\n-use middle::region::{self};\n use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace};\n use middle::traits::{self, report_fulfillment_errors};\n use middle::ty::{FnSig, GenericPredicates, TypeScheme};\n@@ -455,11 +454,11 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             let inh = Inherited::new(ccx.tcx, &tables, param_env);\n \n             // Compute the fty from point of view of inside fn.\n+            let fn_scope = ccx.tcx.region_maps.item_extent(body.id);\n             let fn_sig =\n                 fn_ty.sig.subst(ccx.tcx, &inh.infcx.parameter_environment.free_substs);\n             let fn_sig =\n-                ccx.tcx.liberate_late_bound_regions(region::DestructionScopeData::new(body.id),\n-                                                    &fn_sig);\n+                ccx.tcx.liberate_late_bound_regions(fn_scope, &fn_sig);\n             let fn_sig =\n                 inh.normalize_associated_types_in(body.span,\n                                                   body.id,"}, {"sha": "0ef1d4b81acadffe2782c65fdb9c0ff7fa37a33f", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -466,10 +466,7 @@ pub struct BoundsChecker<'cx,'tcx:'cx> {\n     fcx: &'cx FnCtxt<'cx,'tcx>,\n     span: Span,\n \n-    // This field is often attached to item impls; it is not clear\n-    // that `CodeExtent` is well-defined for such nodes, so pnkfelix\n-    // has left it as a NodeId rather than porting to CodeExtent.\n-    scope: ast::NodeId,\n+    scope: region::CodeExtent,\n \n     binding_count: usize,\n     cache: Option<&'cx mut HashSet<Ty<'tcx>>>,\n@@ -480,6 +477,7 @@ impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n                scope: ast::NodeId,\n                cache: Option<&'cx mut HashSet<Ty<'tcx>>>)\n                -> BoundsChecker<'cx,'tcx> {\n+        let scope = fcx.tcx().region_maps.item_extent(scope);\n         BoundsChecker { fcx: fcx, span: DUMMY_SP, scope: scope,\n                         cache: cache, binding_count: 0 }\n     }\n@@ -532,7 +530,7 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n     {\n         self.binding_count += 1;\n         let value = self.fcx.tcx().liberate_late_bound_regions(\n-            region::DestructionScopeData::new(self.scope),\n+            self.scope,\n             binder);\n         debug!(\"BoundsChecker::fold_binder: late-bound regions replaced: {:?} at scope: {:?}\",\n                value, self.scope);"}, {"sha": "4280e392d180f38d2ed2ac275135937402763491", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -13,7 +13,6 @@ use check::{FnCtxt, Inherited, blank_fn_ctxt, regionck};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n use CrateCtxt;\n use middle::def_id::DefId;\n-use middle::region::DestructionScopeData;\n use middle::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use middle::traits;\n use middle::ty::{self, Ty};\n@@ -362,7 +361,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     {\n         let free_substs = &fcx.inh.infcx.parameter_environment.free_substs;\n         let fty = fcx.instantiate_type_scheme(span, free_substs, fty);\n-        let free_id_outlive = DestructionScopeData::new(free_id);\n+        let free_id_outlive = fcx.tcx().region_maps.item_extent(free_id);\n         let sig = fcx.tcx().liberate_late_bound_regions(free_id_outlive, &fty.sig);\n \n         for &input_ty in &sig.inputs {"}, {"sha": "544f6d9f0ed858d28c34578623a7f572ffdda3f0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=65e9bc0c93ec7e4b25b8fd0e03e377c09bfd1748", "patch": "@@ -2311,7 +2311,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n             _ => typ,\n         };\n \n-        let body_scope = region::DestructionScopeData::new(body_id);\n+        let body_scope = tcx.region_maps.item_extent(body_id);\n \n         // \"Required type\" comes from the trait definition. It may\n         // contain late-bound regions from the method, but not the\n@@ -2363,7 +2363,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n \n     fn liberate_early_bound_regions<'tcx,T>(\n         tcx: &ty::ctxt<'tcx>,\n-        scope: region::DestructionScopeData,\n+        scope: region::CodeExtent,\n         value: &T)\n         -> T\n         where T : TypeFoldable<'tcx>"}]}