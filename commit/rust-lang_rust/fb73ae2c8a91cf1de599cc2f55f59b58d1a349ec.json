{"sha": "fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "node_id": "C_kwDOAAsO6NoAKGZiNzNhZTJjOGE5MWNmMWRlNTk5Y2MyZjU1ZjU5YjU4ZDFhMzQ5ZWM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-03T21:25:42Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "remove ItemLikeVisitor impl for EntryContext\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "55506a200d5af5bef54438e8a6e8ce6f1e3318a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55506a200d5af5bef54438e8a6e8ce6f1e3318a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "html_url": "https://github.com/rust-lang/rust/commit/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab0e75911b44618c594cda02141ff2102041772", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab0e75911b44618c594cda02141ff2102041772", "html_url": "https://github.com/rust-lang/rust/commit/dab0e75911b44618c594cda02141ff2102041772"}], "stats": {"total": 31, "additions": 8, "deletions": 23}, "files": [{"sha": "7c543c48824adca8fd9ee0409f876150ff00da4b", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=fb73ae2c8a91cf1de599cc2f55f59b58d1a349ec", "patch": "@@ -1,8 +1,7 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{ForeignItem, ImplItem, Item, ItemKind, Node, TraitItem, CRATE_HIR_ID};\n+use rustc_hir::{Item, ItemKind, Node, CRATE_HIR_ID};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::config::{CrateType, EntryFnType};\n@@ -25,25 +24,6 @@ struct EntryContext<'tcx> {\n     non_main_fns: Vec<Span>,\n }\n \n-impl<'tcx> ItemLikeVisitor<'tcx> for EntryContext<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n-        let at_root = self.tcx.opt_local_parent(item.def_id) == Some(CRATE_DEF_ID);\n-        find_item(item, self, at_root);\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &'tcx TraitItem<'tcx>) {\n-        // Entry fn is never a trait item.\n-    }\n-\n-    fn visit_impl_item(&mut self, _impl_item: &'tcx ImplItem<'tcx>) {\n-        // Entry fn is never a trait item.\n-    }\n-\n-    fn visit_foreign_item(&mut self, _: &'tcx ForeignItem<'tcx>) {\n-        // Entry fn is never a foreign item.\n-    }\n-}\n-\n fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n     let any_exe = tcx.sess.crate_types().iter().any(|ty| *ty == CrateType::Executable);\n     if !any_exe {\n@@ -59,7 +39,10 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n     let mut ctxt =\n         EntryContext { tcx, attr_main_fn: None, start_fn: None, non_main_fns: Vec::new() };\n \n-    tcx.hir().visit_all_item_likes(&mut ctxt);\n+    for id in tcx.hir().items() {\n+        let item = tcx.hir().item(id);\n+        find_item(item, &mut ctxt);\n+    }\n \n     configure_main(tcx, &ctxt)\n }\n@@ -89,7 +72,9 @@ fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n         .emit();\n }\n \n-fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_>, at_root: bool) {\n+fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_>) {\n+    let at_root = ctxt.tcx.opt_local_parent(item.def_id) == Some(CRATE_DEF_ID);\n+\n     match entry_point_type(ctxt, item, at_root) {\n         EntryPointType::None => (),\n         _ if !matches!(item.kind, ItemKind::Fn(..)) => {"}]}