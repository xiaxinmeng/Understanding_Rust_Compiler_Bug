{"sha": "9f5f609b1c9a70d2034ed25a79961503843bb9c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNWY2MDliMWM5YTcwZDIwMzRlZDI1YTc5OTYxNTAzODQzYmI5Yzc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-26T23:37:19Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T23:42:34Z"}, "message": "vec: remove superseded reverse_part function\n\n`reverse(xs.mut_slice(a, b))` replaces `reverse_part(xs, a, b)`", "tree": {"sha": "91558fa53317352e721c5a6103bd7ffccdc21037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91558fa53317352e721c5a6103bd7ffccdc21037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f5f609b1c9a70d2034ed25a79961503843bb9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5f609b1c9a70d2034ed25a79961503843bb9c7", "html_url": "https://github.com/rust-lang/rust/commit/9f5f609b1c9a70d2034ed25a79961503843bb9c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f5f609b1c9a70d2034ed25a79961503843bb9c7/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fc1fccad8a0343dd7399a44305b5b3a51a9547", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fc1fccad8a0343dd7399a44305b5b3a51a9547", "html_url": "https://github.com/rust-lang/rust/commit/58fc1fccad8a0343dd7399a44305b5b3a51a9547"}], "stats": {"total": 42, "additions": 2, "deletions": 40}, "files": [{"sha": "56e6bacf93e30eef6f0a5c05963e5fd9468e36bf", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f5f609b1c9a70d2034ed25a79961503843bb9c7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5f609b1c9a70d2034ed25a79961503843bb9c7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9f5f609b1c9a70d2034ed25a79961503843bb9c7", "patch": "@@ -1300,44 +1300,6 @@ pub fn reverse<T>(v: &mut [T]) {\n     }\n }\n \n-/**\n- * Reverse part of a vector in place.\n- *\n- * Reverse the elements in the vector between `start` and `end - 1`.\n- *\n- * If either start or end do not represent valid positions in the vector, the\n- * vector is returned unchanged.\n- *\n- * # Arguments\n- *\n- * * `v` - The mutable vector to be modified\n- *\n- * * `start` - Index of the first element of the slice\n- *\n- * * `end` - Index one past the final element to be reversed.\n- *\n- * # Example\n- *\n- * Assume a mutable vector `v` contains `[1,2,3,4,5]`. After the call:\n- *\n- * ~~~ {.rust}\n- * reverse_part(v, 1, 4);\n- * ~~~\n- *\n- * `v` now contains `[1,4,3,2,5]`.\n- */\n-pub fn reverse_part<T>(v: &mut [T], start: uint, end : uint) {\n-    let sz = v.len();\n-    if start >= sz || end > sz { return; }\n-    let mut i = start;\n-    let mut j = end - 1;\n-    while i < j {\n-        vec::swap(v, i, j);\n-        i += 1;\n-        j -= 1;\n-    }\n-}\n-\n /// Returns a vector with the order of elements reversed\n pub fn reversed<T:Copy>(v: &const [T]) -> ~[T] {\n     let mut rs: ~[T] = ~[];\n@@ -1394,7 +1356,7 @@ pub fn each_permutation<T:Copy>(values: &[T], fun: &fn(perm : &[T]) -> bool) ->\n         // swap indices[k] and indices[l]; sort indices[k+1..]\n         // (they're just reversed)\n         vec::swap(indices, k, l);\n-        reverse_part(indices, k+1, length);\n+        reverse(indices.mut_slice(k+1, length));\n         // fixup permutation based on indices\n         for uint::range(k, length) |i| {\n             permutation[i] = copy values[indices[i]];\n@@ -3971,7 +3933,7 @@ mod tests {\n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1,2,3,4,5];\n-        reverse_part(values,1,4);\n+        reverse(values.mut_slice(1, 4));\n         assert_eq!(values, [1,4,3,2,5]);\n     }\n "}]}