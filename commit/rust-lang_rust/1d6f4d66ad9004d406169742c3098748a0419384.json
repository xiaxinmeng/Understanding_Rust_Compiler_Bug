{"sha": "1d6f4d66ad9004d406169742c3098748a0419384", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNmY0ZDY2YWQ5MDA0ZDQwNjE2OTc0MmMzMDk4NzQ4YTA0MTkzODQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-16T23:17:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-12T18:57:02Z"}, "message": "resolve: Simplify import resolution for mixed 2015/2018 edition mode", "tree": {"sha": "267dce7c7b84593187772c51e48c3792c8650ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267dce7c7b84593187772c51e48c3792c8650ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d6f4d66ad9004d406169742c3098748a0419384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6f4d66ad9004d406169742c3098748a0419384", "html_url": "https://github.com/rust-lang/rust/commit/1d6f4d66ad9004d406169742c3098748a0419384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d6f4d66ad9004d406169742c3098748a0419384/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "html_url": "https://github.com/rust-lang/rust/commit/8f4c226fc5b3b0c0d120bb3117089557ef35acc1"}], "stats": {"total": 122, "additions": 11, "deletions": 111}, "files": [{"sha": "5c9927011a7079e1b0d8d3101bd0dade965b8d5f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d6f4d66ad9004d406169742c3098748a0419384/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6f4d66ad9004d406169742c3098748a0419384/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1d6f4d66ad9004d406169742c3098748a0419384", "patch": "@@ -131,12 +131,9 @@ impl<'a> Resolver<'a> {\n         // so prefixes are prepended with crate root segment if necessary.\n         // The root is prepended lazily, when the first non-empty prefix or terminating glob\n         // appears, so imports in braced groups can have roots prepended independently.\n-        // 2015 identifiers used on global 2018 edition enter special \"virtual 2015 mode\", don't\n-        // get crate root prepended, but get special treatment during in-scope resolution instead.\n         let is_glob = if let ast::UseTreeKind::Glob = use_tree.kind { true } else { false };\n         let crate_root = match prefix_iter.peek() {\n-            Some(seg) if !seg.ident.is_path_segment_keyword() &&\n-                         seg.ident.span.rust_2015() && self.session.rust_2015() => {\n+            Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {\n                 Some(seg.ident.span.ctxt())\n             }\n             None if is_glob && use_tree.span.rust_2015() => {"}, {"sha": "ac149be4b2a8936929eae67f4d2b8f8865897714", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d6f4d66ad9004d406169742c3098748a0419384/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6f4d66ad9004d406169742c3098748a0419384/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1d6f4d66ad9004d406169742c3098748a0419384", "patch": "@@ -1273,7 +1273,6 @@ struct UseError<'a> {\n #[derive(Clone, Copy, PartialEq, Debug)]\n enum AmbiguityKind {\n     Import,\n-    AbsolutePath,\n     BuiltinAttr,\n     DeriveHelper,\n     LegacyHelperVsPrelude,\n@@ -1289,8 +1288,6 @@ impl AmbiguityKind {\n         match self {\n             AmbiguityKind::Import =>\n                 \"name vs any other name during import resolution\",\n-            AmbiguityKind::AbsolutePath =>\n-                \"name in the crate root vs extern crate during absolute path resolution\",\n             AmbiguityKind::BuiltinAttr =>\n                 \"built-in attribute vs any other name\",\n             AmbiguityKind::DeriveHelper =>"}, {"sha": "21ca8ea369fd90930c1fcc957bb380e681c8276f", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 47, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1d6f4d66ad9004d406169742c3098748a0419384/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6f4d66ad9004d406169742c3098748a0419384/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1d6f4d66ad9004d406169742c3098748a0419384", "patch": "@@ -572,7 +572,7 @@ impl<'a> Resolver<'a> {\n             ScopeSet::Module => (TypeNS, None, false, false),\n         };\n         let mut where_to_resolve = match ns {\n-            _ if is_absolute_path || is_import && rust_2015 => WhereToResolve::CrateRoot,\n+            _ if is_absolute_path => WhereToResolve::CrateRoot,\n             TypeNS | ValueNS => WhereToResolve::Module(parent_scope.module),\n             MacroNS => WhereToResolve::DeriveHelpers,\n         };\n@@ -770,8 +770,6 @@ impl<'a> Resolver<'a> {\n \n                             let ambiguity_error_kind = if is_import {\n                                 Some(AmbiguityKind::Import)\n-                            } else if is_absolute_path {\n-                                Some(AmbiguityKind::AbsolutePath)\n                             } else if innermost_def == builtin || def == builtin {\n                                 Some(AmbiguityKind::BuiltinAttr)\n                             } else if innermost_def == derive_helper || def == derive_helper {\n@@ -841,18 +839,13 @@ impl<'a> Resolver<'a> {\n                     LegacyScope::Empty => WhereToResolve::Module(parent_scope.module),\n                     LegacyScope::Uninitialized => unreachable!(),\n                 }\n-                WhereToResolve::CrateRoot if is_import => match ns {\n-                    TypeNS | ValueNS => WhereToResolve::Module(parent_scope.module),\n-                    MacroNS => WhereToResolve::DeriveHelpers,\n-                }\n-                WhereToResolve::CrateRoot if is_absolute_path => match ns {\n+                WhereToResolve::CrateRoot => match ns {\n                     TypeNS => {\n                         ident.span.adjust(Mark::root());\n                         WhereToResolve::ExternPrelude\n                     }\n                     ValueNS | MacroNS => break,\n                 }\n-                WhereToResolve::CrateRoot => unreachable!(),\n                 WhereToResolve::Module(module) => {\n                     match self.hygienic_lexical_parent(module, &mut ident.span) {\n                         Some(parent_module) => WhereToResolve::Module(parent_module),\n@@ -885,44 +878,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         // The first found solution was the only one, return it.\n-        if let Some((binding, flags)) = innermost_result {\n-            // We get to here only if there's no ambiguity, in ambiguous cases an error will\n-            // be reported anyway, so there's no reason to report an additional feature error.\n-            // The `binding` can actually be introduced by something other than `--extern`,\n-            // but its `Def` should coincide with a crate passed with `--extern`\n-            // (otherwise there would be ambiguity) and we can skip feature error in this case.\n-            'ok: {\n-                if !is_import || !rust_2015 {\n-                    break 'ok;\n-                }\n-                if ns == TypeNS && use_prelude && self.extern_prelude_get(ident, true).is_some() {\n-                    break 'ok;\n-                }\n-                let root_ident = Ident::new(keywords::PathRoot.name(), orig_ident.span);\n-                let root_module = self.resolve_crate_root(root_ident);\n-                if self.resolve_ident_in_module_ext(ModuleOrUniformRoot::Module(root_module),\n-                                                    orig_ident, ns, None, false, path_span)\n-                                                    .is_ok() {\n-                    break 'ok;\n-                }\n-\n-                let msg = \"imports can only refer to extern crate names passed with \\\n-                           `--extern` in macros originating from 2015 edition\";\n-                let mut err = self.session.struct_span_err(ident.span, msg);\n-                let what = self.binding_description(binding, ident,\n-                                                    flags.contains(Flags::MISC_FROM_PRELUDE));\n-                let note_msg = format!(\"this import refers to {what}\", what = what);\n-                let label_span = if binding.span.is_dummy() {\n-                    err.note(&note_msg);\n-                    ident.span\n-                } else {\n-                    err.span_note(binding.span, &note_msg);\n-                    binding.span\n-                };\n-                err.span_label(label_span, \"not an extern crate passed with `--extern`\");\n-                err.emit();\n-            }\n-\n+        if let Some((binding, _)) = innermost_result {\n             return Ok(binding);\n         }\n "}, {"sha": "940b0c3c63db090cf909cdcb0901f7115596a407", "filename": "src/test/ui/editions/edition-imports-virtual-2015-ambiguity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d6f4d66ad9004d406169742c3098748a0419384/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6f4d66ad9004d406169742c3098748a0419384/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs?ref=1d6f4d66ad9004d406169742c3098748a0419384", "patch": "@@ -1,3 +1,4 @@\n+// compile-pass\n // edition:2018\n // compile-flags:--extern edition_imports_2015\n // aux-build:edition-imports-2015.rs\n@@ -12,8 +13,7 @@ mod check {\n     pub struct Ambiguous {}\n \n     fn check() {\n-        edition_imports_2015::gen_ambiguous!(); //~ ERROR `Ambiguous` is ambiguous\n-                                                //~| ERROR `edition_imports_2015` is ambiguous\n+        edition_imports_2015::gen_ambiguous!(); // OK\n     }\n }\n "}, {"sha": "1f309f5e8f03283501ca54439ff29656d9a94025", "filename": "src/test/ui/editions/edition-imports-virtual-2015-ambiguity.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f4c226fc5b3b0c0d120bb3117089557ef35acc1/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.stderr?ref=8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "patch": "@@ -1,40 +0,0 @@\n-error[E0659]: `Ambiguous` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:15:9\n-   |\n-LL |         edition_imports_2015::gen_ambiguous!();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name\n-   |\n-note: `Ambiguous` could refer to the struct defined here\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:9:1\n-   |\n-LL | pub struct Ambiguous {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: use `crate::Ambiguous` to refer to this struct unambiguously\n-note: `Ambiguous` could also refer to the struct defined here\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:12:5\n-   |\n-LL |     pub struct Ambiguous {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: use `self::Ambiguous` to refer to this struct unambiguously\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error[E0659]: `edition_imports_2015` is ambiguous (name in the crate root vs extern crate during absolute path resolution)\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:15:9\n-   |\n-LL |         edition_imports_2015::gen_ambiguous!();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name\n-   |\n-   = note: `edition_imports_2015` could refer to an extern crate passed with `--extern`\n-note: `edition_imports_2015` could also refer to the module defined here\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:5:1\n-   |\n-LL | / mod edition_imports_2015 {\n-LL | |     pub struct Path;\n-LL | | }\n-   | |_^\n-   = help: use `crate::edition_imports_2015` to refer to this module unambiguously\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0659`."}, {"sha": "634d3e9a443fa0b3a94d2eca6df642d86ad26682", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d6f4d66ad9004d406169742c3098748a0419384/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6f4d66ad9004d406169742c3098748a0419384/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.rs?ref=1d6f4d66ad9004d406169742c3098748a0419384", "patch": "@@ -1,12 +1,11 @@\n // edition:2018\n // aux-build:edition-imports-2015.rs\n-// error-pattern: imports can only refer to extern crate names passed with `--extern`\n \n #[macro_use]\n extern crate edition_imports_2015;\n \n mod check {\n-    gen_gated!();\n+    gen_gated!(); //~ ERROR unresolved import `E`\n }\n \n fn main() {}"}, {"sha": "e6d0f18a677228303796825c4be5c386f637180d", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d6f4d66ad9004d406169742c3098748a0419384/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d6f4d66ad9004d406169742c3098748a0419384/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=1d6f4d66ad9004d406169742c3098748a0419384", "patch": "@@ -1,20 +1,11 @@\n-error: imports can only refer to extern crate names passed with `--extern` in macros originating from 2015 edition\n-  --> <::edition_imports_2015::gen_gated macros>:1:50\n-   |\n-LL | (  ) => { fn check_gated (  ) { enum E { A } use E :: * ; } }\n-   |                                                  ^\n-   | \n-  ::: $DIR/edition-imports-virtual-2015-gated.rs:9:5\n+error[E0432]: unresolved import `E`\n+  --> $DIR/edition-imports-virtual-2015-gated.rs:8:5\n    |\n LL |     gen_gated!();\n-   |     ------------- not an extern crate passed with `--extern`\n-   |\n-note: this import refers to the enum defined here\n-  --> $DIR/edition-imports-virtual-2015-gated.rs:9:5\n+   |     ^^^^^^^^^^^^^ could not find `E` in `{{root}}`\n    |\n-LL |     gen_gated!();\n-   |     ^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0432`."}]}