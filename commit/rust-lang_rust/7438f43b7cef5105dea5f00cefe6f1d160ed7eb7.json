{"sha": "7438f43b7cef5105dea5f00cefe6f1d160ed7eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MzhmNDNiN2NlZjUxMDVkZWE1ZjAwY2VmZTZmMWQxNjBlZDdlYjc=", "commit": {"author": {"name": "Julian Wollersberger", "email": "julian.wollersberger@gmx.at", "date": "2020-11-28T12:35:09Z"}, "committer": {"name": "Julian Wollersberger", "email": "julian.wollersberger@gmx.at", "date": "2020-11-28T12:35:09Z"}, "message": "Implement From<char> for u64 and u128.", "tree": {"sha": "562d779f58ee9a3137d7a38852811c96b5519b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/562d779f58ee9a3137d7a38852811c96b5519b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7438f43b7cef5105dea5f00cefe6f1d160ed7eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7438f43b7cef5105dea5f00cefe6f1d160ed7eb7", "html_url": "https://github.com/rust-lang/rust/commit/7438f43b7cef5105dea5f00cefe6f1d160ed7eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7438f43b7cef5105dea5f00cefe6f1d160ed7eb7/comments", "author": null, "committer": null, "parents": [{"sha": "4ae328bef47dffcbf363e5ae873f419c06a5511d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d", "html_url": "https://github.com/rust-lang/rust/commit/4ae328bef47dffcbf363e5ae873f419c06a5511d"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "ad193c082e4b7ad56b37236e3ef7ed14ed2c8d43", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7438f43b7cef5105dea5f00cefe6f1d160ed7eb7/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7438f43b7cef5105dea5f00cefe6f1d160ed7eb7/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=7438f43b7cef5105dea5f00cefe6f1d160ed7eb7", "patch": "@@ -112,6 +112,48 @@ impl From<char> for u32 {\n     }\n }\n \n+#[stable(feature = \"more_char_conversions\", since = \"1.50.0\")]\n+impl From<char> for u64 {\n+    /// Converts a [`char`] into a [`u64`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// let c = '\ud83d\udc64';\n+    /// let u = u64::from(c);\n+    /// assert!(8 == mem::size_of_val(&u))\n+    /// ```\n+    #[inline]\n+    fn from(c: char) -> Self {\n+        // The char is casted to the value of the code point, then zero-extended to 64 bit.\n+        // See [https://doc.rust-lang.org/reference/expressions/operator-expr.html#semantics]\n+        c as u64\n+    }\n+}\n+\n+#[stable(feature = \"more_char_conversions\", since = \"1.50.0\")]\n+impl From<char> for u128 {\n+    /// Converts a [`char`] into a [`u128`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// let c = '\u2699';\n+    /// let u = u128::from(c);\n+    /// assert!(16 == mem::size_of_val(&u))\n+    /// ```\n+    #[inline]\n+    fn from(c: char) -> Self {\n+        // The char is casted to the value of the code point, then zero-extended to 128 bit.\n+        // See [https://doc.rust-lang.org/reference/expressions/operator-expr.html#semantics]\n+        c as u128\n+    }\n+}\n+\n /// Maps a byte in 0x00..=0xFF to a `char` whose code point has the same value, in U+0000..=U+00FF.\n ///\n /// Unicode is designed such that this effectively decodes bytes"}]}