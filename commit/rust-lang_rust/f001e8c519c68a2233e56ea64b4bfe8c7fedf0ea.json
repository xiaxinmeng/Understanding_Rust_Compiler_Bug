{"sha": "f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "node_id": "C_kwDOAAsO6NoAKGYwMDFlOGM1MTljNjhhMjIzM2U1NmVhNjRiNGJmZThjN2ZlZGYwZWE", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-10-16T09:30:37Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-10-16T09:30:37Z"}, "message": "Fix an ICE with TAITs and Future", "tree": {"sha": "88c150dc6b7c428c76032a625694931660468970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88c150dc6b7c428c76032a625694931660468970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmFqm70ACgkQ2rpbBylh\nwYrSwxAAslVtofLXKqGTv7efhpCclL9qnUnHYAFeksm6DcUg48+ZNwSW+bwVP4i7\nDe7PmdtgSav+hfNRvib8MsLjOl06Oy3G2lOjX7IfHmqePpnG9MCZIDqT98GWfzMx\n20y7/iO6AkO3jVxhfp3GC1S0KCCOPMChcyP3IMjDjyC2ombmsYl5+0lrhG5iDzeo\nu4pOrJF/unLiXrK2z4zdqTg8p6V6KybnYt2xTgITcKGcqd8O88yKXocSNuVXyoHR\nGpzxXpCIpO2njogBuVebTpaGVSSYdy/gTHl7HO21Dv/RHo/VqeDjh9MPz7mKd9w0\nL866JnhHlIyQEzJ2T+kKI/Mhqk/BANY9AU8FzeE/Pi9gam85pXEzUZa842ChOpV/\nKNseeBnTZF03yJPQXWDocurMz4OIO701eUNjJTwiCCtNK9xsQFRpX3Pm4LQsF4PG\nUBIT1iuqFM2WsFCEgWZ2GRSPvyX2F6SJdCZxPM6kgh1YXM4eDPE6lJSTZjGvkto5\npENDv3J4lT/OzEeR4SdqGyBDLFqrYWhAKi8f7Mz9+4rvp4/jXF4Xaj5pGCwxNxPG\nz8WP/Tut+BTZYSzR8kDyDRgwom497wm22+F0IiefTbWpTvrBSRUX0S7aktk8cw7v\nUJOWqM+QYu8+ezigc1Z6N6kNCcrs0KgcrzQAxWNMGKULcK+IUYI=\n=u6JP\n-----END PGP SIGNATURE-----", "payload": "tree 88c150dc6b7c428c76032a625694931660468970\nparent 6cc0a764e082d9c0abcf37a768d5889247ba13e2\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1634376637 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1634376637 +0900\n\nFix an ICE with TAITs and Future\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "html_url": "https://github.com/rust-lang/rust/commit/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc0a764e082d9c0abcf37a768d5889247ba13e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc0a764e082d9c0abcf37a768d5889247ba13e2", "html_url": "https://github.com/rust-lang/rust/commit/6cc0a764e082d9c0abcf37a768d5889247ba13e2"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "bac681bd96fb184d331b20cd9c6b20b9c93670e2", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "patch": "@@ -769,11 +769,16 @@ fn foo(&self) -> Self::T { String::new() }\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.item_def_id);\n         if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n-            let opaque_local_def_id = def_id.expect_local();\n-            let opaque_hir_id = self.hir().local_def_id_to_hir_id(opaque_local_def_id);\n-            let opaque_hir_ty = match &self.hir().expect_item(opaque_hir_id).kind {\n-                hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n-                _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n+            let opaque_local_def_id = def_id.as_local();\n+            let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n+                let hir = self.hir();\n+                let opaque_hir_id = hir.local_def_id_to_hir_id(opaque_local_def_id);\n+                match &hir.expect_item(opaque_hir_id).kind {\n+                    hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n+                    _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n+                }\n+            } else {\n+                return false;\n             };\n \n             let (trait_ref, assoc_substs) = proj_ty.trait_ref_and_own_substs(self);"}, {"sha": "2b6ce49e7e2d7bcc1efdfee652bac48a57488df3", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+\n+#![feature(type_alias_impl_trait)]\n+\n+use std::future::Future;\n+\n+type G<'a, T> = impl Future<Output = ()>;\n+//~^ ERROR: type mismatch resolving `<impl Future as Future>::Output == ()`\n+//~| ERROR: the trait bound `T: Trait` is not satisfied\n+\n+trait Trait {\n+    type F: Future<Output = ()>;\n+\n+    fn f(&self) -> Self::F;\n+\n+    fn g<'a>(&'a self) -> G<'a, Self>\n+    where\n+        Self: Sized,\n+    {\n+        async move { self.f().await }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "accc84d30a7bde3a954866eb7e9c0432ae3337a1", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "patch": "@@ -0,0 +1,34 @@\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+  --> $DIR/issue-89686.rs:7:17\n+   |\n+LL | type G<'a, T> = impl Future<Output = ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+...\n+LL |         async move { self.f().await }\n+   |                    ------------------ the found `async` block\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Future as Future>::Output`\n+   = help: consider constraining the associated type `<impl Future as Future>::Output` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/issue-89686.rs:7:17\n+   |\n+LL | type G<'a, T> = impl Future<Output = ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type G<'a, T: Trait> = impl Future<Output = ()>;\n+   |             +++++++\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}]}