{"sha": "adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZmRiYzRiZDc1ZjI1ODFlOWFkMDE1MWIyNmZiNzg2YjY0NDc1Zjg=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-07-25T20:43:35Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-07-26T06:56:29Z"}, "message": "Remove `ast::LocalSource` with only one used variant\n\n`LocalSource` indicated wether a let binding originated from for-loop desugaring to enable specialized error messages, but for-loop expansion has changed and this is now achieved through `MatchSource::ForLoopDesugar`.", "tree": {"sha": "45fb3bde3a8e759edf82b717beccebbfbc41ade9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45fb3bde3a8e759edf82b717beccebbfbc41ade9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "html_url": "https://github.com/rust-lang/rust/commit/adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7276d8b7613c81c09feeec3bf94d47c4a5174bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7276d8b7613c81c09feeec3bf94d47c4a5174bc8", "html_url": "https://github.com/rust-lang/rust/commit/7276d8b7613c81c09feeec3bf94d47c4a5174bc8"}], "stats": {"total": 29, "additions": 4, "deletions": 25}, "files": [{"sha": "d1467b67310c4cd51007c4c9e3c1dcfb52d14868", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "patch": "@@ -1016,16 +1016,10 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n fn check_local(cx: &mut MatchCheckCtxt, loc: &ast::Local) {\n     visit::walk_local(cx, loc);\n \n-    let name = match loc.source {\n-        ast::LocalLet => \"local\",\n-        ast::LocalFor => \"`for` loop\"\n-    };\n-\n     let mut static_inliner = StaticInliner::new(cx.tcx, None);\n     is_refutable(cx, &*static_inliner.fold_pat(loc.pat.clone()), |pat| {\n         span_err!(cx.tcx.sess, loc.pat.span, E0005,\n-            \"refutable pattern in {} binding: `{}` not covered\",\n-            name, pat_to_string(pat)\n+            \"refutable pattern in local binding: `{}` not covered\", pat_to_string(pat)\n         );\n     });\n "}, {"sha": "72711f2ed18717d6704ebe677f216df994b8365c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "patch": "@@ -29,7 +29,6 @@ pub use self::Item_::*;\n pub use self::KleeneOp::*;\n pub use self::Lit_::*;\n pub use self::LitIntType::*;\n-pub use self::LocalSource::*;\n pub use self::Mac_::*;\n pub use self::MacStmtStyle::*;\n pub use self::MetaItem_::*;\n@@ -756,14 +755,6 @@ pub enum MacStmtStyle {\n     MacStmtWithoutBraces,\n }\n \n-/// Where a local declaration came from: either a true `let ... =\n-/// ...;`, or one desugared from the pattern of a for loop.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum LocalSource {\n-    LocalLet,\n-    LocalFor,\n-}\n-\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -775,7 +766,6 @@ pub struct Local {\n     pub init: Option<P<Expr>>,\n     pub id: NodeId,\n     pub span: Span,\n-    pub source: LocalSource,\n }\n \n pub type Decl = Spanned<Decl_>;"}, {"sha": "79210cb3260a0c030c738f30139d5cff026147d1", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "patch": "@@ -538,7 +538,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n-            source: ast::LocalLet,\n         });\n         let decl = respan(sp, ast::DeclLocal(local));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n@@ -562,7 +561,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n-            source: ast::LocalLet,\n         });\n         let decl = respan(sp, ast::DeclLocal(local));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))"}, {"sha": "286dc91299f5ab7812233afedc3095f4ca20175e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "patch": "@@ -911,7 +911,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n         StmtDecl(decl, node_id) => decl.and_then(|Spanned {node: decl, span}| match decl {\n             DeclLocal(local) => {\n                 // take it apart:\n-                let rewritten_local = local.map(|Local {id, pat, ty, init, source, span}| {\n+                let rewritten_local = local.map(|Local {id, pat, ty, init, span}| {\n                     // expand the ty since TyFixedLengthVec contains an Expr\n                     // and thus may have a macro use\n                     let expanded_ty = ty.map(|t| fld.fold_ty(t));\n@@ -941,7 +941,6 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n                         pat: rewritten_pat,\n                         // also, don't forget to expand the init:\n                         init: init.map(|e| fld.fold_expr(e)),\n-                        source: source,\n                         span: span\n                     }\n                 });"}, {"sha": "dab6d41df300375d5e9d6536066f6c13007c52f6", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "patch": "@@ -515,12 +515,11 @@ pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedPara\n }\n \n pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n-    l.map(|Local {id, pat, ty, init, source, span}| Local {\n+    l.map(|Local {id, pat, ty, init, span}| Local {\n         id: fld.new_id(id),\n         ty: ty.map(|t| fld.fold_ty(t)),\n         pat: fld.fold_pat(pat),\n         init: init.map(|e| fld.fold_expr(e)),\n-        source: source,\n         span: fld.new_span(span)\n     })\n }"}, {"sha": "04665140e2fdbeb02e9449338fb23c96bc6c53b5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfdbc4bd75f2581e9ad0151b26fb786b64475f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=adfdbc4bd75f2581e9ad0151b26fb786b64475f8", "patch": "@@ -35,7 +35,7 @@ use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n use ast::{ItemExternCrate, ItemUse};\n use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n-use ast::{LitStr, LitInt, Local, LocalLet};\n+use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, MatchSource};\n use ast::{MutTy, BiMul, Mutability};\n@@ -3432,7 +3432,6 @@ impl<'a> Parser<'a> {\n             init: init,\n             id: ast::DUMMY_NODE_ID,\n             span: mk_sp(lo, self.last_span.hi),\n-            source: LocalLet,\n         }))\n     }\n "}]}