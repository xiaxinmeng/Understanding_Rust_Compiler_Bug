{"sha": "b3e5c648e0def7a359a75b2b5023c18aceda83d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZTVjNjQ4ZTBkZWY3YTM1OWE3NWIyYjUwMjNjMThhY2VkYTgzZDM=", "commit": {"author": {"name": "rdambrosio", "email": "rdambrosio016@gmail.com", "date": "2021-06-18T16:42:13Z"}, "committer": {"name": "rdambrosio", "email": "rdambrosio016@gmail.com", "date": "2021-06-18T16:42:13Z"}, "message": "Lift ast -> hir out of the for_each", "tree": {"sha": "47717f12bc2d7708e81a907ee651867a3b957a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47717f12bc2d7708e81a907ee651867a3b957a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3e5c648e0def7a359a75b2b5023c18aceda83d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e5c648e0def7a359a75b2b5023c18aceda83d3", "html_url": "https://github.com/rust-lang/rust/commit/b3e5c648e0def7a359a75b2b5023c18aceda83d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3e5c648e0def7a359a75b2b5023c18aceda83d3/comments", "author": {"login": "RDambrosio016", "id": 38166539, "node_id": "MDQ6VXNlcjM4MTY2NTM5", "avatar_url": "https://avatars.githubusercontent.com/u/38166539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RDambrosio016", "html_url": "https://github.com/RDambrosio016", "followers_url": "https://api.github.com/users/RDambrosio016/followers", "following_url": "https://api.github.com/users/RDambrosio016/following{/other_user}", "gists_url": "https://api.github.com/users/RDambrosio016/gists{/gist_id}", "starred_url": "https://api.github.com/users/RDambrosio016/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RDambrosio016/subscriptions", "organizations_url": "https://api.github.com/users/RDambrosio016/orgs", "repos_url": "https://api.github.com/users/RDambrosio016/repos", "events_url": "https://api.github.com/users/RDambrosio016/events{/privacy}", "received_events_url": "https://api.github.com/users/RDambrosio016/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RDambrosio016", "id": 38166539, "node_id": "MDQ6VXNlcjM4MTY2NTM5", "avatar_url": "https://avatars.githubusercontent.com/u/38166539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RDambrosio016", "html_url": "https://github.com/RDambrosio016", "followers_url": "https://api.github.com/users/RDambrosio016/followers", "following_url": "https://api.github.com/users/RDambrosio016/following{/other_user}", "gists_url": "https://api.github.com/users/RDambrosio016/gists{/gist_id}", "starred_url": "https://api.github.com/users/RDambrosio016/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RDambrosio016/subscriptions", "organizations_url": "https://api.github.com/users/RDambrosio016/orgs", "repos_url": "https://api.github.com/users/RDambrosio016/repos", "events_url": "https://api.github.com/users/RDambrosio016/events{/privacy}", "received_events_url": "https://api.github.com/users/RDambrosio016/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e3354ae04f586f218162242b18ffe637cee3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e3354ae04f586f218162242b18ffe637cee3af", "html_url": "https://github.com/rust-lang/rust/commit/23e3354ae04f586f218162242b18ffe637cee3af"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "65f0f38430c5f2261d240c8274b6e3bcfa6fae23", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b3e5c648e0def7a359a75b2b5023c18aceda83d3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e5c648e0def7a359a75b2b5023c18aceda83d3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=b3e5c648e0def7a359a75b2b5023c18aceda83d3", "patch": "@@ -52,28 +52,26 @@ enum ImplCompletionKind {\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some((kind, trigger, impl_def)) = completion_match(ctx.token.clone()) {\n-        get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| match item {\n-            hir::AssocItem::Function(fn_item)\n-                if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Fn =>\n-            {\n-                if let Some(impl_def) = ctx.sema.to_def(&impl_def) {\n-                    add_function_impl(&trigger, acc, ctx, fn_item, impl_def)\n+        if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {\n+            get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| match item {\n+                hir::AssocItem::Function(fn_item)\n+                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Fn =>\n+                {\n+                    add_function_impl(&trigger, acc, ctx, fn_item, hir_impl)\n                 }\n-            }\n-            hir::AssocItem::TypeAlias(type_item)\n-                if kind == ImplCompletionKind::All || kind == ImplCompletionKind::TypeAlias =>\n-            {\n-                add_type_alias_impl(&trigger, acc, ctx, type_item)\n-            }\n-            hir::AssocItem::Const(const_item)\n-                if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Const =>\n-            {\n-                if let Some(impl_def) = ctx.sema.to_def(&impl_def) {\n-                    add_const_impl(&trigger, acc, ctx, const_item, impl_def)\n+                hir::AssocItem::TypeAlias(type_item)\n+                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::TypeAlias =>\n+                {\n+                    add_type_alias_impl(&trigger, acc, ctx, type_item)\n                 }\n-            }\n-            _ => {}\n-        });\n+                hir::AssocItem::Const(const_item)\n+                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Const =>\n+                {\n+                    add_const_impl(&trigger, acc, ctx, const_item, hir_impl)\n+                }\n+                _ => {}\n+            });\n+        }\n     }\n }\n "}]}