{"sha": "1b55c81db565d8e94146b9e2a7ed54f242e349ec", "node_id": "C_kwDOAAsO6NoAKDFiNTVjODFkYjU2NWQ4ZTk0MTQ2YjllMmE3ZWQ1NGYyNDJlMzQ5ZWM", "commit": {"author": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-02-26T17:11:47Z"}, "committer": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-03-26T21:49:56Z"}, "message": "Lint on trait declarations, not implementations", "tree": {"sha": "54ba903cca1bf0ebc386d9595b8383f429650714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ba903cca1bf0ebc386d9595b8383f429650714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b55c81db565d8e94146b9e2a7ed54f242e349ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGofhdE61kfoixWy+rtlL+hwwE4kFAmQgvgQACgkQrtlL+hww\nE4nxQA/8D5GGrQI8zAQ8tVXiYiY88BGKxJUYL2Rg5EWlXVg3cu8pdmgMTJybs2O5\naEYwsJ2qdhkBw3WdAQ6cBX4sys+Vcdmch/rxpVgXqGchvCdw+yKQaRp8YyTYrGhS\npH/WpGyI66yr5xRpavkFPFvJcOW2JGBOnfFl71GRhtnYnijZLra36yXkHQAjvH/N\n5sXUQMFszrhBKSDSuyQA9tE7XE9e58wCfxuuDSKVTUHDZwwTGtPAUmdcCwNtRG6Q\n/GTdH3G1j8dkqQXVDSIDIgwIfRJ0JKyrSydwu7yqcqINaqDpSyES/zlN+wNHmHpo\n5CikthClIcaJmuZrND/wnxQZXrDBu3vo1MRfcZs00VcwxrMlZZBLWkCs608Wu44X\ntrD5Ov8vZzI/GKe9HwkoQljsWXyc8AR/9aCSy3cvkScHpzGGqxPtdup5EpZhgODt\nLTs8MlBNRanMSvpoGKtbIzVnsK3X0HbkjOCVKuDadxyjqIx1D6hBFOSNdLWNnjNL\nJfj72KljHkDqzu65MhGR90Q8VZ4nuhttSvyIeSg6iY6xHs/miEhw1zvJTr82czk0\nJQmdeAIMXxN6+DZpWIE7GlY9ki7dlJX5Ss/kTNNhQpNv/m4ZFvfUeW2IPtS+/fXi\nYHxRY4q/HAHf6tguUot4AKGPv7uUbsxyOqiBTAylw5IzIzjWCDU=\n=CmBh\n-----END PGP SIGNATURE-----", "payload": "tree 54ba903cca1bf0ebc386d9595b8383f429650714\nparent 022f76d432f3e3289af68845d9169c1866c14d70\nauthor Micha White <botahamec@outlook.com> 1677431507 -0500\ncommitter Micha White <botahamec@outlook.com> 1679867396 -0400\n\nLint on trait declarations, not implementations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b55c81db565d8e94146b9e2a7ed54f242e349ec", "html_url": "https://github.com/rust-lang/rust/commit/1b55c81db565d8e94146b9e2a7ed54f242e349ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b55c81db565d8e94146b9e2a7ed54f242e349ec/comments", "author": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022f76d432f3e3289af68845d9169c1866c14d70", "url": "https://api.github.com/repos/rust-lang/rust/commits/022f76d432f3e3289af68845d9169c1866c14d70", "html_url": "https://github.com/rust-lang/rust/commit/022f76d432f3e3289af68845d9169c1866c14d70"}], "stats": {"total": 139, "additions": 91, "deletions": 48}, "files": [{"sha": "77c1506e542997d51e8572acecf5585d160b0471", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "modified", "additions": 52, "deletions": 44, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/1b55c81db565d8e94146b9e2a7ed54f242e349ec/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b55c81db565d8e94146b9e2a7ed54f242e349ec/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=1b55c81db565d8e94146b9e2a7ed54f242e349ec", "patch": "@@ -1,9 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_errors::Applicability;\n-use rustc_hir::{def_id::LocalDefId, intravisit::FnKind, Body, FnDecl, FnRetTy};\n+use rustc_hir::{def_id::LocalDefId, FnDecl, FnRetTy, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -35,54 +34,63 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(UnnecessaryBoxReturns => [UNNECESSARY_BOX_RETURNS]);\n \n-impl LateLintPass<'_> for UnnecessaryBoxReturns {\n-    fn check_fn(\n-        &mut self,\n-        cx: &LateContext<'_>,\n-        fn_kind: FnKind<'_>,\n-        decl: &FnDecl<'_>,\n-        _: &Body<'_>,\n-        _: Span,\n-        def_id: LocalDefId,\n-    ) {\n-        // it's unclear what part of a closure you would span, so for now it's ignored\n-        // if this is changed, please also make sure not to call `hir_ty_to_ty` below\n-        if matches!(fn_kind, FnKind::Closure) {\n-            return;\n-        }\n+fn check_fn_decl(cx: &LateContext<'_>, decl: &FnDecl<'_>, def_id: LocalDefId) {\n+    let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n \n-        let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n+    let return_ty = cx\n+        .tcx\n+        .erase_late_bound_regions(cx.tcx.fn_sig(def_id).skip_binder())\n+        .output();\n \n-        let return_ty = cx\n-            .tcx\n-            .erase_late_bound_regions(cx.tcx.fn_sig(def_id).skip_binder())\n-            .output();\n+    if !return_ty.is_box() {\n+        return;\n+    }\n \n-        if !return_ty.is_box() {\n+    let boxed_ty = return_ty.boxed_ty();\n+\n+    // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n+    if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n+        span_lint_and_then(\n+            cx,\n+            UNNECESSARY_BOX_RETURNS,\n+            return_ty_hir.span,\n+            format!(\"boxed return of the sized type `{boxed_ty}`\").as_str(),\n+            |diagnostic| {\n+                diagnostic.span_suggestion(\n+                    return_ty_hir.span,\n+                    \"try\",\n+                    boxed_ty.to_string(),\n+                    // the return value and function callers also needs to\n+                    // be changed, so this can't be MachineApplicable\n+                    Applicability::Unspecified,\n+                );\n+                diagnostic.help(\"changing this also requires a change to the return expressions in this function\");\n+            },\n+        );\n+    }\n+}\n+\n+impl LateLintPass<'_> for UnnecessaryBoxReturns {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n+        let TraitItemKind::Fn(signature, _) = &item.kind else { return };\n+        check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::ImplItem<'_>) {\n+        // Ignore implementations of traits, because the lint should be on the\n+        // trait, not on the implmentation of it.\n+        let Node::Item(parent) = cx.tcx.hir().get_parent(item.hir_id()) else { return };\n+        let ItemKind::Impl(parent) = parent.kind else { return };\n+        if parent.of_trait.is_some() {\n             return;\n         }\n \n-        let boxed_ty = return_ty.boxed_ty();\n+        let ImplItemKind::Fn(signature, ..) = &item.kind else { return };\n+        check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+    }\n \n-        // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n-        if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n-            span_lint_and_then(\n-                cx,\n-                UNNECESSARY_BOX_RETURNS,\n-                return_ty_hir.span,\n-                format!(\"boxed return of the sized type `{boxed_ty}`\").as_str(),\n-                |diagnostic| {\n-                    diagnostic.span_suggestion(\n-                        return_ty_hir.span,\n-                        \"try\",\n-                        boxed_ty.to_string(),\n-                        // the return value and function callers also needs to\n-                        // be changed, so this can't be MachineApplicable\n-                        Applicability::Unspecified,\n-                    );\n-                    diagnostic.help(\"changing this also requires a change to the return expressions in this function\");\n-                },\n-            );\n-        }\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        let ItemKind::Fn(signature, ..) = &item.kind else { return };\n+        check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n     }\n }"}, {"sha": "399266f90b0c018b7f0506b8994a9cce04497671", "filename": "tests/ui/unnecessary_box_returns.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b55c81db565d8e94146b9e2a7ed54f242e349ec/tests%2Fui%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b55c81db565d8e94146b9e2a7ed54f242e349ec/tests%2Fui%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.rs?ref=1b55c81db565d8e94146b9e2a7ed54f242e349ec", "patch": "@@ -1,7 +1,26 @@\n #![warn(clippy::unnecessary_box_returns)]\n \n+trait Bar {\n+    // lint\n+    fn baz(&self) -> Box<usize>;\n+}\n+\n struct Foo {}\n \n+impl Bar for Foo {\n+    // don't lint: this is a problem with the trait, not the implementation\n+    fn baz(&self) -> Box<usize> {\n+        Box::new(42)\n+    }\n+}\n+\n+impl Foo {\n+    fn baz(&self) -> Box<usize> {\n+        // lint\n+        Box::new(13)\n+    }\n+}\n+\n // lint\n fn boxed_usize() -> Box<usize> {\n     Box::new(5)"}, {"sha": "a431e37a201bc971ccd718635c650675bf63e1dd", "filename": "tests/ui/unnecessary_box_returns.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b55c81db565d8e94146b9e2a7ed54f242e349ec/tests%2Fui%2Funnecessary_box_returns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b55c81db565d8e94146b9e2a7ed54f242e349ec/tests%2Fui%2Funnecessary_box_returns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.stderr?ref=1b55c81db565d8e94146b9e2a7ed54f242e349ec", "patch": "@@ -1,19 +1,35 @@\n error: boxed return of the sized type `usize`\n-  --> $DIR/unnecessary_box_returns.rs:6:21\n+  --> $DIR/unnecessary_box_returns.rs:5:22\n+   |\n+LL |     fn baz(&self) -> Box<usize>;\n+   |                      ^^^^^^^^^^ help: try: `usize`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+   = note: `-D clippy::unnecessary-box-returns` implied by `-D warnings`\n+\n+error: boxed return of the sized type `usize`\n+  --> $DIR/unnecessary_box_returns.rs:18:22\n+   |\n+LL |     fn baz(&self) -> Box<usize> {\n+   |                      ^^^^^^^^^^ help: try: `usize`\n+   |\n+   = help: changing this also requires a change to the return expressions in this function\n+\n+error: boxed return of the sized type `usize`\n+  --> $DIR/unnecessary_box_returns.rs:25:21\n    |\n LL | fn boxed_usize() -> Box<usize> {\n    |                     ^^^^^^^^^^ help: try: `usize`\n    |\n    = help: changing this also requires a change to the return expressions in this function\n-   = note: `-D clippy::unnecessary-box-returns` implied by `-D warnings`\n \n error: boxed return of the sized type `Foo`\n-  --> $DIR/unnecessary_box_returns.rs:11:19\n+  --> $DIR/unnecessary_box_returns.rs:30:19\n    |\n LL | fn boxed_foo() -> Box<Foo> {\n    |                   ^^^^^^^^ help: try: `Foo`\n    |\n    = help: changing this also requires a change to the return expressions in this function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}]}