{"sha": "3d59a476e56b855fb27405016f0592ca7913b624", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNTlhNDc2ZTU2Yjg1NWZiMjc0MDUwMTZmMDU5MmNhNzkxM2I2MjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-14T13:27:38Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-16T11:49:39Z"}, "message": "Support SSE types in extern {} better.\n\nThis seems to work on x86-64, but I am not able to test on other\nplatforms.\n\ncc #20043", "tree": {"sha": "4537310af9db4f33c7e72e71e6020620fd171cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4537310af9db4f33c7e72e71e6020620fd171cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d59a476e56b855fb27405016f0592ca7913b624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d59a476e56b855fb27405016f0592ca7913b624", "html_url": "https://github.com/rust-lang/rust/commit/3d59a476e56b855fb27405016f0592ca7913b624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d59a476e56b855fb27405016f0592ca7913b624/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ebde950f5afc16366b04b4c191f1c6198726da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebde950f5afc16366b04b4c191f1c6198726da7", "html_url": "https://github.com/rust-lang/rust/commit/4ebde950f5afc16366b04b4c191f1c6198726da7"}], "stats": {"total": 112, "additions": 102, "deletions": 10}, "files": [{"sha": "ca9b3791ea9806d696c3c630a8956fb978b63214", "filename": "src/librustc_trans/trans/cabi_aarch64.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs?ref=3d59a476e56b855fb27405016f0592ca7913b624", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use llvm;\n-use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n use llvm::{StructRetAttribute, ZExtAttribute};\n use trans::cabi::{FnType, ArgType};\n use trans::context::CrateContext;\n@@ -50,6 +50,11 @@ fn ty_align(ty: Type) -> uint {\n             let elt = ty.element_type();\n             ty_align(elt)\n         }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            ty_align(elt) * len\n+        }\n         _ => panic!(\"ty_align: unhandled type\")\n     }\n }\n@@ -80,6 +85,12 @@ fn ty_size(ty: Type) -> uint {\n             let eltsz = ty_size(elt);\n             len * eltsz\n         }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n         _ => panic!(\"ty_size: unhandled type\")\n     }\n }"}, {"sha": "2da0c3787e8c5d2f85d52cf124a72e5c54a74d85", "filename": "src/librustc_trans/trans/cabi_arm.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs?ref=3d59a476e56b855fb27405016f0592ca7913b624", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use llvm;\n-use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n use llvm::{StructRetAttribute, ZExtAttribute};\n use trans::cabi::{FnType, ArgType};\n use trans::context::CrateContext;\n@@ -57,6 +57,11 @@ fn general_ty_align(ty: Type) -> uint {\n             let elt = ty.element_type();\n             general_ty_align(elt)\n         }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            general_ty_align(elt) * len\n+        }\n         _ => panic!(\"ty_align: unhandled type\")\n     }\n }\n@@ -90,6 +95,11 @@ fn ios_ty_align(ty: Type) -> uint {\n             let elt = ty.element_type();\n             ios_ty_align(elt)\n         }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            ios_ty_align(elt) * len\n+        }\n         _ => panic!(\"ty_align: unhandled type\")\n     }\n }\n@@ -123,6 +133,12 @@ fn ty_size(ty: Type, align_fn: TyAlignFn) -> uint {\n             let eltsz = ty_size(elt, align_fn);\n             len * eltsz\n         }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt, align_fn);\n+            len * eltsz\n+        }\n         _ => panic!(\"ty_size: unhandled type\")\n     }\n }"}, {"sha": "0a0ab784f57fccb011be70adcee32ec1a70e8092", "filename": "src/librustc_trans/trans/cabi_mips.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs?ref=3d59a476e56b855fb27405016f0592ca7913b624", "patch": "@@ -13,7 +13,7 @@\n use libc::c_uint;\n use std::cmp;\n use llvm;\n-use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n use llvm::{StructRetAttribute, ZExtAttribute};\n use trans::cabi::{ArgType, FnType};\n use trans::context::CrateContext;\n@@ -50,7 +50,12 @@ fn ty_align(ty: Type) -> uint {\n             let elt = ty.element_type();\n             ty_align(elt)\n         }\n-        _ => panic!(\"ty_size: unhandled type\")\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            ty_align(elt) * len\n+        }\n+        _ => panic!(\"ty_align: unhandled type\")\n     }\n }\n \n@@ -80,6 +85,12 @@ fn ty_size(ty: Type) -> uint {\n             let eltsz = ty_size(elt);\n             len * eltsz\n         }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n         _ => panic!(\"ty_size: unhandled type\")\n     }\n }"}, {"sha": "72ace5f95617df94c21fface97bccfcac817cf75", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d59a476e56b855fb27405016f0592ca7913b624/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=3d59a476e56b855fb27405016f0592ca7913b624", "patch": "@@ -16,7 +16,7 @@ use self::RegClass::*;\n \n use llvm;\n use llvm::{Integer, Pointer, Float, Double};\n-use llvm::{Struct, Array, Attribute};\n+use llvm::{Struct, Array, Attribute, Vector};\n use llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n use trans::cabi::{ArgType, FnType};\n use trans::context::CrateContext;\n@@ -114,7 +114,12 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n                 let elt = ty.element_type();\n                 ty_align(elt)\n             }\n-            _ => panic!(\"ty_size: unhandled type\")\n+            Vector => {\n+                let len = ty.vector_length();\n+                let elt = ty.element_type();\n+                ty_align(elt) * len\n+            }\n+            _ => panic!(\"ty_align: unhandled type\")\n         }\n     }\n \n@@ -143,6 +148,13 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n                 let eltsz = ty_size(elt);\n                 len * eltsz\n             }\n+            Vector => {\n+                let len = ty.vector_length();\n+                let elt = ty.element_type();\n+                let eltsz = ty_size(elt);\n+                len * eltsz\n+            }\n+\n             _ => panic!(\"ty_size: unhandled type\")\n         }\n     }\n@@ -175,6 +187,12 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n             (_,           X87Up) |\n             (_,           ComplexX87) => Memory,\n \n+            (SSEFv,       SSEUp) |\n+            (SSEFs,       SSEUp) |\n+            (SSEDv,       SSEUp) |\n+            (SSEDs,       SSEUp) |\n+            (SSEInt(_),   SSEUp) => return,\n+\n             (_,           _) => newv\n         };\n         cls[i] = to_write;\n@@ -240,6 +258,27 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n                     i += 1u;\n                 }\n             }\n+            Vector => {\n+                let len = ty.vector_length();\n+                let elt = ty.element_type();\n+                let eltsz = ty_size(elt);\n+                let mut reg = match elt.kind() {\n+                    Integer => SSEInt,\n+                    Float => SSEFv,\n+                    Double => SSEDv,\n+                    _ => panic!(\"classify: unhandled vector element type\")\n+                };\n+\n+                let mut i = 0u;\n+                while i < len {\n+                    unify(cls, ix + (off + i * eltsz) / 8, reg);\n+\n+                    // everything after the first one is the upper\n+                    // half of a register.\n+                    reg = SSEUp;\n+                    i += 1u;\n+                }\n+            }\n             _ => panic!(\"classify: unhandled type\")\n         }\n     }\n@@ -248,7 +287,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n         let mut i = 0u;\n         let ty_kind = ty.kind();\n         let e = cls.len();\n-        if cls.len() > 2u && (ty_kind == Struct || ty_kind == Array) {\n+        if cls.len() > 2u && (ty_kind == Struct || ty_kind == Array || ty_kind == Vector) {\n             if cls[i].is_sse() {\n                 i += 1u;\n                 while i < e {\n@@ -320,9 +359,19 @@ fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type {\n             Int => {\n                 tys.push(Type::i64(ccx));\n             }\n-            SSEFv => {\n+            SSEFv | SSEDv | SSEInt => {\n+                let (elts_per_word, elt_ty) = match cls[i] {\n+                    SSEFv => (2, Type::f32(ccx)),\n+                    SSEDv => (1, Type::f64(ccx)),\n+                    // FIXME: need to handle the element types, since\n+                    // C doesn't distinguish between the contained\n+                    // types of the vector at all; normalise to u8,\n+                    // maybe?\n+                    SSEInt => panic!(\"llregtype: SSEInt not yet supported\"),\n+                    _ => unreachable!(),\n+                };\n                 let vec_len = llvec_len(&cls[(i + 1u)..]);\n-                let vec_ty = Type::vector(&Type::f32(ccx), (vec_len * 2u) as u64);\n+                let vec_ty = Type::vector(&elt_ty, (vec_len * elts_per_word) as u64);\n                 tys.push(vec_ty);\n                 i += vec_len;\n                 continue;\n@@ -337,7 +386,12 @@ fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type {\n         }\n         i += 1u;\n     }\n-    return Type::struct_(ccx, tys.as_slice(), false);\n+    if tys.len() == 1 && tys[0].kind() == Vector {\n+        // if the type contains only a vector, pass it as that vector.\n+        tys[0]\n+    } else {\n+        Type::struct_(ccx, tys.as_slice(), false)\n+    }\n }\n \n pub fn compute_abi_info(ccx: &CrateContext,"}]}