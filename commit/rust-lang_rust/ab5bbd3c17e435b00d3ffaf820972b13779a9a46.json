{"sha": "ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWJiZDNjMTdlNDM1YjAwZDNmZmFmODIwOTcyYjEzNzc5YTlhNDY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-01-25T21:34:26Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-01-25T21:55:39Z"}, "message": "Simplify and rename macro API\n\nNow that procedural macros can be implemented outside of the compiler,\nit's more important to have a reasonable API to work with. Here are the\nbasic changes:\n\n* Rename SyntaxExpanderTTTrait to MacroExpander, SyntaxExpanderTT to\n    BasicMacroExpander, etc. I think \"procedural macro\" is the right\n    term for these now, right? The other option would be SynExtExpander\n    or something like that.\n\n* Stop passing the SyntaxContext to extensions. This was only ever used\n    by macro_rules, which doesn't even use it anymore. I can't think of\n    a context in which an external extension would need it, and removal\n    allows the API to be significantly simpler - no more\n    SyntaxExpanderTTItemExpanderWithoutContext wrappers to worry about.", "tree": {"sha": "483e620169a390f5f2dbb404cf19a325dbdee008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483e620169a390f5f2dbb404cf19a325dbdee008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "html_url": "https://github.com/rust-lang/rust/commit/ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de57a22b9a8c8416cace31c9bd3ec4c9a6888017", "url": "https://api.github.com/repos/rust-lang/rust/commits/de57a22b9a8c8416cace31c9bd3ec4c9a6888017", "html_url": "https://github.com/rust-lang/rust/commit/de57a22b9a8c8416cace31c9bd3ec4c9a6888017"}], "stats": {"total": 213, "additions": 72, "deletions": 141}, "files": [{"sha": "adf1eabf9d94d45401151bce758d7a060002f4e6", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 52, "deletions": 82, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "patch": "@@ -38,91 +38,63 @@ pub struct MacroDef {\n pub type ItemDecorator =\n     fn(&ExtCtxt, Span, @ast::MetaItem, ~[@ast::Item]) -> ~[@ast::Item];\n \n-pub struct SyntaxExpanderTT {\n-    expander: SyntaxExpanderTTExpander,\n+pub struct BasicMacroExpander {\n+    expander: MacroExpanderFn,\n     span: Option<Span>\n }\n \n-pub trait SyntaxExpanderTTTrait {\n+pub trait MacroExpander {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n-              token_tree: &[ast::TokenTree],\n-              context: ast::SyntaxContext)\n+              token_tree: &[ast::TokenTree])\n               -> MacResult;\n }\n \n-pub type SyntaxExpanderTTFunNoCtxt =\n+pub type MacroExpanderFn =\n     fn(ecx: &mut ExtCtxt, span: codemap::Span, token_tree: &[ast::TokenTree])\n        -> MacResult;\n \n-enum SyntaxExpanderTTExpander {\n-    SyntaxExpanderTTExpanderWithoutContext(SyntaxExpanderTTFunNoCtxt),\n-}\n-\n-impl SyntaxExpanderTTTrait for SyntaxExpanderTT {\n+impl MacroExpander for BasicMacroExpander {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n-              token_tree: &[ast::TokenTree],\n-              _: ast::SyntaxContext)\n+              token_tree: &[ast::TokenTree])\n               -> MacResult {\n-        match self.expander {\n-            SyntaxExpanderTTExpanderWithoutContext(f) => {\n-                f(ecx, span, token_tree)\n-            }\n-        }\n+        (self.expander)(ecx, span, token_tree)\n     }\n }\n \n-enum SyntaxExpanderTTItemExpander {\n-    SyntaxExpanderTTItemExpanderWithContext(SyntaxExpanderTTItemFun),\n-    SyntaxExpanderTTItemExpanderWithoutContext(SyntaxExpanderTTItemFunNoCtxt),\n-}\n-\n-pub struct SyntaxExpanderTTItem {\n-    expander: SyntaxExpanderTTItemExpander,\n+pub struct BasicIdentMacroExpander {\n+    expander: IdentMacroExpanderFn,\n     span: Option<Span>\n }\n \n-pub trait SyntaxExpanderTTItemTrait {\n+pub trait IdentMacroExpander {\n     fn expand(&self,\n               cx: &mut ExtCtxt,\n               sp: Span,\n               ident: ast::Ident,\n-              token_tree: ~[ast::TokenTree],\n-              context: ast::SyntaxContext)\n+              token_tree: ~[ast::TokenTree])\n               -> MacResult;\n }\n \n-impl SyntaxExpanderTTItemTrait for SyntaxExpanderTTItem {\n+impl IdentMacroExpander for BasicIdentMacroExpander {\n     fn expand(&self,\n               cx: &mut ExtCtxt,\n               sp: Span,\n               ident: ast::Ident,\n-              token_tree: ~[ast::TokenTree],\n-              context: ast::SyntaxContext)\n+              token_tree: ~[ast::TokenTree])\n               -> MacResult {\n-        match self.expander {\n-            SyntaxExpanderTTItemExpanderWithContext(fun) => {\n-                fun(cx, sp, ident, token_tree, context)\n-            }\n-            SyntaxExpanderTTItemExpanderWithoutContext(fun) => {\n-                fun(cx, sp, ident, token_tree)\n-            }\n-        }\n+        (self.expander)(cx, sp, ident, token_tree)\n     }\n }\n \n-pub type SyntaxExpanderTTItemFun =\n-    fn(&mut ExtCtxt, Span, ast::Ident, ~[ast::TokenTree], ast::SyntaxContext)\n-       -> MacResult;\n-\n-pub type SyntaxExpanderTTItemFunNoCtxt =\n+pub type IdentMacroExpanderFn =\n     fn(&mut ExtCtxt, Span, ast::Ident, ~[ast::TokenTree]) -> MacResult;\n \n pub type MacroCrateRegistrationFun =\n-    extern \"Rust\" fn(|ast::Name, SyntaxExtension|);\n+    fn(|ast::Name, SyntaxExtension|);\n \n pub trait AnyMacro {\n     fn make_expr(&self) -> @ast::Expr;\n@@ -153,7 +125,7 @@ pub enum SyntaxExtension {\n     ItemDecorator(ItemDecorator),\n \n     // Token-tree expanders\n-    NormalTT(~SyntaxExpanderTTTrait:'static, Option<Span>),\n+    NormalTT(~MacroExpander:'static, Option<Span>),\n \n     // An IdentTT is a macro that has an\n     // identifier in between the name of the\n@@ -163,7 +135,7 @@ pub enum SyntaxExtension {\n \n     // perhaps macro_rules! will lose its odd special identifier argument,\n     // and this can go away also\n-    IdentTT(~SyntaxExpanderTTItemTrait:'static, Option<Span>),\n+    IdentTT(~IdentMacroExpander:'static, Option<Span>),\n }\n \n pub struct BlockInfo {\n@@ -192,102 +164,100 @@ pub type RenameList = ~[(ast::Ident,Name)];\n // AST nodes into full ASTs\n pub fn syntax_expander_table() -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n-    fn builtin_normal_tt_no_ctxt(f: SyntaxExpanderTTFunNoCtxt)\n-                                 -> SyntaxExtension {\n-        NormalTT(~SyntaxExpanderTT{\n-            expander: SyntaxExpanderTTExpanderWithoutContext(f),\n-            span: None,\n-        },\n-        None)\n+    fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n+        NormalTT(~BasicMacroExpander {\n+                expander: f,\n+                span: None,\n+            },\n+            None)\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n     syntax_expanders.insert(intern(&\"macro_rules\"),\n-                            IdentTT(~SyntaxExpanderTTItem {\n-                                expander: SyntaxExpanderTTItemExpanderWithContext(\n-                                    ext::tt::macro_rules::add_new_extension),\n+                            IdentTT(~BasicIdentMacroExpander {\n+                                expander: ext::tt::macro_rules::add_new_extension,\n                                 span: None,\n                             },\n                             None));\n     syntax_expanders.insert(intern(&\"fmt\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                 ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(intern(&\"format_args\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                 ext::format::expand_args));\n     syntax_expanders.insert(intern(&\"env\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::env::expand_env));\n     syntax_expanders.insert(intern(&\"option_env\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::env::expand_option_env));\n     syntax_expanders.insert(intern(\"bytes\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::bytes::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"concat_idents\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::concat_idents::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"concat\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::concat::expand_syntax_ext));\n     syntax_expanders.insert(intern(&\"log_syntax\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(intern(&\"deriving\"),\n                             ItemDecorator(ext::deriving::expand_meta_deriving));\n \n     // Quasi-quoting expanders\n     syntax_expanders.insert(intern(&\"quote_tokens\"),\n-                       builtin_normal_tt_no_ctxt(\n+                       builtin_normal_expander(\n                             ext::quote::expand_quote_tokens));\n     syntax_expanders.insert(intern(&\"quote_expr\"),\n-                       builtin_normal_tt_no_ctxt(\n+                       builtin_normal_expander(\n                             ext::quote::expand_quote_expr));\n     syntax_expanders.insert(intern(&\"quote_ty\"),\n-                       builtin_normal_tt_no_ctxt(\n+                       builtin_normal_expander(\n                             ext::quote::expand_quote_ty));\n     syntax_expanders.insert(intern(&\"quote_item\"),\n-                       builtin_normal_tt_no_ctxt(\n+                       builtin_normal_expander(\n                             ext::quote::expand_quote_item));\n     syntax_expanders.insert(intern(&\"quote_pat\"),\n-                       builtin_normal_tt_no_ctxt(\n+                       builtin_normal_expander(\n                             ext::quote::expand_quote_pat));\n     syntax_expanders.insert(intern(&\"quote_stmt\"),\n-                       builtin_normal_tt_no_ctxt(\n+                       builtin_normal_expander(\n                             ext::quote::expand_quote_stmt));\n \n     syntax_expanders.insert(intern(&\"line\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_line));\n     syntax_expanders.insert(intern(&\"col\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_col));\n     syntax_expanders.insert(intern(&\"file\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_file));\n     syntax_expanders.insert(intern(&\"stringify\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_stringify));\n     syntax_expanders.insert(intern(&\"include\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_include));\n     syntax_expanders.insert(intern(&\"include_str\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_include_str));\n     syntax_expanders.insert(intern(&\"include_bin\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_include_bin));\n     syntax_expanders.insert(intern(&\"module_path\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::source_util::expand_mod));\n     syntax_expanders.insert(intern(&\"asm\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::asm::expand_asm));\n     syntax_expanders.insert(intern(&\"cfg\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n     syntax_expanders.insert(intern(&\"trace_macros\"),\n-                            builtin_normal_tt_no_ctxt(\n+                            builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));\n     syntax_expanders\n }"}, {"sha": "cd87819917a5fd103459b9c0a1838f806cf468d4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 49, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "patch": "@@ -13,7 +13,7 @@ use ast::{Local, Ident, MacInvocTT};\n use ast::{ItemMac, Mrk, Stmt, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n use ast::{TokenTree};\n use ast;\n-use ast_util::{mtwt_outer_mark, new_rename, new_mark};\n+use ast_util::{new_rename, new_mark};\n use ext::build::AstBuilder;\n use attr;\n use attr::AttrMetaMethods;\n@@ -44,7 +44,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                 // for the other three macro invocation chunks of code\n                 // in this file.\n                 // Token-tree macros:\n-                MacInvocTT(ref pth, ref tts, ctxt) => {\n+                MacInvocTT(ref pth, ref tts, _) => {\n                     if pth.segments.len() > 1u {\n                         fld.cx.span_err(\n                             pth.span,\n@@ -77,7 +77,6 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                             let fm = fresh_mark();\n                             // mark before:\n                             let marked_before = mark_tts(*tts,fm);\n-                            let marked_ctxt = new_mark(fm, ctxt);\n \n                             // The span that we pass to the expanders we want to\n                             // be the root of the call stack. That's the most\n@@ -87,8 +86,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n \n                             let expanded = match expandfun.expand(fld.cx,\n                                                    mac_span.call_site,\n-                                                   marked_before,\n-                                                   marked_ctxt) {\n+                                                   marked_before) {\n                                 MRExpr(e) => e,\n                                 MRAny(any_macro) => any_macro.make_expr(),\n                                 _ => {\n@@ -286,12 +284,12 @@ pub fn contains_macro_escape(attrs: &[ast::Attribute]) -> bool {\n // logic as for expression-position macro invocations.\n pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n                        -> SmallVector<@ast::Item> {\n-    let (pth, tts, ctxt) = match it.node {\n+    let (pth, tts) = match it.node {\n         ItemMac(codemap::Spanned {\n-            node: MacInvocTT(ref pth, ref tts, ctxt),\n+            node: MacInvocTT(ref pth, ref tts, _),\n             ..\n         }) => {\n-            (pth, (*tts).clone(), ctxt)\n+            (pth, (*tts).clone())\n         }\n         _ => fld.cx.span_bug(it.span, \"invalid item macro invocation\")\n     };\n@@ -325,8 +323,7 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n             });\n             // mark before expansion:\n             let marked_before = mark_tts(tts,fm);\n-            let marked_ctxt = new_mark(fm,ctxt);\n-            expander.expand(fld.cx, it.span, marked_before, marked_ctxt)\n+            expander.expand(fld.cx, it.span, marked_before)\n         }\n         Some(&IdentTT(ref expander, span)) => {\n             if it.ident.name == parse::token::special_idents::invalid.name {\n@@ -344,8 +341,7 @@ pub fn expand_item_mac(it: @ast::Item, fld: &mut MacroExpander)\n             });\n             // mark before expansion:\n             let marked_tts = mark_tts(tts,fm);\n-            let marked_ctxt = new_mark(fm,ctxt);\n-            expander.expand(fld.cx, it.span, it.ident, marked_tts, marked_ctxt)\n+            expander.expand(fld.cx, it.span, it.ident, marked_tts)\n         }\n         _ => {\n             fld.cx.span_err(it.span, format!(\"{}! is not legal in item position\", extnamestr));\n@@ -464,11 +460,11 @@ fn load_extern_macros(crate: &ast::ViewItem, fld: &mut MacroExpander) {\n pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n     // why the copying here and not in expand_expr?\n     // looks like classic changed-in-only-one-place\n-    let (pth, tts, semi, ctxt) = match s.node {\n+    let (pth, tts, semi) = match s.node {\n         StmtMac(ref mac, semi) => {\n             match mac.node {\n-                MacInvocTT(ref pth, ref tts, ctxt) => {\n-                    (pth, (*tts).clone(), semi, ctxt)\n+                MacInvocTT(ref pth, ref tts, _) => {\n+                    (pth, (*tts).clone(), semi)\n                 }\n             }\n         }\n@@ -498,16 +494,14 @@ pub fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<@Stmt> {\n             let fm = fresh_mark();\n             // mark before expansion:\n             let marked_tts = mark_tts(tts,fm);\n-            let marked_ctxt = new_mark(fm,ctxt);\n \n             // See the comment in expand_expr for why we want the original span,\n             // not the current mac.span.\n             let mac_span = original_span(fld.cx);\n \n             let expanded = match expandfun.expand(fld.cx,\n                                                   mac_span.call_site,\n-                                                  marked_tts,\n-                                                  marked_ctxt) {\n+                                                  marked_tts) {\n                 MRExpr(e) => {\n                     @codemap::Spanned {\n                         node: StmtExpr(e, ast::DUMMY_NODE_ID),\n@@ -923,15 +917,6 @@ pub fn replace_ctxts(expr : @ast::Expr, ctxt : SyntaxContext) -> @ast::Expr {\n     fun_to_ctxt_folder(@Repainter{ctxt:ctxt}).fold_expr(expr)\n }\n \n-// take the mark from the given ctxt (that has a mark at the outside),\n-// and apply it to everything in the token trees, thereby cancelling\n-// that mark.\n-pub fn mtwt_cancel_outer_mark(tts: &[ast::TokenTree], ctxt: ast::SyntaxContext)\n-    -> ~[ast::TokenTree] {\n-    let outer_mark = mtwt_outer_mark(ctxt);\n-    mark_tts(tts,outer_mark)\n-}\n-\n fn original_span(cx: &ExtCtxt) -> @codemap::ExpnInfo {\n     let mut relevant_info = cx.backtrace();\n     let mut einfo = relevant_info.unwrap();\n@@ -1090,28 +1075,6 @@ mod test {\n         }\n     }\n \n-    #[test] fn cancel_outer_mark_test(){\n-        let invalid_name = token::special_idents::invalid.name;\n-        let ident_str = @\"x\";\n-        let tts = string_to_tts(ident_str);\n-        let fm = fresh_mark();\n-        let marked_once = fold::fold_tts(tts,&mut new_mark_folder(fm));\n-        assert_eq!(marked_once.len(),1);\n-        let marked_once_ctxt =\n-            match marked_once[0] {\n-                ast::TTTok(_,token::IDENT(id,_)) => id.ctxt,\n-                _ => fail!(format!(\"unexpected shape for marked tts: {:?}\",marked_once[0]))\n-            };\n-        assert_eq!(mtwt_marksof(marked_once_ctxt,invalid_name),~[fm]);\n-        let remarked = mtwt_cancel_outer_mark(marked_once,marked_once_ctxt);\n-        assert_eq!(remarked.len(),1);\n-        match remarked[0] {\n-            ast::TTTok(_,token::IDENT(id,_)) =>\n-            assert_eq!(mtwt_marksof(id.ctxt,invalid_name),~[]),\n-            _ => fail!(format!(\"unexpected shape for marked tts: {:?}\",remarked[0]))\n-        }\n-    }\n-\n     #[test]\n     fn renaming () {\n         let item_ast = string_to_crate(@\"fn f() -> int { a }\");"}, {"sha": "aabd9c694f7c024bd5f063fa711837583d94d5fa", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "patch": "@@ -13,7 +13,7 @@ use ast::{TTDelim};\n use ast;\n use codemap::{Span, Spanned, DUMMY_SP};\n use ext::base::{AnyMacro, ExtCtxt, MacResult, MRAny, MRDef, MacroDef};\n-use ext::base::{NormalTT, SyntaxExpanderTTTrait};\n+use ext::base::{NormalTT, MacroExpander};\n use ext::base;\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n@@ -87,18 +87,17 @@ impl AnyMacro for ParserAnyMacro {\n     }\n }\n \n-struct MacroRulesSyntaxExpanderTTFun {\n+struct MacroRulesMacroExpander {\n     name: Ident,\n     lhses: @~[@NamedMatch],\n     rhses: @~[@NamedMatch],\n }\n \n-impl SyntaxExpanderTTTrait for MacroRulesSyntaxExpanderTTFun {\n+impl MacroExpander for MacroRulesMacroExpander {\n     fn expand(&self,\n               cx: &mut ExtCtxt,\n               sp: Span,\n-              arg: &[ast::TokenTree],\n-              _: ast::SyntaxContext)\n+              arg: &[ast::TokenTree])\n               -> MacResult {\n         generic_extension(cx, sp, self.name, arg, *self.lhses, *self.rhses)\n     }\n@@ -175,8 +174,7 @@ fn generic_extension(cx: &ExtCtxt,\n pub fn add_new_extension(cx: &mut ExtCtxt,\n                          sp: Span,\n                          name: Ident,\n-                         arg: ~[ast::TokenTree],\n-                         _: ast::SyntaxContext)\n+                         arg: ~[ast::TokenTree])\n                          -> base::MacResult {\n     // these spans won't matter, anyways\n     fn ms(m: Matcher_) -> Matcher {\n@@ -224,7 +222,7 @@ pub fn add_new_extension(cx: &mut ExtCtxt,\n         _ => cx.span_bug(sp, \"wrong-structured rhs\")\n     };\n \n-    let exp = ~MacroRulesSyntaxExpanderTTFun {\n+    let exp = ~MacroRulesMacroExpander {\n         name: name,\n         lhses: lhses,\n         rhses: rhses,"}, {"sha": "e5bf8574366c85ea1a9d4a75c43bd18a7c0db80e", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5bbd3c17e435b00d3ffaf820972b13779a9a46/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=ab5bbd3c17e435b00d3ffaf820972b13779a9a46", "patch": "@@ -27,8 +27,8 @@ macro_rules! unexported_macro (() => (3))\n #[macro_registrar]\n pub fn macro_registrar(register: |Name, SyntaxExtension|) {\n     register(token::intern(\"make_a_1\"),\n-        NormalTT(~SyntaxExpanderTT {\n-            expander: SyntaxExpanderTTExpanderWithoutContext(expand_make_a_1),\n+        NormalTT(~BasicMacroExpander {\n+            expander: expand_make_a_1,\n             span: None,\n         },\n         None));"}]}