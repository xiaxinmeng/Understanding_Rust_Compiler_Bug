{"sha": "7dc411667a313f438f9edecb0b19b58d17596915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYzQxMTY2N2EzMTNmNDM4ZjllZGVjYjBiMTliNThkMTc1OTY5MTU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-20T18:22:08Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T06:25:26Z"}, "message": "Migrate Context::maybe_ignore_item method to standalone function.\n\nThe method wasn't using any `self` data from Context, so it seemed\nmiseading to implement it as a method.", "tree": {"sha": "0f2e3967737460c036688df75106302539001320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2e3967737460c036688df75106302539001320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc411667a313f438f9edecb0b19b58d17596915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc411667a313f438f9edecb0b19b58d17596915", "html_url": "https://github.com/rust-lang/rust/commit/7dc411667a313f438f9edecb0b19b58d17596915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc411667a313f438f9edecb0b19b58d17596915/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "html_url": "https://github.com/rust-lang/rust/commit/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "5b878c22e79b4661a78c1a7845a0ec87c630593b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7dc411667a313f438f9edecb0b19b58d17596915/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc411667a313f438f9edecb0b19b58d17596915/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7dc411667a313f438f9edecb0b19b58d17596915", "patch": "@@ -1353,7 +1353,7 @@ impl Context {\n         // these modules are recursed into, but not rendered normally\n         // (a flag on the context).\n         if !self.render_redirect_pages {\n-            self.render_redirect_pages = self.maybe_ignore_item(&item);\n+            self.render_redirect_pages = maybe_ignore_item(&item);\n         }\n \n         if item.is_mod() {\n@@ -1436,7 +1436,7 @@ impl Context {\n         // BTreeMap instead of HashMap to get a sorted output\n         let mut map = BTreeMap::new();\n         for item in &m.items {\n-            if self.maybe_ignore_item(item) { continue }\n+            if maybe_ignore_item(item) { continue }\n \n             let short = item_type(item).css_class();\n             let myname = match item.name {\n@@ -1453,17 +1453,6 @@ impl Context {\n         }\n         return map;\n     }\n-\n-    fn maybe_ignore_item(&self, it: &clean::Item) -> bool {\n-        match it.inner {\n-            clean::StrippedItem(..) => true,\n-            clean::ModuleItem(ref m) => {\n-                it.doc_value().is_none() && m.items.is_empty()\n-                                         && it.visibility != Some(clean::Public)\n-            },\n-            _ => false,\n-        }\n-    }\n }\n \n impl<'a> Item<'a> {\n@@ -1706,7 +1695,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n         if let clean::DefaultImplItem(..) = items[*i].inner {\n             return false;\n         }\n-        !cx.maybe_ignore_item(&items[*i])\n+        !maybe_ignore_item(&items[*i])\n     }).collect::<Vec<usize>>();\n \n     // the order of item types in the listing\n@@ -1854,6 +1843,17 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     Ok(())\n }\n \n+fn maybe_ignore_item(it: &clean::Item) -> bool {\n+    match it.inner {\n+        clean::StrippedItem(..) => true,\n+        clean::ModuleItem(ref m) => {\n+            it.doc_value().is_none() && m.items.is_empty()\n+                                     && it.visibility != Some(clean::Public)\n+        },\n+        _ => false,\n+    }\n+}\n+\n fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<String> {\n     let mut stability = vec![];\n "}]}