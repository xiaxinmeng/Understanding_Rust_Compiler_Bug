{"sha": "e28f081cc257122fed7a2fb9d3358f3ac9829245", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGYwODFjYzI1NzEyMmZlZDdhMmZiOWQzMzU4ZjNhYzk4MjkyNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-26T04:51:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-26T04:51:58Z"}, "message": "auto merge of #13106 : CLUSTERfoo/rust/docs/labelled_breaks, r=brson\n\n* Include tip given by Leo Testard in mailing list about labeled `break`\r\nand `continue`:\r\nhttps://mail.mozilla.org/pipermail/rust-dev/2014-March/009145.html\r\n* cross-reference named lifetimes in tutorial -> lifetimes guide\r\n* Broke named lifetimes section into two sub-sections.\r\n* Added mention of `'static` lifetime.", "tree": {"sha": "a7ab5a61a69c4c66c7aae83bf2d87033327883f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ab5a61a69c4c66c7aae83bf2d87033327883f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28f081cc257122fed7a2fb9d3358f3ac9829245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28f081cc257122fed7a2fb9d3358f3ac9829245", "html_url": "https://github.com/rust-lang/rust/commit/e28f081cc257122fed7a2fb9d3358f3ac9829245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28f081cc257122fed7a2fb9d3358f3ac9829245/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60531025abdd86b3e777568e58f2041240c52530", "url": "https://api.github.com/repos/rust-lang/rust/commits/60531025abdd86b3e777568e58f2041240c52530", "html_url": "https://github.com/rust-lang/rust/commit/60531025abdd86b3e777568e58f2041240c52530"}, {"sha": "4b224af72a76770694dc0998b356d9ce4d77529b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b224af72a76770694dc0998b356d9ce4d77529b", "html_url": "https://github.com/rust-lang/rust/commit/4b224af72a76770694dc0998b356d9ce4d77529b"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "eb16f73c3a956f37039670150d3f3d11ed3d8d7f", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e28f081cc257122fed7a2fb9d3358f3ac9829245/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/e28f081cc257122fed7a2fb9d3358f3ac9829245/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=e28f081cc257122fed7a2fb9d3358f3ac9829245", "patch": "@@ -559,9 +559,14 @@ points at a static constant).\n \n # Named lifetimes\n \n-Let's look at named lifetimes in more detail. Named lifetimes allow\n-for grouping of parameters by lifetime. For example, consider this\n-function:\n+Lifetimes can be named and referenced. For example, the special lifetime\n+`'static`, which does not go out of scope, can be used to create global\n+variables and communicate between tasks (see the manual for usecases).\n+\n+## Parameter Lifetimes\n+\n+Named lifetimes allow for grouping of parameters by lifetime.\n+For example, consider this function:\n \n ~~~\n # struct Point {x: f64, y: f64}; // as before\n@@ -655,6 +660,25 @@ fn select<'r, T>(shape: &Shape, threshold: f64,\n \n This is equivalent to the previous definition.\n \n+## Labeled Control Structures\n+\n+Named lifetime notation can also be used to control the flow of execution:\n+\n+~~~\n+'h: for i in range(0,10) {\n+    'g: loop {\n+        if i % 2 == 0 { continue 'h; }\n+        if i == 9 { break 'h; }\n+        break 'g;\n+    }\n+}\n+~~~\n+\n+> ***Note:*** Labelled breaks are not currently supported within `while` loops.\n+\n+Named labels are hygienic and can be used safely within macros.\n+See the macros guide section on hygiene for more details.\n+\n # Conclusion\n \n So there you have it: a (relatively) brief tour of the lifetime"}, {"sha": "23510997f247fe08fd132746ef0aa13247480a19", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e28f081cc257122fed7a2fb9d3358f3ac9829245/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/e28f081cc257122fed7a2fb9d3358f3ac9829245/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=e28f081cc257122fed7a2fb9d3358f3ac9829245", "patch": "@@ -398,6 +398,38 @@ position (in particular, not as an argument to yet another macro invocation),\n the expander will then proceed to evaluate `m2!()` (along with any other macro\n invocations `m1!(m2!())` produced).\n \n+# Hygiene\n+\n+To prevent clashes, rust implements\n+[hygienic macros](http://en.wikipedia.org/wiki/Hygienic_macro).\n+\n+As an example, `loop` and `for-loop` labels (discussed in the lifetimes guide)\n+will not clash. The following code will print \"Hello!\" only once:\n+\n+~~~\n+#[feature(macro_rules)];\n+\n+macro_rules! loop_x (\n+    ($e: expr) => (\n+        // $e will not interact with this 'x\n+        'x: loop {\n+            println!(\"Hello!\");\n+            $e\n+        }\n+    );\n+)\n+\n+fn main() {\n+    'x: loop {\n+        loop_x!(break 'x);\n+        println!(\"I am never printed.\");\n+    }\n+}\n+~~~\n+\n+The two `'x` names did not clash, which would have caused the loop\n+to print \"I am never printed\" and to run forever.\n+\n # A final note\n \n Macros, as currently implemented, are not for the faint of heart. Even"}, {"sha": "09539e6d59d8d5159efbbc5439b2e8f24521dfc0", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e28f081cc257122fed7a2fb9d3358f3ac9829245/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/e28f081cc257122fed7a2fb9d3358f3ac9829245/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=e28f081cc257122fed7a2fb9d3358f3ac9829245", "patch": "@@ -2103,7 +2103,8 @@ a `&T` pointer. `MutexArc` is an example of a *sharable* type with internal muta\n These are types that do not contain any data whose lifetime is bound to\n a particular stack frame. These are types that do not contain any\n references, or types where the only contained references\n-have the `'static` lifetime.\n+have the `'static` lifetime. (For more on named lifetimes and their uses, \n+see the [references and lifetimes guide][lifetimes].)\n \n > ***Note:*** These two traits were referred to as 'kinds' in earlier\n > iterations of the language, and often still are."}]}