{"sha": "bafa6c4ee5d3acdbb62ec289364564270357c6a2", "node_id": "C_kwDOAAsO6NoAKGJhZmE2YzRlZTVkM2FjZGJiNjJlYzI4OTM2NDU2NDI3MDM1N2M2YTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T13:50:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T13:50:53Z"}, "message": "Auto merge of #14935 - Veykril:sysroot-dedup, r=Veykril\n\nfix: Don't duplicate sysroot crates in rustc workspace\n\nSince we handle `library` as the sysroot source directly in the rustc workspace, we now duplicate the crates there, once as sysroot and once as just plain workspace crate. This causes a variety of issues for `vec!` macros and similar that emit `$crate` tokens across crates.", "tree": {"sha": "3d5e7ae94aad518963ac4f63ee711369bd8c9ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5e7ae94aad518963ac4f63ee711369bd8c9ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bafa6c4ee5d3acdbb62ec289364564270357c6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bafa6c4ee5d3acdbb62ec289364564270357c6a2", "html_url": "https://github.com/rust-lang/rust/commit/bafa6c4ee5d3acdbb62ec289364564270357c6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bafa6c4ee5d3acdbb62ec289364564270357c6a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526507fe22d458435ec594e959921f1becf08ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/526507fe22d458435ec594e959921f1becf08ef9", "html_url": "https://github.com/rust-lang/rust/commit/526507fe22d458435ec594e959921f1becf08ef9"}, {"sha": "ecb8616870aa9ef0c7159e56f563dc0ad78b32f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb8616870aa9ef0c7159e56f563dc0ad78b32f7", "html_url": "https://github.com/rust-lang/rust/commit/ecb8616870aa9ef0c7159e56f563dc0ad78b32f7"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "7c432197a60a7b9d67e903bdd27911d44b97a129", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=bafa6c4ee5d3acdbb62ec289364564270357c6a2", "patch": "@@ -2703,8 +2703,8 @@ impl LocalSource {\n         self.source.file_id\n     }\n \n-    pub fn name(&self) -> Option<ast::Name> {\n-        self.source.value.name()\n+    pub fn name(&self) -> Option<InFile<ast::Name>> {\n+        self.source.as_ref().map(|it| it.name()).transpose()\n     }\n \n     pub fn syntax(&self) -> &SyntaxNode {"}, {"sha": "28dadae8d3ef91b2eec5b5753d455e3ce0661e5c", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=bafa6c4ee5d3acdbb62ec289364564270357c6a2", "patch": "@@ -18,7 +18,8 @@ pub(crate) fn need_mut(ctx: &DiagnosticsContext<'_>, d: &hir::NeedMut) -> Diagno\n         let use_range = d.span.value.text_range();\n         for source in d.local.sources(ctx.sema.db) {\n             let Some(ast) = source.name() else { continue };\n-            edit_builder.insert(ast.syntax().text_range().start(), \"mut \".to_string());\n+            // FIXME: macros\n+            edit_builder.insert(ast.value.syntax().text_range().start(), \"mut \".to_string());\n         }\n         let edit = edit_builder.finish();\n         Some(vec![fix("}, {"sha": "9d5defcbb71a90e536af50a10807bfe88f3715de", "filename": "crates/ide/src/inlay_hints/closure_captures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs?ref=bafa6c4ee5d3acdbb62ec289364564270357c6a2", "patch": "@@ -74,7 +74,7 @@ pub(super) fn hints(\n                     capture.display_place(sema.db)\n                 ),\n                 None,\n-                source.name().and_then(|name| sema.original_range_opt(name.syntax())),\n+                source.name().and_then(|name| name.syntax().original_file_range_opt(sema.db)),\n             ),\n             text_edit: None,\n             position: InlayHintPosition::After,"}, {"sha": "0aca620a67553de5d060f1547eb98e06205de211", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafa6c4ee5d3acdbb62ec289364564270357c6a2/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=bafa6c4ee5d3acdbb62ec289364564270357c6a2", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     rustc_cfg,\n     sysroot::SysrootCrate,\n     target_data_layout, utf8_stdout, CargoConfig, CargoWorkspace, InvocationStrategy, ManifestPath,\n-    Package, ProjectJson, ProjectManifest, Sysroot, TargetKind, WorkspaceBuildScripts,\n+    Package, ProjectJson, ProjectManifest, Sysroot, TargetData, TargetKind, WorkspaceBuildScripts,\n };\n \n /// A set of cfg-overrides per crate.\n@@ -900,7 +900,24 @@ fn cargo_to_crate_graph(\n                 // https://github.com/rust-lang/rust-analyzer/issues/11300\n                 continue;\n             }\n-            let Some(file_id) =  load(&cargo[tgt].root) else { continue };\n+            let &TargetData { ref name, kind, is_proc_macro, ref root, .. } = &cargo[tgt];\n+\n+            if kind == TargetKind::Lib\n+                && sysroot.map_or(false, |sysroot| root.starts_with(sysroot.src_root()))\n+            {\n+                if let Some(&(_, crate_id, _)) =\n+                    public_deps.deps.iter().find(|(dep_name, ..)| dep_name.as_smol_str() == name)\n+                {\n+                    pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, kind));\n+\n+                    lib_tgt = Some((crate_id, name.clone()));\n+                    pkg_to_lib_crate.insert(pkg, crate_id);\n+                    // sysroot is inside the workspace, prevent the sysroot crates from being duplicated here\n+                    continue;\n+                }\n+            }\n+\n+            let Some(file_id) = load(root) else { continue };\n \n             let crate_id = add_target_crate_root(\n                 crate_graph,\n@@ -909,23 +926,23 @@ fn cargo_to_crate_graph(\n                 build_scripts.get_output(pkg),\n                 cfg_options.clone(),\n                 file_id,\n-                &cargo[tgt].name,\n-                cargo[tgt].is_proc_macro,\n+                name,\n+                is_proc_macro,\n                 target_layout.clone(),\n                 false,\n                 channel,\n             );\n-            if cargo[tgt].kind == TargetKind::Lib {\n-                lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n+            if kind == TargetKind::Lib {\n+                lib_tgt = Some((crate_id, name.clone()));\n                 pkg_to_lib_crate.insert(pkg, crate_id);\n             }\n             // Even crates that don't set proc-macro = true are allowed to depend on proc_macro\n             // (just none of the APIs work when called outside of a proc macro).\n             if let Some(proc_macro) = libproc_macro {\n-                add_proc_macro_dep(crate_graph, crate_id, proc_macro, cargo[tgt].is_proc_macro);\n+                add_proc_macro_dep(crate_graph, crate_id, proc_macro, is_proc_macro);\n             }\n \n-            pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, cargo[tgt].kind));\n+            pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, kind));\n         }\n \n         // Set deps to the core, std and to the lib target of the current package"}]}