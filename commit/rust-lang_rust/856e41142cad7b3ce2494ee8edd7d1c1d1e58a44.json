{"sha": "856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NmU0MTE0MmNhZDdiM2NlMjQ5NGVlOGVkZDdkMWMxZDFlNThhNDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T03:37:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T03:37:02Z"}, "message": "Rollup merge of #58166 - euclio:deprecation-shorthand, r=petrochenkov\n\nallow shorthand syntax for deprecation reason\n\nFixes #48271.\n\nCreated based on discussion in #56896.", "tree": {"sha": "f9f4c9e87732c0f57ada793ce5b6564896f5522b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f4c9e87732c0f57ada793ce5b6564896f5522b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcY5DeCRBK7hj4Ov3rIwAAdHIIAFFdVHyLOljGAynPjTBdWolE\nTYT9hed9f4J+AjV6n1egvcfWc/08js+NdbQ4+MSByemBmz3Vp2X6xL6K80JZDJUh\nssZuDLnhnNrRHSJpGaLuHL8sMAORRNW0k7Z33KHcTsY5WqyF2lWfjtx/TwZ/w1Gm\n5YbNITSX+OE/Fx2HU61QawZ9HKdJkQ33VukoPZC4oOiMvRaSJ+nsICnv14VSmWp/\ncuiHGCPamEVNcqrxQydzZuzzx9uuzM9Sgk4WFfPZNIjI/gjwnEiTsrANyRvcW92o\nVCumLjc4N5l5EpKgAjsqvvH0+Vlg1mQslqgsxTI4qW2K+VG12EjN3pa3hQXOpsQ=\n=9EJU\n-----END PGP SIGNATURE-----\n", "payload": "tree f9f4c9e87732c0f57ada793ce5b6564896f5522b\nparent 81434cbf84e8ec40186da4d54b95abcb7291fff4\nparent 113b7f7be15c49fcd0854ca53486e92f1badfdd6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550029022 +0100\ncommitter GitHub <noreply@github.com> 1550029022 +0100\n\nRollup merge of #58166 - euclio:deprecation-shorthand, r=petrochenkov\n\nallow shorthand syntax for deprecation reason\n\nFixes #48271.\n\nCreated based on discussion in #56896.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "html_url": "https://github.com/rust-lang/rust/commit/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81434cbf84e8ec40186da4d54b95abcb7291fff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/81434cbf84e8ec40186da4d54b95abcb7291fff4", "html_url": "https://github.com/rust-lang/rust/commit/81434cbf84e8ec40186da4d54b95abcb7291fff4"}, {"sha": "113b7f7be15c49fcd0854ca53486e92f1badfdd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/113b7f7be15c49fcd0854ca53486e92f1badfdd6", "html_url": "https://github.com/rust-lang/rust/commit/113b7f7be15c49fcd0854ca53486e92f1badfdd6"}], "stats": {"total": 184, "additions": 117, "deletions": 67}, "files": [{"sha": "0b1e5d037c89d92cee59070eaa9b036ead11484e", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 65, "deletions": 60, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -596,81 +596,86 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n     let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n-        if attr.path != \"deprecated\" {\n-            continue\n+        if !attr.check_name(\"deprecated\") {\n+            continue;\n         }\n \n-        mark_used(attr);\n-\n         if depr.is_some() {\n             span_err!(diagnostic, item_sp, E0550, \"multiple deprecated attributes\");\n             break\n         }\n \n-        depr = if let Some(metas) = attr.meta_item_list() {\n-            let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n-                if item.is_some() {\n-                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n-                    return false\n-                }\n-                if let Some(v) = meta.value_str() {\n-                    *item = Some(v);\n-                    true\n-                } else {\n-                    if let Some(lit) = meta.name_value_literal() {\n-                        handle_errors(\n-                            sess,\n-                            lit.span,\n-                            AttrError::UnsupportedLiteral(\n-                                \"literal in `deprecated` \\\n-                                value must be a string\",\n-                                lit.node.is_bytestr()\n-                            ),\n-                        );\n-                    } else {\n-                        span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+        let meta = attr.meta().unwrap();\n+        depr = match &meta.node {\n+            MetaItemKind::Word => Some(Deprecation { since: None, note: None }),\n+            MetaItemKind::NameValue(..) => {\n+                meta.value_str().map(|note| {\n+                    Deprecation { since: None, note: Some(note) }\n+                })\n+            }\n+            MetaItemKind::List(list) => {\n+                let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n+                    if item.is_some() {\n+                        handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n+                        return false\n                     }\n+                    if let Some(v) = meta.value_str() {\n+                        *item = Some(v);\n+                        true\n+                    } else {\n+                        if let Some(lit) = meta.name_value_literal() {\n+                            handle_errors(\n+                                sess,\n+                                lit.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"literal in `deprecated` \\\n+                                    value must be a string\",\n+                                    lit.node.is_bytestr()\n+                                ),\n+                            );\n+                        } else {\n+                            span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+                        }\n \n-                    false\n-                }\n-            };\n+                        false\n+                    }\n+                };\n \n-            let mut since = None;\n-            let mut note = None;\n-            for meta in metas {\n-                match &meta.node {\n-                    NestedMetaItemKind::MetaItem(mi) => {\n-                        match &*mi.name().as_str() {\n-                            \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                            \"note\" => if !get(mi, &mut note) { continue 'outer },\n-                            _ => {\n-                                handle_errors(\n-                                    sess,\n-                                    meta.span,\n-                                    AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                                );\n-                                continue 'outer\n+                let mut since = None;\n+                let mut note = None;\n+                for meta in list {\n+                    match &meta.node {\n+                        NestedMetaItemKind::MetaItem(mi) => {\n+                            match &*mi.name().as_str() {\n+                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                                \"note\" => if !get(mi, &mut note) { continue 'outer },\n+                                _ => {\n+                                    handle_errors(\n+                                        sess,\n+                                        meta.span,\n+                                        AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                                    );\n+                                    continue 'outer\n+                                }\n                             }\n                         }\n-                    }\n-                    NestedMetaItemKind::Literal(lit) => {\n-                        handle_errors(\n-                            sess,\n-                            lit.span,\n-                            AttrError::UnsupportedLiteral(\n-                                \"item in `deprecated` must be a key/value pair\",\n-                                false,\n-                            ),\n-                        );\n-                        continue 'outer\n+                        NestedMetaItemKind::Literal(lit) => {\n+                            handle_errors(\n+                                sess,\n+                                lit.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"item in `deprecated` must be a key/value pair\",\n+                                    false,\n+                                ),\n+                            );\n+                            continue 'outer\n+                        }\n                     }\n                 }\n-            }\n \n-            Some(Deprecation {since: since, note: note})\n-        } else {\n-            Some(Deprecation{since: None, note: None})\n-        }\n+                Some(Deprecation { since, note })\n+            }\n+        };\n     }\n \n     depr"}, {"sha": "420f7426ad7863b72bfa5f7c95eb45eae19a37f4", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -165,6 +165,10 @@ fn name_from_path(path: &Path) -> Name {\n }\n \n impl Attribute {\n+    /// Returns `true` if the attribute's path matches the argument. If it matches, then the\n+    /// attribute is marked as used.\n+    ///\n+    /// To check the attribute name without marking it used, use the `path` field directly.\n     pub fn check_name(&self, name: &str) -> bool {\n         let matches = self.path == name;\n         if matches {"}, {"sha": "ce0fae5fb450a3c69e3bdb578ab912cab90f0c4c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -1185,9 +1185,15 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n     (\"stable\", Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#), Ungated),\n     (\"unstable\", Whitelisted, template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n                                         Ungated),\n-    (\"deprecated\", Normal, template!(Word, List: r#\"/*opt*/ since = \"version\",\n-                                                    /*opt*/ note = \"reason\"#,\n-                                                    NameValueStr: \"reason\"), Ungated),\n+    (\"deprecated\",\n+        Normal,\n+        template!(\n+            Word,\n+            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"#,\n+            NameValueStr: \"reason\"\n+        ),\n+        Ungated\n+    ),\n \n     (\"rustc_paren_sugar\", Normal, template!(Word), Gated(Stability::Unstable,\n                                         \"unboxed_closures\","}, {"sha": "18a33438a23461526bc2ece44b97bef31df21fa9", "filename": "src/test/rustdoc/deprecated.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated.rs?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -28,3 +28,8 @@ pub struct V;\n //      'Deprecated$'\n #[deprecated]\n pub struct W;\n+\n+// @matches deprecated/struct.X.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated: shorthand reason$'\n+#[deprecated = \"shorthand reason\"]\n+pub struct X;"}, {"sha": "a559908b792bb2043951916d2ce8ffb73237b91d", "filename": "src/test/ui/deprecation/deprecation-sanity.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -15,6 +15,12 @@ mod bogus_attribute_types_1 {\n \n     #[deprecated(since(b), note = \"a\")] //~ ERROR incorrect meta item\n     fn f6() { }\n+\n+    #[deprecated(note = b\"test\")] //~ ERROR literal in `deprecated` value must be a string\n+    fn f7() { }\n+\n+    #[deprecated(\"test\")] //~ ERROR item in `deprecated` must be a key/value pair\n+    fn f8() { }\n }\n \n #[deprecated(since = \"a\", note = \"b\")]"}, {"sha": "a071a4fc10d51fad6a22db1ae5b5beaa5087307b", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -28,19 +28,31 @@ error[E0551]: incorrect meta item\n LL |     #[deprecated(since(b), note = \"a\")] //~ ERROR incorrect meta item\n    |                  ^^^^^^^^\n \n+error[E0565]: literal in `deprecated` value must be a string\n+  --> $DIR/deprecation-sanity.rs:19:25\n+   |\n+LL |     #[deprecated(note = b\"test\")] //~ ERROR literal in `deprecated` value must be a string\n+   |                         ^^^^^^^ help: consider removing the prefix: `\"test\"`\n+\n+error[E0565]: item in `deprecated` must be a key/value pair\n+  --> $DIR/deprecation-sanity.rs:22:18\n+   |\n+LL |     #[deprecated(\"test\")] //~ ERROR item in `deprecated` must be a key/value pair\n+   |                  ^^^^^^\n+\n error[E0550]: multiple deprecated attributes\n-  --> $DIR/deprecation-sanity.rs:22:1\n+  --> $DIR/deprecation-sanity.rs:28:1\n    |\n LL | fn multiple1() { } //~ ERROR multiple deprecated attributes\n    | ^^^^^^^^^^^^^^^^^^\n \n error[E0538]: multiple 'since' items\n-  --> $DIR/deprecation-sanity.rs:24:27\n+  --> $DIR/deprecation-sanity.rs:30:27\n    |\n LL | #[deprecated(since = \"a\", since = \"b\", note = \"c\")] //~ ERROR multiple 'since' items\n    |                           ^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n-Some errors occurred: E0538, E0541, E0550, E0551.\n+Some errors occurred: E0538, E0541, E0550, E0551, E0565.\n For more information about an error, try `rustc --explain E0538`."}, {"sha": "7e0d8cdfc2f723f1b28a998a1c9d2de7643bfa20", "filename": "src/test/ui/deprecation/invalid-literal.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -0,0 +1,4 @@\n+#[deprecated = b\"test\"] //~ ERROR attribute must be of the form\n+fn foo() {}\n+\n+fn main() {}"}, {"sha": "f13d599c0b137c6f5342ef34bfb626709bb30707", "filename": "src/test/ui/deprecation/invalid-literal.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/856e41142cad7b3ce2494ee8edd7d1c1d1e58a44/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr?ref=856e41142cad7b3ce2494ee8edd7d1c1d1e58a44", "patch": "@@ -0,0 +1,8 @@\n+error: attribute must be of the form `#[deprecated]` or `#[deprecated(/*opt*/ since = \"version\", /*opt*/ note = \"reason)]` or `#[deprecated = \"reason\"]`\n+  --> $DIR/invalid-literal.rs:1:1\n+   |\n+LL | #[deprecated = b\"test\"] //~ ERROR attribute must be of the form\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}