{"sha": "1f9e7c25c95b1cd267c0e54669021e0b56462d94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOWU3YzI1Yzk1YjFjZDI2N2MwZTU0NjY5MDIxZTBiNTY0NjJkOTQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-24T23:19:51Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-24T23:19:51Z"}, "message": "Implement Rewrite trait for ast::ForeignItem", "tree": {"sha": "16066938d5d999043fe3667002fd742531bd96d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16066938d5d999043fe3667002fd742531bd96d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9e7c25c95b1cd267c0e54669021e0b56462d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9e7c25c95b1cd267c0e54669021e0b56462d94", "html_url": "https://github.com/rust-lang/rust/commit/1f9e7c25c95b1cd267c0e54669021e0b56462d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9e7c25c95b1cd267c0e54669021e0b56462d94/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a02c35f9b062fb3e4b4de4cfd055caa5a89aac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a02c35f9b062fb3e4b4de4cfd055caa5a89aac7", "html_url": "https://github.com/rust-lang/rust/commit/1a02c35f9b062fb3e4b4de4cfd055caa5a89aac7"}], "stats": {"total": 135, "additions": 77, "deletions": 58}, "files": [{"sha": "9dd1972670a561b43af60af2c92ff3e06b4e5b1f", "filename": "src/items.rs", "status": "modified", "additions": 69, "deletions": 57, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/1f9e7c25c95b1cd267c0e54669021e0b56462d94/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9e7c25c95b1cd267c0e54669021e0b56462d94/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1f9e7c25c95b1cd267c0e54669021e0b56462d94", "patch": "@@ -185,64 +185,11 @@ impl<'a> FmtVisitor<'a> {\n         self.format_item(item);\n     }\n \n-    fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        self.format_missing_with_indent(item.span.lo);\n-        // Drop semicolon or it will be interpreted as comment.\n-        // FIXME: this may be a faulty span from libsyntax.\n-        let span = mk_sp(item.span.lo, item.span.hi - BytePos(1));\n-\n-        match item.node {\n-            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => {\n-                let indent = self.block_indent;\n-                let rewrite = rewrite_fn_base(\n-                    &self.get_context(),\n-                    indent,\n-                    item.ident,\n-                    fn_decl,\n-                    generics,\n-                    ast::Unsafety::Normal,\n-                    ast::Constness::NotConst,\n-                    ast::Defaultness::Final,\n-                    // These are not actually rust functions,\n-                    // but we format them as such.\n-                    abi::Abi::Rust,\n-                    &item.vis,\n-                    span,\n-                    false,\n-                    false,\n-                    false,\n-                );\n-\n-                match rewrite {\n-                    Some((new_fn, _)) => {\n-                        self.buffer.push_str(&new_fn);\n-                        self.buffer.push_str(\";\");\n-                    }\n-                    None => self.format_missing(item.span.hi),\n-                }\n-            }\n-            ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n-                // FIXME(#21): we're dropping potential comments in between the\n-                // function keywords here.\n-                let vis = format_visibility(&item.vis);\n-                let mut_str = if is_mutable { \"mut \" } else { \"\" };\n-                let prefix = format!(\"{}static {}{}: \", vis, mut_str, item.ident);\n-                let offset = self.block_indent + prefix.len();\n-                // 1 = ;\n-                let shape = Shape::indented(offset, self.config).sub_width(1).unwrap();\n-                let rewrite = ty.rewrite(&self.get_context(), shape);\n-\n-                match rewrite {\n-                    Some(result) => {\n-                        self.buffer.push_str(&prefix);\n-                        self.buffer.push_str(&result);\n-                        self.buffer.push_str(\";\");\n-                    }\n-                    None => self.format_missing(item.span.hi),\n-                }\n-            }\n-        }\n \n+    fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n+        let shape = Shape::indented(self.block_indent, self.config);\n+        let rewrite = item.rewrite(&self.get_context(), shape);\n+        self.push_rewrite(item.span(), rewrite);\n         self.last_pos = item.span.hi;\n     }\n \n@@ -2837,3 +2784,68 @@ fn format_generics(\n \n     Some(result)\n }\n+\n+impl Rewrite for ast::ForeignItem {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        let attrs_str = try_opt!(self.attrs.rewrite(context, shape));\n+        // Drop semicolon or it will be interpreted as comment.\n+        // FIXME: this may be a faulty span from libsyntax.\n+        let span = mk_sp(self.span.lo, self.span.hi - BytePos(1));\n+\n+        let item_str = try_opt!(match self.node {\n+            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => {\n+                rewrite_fn_base(\n+                    context,\n+                    shape.indent,\n+                    self.ident,\n+                    fn_decl,\n+                    generics,\n+                    ast::Unsafety::Normal,\n+                    ast::Constness::NotConst,\n+                    ast::Defaultness::Final,\n+                    // These are not actually rust functions,\n+                    // but we format them as such.\n+                    abi::Abi::Rust,\n+                    &self.vis,\n+                    span,\n+                    false,\n+                    false,\n+                    false,\n+                ).map(|(s, _)| format!(\"{};\", s))\n+            }\n+            ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n+                // FIXME(#21): we're dropping potential comments in between the\n+                // function keywords here.\n+                let vis = format_visibility(&self.vis);\n+                let mut_str = if is_mutable { \"mut \" } else { \"\" };\n+                let prefix = format!(\"{}static {}{}:\", vis, mut_str, self.ident);\n+                // 1 = ;\n+                let shape = try_opt!(shape.sub_width(1));\n+                ty.rewrite(context, shape).map(|ty_str| {\n+                    // 1 = space between prefix and type.\n+                    let sep = if prefix.len() + ty_str.len() + 1 <= shape.width {\n+                        String::from(\" \")\n+                    } else {\n+                        let nested_indent = shape.indent.block_indent(context.config);\n+                        format!(\"\\n{}\", nested_indent.to_string(context.config))\n+                    };\n+                    format!(\"{}{}{};\", prefix, sep, ty_str)\n+                })\n+            }\n+        });\n+\n+        let missing_span = if self.attrs.is_empty() {\n+            mk_sp(self.span.lo, self.span.lo)\n+        } else {\n+            mk_sp(self.attrs[self.attrs.len() - 1].span.hi, self.span.lo)\n+        };\n+        combine_strs_with_missing_comments(\n+            context,\n+            &attrs_str,\n+            &item_str,\n+            missing_span,\n+            shape,\n+            false,\n+        )\n+    }\n+}"}, {"sha": "432e61e874bcb398358884f773047ce2abce58e6", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f9e7c25c95b1cd267c0e54669021e0b56462d94/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9e7c25c95b1cd267c0e54669021e0b56462d94/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1f9e7c25c95b1cd267c0e54669021e0b56462d94", "patch": "@@ -74,6 +74,7 @@ mod patterns;\n mod summary;\n mod vertical;\n \n+/// Spanned returns a span including attributes, if available.\n pub trait Spanned {\n     fn span(&self) -> Span;\n }\n@@ -207,6 +208,12 @@ impl Spanned for ast::TyParamBound {\n     }\n }\n \n+impl Spanned for ast::ForeignItem {\n+    fn span(&self) -> Span {\n+        span_with_attrs!(self)\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct Indent {\n     // Width of the block indent, in characters. Must be a multiple of"}, {"sha": "bf1afb0c3f09f86117d93e02239107b36bcd64d1", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f9e7c25c95b1cd267c0e54669021e0b56462d94/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9e7c25c95b1cd267c0e54669021e0b56462d94/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1f9e7c25c95b1cd267c0e54669021e0b56462d94", "patch": "@@ -641,7 +641,7 @@ impl<'a> FmtVisitor<'a> {\n         self.push_rewrite(mac.span, rewrite);\n     }\n \n-    fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n+    pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo);\n         let result = rewrite.unwrap_or_else(|| self.snippet(span));\n         self.buffer.push_str(&result);"}]}