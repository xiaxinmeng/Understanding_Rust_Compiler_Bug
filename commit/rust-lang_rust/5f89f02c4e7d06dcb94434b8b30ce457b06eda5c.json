{"sha": "5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmODlmMDJjNGU3ZDA2ZGNiOTQ0MzRiOGIzMGNlNDU3YjA2ZWRhNWM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-04T17:11:57Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-04T17:30:53Z"}, "message": "mir: use `FiniteBitSet<u32>` in polymorphization\n\nThis commit changes polymorphization to return a `FiniteBitSet<u32>`\nrather than a `FiniteBitSet<u64>` because most functions do not use\nanywhere near sixty-four generic parameters so keeping a `u64` around is\nunnecessary in most cases.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "341e1fed3df84b6d5be63b0c5b39f4aed40f641a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/341e1fed3df84b6d5be63b0c5b39f4aed40f641a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8pm00ACgkQJZLnbIc4\nH9nOrg/+IS4NcwKrOCI+MkxZUHkzpBBR99uqYoR7gb4DEcLAXrgb+Rban0WnzjQA\nLByF6t6V6eYVUxMBt8fSq0G+HlP1xEpYsbHqNdWujxBjGOIeXiIaAeqQWG0ianPa\nZ5tY4kcVqt3phs655d9ii8Q9P09/TSeH6lDEcMC3E5ZMX294+/HrLilow5yMOoI/\nZl+fVBiE/xRRF932VL/ENsZFvNRbyzWlnCyxEkjrJxCCVLJ44An25KlPRbtESEPv\nn83Gcg9t4zW8flDkG5A2iYc7SZhrzqlAHh6Nk/Uqq0kbGSC3yU1PzdAklSqnLWsS\nWTg71UX6wKcZ+J23Px1Rv6n4EpGgFp3m1ZwmBcZhf4RjmrxSzfvHGP3pYlnE0XoN\nQ8Qr2rDKsuFvQ+zNZk7ajx62MSf2/YEN019sCsO493IUW3i8i9Ofw7oshQ0bPJKu\noYjcXva6Z2Z+bIEbYKBg9s3JOWDHK63QvaWdU/tPdSNfWTIgXkDnAuoWlG7eKkmZ\nuBhSDCZzoVH2+BewSdJtzvaCmbWKw6pgTe6GgEIqGN9CPG+vUcA1bufUstqBnJQ4\niFnvB+HfaS1+uTn5uccBJ6bWRQVz3eKvIdJxt/rmubFxIscrS7++98dkOZ3TBdXO\n0WoMn5/EEcThiEntVJIY03wbYd7neg0xuB0MvUEOUOe8i7CsE9o=\n=F1uf\n-----END PGP SIGNATURE-----", "payload": "tree 341e1fed3df84b6d5be63b0c5b39f4aed40f641a\nparent 5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11\nauthor David Wood <david@davidtw.co> 1596561117 +0100\ncommitter David Wood <david@davidtw.co> 1596562253 +0100\n\nmir: use `FiniteBitSet<u32>` in polymorphization\n\nThis commit changes polymorphization to return a `FiniteBitSet<u32>`\nrather than a `FiniteBitSet<u64>` because most functions do not use\nanywhere near sixty-four generic parameters so keeping a `u64` around is\nunnecessary in most cases.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "html_url": "https://github.com/rust-lang/rust/commit/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "html_url": "https://github.com/rust-lang/rust/commit/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "e4b7c24a24989b3e9adffb533740013db24f773d", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "patch": "@@ -1034,6 +1034,30 @@ pub trait FiniteBitSetTy:\n     fn checked_shr(self, rhs: u32) -> Option<Self>;\n }\n \n+impl FiniteBitSetTy for u32 {\n+    const DOMAIN_SIZE: u32 = 32;\n+\n+    const FILLED: Self = Self::MAX;\n+    const EMPTY: Self = Self::MIN;\n+\n+    const ONE: Self = 1u32;\n+    const ZERO: Self = 0u32;\n+\n+    fn checked_shl(self, rhs: u32) -> Option<Self> {\n+        self.checked_shl(rhs)\n+    }\n+\n+    fn checked_shr(self, rhs: u32) -> Option<Self> {\n+        self.checked_shr(rhs)\n+    }\n+}\n+\n+impl std::fmt::Debug for FiniteBitSet<u32> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:032b}\", self.0)\n+    }\n+}\n+\n impl FiniteBitSetTy for u64 {\n     const DOMAIN_SIZE: u32 = 64;\n "}, {"sha": "10dc407c060fe0f890582927497e9bed3b54643a", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "patch": "@@ -1150,7 +1150,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, tcx))\n     }\n \n-    fn get_unused_generic_params(&self, id: DefIndex) -> FiniteBitSet<u64> {\n+    fn get_unused_generic_params(&self, id: DefIndex) -> FiniteBitSet<u32> {\n         self.root\n             .tables\n             .unused_generic_params"}, {"sha": "465461ebf97691c487543773d935daab21b11ea2", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "patch": "@@ -285,7 +285,7 @@ define_tables! {\n     super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n     mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n-    unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u64>>>,\n+    unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "7e9226f83c32d3b013107929fc67ae29e2632dab", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "patch": "@@ -1319,7 +1319,7 @@ rustc_queries! {\n         query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n             desc { \"codegen_unit\" }\n         }\n-        query unused_generic_params(key: DefId) -> FiniteBitSet<u64> {\n+        query unused_generic_params(key: DefId) -> FiniteBitSet<u32> {\n             cache_on_disk_if { key.is_local() }\n             desc {\n                 |tcx| \"determining which generic parameters are unused by `{}`\","}, {"sha": "505cef5e9fc5a3d75622df5c45c7b7e9a68e1ec7", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f89f02c4e7d06dcb94434b8b30ce457b06eda5c/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=5f89f02c4e7d06dcb94434b8b30ce457b06eda5c", "patch": "@@ -28,7 +28,7 @@ pub fn provide(providers: &mut Providers) {\n /// Determine which generic parameters are used by the function/method/closure represented by\n /// `def_id`. Returns a bitset where bits representing unused parameters are set (`is_empty`\n /// indicates all parameters are used).\n-fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u64> {\n+fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     debug!(\"unused_generic_params({:?})\", def_id);\n \n     if !tcx.sess.opts.debugging_opts.polymorphize {\n@@ -53,7 +53,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u64> {\n     // Create a bitset with N rightmost ones for each parameter.\n     let generics_count: u32 =\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n-    let mut unused_parameters = FiniteBitSet::<u64>::new_empty();\n+    let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n     unused_parameters.set_range(0..generics_count);\n     debug!(\"unused_generic_params: (start) unused_parameters={:?}\", unused_parameters);\n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n@@ -84,7 +84,7 @@ fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &mut FiniteBitSet<u64>,\n+    unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n     if !tcx.is_trait(def_id) && (tcx.is_closure(def_id) || tcx.type_of(def_id).is_generator()) {\n         for param in &generics.params {\n@@ -110,11 +110,11 @@ fn mark_used_by_default_parameters<'tcx>(\n fn mark_used_by_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    unused_parameters: &mut FiniteBitSet<u64>,\n+    unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n     let def_id = tcx.closure_base_def_id(def_id);\n \n-    let is_self_ty_used = |unused_parameters: &mut FiniteBitSet<u64>, self_ty: Ty<'tcx>| {\n+    let is_self_ty_used = |unused_parameters: &mut FiniteBitSet<u32>, self_ty: Ty<'tcx>| {\n         debug!(\"unused_generic_params: self_ty={:?}\", self_ty);\n         if let ty::Param(param) = self_ty.kind {\n             !unused_parameters.contains(param.index).unwrap_or(false)\n@@ -123,7 +123,7 @@ fn mark_used_by_predicates<'tcx>(\n         }\n     };\n \n-    let mark_ty = |unused_parameters: &mut FiniteBitSet<u64>, ty: Ty<'tcx>| {\n+    let mark_ty = |unused_parameters: &mut FiniteBitSet<u32>, ty: Ty<'tcx>| {\n         let mut vis = UsedGenericParametersVisitor { tcx, def_id, unused_parameters };\n         ty.visit_with(&mut vis);\n     };\n@@ -159,7 +159,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &FiniteBitSet<u64>,\n+    unused_parameters: &FiniteBitSet<u32>,\n ) {\n     debug!(\"emit_unused_generic_params_error: def_id={:?}\", def_id);\n     let base_def_id = tcx.closure_base_def_id(def_id);\n@@ -195,7 +195,7 @@ fn emit_unused_generic_params_error<'tcx>(\n struct UsedGenericParametersVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    unused_parameters: &'a mut FiniteBitSet<u64>,\n+    unused_parameters: &'a mut FiniteBitSet<u32>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {"}]}