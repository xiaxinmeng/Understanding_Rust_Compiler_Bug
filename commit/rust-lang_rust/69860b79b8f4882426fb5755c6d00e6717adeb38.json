{"sha": "69860b79b8f4882426fb5755c6d00e6717adeb38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODYwYjc5YjhmNDg4MjQyNmZiNTc1NWM2ZDAwZTY3MTdhZGViMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-20T17:31:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-20T17:31:17Z"}, "message": "auto merge of #9812 : HNO3/rust/windows-utf8, r=alexcrichton\n\nThis fixes #9418 and #9618, and potential problems related to directory walking.", "tree": {"sha": "6701ec0cd1c0590e262be00f736511486a929012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6701ec0cd1c0590e262be00f736511486a929012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69860b79b8f4882426fb5755c6d00e6717adeb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69860b79b8f4882426fb5755c6d00e6717adeb38", "html_url": "https://github.com/rust-lang/rust/commit/69860b79b8f4882426fb5755c6d00e6717adeb38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69860b79b8f4882426fb5755c6d00e6717adeb38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424c171da5e9881f3d5588f22c3794b53b2695e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/424c171da5e9881f3d5588f22c3794b53b2695e1", "html_url": "https://github.com/rust-lang/rust/commit/424c171da5e9881f3d5588f22c3794b53b2695e1"}, {"sha": "3e53c929a2298e59d9abd3973094db3d34d59e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e53c929a2298e59d9abd3973094db3d34d59e98", "html_url": "https://github.com/rust-lang/rust/commit/3e53c929a2298e59d9abd3973094db3d34d59e98"}], "stats": {"total": 157, "additions": 148, "deletions": 9}, "files": [{"sha": "d4df0e826f604b8bc9c5099c068afd371312bb0d", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=69860b79b8f4882426fb5755c6d00e6717adeb38", "patch": "@@ -1208,7 +1208,7 @@ pub mod consts {\n             pub static ERROR_ALREADY_EXISTS : c_int = 183;\n             pub static ERROR_INVALID_ADDRESS : c_int = 487;\n             pub static ERROR_FILE_INVALID : c_int = 1006;\n-            pub static INVALID_HANDLE_VALUE: c_int = -1;\n+            pub static INVALID_HANDLE_VALUE : c_int = -1;\n \n             pub static DELETE : DWORD = 0x00010000;\n             pub static READ_CONTROL : DWORD = 0x00020000;\n@@ -3352,11 +3352,14 @@ pub mod funcs {\n                                         LPSECURITY_ATTRIBUTES)\n                                         -> BOOL;\n                 pub fn CopyFileW(lpExistingFileName: LPCWSTR,\n-                                        lpNewFileName: LPCWSTR,\n-                                        bFailIfExists: BOOL)\n-                                        -> BOOL;\n+                                 lpNewFileName: LPCWSTR,\n+                                 bFailIfExists: BOOL)\n+                                 -> BOOL;\n                 pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n                 pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn GetCurrentDirectoryW(nBufferLength: DWORD,\n+                                            lpBuffer: LPWSTR)\n+                                            -> DWORD;\n                 pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n                 pub fn GetLastError() -> DWORD;\n                 pub fn FindFirstFileW(fileName: *u16, findFileData: HANDLE)\n@@ -3462,6 +3465,9 @@ pub mod funcs {\n                                         -> BOOL;\n                 pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n                 pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn GetCurrentDirectoryW(nBufferLength: DWORD,\n+                                            lpBuffer: LPWSTR)\n+                                            -> DWORD;\n                 pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n                 pub fn GetLastError() -> DWORD;\n                 pub fn FindFirstFileW(fileName: *u16, findFileData: HANDLE)"}, {"sha": "a7d4bc9140b3c693d04e899d2d5403c37e399ce8", "filename": "src/libstd/os.rs", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=69860b79b8f4882426fb5755c6d00e6717adeb38", "patch": "@@ -28,7 +28,8 @@\n \n #[allow(missing_doc)];\n \n-use c_str::{CString, ToCStr};\n+#[cfg(unix)]\n+use c_str::CString;\n use clone::Clone;\n use container::Container;\n use io;\n@@ -56,6 +57,11 @@ pub fn close(fd: c_int) -> c_int {\n     }\n }\n \n+// On Windows, wide character version of function must be used to support\n+// unicode, so functions should be split into at least two versions,\n+// which are for Windows and for non-Windows, if necessary.\n+// See https://github.com/mozilla/rust/issues/9822 for more information.\n+\n pub mod rustrt {\n     use libc::{c_char, c_int};\n     use libc;\n@@ -64,11 +70,19 @@ pub mod rustrt {\n         pub fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n         pub fn rust_path_exists(path: *libc::c_char) -> c_int;\n     }\n+\n+    // Uses _wstat instead of stat.\n+    #[cfg(windows)]\n+    extern {\n+        pub fn rust_path_is_dir_u16(path: *u16) -> c_int;\n+        pub fn rust_path_exists_u16(path: *u16) -> c_int;\n+    }\n }\n \n pub static TMPBUF_SZ : uint = 1000u;\n static BUF_BYTES : uint = 2048u;\n \n+#[cfg(unix)]\n pub fn getcwd() -> Path {\n     #[fixed_stack_segment]; #[inline(never)];\n     let mut buf = [0 as libc::c_char, ..BUF_BYTES];\n@@ -83,6 +97,22 @@ pub fn getcwd() -> Path {\n     }\n }\n \n+#[cfg(windows)]\n+pub fn getcwd() -> Path {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    use libc::DWORD;\n+    use libc::GetCurrentDirectoryW;\n+    let mut buf = [0 as u16, ..BUF_BYTES];\n+    do buf.as_mut_buf |buf, len| {\n+        unsafe {\n+            if libc::GetCurrentDirectoryW(len as DWORD, buf) == 0 as DWORD {\n+                fail2!();\n+            }\n+        }\n+    }\n+    Path::new(str::from_utf16(buf))\n+}\n+\n #[cfg(windows)]\n pub mod win32 {\n     use libc;\n@@ -613,6 +643,7 @@ pub fn walk_dir(p: &Path, f: &fn(&Path) -> bool) -> bool {\n     })\n }\n \n+#[cfg(unix)]\n /// Indicates whether a path represents a directory\n pub fn path_is_dir(p: &Path) -> bool {\n     #[fixed_stack_segment]; #[inline(never)];\n@@ -623,6 +654,18 @@ pub fn path_is_dir(p: &Path) -> bool {\n     }\n }\n \n+\n+#[cfg(windows)]\n+pub fn path_is_dir(p: &Path) -> bool {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    unsafe {\n+        do os::win32::as_utf16_p(p.as_str().unwrap()) |buf| {\n+            rustrt::rust_path_is_dir_u16(buf) != 0 as c_int\n+        }\n+    }\n+}\n+\n+#[cfg(unix)]\n /// Indicates whether a path exists\n pub fn path_exists(p: &Path) -> bool {\n     #[fixed_stack_segment]; #[inline(never)];\n@@ -633,6 +676,16 @@ pub fn path_exists(p: &Path) -> bool {\n     }\n }\n \n+#[cfg(windows)]\n+pub fn path_exists(p: &Path) -> bool {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    unsafe {\n+        do os::win32::as_utf16_p(p.as_str().unwrap()) |buf| {\n+            rustrt::rust_path_exists_u16(buf) != 0 as c_int\n+        }\n+    }\n+}\n+\n /**\n  * Convert a relative path to an absolute path\n  *\n@@ -1922,15 +1975,47 @@ mod tests {\n \n     #[test]\n     fn path_is_dir() {\n+        use rt::io::file::open;\n+        use rt::io::{OpenOrCreate, Read};\n+\n         assert!((os::path_is_dir(&Path::new(\".\"))));\n         assert!((!os::path_is_dir(&Path::new(\"test/stdtest/fs.rs\"))));\n+\n+        let mut dirpath = os::tmpdir();\n+        dirpath.push(format!(\"rust-test-{}/test-\\uac00\\u4e00\\u30fc\\u4f60\\u597d\",\n+            rand::random::<u32>())); // \uac00\u4e00\u30fc\u4f60\u597d\n+        debug2!(\"path_is_dir dirpath: {}\", dirpath.display());\n+\n+        let mkdir_result = os::mkdir_recursive(&dirpath, (S_IRUSR | S_IWUSR | S_IXUSR) as i32);\n+        debug2!(\"path_is_dir mkdir_result: {}\", mkdir_result);\n+\n+        assert!((os::path_is_dir(&dirpath)));\n+\n+        let mut filepath = dirpath;\n+        filepath.push(\"unicode-file-\\uac00\\u4e00\\u30fc\\u4f60\\u597d.rs\");\n+        debug2!(\"path_is_dir filepath: {}\", filepath.display());\n+\n+        open(&filepath, OpenOrCreate, Read); // ignore return; touch only\n+        assert!((!os::path_is_dir(&filepath)));\n+\n+        assert!((!os::path_is_dir(&Path::new(\n+                     \"test/unicode-bogus-dir-\\uac00\\u4e00\\u30fc\\u4f60\\u597d\"))));\n     }\n \n     #[test]\n     fn path_exists() {\n         assert!((os::path_exists(&Path::new(\".\"))));\n         assert!((!os::path_exists(&Path::new(\n                      \"test/nonexistent-bogus-path\"))));\n+\n+        let mut dirpath = os::tmpdir();\n+        dirpath.push(format!(\"rust-test-{}/test-\\uac01\\u4e01\\u30fc\\u518d\\u89c1\",\n+            rand::random::<u32>())); // \uac01\u4e01\u30fc\u518d\u89c1\n+\n+        os::mkdir_recursive(&dirpath, (S_IRUSR | S_IWUSR | S_IXUSR) as i32);\n+        assert!((os::path_exists(&dirpath)));\n+        assert!((!os::path_exists(&Path::new(\n+                     \"test/unicode-bogus-path-\\uac01\\u4e01\\u30fc\\u518d\\u89c1\"))));\n     }\n \n     #[test]"}, {"sha": "17f05b5909055f01bb8e914e49fc7552683c4c0a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=69860b79b8f4882426fb5755c6d00e6717adeb38", "patch": "@@ -106,7 +106,7 @@ rust_list_dir_wfd_fp_buf(void* wfd) {\n #endif\n \n extern \"C\" CDECL int\n-rust_path_is_dir(char *path) {\n+rust_path_is_dir(const char *path) {\n     struct stat buf;\n     if (stat(path, &buf)) {\n         return 0;\n@@ -115,14 +115,48 @@ rust_path_is_dir(char *path) {\n }\n \n extern \"C\" CDECL int\n-rust_path_exists(char *path) {\n+#if defined(__WIN32__)\n+rust_path_is_dir_u16(const wchar_t *path) {\n+    struct _stat buf;\n+    // Don't use GetFileAttributesW, it cannot get attributes of\n+    // some system files (e.g. pagefile.sys).\n+    if (_wstat(path, &buf)) {\n+        return 0;\n+    }\n+    return S_ISDIR(buf.st_mode);\n+}\n+#else\n+rust_path_is_dir_u16(const void *path) {\n+    // Wide version of function is only used on Windows.\n+    return 0;\n+}\n+#endif\n+\n+extern \"C\" CDECL int\n+rust_path_exists(const char *path) {\n     struct stat buf;\n     if (stat(path, &buf)) {\n         return 0;\n     }\n     return 1;\n }\n \n+extern \"C\" CDECL int\n+#if defined(__WIN32__)\n+rust_path_exists_u16(const wchar_t *path) {\n+    struct _stat buf;\n+    if (_wstat(path, &buf)) {\n+        return 0;\n+    }\n+    return 1;\n+}\n+#else\n+rust_path_exists_u16(const void *path) {\n+    // Wide version of function is only used on Windows.\n+    return 0;\n+}\n+#endif\n+\n extern \"C\" CDECL FILE* rust_get_stdin() {return stdin;}\n extern \"C\" CDECL FILE* rust_get_stdout() {return stdout;}\n extern \"C\" CDECL FILE* rust_get_stderr() {return stderr;}\n@@ -293,8 +327,12 @@ rust_localtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n     const char* zone = NULL;\n #if defined(__WIN32__)\n     int32_t gmtoff = -timezone;\n-    char buffer[64];\n-    if (strftime(buffer, sizeof(buffer), \"%Z\", &tm) > 0) {\n+    wchar_t wbuffer[64];\n+    char buffer[256];\n+    // strftime(\"%Z\") can contain non-UTF-8 characters on non-English locale (issue #9418),\n+    // so time zone should be converted from UTF-16 string set by wcsftime.\n+    if (wcsftime(wbuffer, sizeof(wbuffer) / sizeof(wchar_t), L\"%Z\", &tm) > 0) {\n+        WideCharToMultiByte(CP_UTF8, 0, wbuffer, -1, buffer, sizeof(buffer), NULL, NULL);\n         zone = buffer;\n     }\n #else"}, {"sha": "b6191fb4bd12cd3bc8b86b4a4c742a2613c435f7", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=69860b79b8f4882426fb5755c6d00e6717adeb38", "patch": "@@ -54,6 +54,14 @@\n #include <assert.h>\n \n #if defined(__WIN32__)\n+// Prevent unnecessary #include's from <windows.h>\n+#ifndef WIN32_LEAN_AND_MEAN\n+#define WIN32_LEAN_AND_MEAN\n+#endif\n+// Prevent defining min and max macro\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n extern \"C\" {\n #include <windows.h>\n #include <tchar.h>"}, {"sha": "7323397508e2e32181867e0fcc078b5218519b52", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/69860b79b8f4882426fb5755c6d00e6717adeb38/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=69860b79b8f4882426fb5755c6d00e6717adeb38", "patch": "@@ -10,7 +10,9 @@ rust_timegm\n rust_mktime\n precise_time_ns\n rust_path_is_dir\n+rust_path_is_dir_u16\n rust_path_exists\n+rust_path_exists_u16\n rust_get_stdin\n rust_get_stdout\n rust_get_stderr"}]}