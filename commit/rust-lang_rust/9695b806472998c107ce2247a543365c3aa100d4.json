{"sha": "9695b806472998c107ce2247a543365c3aa100d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OTViODA2NDcyOTk4YzEwN2NlMjI0N2E1NDMzNjVjM2FhMTAwZDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-22T13:58:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-22T13:58:12Z"}, "message": "Rollup merge of #58615 - RalfJung:ref-to-place-alignment, r=oli-obk\n\nmiri: explain why we use static alignment in ref-to-place conversion\n\n@eddyb @oli-obk do you think this makes sense? Or should we use the run-time alignment (`align_of_val`)? I am a bit worried about custom DSTs, but that affects way more areas of Miri so I'd ignore them for now.\n\nr? @oli-obk", "tree": {"sha": "c7873e24dedd394b8949cbea8b1e003eb7f03874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7873e24dedd394b8949cbea8b1e003eb7f03874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9695b806472998c107ce2247a543365c3aa100d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcb//1CRBK7hj4Ov3rIwAAdHIIAHl+5KabZqHkzPnavSeSxOQ1\nhs81xnz1YfqIVtZkBmr2MxDx9p2dzqZ4eJVzc1lbBt76zcl/qvgooQWfNK1BxuX0\nCDSslWb/mv/b95zmKct4KAbZM9fMzFSpwGKhR9nnn4sWg89w8o6UXt9UOSaPKb0V\neFEmGTSbSDKF8PAJXRuwVt08JTXSQDqQmYbBMA/ycLK7hmwllNwPfeF35k16Y+oR\nDADcXGhZoALDIry6QQ3BoIG++tv8/Tp0uacEmqM5oeee2TDPsezNu+t9XQoIpZbm\n6ouC2Fp+NQVOfkuK4NqMWKkvJI9gyeftLnCLJsd944AERt8OdqHON8NVNIbt89o=\n=LLTM\n-----END PGP SIGNATURE-----\n", "payload": "tree c7873e24dedd394b8949cbea8b1e003eb7f03874\nparent 59f1a563d5a5f6aa9f34df5ed4b7a3ad9d154ac4\nparent b01f81be7445ca83a8a9fd51937e3047c22eea09\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550843892 +0100\ncommitter GitHub <noreply@github.com> 1550843892 +0100\n\nRollup merge of #58615 - RalfJung:ref-to-place-alignment, r=oli-obk\n\nmiri: explain why we use static alignment in ref-to-place conversion\n\n@eddyb @oli-obk do you think this makes sense? Or should we use the run-time alignment (`align_of_val`)? I am a bit worried about custom DSTs, but that affects way more areas of Miri so I'd ignore them for now.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9695b806472998c107ce2247a543365c3aa100d4", "html_url": "https://github.com/rust-lang/rust/commit/9695b806472998c107ce2247a543365c3aa100d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9695b806472998c107ce2247a543365c3aa100d4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f1a563d5a5f6aa9f34df5ed4b7a3ad9d154ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f1a563d5a5f6aa9f34df5ed4b7a3ad9d154ac4", "html_url": "https://github.com/rust-lang/rust/commit/59f1a563d5a5f6aa9f34df5ed4b7a3ad9d154ac4"}, {"sha": "b01f81be7445ca83a8a9fd51937e3047c22eea09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01f81be7445ca83a8a9fd51937e3047c22eea09", "html_url": "https://github.com/rust-lang/rust/commit/b01f81be7445ca83a8a9fd51937e3047c22eea09"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "ec701a939f225d7a657efa1ec630f1030610f7f7", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9695b806472998c107ce2247a543365c3aa100d4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9695b806472998c107ce2247a543365c3aa100d4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=9695b806472998c107ce2247a543365c3aa100d4", "patch": "@@ -326,6 +326,10 @@ where\n \n         let mplace = MemPlace {\n             ptr: val.to_scalar_ptr()?,\n+            // We could use the run-time alignment here. For now, we do not, because\n+            // the point of tracking the alignment here is to make sure that the *static*\n+            // alignment information emitted with the loads is correct. The run-time\n+            // alignment can only be more restrictive.\n             align: layout.align.abi,\n             meta: val.to_meta()?,\n         };\n@@ -385,9 +389,11 @@ where\n         // above). In that case, all fields are equal.\n         let field_layout = base.layout.field(self, usize::try_from(field).unwrap_or(0))?;\n \n-        // Offset may need adjustment for unsized fields\n+        // Offset may need adjustment for unsized fields.\n         let (meta, offset) = if field_layout.is_unsized() {\n-            // re-use parent metadata to determine dynamic field layout\n+            // Re-use parent metadata to determine dynamic field layout.\n+            // With custom DSTS, this *will* execute user-defined code, but the same\n+            // happens at run-time so that's okay.\n             let align = match self.size_and_align_of(base.meta, field_layout)? {\n                 Some((_, align)) => align,\n                 None if offset == Size::ZERO =>"}]}