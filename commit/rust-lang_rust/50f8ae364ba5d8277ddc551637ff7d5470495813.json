{"sha": "50f8ae364ba5d8277ddc551637ff7d5470495813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjhhZTM2NGJhNWQ4Mjc3ZGRjNTUxNjM3ZmY3ZDU0NzA0OTU4MTM=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-17T17:56:14Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:15Z"}, "message": "Add a def-id in `ty::ParamEnv`", "tree": {"sha": "5b8ce20ad18b8bdcf1b22410eeac62a9b74d8429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b8ce20ad18b8bdcf1b22410eeac62a9b74d8429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f8ae364ba5d8277ddc551637ff7d5470495813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f8ae364ba5d8277ddc551637ff7d5470495813", "html_url": "https://github.com/rust-lang/rust/commit/50f8ae364ba5d8277ddc551637ff7d5470495813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f8ae364ba5d8277ddc551637ff7d5470495813/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69007bd6606b19b56e64c77b0270353a09a3f373", "url": "https://api.github.com/repos/rust-lang/rust/commits/69007bd6606b19b56e64c77b0270353a09a3f373", "html_url": "https://github.com/rust-lang/rust/commit/69007bd6606b19b56e64c77b0270353a09a3f373"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "86dcec686f9f060cd81259707052bb48230571fe", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=50f8ae364ba5d8277ddc551637ff7d5470495813", "patch": "@@ -885,7 +885,8 @@ for ty::steal::Steal<T>\n \n impl_stable_hash_for!(struct ty::ParamEnv<'tcx> {\n     caller_bounds,\n-    reveal\n+    reveal,\n+    def_id\n });\n \n impl_stable_hash_for!(enum traits::Reveal {"}, {"sha": "f96c4e9014b36488b19b8b17234c011319656b4f", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=50f8ae364ba5d8277ddc551637ff7d5470495813", "patch": "@@ -388,12 +388,17 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             computed_preds.extend(user_computed_preds.iter().cloned());\n             let normalized_preds =\n                 elaborate_predicates(tcx, computed_preds.clone().into_iter().collect());\n-            new_env = ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal);\n+            new_env = ty::ParamEnv::new(\n+                tcx.mk_predicates(normalized_preds),\n+                param_env.reveal,\n+                None\n+            );\n         }\n \n         let final_user_env = ty::ParamEnv::new(\n             tcx.mk_predicates(user_computed_preds.into_iter()),\n             user_env.reveal,\n+            None\n         );\n         debug!(\n             \"evaluate_nested_obligations(ty_did={:?}, trait_did={:?}): succeeded with '{:?}' \\"}, {"sha": "696033d0465b76eb9b579e0fec3be1e8028c25a1", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=50f8ae364ba5d8277ddc551637ff7d5470495813", "patch": "@@ -804,8 +804,11 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\",\n            predicates);\n \n-    let elaborated_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                                           unnormalized_env.reveal);\n+    let elaborated_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        unnormalized_env.reveal,\n+        unnormalized_env.def_id\n+    );\n \n     // HACK: we are trying to normalize the param-env inside *itself*. The problem is that\n     // normalization expects its param-env to be already normalized, which means we have\n@@ -852,8 +855,11 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // predicates here anyway. Keeping them here anyway because it seems safer.\n     let outlives_env: Vec<_> =\n         non_outlives_predicates.iter().chain(&outlives_predicates).cloned().collect();\n-    let outlives_env = ty::ParamEnv::new(tcx.intern_predicates(&outlives_env),\n-                                         unnormalized_env.reveal);\n+    let outlives_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&outlives_env),\n+        unnormalized_env.reveal,\n+        None\n+    );\n     let outlives_predicates =\n         match do_normalize_predicates(tcx, region_context, cause,\n                                       outlives_env, outlives_predicates) {\n@@ -869,7 +875,11 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut predicates = non_outlives_predicates;\n     predicates.extend(outlives_predicates);\n     debug!(\"normalize_param_env_or_error: final predicates={:?}\", predicates);\n-    ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal)\n+    ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        unnormalized_env.reveal,\n+        unnormalized_env.def_id\n+    )\n }\n \n pub fn fully_normalize<'a, 'gcx, 'tcx, T>("}, {"sha": "78ce76a01486f8ec82a1da33c1e054989d4629df", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=50f8ae364ba5d8277ddc551637ff7d5470495813", "patch": "@@ -1617,6 +1617,11 @@ pub struct ParamEnv<'tcx> {\n     /// want `Reveal::All` -- note that this is always paired with an\n     /// empty environment. To get that, use `ParamEnv::reveal()`.\n     pub reveal: traits::Reveal,\n+\n+    /// If this `ParamEnv` comes from a call to `tcx.param_env(def_id)`,\n+    /// register that `def_id` (useful for transitioning to the chalk trait\n+    /// solver).\n+    pub def_id: Option<DefId>,\n }\n \n impl<'tcx> ParamEnv<'tcx> {\n@@ -1626,7 +1631,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// type-checking.\n     #[inline]\n     pub fn empty() -> Self {\n-        Self::new(List::empty(), Reveal::UserFacing)\n+        Self::new(List::empty(), Reveal::UserFacing, None)\n     }\n \n     /// Construct a trait environment with no where clauses in scope\n@@ -1638,15 +1643,17 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// or invoke `param_env.with_reveal_all()`.\n     #[inline]\n     pub fn reveal_all() -> Self {\n-        Self::new(List::empty(), Reveal::All)\n+        Self::new(List::empty(), Reveal::All, None)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n-    pub fn new(caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n-               reveal: Reveal)\n-               -> Self {\n-        ty::ParamEnv { caller_bounds, reveal }\n+    pub fn new(\n+        caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n+        reveal: Reveal,\n+        def_id: Option<DefId>\n+    ) -> Self {\n+        ty::ParamEnv { caller_bounds, reveal, def_id }\n     }\n \n     /// Returns a new parameter environment with the same clauses, but\n@@ -3148,8 +3155,11 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are any errors at that point, so after type checking you can be\n     // sure that this will succeed without errors anyway.\n \n-    let unnormalized_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                                             traits::Reveal::UserFacing);\n+    let unnormalized_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        traits::Reveal::UserFacing,\n+        Some(def_id)\n+    );\n \n     let body_id = tcx.hir().as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n         tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.node_id)"}, {"sha": "4755adc4cd10d6d70c915bd2176a093b9368ba0d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=50f8ae364ba5d8277ddc551637ff7d5470495813", "patch": "@@ -276,6 +276,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n             ty::ParamEnv {\n                 reveal: self.reveal,\n                 caller_bounds,\n+                def_id: self.def_id,\n             }\n         })\n     }\n@@ -589,7 +590,7 @@ impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n }\n \n BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> { reveal, caller_bounds }\n+    impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> { reveal, caller_bounds, def_id }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {"}, {"sha": "8c193cc8ff1a3b790debb2eb566d6698a77140f9", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f8ae364ba5d8277ddc551637ff7d5470495813/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=50f8ae364ba5d8277ddc551637ff7d5470495813", "patch": "@@ -206,8 +206,11 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_node_id);\n-    let param_env = ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates),\n-                                      Reveal::UserFacing);\n+    let param_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&hybrid_preds.predicates),\n+        Reveal::UserFacing,\n+        None\n+    );\n     let param_env = traits::normalize_param_env_or_error(tcx,\n                                                          impl_m.def_id,\n                                                          param_env,"}]}