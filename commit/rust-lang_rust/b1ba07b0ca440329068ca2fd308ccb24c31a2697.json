{"sha": "b1ba07b0ca440329068ca2fd308ccb24c31a2697", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmEwN2IwY2E0NDAzMjkwNjhjYTJmZDMwOGNjYjI0YzMxYTI2OTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-30T09:23:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-30T09:23:56Z"}, "message": "call out more clearly what we do not test; update paragraph on intptrcast", "tree": {"sha": "a767bf38e28ef4b0eb7a96d7eb45927cbff0b1ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a767bf38e28ef4b0eb7a96d7eb45927cbff0b1ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ba07b0ca440329068ca2fd308ccb24c31a2697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ba07b0ca440329068ca2fd308ccb24c31a2697", "html_url": "https://github.com/rust-lang/rust/commit/b1ba07b0ca440329068ca2fd308ccb24c31a2697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ba07b0ca440329068ca2fd308ccb24c31a2697/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa730803ebfa840507be4f79ab6db6ab9a97ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa730803ebfa840507be4f79ab6db6ab9a97ac0", "html_url": "https://github.com/rust-lang/rust/commit/5aa730803ebfa840507be4f79ab6db6ab9a97ac0"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "e21ee987125e47cf1b87c2927d337afef02b277c", "filename": "README.md", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1ba07b0ca440329068ca2fd308ccb24c31a2697/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1ba07b0ca440329068ca2fd308ccb24c31a2697/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b1ba07b0ca440329068ca2fd308ccb24c31a2697", "patch": "@@ -12,30 +12,32 @@ for example:\n * Violation of intrinsic preconditions (an [`unreachable_unchecked`] being\n   reached, calling [`copy_nonoverlapping`] with overlapping ranges, ...)\n * Not sufficiently aligned memory accesses and references\n-* Violation of basic type invariants (a `bool` that is not 0 or 1, for example,\n+* Violation of *some* basic type invariants (a `bool` that is not 0 or 1, for example,\n   or an invalid enum discriminant)\n * WIP: Violations of the rules governing aliasing for reference types\n \n Miri has already discovered some [real-world bugs](#bugs-found-by-miri).  If you\n found a bug with Miri, we'd appreciate if you tell us and we'll add it to the\n list!\n \n-Be aware that Miri will not catch all possible errors in your program, and\n-cannot run all programs:\n+Be aware that Miri will not catch all cases of undefined behavior in your\n+program, and cannot run all programs:\n \n * There are still plenty of open questions around the basic invariants for some\n   types and when these invariants even have to hold. Miri tries to avoid false\n   positives here, so if you program runs fine in Miri right now that is by no\n-  means a guarantee that it is UB-free when these questions get answered. In\n-  particular, Miri does currently not check that integers are initialized or\n-  that references point to valid data.\n+  means a guarantee that it is UB-free when these questions get answered.\n+\n+    In particular, Miri does currently not check that integers are initialized\n+  or that references point to valid data.\n * If the program relies on unspecified details of how data is laid out, it will\n   still run fine in Miri -- but might break (including causing UB) on different\n   compiler versions or different platforms.\n-* Miri is fully deterministic and does not actually pick a base address in\n-  virtual memory for the program's allocations.  If program behavior depends on\n-  the base address of an allocation, Miri will stop execution (with a few\n-  exceptions to make some common pointer comparisons work).\n+* Program execution is non-deterministic when it depends, for example, on where\n+  exactly in memory allocations end up. Miri tests one of many possible\n+  executions of your program. If your code is sensitive to allocation base\n+  addresses or other non-deterministic data, try running Miri with different\n+  values for `-Zmiri-seed` to test different executions.\n * Miri runs the program as a platform-independent interpreter, so the program\n   has no access to any platform-specific APIs or FFI. A few APIs have been\n   implemented (such as printing to stdout) but most have not: for example, Miri"}]}