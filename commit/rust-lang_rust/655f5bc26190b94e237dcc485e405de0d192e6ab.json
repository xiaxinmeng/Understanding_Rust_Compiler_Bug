{"sha": "655f5bc26190b94e237dcc485e405de0d192e6ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NWY1YmMyNjE5MGI5NGUyMzdkY2M0ODVlNDA1ZGUwZDE5MmU2YWI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-24T14:19:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-24T14:19:49Z"}, "message": "Rename a variable for consistency", "tree": {"sha": "9021c3e415046ad0d11666703badba7928564274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9021c3e415046ad0d11666703badba7928564274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655f5bc26190b94e237dcc485e405de0d192e6ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655f5bc26190b94e237dcc485e405de0d192e6ab", "html_url": "https://github.com/rust-lang/rust/commit/655f5bc26190b94e237dcc485e405de0d192e6ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655f5bc26190b94e237dcc485e405de0d192e6ab/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f", "html_url": "https://github.com/rust-lang/rust/commit/76fb05d91dbbd8ddbe2f1b108fc3e05e99f96c0f"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "c759d4c8b1d7a983146438cd00c3cf268540e58f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/655f5bc26190b94e237dcc485e405de0d192e6ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655f5bc26190b94e237dcc485e405de0d192e6ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=655f5bc26190b94e237dcc485e405de0d192e6ab", "patch": "@@ -241,12 +241,12 @@ pub fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ty> {\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct InferenceResult {\n-    type_for: FxHashMap<LocalSyntaxPtr, Ty>,\n+    type_of: FxHashMap<LocalSyntaxPtr, Ty>,\n }\n \n impl InferenceResult {\n     pub fn type_of_node(&self, node: SyntaxNodeRef) -> Option<Ty> {\n-        self.type_for.get(&LocalSyntaxPtr::new(node)).cloned()\n+        self.type_of.get(&LocalSyntaxPtr::new(node)).cloned()\n     }\n }\n \n@@ -256,21 +256,21 @@ pub struct InferenceContext<'a, D: HirDatabase> {\n     scopes: Arc<FnScopes>,\n     module: Module,\n     // TODO unification tables...\n-    type_for: FxHashMap<LocalSyntaxPtr, Ty>,\n+    type_of: FxHashMap<LocalSyntaxPtr, Ty>,\n }\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn new(db: &'a D, scopes: Arc<FnScopes>, module: Module) -> Self {\n         InferenceContext {\n-            type_for: FxHashMap::default(),\n+            type_of: FxHashMap::default(),\n             db,\n             scopes,\n             module,\n         }\n     }\n \n     fn write_ty(&mut self, node: SyntaxNodeRef, ty: Ty) {\n-        self.type_for.insert(LocalSyntaxPtr::new(node), ty);\n+        self.type_of.insert(LocalSyntaxPtr::new(node), ty);\n     }\n \n     fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> Option<Ty> {\n@@ -299,7 +299,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             // resolve locally\n             let name = ctry!(ast_path.segment().and_then(|s| s.name_ref()));\n             if let Some(scope_entry) = self.scopes.resolve_local_name(name) {\n-                let ty = ctry!(self.type_for.get(&scope_entry.ptr()));\n+                let ty = ctry!(self.type_of.get(&scope_entry.ptr()));\n                 return Ok(Some(ty.clone()));\n             };\n         };\n@@ -577,10 +577,10 @@ pub fn infer(db: &impl HirDatabase, function: Function) -> Cancelable<InferenceR\n             };\n             if let Some(type_ref) = param.type_ref() {\n                 let ty = Ty::new(db, type_ref)?;\n-                ctx.type_for.insert(LocalSyntaxPtr::new(pat.syntax()), ty);\n+                ctx.type_of.insert(LocalSyntaxPtr::new(pat.syntax()), ty);\n             } else {\n                 // TODO self param\n-                ctx.type_for\n+                ctx.type_of\n                     .insert(LocalSyntaxPtr::new(pat.syntax()), Ty::Unknown);\n             };\n         }\n@@ -596,6 +596,6 @@ pub fn infer(db: &impl HirDatabase, function: Function) -> Cancelable<InferenceR\n     // TODO 'resolve' the types: replace inference variables by their inferred results\n \n     Ok(InferenceResult {\n-        type_for: ctx.type_for,\n+        type_of: ctx.type_of,\n     })\n }"}, {"sha": "0212277492b7a6436164218b9ed6a4d48da3fadc", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/655f5bc26190b94e237dcc485e405de0d192e6ab/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655f5bc26190b94e237dcc485e405de0d192e6ab/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=655f5bc26190b94e237dcc485e405de0d192e6ab", "patch": "@@ -26,7 +26,7 @@ fn infer_file(content: &str) -> String {\n             .unwrap()\n             .unwrap();\n         let inference_result = func.infer(&db).unwrap();\n-        for (syntax_ptr, ty) in &inference_result.type_for {\n+        for (syntax_ptr, ty) in &inference_result.type_of {\n             let node = syntax_ptr.resolve(&source_file);\n             write!(\n                 acc,"}]}