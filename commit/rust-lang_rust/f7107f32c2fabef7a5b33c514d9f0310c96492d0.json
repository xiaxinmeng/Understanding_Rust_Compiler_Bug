{"sha": "f7107f32c2fabef7a5b33c514d9f0310c96492d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTA3ZjMyYzJmYWJlZjdhNWIzM2M1MTRkOWYwMzEwYzk2NDkyZDA=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-31T20:06:27Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-31T21:44:52Z"}, "message": "rustbuild+configure: convert unix style paths on windows", "tree": {"sha": "009690d6fde2663411bcf3ad88518bc38e574028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009690d6fde2663411bcf3ad88518bc38e574028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7107f32c2fabef7a5b33c514d9f0310c96492d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7107f32c2fabef7a5b33c514d9f0310c96492d0", "html_url": "https://github.com/rust-lang/rust/commit/f7107f32c2fabef7a5b33c514d9f0310c96492d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7107f32c2fabef7a5b33c514d9f0310c96492d0/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb5c85152e2a8b7f3480a46f4619b572f162056", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb5c85152e2a8b7f3480a46f4619b572f162056", "html_url": "https://github.com/rust-lang/rust/commit/5cb5c85152e2a8b7f3480a46f4619b572f162056"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "2b1d8e67dd8f2aa749d9cbb8dc9fa62a68293e2b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f7107f32c2fabef7a5b33c514d9f0310c96492d0/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7107f32c2fabef7a5b33c514d9f0310c96492d0/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f7107f32c2fabef7a5b33c514d9f0310c96492d0", "patch": "@@ -358,37 +358,37 @@ impl Config {\n                                        .collect();\n                 }\n                 \"CFG_MUSL_ROOT\" if value.len() > 0 => {\n-                    self.musl_root = Some(PathBuf::from(value));\n+                    self.musl_root = Some(parse_configure_path(value));\n                 }\n                 \"CFG_MUSL_ROOT_X86_64\" if value.len() > 0 => {\n                     let target = \"x86_64-unknown-linux-musl\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.musl_root = Some(PathBuf::from(value));\n+                    target.musl_root = Some(parse_configure_path(value));\n                 }\n                 \"CFG_MUSL_ROOT_I686\" if value.len() > 0 => {\n                     let target = \"i686-unknown-linux-musl\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.musl_root = Some(PathBuf::from(value));\n+                    target.musl_root = Some(parse_configure_path(value));\n                 }\n                 \"CFG_MUSL_ROOT_ARM\" if value.len() > 0 => {\n                     let target = \"arm-unknown-linux-musleabi\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.musl_root = Some(PathBuf::from(value));\n+                    target.musl_root = Some(parse_configure_path(value));\n                 }\n                 \"CFG_MUSL_ROOT_ARMHF\" if value.len() > 0 => {\n                     let target = \"arm-unknown-linux-musleabihf\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.musl_root = Some(PathBuf::from(value));\n+                    target.musl_root = Some(parse_configure_path(value));\n                 }\n                 \"CFG_MUSL_ROOT_ARMV7\" if value.len() > 0 => {\n                     let target = \"armv7-unknown-linux-musleabihf\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.musl_root = Some(PathBuf::from(value));\n+                    target.musl_root = Some(parse_configure_path(value));\n                 }\n                 \"CFG_DEFAULT_AR\" if value.len() > 0 => {\n                     self.rustc_default_ar = Some(value.to_string());\n@@ -397,7 +397,7 @@ impl Config {\n                     self.rustc_default_linker = Some(value.to_string());\n                 }\n                 \"CFG_GDB\" if value.len() > 0 => {\n-                    self.gdb = Some(PathBuf::from(value));\n+                    self.gdb = Some(parse_configure_path(value));\n                 }\n                 \"CFG_RELEASE_CHANNEL\" => {\n                     self.channel = value.to_string();\n@@ -417,40 +417,40 @@ impl Config {\n                 \"CFG_LLVM_ROOT\" if value.len() > 0 => {\n                     let target = self.target_config.entry(self.build.clone())\n                                      .or_insert(Target::default());\n-                    let root = PathBuf::from(value);\n+                    let root = parse_configure_path(value);\n                     target.llvm_config = Some(push_exe_path(root, &[\"bin\", \"llvm-config\"]));\n                 }\n                 \"CFG_JEMALLOC_ROOT\" if value.len() > 0 => {\n                     let target = self.target_config.entry(self.build.clone())\n                                      .or_insert(Target::default());\n-                    target.jemalloc = Some(PathBuf::from(value));\n+                    target.jemalloc = Some(parse_configure_path(value));\n                 }\n                 \"CFG_ARM_LINUX_ANDROIDEABI_NDK\" if value.len() > 0 => {\n                     let target = \"arm-linux-androideabi\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.ndk = Some(PathBuf::from(value));\n+                    target.ndk = Some(parse_configure_path(value));\n                 }\n                 \"CFG_ARMV7_LINUX_ANDROIDEABI_NDK\" if value.len() > 0 => {\n                     let target = \"armv7-linux-androideabi\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.ndk = Some(PathBuf::from(value));\n+                    target.ndk = Some(parse_configure_path(value));\n                 }\n                 \"CFG_I686_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n                     let target = \"i686-linux-android\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.ndk = Some(PathBuf::from(value));\n+                    target.ndk = Some(parse_configure_path(value));\n                 }\n                 \"CFG_AARCH64_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n                     let target = \"aarch64-linux-android\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n-                    target.ndk = Some(PathBuf::from(value));\n+                    target.ndk = Some(parse_configure_path(value));\n                 }\n                 \"CFG_LOCAL_RUST_ROOT\" if value.len() > 0 => {\n-                    let path = PathBuf::from(value);\n+                    let path = parse_configure_path(value);\n                     self.rustc = Some(push_exe_path(path.clone(), &[\"bin\", \"rustc\"]));\n                     self.cargo = Some(push_exe_path(path, &[\"bin\", \"cargo\"]));\n                 }\n@@ -460,6 +460,29 @@ impl Config {\n     }\n }\n \n+#[cfg(not(windows))]\n+fn parse_configure_path(path: &str) -> PathBuf {\n+    path.into()\n+}\n+\n+#[cfg(windows)]\n+fn parse_configure_path(path: &str) -> PathBuf {\n+    // on windows, configure produces unix style paths e.g. /c/some/path but we\n+    // only want real windows paths\n+\n+    use build_helper;\n+\n+    // '/' is invalid in windows paths, so we can detect unix paths by the presence of it\n+    if !path.contains('/') {\n+        return path.into();\n+    }\n+\n+    let win_path = build_helper::output(Command::new(\"cygpath\").arg(\"-w\").arg(path));\n+    let win_path = win_path.trim();\n+\n+    win_path.into()\n+}\n+\n fn set<T>(field: &mut T, val: Option<T>) {\n     if let Some(v) = val {\n         *field = v;"}]}