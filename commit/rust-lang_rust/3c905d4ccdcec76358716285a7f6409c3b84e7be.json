{"sha": "3c905d4ccdcec76358716285a7f6409c3b84e7be", "node_id": "C_kwDOAAsO6NoAKDNjOTA1ZDRjY2RjZWM3NjM1ODcxNjI4NWE3ZjY0MDljM2I4NGU3YmU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-12T00:57:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-23T20:17:48Z"}, "message": "review comments: inline bindings and fix typo", "tree": {"sha": "a13e2242278d11745e2f3487a5949ca443ce65f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a13e2242278d11745e2f3487a5949ca443ce65f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c905d4ccdcec76358716285a7f6409c3b84e7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c905d4ccdcec76358716285a7f6409c3b84e7be", "html_url": "https://github.com/rust-lang/rust/commit/3c905d4ccdcec76358716285a7f6409c3b84e7be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c905d4ccdcec76358716285a7f6409c3b84e7be/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a711fdebd10e2a4426067d99fa04437f8a32dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a711fdebd10e2a4426067d99fa04437f8a32dd", "html_url": "https://github.com/rust-lang/rust/commit/53a711fdebd10e2a4426067d99fa04437f8a32dd"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "0d539783162e50dcd63ddd996b21c04a2efa2b91", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -721,11 +721,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         // Try to find predicates on *generic params* that would allow copying `ty`\n         let infcx = tcx.infer_ctxt().build();\n-        let clone_did = tcx.lang_items().clone_trait().unwrap();\n-        let params = ty::List::empty();\n-        let ty = tcx.erase_regions(ty);\n-        let env = self.param_env;\n-        if infcx.type_implements_trait(clone_did, ty, params, env).must_apply_modulo_regions() {\n+        if infcx\n+            .type_implements_trait(\n+                tcx.lang_items().clone_trait().unwrap(),\n+                tcx.erase_regions(ty),\n+                ty::List::empty(),\n+                self.param_env,\n+            )\n+            .must_apply_modulo_regions()\n+        {\n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n                 \"consider cloning the value if the performance cost is acceptable\","}, {"sha": "d2e9497d0795cf6e3b3a202ddb4d48ec36fffaec", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -8,7 +8,7 @@ LL |     consume(b);\n LL |     consume(b);\n    |             ^ value used here after move\n    |\n-note: consider changing this parameter type in function `consume` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `consume` to borrow instead if owning the value isn't necessary\n   --> $DIR/borrowck-consume-unsize-vec.rs:3:15\n    |\n LL | fn consume(_: Box<[i32]>) {"}, {"sha": "ed7e883ca63924c0cc68a116fe375221867d811d", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -8,7 +8,7 @@ LL |     consume(b);\n LL |     consume(b);\n    |             ^ value used here after move\n    |\n-note: consider changing this parameter type in function `consume` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `consume` to borrow instead if owning the value isn't necessary\n   --> $DIR/borrowck-consume-upcast-box.rs:5:15\n    |\n LL | fn consume(_: Box<dyn Foo>) {"}, {"sha": "74e7067c9afaa46a35ee835b9fb43d2fac3e5dc0", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -8,7 +8,7 @@ LL |     for _ in 0..3 {\n LL |         Other::handle(value);\n    |                       ^^^^^ value moved here, in previous iteration of loop\n    |\n-note: consider changing this parameter type in function `handle` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `handle` to borrow instead if owning the value isn't necessary\n   --> $DIR/mut-borrow-in-loop-2.rs:9:22\n    |\n LL |     fn handle(value: T) -> Self;"}, {"sha": "d14cd6cb4e03a04a4255047ab22d2feca8451c29", "filename": "src/test/ui/liveness/liveness-move-call-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -9,7 +9,7 @@ LL |     loop {\n LL |         take(x);\n    |              ^ value moved here, in previous iteration of loop\n    |\n-note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n   --> $DIR/liveness-move-call-arg.rs:1:13\n    |\n LL | fn take(_x: Box<isize>) {}"}, {"sha": "65d55ca8f7073ae3ec92de307d75cf1c0e7d8d2e", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -8,7 +8,7 @@ LL |     send(ch, message);\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in function `send` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `send` to borrow instead if owning the value isn't necessary\n   --> $DIR/liveness-use-after-send.rs:3:54\n    |\n LL | fn send<T:Send + std::fmt::Debug>(ch: Chan<T>, data: T) {"}, {"sha": "fbeeaf646e1eeec57cc5d3a06834b392c7aaeb3c", "filename": "src/test/ui/moves/borrow-closures-instead-of-move.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -8,7 +8,7 @@ LL |     loop {\n LL |         takes_fnonce(f);\n    |                      ^ value moved here, in previous iteration of loop\n    |\n-note: consider changing this parameter type in function `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if owning the value isn't necessary\n   --> $DIR/borrow-closures-instead-of-move.rs:34:20\n    |\n LL | fn takes_fnonce(_: impl FnOnce()) {}\n@@ -32,7 +32,7 @@ LL |         takes_fnonce(m);\n LL |     takes_fnonce(m);\n    |                  ^ value used here after move\n    |\n-note: consider changing this parameter type in function `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if owning the value isn't necessary\n   --> $DIR/borrow-closures-instead-of-move.rs:34:20\n    |\n LL | fn takes_fnonce(_: impl FnOnce()) {}\n@@ -58,7 +58,7 @@ note: closure cannot be moved more than once as it is not `Copy` due to moving t\n    |\n LL |         x += 1;\n    |         ^\n-note: consider changing this parameter type in function `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if owning the value isn't necessary\n   --> $DIR/borrow-closures-instead-of-move.rs:34:20\n    |\n LL | fn takes_fnonce(_: impl FnOnce()) {}"}, {"sha": "86e5f65248b977f14352d87b403e7631ca8ef478", "filename": "src/test/ui/moves/move-guard-same-consts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -9,7 +9,7 @@ LL |         (1, 2) if take(x) => (),\n LL |         (1, 2) if take(x) => (),\n    |                        ^ value used here after move\n    |\n-note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n   --> $DIR/move-guard-same-consts.rs:25:15\n    |\n LL | fn take<T>(_: T) -> bool { false }"}, {"sha": "f04cb34d7c46e0e84b5e3797c93eb1d560246823", "filename": "src/test/ui/moves/move-in-guard-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -9,7 +9,7 @@ LL |         (1, _) if take(x) => (),\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n    |\n-note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n   --> $DIR/move-in-guard-1.rs:15:15\n    |\n LL | fn take<T>(_: T) -> bool { false }"}, {"sha": "26047861f55d704df5023072644fa212bda525e3", "filename": "src/test/ui/moves/move-in-guard-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -7,7 +7,7 @@ LL |     let x: Box<_> = Box::new(1);\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n    |\n-note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n   --> $DIR/move-in-guard-2.rs:13:15\n    |\n LL | fn take<T>(_: T) -> bool { false }"}, {"sha": "838b1282cb4ed883de4561af3c7104e08b719655", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -108,7 +108,7 @@ LL |         _ if guard(x) => 10,\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in function `guard` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `guard` to borrow instead if owning the value isn't necessary\n   --> $DIR/moves-based-on-type-exprs.rs:6:14\n    |\n LL | fn guard(_s: String) -> bool {panic!()}"}, {"sha": "6381ae874ba81d56f72f0711be0bec8a342297e7", "filename": "src/test/ui/union/union-move.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -9,7 +9,7 @@ LL |         move_out(x.f1_nocopy);\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}\n@@ -28,7 +28,7 @@ LL |         move_out(x.f2_nocopy);\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}"}, {"sha": "6381ae874ba81d56f72f0711be0bec8a342297e7", "filename": "src/test/ui/union/union-move.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -9,7 +9,7 @@ LL |         move_out(x.f1_nocopy);\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}\n@@ -28,7 +28,7 @@ LL |         move_out(x.f2_nocopy);\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}"}, {"sha": "d8bffd4f9cf3e51f94559b79fcd34feec564898d", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -29,7 +29,7 @@ LL |         drop_unsized(y);\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in function `drop_unsized` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `drop_unsized` to borrow instead if owning the value isn't necessary\n   --> $DIR/borrow-after-move.rs:14:31\n    |\n LL | fn drop_unsized<T: ?Sized>(_: T) {}"}, {"sha": "71534818141caeb3fc06791687887b757dd799ca", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -17,7 +17,7 @@ LL |         drop_unsized(y);\n LL |         drop_unsized(y);\n    |                      ^ value used here after move\n    |\n-note: consider changing this parameter type in function `drop_unsized` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `drop_unsized` to borrow instead if owning the value isn't necessary\n   --> $DIR/double-move.rs:14:31\n    |\n LL | fn drop_unsized<T: ?Sized>(_: T) {}"}, {"sha": "dfa0c04836eb3b7f66b2b26709d16e5129158448", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c905d4ccdcec76358716285a7f6409c3b84e7be/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=3c905d4ccdcec76358716285a7f6409c3b84e7be", "patch": "@@ -10,7 +10,7 @@ LL |\n LL |     let x = n.to_string();\n    |             ^^^^^^^^^^^^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in method `push` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in method `push` to borrow instead if owning the value isn't necessary\n   --> $DIR/use-after-move-implicity-coerced-object.rs:17:27\n    |\n LL |     fn push(&mut self, n: Box<dyn ToString + 'static>) {"}]}