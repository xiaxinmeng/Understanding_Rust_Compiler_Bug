{"sha": "2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYmRlZGJmMmZiZjg5YmIwMDc0M2U4NWMzYjE5Y2I3NjVkNmMxYWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-22T21:51:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-22T21:51:47Z"}, "message": "Merge pull request #2549 from topecongiro/macro-def-spaces-around-colon\n\nAdd config option to control spaces around colon in macro def", "tree": {"sha": "8e04c0cc71b78068b093fcf03b57aa5748d83b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e04c0cc71b78068b093fcf03b57aa5748d83b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatCVzCRBK7hj4Ov3rIwAAdHIIAEjj0cc3sVnKrL4UiJudcq+Z\n3EFR5bgRyJfG45X1PftAuOrgh7/kjeN1sRWg9l0Ja00VrfLHGb7F9HjdJYVgL+Se\n+W8kNGYRD9ohFsb35o9fiuGrhhSBI0Apjcu/WlhpJmMhzN6Q5aB75e7Cyc9n9SKb\nO8rghbNgLqlWgEDi+pwg6NMQt/EvdzF2WQ8gRCNz3GsaQPlDx4zkwwAEmaVBl8dr\n+C+kO2r+I0XlBxVnbrgJJOsHY0+TAO6WMap5gpJPZ5YrRz4+iC2TG1fCnVCRZ4Pm\n9ShgL9NbuXDdDydTKt6JMKvscpb4F6WFrUeUVpVQXtZp7kCqHcQbguGvdM2xHJo=\n=Cg3z\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e04c0cc71b78068b093fcf03b57aa5748d83b8d\nparent 50924839e86b5c43e52a28b7b6f1f95ed05ddb7d\nparent ccec777f929c9a3094caa37842367c21387d95a0\nauthor Nick Cameron <nrc@ncameron.org> 1521755507 +1300\ncommitter GitHub <noreply@github.com> 1521755507 +1300\n\nMerge pull request #2549 from topecongiro/macro-def-spaces-around-colon\n\nAdd config option to control spaces around colon in macro def"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "html_url": "https://github.com/rust-lang/rust/commit/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50924839e86b5c43e52a28b7b6f1f95ed05ddb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50924839e86b5c43e52a28b7b6f1f95ed05ddb7d", "html_url": "https://github.com/rust-lang/rust/commit/50924839e86b5c43e52a28b7b6f1f95ed05ddb7d"}, {"sha": "ccec777f929c9a3094caa37842367c21387d95a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccec777f929c9a3094caa37842367c21387d95a0", "html_url": "https://github.com/rust-lang/rust/commit/ccec777f929c9a3094caa37842367c21387d95a0"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "990e25966603746273f81afbe16048e4d1b2aa77", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -97,7 +97,7 @@ fn execute() -> i32 {\n }\n \n macro_rules! print_usage {\n-    ($print: ident, $opts: ident, $reason: expr) => {{\n+    ($print:ident, $opts:ident, $reason:expr) => {{\n         let msg = format!(\"{}\\nusage: cargo fmt [options]\", $reason);\n         $print!(\n             \"{}\\nThis utility formats all bin and lib files of the current crate using rustfmt. \\"}, {"sha": "9c2b77e5c39220043d05b5453077c979dd9f0ed2", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -103,7 +103,7 @@ impl Rewrite for MacroArg {\n \n fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n     macro_rules! parse_macro_arg {\n-        ($macro_arg: ident, $parser: ident) => {\n+        ($macro_arg:ident, $parser:ident) => {\n             let mut cloned_parser = (*parser).clone();\n             match cloned_parser.$parser() {\n                 Ok(x) => {\n@@ -568,7 +568,7 @@ impl MacroArgKind {\n \n         match *self {\n             MacroArgKind::MetaVariable(ty, ref name) => {\n-                Some(format!(\"${}: {}\", name, ty.name.as_str()))\n+                Some(format!(\"${}:{}\", name, ty.name.as_str()))\n             }\n             MacroArgKind::Repeat(ref delim_tok, ref args, ref another, ref tok) => {\n                 let (lhs, inner, rhs) = rewrite_delimited_inner(delim_tok, args)?;"}, {"sha": "bcbf6bd60601e7d13ca215ddf7dbcb246e85df6e", "filename": "src/spanned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -20,7 +20,7 @@ pub trait Spanned {\n }\n \n macro_rules! span_with_attrs_lo_hi {\n-    ($this: ident, $lo: expr, $hi: expr) => {{\n+    ($this:ident, $lo:expr, $hi:expr) => {{\n         let attrs = outer_attributes(&$this.attrs);\n         if attrs.is_empty() {\n             mk_sp($lo, $hi)\n@@ -31,13 +31,13 @@ macro_rules! span_with_attrs_lo_hi {\n }\n \n macro_rules! span_with_attrs {\n-    ($this: ident) => {\n+    ($this:ident) => {\n         span_with_attrs_lo_hi!($this, $this.span.lo(), $this.span.hi())\n     };\n }\n \n macro_rules! implement_spanned {\n-    ($this: ty) => {\n+    ($this:ty) => {\n         impl Spanned for $this {\n             fn span(&self) -> Span {\n                 span_with_attrs!(self)"}, {"sha": "522c066b02fa2801d3b47897892f6f7d09d326d5", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -267,7 +267,7 @@ macro_rules! msg {\n // For format_missing and last_pos, need to use the source callsite (if applicable).\n // Required as generated code spans aren't guaranteed to follow on from the last span.\n macro_rules! source {\n-    ($this: ident, $sp: expr) => {\n+    ($this:ident, $sp:expr) => {\n         $sp.source_callsite()\n     };\n }\n@@ -278,7 +278,7 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n \n // Return true if the given span does not intersect with file lines.\n macro_rules! out_of_file_lines_range {\n-    ($self: ident, $span: expr) => {\n+    ($self:ident, $span:expr) => {\n         !$self.config.file_lines().is_all()\n             && !$self\n                 .config\n@@ -288,15 +288,15 @@ macro_rules! out_of_file_lines_range {\n }\n \n macro_rules! skip_out_of_file_lines_range {\n-    ($self: ident, $span: expr) => {\n+    ($self:ident, $span:expr) => {\n         if out_of_file_lines_range!($self, $span) {\n             return None;\n         }\n     };\n }\n \n macro_rules! skip_out_of_file_lines_range_visitor {\n-    ($self: ident, $span: expr) => {\n+    ($self:ident, $span:expr) => {\n         if out_of_file_lines_range!($self, $span) {\n             $self.push_rewrite($span, None);\n             return;"}, {"sha": "45f85ff2c93e330ebccfea02b04a95f23b847082", "filename": "tests/target/macro_not_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/tests%2Ftarget%2Fmacro_not_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/tests%2Ftarget%2Fmacro_not_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_not_expr.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -1,5 +1,5 @@\n macro_rules! test {\n-    ($($t: tt)*) => {};\n+    ($($t:tt)*) => {};\n }\n \n fn main() {"}, {"sha": "12fdb7b026e4c1ff4b6595bf021beeb087f1a162", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -2,33 +2,33 @@\n \n macro_rules! m {\n     () => {};\n-    ($x: ident) => {};\n-    ($m1: ident, $m2: ident, $x: ident) => {};\n-    ($($beginning: ident),*; $middle: ident; $($end: ident),*) => {};\n+    ($x:ident) => {};\n+    ($m1:ident, $m2:ident, $x:ident) => {};\n+    ($($beginning:ident),*; $middle:ident; $($end:ident),*) => {};\n     (\n-        $($beginning: ident),*;\n-        $middle: ident;\n-        $($end: ident),*;\n-        $($beginning: ident),*;\n-        $middle: ident;\n-        $($end: ident),*\n+        $($beginning:ident),*;\n+        $middle:ident;\n+        $($end:ident),*;\n+        $($beginning:ident),*;\n+        $middle:ident;\n+        $($end:ident),*\n     ) => {};\n-    ($name: ident($($dol: tt $var: ident)*) $($body: tt)*) => {};\n+    ($name:ident($($dol:tt $var:ident)*) $($body:tt)*) => {};\n     (\n-        $($i: ident : $ty: ty, $def: expr, $stb: expr, $($dstring: tt),+);+ $(;)*\n-        $($i: ident : $ty: ty, $def: expr, $stb: expr, $($dstring: tt),+);+ $(;)*\n+        $($i:ident : $ty:ty, $def:expr, $stb:expr, $($dstring:tt),+);+ $(;)*\n+        $($i:ident : $ty:ty, $def:expr, $stb:expr, $($dstring:tt),+);+ $(;)*\n     ) => {};\n-    ($foo: tt foo[$attr: meta] $name: ident) => {};\n-    ($foo: tt[$attr: meta] $name: ident) => {};\n-    ($foo: tt &'a[$attr: meta] $name: ident) => {};\n-    ($foo: tt foo #[$attr: meta] $name: ident) => {};\n-    ($foo: tt #[$attr: meta] $name: ident) => {};\n-    ($foo: tt &'a #[$attr: meta] $name: ident) => {};\n-    ($x: tt foo bar foo bar foo bar $y: tt => x * y * z $z: tt, $($a: tt),*) => {};\n+    ($foo:tt foo[$attr:meta] $name:ident) => {};\n+    ($foo:tt[$attr:meta] $name:ident) => {};\n+    ($foo:tt &'a[$attr:meta] $name:ident) => {};\n+    ($foo:tt foo #[$attr:meta] $name:ident) => {};\n+    ($foo:tt #[$attr:meta] $name:ident) => {};\n+    ($foo:tt &'a #[$attr:meta] $name:ident) => {};\n+    ($x:tt foo bar foo bar foo bar $y:tt => x * y * z $z:tt, $($a:tt),*) => {};\n }\n \n macro_rules! impl_a_method {\n-    ($n: ident($a: ident : $ta: ty) -> $ret: ty { $body: expr }) => {\n+    ($n:ident($a:ident : $ta:ty) -> $ret:ty { $body:expr }) => {\n         fn $n($a: $ta) -> $ret {\n             $body\n         }\n@@ -38,7 +38,7 @@ macro_rules! impl_a_method {\n             };\n         }\n     };\n-    ($n: ident($a: ident : $ta: ty, $b: ident : $tb: ty) -> $ret: ty { $body: expr }) => {\n+    ($n:ident($a:ident : $ta:ty, $b:ident : $tb:ty) -> $ret:ty { $body:expr }) => {\n         fn $n($a: $ta, $b: $tb) -> $ret {\n             $body\n         }\n@@ -49,8 +49,7 @@ macro_rules! impl_a_method {\n         }\n     };\n     (\n-        $n: ident($a: ident : $ta: ty, $b: ident : $tb: ty, $c: ident : $tc: ty) ->\n-        $ret: ty { $body: expr }\n+        $n:ident($a:ident : $ta:ty, $b:ident : $tb:ty, $c:ident : $tc:ty) -> $ret:ty { $body:expr }\n     ) => {\n         fn $n($a: $ta, $b: $tb, $c: $tc) -> $ret {\n             $body\n@@ -62,8 +61,8 @@ macro_rules! impl_a_method {\n         }\n     };\n     (\n-        $n: ident($a: ident : $ta: ty, $b: ident : $tb: ty, $c: ident : $tc: ty, $d: ident : $td: ty) ->\n-        $ret: ty { $body: expr }\n+        $n:ident($a:ident : $ta:ty, $b:ident : $tb:ty, $c:ident : $tc:ty, $d:ident : $td:ty) ->\n+        $ret:ty { $body:expr }\n     ) => {\n         fn $n($a: $ta, $b: $tb, $c: $tc, $d: $td) -> $ret {\n             $body\n@@ -78,7 +77,7 @@ macro_rules! impl_a_method {\n \n macro_rules! m {\n     // a\n-    ($expr: expr, $($func: ident)*) => {{\n+    ($expr:expr, $($func:ident)*) => {{\n         let x = $expr;\n         $func(x)\n     }};\n@@ -91,7 +90,7 @@ macro_rules! m {\n     (@tag) => {};\n \n     // d\n-    ($item: ident) => {\n+    ($item:ident) => {\n         mod macro_item {\n             struct $item;\n         }\n@@ -100,7 +99,7 @@ macro_rules! m {\n \n macro m2 {\n     // a\n-    ($expr: expr, $($func: ident)*) => {{\n+    ($expr:expr, $($func:ident)*) => {{\n         let x = $expr;\n         $func(x)\n     }}\n@@ -113,7 +112,7 @@ macro m2 {\n     (@tag) => {}\n \n     // d\n-    ($item: ident) => {\n+    ($item:ident) => {\n         mod macro_item {\n             struct $item;\n         }\n@@ -156,10 +155,10 @@ macro_rules! m {\n // #2439\n macro_rules! m {\n     (\n-        $line0_xxxxxxxxxxxxxxxxx: expr,\n-        $line1_xxxxxxxxxxxxxxxxx: expr,\n-        $line2_xxxxxxxxxxxxxxxxx: expr,\n-        $line3_xxxxxxxxxxxxxxxxx: expr,\n+        $line0_xxxxxxxxxxxxxxxxx:expr,\n+        $line1_xxxxxxxxxxxxxxxxx:expr,\n+        $line2_xxxxxxxxxxxxxxxxx:expr,\n+        $line3_xxxxxxxxxxxxxxxxx:expr,\n     ) => {};\n }\n \n@@ -173,7 +172,7 @@ macro_rules! m [\n ];\n \n // #2470\n-macro foo($type_name: ident, $docs: expr) {\n+macro foo($type_name:ident, $docs:expr) {\n     #[allow(non_camel_case_types)]\n     #[doc=$docs]\n     #[derive(Debug, Clone, Copy)]\n@@ -182,13 +181,13 @@ macro foo($type_name: ident, $docs: expr) {\n \n // #2534\n macro_rules! foo {\n-    ($a: ident : $b: ty) => {};\n-    ($a: ident $b: ident $c: ident) => {};\n+    ($a:ident : $b:ty) => {};\n+    ($a:ident $b:ident $c:ident) => {};\n }\n \n // #2538\n macro_rules! add_message_to_notes {\n-    ($msg: expr) => {{\n+    ($msg:expr) => {{\n         let mut lines = message.lines();\n         notes.push_str(&format!(\"\\n{}: {}\", level, lines.next().unwrap()));\n         for line in lines {"}, {"sha": "f5d8e11e35ebb6969426e47b3c43234d112da6a6", "filename": "tests/target/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=2fbdedbf2fbf89bb00743e85c3b19cb765d6c1ad", "patch": "@@ -141,7 +141,7 @@ fn issue_1555() {\n \n fn issue1178() {\n     macro_rules! foo {\n-        (#[$attr: meta] $name: ident) => {};\n+        (#[$attr:meta] $name:ident) => {};\n     }\n \n     foo!(\n@@ -246,7 +246,7 @@ fn __bindgen_test_layout_HandleWithDtor_open0_int_close0_instantiation() {\n \n // #878\n macro_rules! try_opt {\n-    ($expr: expr) => {\n+    ($expr:expr) => {\n         match $expr {\n             Some(val) => val,\n \n@@ -891,7 +891,7 @@ fn macro_in_pattern_position() {\n \n macro foo() {}\n \n-pub macro bar($x: ident + $y: expr;) {\n+pub macro bar($x:ident + $y:expr;) {\n     fn foo($x: Foo) {\n         long_function(\n             a_long_argument_to_a_long_function_is_what_this_is(AAAAAAAAAAAAAAAAAAAAAAAAAAAA),"}]}