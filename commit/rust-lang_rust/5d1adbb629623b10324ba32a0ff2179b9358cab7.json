{"sha": "5d1adbb629623b10324ba32a0ff2179b9358cab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMWFkYmI2Mjk2MjNiMTAzMjRiYTMyYTBmZjIxNzliOTM1OGNhYjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-10T19:05:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-10T20:02:18Z"}, "message": "Use `generics_of` instead of incorrectly inspecting `FnSig` arguments", "tree": {"sha": "a937d47be2bee11b65af527f6272f83255c8ab41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a937d47be2bee11b65af527f6272f83255c8ab41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d1adbb629623b10324ba32a0ff2179b9358cab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1adbb629623b10324ba32a0ff2179b9358cab7", "html_url": "https://github.com/rust-lang/rust/commit/5d1adbb629623b10324ba32a0ff2179b9358cab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d1adbb629623b10324ba32a0ff2179b9358cab7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b76d82b1395e42693cf227169ef2bfd32b8418e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b76d82b1395e42693cf227169ef2bfd32b8418e", "html_url": "https://github.com/rust-lang/rust/commit/6b76d82b1395e42693cf227169ef2bfd32b8418e"}], "stats": {"total": 75, "additions": 48, "deletions": 27}, "files": [{"sha": "487736dee30d05877c54cbce7c0c2add654aed50", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5d1adbb629623b10324ba32a0ff2179b9358cab7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1adbb629623b10324ba32a0ff2179b9358cab7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5d1adbb629623b10324ba32a0ff2179b9358cab7", "patch": "@@ -377,7 +377,32 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             err.span_label(pattern.span, msg);\n         } else if let Some(e) = local_visitor.found_method_call {\n             if let ExprKind::MethodCall(segment, ..) = &e.kind {\n-                // Suggest specifiying type params or point out the return type of the call.\n+                // Suggest specifiying type params or point out the return type of the call:\n+                //\n+                // error[E0282]: type annotations needed\n+                //   --> $DIR/type-annotations-needed-expr.rs:2:39\n+                //    |\n+                // LL |     let _ = x.into_iter().sum() as f64;\n+                //    |                           ^^^\n+                //    |                           |\n+                //    |                           cannot infer type for `S`\n+                //    |                           help: consider specifying the type argument in\n+                //    |                           the method call: `sum::<S>`\n+                //    |\n+                //    = note: type must be known at this point\n+                //\n+                // or\n+                //\n+                // error[E0282]: type annotations needed\n+                //   --> $DIR/issue-65611.rs:59:20\n+                //    |\n+                // LL |     let x = buffer.last().unwrap().0.clone();\n+                //    |             -------^^^^--\n+                //    |             |      |\n+                //    |             |      cannot infer type for `T`\n+                //    |             this method call resolves to `std::option::Option<&T>`\n+                //    |\n+                //    = note: type must be known at this point\n                 self.annotate_method_call(segment, e, &mut err);\n             }\n         }\n@@ -422,34 +447,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &segment.args,\n         ) {\n             let borrow = tables.borrow();\n-            let sigs = borrow.node_method_sig();\n-            if let Some(sig) = sigs.get(e.hir_id) {\n-                let mut params = vec![];\n-                for arg in sig.inputs_and_output().skip_binder().iter() {\n-                    if let ty::Param(param) = arg.kind {\n-                        if param.name != kw::SelfUpper {\n-                            let name = param.name.to_string();\n-                            if !params.contains(&name) {\n-                                params.push(name);\n-                            }\n-                        }\n-                    }\n-                }\n-                if !params.is_empty() {\n+            let method_defs = borrow.node_method_def_id();\n+            if let Some(did) = method_defs.get(e.hir_id) {\n+                let generics = self.tcx.generics_of(*did);\n+                if !generics.params.is_empty() {\n                     err.span_suggestion(\n                         segment.ident.span,\n                         &format!(\n                             \"consider specifying the type argument{} in the method call\",\n-                            if params.len() > 1 {\n+                            if generics.params.len() > 1 {\n                                 \"s\"\n                             } else {\n                                 \"\"\n                             },\n                         ),\n-                        format!(\"{}::<{}>\", snippet, params.join(\", \")),\n+                        format!(\"{}::<{}>\", snippet, generics.params.iter()\n+                            .map(|p| p.name.to_string())\n+                            .collect::<Vec<String>>()\n+                            .join(\", \")),\n                         Applicability::HasPlaceholders,\n                     );\n                 } else {\n+                    let sig = self.tcx.fn_sig(*did);\n                     err.span_label(e.span, &format!(\n                         \"this method call resolves to `{:?}`\",\n                         sig.output().skip_binder(),"}, {"sha": "fa4ad021072deed052462a8ff942b10537c67ef7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d1adbb629623b10324ba32a0ff2179b9358cab7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1adbb629623b10324ba32a0ff2179b9358cab7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5d1adbb629623b10324ba32a0ff2179b9358cab7", "patch": "@@ -338,7 +338,7 @@ pub struct TypeckTables<'tcx> {\n     /// typeck::check::fn_ctxt for details.\n     node_types: ItemLocalMap<Ty<'tcx>>,\n \n-    node_method_sig: ItemLocalMap<ty::PolyFnSig<'tcx>>,\n+    node_method_def_id: ItemLocalMap<DefId>,\n \n     /// Stores the type parameters which were substituted to obtain the type\n     /// of this node. This only applies to nodes that refer to entities\n@@ -444,7 +444,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             user_provided_types: Default::default(),\n             user_provided_sigs: Default::default(),\n             node_types: Default::default(),\n-            node_method_sig: Default::default(),\n+            node_method_def_id: Default::default(),\n             node_substs: Default::default(),\n             adjustments: Default::default(),\n             pat_binding_modes: Default::default(),\n@@ -545,17 +545,17 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn node_method_sig(&self) -> LocalTableInContext<'_, ty::PolyFnSig<'tcx>> {\n+    pub fn node_method_def_id(&self) -> LocalTableInContext<'_, DefId> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n-            data: &self.node_method_sig\n+            data: &self.node_method_def_id\n         }\n     }\n \n-    pub fn node_method_sig_mut(&mut self) -> LocalTableInContextMut<'_, ty::PolyFnSig<'tcx>> {\n+    pub fn node_method_def_id_mut(&mut self) -> LocalTableInContextMut<'_, DefId> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n-            data: &mut self.node_method_sig\n+            data: &mut self.node_method_def_id\n         }\n     }\n \n@@ -765,7 +765,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             ref user_provided_types,\n             ref user_provided_sigs,\n             ref node_types,\n-            ref node_method_sig,\n+            ref node_method_def_id,\n             ref node_substs,\n             ref adjustments,\n             ref pat_binding_modes,\n@@ -792,7 +792,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             user_provided_types.hash_stable(hcx, hasher);\n             user_provided_sigs.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n-            node_method_sig.hash_stable(hcx, hasher);\n+            node_method_def_id.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n             adjustments.hash_stable(hcx, hasher);\n             pat_binding_modes.hash_stable(hcx, hasher);"}, {"sha": "999038e7ea79019d7dd1db7656b207c4dc81a33c", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d1adbb629623b10324ba32a0ff2179b9358cab7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1adbb629623b10324ba32a0ff2179b9358cab7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5d1adbb629623b10324ba32a0ff2179b9358cab7", "patch": "@@ -871,7 +871,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let method = match self.lookup_method(rcvr_t, segment, span, expr, rcvr) {\n             Ok(method) => {\n-                let sig = self.tcx.fn_sig(method.def_id);\n                 // We could add a \"consider `foo::<params>`\" suggestion here, but I wasn't able to\n                 // trigger this codepath causing `structuraly_resolved_type` to emit an error.\n \n@@ -890,7 +889,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //    |\n                 //    = note: type must be known at this point\n                 // ```\n-                self.tables.borrow_mut().node_method_sig_mut().insert(expr.hir_id, sig);\n+                self.tables.borrow_mut().node_method_def_id_mut().insert(\n+                    expr.hir_id,\n+                    method.def_id,\n+                );\n \n                 self.write_method_call(expr.hir_id, method);\n                 Ok(method)"}]}