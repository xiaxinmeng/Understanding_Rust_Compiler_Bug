{"sha": "f580412e952957dc1d91884338f2edc7866d1d17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODA0MTJlOTUyOTU3ZGMxZDkxODg0MzM4ZjJlZGM3ODY2ZDFkMTc=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-03-02T16:11:02Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-03-02T16:12:36Z"}, "message": "Drop alloca_zeroed\n\nIts only user was lvalue_scratch_datum which is called with zero=true\nanymore, so it's effectively unused.", "tree": {"sha": "2145b98a51508737f3d119b4fa141738ad941bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2145b98a51508737f3d119b4fa141738ad941bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f580412e952957dc1d91884338f2edc7866d1d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f580412e952957dc1d91884338f2edc7866d1d17", "html_url": "https://github.com/rust-lang/rust/commit/f580412e952957dc1d91884338f2edc7866d1d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f580412e952957dc1d91884338f2edc7866d1d17/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5142056f7f57387dc37361889d13409667b920d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5142056f7f57387dc37361889d13409667b920d", "html_url": "https://github.com/rust-lang/rust/commit/c5142056f7f57387dc37361889d13409667b920d"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "777fd28d31f2a91bc3a69dd432ca93b4d9ed2244", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f580412e952957dc1d91884338f2edc7866d1d17/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f580412e952957dc1d91884338f2edc7866d1d17/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=f580412e952957dc1d91884338f2edc7866d1d17", "patch": "@@ -1000,7 +1000,7 @@ pub fn trans_drop_flag_ptr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>, r: &Repr<'tcx\n             let fcx = bcx.fcx;\n             let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n             let scratch = unpack_datum!(bcx, datum::lvalue_scratch_datum(\n-                bcx, tcx.types.bool, \"drop_flag\", false,\n+                bcx, tcx.types.bool, \"drop_flag\",\n                 cleanup::CustomScope(custom_cleanup_scope), (), |_, bcx, _| bcx\n             ));\n             bcx = fold_variants(bcx, r, val, |variant_cx, st, value| {"}, {"sha": "032620d2861feac1dca55e1f18f4534cbf009630", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f580412e952957dc1d91884338f2edc7866d1d17/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f580412e952957dc1d91884338f2edc7866d1d17/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f580412e952957dc1d91884338f2edc7866d1d17", "patch": "@@ -1203,21 +1203,6 @@ pub fn alloca_no_lifetime(cx: Block, ty: Type, name: &str) -> ValueRef {\n     Alloca(cx, ty, name)\n }\n \n-pub fn alloca_zeroed<'blk, 'tcx>(cx: Block<'blk, 'tcx>, ty: Ty<'tcx>,\n-                                 name: &str) -> ValueRef {\n-    let llty = type_of::type_of(cx.ccx(), ty);\n-    if cx.unreachable.get() {\n-        unsafe {\n-            return llvm::LLVMGetUndef(llty.ptr_to().to_ref());\n-        }\n-    }\n-    let p = alloca_no_lifetime(cx, llty, name);\n-    let b = cx.fcx.ccx.builder();\n-    b.position_before(cx.fcx.alloca_insert_pt.get().unwrap());\n-    memzero(&b, p, ty);\n-    p\n-}\n-\n // Creates the alloca slot which holds the pointer to the slot for the final return value\n pub fn make_return_slot_pointer<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n                                           output_type: Ty<'tcx>) -> ValueRef {\n@@ -1547,7 +1532,6 @@ fn create_datums_for_fn_args_under_call_abi<'blk, 'tcx>(\n                                   datum::lvalue_scratch_datum(bcx,\n                                                               arg_ty,\n                                                               \"tupled_args\",\n-                                                              false,\n                                                               tuple_args_scope_id,\n                                                               (),\n                                                               |(),"}, {"sha": "e181df545e6fc06aa63f4b0e2a39f2ea835d9dea", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f580412e952957dc1d91884338f2edc7866d1d17/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f580412e952957dc1d91884338f2edc7866d1d17/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=f580412e952957dc1d91884338f2edc7866d1d17", "patch": "@@ -195,24 +195,18 @@ pub fn immediate_rvalue_bcx<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n /// Allocates temporary space on the stack using alloca() and returns a by-ref Datum pointing to\n /// it. The memory will be dropped upon exit from `scope`. The callback `populate` should\n-/// initialize the memory. If `zero` is true, the space will be zeroed when it is allocated; this\n-/// is not necessary unless `bcx` does not dominate the end of `scope`.\n+/// initialize the memory.\n pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n                                               ty: Ty<'tcx>,\n                                               name: &str,\n-                                              zero: bool,\n                                               scope: cleanup::ScopeId,\n                                               arg: A,\n                                               populate: F)\n                                               -> DatumBlock<'blk, 'tcx, Lvalue> where\n     F: FnOnce(A, Block<'blk, 'tcx>, ValueRef) -> Block<'blk, 'tcx>,\n {\n-    let scratch = if zero {\n-        alloca_zeroed(bcx, ty, name)\n-    } else {\n-        let llty = type_of::type_of(bcx.ccx(), ty);\n-        alloca(bcx, llty, name)\n-    };\n+    let llty = type_of::type_of(bcx.ccx(), ty);\n+    let scratch = alloca(bcx, llty, name);\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n     let bcx = populate(arg, bcx, scratch);\n@@ -383,7 +377,7 @@ impl<'tcx> Datum<'tcx, Rvalue> {\n \n             ByValue => {\n                 lvalue_scratch_datum(\n-                    bcx, self.ty, name, false, scope, self,\n+                    bcx, self.ty, name, scope, self,\n                     |this, bcx, llval| this.store_to(bcx, llval))\n             }\n         }"}]}