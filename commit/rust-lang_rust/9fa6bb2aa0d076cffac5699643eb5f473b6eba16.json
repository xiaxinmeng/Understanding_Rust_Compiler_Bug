{"sha": "9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "node_id": "C_kwDOAAsO6NoAKDlmYTZiYjJhYTBkMDc2Y2ZmYWM1Njk5NjQzZWI1ZjQ3M2I2ZWJhMTY", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-10T15:51:28Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-13T10:24:50Z"}, "message": "Make atomic structural impls generic over Interner", "tree": {"sha": "fd9258b5bdfe9c1342354f871d43a8741ba0e68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9258b5bdfe9c1342354f871d43a8741ba0e68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPqD/IRHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTIvgA//egy3zH2FWPqa3ABMsvAhsAcnuxRzj9cb\n9HrZCSSv7o3WP7NYxBH1Ladq7E1GYSpZPLj+1EGKu08kahH+OleG9GKVJ+R1XjBy\nJ1G65C5PpcI7LThTnleJ2hrOuPqMX99/vnPTB79u58b+BvnPXeEg3HD52s5v5ekm\nqI7m6nYYNp5flCnB5WdmWglpAu4eOijBYlKfQ/Gba3BKhjLqvehWCCSvWyLHSfDM\nCcmdQAPxOgkyWn1Rw6Dn95XHWT2PmxsD+DX3Xn9I3AzrRqJlThuixGJbI2EJGSIj\nnkpoETBzE0CsnP403voWWcOZ+8x+DKtM5p5CnkWH+5EmFkP/mlGAKsiGyYgU8s6v\n0uKcofNX+ou7wHbqpA2yI9elFyoU27PNFZ47mEAKd/aeWry08F/8IAYgsSBAc1mX\n7Qa0hFFf0mLEdA33jVzswB8tadH6cfcIwwGzC7SRNoNHLoJdyyp0IA8jbcpF8GDN\nuq1vo/82b55czsZN4XYg6i2rCEAdT2/nFRD/7ODRs4G4QEwYPgQe9WDZ19Qkc5za\nxcz59AbGWDPAsqWE5x/RISuMWa/1NnicU31gOyWaAcGyh/8Uky6PG5Ldt/wDUeiT\nvH/MwQWtxqYgpdby8SEFBzm9WQQ3/WzBRnNo54RzQmXq+RGCvwkP79FkzseOx5BT\nqKZUIUKlJjk=\n=Nxw7\n-----END PGP SIGNATURE-----", "payload": "tree fd9258b5bdfe9c1342354f871d43a8741ba0e68d\nparent 9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e\nauthor Alan Egerton <eggyal@gmail.com> 1676044288 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676283890 +0000\n\nMake atomic structural impls generic over Interner\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "html_url": "https://github.com/rust-lang/rust/commit/9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "html_url": "https://github.com/rust-lang/rust/commit/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e"}], "stats": {"total": 136, "additions": 82, "deletions": 54}, "files": [{"sha": "e096be1667797470654f433c2c67ebb07449df62", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "patch": "@@ -100,11 +100,35 @@ macro_rules! TrivialTypeTraversalImpls {\n     };\n \n     ($($ty:ty,)+) => {\n-        TrivialTypeTraversalImpls! {\n-            for <'tcx> {\n-                $($ty,)+\n+        $(\n+            impl<I: $crate::ty::Interner> $crate::ty::fold::ir::TypeFoldable<I> for $ty {\n+                fn try_fold_with<F: $crate::ty::fold::ir::FallibleTypeFolder<I>>(\n+                    self,\n+                    _: &mut F,\n+                ) -> ::std::result::Result<Self, F::Error> {\n+                    Ok(self)\n+                }\n+\n+                #[inline]\n+                fn fold_with<F: $crate::ty::fold::ir::TypeFolder<I>>(\n+                    self,\n+                    _: &mut F,\n+                ) -> Self {\n+                    self\n+                }\n             }\n-        }\n+\n+            impl<I: $crate::ty::Interner> $crate::ty::visit::ir::TypeVisitable<I> for $ty {\n+                #[inline]\n+                fn visit_with<F: $crate::ty::visit::ir::TypeVisitor<I>>(\n+                    &self,\n+                    _: &mut F)\n+                    -> ::std::ops::ControlFlow<F::BreakTy>\n+                {\n+                    ::std::ops::ControlFlow::Continue(())\n+                }\n+            }\n+        )+\n     };\n }\n \n@@ -121,10 +145,10 @@ macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::ir::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $s\n+        impl<$($p),*> $crate::ty::fold::ir::TypeFoldable<$tcx> for $s\n             $(where $($wc)*)*\n         {\n-            fn try_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n+            fn try_fold_with<V: $crate::ty::fold::ir::FallibleTypeFolder<$tcx>>(\n                 self,\n                 folder: &mut V,\n             ) -> ::std::result::Result<Self, V::Error> {\n@@ -136,10 +160,10 @@ macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::visit::ir::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $s\n+        impl<$($p),*> $crate::ty::visit::ir::TypeVisitable<$tcx> for $s\n             $(where $($wc)*)*\n         {\n-            fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>(\n+            fn visit_with<V: $crate::ty::visit::ir::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n             ) -> ::std::ops::ControlFlow<V::BreakTy> {"}, {"sha": "6f42b69633c84b54767cf3155e49be000b8aac98", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "patch": "@@ -705,7 +705,11 @@ pub enum BindingForm<'tcx> {\n     RefForGuard,\n }\n \n-TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n+TrivialTypeTraversalAndLiftImpls! {\n+    for<'tcx> {\n+        BindingForm<'tcx>,\n+    }\n+}\n \n mod binding_form_impl {\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "351753911e5870c0b770052fe5e7029a27546304", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6bb2aa0d076cffac5699643eb5f473b6eba16/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9fa6bb2aa0d076cffac5699643eb5f473b6eba16", "patch": "@@ -7,7 +7,7 @@ use crate::mir::{Field, ProjectionKind};\n use crate::ty::fold::{ir::TypeSuperFoldable, FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{ir::TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use crate::ty::{self, ir, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n+use crate::ty::{self, ir, AliasTy, InferConst, Interner, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -375,28 +375,28 @@ impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for (T, U) {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n+impl<I: Interner, T: ir::TypeFoldable<I>, U: ir::TypeFoldable<I>> ir::TypeFoldable<I> for (T, U) {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(\n         self,\n         folder: &mut F,\n     ) -> Result<(T, U), F::Error> {\n         Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>>\n+impl<I: Interner, T: ir::TypeVisitable<I>, U: ir::TypeVisitable<I>> ir::TypeVisitable<I>\n     for (T, U)\n {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n     }\n }\n \n-impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n-    ir::TypeFoldable<TyCtxt<'tcx>> for (A, B, C)\n+impl<I: Interner, A: ir::TypeFoldable<I>, B: ir::TypeFoldable<I>, C: ir::TypeFoldable<I>>\n+    ir::TypeFoldable<I> for (A, B, C)\n {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(\n         self,\n         folder: &mut F,\n     ) -> Result<(A, B, C), F::Error> {\n@@ -408,44 +408,44 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n     }\n }\n \n-impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n-    ir::TypeVisitable<TyCtxt<'tcx>> for (A, B, C)\n+impl<I: Interner, A: ir::TypeVisitable<I>, B: ir::TypeVisitable<I>, C: ir::TypeVisitable<I>>\n+    ir::TypeVisitable<I> for (A, B, C)\n {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n         self.2.visit_with(visitor)\n     }\n }\n \n EnumTypeTraversalImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n+    impl<I, T> TypeFoldable<I> for Option<T> {\n         (Some)(a),\n         (None),\n-    } where T: TypeFoldable<'tcx>\n+    } where I: Interner, T: ir::TypeFoldable<I>\n }\n EnumTypeTraversalImpl! {\n-    impl<'tcx, T> TypeVisitable<'tcx> for Option<T> {\n+    impl<I, T> TypeVisitable<I> for Option<T> {\n         (Some)(a),\n         (None),\n-    } where T: TypeVisitable<'tcx>\n+    } where I: Interner, T: ir::TypeVisitable<I>\n }\n \n EnumTypeTraversalImpl! {\n-    impl<'tcx, T, E> TypeFoldable<'tcx> for Result<T, E> {\n+    impl<I, T, E> TypeFoldable<I> for Result<T, E> {\n         (Ok)(a),\n         (Err)(a),\n-    } where T: TypeFoldable<'tcx>, E: TypeFoldable<'tcx>,\n+    } where I: Interner, T: ir::TypeFoldable<I>, E: ir::TypeFoldable<I>,\n }\n EnumTypeTraversalImpl! {\n-    impl<'tcx, T, E> TypeVisitable<'tcx> for Result<T, E> {\n+    impl<I, T, E> TypeVisitable<I> for Result<T, E> {\n         (Ok)(a),\n         (Err)(a),\n-    } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n+    } where I: Interner, T: ir::TypeVisitable<I>, E: ir::TypeVisitable<I>,\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Rc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n+impl<I: Interner, T: ir::TypeFoldable<I>> ir::TypeFoldable<I> for Rc<T> {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(\n         mut self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -484,14 +484,14 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Rc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Rc<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>> ir::TypeVisitable<I> for Rc<T> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Arc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n+impl<I: Interner, T: ir::TypeFoldable<I>> ir::TypeFoldable<I> for Arc<T> {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(\n         mut self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -530,50 +530,50 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Arc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Arc<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>> ir::TypeVisitable<I> for Arc<T> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Box<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<I: Interner, T: ir::TypeFoldable<I>> ir::TypeFoldable<I> for Box<T> {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Box<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>> ir::TypeVisitable<I> for Box<T> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Vec<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<I: Interner, T: ir::TypeFoldable<I>> ir::TypeFoldable<I> for Vec<T> {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Vec<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>> ir::TypeVisitable<I> for Vec<T> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &[T] {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>> ir::TypeVisitable<I> for &[T] {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Box<[T]> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<I: Interner, T: ir::TypeFoldable<I>> ir::TypeFoldable<I> for Box<[T]> {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Box<[T]> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>> ir::TypeVisitable<I> for Box<[T]> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -790,14 +790,14 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> ir::TypeFoldable<TyCtxt<'tcx>> for IndexVec<I, T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+impl<I: Interner, T: ir::TypeFoldable<I>, Ix: Idx> ir::TypeFoldable<I> for IndexVec<Ix, T> {\n+    fn try_fold_with<F: ir::FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> ir::TypeVisitable<TyCtxt<'tcx>> for IndexVec<I, T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+impl<I: Interner, T: ir::TypeVisitable<I>, Ix: Idx> ir::TypeVisitable<I> for IndexVec<Ix, T> {\n+    fn visit_with<V: ir::TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }"}]}