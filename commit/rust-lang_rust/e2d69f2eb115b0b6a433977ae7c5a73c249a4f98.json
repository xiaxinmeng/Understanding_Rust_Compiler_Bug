{"sha": "e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDY5ZjJlYjExNWIwYjZhNDMzOTc3YWU3YzVhNzNjMjQ5YTRmOTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-21T17:35:50Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Make errors more concise and helpful\n\nBefore:\n```\n   = note: this link partially resolves to the struct `S`\n   = note: no `fmt` in `S`\n```\n\nAfter:\n```\n   = note: the struct `S` has no field or associated item named `fmt`\n```", "tree": {"sha": "b2f957b6043e7c8352c5c393e1b01e53d5213da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f957b6043e7c8352c5c393e1b01e53d5213da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "html_url": "https://github.com/rust-lang/rust/commit/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b8d0befd67ad2472052e3f84cf310b7866b829f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8d0befd67ad2472052e3f84cf310b7866b829f", "html_url": "https://github.com/rust-lang/rust/commit/7b8d0befd67ad2472052e3f84cf310b7866b829f"}], "stats": {"total": 146, "additions": 81, "deletions": 65}, "files": [{"sha": "c69850f9d9743af17fd2ed83fb488f025a1cdf4a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 60, "deletions": 35, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -1406,11 +1406,18 @@ fn resolution_failure(\n             let in_scope = kinds.iter().any(|kind| kind.res().is_some());\n             let mut reported_not_in_scope = false;\n             let item = |res: Res| {\n-                if let Some(id) = res.opt_def_id() {\n-                    (format!(\"the {} `{}`\", res.descr(), cx.tcx.item_name(id).to_string()), \",\")\n-                } else {\n-                    (format!(\"{} {}\", res.article(), res.descr()), \"\")\n-                }\n+                format!(\"the {} `{}`\", res.descr(), cx.tcx.item_name(res.def_id()).to_string())\n+            };\n+            let assoc_item_not_allowed = |res: Res, diag: &mut DiagnosticBuilder<'_>| {\n+                let def_id = res.def_id();\n+                let name = cx.tcx.item_name(def_id);\n+                let note = format!(\n+                    \"`{}` is {} {}, not a module or type, and cannot have associated items\",\n+                    name,\n+                    res.article(),\n+                    res.descr()\n+                );\n+                diag.note(&note);\n             };\n             for failure in kinds {\n                 match failure {\n@@ -1425,11 +1432,9 @@ fn resolution_failure(\n                     }\n                     ResolutionFailure::Dummy => continue,\n                     ResolutionFailure::WrongNamespace(res, expected_ns) => {\n-                        let (item, comma) = item(res);\n                         let note = format!(\n-                            \"this link resolves to {}{} which is not in the {} namespace\",\n-                            item,\n-                            comma,\n+                            \"this link resolves to {}, which is not in the {} namespace\",\n+                            item(res),\n                             expected_ns.descr()\n                         );\n                         diag.note(&note);\n@@ -1450,10 +1455,9 @@ fn resolution_failure(\n                         panic!(\"all intra doc links should have a parent item\")\n                     }\n                     ResolutionFailure::NoPrimitiveImpl(res, _) => {\n-                        let (item, comma) = item(res);\n                         let note = format!(\n-                            \"this link partially resolves to {}{} which does not have any associated items\",\n-                            item, comma,\n+                            \"this link partially resolves to {}, which does not have any associated items\",\n+                            item(res),\n                         );\n                         diag.note(&note);\n                     }\n@@ -1465,41 +1469,62 @@ fn resolution_failure(\n                         diag.note(&note);\n                     }\n                     ResolutionFailure::NoAssocItem(res, assoc_item) => {\n-                        let (item, _) = item(res);\n-                        diag.note(&format!(\"this link partially resolves to {}\", item));\n-                        // FIXME: when are items neither a primitive nor a Def?\n-                        if let Res::Def(_, def_id) = res {\n-                            let name = cx.tcx.item_name(def_id);\n-                            let note = format!(\"no `{}` in `{}`\", assoc_item, name,);\n-                            diag.note(&note);\n-                        }\n+                        use DefKind::*;\n+\n+                        let (kind, def_id) = match res {\n+                            Res::Def(kind, def_id) => (kind, def_id),\n+                            _ => unreachable!(\n+                                \"primitives are covered above and other `Res` variants aren't possible at module scope\"\n+                            ),\n+                        };\n+                        let name = cx.tcx.item_name(def_id);\n+                        let path_description = match kind {\n+                            Mod | ForeignMod => \"inner item\",\n+                            Struct => \"field or associated item\",\n+                            Enum | Union => \"variant or associated item\",\n+                            Variant\n+                            | Field\n+                            | Closure\n+                            | Generator\n+                            | AssocTy\n+                            | AssocConst\n+                            | AssocFn\n+                            | Fn\n+                            | Macro(_)\n+                            | Const\n+                            | ConstParam\n+                            | ExternCrate\n+                            | Use\n+                            | LifetimeParam\n+                            | Ctor(_, _)\n+                            | AnonConst => return assoc_item_not_allowed(res, diag),\n+                            Trait | TyAlias | ForeignTy | OpaqueTy | TraitAlias | TyParam\n+                            | Static => \"associated item\",\n+                            Impl | GlobalAsm => unreachable!(\"not a path\"),\n+                        };\n+                        let note = format!(\n+                            \"the {} `{}` has no {} named `{}`\",\n+                            res.descr(),\n+                            name,\n+                            path_description,\n+                            assoc_item\n+                        );\n+                        diag.note(&note);\n                     }\n                     ResolutionFailure::CannotHaveAssociatedItems(res, _) => {\n-                        let (item, _) = item(res);\n-                        diag.note(&format!(\"this link partially resolves to {}\", item));\n-                        if let Res::Def(kind, def_id) = res {\n-                            let name = cx.tcx.item_name(def_id);\n-                            let note = format!(\n-                                \"`{}` is {} {}, not a module or type, and cannot have associated items\",\n-                                name,\n-                                kind.article(),\n-                                kind.descr(def_id)\n-                            );\n-                            diag.note(&note);\n-                        }\n+                        assoc_item_not_allowed(res, diag)\n                     }\n                     // TODO: is there ever a case where this happens?\n                     ResolutionFailure::NotAnEnum(res) => {\n-                        let (item, comma) = item(res);\n                         let note =\n-                            format!(\"this link resolves to {}{} which is not an enum\", item, comma);\n+                            format!(\"this link resolves to {}, which is not an enum\", item(res));\n                         diag.note(&note);\n                         diag.note(\"if this were an enum, it might have a variant which resolved\");\n                     }\n                     ResolutionFailure::NotAVariant(res, variant) => {\n                         let note = format!(\n                             \"this link partially resolves to {}, but there is no variant named {}\",\n-                            item(res).0,\n+                            item(res),\n                             variant\n                         );\n                         diag.note(&note);"}, {"sha": "8acfcca2139e38c71ffed5041b8b7fba1976da91", "filename": "src/test/rustdoc-ui/assoc-item-not-in-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -2,14 +2,14 @@ error: unresolved link to `S::fmt`\n   --> $DIR/assoc-item-not-in-scope.rs:4:14\n    |\n LL | /// Link to [`S::fmt`]\n-   |              ^^^^^^^^ unresolved link\n+   |              ^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/assoc-item-not-in-scope.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+   = note: the struct `S` has no field or associated item named `fmt`\n \n error: aborting due to previous error\n "}, {"sha": "5379a91883753aaec57d5672b4ee2f9bcb24f20e", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -9,8 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this link partially resolves to the type alias `TypeAlias`\n-   = note: no `hoge` in `TypeAlias`\n+   = note: the type alias `TypeAlias` has no associated item named `hoge`\n \n error: aborting due to previous error\n "}, {"sha": "ecf2b05e2818b13a50567b94bd92de372fa81e5a", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -12,23 +12,19 @@\n \n /// [f::A]\n //~^ ERROR unresolved link\n-//~| NOTE this link partially resolves\n //~| NOTE `f` is a function, not a module\n \n /// [S::A]\n //~^ ERROR unresolved link\n-//~| NOTE this link partially resolves\n-//~| NOTE no `A` in `S`\n+//~| NOTE struct `S` has no field or associated item\n \n /// [S::fmt]\n //~^ ERROR unresolved link\n-//~| NOTE this link partially resolves\n-//~| NOTE no `fmt` in `S`\n+//~| NOTE struct `S` has no field or associated item\n \n /// [E::D]\n //~^ ERROR unresolved link\n-//~| NOTE this link partially resolves\n-//~| NOTE no `D` in `E`\n+//~| NOTE enum `E` has no variant or associated item\n \n /// [u8::not_found]\n //~^ ERROR unresolved link"}, {"sha": "ba091ff854ce66d9ffdf3f629757aa143db8887a", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -13,67 +13,63 @@ LL | #![deny(broken_intra_doc_links)]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `f::A`\n-  --> $DIR/intra-link-errors.rs:14:6\n+  --> $DIR/intra-link-errors.rs:13:6\n    |\n LL | /// [f::A]\n    |      ^^^^\n    |\n-   = note: this link partially resolves to the function `f`\n    = note: `f` is a function, not a module or type, and cannot have associated items\n \n error: unresolved link to `S::A`\n-  --> $DIR/intra-link-errors.rs:19:6\n+  --> $DIR/intra-link-errors.rs:17:6\n    |\n LL | /// [S::A]\n    |      ^^^^\n    |\n-   = note: this link partially resolves to the struct `S`\n-   = note: no `A` in `S`\n+   = note: the struct `S` has no field or associated item named `A`\n \n error: unresolved link to `S::fmt`\n-  --> $DIR/intra-link-errors.rs:24:6\n+  --> $DIR/intra-link-errors.rs:21:6\n    |\n LL | /// [S::fmt]\n    |      ^^^^^^\n    |\n-   = note: this link partially resolves to the struct `S`\n-   = note: no `fmt` in `S`\n+   = note: the struct `S` has no field or associated item named `fmt`\n \n error: unresolved link to `E::D`\n-  --> $DIR/intra-link-errors.rs:29:6\n+  --> $DIR/intra-link-errors.rs:25:6\n    |\n LL | /// [E::D]\n    |      ^^^^\n    |\n-   = note: this link partially resolves to the enum `E`\n-   = note: no `D` in `E`\n+   = note: the enum `E` has no variant or associated item named `D`\n \n error: unresolved link to `u8::not_found`\n-  --> $DIR/intra-link-errors.rs:34:6\n+  --> $DIR/intra-link-errors.rs:29:6\n    |\n LL | /// [u8::not_found]\n    |      ^^^^^^^^^^^^^\n    |\n    = note: the builtin type `u8` does not have an associated item named `not_found`\n \n error: unresolved link to `S`\n-  --> $DIR/intra-link-errors.rs:38:6\n+  --> $DIR/intra-link-errors.rs:33:6\n    |\n LL | /// [S!]\n    |      ^^ help: to link to the struct, use its disambiguator: `struct@S`\n    |\n    = note: this link resolves to the struct `S`, which is not in the macro namespace\n \n error: unresolved link to `T::g`\n-  --> $DIR/intra-link-errors.rs:56:6\n+  --> $DIR/intra-link-errors.rs:51:6\n    |\n LL | /// [type@T::g]\n    |      ^^^^^^^^^ help: to link to the associated function, use its disambiguator: `T::g()`\n    |\n    = note: this link resolves to the associated function `g`, which is not in the type namespace\n \n error: unresolved link to `T::h`\n-  --> $DIR/intra-link-errors.rs:61:6\n+  --> $DIR/intra-link-errors.rs:56:6\n    |\n LL | /// [T::h!]\n    |      ^^^^^\n@@ -82,7 +78,7 @@ LL | /// [T::h!]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `S::h`\n-  --> $DIR/intra-link-errors.rs:48:6\n+  --> $DIR/intra-link-errors.rs:43:6\n    |\n LL | /// [type@S::h]\n    |      ^^^^^^^^^ help: to link to the associated function, use its disambiguator: `S::h()`"}, {"sha": "988a65c7a591ccf42335cc8ee6bcc519f8c1a012", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -5,8 +5,7 @@ LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                       ^^^^^^^^\n    |\n    = note: `#[warn(broken_intra_doc_links)]` on by default\n-   = note: this link partially resolves to the struct `Foo`\n-   = note: no `baz` in `Foo`\n+   = note: the struct `Foo` has no field or associated item named `baz`\n \n warning: unresolved link to `Bar::foo`\n   --> $DIR/intra-links-warning.rs:3:35"}, {"sha": "10fcebb27fe0cc92d62b54f33f4bbfca91febd03", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d69f2eb115b0b6a433977ae7c5a73c249a4f98/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=e2d69f2eb115b0b6a433977ae7c5a73c249a4f98", "patch": "@@ -32,14 +32,15 @@ error: unresolved link to `error`\n   --> $DIR/lint-group.rs:9:29\n    |\n LL | /// what up, let's make an [error]\n-   |                             ^^^^^ unresolved link\n+   |                             ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: `#[deny(broken_intra_doc_links)]` implied by `#[deny(rustdoc)]`\n+   = note: no item named `error` is in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to 3 previous errors"}]}