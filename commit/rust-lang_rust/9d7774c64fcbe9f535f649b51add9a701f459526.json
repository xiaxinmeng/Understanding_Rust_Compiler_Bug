{"sha": "9d7774c64fcbe9f535f649b51add9a701f459526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNzc3NGM2NGZjYmU5ZjUzNWY2NDliNTFhZGQ5YTcwMWY0NTk1MjY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-24T02:36:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-24T02:45:18Z"}, "message": "review comments: remove unnecessary `&str` to `String` conversions", "tree": {"sha": "dbe8a6c9aacd51fd1ce2076f9c0d93f29bd5d5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbe8a6c9aacd51fd1ce2076f9c0d93f29bd5d5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7774c64fcbe9f535f649b51add9a701f459526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7774c64fcbe9f535f649b51add9a701f459526", "html_url": "https://github.com/rust-lang/rust/commit/9d7774c64fcbe9f535f649b51add9a701f459526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7774c64fcbe9f535f649b51add9a701f459526/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92355c1db65035e508020e746c141c79dfdbd99", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92355c1db65035e508020e746c141c79dfdbd99", "html_url": "https://github.com/rust-lang/rust/commit/d92355c1db65035e508020e746c141c79dfdbd99"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "f8f69936021f320ec7b8d201b4c088175d89fd05", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9d7774c64fcbe9f535f649b51add9a701f459526/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7774c64fcbe9f535f649b51add9a701f459526/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9d7774c64fcbe9f535f649b51add9a701f459526", "patch": "@@ -898,8 +898,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n         // ^^^^^^\n-        values.0.push(sig1.unsafety.prefix_str().to_string(), sig1.unsafety != sig2.unsafety);\n-        values.1.push(sig2.unsafety.prefix_str().to_string(), sig1.unsafety != sig2.unsafety);\n+        values.0.push(sig1.unsafety.prefix_str(), sig1.unsafety != sig2.unsafety);\n+        values.1.push(sig2.unsafety.prefix_str(), sig1.unsafety != sig2.unsafety);\n \n         // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n         //        ^^^^^^^^^^\n@@ -918,8 +918,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n         //                           ^^^\n-        values.0.push_normal(\"fn(\".to_string());\n-        values.1.push_normal(\"fn(\".to_string());\n+        values.0.push_normal(\"fn(\");\n+        values.1.push_normal(\"fn(\");\n \n         // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n         //                              ^^^^^\n@@ -936,46 +936,46 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             for (i, l) in sig1.inputs().iter().enumerate() {\n                 values.0.push_highlighted(l.to_string());\n                 if i != len1 - 1 {\n-                    values.0.push_highlighted(\", \".to_string());\n+                    values.0.push_highlighted(\", \");\n                 }\n             }\n             for (i, r) in sig2.inputs().iter().enumerate() {\n                 values.1.push_highlighted(r.to_string());\n                 if i != len2 - 1 {\n-                    values.1.push_highlighted(\", \".to_string());\n+                    values.1.push_highlighted(\", \");\n                 }\n             }\n         }\n \n         if sig1.c_variadic {\n             if len1 > 0 {\n-                values.0.push_normal(\", \".to_string());\n+                values.0.push_normal(\", \");\n             }\n-            values.0.push(\"...\".to_string(), !sig2.c_variadic);\n+            values.0.push(\"...\", !sig2.c_variadic);\n         }\n         if sig2.c_variadic {\n             if len2 > 0 {\n-                values.1.push_normal(\", \".to_string());\n+                values.1.push_normal(\", \");\n             }\n-            values.1.push(\"...\".to_string(), !sig1.c_variadic);\n+            values.1.push(\"...\", !sig1.c_variadic);\n         }\n \n         // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n         //                                   ^\n-        values.0.push_normal(\")\".to_string());\n-        values.1.push_normal(\")\".to_string());\n+        values.0.push_normal(\")\");\n+        values.1.push_normal(\")\");\n \n         // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n         //                                     ^^^^^^^^\n         let output1 = sig1.output();\n         let output2 = sig2.output();\n         let (x1, x2) = self.cmp(output1, output2);\n         if !output1.is_unit() {\n-            values.0.push_normal(\" -> \".to_string());\n+            values.0.push_normal(\" -> \");\n             (values.0).0.extend(x1.0);\n         }\n         if !output2.is_unit() {\n-            values.1.push_normal(\" -> \".to_string());\n+            values.1.push_normal(\" -> \");\n             (values.1).0.extend(x2.0);\n         }\n         values\n@@ -1240,8 +1240,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // When encountering tuples of the same size, highlight only the differing types\n             (&ty::Tuple(substs1), &ty::Tuple(substs2)) if substs1.len() == substs2.len() => {\n                 let mut values = (\n-                    DiagnosticStyledString::normal(\"(\".to_string()),\n-                    DiagnosticStyledString::normal(\"(\".to_string()),\n+                    DiagnosticStyledString::normal(\"(\"),\n+                    DiagnosticStyledString::normal(\"(\"),\n                 );\n                 let len = substs1.len();\n                 for (i, (left, right)) in substs1.types().zip(substs2.types()).enumerate() {\n@@ -1251,11 +1251,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.push_comma(&mut values.0, &mut values.1, len, i);\n                 }\n                 if len == 1 { // Keep the output for single element tuples as `(ty,)`.\n-                    values.0.push_normal(\",\".to_string());\n-                    values.1.push_normal(\",\".to_string());\n+                    values.0.push_normal(\",\");\n+                    values.1.push_normal(\",\");\n                 }\n-                values.0.push_normal(\")\".to_string());\n-                values.1.push_normal(\")\".to_string());\n+                values.0.push_normal(\")\");\n+                values.1.push_normal(\")\");\n                 values\n             }\n "}, {"sha": "abec979054e16a8b13efb312119953933bd2fcf5", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7774c64fcbe9f535f649b51add9a701f459526/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7774c64fcbe9f535f649b51add9a701f459526/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=9d7774c64fcbe9f535f649b51add9a701f459526", "patch": "@@ -54,9 +54,9 @@ impl DiagnosticStyledString {\n     }\n     pub fn push<S: Into<String>>(&mut self, t: S, highlight: bool) {\n         if highlight {\n-            self.0.push(StringPart::Highlighted(t.into()));\n+            self.push_highlighted(t);\n         } else {\n-            self.0.push(StringPart::Normal(t.into()));\n+            self.push_normal(t);\n         }\n     }\n     pub fn normal<S: Into<String>>(t: S) -> DiagnosticStyledString {"}]}