{"sha": "faa0b5aa618b19d365230329746a11ab17da7847", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYTBiNWFhNjE4YjE5ZDM2NTIzMDMyOTc0NmExMWFiMTdkYTc4NDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-14T21:51:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-14T21:51:34Z"}, "message": "auto merge of #11538 : eddyb/rust/llvm-attributes, r=alexcrichton", "tree": {"sha": "9c93aca20b18c39a9db1545c1547c58bf8b1989f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c93aca20b18c39a9db1545c1547c58bf8b1989f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa0b5aa618b19d365230329746a11ab17da7847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa0b5aa618b19d365230329746a11ab17da7847", "html_url": "https://github.com/rust-lang/rust/commit/faa0b5aa618b19d365230329746a11ab17da7847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa0b5aa618b19d365230329746a11ab17da7847/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9075025c7b48ffc028b3bddbb983ceac98ce9636", "url": "https://api.github.com/repos/rust-lang/rust/commits/9075025c7b48ffc028b3bddbb983ceac98ce9636", "html_url": "https://github.com/rust-lang/rust/commit/9075025c7b48ffc028b3bddbb983ceac98ce9636"}, {"sha": "8e2027a08219f28272c3e66dc6d2fb26dbdc5587", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2027a08219f28272c3e66dc6d2fb26dbdc5587", "html_url": "https://github.com/rust-lang/rust/commit/8e2027a08219f28272c3e66dc6d2fb26dbdc5587"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "a65712bd30a751cb4914d08cebc449fcddfadcd5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=faa0b5aa618b19d365230329746a11ab17da7847", "patch": "@@ -177,32 +177,57 @@ impl<'a> Drop for StatRecorder<'a> {\n }\n \n // only use this for foreign function ABIs and glue, use `decl_rust_fn` for Rust functions\n-pub fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv, ty: Type) -> ValueRef {\n+fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv,\n+           ty: Type, output: ty::t) -> ValueRef {\n     let llfn: ValueRef = name.with_c_str(|buf| {\n         unsafe {\n             llvm::LLVMGetOrInsertFunction(llmod, buf, ty.to_ref())\n         }\n     });\n \n+    match ty::get(output).sty {\n+        // functions returning bottom may unwind, but can never return normally\n+        ty::ty_bot => {\n+            unsafe {\n+                llvm::LLVMAddFunctionAttr(llfn, lib::llvm::NoReturnAttribute as c_uint)\n+            }\n+        }\n+        // `~` pointer return values never alias because ownership is transferred\n+        // FIXME #6750 ~Trait cannot be directly marked as\n+        // noalias because the actual object pointer is nested.\n+        ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n+        ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) => {\n+            unsafe {\n+                llvm::LLVMAddReturnAttribute(llfn, lib::llvm::NoAliasAttribute as c_uint);\n+            }\n+        }\n+        _ => {}\n+    }\n+\n     lib::llvm::SetFunctionCallConv(llfn, cc);\n     // Function addresses in Rust are never significant, allowing functions to be merged.\n     lib::llvm::SetUnnamedAddr(llfn, true);\n-    return llfn;\n+\n+    llfn\n }\n \n // only use this for foreign function ABIs and glue, use `decl_rust_fn` for Rust functions\n-pub fn decl_cdecl_fn(llmod: ModuleRef, name: &str, ty: Type) -> ValueRef {\n-    return decl_fn(llmod, name, lib::llvm::CCallConv, ty);\n+pub fn decl_cdecl_fn(llmod: ModuleRef,\n+                     name: &str,\n+                     ty: Type,\n+                     output: ty::t) -> ValueRef {\n+    decl_fn(llmod, name, lib::llvm::CCallConv, ty, output)\n }\n \n // only use this for foreign function ABIs and glue, use `get_extern_rust_fn` for Rust functions\n-pub fn get_extern_fn(externs: &mut ExternMap, llmod: ModuleRef, name: &str,\n-                     cc: lib::llvm::CallConv, ty: Type) -> ValueRef {\n+pub fn get_extern_fn(externs: &mut ExternMap, llmod: ModuleRef,\n+                     name: &str, cc: lib::llvm::CallConv,\n+                     ty: Type, output: ty::t) -> ValueRef {\n     match externs.find_equiv(&name) {\n         Some(n) => return *n,\n-        None => ()\n+        None => {}\n     }\n-    let f = decl_fn(llmod, name, cc, ty);\n+    let f = decl_fn(llmod, name, cc, ty, output);\n     externs.insert(name.to_owned(), f);\n     f\n }\n@@ -233,24 +258,7 @@ fn decl_rust_fn(ccx: &CrateContext,\n                 output: ty::t,\n                 name: &str) -> ValueRef {\n     let llfty = type_of_rust_fn(ccx, self_ty, inputs, output);\n-    let llfn = decl_cdecl_fn(ccx.llmod, name, llfty);\n-\n-    match ty::get(output).sty {\n-        // functions returning bottom may unwind, but can never return normally\n-        ty::ty_bot => {\n-            unsafe {\n-                llvm::LLVMAddFunctionAttr(llfn, lib::llvm::NoReturnAttribute as c_uint)\n-            }\n-        }\n-        // `~` pointer return values never alias because ownership is transferred\n-        ty::ty_uniq(..) |\n-        ty::ty_vec(_, ty::vstore_uniq) => {\n-            unsafe {\n-                llvm::LLVMAddReturnAttribute(llfn, lib::llvm::NoAliasAttribute as c_uint);\n-            }\n-        }\n-        _ => ()\n-    }\n+    let llfn = decl_cdecl_fn(ccx.llmod, name, llfty, output);\n \n     let uses_outptr = type_of::return_uses_outptr(ccx, output);\n     let offset = if uses_outptr { 2 } else { 1 };\n@@ -259,8 +267,10 @@ fn decl_rust_fn(ccx: &CrateContext,\n         let llarg = unsafe { llvm::LLVMGetParam(llfn, (offset + i) as c_uint) };\n         match ty::get(arg_ty).sty {\n             // `~` pointer parameters never alias because ownership is transferred\n-            ty::ty_uniq(..) |\n-            ty::ty_vec(_, ty::vstore_uniq) |\n+            // FIXME #6750 ~Trait cannot be directly marked as\n+            // noalias because the actual object pointer is nested.\n+            ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n+            ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) |\n             ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n@@ -582,11 +592,8 @@ pub fn get_res_dtor(ccx: @CrateContext,\n \n         {\n             let mut externs = ccx.externs.borrow_mut();\n-            get_extern_fn(externs.get(),\n-                          ccx.llmod,\n-                          name,\n-                          lib::llvm::CCallConv,\n-                          llty)\n+            get_extern_fn(externs.get(), ccx.llmod, name,\n+                          lib::llvm::CCallConv, llty, ty::mk_nil())\n         }\n     }\n }\n@@ -917,7 +924,8 @@ pub fn trans_external_path(ccx: &CrateContext, did: ast::DefId, t: ty::t) -> Val\n                     let cconv = c.unwrap_or(lib::llvm::CCallConv);\n                     let llty = type_of_fn_from_ty(ccx, None, t);\n                     let mut externs = ccx.externs.borrow_mut();\n-                    get_extern_fn(externs.get(), ccx.llmod, name, cconv, llty)\n+                    get_extern_fn(externs.get(), ccx.llmod, name,\n+                                  cconv, llty, fn_ty.sig.output)\n                 }\n             }\n         }\n@@ -2533,13 +2541,13 @@ pub fn register_fn_llvmty(ccx: @CrateContext,\n                           sym: ~str,\n                           node_id: ast::NodeId,\n                           cc: lib::llvm::CallConv,\n-                          fn_ty: Type)\n-                          -> ValueRef {\n+                          fn_ty: Type,\n+                          output: ty::t) -> ValueRef {\n     debug!(\"register_fn_fuller creating fn for item {} with path {}\",\n            node_id,\n            ast_map::path_to_str(item_path(ccx, &node_id), token::get_ident_interner()));\n \n-    let llfn = decl_fn(ccx.llmod, sym, cc, fn_ty);\n+    let llfn = decl_fn(ccx.llmod, sym, cc, fn_ty, output);\n     finish_register_fn(ccx, sp, sym, node_id, llfn);\n     llfn\n }\n@@ -2571,7 +2579,7 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n         let llfty = Type::func([ccx.int_type, Type::i8().ptr_to().ptr_to()],\n                                &ccx.int_type);\n \n-        let llfn = decl_cdecl_fn(ccx.llmod, \"main\", llfty);\n+        let llfn = decl_cdecl_fn(ccx.llmod, \"main\", llfty, ty::mk_nil());\n         let llbb = \"top\".with_c_str(|buf| {\n             unsafe {\n                 llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llfn, buf)\n@@ -2975,7 +2983,8 @@ pub fn p2i(ccx: &CrateContext, v: ValueRef) -> ValueRef {\n macro_rules! ifn (\n     ($intrinsics:ident, $name:expr, $args:expr, $ret:expr) => ({\n         let name = $name;\n-        let f = decl_cdecl_fn(llmod, name, Type::func($args, &$ret));\n+        // HACK(eddyb) dummy output type, shouln't affect anything.\n+        let f = decl_cdecl_fn(llmod, name, Type::func($args, &$ret), ty::mk_nil());\n         $intrinsics.insert(name, f);\n     })\n )"}, {"sha": "2b55c0aac0ca2e66851a50f51d825f05dcfd2c3a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=faa0b5aa618b19d365230329746a11ab17da7847", "patch": "@@ -150,11 +150,8 @@ pub fn register_foreign_item_fn(ccx: @CrateContext,\n     let llfn;\n     {\n         let mut externs = ccx.externs.borrow_mut();\n-        llfn = base::get_extern_fn(externs.get(),\n-                                   ccx.llmod,\n-                                   lname,\n-                                   cc,\n-                                   llfn_ty);\n+        llfn = base::get_extern_fn(externs.get(), ccx.llmod, lname,\n+                                   cc, llfn_ty, tys.fn_sig.output);\n     };\n     add_argument_attributes(&tys, llfn);\n \n@@ -417,19 +414,14 @@ pub fn register_rust_fn_with_foreign_abi(ccx: @CrateContext,\n     let tys = foreign_types_for_id(ccx, node_id);\n     let llfn_ty = lltype_for_fn_from_foreign_types(&tys);\n     let t = ty::node_id_to_type(ccx.tcx, node_id);\n-    let cconv = match ty::get(t).sty {\n+    let (cconv, output) = match ty::get(t).sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             let c = llvm_calling_convention(ccx, fn_ty.abis);\n-            c.unwrap_or(lib::llvm::CCallConv)\n+            (c.unwrap_or(lib::llvm::CCallConv), fn_ty.sig.output)\n         }\n-        _ => lib::llvm::CCallConv\n+        _ => fail!(\"expected bare fn in register_rust_fn_with_foreign_abi\")\n     };\n-    let llfn = base::register_fn_llvmty(ccx,\n-                                        sp,\n-                                        sym,\n-                                        node_id,\n-                                        cconv,\n-                                        llfn_ty);\n+    let llfn = base::register_fn_llvmty(ccx, sp, sym, node_id, cconv, llfn_ty, output);\n     add_argument_attributes(&tys, llfn);\n     debug!(\"register_rust_fn_with_foreign_abi(node_id={:?}, llfn_ty={}, llfn={})\",\n            node_id, ccx.tn.type_to_str(llfn_ty), ccx.tn.val_to_str(llfn));"}, {"sha": "f4c007f018bccd14bfb2e1b975fbf90eb206b7c1", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=faa0b5aa618b19d365230329746a11ab17da7847", "patch": "@@ -596,7 +596,7 @@ fn declare_generic_glue(ccx: &CrateContext, t: ty::t, llfnty: Type,\n     let fn_nm = mangle_internal_name_by_type_and_seq(ccx, t, (~\"glue_\" + name)).to_managed();\n     debug!(\"{} is for type {}\", fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n     note_unique_llvm_symbol(ccx, fn_nm);\n-    let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);\n+    let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty, ty::mk_nil());\n     return llfn;\n }\n "}, {"sha": "ff5c22e726a37372033ad48723178905df9cb99a", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa0b5aa618b19d365230329746a11ab17da7847/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=faa0b5aa618b19d365230329746a11ab17da7847", "patch": "@@ -431,9 +431,10 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             // native function. There should be a general in-language\n             // way to do this\n             let llfty = type_of_rust_fn(bcx.ccx(), None, [], ty::mk_nil());\n-            let morestack_addr = decl_cdecl_fn(\n-                bcx.ccx().llmod, \"__morestack\", llfty);\n-            let morestack_addr = PointerCast(bcx, morestack_addr, Type::nil().ptr_to());\n+            let morestack_addr = decl_cdecl_fn(bcx.ccx().llmod, \"__morestack\",\n+                                               llfty, ty::mk_nil());\n+            let morestack_addr = PointerCast(bcx, morestack_addr,\n+                                             Type::nil().ptr_to());\n             Ret(bcx, morestack_addr);\n         }\n         \"offset\" => {"}]}