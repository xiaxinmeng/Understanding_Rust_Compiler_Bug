{"sha": "d5ae6737bfbe9d457d1a0984a7666568118e894b", "node_id": "C_kwDOAAsO6NoAKGQ1YWU2NzM3YmZiZTlkNDU3ZDFhMDk4NGE3NjY2NTY4MTE4ZTg5NGI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-22T12:55:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-22T12:55:53Z"}, "message": "Rollup merge of #102037 - jyn514:normalize-docs, r=lcnr\n\nMake cycle errors recoverable\n\nIn particular, this allows rustdoc to recover from cycle errors when normalizing associated types for documentation.\n\nIn the past, ```@jackh726``` has said we need to be careful about overflow errors: https://github.com/rust-lang/rust/pull/91430#issuecomment-983997013\n\n> Off the top of my head, we definitely should be careful about treating overflow errors the same as\n\"not implemented for some reason\" errors. Otherwise, you could end up with behavior that is\ndifferent depending on recursion depth. But, that might be context-dependent.\n\nBut cycle errors should be safe to unconditionally report; they don't depend on the recursion depth, they will always be an error whenever they're encountered.\n\nHelps with https://github.com/rust-lang/rust/issues/81091.\n\nr? ```@lcnr``` cc ```@matthewjasper```", "tree": {"sha": "b47501f06a722b1f03370cbabff32ad4b94e3206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b47501f06a722b1f03370cbabff32ad4b94e3206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ae6737bfbe9d457d1a0984a7666568118e894b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLFtZCRBK7hj4Ov3rIwAA6xQIAI0usZlAreJtMk4jgtO2FCEf\nMEcxtXWBC+BQRY+bFNawULZyvYp4F4satLKwye5BxLPS7/NRrSr8KqTHXNvff9JF\nfxqsUHvlwmKUBUtMSogaf6HfXSnrXrPfAZadfZT3ZM09t86JlbRDnJa9HwsAw2pe\np+y/NSGNrrzOryRVRrTBXC3mtpuCyoDTusmrFfTLcJwlhWRKHQH4+dsG5KT8kQw6\nLYv+r51ToE90mEmZa/k82QP5DLQ4SiJ5OiJT6YHLe4v7hE35Oo2rrG5TKkvQFZ+j\nrIfkE9mcA7ckSlyng0uriLy83mY04KUbyq8Dq75L9FBHHwXMXeNsg0snjPM7c0o=\n=NfwQ\n-----END PGP SIGNATURE-----\n", "payload": "tree b47501f06a722b1f03370cbabff32ad4b94e3206\nparent c99a603b87a4f333541d54ad119eaafe35ae9a61\nparent 1512ce5925eeafc01f011c46216c157e4e5644cb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663851353 +0530\ncommitter GitHub <noreply@github.com> 1663851353 +0530\n\nRollup merge of #102037 - jyn514:normalize-docs, r=lcnr\n\nMake cycle errors recoverable\n\nIn particular, this allows rustdoc to recover from cycle errors when normalizing associated types for documentation.\n\nIn the past, ```@jackh726``` has said we need to be careful about overflow errors: https://github.com/rust-lang/rust/pull/91430#issuecomment-983997013\n\n> Off the top of my head, we definitely should be careful about treating overflow errors the same as\n\"not implemented for some reason\" errors. Otherwise, you could end up with behavior that is\ndifferent depending on recursion depth. But, that might be context-dependent.\n\nBut cycle errors should be safe to unconditionally report; they don't depend on the recursion depth, they will always be an error whenever they're encountered.\n\nHelps with https://github.com/rust-lang/rust/issues/81091.\n\nr? ```@lcnr``` cc ```@matthewjasper```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ae6737bfbe9d457d1a0984a7666568118e894b", "html_url": "https://github.com/rust-lang/rust/commit/d5ae6737bfbe9d457d1a0984a7666568118e894b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ae6737bfbe9d457d1a0984a7666568118e894b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c99a603b87a4f333541d54ad119eaafe35ae9a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/c99a603b87a4f333541d54ad119eaafe35ae9a61", "html_url": "https://github.com/rust-lang/rust/commit/c99a603b87a4f333541d54ad119eaafe35ae9a61"}, {"sha": "1512ce5925eeafc01f011c46216c157e4e5644cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1512ce5925eeafc01f011c46216c157e4e5644cb", "html_url": "https://github.com/rust-lang/rust/commit/1512ce5925eeafc01f011c46216c157e4e5644cb"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "10e673cd9297bda67fddcec349af9f5657a7eaf5", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -95,6 +95,10 @@ pub trait ForestObligation: Clone + Debug {\n pub trait ObligationProcessor {\n     type Obligation: ForestObligation;\n     type Error: Debug;\n+    type OUT: OutcomeTrait<\n+        Obligation = Self::Obligation,\n+        Error = Error<Self::Obligation, Self::Error>,\n+    >;\n \n     fn needs_process_obligation(&self, obligation: &Self::Obligation) -> bool;\n \n@@ -111,7 +115,11 @@ pub trait ObligationProcessor {\n     /// In other words, if we had O1 which required O2 which required\n     /// O3 which required O1, we would give an iterator yielding O1,\n     /// O2, O3 (O1 is not yielded twice).\n-    fn process_backedge<'c, I>(&mut self, cycle: I, _marker: PhantomData<&'c Self::Obligation>)\n+    fn process_backedge<'c, I>(\n+        &mut self,\n+        cycle: I,\n+        _marker: PhantomData<&'c Self::Obligation>,\n+    ) -> Result<(), Self::Error>\n     where\n         I: Clone + Iterator<Item = &'c Self::Obligation>;\n }\n@@ -402,12 +410,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     /// Performs a fixpoint computation over the obligation list.\n     #[inline(never)]\n-    pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT\n+    pub fn process_obligations<P>(&mut self, processor: &mut P) -> P::OUT\n     where\n         P: ObligationProcessor<Obligation = O>,\n-        OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,\n     {\n-        let mut outcome = OUT::new();\n+        let mut outcome = P::OUT::new();\n \n         // Fixpoint computation: we repeat until the inner loop stalls.\n         loop {\n@@ -473,7 +480,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n \n             self.mark_successes();\n-            self.process_cycles(processor);\n+            self.process_cycles(processor, &mut outcome);\n             self.compress(|obl| outcome.record_completed(obl));\n         }\n \n@@ -558,7 +565,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     /// Report cycles between all `Success` nodes, and convert all `Success`\n     /// nodes to `Done`. This must be called after `mark_successes`.\n-    fn process_cycles<P>(&mut self, processor: &mut P)\n+    fn process_cycles<P>(&mut self, processor: &mut P, outcome: &mut P::OUT)\n     where\n         P: ObligationProcessor<Obligation = O>,\n     {\n@@ -568,16 +575,21 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // to handle the no-op cases immediately to avoid the cost of the\n             // function call.\n             if node.state.get() == NodeState::Success {\n-                self.find_cycles_from_node(&mut stack, processor, index);\n+                self.find_cycles_from_node(&mut stack, processor, index, outcome);\n             }\n         }\n \n         debug_assert!(stack.is_empty());\n         self.reused_node_vec = stack;\n     }\n \n-    fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n-    where\n+    fn find_cycles_from_node<P>(\n+        &self,\n+        stack: &mut Vec<usize>,\n+        processor: &mut P,\n+        index: usize,\n+        outcome: &mut P::OUT,\n+    ) where\n         P: ObligationProcessor<Obligation = O>,\n     {\n         let node = &self.nodes[index];\n@@ -586,17 +598,20 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 None => {\n                     stack.push(index);\n                     for &dep_index in node.dependents.iter() {\n-                        self.find_cycles_from_node(stack, processor, dep_index);\n+                        self.find_cycles_from_node(stack, processor, dep_index, outcome);\n                     }\n                     stack.pop();\n                     node.state.set(NodeState::Done);\n                 }\n                 Some(rpos) => {\n                     // Cycle detected.\n-                    processor.process_backedge(\n+                    let result = processor.process_backedge(\n                         stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),\n                         PhantomData,\n                     );\n+                    if let Err(err) = result {\n+                        outcome.record_error(Error { error: err, backtrace: self.error_at(index) });\n+                    }\n                 }\n             }\n         }"}, {"sha": "bc252f772a1683afe5df1a9a7febe086623727b6", "filename": "compiler/rustc_data_structures/src/obligation_forest/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Ftests.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -64,6 +64,7 @@ where\n {\n     type Obligation = O;\n     type Error = E;\n+    type OUT = TestOutcome<O, E>;\n \n     fn needs_process_obligation(&self, _obligation: &Self::Obligation) -> bool {\n         true\n@@ -76,10 +77,15 @@ where\n         (self.process_obligation)(obligation)\n     }\n \n-    fn process_backedge<'c, I>(&mut self, _cycle: I, _marker: PhantomData<&'c Self::Obligation>)\n+    fn process_backedge<'c, I>(\n+        &mut self,\n+        _cycle: I,\n+        _marker: PhantomData<&'c Self::Obligation>,\n+    ) -> Result<(), Self::Error>\n     where\n         I: Clone + Iterator<Item = &'c Self::Obligation>,\n     {\n+        Ok(())\n     }\n }\n "}, {"sha": "c8600ded987e5d4d921c32a20a3a507d3781c673", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -113,6 +113,8 @@ pub struct FulfillmentError<'tcx> {\n \n #[derive(Clone)]\n pub enum FulfillmentErrorCode<'tcx> {\n+    /// Inherently impossible to fulfill; this trait is implemented if and only if it is already implemented.\n+    CodeCycle(Vec<Obligation<'tcx, ty::Predicate<'tcx>>>),\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate"}, {"sha": "1c6ab6a082b99ce7279d425bedb0fc04f984a2c5", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -47,6 +47,7 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n                 write!(f, \"CodeConstEquateError({:?}, {:?})\", a, b)\n             }\n             super::CodeAmbiguity => write!(f, \"Ambiguity\"),\n+            super::CodeCycle(ref cycle) => write!(f, \"Cycle({:?})\", cycle),\n         }\n     }\n }"}, {"sha": "0155798c8b6d70c61b8319ad59814f5a2499dc8b", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -4,10 +4,12 @@\n // general routines.\n \n use crate::infer::{DefiningAnchor, TyCtxtInferExt};\n+use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::{\n     ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine, TraitEngineExt,\n     Unimplemented,\n };\n+use rustc_infer::traits::FulfillmentErrorCode;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -62,6 +64,14 @@ pub fn codegen_select_candidate<'tcx>(\n         // optimization to stop iterating early.\n         let errors = fulfill_cx.select_all_or_error(&infcx);\n         if !errors.is_empty() {\n+            // `rustc_monomorphize::collector` assumes there are no type errors.\n+            // Cycle errors are the only post-monomorphization errors possible; emit them now so\n+            // `rustc_ty_utils::resolve_associated_item` doesn't return `None` post-monomorphization.\n+            for err in errors {\n+                if let FulfillmentErrorCode::CodeCycle(cycle) = err.code {\n+                    infcx.report_overflow_error_cycle(&cycle);\n+                }\n+            }\n             return Err(CodegenObligationError::FulfillmentError);\n         }\n "}, {"sha": "d62b399c1b5624f0f350ab9957f6c5f3af3202fa", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -1540,6 +1540,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 diag.emit();\n             }\n+            FulfillmentErrorCode::CodeCycle(ref cycle) => {\n+                self.report_overflow_error_cycle(cycle);\n+            }\n         }\n     }\n "}, {"sha": "6f3a9412dde7a80dbfc52075d51094e9620ccea7", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -25,10 +25,9 @@ use super::Unimplemented;\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n \n-use crate::traits::error_reporting::InferCtxtExt as _;\n use crate::traits::project::PolyProjectionObligation;\n use crate::traits::project::ProjectionCacheKeyExt as _;\n-use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n+use crate::traits::query::evaluate_obligation::InferCtxtExt;\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     /// Note that we include both the `ParamEnv` and the `Predicate`,\n@@ -224,6 +223,7 @@ fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligatio\n impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     type Obligation = PendingPredicateObligation<'tcx>;\n     type Error = FulfillmentErrorCode<'tcx>;\n+    type OUT = Outcome<Self::Obligation, Self::Error>;\n \n     /// Identifies whether a predicate obligation needs processing.\n     ///\n@@ -594,14 +594,16 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         &mut self,\n         cycle: I,\n         _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,\n-    ) where\n+    ) -> Result<(), FulfillmentErrorCode<'tcx>>\n+    where\n         I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,\n     {\n         if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {\n             debug!(\"process_child_obligations: coinductive match\");\n+            Ok(())\n         } else {\n             let cycle: Vec<_> = cycle.map(|c| c.obligation.clone()).collect();\n-            self.selcx.infcx().report_overflow_error_cycle(&cycle);\n+            Err(FulfillmentErrorCode::CodeCycle(cycle))\n         }\n     }\n }"}, {"sha": "5e32a27cdb1daf238f1a80f4fb7bf6e3b5269355", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -226,27 +226,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {\n-        SelectionContext {\n-            infcx,\n-            freshener: infcx.freshener_keep_static(),\n-            intercrate: true,\n-            intercrate_ambiguity_causes: None,\n-            query_mode: TraitQueryMode::Standard,\n-        }\n+        SelectionContext { intercrate: true, ..SelectionContext::new(infcx) }\n     }\n \n     pub fn with_query_mode(\n         infcx: &'cx InferCtxt<'cx, 'tcx>,\n         query_mode: TraitQueryMode,\n     ) -> SelectionContext<'cx, 'tcx> {\n         debug!(?query_mode, \"with_query_mode\");\n-        SelectionContext {\n-            infcx,\n-            freshener: infcx.freshener_keep_static(),\n-            intercrate: false,\n-            intercrate_ambiguity_causes: None,\n-            query_mode,\n-        }\n+        SelectionContext { query_mode, ..SelectionContext::new(infcx) }\n     }\n \n     /// Enables tracking of intercrate ambiguity causes. See"}, {"sha": "1ed9ac6bc34ac06878d8970806a3878e341f7d5c", "filename": "src/test/rustdoc-ui/normalize-cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5ae6737bfbe9d457d1a0984a7666568118e894b/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ae6737bfbe9d457d1a0984a7666568118e894b/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs?ref=d5ae6737bfbe9d457d1a0984a7666568118e894b", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// compile-flags: -Znormalize-docs\n // Regression test for <https://github.com/rust-lang/rust/issues/79459>.\n pub trait Query {}\n "}]}