{"sha": "cbd6159095dd4f5e96671e9230420a46c6302dd3", "node_id": "C_kwDOAAsO6NoAKGNiZDYxNTkwOTVkZDRmNWU5NjY3MWU5MjMwNDIwYTQ2YzYzMDJkZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-16T23:03:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-16T23:03:14Z"}, "message": "Auto merge of #102944 - nnethercote:ast-Lit-third-time-lucky, r=petrochenkov\n\nUse `token::Lit` in `ast::ExprKind::Lit`.\n\nInstead of `ast::Lit`.\n\nLiteral lowering now happens at two different times. Expression literals are lowered when HIR is crated. Attribute literals are lowered during parsing.\n\nr? `@petrochenkov`", "tree": {"sha": "7fd9ea9fe79dbad06e3ad7905e1b6c178c879f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd9ea9fe79dbad06e3ad7905e1b6c178c879f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd6159095dd4f5e96671e9230420a46c6302dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6159095dd4f5e96671e9230420a46c6302dd3", "html_url": "https://github.com/rust-lang/rust/commit/cbd6159095dd4f5e96671e9230420a46c6302dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6159095dd4f5e96671e9230420a46c6302dd3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf87f383026e68bda528017906f0bee89fe34d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf87f383026e68bda528017906f0bee89fe34d0", "html_url": "https://github.com/rust-lang/rust/commit/2bf87f383026e68bda528017906f0bee89fe34d0"}, {"sha": "f2d83ed1ac7254d943975fa57e54e6013d16eecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d83ed1ac7254d943975fa57e54e6013d16eecf", "html_url": "https://github.com/rust-lang/rust/commit/f2d83ed1ac7254d943975fa57e54e6013d16eecf"}], "stats": {"total": 167, "additions": 90, "deletions": 77}, "files": [{"sha": "df92579a85df280a7846addaad0aa94045ed4fc1", "filename": "clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -73,12 +73,21 @@ impl EarlyLintPass for AlmostCompleteLetterRange {\n }\n \n fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg: Option<(Span, &str)>) {\n-    if let ExprKind::Lit(start_lit) = &start.peel_parens().kind\n-        && let ExprKind::Lit(end_lit) = &end.peel_parens().kind\n+    if let ExprKind::Lit(start_token_lit) = start.peel_parens().kind\n+        && let ExprKind::Lit(end_token_lit) = end.peel_parens().kind\n         && matches!(\n-            (&start_lit.kind, &end_lit.kind),\n-            (LitKind::Byte(b'a') | LitKind::Char('a'), LitKind::Byte(b'z') | LitKind::Char('z'))\n-            | (LitKind::Byte(b'A') | LitKind::Char('A'), LitKind::Byte(b'Z') | LitKind::Char('Z'))\n+            (\n+                LitKind::from_token_lit(start_token_lit),\n+                LitKind::from_token_lit(end_token_lit),\n+            ),\n+            (\n+                Ok(LitKind::Byte(b'a') | LitKind::Char('a')),\n+                Ok(LitKind::Byte(b'z') | LitKind::Char('z'))\n+            )\n+            | (\n+                Ok(LitKind::Byte(b'A') | LitKind::Char('A')),\n+                Ok(LitKind::Byte(b'Z') | LitKind::Char('Z')),\n+            )\n         )\n         && !in_external_macro(cx.sess(), span)\n     {"}, {"sha": "f793abdfda34a83d0ac69893ee450a2cfafee12b", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -2,7 +2,8 @@\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use rustc_ast::ast::{BinOpKind, Expr, ExprKind, Lit, LitKind};\n+use rustc_ast::ast::{BinOpKind, Expr, ExprKind, LitKind};\n+use rustc_ast::token;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -52,8 +53,8 @@ enum Side {\n \n impl IntPlusOne {\n     #[expect(clippy::cast_sign_loss)]\n-    fn check_lit(lit: &Lit, target_value: i128) -> bool {\n-        if let LitKind::Int(value, ..) = lit.kind {\n+    fn check_lit(token_lit: token::Lit, target_value: i128) -> bool {\n+        if let Ok(LitKind::Int(value, ..)) = LitKind::from_token_lit(token_lit) {\n             return value == (target_value as u128);\n         }\n         false\n@@ -65,11 +66,11 @@ impl IntPlusOne {\n             (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n                 match (lhskind.node, &lhslhs.kind, &lhsrhs.kind) {\n                     // `-1 + x`\n-                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n+                    (BinOpKind::Add, &ExprKind::Lit(lit), _) if Self::check_lit(lit, -1) => {\n                         Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::Lhs)\n                     },\n                     // `x - 1`\n-                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(lit)) if Self::check_lit(lit, 1) => {\n                         Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::Lhs)\n                     },\n                     _ => None,\n@@ -81,10 +82,10 @@ impl IntPlusOne {\n             {\n                 match (&rhslhs.kind, &rhsrhs.kind) {\n                     // `y + 1` and `1 + y`\n-                    (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n+                    (&ExprKind::Lit(lit), _) if Self::check_lit(lit, 1) => {\n                         Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::Rhs)\n                     },\n-                    (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                    (_, &ExprKind::Lit(lit)) if Self::check_lit(lit, 1) => {\n                         Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::Rhs)\n                     },\n                     _ => None,\n@@ -96,10 +97,10 @@ impl IntPlusOne {\n             {\n                 match (&lhslhs.kind, &lhsrhs.kind) {\n                     // `1 + x` and `x + 1`\n-                    (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n+                    (&ExprKind::Lit(lit), _) if Self::check_lit(lit, 1) => {\n                         Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::Lhs)\n                     },\n-                    (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                    (_, &ExprKind::Lit(lit)) if Self::check_lit(lit, 1) => {\n                         Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::Lhs)\n                     },\n                     _ => None,\n@@ -109,11 +110,11 @@ impl IntPlusOne {\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {\n                     // `-1 + y`\n-                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n+                    (BinOpKind::Add, &ExprKind::Lit(lit), _) if Self::check_lit(lit, -1) => {\n                         Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::Rhs)\n                     },\n                     // `y - 1`\n-                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(lit)) if Self::check_lit(lit, 1) => {\n                         Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::Rhs)\n                     },\n                     _ => None,"}, {"sha": "3a7b7835c990f6adbe021b9e079b49b0c0217ce5", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -5,11 +5,13 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::numeric_literal::{NumericLiteral, Radix};\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n+use rustc_ast::ast::{Expr, ExprKind, LitKind};\n+use rustc_ast::token;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Span;\n use std::iter;\n \n declare_clippy_lint! {\n@@ -236,8 +238,8 @@ impl EarlyLintPass for LiteralDigitGrouping {\n             return;\n         }\n \n-        if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit);\n+        if let ExprKind::Lit(lit) = expr.kind {\n+            self.check_lit(cx, lit, expr.span);\n         }\n     }\n }\n@@ -252,12 +254,13 @@ impl LiteralDigitGrouping {\n         }\n     }\n \n-    fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n+    fn check_lit(self, cx: &EarlyContext<'_>, lit: token::Lit, span: Span) {\n         if_chain! {\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(mut num_lit) = NumericLiteral::from_lit(&src, lit);\n+            if let Some(src) = snippet_opt(cx, span);\n+            if let Ok(lit_kind) = LitKind::from_token_lit(lit);\n+            if let Some(mut num_lit) = NumericLiteral::from_lit_kind(&src, &lit_kind);\n             then {\n-                if !Self::check_for_mistyped_suffix(cx, lit.span, &mut num_lit) {\n+                if !Self::check_for_mistyped_suffix(cx, span, &mut num_lit) {\n                     return;\n                 }\n \n@@ -293,14 +296,14 @@ impl LiteralDigitGrouping {\n                         | WarningType::InconsistentDigitGrouping\n                         | WarningType::UnusualByteGroupings\n                         | WarningType::LargeDigitGroups => {\n-                            !lit.span.from_expansion()\n+                            !span.from_expansion()\n                         }\n                         WarningType::DecimalRepresentation | WarningType::MistypedLiteralSuffix => {\n                             true\n                         }\n                     };\n                     if should_warn {\n-                        warning_type.display(num_lit.format(), cx, lit.span);\n+                        warning_type.display(num_lit.format(), cx, span);\n                     }\n                 }\n             }\n@@ -458,8 +461,8 @@ impl EarlyLintPass for DecimalLiteralRepresentation {\n             return;\n         }\n \n-        if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit);\n+        if let ExprKind::Lit(lit) = expr.kind {\n+            self.check_lit(cx, lit, expr.span);\n         }\n     }\n }\n@@ -469,19 +472,20 @@ impl DecimalLiteralRepresentation {\n     pub fn new(threshold: u64) -> Self {\n         Self { threshold }\n     }\n-    fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n+    fn check_lit(self, cx: &EarlyContext<'_>, lit: token::Lit, span: Span) {\n         // Lint integral literals.\n         if_chain! {\n-            if let LitKind::Int(val, _) = lit.kind;\n-            if let Some(src) = snippet_opt(cx, lit.span);\n-            if let Some(num_lit) = NumericLiteral::from_lit(&src, lit);\n+            if let Ok(lit_kind) = LitKind::from_token_lit(lit);\n+            if let LitKind::Int(val, _) = lit_kind;\n+            if let Some(src) = snippet_opt(cx, span);\n+            if let Some(num_lit) = NumericLiteral::from_lit_kind(&src, &lit_kind);\n             if num_lit.radix == Radix::Decimal;\n             if val >= u128::from(self.threshold);\n             then {\n                 let hex = format!(\"{val:#X}\");\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n                 let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n-                    warning_type.display(num_lit.format(), cx, lit.span);\n+                    warning_type.display(num_lit.format(), cx, span);\n                 });\n             }\n         }"}, {"sha": "eda4376f200ee713c34fcfb93891aab4923e84eb", "filename": "clippy_lints/src/misc_early/literal_suffix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::Lit;\n use rustc_errors::Applicability;\n use rustc_lint::EarlyContext;\n+use rustc_span::Span;\n \n use super::{SEPARATED_LITERAL_SUFFIX, UNSEPARATED_LITERAL_SUFFIX};\n \n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &str, sugg_type: &str) {\n+pub(super) fn check(cx: &EarlyContext<'_>, lit_span: Span, lit_snip: &str, suffix: &str, sugg_type: &str) {\n     let Some(maybe_last_sep_idx) = lit_snip.len().checked_sub(suffix.len() + 1) else {\n         return; // It's useless so shouldn't lint.\n     };\n@@ -15,7 +15,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &s\n             span_lint_and_sugg(\n                 cx,\n                 SEPARATED_LITERAL_SUFFIX,\n-                lit.span,\n+                lit_span,\n                 &format!(\"{sugg_type} type suffix should not be separated by an underscore\"),\n                 \"remove the underscore\",\n                 format!(\"{}{suffix}\", &lit_snip[..maybe_last_sep_idx]),\n@@ -25,7 +25,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &s\n             span_lint_and_sugg(\n                 cx,\n                 UNSEPARATED_LITERAL_SUFFIX,\n-                lit.span,\n+                lit_span,\n                 &format!(\"{sugg_type} type suffix should be separated by an underscore\"),\n                 \"add an underscore\",\n                 format!(\"{}_{suffix}\", &lit_snip[..=maybe_last_sep_idx]),"}, {"sha": "ddb8b9173a537d15e4462efdfd7d9c5d0579bbcc", "filename": "clippy_lints/src/misc_early/mixed_case_hex_literals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint;\n-use rustc_ast::ast::Lit;\n use rustc_lint::EarlyContext;\n+use rustc_span::Span;\n \n use super::MIXED_CASE_HEX_LITERALS;\n \n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, suffix: &str, lit_snip: &str) {\n+pub(super) fn check(cx: &EarlyContext<'_>, lit_span: Span, suffix: &str, lit_snip: &str) {\n     let Some(maybe_last_sep_idx) = lit_snip.len().checked_sub(suffix.len() + 1) else {\n         return; // It's useless so shouldn't lint.\n     };\n@@ -23,7 +23,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, suffix: &str, lit_snip: &s\n             span_lint(\n                 cx,\n                 MIXED_CASE_HEX_LITERALS,\n-                lit.span,\n+                lit_span,\n                 \"inconsistent casing in hexadecimal literal\",\n             );\n             break;"}, {"sha": "78be6b9e23fa2f99c67dd0265d21f7a1fdd0741d", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -9,7 +9,8 @@ mod zero_prefixed_literal;\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::source::snippet_opt;\n-use rustc_ast::ast::{Expr, ExprKind, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n+use rustc_ast::ast::{Expr, ExprKind, Generics, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n+use rustc_ast::token;\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n@@ -374,42 +375,43 @@ impl EarlyLintPass for MiscEarlyLints {\n             return;\n         }\n \n-        if let ExprKind::Lit(ref lit) = expr.kind {\n-            MiscEarlyLints::check_lit(cx, lit);\n+        if let ExprKind::Lit(lit) = expr.kind {\n+            MiscEarlyLints::check_lit(cx, lit, expr.span);\n         }\n         double_neg::check(cx, expr);\n     }\n }\n \n impl MiscEarlyLints {\n-    fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n+    fn check_lit(cx: &EarlyContext<'_>, lit: token::Lit, span: Span) {\n         // We test if first character in snippet is a number, because the snippet could be an expansion\n         // from a built-in macro like `line!()` or a proc-macro like `#[wasm_bindgen]`.\n         // Note that this check also covers special case that `line!()` is eagerly expanded by compiler.\n         // See <https://github.com/rust-lang/rust-clippy/issues/4507> for a regression.\n         // FIXME: Find a better way to detect those cases.\n-        let lit_snip = match snippet_opt(cx, lit.span) {\n+        let lit_snip = match snippet_opt(cx, span) {\n             Some(snip) if snip.chars().next().map_or(false, |c| c.is_ascii_digit()) => snip,\n             _ => return,\n         };\n \n-        if let LitKind::Int(value, lit_int_type) = lit.kind {\n+        let lit_kind = LitKind::from_token_lit(lit);\n+        if let Ok(LitKind::Int(value, lit_int_type)) = lit_kind {\n             let suffix = match lit_int_type {\n                 LitIntType::Signed(ty) => ty.name_str(),\n                 LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n-            literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n+            literal_suffix::check(cx, span, &lit_snip, suffix, \"integer\");\n             if lit_snip.starts_with(\"0x\") {\n-                mixed_case_hex_literals::check(cx, lit, suffix, &lit_snip);\n+                mixed_case_hex_literals::check(cx, span, suffix, &lit_snip);\n             } else if lit_snip.starts_with(\"0b\") || lit_snip.starts_with(\"0o\") {\n                 // nothing to do\n             } else if value != 0 && lit_snip.starts_with('0') {\n-                zero_prefixed_literal::check(cx, lit, &lit_snip);\n+                zero_prefixed_literal::check(cx, span, &lit_snip);\n             }\n-        } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n+        } else if let Ok(LitKind::Float(_, LitFloatType::Suffixed(float_ty))) = lit_kind {\n             let suffix = float_ty.name_str();\n-            literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\");\n+            literal_suffix::check(cx, span, &lit_snip, suffix, \"float\");\n         }\n     }\n }"}, {"sha": "4f9578d1b25763f1f124a572e55be6ff733618e0", "filename": "clippy_lints/src/misc_early/zero_prefixed_literal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fzero_prefixed_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fmisc_early%2Fzero_prefixed_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fzero_prefixed_literal.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -1,28 +1,28 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use rustc_ast::ast::Lit;\n use rustc_errors::Applicability;\n use rustc_lint::EarlyContext;\n+use rustc_span::Span;\n \n use super::ZERO_PREFIXED_LITERAL;\n \n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str) {\n+pub(super) fn check(cx: &EarlyContext<'_>, lit_span: Span, lit_snip: &str) {\n     let trimmed_lit_snip = lit_snip.trim_start_matches(|c| c == '_' || c == '0');\n     span_lint_and_then(\n         cx,\n         ZERO_PREFIXED_LITERAL,\n-        lit.span,\n+        lit_span,\n         \"this is a decimal constant\",\n         |diag| {\n             diag.span_suggestion(\n-                lit.span,\n+                lit_span,\n                 \"if you mean to use a decimal constant, remove the `0` to avoid confusion\",\n                 trimmed_lit_snip.to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n             // do not advise to use octal form if the literal cannot be expressed in base 8.\n             if !lit_snip.contains(|c| c == '8' || c == '9') {\n                 diag.span_suggestion(\n-                    lit.span,\n+                    lit_span,\n                     \"if you mean to use an octal constant, use `0o`\",\n                     format!(\"0o{trimmed_lit_snip}\"),\n                     Applicability::MaybeIncorrect,"}, {"sha": "2a7159764e4637007bd8be353ca33a7d0a2343b7", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -56,11 +56,11 @@ impl EarlyLintPass for OctalEscapes {\n             return;\n         }\n \n-        if let ExprKind::Lit(lit) = &expr.kind {\n-            if matches!(lit.token_lit.kind, LitKind::Str) {\n-                check_lit(cx, &lit.token_lit, lit.span, true);\n-            } else if matches!(lit.token_lit.kind, LitKind::ByteStr) {\n-                check_lit(cx, &lit.token_lit, lit.span, false);\n+        if let ExprKind::Lit(token_lit) = &expr.kind {\n+            if matches!(token_lit.kind, LitKind::Str) {\n+                check_lit(cx, &token_lit, expr.span, true);\n+            } else if matches!(token_lit.kind, LitKind::ByteStr) {\n+                check_lit(cx, &token_lit, expr.span, false);\n             }\n         }\n     }"}, {"sha": "bee4a33fb4a019b7dcb9d91fb48c38243431cc40", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n-use rustc_ast::ast::{BinOpKind, Expr, ExprKind, LitKind, UnOp};\n+use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_ast::token;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -120,7 +121,7 @@ impl EarlyLintPass for Precedence {\n             if_chain! {\n                 if !all_odd;\n                 if let ExprKind::Lit(lit) = &arg.kind;\n-                if let LitKind::Int(..) | LitKind::Float(..) = &lit.kind;\n+                if let token::LitKind::Integer | token::LitKind::Float = &lit.kind;\n                 then {\n                     let mut applicability = Applicability::MachineApplicable;\n                     span_lint_and_sugg("}, {"sha": "3c1998d0237d989cf9180e4ec8a345468737a3c6", "filename": "clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_rounding.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::{Expr, ExprKind, LitFloatType, LitKind};\n+use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -33,14 +33,14 @@ fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n     if let ExprKind::MethodCall(name_ident, receiver, _, _) = &expr.kind\n         && let method_name = name_ident.ident.name.as_str()\n         && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n-        && let ExprKind::Lit(spanned) = &receiver.kind\n-        && let LitKind::Float(symbol, ty) = spanned.kind {\n-            let f = symbol.as_str().parse::<f64>().unwrap();\n-            let f_str = symbol.to_string() + if let LitFloatType::Suffixed(ty) = ty {\n-                ty.name_str()\n-            } else {\n-                \"\"\n-            };\n+        && let ExprKind::Lit(token_lit) = &receiver.kind\n+        && token_lit.is_semantic_float() {\n+            let f = token_lit.symbol.as_str().parse::<f64>().unwrap();\n+            let mut f_str = token_lit.symbol.to_string();\n+            match token_lit.suffix {\n+                Some(suffix) => f_str.push_str(suffix.as_str()),\n+                None => {}\n+            }\n             if f.fract() == 0.0 {\n                 Some((method_name, f_str))\n             } else {"}, {"sha": "73d1ba727c82108a95d7db8e375b653b774c3b17", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -152,7 +152,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         },\n         (Binary(lo, ll, lr), Binary(ro, rl, rr)) => lo.node == ro.node && eq_expr(ll, rl) && eq_expr(lr, rr),\n         (Unary(lo, l), Unary(ro, r)) => mem::discriminant(lo) == mem::discriminant(ro) && eq_expr(l, r),\n-        (Lit(l), Lit(r)) => l.kind == r.kind,\n+        (Lit(l), Lit(r)) => l == r,\n         (Cast(l, lt), Cast(r, rt)) | (Type(l, lt), Type(r, rt)) => eq_expr(l, r) && eq_ty(lt, rt),\n         (Let(lp, le, _), Let(rp, re, _)) => eq_pat(lp, rp) && eq_expr(le, re),\n         (If(lc, lt, le), If(rc, rt, re)) => eq_expr(lc, rc) && eq_block(lt, rt) && eq_expr_opt(le, re),"}, {"sha": "42bdfd4827f107ef1c2bea8b229af638cfe9f0c0", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6159095dd4f5e96671e9230420a46c6302dd3/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=cbd6159095dd4f5e96671e9230420a46c6302dd3", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::ast::{Lit, LitFloatType, LitIntType, LitKind};\n+use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use std::iter;\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n@@ -46,10 +46,6 @@ pub struct NumericLiteral<'a> {\n }\n \n impl<'a> NumericLiteral<'a> {\n-    pub fn from_lit(src: &'a str, lit: &Lit) -> Option<NumericLiteral<'a>> {\n-        NumericLiteral::from_lit_kind(src, &lit.kind)\n-    }\n-\n     pub fn from_lit_kind(src: &'a str, lit_kind: &LitKind) -> Option<NumericLiteral<'a>> {\n         let unsigned_src = src.strip_prefix('-').map_or(src, |s| s);\n         if lit_kind.is_numeric()"}]}