{"sha": "042274558563623b7656df0a413bd3ccaf83678d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MjI3NDU1ODU2MzYyM2I3NjU2ZGYwYTQxM2JkM2NjYWY4MzY3OGQ=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-10T05:23:02Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-10T05:23:16Z"}, "message": "Fix comment smol mistakes", "tree": {"sha": "380d738072ccc8f17c2d1168fe4f341fc2b2592e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380d738072ccc8f17c2d1168fe4f341fc2b2592e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042274558563623b7656df0a413bd3ccaf83678d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042274558563623b7656df0a413bd3ccaf83678d", "html_url": "https://github.com/rust-lang/rust/commit/042274558563623b7656df0a413bd3ccaf83678d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042274558563623b7656df0a413bd3ccaf83678d/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2", "html_url": "https://github.com/rust-lang/rust/commit/2c4337a70a4d4451fc440b1bb60ff5ca8b7eb5b2"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "c2c9984f2afb910df8523bc1c7a91cd45942f5fe", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/042274558563623b7656df0a413bd3ccaf83678d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042274558563623b7656df0a413bd3ccaf83678d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=042274558563623b7656df0a413bd3ccaf83678d", "patch": "@@ -32,7 +32,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // This matches on types who's paths couldn't be resolved without typeck'ing e.g.\n             //\n             // trait Foo {\n-            //   type Assoc<const N1: usize>;;\n+            //   type Assoc<const N1: usize>;\n             //   fn foo() -> Self::Assoc<3>;\n             //   // note: if the def_id argument is the 3 then in this example\n             //   // parent_node would be the node for Self::Assoc<_>\n@@ -41,7 +41,8 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n             Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n                 // Walk up from the parent_node to find an item so that\n-                // we can resolve the relative path to an actual associated type\n+                // we can resolve the relative path to an actual associated type.\n+                // For the code example above this item would be the Foo trait.\n                 let item_hir_id = tcx\n                     .hir()\n                     .parent_iter(hir_id)\n@@ -53,7 +54,8 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n \n                 // This ty will be the actual associated type so that we can\n-                // go through its generics to find which param our def_id corresponds to\n+                // go through its generics to find which param our def_id corresponds to.\n+                // For the code example above, this ty would be the Assoc<const N1: usize>.\n                 let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n                 if let ty::Projection(projection) = ty.kind() {\n                     let generics = tcx.generics_of(projection.item_def_id);"}]}