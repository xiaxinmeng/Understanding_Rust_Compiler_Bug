{"sha": "f213acf4db81a33308ab2d53b5927108d63a2d7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMTNhY2Y0ZGI4MWEzMzMwOGFiMmQ1M2I1OTI3MTA4ZDYzYTJkN2Y=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T03:58:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-28T03:58:05Z"}, "message": "review comments: change wording and visual output", "tree": {"sha": "324af297ae8222b855370d1bd58a60bfefbe90ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324af297ae8222b855370d1bd58a60bfefbe90ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f213acf4db81a33308ab2d53b5927108d63a2d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f213acf4db81a33308ab2d53b5927108d63a2d7f", "html_url": "https://github.com/rust-lang/rust/commit/f213acf4db81a33308ab2d53b5927108d63a2d7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f213acf4db81a33308ab2d53b5927108d63a2d7f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6408afc64cd364ccf3b8144d49b32e8403883c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6408afc64cd364ccf3b8144d49b32e8403883c", "html_url": "https://github.com/rust-lang/rust/commit/cb6408afc64cd364ccf3b8144d49b32e8403883c"}], "stats": {"total": 85, "additions": 26, "deletions": 59}, "files": [{"sha": "1b6e5c2116b390ac71c0b35a3979bd526fe3ba5a", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 16, "deletions": 47, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=f213acf4db81a33308ab2d53b5927108d63a2d7f", "patch": "@@ -4,16 +4,13 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{Subtype, TyCtxtInferExt, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n-use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::ItemKind;\n use rustc_middle::ty::error::ExpectedFound;\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::Span;\n+use rustc_span::{MultiSpan, Span};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n@@ -63,41 +60,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n         err.span_label(sp, &format!(\"found `{:?}`\", found));\n         err.span_label(trait_sp, &format!(\"expected `{:?}`\", expected));\n-        let trait_fn_sig = tcx.fn_sig(trait_def_id);\n-\n-        // Check the `trait`'s method's output to look for type parameters that might have\n-        // unconstrained lifetimes. If the method returns a type parameter and the `impl` has a\n-        // borrow as the type parameter being implemented, the lifetimes will not match because\n-        // a new lifetime is being introduced in the `impl` that is not present in the `trait`.\n-        // Because this is confusing as hell the first time you see it, we give a short message\n-        // explaining the situation and proposing constraining the type param with a named lifetime\n-        // so that the `impl` will have one to tie them together.\n-        struct AssocTypeFinder(FxIndexSet<ty::ParamTy>);\n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for AssocTypeFinder {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n-                if let ty::Param(param) = ty.kind {\n-                    self.0.insert(param);\n-                }\n-                ty.super_visit_with(self)\n-            }\n-        }\n-        let mut visitor = AssocTypeFinder(FxIndexSet::default());\n-        trait_fn_sig.output().visit_with(&mut visitor);\n-        if let Some(id) = trait_def_id.as_local().map(|id| tcx.hir().as_local_hir_id(id)) {\n-            let parent_id = tcx.hir().get_parent_item(id);\n-            let trait_item = tcx.hir().expect_item(parent_id);\n-            if let ItemKind::Trait(_, _, generics, _, _) = &trait_item.kind {\n-                for param_ty in &visitor.0 {\n-                    if let Some(generic) = generics.get_named(param_ty.name) {\n-                        err.span_label(\n-                            generic.span,\n-                            \"this type parameter might not have a lifetime compatible with the \\\n-                             `impl`\",\n-                        );\n-                    }\n-                }\n-            }\n-        }\n \n         // Get the span of all the used type parameters in the method.\n         let assoc_item = self.tcx().associated_item(trait_def_id);\n@@ -114,11 +76,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n             _ => {}\n         }\n-        for span in visitor.types {\n-            err.span_label(\n+        let mut type_param_span: MultiSpan =\n+            visitor.types.iter().cloned().collect::<Vec<_>>().into();\n+        for &span in &visitor.types {\n+            type_param_span.push_span_label(\n                 span,\n-                \"you might want to borrow this type parameter in the trait to make it match the \\\n-                 `impl`\",\n+                \"consider borrowing this type parameter in the trait\".to_string(),\n             );\n         }\n \n@@ -132,11 +95,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             // This fallback shouldn't be necessary, but let's keep it in just in case.\n             err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n         }\n-        err.note(\"the lifetime requirements from the `trait` could not be satisfied by the `impl`\");\n-        err.help(\n-            \"verify the lifetime relationships in the `trait` and `impl` between the `self` \\\n-             argument, the other inputs and its output\",\n+        err.span_help(\n+            type_param_span,\n+            \"the lifetime requirements from the `impl` do not correspond to the requirements in \\\n+             the `trait`\",\n         );\n+        if visitor.types.is_empty() {\n+            err.help(\n+                \"verify the lifetime relationships in the `trait` and `impl` between the `self` \\\n+                 argument, the other inputs and its output\",\n+            );\n+        }\n         err.emit();\n     }\n }"}, {"sha": "b93d98ca39f4716f7ed978f6d64d5d4e02565321", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=f213acf4db81a33308ab2d53b5927108d63a2d7f", "patch": "@@ -11,7 +11,7 @@ LL |     fn deref(&self) -> &Self::Target;\n    |\n    = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n               found `fn(&Struct) -> &dyn Trait`\n-   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}, {"sha": "149c2aeb958c0712ce8f8c4d10ca7b8a3fc16e0e", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=f213acf4db81a33308ab2d53b5927108d63a2d7f", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n-   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}, {"sha": "9a0bd827850cf5f0c59e307cb4e4c5cc2c47135f", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=f213acf4db81a33308ab2d53b5927108d63a2d7f", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n-   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error[E0623]: lifetime mismatch"}, {"sha": "060e6954403c0f3a8f0ddf8410bce301d7e3f564", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=f213acf4db81a33308ab2d53b5927108d63a2d7f", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |\n    = note: expected `fn(&i32, &'a i32) -> &'a i32`\n               found `fn(&i32, &i32) -> &i32`\n-   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}, {"sha": "4942dbe480ba3c73faf208c2aade8f9b51da40cb", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f213acf4db81a33308ab2d53b5927108d63a2d7f/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr?ref=f213acf4db81a33308ab2d53b5927108d63a2d7f", "patch": "@@ -1,21 +1,19 @@\n error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n    |\n-LL | pub trait HaveRelationship<To> {\n-   |                            -- this type parameter might not have a lifetime compatible with the `impl`\n LL |     fn get_relation(&self) -> To;\n-   |     -----------------------------\n-   |     |                         |\n-   |     |                         you might want to borrow this type parameter in the trait to make it match the `impl`\n-   |     expected `fn(&Article) -> &ProofReader`\n+   |     ----------------------------- expected `fn(&Article) -> &ProofReader`\n ...\n LL |     fn get_relation(&self) -> &ProofReader {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Article) -> &ProofReader`\n    |\n    = note: expected `fn(&Article) -> &ProofReader`\n               found `fn(&Article) -> &ProofReader`\n-   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n-   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+  --> $DIR/trait-param-without-lifetime-constraint.rs:10:31\n+   |\n+LL |     fn get_relation(&self) -> To;\n+   |                               ^^ consider borrowing this type parameter in the trait\n \n error: aborting due to previous error\n "}]}