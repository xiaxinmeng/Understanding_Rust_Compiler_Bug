{"sha": "59e69aa0e79302887abcb4b6bf3613c84b48e5d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTY5YWEwZTc5MzAyODg3YWJjYjRiNmJmMzYxM2M4NGI0OGU1ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-09T06:08:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-14T05:15:46Z"}, "message": "test: remove unnecessary unsafe blocks/functions", "tree": {"sha": "db56ecdc41dd9c89815e52ee6510a7e894f46bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db56ecdc41dd9c89815e52ee6510a7e894f46bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e69aa0e79302887abcb4b6bf3613c84b48e5d7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e69aa0e79302887abcb4b6bf3613c84b48e5d7", "html_url": "https://github.com/rust-lang/rust/commit/59e69aa0e79302887abcb4b6bf3613c84b48e5d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e69aa0e79302887abcb4b6bf3613c84b48e5d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8978643f92fc8780515d838a9797f9454386618b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8978643f92fc8780515d838a9797f9454386618b", "html_url": "https://github.com/rust-lang/rust/commit/8978643f92fc8780515d838a9797f9454386618b"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "5a5c091d9570a11d8c3141c8cc5ae8b40e962d53", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/59e69aa0e79302887abcb4b6bf3613c84b48e5d7/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e69aa0e79302887abcb4b6bf3613c84b48e5d7/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=59e69aa0e79302887abcb4b6bf3613c84b48e5d7", "patch": "@@ -30,36 +30,34 @@ pub fn load_errors(testfile: &Path) -> ~[ExpectedError] {\n }\n \n fn parse_expected(line_num: uint, line: ~str) -> ~[ExpectedError] {\n-    unsafe {\n-        let error_tag = ~\"//~\";\n-        let mut idx;\n-        match str::find_str(line, error_tag) {\n-          None => return ~[],\n-          Some(nn) => { idx = (nn as uint) + str::len(error_tag); }\n-        }\n+    let error_tag = ~\"//~\";\n+    let mut idx;\n+    match str::find_str(line, error_tag) {\n+      None => return ~[],\n+      Some(nn) => { idx = (nn as uint) + str::len(error_tag); }\n+    }\n \n-        // \"//~^^^ kind msg\" denotes a message expected\n-        // three lines above current line:\n-        let mut adjust_line = 0u;\n-        let len = str::len(line);\n-        while idx < len && line[idx] == ('^' as u8) {\n-            adjust_line += 1u;\n-            idx += 1u;\n-        }\n+    // \"//~^^^ kind msg\" denotes a message expected\n+    // three lines above current line:\n+    let mut adjust_line = 0u;\n+    let len = str::len(line);\n+    while idx < len && line[idx] == ('^' as u8) {\n+        adjust_line += 1u;\n+        idx += 1u;\n+    }\n \n-        // Extract kind:\n-        while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n-        let start_kind = idx;\n-        while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n-        let kind = str::to_lower(str::slice(line, start_kind, idx).to_owned());\n+    // Extract kind:\n+    while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n+    let start_kind = idx;\n+    while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n+    let kind = str::to_lower(str::slice(line, start_kind, idx).to_owned());\n \n-        // Extract msg:\n-        while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n-        let msg = str::slice(line, idx, len).to_owned();\n+    // Extract msg:\n+    while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n+    let msg = str::slice(line, idx, len).to_owned();\n \n-        debug!(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n+    debug!(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n \n-        return ~[ExpectedError{line: line_num - adjust_line, kind: kind,\n-                               msg: msg}];\n-    }\n+    return ~[ExpectedError{line: line_num - adjust_line, kind: kind,\n+                           msg: msg}];\n }"}, {"sha": "2b36518833888254f7265947a9e38df96180af8b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59e69aa0e79302887abcb4b6bf3613c84b48e5d7/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e69aa0e79302887abcb4b6bf3613c84b48e5d7/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=59e69aa0e79302887abcb4b6bf3613c84b48e5d7", "patch": "@@ -171,16 +171,14 @@ fn parse_name_directive(line: ~str, directive: ~str) -> bool {\n \n fn parse_name_value_directive(line: ~str,\n                               directive: ~str) -> Option<~str> {\n-    unsafe {\n-        let keycolon = directive + ~\":\";\n-        match str::find_str(line, keycolon) {\n-            Some(colon) => {\n-                let value = str::slice(line, colon + str::len(keycolon),\n-                                       str::len(line)).to_owned();\n-                debug!(\"%s: %s\", directive,  value);\n-                Some(value)\n-            }\n-            None => None\n+    let keycolon = directive + ~\":\";\n+    match str::find_str(line, keycolon) {\n+        Some(colon) => {\n+            let value = str::slice(line, colon + str::len(keycolon),\n+                                   str::len(line)).to_owned();\n+            debug!(\"%s: %s\", directive,  value);\n+            Some(value)\n         }\n+        None => None\n     }\n }"}]}