{"sha": "88d243c742ecd724372c4293b6b6ea293bae2d17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDI0M2M3NDJlY2Q3MjQzNzJjNDI5M2I2YjZlYTI5M2JhZTJkMTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:52:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:53:37Z"}, "message": "Don't set sortText\n\nI might be reading this wrong, but it looks like we are setting it to\nessentially arbitrary string at the moment, as there are no defined\norder on the items in the *set* of completions.", "tree": {"sha": "2dd1fe075f1343c2a1bfaa03f800d4d3d53809ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dd1fe075f1343c2a1bfaa03f800d4d3d53809ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d243c742ecd724372c4293b6b6ea293bae2d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d243c742ecd724372c4293b6b6ea293bae2d17", "html_url": "https://github.com/rust-lang/rust/commit/88d243c742ecd724372c4293b6b6ea293bae2d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d243c742ecd724372c4293b6b6ea293bae2d17/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647683b9bbbbac209b7cb1d2d1c2e1d50ffdfd11", "url": "https://api.github.com/repos/rust-lang/rust/commits/647683b9bbbbac209b7cb1d2d1c2e1d50ffdfd11", "html_url": "https://github.com/rust-lang/rust/commit/647683b9bbbbac209b7cb1d2d1c2e1d50ffdfd11"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "098ee369c2adb95af5d6c33b673539b04cd49fbf", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88d243c742ecd724372c4293b6b6ea293bae2d17/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d243c742ecd724372c4293b6b6ea293bae2d17/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=88d243c742ecd724372c4293b6b6ea293bae2d17", "patch": "@@ -9,10 +9,10 @@ use lsp_types::{\n     TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, WorkspaceEdit,\n };\n use ra_ide::{\n-    translate_offset_with_edit, CompletionItem, CompletionItemKind, CompletionScore, FileId,\n-    FilePosition, FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier,\n-    HighlightTag, InlayHint, InlayKind, InsertTextFormat, LineCol, LineIndex, NavigationTarget,\n-    RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n+    translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n+    FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag,\n+    InlayHint, InlayKind, InsertTextFormat, LineCol, LineIndex, NavigationTarget, RangeInfo,\n+    ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n@@ -114,10 +114,10 @@ impl Conv for Severity {\n     }\n }\n \n-impl ConvWith<(&LineIndex, LineEndings, &mut usize)> for CompletionItem {\n+impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n     type Output = ::lsp_types::CompletionItem;\n \n-    fn conv_with(self, ctx: (&LineIndex, LineEndings, &mut usize)) -> ::lsp_types::CompletionItem {\n+    fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> ::lsp_types::CompletionItem {\n         let mut additional_text_edits = Vec::new();\n         let mut text_edit = None;\n         // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -165,13 +165,8 @@ impl ConvWith<(&LineIndex, LineEndings, &mut usize)> for CompletionItem {\n             ..Default::default()\n         };\n \n-        if let Some(score) = self.score() {\n-            match score {\n-                CompletionScore::TypeAndNameMatch => res.preselect = Some(true),\n-                CompletionScore::TypeMatch => {}\n-            }\n-            res.sort_text = Some(format!(\"{:02}\", *ctx.2));\n-            *ctx.2 += 1;\n+        if self.score().is_some() {\n+            res.preselect = Some(true)\n         }\n \n         if self.deprecated() {"}, {"sha": "41d9fe344d4d97f0ad155968ff2f0d30e909e0e9", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88d243c742ecd724372c4293b6b6ea293bae2d17/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d243c742ecd724372c4293b6b6ea293bae2d17/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=88d243c742ecd724372c4293b6b6ea293bae2d17", "patch": "@@ -423,11 +423,8 @@ pub fn handle_completion(\n     };\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n     let line_endings = world.file_line_endings(position.file_id);\n-    let mut count_sort_text_item = 0usize;\n-    let items: Vec<CompletionItem> = items\n-        .into_iter()\n-        .map(|item| item.conv_with((&line_index, line_endings, &mut count_sort_text_item)))\n-        .collect();\n+    let items: Vec<CompletionItem> =\n+        items.into_iter().map(|item| item.conv_with((&line_index, line_endings))).collect();\n \n     Ok(Some(items.into()))\n }"}]}