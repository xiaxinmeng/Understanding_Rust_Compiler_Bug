{"sha": "d4fa0f148518aa30aa84b4194b9da7ab595dad56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmEwZjE0ODUxOGFhMzBhYTg0YjQxOTRiOWRhN2FiNTk1ZGFkNTY=", "commit": {"author": {"name": "Youngmin Yoo", "email": "youngmin.yoo@samsung.com", "date": "2013-05-08T08:49:00Z"}, "committer": {"name": "Youngmin Yoo", "email": "youngmin.yoo@samsung.com", "date": "2013-05-09T05:20:04Z"}, "message": "libstd: rename vec::each(var) to var.each", "tree": {"sha": "f45950df1f501f0db80436c4f0c18aae7ea7e1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45950df1f501f0db80436c4f0c18aae7ea7e1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fa0f148518aa30aa84b4194b9da7ab595dad56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa0f148518aa30aa84b4194b9da7ab595dad56", "html_url": "https://github.com/rust-lang/rust/commit/d4fa0f148518aa30aa84b4194b9da7ab595dad56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa0f148518aa30aa84b4194b9da7ab595dad56/comments", "author": {"login": "recrack", "id": 329213, "node_id": "MDQ6VXNlcjMyOTIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/329213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recrack", "html_url": "https://github.com/recrack", "followers_url": "https://api.github.com/users/recrack/followers", "following_url": "https://api.github.com/users/recrack/following{/other_user}", "gists_url": "https://api.github.com/users/recrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/recrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recrack/subscriptions", "organizations_url": "https://api.github.com/users/recrack/orgs", "repos_url": "https://api.github.com/users/recrack/repos", "events_url": "https://api.github.com/users/recrack/events{/privacy}", "received_events_url": "https://api.github.com/users/recrack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "recrack", "id": 329213, "node_id": "MDQ6VXNlcjMyOTIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/329213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recrack", "html_url": "https://github.com/recrack", "followers_url": "https://api.github.com/users/recrack/followers", "following_url": "https://api.github.com/users/recrack/following{/other_user}", "gists_url": "https://api.github.com/users/recrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/recrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recrack/subscriptions", "organizations_url": "https://api.github.com/users/recrack/orgs", "repos_url": "https://api.github.com/users/recrack/repos", "events_url": "https://api.github.com/users/recrack/events{/privacy}", "received_events_url": "https://api.github.com/users/recrack/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472d9f33df5971d0b39c1c7dcb54f60ee8a4e383", "url": "https://api.github.com/repos/rust-lang/rust/commits/472d9f33df5971d0b39c1c7dcb54f60ee8a4e383", "html_url": "https://github.com/rust-lang/rust/commit/472d9f33df5971d0b39c1c7dcb54f60ee8a4e383"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "75b3b6bb566ee28e708327a9789eb66810be9b0f", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -24,7 +24,6 @@ use cast;\n use rt::io::Writer;\n use to_bytes::IterBytes;\n use uint;\n-use vec;\n \n // Alias `SipState` to `State`.\n pub use State = hash::SipState;"}, {"sha": "08507fbf34eeade17f3c488ebf07946a2b000767", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -484,7 +484,6 @@ mod tests {\n \n     use core::cell::Cell;\n     use core::task;\n-    use core::vec;\n \n     #[test]\n     fn manually_share_arc() {\n@@ -683,7 +682,7 @@ mod tests {\n         }\n \n         // Wait for children to pass their asserts\n-        for vec::each(children) |r| {\n+        for children.each |r| {\n             r.recv();\n         }\n \n@@ -748,7 +747,7 @@ mod tests {\n                 assert!(*state == 42);\n                 *state = 31337;\n                 // send to other readers\n-                for vec::each(reader_convos) |x| {\n+                for reader_convos.each |x| {\n                     match *x {\n                         (ref rc, _) => rc.send(()),\n                     }\n@@ -757,7 +756,7 @@ mod tests {\n             let read_mode = arc.downgrade(write_mode);\n             do (&read_mode).read |state| {\n                 // complete handshake with other readers\n-                for vec::each(reader_convos) |x| {\n+                for reader_convos.each |x| {\n                     match *x {\n                         (_, ref rp) => rp.recv(),\n                     }"}, {"sha": "ea2a631ae99587e16ee6c7390c6b3a8f075fc0c4", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -368,7 +368,7 @@ pub fn opt_count(mm: &Matches, nm: &str) -> uint {\n \n /// Returns true if any of several options were matched\n pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n-    for vec::each(names) |nm| {\n+    for names.each |nm| {\n         match find_opt(mm.opts, mkname(*nm)) {\n             Some(id) if !mm.vals[id].is_empty() => return true,\n             _ => (),\n@@ -395,7 +395,7 @@ pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n  * option took an argument\n  */\n pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n-    for vec::each(names) |nm| {\n+    for names.each |nm| {\n         match opt_val(mm, *nm) {\n           Val(copy s) => return s,\n           _ => ()"}, {"sha": "52803207da8d1f0d63678f6f670616f39d9239bf", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -425,7 +425,7 @@ mod test {\n         let results = result::unwrap(ga_result);\n         debug!(\"test_get_addr: Number of results for %s: %?\",\n                         localhost_name, vec::len(results));\n-        for vec::each(results) |r| {\n+        for results.each |r| {\n             let ipv_prefix = match *r {\n               Ipv4(_) => ~\"IPv4\",\n               Ipv6(_) => ~\"IPv6\""}, {"sha": "cd5845ac5443e6a9bdae5a3b67a3ea70a706cc06", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -250,7 +250,7 @@ pub fn sha1() -> @Sha1 {\n         fn result_str(&mut self) -> ~str {\n             let rr = mk_result(self);\n             let mut s = ~\"\";\n-            for vec::each(rr) |b| {\n+            for rr.each |b| {\n                 let hex = uint::to_str_radix(*b as uint, 16u);\n                 if hex.len() == 1 {\n                     s += \"0\";\n@@ -378,7 +378,7 @@ mod tests {\n         // Test that it works when accepting the message all at once\n \n         let mut sh = sha1::sha1();\n-        for vec::each(tests) |t| {\n+        for tests.each |t| {\n             sh.input_str(t.input);\n             let out = sh.result();\n             check_vec_eq(t.output, out);\n@@ -392,7 +392,7 @@ mod tests {\n \n \n         // Test that it works when accepting the message in pieces\n-        for vec::each(tests) |t| {\n+        for tests.each |t| {\n             let len = str::len(t.input);\n             let mut left = len;\n             while left > 0u {"}, {"sha": "ae474e0c39463fec8c1d24ee1210182231899f5e", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -859,7 +859,7 @@ mod test_qsort {\n         let immut_names = names;\n \n         let pairs = vec::zip_slice(expected, immut_names);\n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             let (a, b) = *p;\n             debug!(\"%d %d\", a, b);\n             assert!((a == b));"}, {"sha": "044c616dcd32ca9626d763c28256dcfec8558eea", "filename": "src/libstd/sort_stage0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsort_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsort_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort_stage0.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -852,7 +852,7 @@ mod test_qsort {\n         let immut_names = names;\n \n         let pairs = vec::zip_slice(expected, immut_names);\n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             let (a, b) = *p;\n             debug!(\"%d %d\", a, b);\n             assert!((a == b));"}, {"sha": "17d051518a9ec5351049a97af3dc0f08cca11ed9", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -997,7 +997,7 @@ mod tests {\n                     }\n                 }\n             }\n-            for vec::each(sibling_convos) |p| {\n+            for sibling_convos.each |p| {\n                 let _ = p.recv(); // wait for sibling to get in the mutex\n             }\n             do m2.lock { }"}, {"sha": "236c7f668c2e02645ac8fb52d1dc94d83a9b0da3", "filename": "src/libstd/term.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -13,7 +13,6 @@\n use core::io;\n use core::option;\n use core::os;\n-use core::vec;\n \n // FIXME (#2807): Windows support.\n \n@@ -50,7 +49,7 @@ pub fn color_supported() -> bool {\n                            ~\"screen-bce\", ~\"xterm-256color\"];\n     return match os::getenv(~\"TERM\") {\n           option::Some(ref env) => {\n-            for vec::each(supported_terms) |term| {\n+            for supported_terms.each |term| {\n                 if *term == *env { return true; }\n             }\n             false"}, {"sha": "1a864b09a35a4137162936a487374e66b1931e79", "filename": "src/libstd/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -355,7 +355,7 @@ fn print_failures(st: &ConsoleTestState) {\n         failures.push(name.to_str());\n     }\n     sort::tim_sort(failures);\n-    for vec::each(failures) |name| {\n+    for failures.each |name| {\n         st.out.write_line(fmt!(\"    %s\", name.to_str()));\n     }\n }\n@@ -928,7 +928,7 @@ mod tests {\n         {\n             fn testfn() { }\n             let mut tests = ~[];\n-            for vec::each(names) |name| {\n+            for names.each |name| {\n                 let test = TestDescAndFn {\n                     desc: TestDesc {\n                         name: DynTestName(*name),\n@@ -954,7 +954,7 @@ mod tests {\n \n         let pairs = vec::zip(expected, filtered);\n \n-        for vec::each(pairs) |p| {\n+        for pairs.each |p| {\n             match *p {\n                 (ref a, ref b) => {\n                     assert!((*a == b.desc.name.to_str()));"}, {"sha": "31d8eb20a6753f1502444e914194cb3600ea2922", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa0f148518aa30aa84b4194b9da7ab595dad56/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=d4fa0f148518aa30aa84b4194b9da7ab595dad56", "patch": "@@ -861,7 +861,6 @@ mod tests {\n     use core::result;\n     use core::result::{Err, Ok};\n     use core::str;\n-    use core::vec;\n \n     fn test_get_time() {\n         static some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n@@ -1028,31 +1027,31 @@ mod tests {\n             }\n         }\n \n-        for vec::each([\n+        for [\n             ~\"Sunday\",\n             ~\"Monday\",\n             ~\"Tuesday\",\n             ~\"Wednesday\",\n             ~\"Thursday\",\n             ~\"Friday\",\n             ~\"Saturday\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%A\"));\n         }\n \n-        for vec::each([\n+        for [\n             ~\"Sun\",\n             ~\"Mon\",\n             ~\"Tue\",\n             ~\"Wed\",\n             ~\"Thu\",\n             ~\"Fri\",\n             ~\"Sat\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%a\"));\n         }\n \n-        for vec::each([\n+        for [\n             ~\"January\",\n             ~\"February\",\n             ~\"March\",\n@@ -1065,11 +1064,11 @@ mod tests {\n             ~\"October\",\n             ~\"November\",\n             ~\"December\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%B\"));\n         }\n \n-        for vec::each([\n+        for [\n             ~\"Jan\",\n             ~\"Feb\",\n             ~\"Mar\",\n@@ -1082,7 +1081,7 @@ mod tests {\n             ~\"Oct\",\n             ~\"Nov\",\n             ~\"Dec\"\n-        ]) |day| {\n+        ].each |day| {\n             assert!(test(*day, ~\"%b\"));\n         }\n "}]}