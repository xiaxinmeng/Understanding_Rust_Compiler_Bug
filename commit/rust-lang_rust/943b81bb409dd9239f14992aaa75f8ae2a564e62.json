{"sha": "943b81bb409dd9239f14992aaa75f8ae2a564e62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0M2I4MWJiNDA5ZGQ5MjM5ZjE0OTkyYWFhNzVmOGFlMmE1NjRlNjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-27T15:37:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Extract remove_unused_stack_addr_and_stack_load", "tree": {"sha": "59c51eb6171a402b2838acef58244bcb23a5c37c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c51eb6171a402b2838acef58244bcb23a5c37c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/943b81bb409dd9239f14992aaa75f8ae2a564e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/943b81bb409dd9239f14992aaa75f8ae2a564e62", "html_url": "https://github.com/rust-lang/rust/commit/943b81bb409dd9239f14992aaa75f8ae2a564e62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/943b81bb409dd9239f14992aaa75f8ae2a564e62/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8daa7115e3f5f78dba547061cd4fe6a2f716c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8daa7115e3f5f78dba547061cd4fe6a2f716c0e", "html_url": "https://github.com/rust-lang/rust/commit/a8daa7115e3f5f78dba547061cd4fe6a2f716c0e"}], "stats": {"total": 105, "additions": 56, "deletions": 49}, "files": [{"sha": "2e531d1cb551a9ea84e3f02815031f81e7a7bb90", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 56, "deletions": 49, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/943b81bb409dd9239f14992aaa75f8ae2a564e62/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943b81bb409dd9239f14992aaa75f8ae2a564e62/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=943b81bb409dd9239f14992aaa75f8ae2a564e62", "patch": "@@ -37,9 +37,7 @@ pub(super) fn optimize_function(\n ) {\n     combine_stack_addr_with_load_store(func);\n \n-    // Record all stack_addr, stack_load and stack_store instructions. Also record all stack_addr\n-    // and stack_load insts whose result is used.\n-    let mut stack_addr_load_insts_users = HashMap::<Inst, HashSet<Inst>>::new();\n+    // Record all stack_addr, stack_load and stack_store instructions.\n     let mut stack_slot_usage_map = BTreeMap::<OrdStackSlot, StackSlotUsage>::new();\n \n     let mut cursor = FuncCursor::new(func);\n@@ -70,56 +68,12 @@ pub(super) fn optimize_function(\n                 }\n                 _ => {}\n             }\n-\n-            for &arg in cursor.func.dfg.inst_args(inst) {\n-                if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {\n-                    match cursor.func.dfg[arg_origin].opcode() {\n-                        Opcode::StackAddr | Opcode::StackLoad => {\n-                            stack_addr_load_insts_users.entry(arg_origin).or_insert_with(HashSet::new).insert(inst);\n-                        }\n-                        _ => {}\n-                    }\n-                }\n-            }\n         }\n     }\n \n-    println!(\n-        \"{}:\\nstack_addr/stack_load users: {:?}\\nstack slot usage: {:?}\",\n-        name,\n-        stack_addr_load_insts_users,\n-        stack_slot_usage_map,\n-    );\n-\n-    for inst in stack_addr_load_insts_users.keys() {\n-        let mut is_recorded_stack_addr_or_stack_load = false;\n-        for stack_slot_users in stack_slot_usage_map.values() {\n-            is_recorded_stack_addr_or_stack_load |= stack_slot_users.stack_addr.contains(inst) || stack_slot_users.stack_load.contains(inst);\n-        }\n-        assert!(is_recorded_stack_addr_or_stack_load);\n-    }\n-\n-    // Replace all unused stack_addr and stack_load instructions with nop.\n-    for stack_slot_users in stack_slot_usage_map.values_mut() {\n-        // FIXME remove clone\n-        for &inst in stack_slot_users.stack_addr.clone().iter() {\n-            if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                println!(\"Removing unused stack_addr {}\", inst);\n-                func.dfg.detach_results(inst);\n-                func.dfg.replace(inst).nop();\n-                stack_slot_users.stack_addr.remove(&inst);\n-            }\n-        }\n+    println!(\"{}:\\nstack slot usage: {:?}\", name, stack_slot_usage_map);\n \n-        for &inst in stack_slot_users.stack_load.clone().iter() {\n-            if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                println!(\"Removing unused stack_addr {}\", inst);\n-                func.dfg.detach_results(inst);\n-                func.dfg.replace(inst).nop();\n-                stack_slot_users.stack_load.remove(&inst);\n-            }\n-        }\n-    }\n+    remove_unused_stack_addr_and_stack_load(func, &mut stack_slot_usage_map);\n \n     println!(\"stack slot usage (after): {:?}\", stack_slot_usage_map);\n \n@@ -175,6 +129,59 @@ fn combine_stack_addr_with_load_store(func: &mut Function) {\n     }\n }\n \n+fn remove_unused_stack_addr_and_stack_load(func: &mut Function, stack_slot_usage_map: &mut BTreeMap<OrdStackSlot, StackSlotUsage>) {\n+    // FIXME incrementally rebuild on each call?\n+    let mut stack_addr_load_insts_users = HashMap::<Inst, HashSet<Inst>>::new();\n+\n+    let mut cursor = FuncCursor::new(func);\n+    while let Some(_ebb) = cursor.next_ebb() {\n+        while let Some(inst) = cursor.next_inst() {\n+            for &arg in cursor.func.dfg.inst_args(inst) {\n+                if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {\n+                    match cursor.func.dfg[arg_origin].opcode() {\n+                        Opcode::StackAddr | Opcode::StackLoad => {\n+                            stack_addr_load_insts_users.entry(arg_origin).or_insert_with(HashSet::new).insert(inst);\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    println!(\"stack_addr/stack_load users: {:?}\", stack_addr_load_insts_users);\n+\n+    for inst in stack_addr_load_insts_users.keys() {\n+        let mut is_recorded_stack_addr_or_stack_load = false;\n+        for stack_slot_users in stack_slot_usage_map.values() {\n+            is_recorded_stack_addr_or_stack_load |= stack_slot_users.stack_addr.contains(inst) || stack_slot_users.stack_load.contains(inst);\n+        }\n+        assert!(is_recorded_stack_addr_or_stack_load);\n+    }\n+\n+    // Replace all unused stack_addr and stack_load instructions with nop.\n+    for stack_slot_users in stack_slot_usage_map.values_mut() {\n+        // FIXME remove clone\n+        for &inst in stack_slot_users.stack_addr.clone().iter() {\n+            if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n+                println!(\"Removing unused stack_addr {}\", inst);\n+                func.dfg.detach_results(inst);\n+                func.dfg.replace(inst).nop();\n+                stack_slot_users.stack_addr.remove(&inst);\n+            }\n+        }\n+\n+        for &inst in stack_slot_users.stack_load.clone().iter() {\n+            if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n+                println!(\"Removing unused stack_addr {}\", inst);\n+                func.dfg.detach_results(inst);\n+                func.dfg.replace(inst).nop();\n+                stack_slot_users.stack_load.remove(&inst);\n+            }\n+        }\n+    }\n+}\n+\n fn try_get_stack_slot_and_offset_for_addr(func: &Function, addr: Value) -> Option<(StackSlot, Offset32)> {\n     if let ValueDef::Result(addr_inst, 0) = func.dfg.value_def(addr) {\n         if let InstructionData::StackLoad {"}]}