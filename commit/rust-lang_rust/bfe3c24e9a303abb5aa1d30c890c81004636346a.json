{"sha": "bfe3c24e9a303abb5aa1d30c890c81004636346a", "node_id": "C_kwDOAAsO6NoAKGJmZTNjMjRlOWEzMDNhYmI1YWExZDMwYzg5MGM4MTAwNDYzNjM0NmE", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-04-01T05:50:41Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-07-23T17:51:34Z"}, "message": "Add fine-grained LLVM CFI support to the Rust compiler\n\nThis commit improves the LLVM Control Flow Integrity (CFI) support in\nthe Rust compiler by providing forward-edge control flow protection for\nRust-compiled code only by aggregating function pointers in groups\nidentified by their return and parameter types.\n\nForward-edge control flow protection for C or C++ and Rust -compiled\ncode \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code\nshare the same virtual address space) will be provided in later work as\npart of this project by identifying C char and integer type uses at the\ntime types are encoded (see Type metadata in the design document in the\ntracking issue #89653).\n\nLLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e.,\n-Clto).", "tree": {"sha": "fc9fe8a239e4e665f0a34bc4c75fef7360e39c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9fe8a239e4e665f0a34bc4c75fef7360e39c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe3c24e9a303abb5aa1d30c890c81004636346a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe3c24e9a303abb5aa1d30c890c81004636346a", "html_url": "https://github.com/rust-lang/rust/commit/bfe3c24e9a303abb5aa1d30c890c81004636346a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe3c24e9a303abb5aa1d30c890c81004636346a/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b7dc2912831b504e2e3b550c2d9d3cd551b9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b7dc2912831b504e2e3b550c2d9d3cd551b9da", "html_url": "https://github.com/rust-lang/rust/commit/97b7dc2912831b504e2e3b550c2d9d3cd551b9da"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "5df59438c90eb5b1422370788f33053cfda6e125", "filename": "src/builder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe3c24e9a303abb5aa1d30c890c81004636346a/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe3c24e9a303abb5aa1d30c890c81004636346a/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=bfe3c24e9a303abb5aa1d30c890c81004636346a", "patch": "@@ -784,16 +784,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn type_metadata(&mut self, _function: RValue<'gcc>, _typeid: String) {\n-        // Unsupported.\n-    }\n-\n-    fn typeid_metadata(&mut self, _typeid: String) -> RValue<'gcc> {\n-        // Unsupported.\n-        self.context.new_rvalue_from_int(self.int_type, 0)\n-    }\n-\n-\n     fn store(&mut self, val: RValue<'gcc>, ptr: RValue<'gcc>, align: Align) -> RValue<'gcc> {\n         self.store_with_flags(val, ptr, align, MemFlags::empty())\n     }"}, {"sha": "68bdb8d4e55f4b1183bb479e406b48f7a065e656", "filename": "src/type_.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfe3c24e9a303abb5aa1d30c890c81004636346a/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe3c24e9a303abb5aa1d30c890c81004636346a/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=bfe3c24e9a303abb5aa1d30c890c81004636346a", "patch": "@@ -1,7 +1,7 @@\n use std::convert::TryInto;\n \n use gccjit::{RValue, Struct, Type};\n-use rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods};\n+use rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, TypeMembershipMethods};\n use rustc_codegen_ssa::common::TypeKind;\n use rustc_middle::{bug, ty};\n use rustc_middle::ty::layout::TyAndLayout;\n@@ -290,3 +290,14 @@ pub fn struct_fields<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLayout\n \n     (result, packed)\n }\n+\n+impl<'gcc, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n+    fn set_type_metadata(&self, _function: RValue<'gcc>, _typeid: String) {\n+        // Unsupported.\n+    }\n+\n+    fn typeid_metadata(&self, _typeid: String) -> RValue<'gcc> {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+}"}]}