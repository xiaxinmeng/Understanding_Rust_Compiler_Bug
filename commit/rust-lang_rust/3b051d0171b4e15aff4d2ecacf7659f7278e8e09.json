{"sha": "3b051d0171b4e15aff4d2ecacf7659f7278e8e09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDUxZDAxNzFiNGUxNWFmZjRkMmVjYWNmNzY1OWY3Mjc4ZThlMDk=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-26T23:10:30Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-03T19:18:18Z"}, "message": "BTreeMap: comment why drain_filter's size_hint is somewhat pessimistictid", "tree": {"sha": "96042624a60f12b4a2ace5ba6cdeedd11ac01895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96042624a60f12b4a2ace5ba6cdeedd11ac01895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b051d0171b4e15aff4d2ecacf7659f7278e8e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b051d0171b4e15aff4d2ecacf7659f7278e8e09", "html_url": "https://github.com/rust-lang/rust/commit/3b051d0171b4e15aff4d2ecacf7659f7278e8e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b051d0171b4e15aff4d2ecacf7659f7278e8e09/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c8b43bc3cb867715bd08d93c3bb6e06819c3b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c8b43bc3cb867715bd08d93c3bb6e06819c3b1", "html_url": "https://github.com/rust-lang/rust/commit/90c8b43bc3cb867715bd08d93c3bb6e06819c3b1"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "4ca93a4eb8366d4b43ff0a36276eac8940ca413b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b051d0171b4e15aff4d2ecacf7659f7278e8e09/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b051d0171b4e15aff4d2ecacf7659f7278e8e09/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=3b051d0171b4e15aff4d2ecacf7659f7278e8e09", "patch": "@@ -1748,6 +1748,10 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n \n     /// Implementation of a typical `DrainFilter::size_hint` method.\n     pub(super) fn size_hint(&self) -> (usize, Option<usize>) {\n+        // In most of the btree iterators, `self.length` is the number of elements\n+        // yet to be visited. Here, it includes elements that were visited and that\n+        // the predicate decided not to drain. Making this upper bound more accurate\n+        // requires maintaining an extra field and is not worth while.\n         (0, Some(*self.length))\n     }\n }"}]}