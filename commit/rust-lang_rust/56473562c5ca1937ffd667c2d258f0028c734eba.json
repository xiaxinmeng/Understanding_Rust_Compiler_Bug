{"sha": "56473562c5ca1937ffd667c2d258f0028c734eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NDczNTYyYzVjYTE5MzdmZmQ2NjdjMmQyNThmMDAyOGM3MzRlYmE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-29T07:48:56Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-30T11:50:42Z"}, "message": "Force locals to be live after they are borrowed for immovable generators. Fixes #47736", "tree": {"sha": "55059c975cacb8e14717d7c5bac49f91f1d66fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55059c975cacb8e14717d7c5bac49f91f1d66fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56473562c5ca1937ffd667c2d258f0028c734eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56473562c5ca1937ffd667c2d258f0028c734eba", "html_url": "https://github.com/rust-lang/rust/commit/56473562c5ca1937ffd667c2d258f0028c734eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56473562c5ca1937ffd667c2d258f0028c734eba/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "html_url": "https://github.com/rust-lang/rust/commit/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2"}], "stats": {"total": 219, "additions": 202, "deletions": 17}, "files": [{"sha": "244e8b5ccd7e4b4d45e0259ccd730f9951d66768", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=56473562c5ca1937ffd667c2d258f0028c734eba", "patch": "@@ -0,0 +1,118 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use super::*;\n+\n+use rustc::mir::*;\n+use rustc::mir::visit::Visitor;\n+use dataflow::BitDenotation;\n+\n+/// This calculates if any part of a MIR local could have previously been borrowed.\n+/// This means that once a local has been borrowed, its bit will always be set\n+/// from that point and onwards, even if the borrow ends. You could also think of this\n+/// as computing the lifetimes of infinite borrows.\n+/// This is used to compute which locals are live during a yield expression for\n+/// immovable generators.\n+#[derive(Copy, Clone)]\n+pub struct HaveBeenBorrowedLocals<'a, 'tcx: 'a> {\n+    mir: &'a Mir<'tcx>,\n+}\n+\n+impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n+    pub fn new(mir: &'a Mir<'tcx>)\n+               -> Self {\n+        HaveBeenBorrowedLocals { mir: mir }\n+    }\n+\n+    pub fn mir(&self) -> &Mir<'tcx> {\n+        self.mir\n+    }\n+}\n+\n+impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n+    type Idx = Local;\n+    fn name() -> &'static str { \"has_been_borrowed_locals\" }\n+    fn bits_per_block(&self) -> usize {\n+        self.mir.local_decls.len()\n+    }\n+\n+    fn start_block_effect(&self, _sets: &mut IdxSet<Local>) {\n+        // Nothing is borrowed on function entry\n+    }\n+\n+    fn statement_effect(&self,\n+                        sets: &mut BlockSets<Local>,\n+                        loc: Location) {\n+        BorrowedLocalsVisitor {\n+            sets,\n+        }.visit_statement(loc.block, &self.mir[loc.block].statements[loc.statement_index], loc);\n+    }\n+\n+    fn terminator_effect(&self,\n+                         sets: &mut BlockSets<Local>,\n+                         loc: Location) {\n+        BorrowedLocalsVisitor {\n+            sets,\n+        }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n+    }\n+\n+    fn propagate_call_return(&self,\n+                             _in_out: &mut IdxSet<Local>,\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             _dest_place: &mir::Place) {\n+        // Nothing to do when a call returns successfully\n+    }\n+}\n+\n+impl<'a, 'tcx> BitwiseOperator for HaveBeenBorrowedLocals<'a, 'tcx> {\n+    #[inline]\n+    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+        pred1 | pred2 // \"maybe\" means we union effects of both preds\n+    }\n+}\n+\n+impl<'a, 'tcx> InitialFlow for HaveBeenBorrowedLocals<'a, 'tcx> {\n+    #[inline]\n+    fn bottom_value() -> bool {\n+        false // bottom = unborrowed\n+    }\n+}\n+\n+struct BorrowedLocalsVisitor<'b, 'c: 'b> {\n+    sets: &'b mut BlockSets<'c, Local>,\n+}\n+\n+fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n+    match *place {\n+        Place::Local(l) => Some(l),\n+        Place::Static(..) => None,\n+        Place::Projection(ref proj) => {\n+            match proj.elem {\n+                ProjectionElem::Deref => None,\n+                _ => find_local(&proj.base)\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'b, 'c> Visitor<'tcx> for BorrowedLocalsVisitor<'b, 'c> {\n+    fn visit_rvalue(&mut self,\n+                    rvalue: &Rvalue<'tcx>,\n+                    location: Location) {\n+        if let Rvalue::Ref(_, _, ref place) = *rvalue {\n+            if let Some(local) = find_local(place) {\n+                self.sets.gen(&local);\n+            }\n+        }\n+\n+        self.super_rvalue(rvalue, location)\n+    }\n+}"}, {"sha": "c4942adc81493f3be76205576430e0cb9f97c928", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=56473562c5ca1937ffd667c2d258f0028c734eba", "patch": "@@ -33,6 +33,10 @@ mod storage_liveness;\n \n pub use self::storage_liveness::*;\n \n+mod borrowed_locals;\n+\n+pub use self::borrowed_locals::*;\n+\n #[allow(dead_code)]\n pub(super) mod borrows;\n "}, {"sha": "8156ff11f9bbe311176657de90526dcd9a6f57d2", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=56473562c5ca1937ffd667c2d258f0028c734eba", "patch": "@@ -30,6 +30,7 @@ pub use self::impls::{MaybeInitializedLvals, MaybeUninitializedLvals};\n pub use self::impls::{DefinitelyInitializedLvals, MovingOutStatements};\n pub use self::impls::EverInitializedLvals;\n pub use self::impls::borrows::{Borrows, BorrowData};\n+pub use self::impls::HaveBeenBorrowedLocals;\n pub(crate) use self::impls::borrows::{ActiveBorrows, Reservations, ReserveOrActivateIndex};\n pub use self::at_location::{FlowAtLocation, FlowsAtLocation};\n pub(crate) use self::drop_flag_effects::*;"}, {"sha": "812665f5fa49804d3b2648206e50496bce011977", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=56473562c5ca1937ffd667c2d258f0028c734eba", "patch": "@@ -78,7 +78,8 @@ use std::mem;\n use transform::{MirPass, MirSource};\n use transform::simplify;\n use transform::no_landing_pads::no_landing_pads;\n-use dataflow::{do_dataflow, DebugFormatted, MaybeStorageLive, state_for_location};\n+use dataflow::{do_dataflow, DebugFormatted, state_for_location};\n+use dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n \n pub struct StateTransform;\n \n@@ -369,17 +370,33 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 HashMap<BasicBlock, liveness::LocalSet>) {\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n-    let analysis = MaybeStorageLive::new(mir);\n+\n+    // Calculate when MIR locals have live storage. This gives us an upper bound of their\n+    // lifetimes.\n+    let storage_live_analysis = MaybeStorageLive::new(mir);\n     let storage_live =\n-        do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n+        do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, storage_live_analysis,\n                     |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n \n+    // Find the MIR locals which do not use StorageLive/StorageDead statements.\n+    // The storage of these locals are always live.\n     let mut ignored = StorageIgnored(IdxSetBuf::new_filled(mir.local_decls.len()));\n     ignored.visit_mir(mir);\n \n-    let mut borrowed_locals = BorrowedLocals(IdxSetBuf::new_empty(mir.local_decls.len()));\n-    borrowed_locals.visit_mir(mir);\n+    // Calculate the MIR locals which have been previously\n+    // borrowed (even if they are still active).\n+    // This is only used for immovable generators.\n+    let borrowed_locals = if !movable {\n+        let analysis = HaveBeenBorrowedLocals::new(mir);\n+        let result =\n+            do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n+                        |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n+        Some((analysis, result))\n+    } else {\n+        None\n+    };\n \n+    // Calculate the liveness of MIR locals ignoring borrows.\n     let mut set = liveness::LocalSet::new_empty(mir.local_decls.len());\n     let mut liveness = liveness::liveness_of_locals(mir, LivenessMode {\n         include_regular_use: true,\n@@ -396,24 +413,41 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 statement_index: data.statements.len(),\n             };\n \n-            let storage_liveness = state_for_location(loc, &analysis, &storage_live, mir);\n+            if let Some((ref analysis, ref result)) = borrowed_locals {\n+                let borrowed_locals = state_for_location(loc,\n+                                                         analysis,\n+                                                         result,\n+                                                         mir);\n+                // The `liveness` variable contains the liveness of MIR locals ignoring borrows.\n+                // This is correct for movable generators since borrows cannot live across\n+                // suspension points. However for immovable generators we need to account for\n+                // borrows, so we conseratively assume that all borrowed locals live forever.\n+                // To do this we just union our `liveness` result with `borrowed_locals`, which\n+                // contains all the locals which has been borrowed before this suspension point.\n+                // If a borrow is converted to a raw reference, we must also assume that it lives\n+                // forever. Note that the final liveness is still bounded by the storage liveness\n+                // of the local, which happens using the `intersect` operation below.\n+                liveness.outs[block].union(&borrowed_locals);\n+            }\n+\n+            let mut storage_liveness = state_for_location(loc,\n+                                                          &storage_live_analysis,\n+                                                          &storage_live,\n+                                                          mir);\n \n+            // Store the storage liveness for later use so we can restore the state\n+            // after a suspension point\n             storage_liveness_map.insert(block, storage_liveness.clone());\n \n-            let mut live_locals = storage_liveness;\n-\n             // Mark locals without storage statements as always having live storage\n-            live_locals.union(&ignored.0);\n+            storage_liveness.union(&ignored.0);\n \n-            if !movable {\n-                // For immovable generators we consider borrowed locals to always be live.\n-                // This effectively makes those locals use just the storage liveness.\n-                liveness.outs[block].union(&borrowed_locals.0);\n-            }\n+            // Locals live are live at this point only if they are used across\n+            // suspension points (the `liveness` variable)\n+            // and their storage is live (the `storage_liveness` variable)\n+            storage_liveness.intersect(&liveness.outs[block]);\n \n-            // Locals live are live at this point only if they are used across suspension points\n-            // and their storage is live\n-            live_locals.intersect(&liveness.outs[block]);\n+            let live_locals = storage_liveness;\n \n             // Add the locals life at this suspension point to the set of locals which live across\n             // any suspension points"}, {"sha": "2314533a6815318b685df6fbc7e8ef5929616716", "filename": "src/test/run-pass/generator/too-live-local-in-immovable-gen.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56473562c5ca1937ffd667c2d258f0028c734eba/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs?ref=56473562c5ca1937ffd667c2d258f0028c734eba", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators)]\n+\n+fn main() {\n+    unsafe {\n+        static move || {\n+            // Tests that the generator transformation finds out that `a` is not live\n+            // during the yield expression. Type checking will also compute liveness\n+            // and it should also find out that `a` is not live.\n+            // The compiler will panic if the generator transformation finds that\n+            // `a` is live and type checking finds it dead.\n+            let a = {\n+                yield ();\n+                4i32\n+            };\n+            &a;\n+        };\n+    }\n+}"}]}