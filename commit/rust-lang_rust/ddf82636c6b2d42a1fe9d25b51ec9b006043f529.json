{"sha": "ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZjgyNjM2YzZiMmQ0MmExZmU5ZDI1YjUxZWM5YjAwNjA0M2Y1Mjk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-26T15:52:20Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert build-manifest to use the new Tarball struct", "tree": {"sha": "ab56d09a23b18b6d1d538bc400665a4d2b0f6504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab56d09a23b18b6d1d538bc400665a4d2b0f6504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjeoACgkQPgar6Auq\n8ZzNKg/8DVdxIkzBpB98LlB9w6zz2rl0kPMAYScbLRHHCCIF5h1NsvawVuoATX9C\nCoJffQFf1ziiIijQg7TreGKmk6T5GOC8R7a9PCiZwC2XkgxUIzs/8x3TkUHk5KOb\nEhu6zh71rAnTaiCNnbhiknDywDYGia6lYOeDMI9DPMlXFs9ZPablUiNOEW6j0tEF\nrlq9qY77R1zVgujnNfWeWzsjHUuAVepXkvj1aWYoXEMj8VFG6Vm2RFt1tH2ZwMqG\nwNso6MrO7e5GmPLwLn3DiioQ09/mFTKVqxBJCDGqiTQnuHhIqR3GTDhoWnhpAfPw\nTLe2aaaQwQbCQ259wuulMX0dxhNqjnLR9Dh1K+VEMhYuT2VKuhCyzcM/ChzFYSM8\nZJYdj568xMSDiMtTJkHzZksdOpE/+eR9RiygTp4MA0hflK5fZczYmRGOsSwYqrLH\n33p0z72IduMTccygDZXccxZAHSe173xO9beqJ1qaMo94i7dro29PHFlEvixxdOFp\nA2Enlxt/QSTRZzxf5R8604xsX0DBmD15tKBKgfZtXz9UoIV+VTRbQAM043knbDRd\n38VQrefHGpKvv+OYbs8ydmXk7qb27qBJKUljUpFxPxyGQKgieXcWP9oqsjHs/FJv\nwhC52mYbgjXK+at4W1pQSvOMz1khxz8nACuMgE6QNDHy3t96TqA=\n=YyEB\n-----END PGP SIGNATURE-----", "payload": "tree ab56d09a23b18b6d1d538bc400665a4d2b0f6504\nparent 3ffea60dd5a2260004cc4f487401ae7c7db1aa0e\nauthor Pietro Albini <pietro@pietroalbini.org> 1606405940 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert build-manifest to use the new Tarball struct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "html_url": "https://github.com/rust-lang/rust/commit/ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ffea60dd5a2260004cc4f487401ae7c7db1aa0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffea60dd5a2260004cc4f487401ae7c7db1aa0e", "html_url": "https://github.com/rust-lang/rust/commit/3ffea60dd5a2260004cc4f487401ae7c7db1aa0e"}], "stats": {"total": 234, "additions": 146, "deletions": 88}, "files": [{"sha": "0ec896ed2115eb524a048bdc2a7356091012da50", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 21, "deletions": 88, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "patch": "@@ -19,6 +19,7 @@ use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::TargetSelection;\n+use crate::tarball::{OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, timeit};\n use crate::{Compiler, DependencyType, Mode, LLVM_TOOLS};\n@@ -2517,68 +2518,36 @@ impl Step for RustDev {\n \n         builder.info(&format!(\"Dist RustDev ({})\", target));\n         let _time = timeit(builder);\n-        let src = builder.src.join(\"src/llvm-project/llvm\");\n-        let name = pkgname(builder, \"rust-dev\");\n-\n-        let tmp = tmpdir(builder);\n-        let image = tmp.join(\"rust-dev-image\");\n-        drop(fs::remove_dir_all(&image));\n \n-        // Prepare the image directory\n-        let dst_bindir = image.join(\"bin\");\n-        t!(fs::create_dir_all(&dst_bindir));\n+        let mut tarball = Tarball::new(builder, \"rust-dev\", &target.triple);\n+        tarball.set_overlay(OverlayKind::LLVM);\n \n         let src_bindir = builder.llvm_out(target).join(\"bin\");\n-        let install_bin =\n-            |name| builder.install(&src_bindir.join(exe(name, target)), &dst_bindir, 0o755);\n-        install_bin(\"llvm-config\");\n-        install_bin(\"llvm-ar\");\n-        install_bin(\"llvm-objdump\");\n-        install_bin(\"llvm-profdata\");\n-        install_bin(\"llvm-bcanalyzer\");\n-        install_bin(\"llvm-cov\");\n-        install_bin(\"llvm-dwp\");\n-        builder.install(&builder.llvm_filecheck(target), &dst_bindir, 0o755);\n+        for bin in &[\n+            \"llvm-config\",\n+            \"llvm-ar\",\n+            \"llvm-objdump\",\n+            \"llvm-profdata\",\n+            \"llvm-bcanalyzer\",\n+            \"llvm-cov\",\n+            \"llvm-dwp\",\n+        ] {\n+            tarball.add_file(src_bindir.join(exe(bin, target)), \"bin\", 0o755);\n+        }\n+        tarball.add_file(&builder.llvm_filecheck(target), \"bin\", 0o755);\n \n         // Copy the include directory as well; needed mostly to build\n         // librustc_llvm properly (e.g., llvm-config.h is in here). But also\n         // just broadly useful to be able to link against the bundled LLVM.\n-        builder.cp_r(&builder.llvm_out(target).join(\"include\"), &image.join(\"include\"));\n+        tarball.add_dir(&builder.llvm_out(target).join(\"include\"), \".\");\n \n         // Copy libLLVM.so to the target lib dir as well, so the RPATH like\n         // `$ORIGIN/../lib` can find it. It may also be used as a dependency\n         // of `rustc-dev` to support the inherited `-lLLVM` when using the\n         // compiler libraries.\n-        maybe_install_llvm(builder, target, &image.join(\"lib\"));\n-\n-        // Prepare the overlay\n-        let overlay = tmp.join(\"rust-dev-overlay\");\n-        drop(fs::remove_dir_all(&overlay));\n-        builder.create_dir(&overlay);\n-        builder.install(&src.join(\"README.txt\"), &overlay, 0o644);\n-        builder.install(&src.join(\"LICENSE.TXT\"), &overlay, 0o644);\n-        builder.create(&overlay.join(\"version\"), &builder.rust_version());\n+        maybe_install_llvm(builder, target, &tarball.image_dir().join(\"lib\"));\n \n-        // Generate the installer tarball\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=rust-dev-installed.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(\"--non-installed-overlay\")\n-            .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(\"--component-name=rust-dev\");\n-\n-        builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n+        Some(tarball.generate())\n     }\n }\n \n@@ -2607,45 +2576,9 @@ impl Step for BuildManifest {\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         let build_manifest = builder.tool_exe(Tool::BuildManifest);\n \n-        let name = pkgname(builder, \"build-manifest\");\n-        let tmp = tmpdir(builder);\n-\n-        // Prepare the image.\n-        let image = tmp.join(\"build-manifest-image\");\n-        let image_bin = image.join(\"bin\");\n-        let _ = fs::remove_dir_all(&image);\n-        t!(fs::create_dir_all(&image_bin));\n-        builder.install(&build_manifest, &image_bin, 0o755);\n-\n-        // Prepare the overlay.\n-        let overlay = tmp.join(\"build-manifest-overlay\");\n-        let _ = fs::remove_dir_all(&overlay);\n-        builder.create_dir(&overlay);\n-        builder.create(&overlay.join(\"version\"), &builder.rust_version());\n-        for file in &[\"COPYRIGHT\", \"LICENSE-APACHE\", \"LICENSE-MIT\", \"README.md\"] {\n-            builder.install(&builder.src.join(file), &overlay, 0o644);\n-        }\n-\n-        // Create the final tarball.\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=build-manifest installed.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(\"--non-installed-overlay\")\n-            .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, self.target.triple))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(\"--component-name=build-manifest\");\n-\n-        builder.run(&mut cmd);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, self.target.triple))\n+        let tarball = Tarball::new(builder, \"build-manifest\", &self.target.triple);\n+        tarball.add_file(&build_manifest, \"bin\", 0o755);\n+        tarball.generate()\n     }\n }\n "}, {"sha": "3b51bf272fcba0da454eefef3dd9163adb644612", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "patch": "@@ -142,6 +142,7 @@ mod native;\n mod run;\n mod sanity;\n mod setup;\n+mod tarball;\n mod test;\n mod tool;\n mod toolstate;"}, {"sha": "728d1344349520dffd7873558f37f3702b9d2616", "filename": "src/bootstrap/tarball.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf82636c6b2d42a1fe9d25b51ec9b006043f529/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=ddf82636c6b2d42a1fe9d25b51ec9b006043f529", "patch": "@@ -0,0 +1,124 @@\n+use std::path::{Path, PathBuf};\n+\n+use build_helper::t;\n+\n+use crate::builder::Builder;\n+\n+#[derive(Copy, Clone)]\n+pub(crate) enum OverlayKind {\n+    Rust,\n+    LLVM,\n+}\n+\n+impl OverlayKind {\n+    fn included_files(&self) -> &[&str] {\n+        match self {\n+            OverlayKind::Rust => &[\"COPYRIGHT\", \"LICENSE-APACHE\", \"LICENSE-MIT\", \"README.md\"],\n+            OverlayKind::LLVM => {\n+                &[\"src/llvm-project/llvm/LICENSE.TXT\", \"src/llvm-project/llvm/README.txt\"]\n+            }\n+        }\n+    }\n+}\n+\n+pub(crate) struct Tarball<'a> {\n+    builder: &'a Builder<'a>,\n+\n+    pkgname: String,\n+    component: String,\n+    target: String,\n+    overlay: OverlayKind,\n+\n+    temp_dir: PathBuf,\n+    image_dir: PathBuf,\n+    overlay_dir: PathBuf,\n+    work_dir: PathBuf,\n+}\n+\n+impl<'a> Tarball<'a> {\n+    pub(crate) fn new(builder: &'a Builder<'a>, component: &str, target: &str) -> Self {\n+        let pkgname = crate::dist::pkgname(builder, component);\n+\n+        let temp_dir = builder.out.join(\"tmp\").join(\"tarball\").join(component);\n+        let _ = std::fs::remove_dir_all(&temp_dir);\n+\n+        let image_dir = temp_dir.join(\"image\");\n+        let overlay_dir = temp_dir.join(\"overlay\");\n+        let work_dir = temp_dir.join(\"work\");\n+\n+        Self {\n+            builder,\n+\n+            pkgname,\n+            component: component.into(),\n+            target: target.into(),\n+            overlay: OverlayKind::Rust,\n+\n+            temp_dir,\n+            image_dir,\n+            overlay_dir,\n+            work_dir,\n+        }\n+    }\n+\n+    pub(crate) fn set_overlay(&mut self, overlay: OverlayKind) {\n+        self.overlay = overlay;\n+    }\n+\n+    pub(crate) fn image_dir(&self) -> &Path {\n+        t!(std::fs::create_dir_all(&self.image_dir));\n+        &self.image_dir\n+    }\n+\n+    pub(crate) fn add_file(&self, src: impl AsRef<Path>, destdir: impl AsRef<Path>, perms: u32) {\n+        // create_dir_all fails to create `foo/bar/.`, so when the destination is \".\" this simply\n+        // uses the base directory as the destination directory.\n+        let destdir = if destdir.as_ref() == Path::new(\".\") {\n+            self.image_dir.clone()\n+        } else {\n+            self.image_dir.join(destdir.as_ref())\n+        };\n+\n+        t!(std::fs::create_dir_all(&destdir));\n+        self.builder.install(src.as_ref(), &destdir, perms);\n+    }\n+\n+    pub(crate) fn add_dir(&self, src: impl AsRef<Path>, destdir: impl AsRef<Path>) {\n+        t!(std::fs::create_dir_all(destdir.as_ref()));\n+        self.builder.cp_r(\n+            src.as_ref(),\n+            &self.image_dir.join(destdir.as_ref()).join(src.as_ref().file_name().unwrap()),\n+        );\n+    }\n+\n+    pub(crate) fn generate(self) -> PathBuf {\n+        t!(std::fs::create_dir_all(&self.overlay_dir));\n+        self.builder.create(&self.overlay_dir.join(\"version\"), &self.builder.rust_version());\n+        for file in self.overlay.included_files() {\n+            self.builder.install(&self.builder.src.join(file), &self.overlay_dir, 0o644);\n+        }\n+\n+        let distdir = crate::dist::distdir(self.builder);\n+        let mut cmd = self.builder.tool_cmd(crate::tool::Tool::RustInstaller);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(format!(\"--success-message={} installed.\", self.component))\n+            .arg(\"--image-dir\")\n+            .arg(self.image_dir)\n+            .arg(\"--work-dir\")\n+            .arg(self.work_dir)\n+            .arg(\"--output-dir\")\n+            .arg(&distdir)\n+            .arg(\"--non-installed-overlay\")\n+            .arg(self.overlay_dir)\n+            .arg(format!(\"--package-name={}-{}\", self.pkgname, self.target))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(format!(\"--component-name={}\", self.component));\n+        self.builder.run(&mut cmd);\n+\n+        t!(std::fs::remove_dir_all(&self.temp_dir));\n+\n+        distdir.join(format!(\"{}-{}.tar.gz\", self.pkgname, self.target))\n+    }\n+}"}]}