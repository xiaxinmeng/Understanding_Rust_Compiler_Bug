{"sha": "ec08128882b165a93b3fd1f99c9606ad5e09b3dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDgxMjg4ODJiMTY1YTkzYjNmZDFmOTljOTYwNmFkNWUwOWIzZGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-15T12:46:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T12:46:22Z"}, "message": "Rollup merge of #36463 - eugene-bulkin:duration-checked-ops, r=alexcrichton\n\nAdd checked operation methods to Duration\n\nAddresses #35774.", "tree": {"sha": "2d11fa4312f5a033d60aa543bdca511d7a3575f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d11fa4312f5a033d60aa543bdca511d7a3575f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec08128882b165a93b3fd1f99c9606ad5e09b3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec08128882b165a93b3fd1f99c9606ad5e09b3dc", "html_url": "https://github.com/rust-lang/rust/commit/ec08128882b165a93b3fd1f99c9606ad5e09b3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec08128882b165a93b3fd1f99c9606ad5e09b3dc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9dc539df56e31d1e2653c64565baec12b473c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9dc539df56e31d1e2653c64565baec12b473c2", "html_url": "https://github.com/rust-lang/rust/commit/0c9dc539df56e31d1e2653c64565baec12b473c2"}, {"sha": "b6321bd13362d69dc0bc4a1ca8416d58b0ff63d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6321bd13362d69dc0bc4a1ca8416d58b0ff63d2", "html_url": "https://github.com/rust-lang/rust/commit/b6321bd13362d69dc0bc4a1ca8416d58b0ff63d2"}], "stats": {"total": 217, "additions": 182, "deletions": 35}, "files": [{"sha": "246c57ab238713e2b1b7056e3bcb327cddd581cf", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 182, "deletions": 35, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/ec08128882b165a93b3fd1f99c9606ad5e09b3dc/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec08128882b165a93b3fd1f99c9606ad5e09b3dc/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=ec08128882b165a93b3fd1f99c9606ad5e09b3dc", "patch": "@@ -97,22 +97,154 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn subsec_nanos(&self) -> u32 { self.nanos }\n+\n+    /// Checked duration addition. Computes `self + other`, returning `None`\n+    /// if overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(duration_checked_ops)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::new(0, 1)));\n+    /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(std::u64::MAX, 0)), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_add(self, rhs: Duration) -> Option<Duration> {\n+        if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n+            let mut nanos = self.nanos + rhs.nanos;\n+            if nanos >= NANOS_PER_SEC {\n+                nanos -= NANOS_PER_SEC;\n+                if let Some(new_secs) = secs.checked_add(1) {\n+                    secs = new_secs;\n+                } else {\n+                    return None;\n+                }\n+            }\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration {\n+                secs: secs,\n+                nanos: nanos,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Checked duration subtraction. Computes `self + other`, returning `None`\n+    /// if the result would be negative or if underflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(duration_checked_ops)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(0, 1).checked_sub(Duration::new(0, 0)), Some(Duration::new(0, 1)));\n+    /// assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n+        if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n+            let nanos = if self.nanos >= rhs.nanos {\n+                self.nanos - rhs.nanos\n+            } else {\n+                if let Some(sub_secs) = secs.checked_sub(1) {\n+                    secs = sub_secs;\n+                    self.nanos + NANOS_PER_SEC - rhs.nanos\n+                } else {\n+                    return None;\n+                }\n+            };\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration { secs: secs, nanos: nanos })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Checked duration multiplication. Computes `self * other`, returning\n+    /// `None` if underflow or overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(duration_checked_ops)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2)));\n+    /// assert_eq!(Duration::new(std::u64::MAX - 1, 0).checked_mul(2), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_mul(self, rhs: u32) -> Option<Duration> {\n+        // Multiply nanoseconds as u64, because it cannot overflow that way.\n+        let total_nanos = self.nanos as u64 * rhs as u64;\n+        let extra_secs = total_nanos / (NANOS_PER_SEC as u64);\n+        let nanos = (total_nanos % (NANOS_PER_SEC as u64)) as u32;\n+        if let Some(secs) = self.secs\n+            .checked_mul(rhs as u64)\n+            .and_then(|s| s.checked_add(extra_secs)) {\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration {\n+                secs: secs,\n+                nanos: nanos,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Checked duration division. Computes `self / other`, returning `None`\n+    /// if `other == 0` or the operation results in underflow or overflow.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(duration_checked_ops)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n+    /// assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n+    /// assert_eq!(Duration::new(2, 0).checked_div(0), None);\n+    /// ```\n+    #[unstable(feature = \"duration_checked_ops\", issue = \"35774\")]\n+    #[inline]\n+    pub fn checked_div(self, rhs: u32) -> Option<Duration> {\n+        if rhs != 0 {\n+            let secs = self.secs / (rhs as u64);\n+            let carry = self.secs - secs * (rhs as u64);\n+            let extra_nanos = carry * (NANOS_PER_SEC as u64) / (rhs as u64);\n+            let nanos = self.nanos / rhs + (extra_nanos as u32);\n+            debug_assert!(nanos < NANOS_PER_SEC);\n+            Some(Duration { secs: secs, nanos: nanos })\n+        } else {\n+            None\n+        }\n+    }\n }\n \n #[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Add for Duration {\n     type Output = Duration;\n \n     fn add(self, rhs: Duration) -> Duration {\n-        let mut secs = self.secs.checked_add(rhs.secs)\n-                           .expect(\"overflow when adding durations\");\n-        let mut nanos = self.nanos + rhs.nanos;\n-        if nanos >= NANOS_PER_SEC {\n-            nanos -= NANOS_PER_SEC;\n-            secs = secs.checked_add(1).expect(\"overflow when adding durations\");\n-        }\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_add(rhs).expect(\"overflow when adding durations\")\n     }\n }\n \n@@ -128,17 +260,7 @@ impl Sub for Duration {\n     type Output = Duration;\n \n     fn sub(self, rhs: Duration) -> Duration {\n-        let mut secs = self.secs.checked_sub(rhs.secs)\n-                           .expect(\"overflow when subtracting durations\");\n-        let nanos = if self.nanos >= rhs.nanos {\n-            self.nanos - rhs.nanos\n-        } else {\n-            secs = secs.checked_sub(1)\n-                       .expect(\"overflow when subtracting durations\");\n-            self.nanos + NANOS_PER_SEC - rhs.nanos\n-        };\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_sub(rhs).expect(\"overflow when subtracting durations\")\n     }\n }\n \n@@ -154,15 +276,7 @@ impl Mul<u32> for Duration {\n     type Output = Duration;\n \n     fn mul(self, rhs: u32) -> Duration {\n-        // Multiply nanoseconds as u64, because it cannot overflow that way.\n-        let total_nanos = self.nanos as u64 * rhs as u64;\n-        let extra_secs = total_nanos / (NANOS_PER_SEC as u64);\n-        let nanos = (total_nanos % (NANOS_PER_SEC as u64)) as u32;\n-        let secs = self.secs.checked_mul(rhs as u64)\n-                       .and_then(|s| s.checked_add(extra_secs))\n-                       .expect(\"overflow when multiplying duration\");\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_mul(rhs).expect(\"overflow when multiplying duration by scalar\")\n     }\n }\n \n@@ -178,12 +292,7 @@ impl Div<u32> for Duration {\n     type Output = Duration;\n \n     fn div(self, rhs: u32) -> Duration {\n-        let secs = self.secs / (rhs as u64);\n-        let carry = self.secs - secs * (rhs as u64);\n-        let extra_nanos = carry * (NANOS_PER_SEC as u64) / (rhs as u64);\n-        let nanos = self.nanos / rhs + (extra_nanos as u32);\n-        debug_assert!(nanos < NANOS_PER_SEC);\n-        Duration { secs: secs, nanos: nanos }\n+        self.checked_div(rhs).expect(\"divide by zero error when dividing duration by scalar\")\n     }\n }\n \n@@ -234,6 +343,15 @@ mod tests {\n                    Duration::new(1, 1));\n     }\n \n+    #[test]\n+    fn checked_add() {\n+        assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)),\n+                   Some(Duration::new(0, 1)));\n+        assert_eq!(Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n+                   Some(Duration::new(1, 1)));\n+        assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::u64::MAX, 0)), None);\n+    }\n+\n     #[test]\n     fn sub() {\n         assert_eq!(Duration::new(0, 1) - Duration::new(0, 0),\n@@ -244,6 +362,18 @@ mod tests {\n                    Duration::new(0, 999_999_999));\n     }\n \n+    #[test]\n+    fn checked_sub() {\n+        let zero = Duration::new(0, 0);\n+        let one_nano = Duration::new(0, 1);\n+        let one_sec = Duration::new(1, 0);\n+        assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n+        assert_eq!(one_sec.checked_sub(one_nano),\n+                   Some(Duration::new(0, 999_999_999)));\n+        assert_eq!(zero.checked_sub(one_nano), None);\n+        assert_eq!(zero.checked_sub(one_sec), None);\n+    }\n+\n     #[test] #[should_panic]\n     fn sub_bad1() {\n         Duration::new(0, 0) - Duration::new(0, 1);\n@@ -263,11 +393,28 @@ mod tests {\n                    Duration::new(2000, 4000));\n     }\n \n+    #[test]\n+    fn checked_mul() {\n+        assert_eq!(Duration::new(0, 1).checked_mul(2), Some(Duration::new(0, 2)));\n+        assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n+        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n+        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000),\n+                   Some(Duration::new(2000, 4000)));\n+        assert_eq!(Duration::new(::u64::MAX - 1, 0).checked_mul(2), None);\n+    }\n+\n     #[test]\n     fn div() {\n         assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));\n         assert_eq!(Duration::new(1, 1) / 3, Duration::new(0, 333_333_333));\n         assert_eq!(Duration::new(99, 999_999_000) / 100,\n                    Duration::new(0, 999_999_990));\n     }\n+\n+    #[test]\n+    fn checked_div() {\n+        assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n+        assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n+        assert_eq!(Duration::new(2, 0).checked_div(0), None);\n+    }\n }"}]}