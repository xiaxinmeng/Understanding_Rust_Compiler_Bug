{"sha": "8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTY2MTgzZmU1MTI5ZWEyYTU1YTk4OThhYzFiZDBmMTZmMzU3M2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-28T06:12:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-05T08:48:20Z"}, "message": "Remove the __log function for __log_level\n\nAlso redefine all of the standard logging macros to use more rust code instead\nof custom LLVM translation code. This makes them a bit easier to understand, but\nalso more flexibile for future types of logging.\n\nAdditionally, this commit removes the LogType language item in preparation for\nchanging how logging is performed.", "tree": {"sha": "8e222f4e505499610a935accf49b73e5ee8e2a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e222f4e505499610a935accf49b73e5ee8e2a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "html_url": "https://github.com/rust-lang/rust/commit/8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3ae1d0e26c9ae0906dc57daa14bb9e4627e3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3ae1d0e26c9ae0906dc57daa14bb9e4627e3c8", "html_url": "https://github.com/rust-lang/rust/commit/3c3ae1d0e26c9ae0906dc57daa14bb9e4627e3c8"}], "stats": {"total": 312, "additions": 116, "deletions": 196}, "files": [{"sha": "20e422e5df1a2ebde961ed0dee3c76d1247d3dd6", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -389,7 +389,6 @@ impl CFGBuilder {\n                 self.straightline(expr, pred, [r, l])\n             }\n \n-            ast::ExprLog(l, r) |\n             ast::ExprIndex(_, l, r) |\n             ast::ExprBinary(_, _, l, r) => { // NB: && and || handled earlier\n                 self.straightline(expr, pred, [l, r])\n@@ -405,6 +404,7 @@ impl CFGBuilder {\n                 self.straightline(expr, pred, [e])\n             }\n \n+            ast::ExprLogLevel |\n             ast::ExprMac(*) |\n             ast::ExprInlineAsm(*) |\n             ast::ExprSelf |"}, {"sha": "0c0a839512470e644748168549ff76ad935c9346", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -702,12 +702,12 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n                 join_bits(&self.dfcx.oper, temp, in_out);\n             }\n \n-            ast::ExprLog(l, r) |\n             ast::ExprIndex(_, l, r) |\n             ast::ExprBinary(_, _, l, r) => {\n                 self.walk_exprs([l, r], in_out, loop_scopes);\n             }\n \n+            ast::ExprLogLevel |\n             ast::ExprLit(*) |\n             ast::ExprPath(*) |\n             ast::ExprSelf => {"}, {"sha": "41bdba49845b5502c803028898e04ffe24a4a2b6", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -59,7 +59,6 @@ pub enum LangItem {\n \n     StrEqFnLangItem,                   // 19\n     UniqStrEqFnLangItem,               // 20\n-    LogTypeFnLangItem,                 // 21\n     FailFnLangItem,                    // 22\n     FailBoundsCheckFnLangItem,         // 23\n     ExchangeMallocFnLangItem,          // 24\n@@ -238,9 +237,6 @@ impl LanguageItems {\n     pub fn uniq_str_eq_fn(&self) -> Option<DefId> {\n         self.items[UniqStrEqFnLangItem as uint]\n     }\n-    pub fn log_type_fn(&self) -> Option<DefId> {\n-        self.items[LogTypeFnLangItem as uint]\n-    }\n     pub fn fail_fn(&self) -> Option<DefId> {\n         self.items[FailFnLangItem as uint]\n     }\n@@ -357,7 +353,6 @@ impl<'self> LanguageItemCollector<'self> {\n \n         item_refs.insert(@\"str_eq\", StrEqFnLangItem as uint);\n         item_refs.insert(@\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n-        item_refs.insert(@\"log_type\", LogTypeFnLangItem as uint);\n         item_refs.insert(@\"fail_\", FailFnLangItem as uint);\n         item_refs.insert(@\"fail_bounds_check\",\n                          FailBoundsCheckFnLangItem as uint);"}, {"sha": "27f21385e9bf1a924bebb6b414016929bee2d490", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -526,7 +526,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: @Expr, this: @mut IrMaps) {\n \n       // otherwise, live nodes are not required:\n       ExprIndex(*) | ExprField(*) | ExprVstore(*) | ExprVec(*) |\n-      ExprCall(*) | ExprMethodCall(*) | ExprTup(*) | ExprLog(*) |\n+      ExprCall(*) | ExprMethodCall(*) | ExprTup(*) | ExprLogLevel |\n       ExprBinary(*) | ExprAddrOf(*) |\n       ExprDoBody(*) | ExprCast(*) | ExprUnary(*) | ExprBreak(_) |\n       ExprAgain(_) | ExprLit(_) | ExprRet(*) | ExprBlock(*) |\n@@ -1217,7 +1217,6 @@ impl Liveness {\n             self.propagate_through_expr(l, ln)\n           }\n \n-          ExprLog(l, r) |\n           ExprIndex(_, l, r) |\n           ExprBinary(_, _, l, r) => {\n             self.propagate_through_exprs([l, r], succ)\n@@ -1240,6 +1239,7 @@ impl Liveness {\n             }\n           }\n \n+          ExprLogLevel |\n           ExprLit(*) => {\n             succ\n           }\n@@ -1496,7 +1496,7 @@ fn check_expr(vt: &mut ErrorCheckVisitor, expr: @Expr, this: @Liveness) {\n       // no correctness conditions related to liveness\n       ExprCall(*) | ExprMethodCall(*) | ExprIf(*) | ExprMatch(*) |\n       ExprWhile(*) | ExprLoop(*) | ExprIndex(*) | ExprField(*) |\n-      ExprVstore(*) | ExprVec(*) | ExprTup(*) | ExprLog(*) |\n+      ExprVstore(*) | ExprVec(*) | ExprTup(*) | ExprLogLevel |\n       ExprBinary(*) | ExprDoBody(*) |\n       ExprCast(*) | ExprUnary(*) | ExprRet(*) | ExprBreak(*) |\n       ExprAgain(*) | ExprLit(_) | ExprBlock(*) |"}, {"sha": "19e737572950c9b30932cc014683404b97fefd97", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -428,7 +428,7 @@ impl mem_categorization_ctxt {\n           ast::ExprDoBody(*) | ast::ExprUnary(*) |\n           ast::ExprMethodCall(*) | ast::ExprCast(*) | ast::ExprVstore(*) |\n           ast::ExprVec(*) | ast::ExprTup(*) | ast::ExprIf(*) |\n-          ast::ExprLog(*) | ast::ExprBinary(*) | ast::ExprWhile(*) |\n+          ast::ExprLogLevel | ast::ExprBinary(*) | ast::ExprWhile(*) |\n           ast::ExprBlock(*) | ast::ExprLoop(*) | ast::ExprMatch(*) |\n           ast::ExprLit(*) | ast::ExprBreak(*) | ast::ExprMac(*) |\n           ast::ExprAgain(*) | ast::ExprStruct(*) | ast::ExprRepeat(*) |"}, {"sha": "3b577cf9765335395a2929173ee35437c6d002fa", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -480,6 +480,7 @@ impl VisitContext {\n                 self.use_expr(base, Read, visitor);\n             }\n \n+            ExprLogLevel |\n             ExprInlineAsm(*) |\n             ExprBreak(*) |\n             ExprAgain(*) |\n@@ -489,11 +490,6 @@ impl VisitContext {\n                 self.consume_block(blk, visitor);\n             }\n \n-            ExprLog(a_expr, b_expr) => {\n-                self.consume_expr(a_expr, visitor);\n-                self.use_expr(b_expr, Read, visitor);\n-            }\n-\n             ExprWhile(cond_expr, ref blk) => {\n                 self.consume_expr(cond_expr, visitor);\n                 self.consume_block(blk, visitor);"}, {"sha": "db4b85605ca3e53d4e0c762b2875c338290a1b3f", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -8,13 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::c_str::ToCStr;\n-\n-use back::link;\n-use lib;\n use lib::llvm::*;\n use middle::lang_items::{FailFnLangItem, FailBoundsCheckFnLangItem};\n-use middle::lang_items::LogTypeFnLangItem;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n@@ -28,7 +23,6 @@ use middle::trans::type_::Type;\n \n use syntax::ast;\n use syntax::ast::Ident;\n-use syntax::ast_map::path_mod;\n use syntax::ast_util;\n use syntax::codemap::Span;\n \n@@ -206,72 +200,6 @@ pub fn trans_loop(bcx:@mut Block,\n     return next_bcx;\n }\n \n-pub fn trans_log(log_ex: &ast::Expr,\n-                 lvl: @ast::Expr,\n-                 bcx: @mut Block,\n-                 e: @ast::Expr) -> @mut Block {\n-    let _icx = push_ctxt(\"trans_log\");\n-    let ccx = bcx.ccx();\n-    let mut bcx = bcx;\n-    if ty::type_is_bot(expr_ty(bcx, lvl)) {\n-       return expr::trans_into(bcx, lvl, expr::Ignore);\n-    }\n-\n-    let (modpath, modname) = {\n-        let path = &mut bcx.fcx.path;\n-        let mut modpath = ~[path_mod(ccx.sess.ident_of(ccx.link_meta.name))];\n-        for e in path.iter() {\n-            match *e {\n-                path_mod(_) => { modpath.push(*e) }\n-                _ => {}\n-            }\n-        }\n-        let modname = path_str(ccx.sess, modpath);\n-        (modpath, modname)\n-    };\n-\n-    let global = if ccx.module_data.contains_key(&modname) {\n-        ccx.module_data.get_copy(&modname)\n-    } else {\n-        let s = link::mangle_internal_name_by_path_and_seq(\n-            ccx, modpath, \"loglevel\");\n-        let global;\n-        unsafe {\n-            global = do s.with_c_str |buf| {\n-                llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n-            };\n-            llvm::LLVMSetGlobalConstant(global, False);\n-            llvm::LLVMSetInitializer(global, C_null(Type::i32()));\n-            lib::llvm::SetLinkage(global, lib::llvm::InternalLinkage);\n-        }\n-        ccx.module_data.insert(modname, global);\n-        global\n-    };\n-    let current_level = Load(bcx, global);\n-    let level = unpack_result!(bcx, {\n-        do with_scope_result(bcx, lvl.info(), \"level\") |bcx| {\n-            expr::trans_to_datum(bcx, lvl).to_result()\n-        }\n-    });\n-\n-    let llenabled = ICmp(bcx, lib::llvm::IntUGE, current_level, level);\n-    do with_cond(bcx, llenabled) |bcx| {\n-        do with_scope(bcx, log_ex.info(), \"log\") |bcx| {\n-            let mut bcx = bcx;\n-\n-            // Translate the value to be logged\n-            let val_datum = unpack_datum!(bcx, expr::trans_to_datum(bcx, e));\n-\n-            // Call the polymorphic log function\n-            let val = val_datum.to_ref_llval(bcx);\n-            let did = langcall(bcx, Some(e.span), \"\", LogTypeFnLangItem);\n-            let bcx = callee::trans_lang_call_with_type_params(\n-                bcx, did, [level, val], [val_datum.ty], expr::Ignore);\n-            bcx\n-        }\n-    }\n-}\n-\n pub fn trans_break_cont(bcx: @mut Block,\n                         opt_label: Option<Ident>,\n                         to_end: bool)"}, {"sha": "d8f77b9e3e7148c659ece6893dd71442ce4573dc", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -1990,6 +1990,7 @@ fn populate_scope_map(cx: &mut CrateContext,\n         scope_map.insert(exp.id, scope_stack.last().scope_metadata);\n \n         match exp.node {\n+            ast::ExprLogLevel |\n             ast::ExprSelf     |\n             ast::ExprLit(_)   |\n             ast::ExprBreak(_) |\n@@ -2028,7 +2029,6 @@ fn populate_scope_map(cx: &mut CrateContext,\n             }\n \n             ast::ExprAssign(@ref sub_exp1, @ref sub_exp2)    |\n-            ast::ExprLog(@ref sub_exp1, @ref sub_exp2)       |\n             ast::ExprRepeat(@ref sub_exp1, @ref sub_exp2, _) => {\n                 walk_expr(cx, sub_exp1, scope_stack, scope_map);\n                 walk_expr(cx, sub_exp2, scope_stack, scope_map);"}, {"sha": "574add624d51e6f192e2573e0c22037fc19000b4", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -115,7 +115,8 @@ return type, such as `while` loops or assignments (`a = b`).\n \n \n use back::abi;\n-use lib::llvm::{ValueRef, llvm, SetLinkage, ExternalLinkage};\n+use back::link;\n+use lib::llvm::{ValueRef, llvm, SetLinkage, ExternalLinkage, False};\n use lib;\n use metadata::csearch;\n use middle::trans::_match;\n@@ -150,6 +151,7 @@ use std::hashmap::HashMap;\n use std::vec;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n+use syntax::ast_map::path_mod;\n use syntax::codemap;\n \n // Destinations\n@@ -578,6 +580,9 @@ fn trans_rvalue_datum_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> DatumBloc\n         ast::ExprParen(e) => {\n             return trans_rvalue_datum_unadjusted(bcx, e);\n         }\n+        ast::ExprLogLevel => {\n+            return trans_log_level(bcx);\n+        }\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,\n@@ -608,9 +613,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: @mut Block, expr: @ast::Expr) -> @mut Block\n         ast::ExprRet(ex) => {\n             return controlflow::trans_ret(bcx, ex);\n         }\n-        ast::ExprLog(lvl, a) => {\n-            return controlflow::trans_log(expr, lvl, bcx, a);\n-        }\n         ast::ExprWhile(cond, ref body) => {\n             return controlflow::trans_while(bcx, cond, body);\n         }\n@@ -1755,3 +1757,41 @@ fn trans_assign_op(bcx: @mut Block,\n fn shorten(x: &str) -> @str {\n     (if x.char_len() > 60 {x.slice_chars(0, 60)} else {x}).to_managed()\n }\n+\n+pub fn trans_log_level(bcx: @mut Block) -> DatumBlock {\n+    let _icx = push_ctxt(\"trans_log_level\");\n+    let ccx = bcx.ccx();\n+\n+    let (modpath, modname) = {\n+        let path = &mut bcx.fcx.path;\n+        let mut modpath = ~[path_mod(ccx.sess.ident_of(ccx.link_meta.name))];\n+        for e in path.iter() {\n+            match *e {\n+                path_mod(_) => { modpath.push(*e) }\n+                _ => {}\n+            }\n+        }\n+        let modname = path_str(ccx.sess, modpath);\n+        (modpath, modname)\n+    };\n+\n+    let global = if ccx.module_data.contains_key(&modname) {\n+        ccx.module_data.get_copy(&modname)\n+    } else {\n+        let s = link::mangle_internal_name_by_path_and_seq(\n+            ccx, modpath, \"loglevel\");\n+        let global;\n+        unsafe {\n+            global = do s.with_c_str |buf| {\n+                llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n+            };\n+            llvm::LLVMSetGlobalConstant(global, False);\n+            llvm::LLVMSetInitializer(global, C_null(Type::i32()));\n+            lib::llvm::SetLinkage(global, lib::llvm::InternalLinkage);\n+        }\n+        ccx.module_data.insert(modname, global);\n+        global\n+    };\n+\n+    return immediate_rvalue_bcx(bcx, Load(bcx, global), ty::mk_u32());\n+}"}, {"sha": "1cccca963081141f02673a5f0cda56b842b58679", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -377,9 +377,6 @@ pub fn mark_for_expr(cx: &Context, e: &Expr) {\n         let base_ty = ty::node_id_to_type(cx.ccx.tcx, base.id);\n         type_needs(cx, use_repr, ty::type_autoderef(cx.ccx.tcx, base_ty));\n       }\n-      ExprLog(_, val) => {\n-        node_type_needs(cx, use_tydesc, val.id);\n-      }\n       ExprCall(f, _, _) => {\n           let r = ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx, f.id));\n           for a in r.iter() {\n@@ -411,7 +408,7 @@ pub fn mark_for_expr(cx: &Context, e: &Expr) {\n       ExprMatch(*) | ExprBlock(_) | ExprIf(*) | ExprWhile(*) |\n       ExprBreak(_) | ExprAgain(_) | ExprUnary(*) | ExprLit(_) |\n       ExprMac(_) | ExprAddrOf(*) | ExprRet(_) | ExprLoop(*) |\n-      ExprDoBody(_) => (),\n+      ExprDoBody(_) | ExprLogLevel => (),\n \n       ExprForLoop(*) => fail!(\"non-desugared expr_for_loop\")\n     }"}, {"sha": "d2cb0de4c34a94573da34cd9b4253b5992ac8a15", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -3320,7 +3320,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprBreak(*) |\n         ast::ExprAgain(*) |\n         ast::ExprRet(*) |\n-        ast::ExprLog(*) |\n         ast::ExprWhile(*) |\n         ast::ExprLoop(*) |\n         ast::ExprAssign(*) |\n@@ -3331,6 +3330,7 @@ pub fn expr_kind(tcx: ctxt,\n \n         ast::ExprForLoop(*) => fail!(\"non-desugared expr_for_loop\"),\n \n+        ast::ExprLogLevel |\n         ast::ExprLit(_) | // Note: lit_str is carved out above\n         ast::ExprUnary(*) |\n         ast::ExprAddrOf(*) |"}, {"sha": "72da6878b6bfbd4e75978d4e8b709bf57aa87d04", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -2526,18 +2526,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         }\n         fcx.write_bot(id);\n       }\n-      ast::ExprLog(lv, e) => {\n-        check_expr_has_type(fcx, lv,\n-                                  ty::mk_mach_uint(ast::ty_u32));\n-\n-        // Note: this does not always execute, so do not propagate bot:\n-        check_expr(fcx, e);\n-        if ty::type_is_error(fcx.expr_ty(e)) {\n-            fcx.write_error(id);\n-        }\n-        else {\n-            fcx.write_nil(id);\n-        }\n+      ast::ExprLogLevel => {\n+        fcx.write_ty(id, ty::mk_u32())\n       }\n       ast::ExprParen(a) => {\n         check_expr_with_opt_hint(fcx, a, expected);"}, {"sha": "29f087094fb433eee4b595b19702ee41c76828ec", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -1020,7 +1020,7 @@ pub mod guarantor {\n             ast::ExprBreak(*) |\n             ast::ExprAgain(*) |\n             ast::ExprRet(*) |\n-            ast::ExprLog(*) |\n+            ast::ExprLogLevel |\n             ast::ExprWhile(*) |\n             ast::ExprLoop(*) |\n             ast::ExprAssign(*) |"}, {"sha": "1b91276f904d6ee2a717215cce7586d0da20d416", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -37,7 +37,7 @@ pub fn console_off() {\n     rt::logging::console_off();\n }\n \n-#[cfg(not(test))]\n+#[cfg(not(test), stage0)]\n #[lang=\"log_type\"]\n #[allow(missing_doc)]\n pub fn log_type<T>(_level: u32, object: &T) {\n@@ -67,3 +67,10 @@ fn newsched_log_str(msg: ~str) {\n         }\n     }\n }\n+\n+// XXX: This will change soon to not require an allocation. This is an unstable\n+//      api which should not be used outside of the macros in ext/expand.\n+#[doc(hidden)]\n+pub fn log(_level: u32, msg: ~str) {\n+    newsched_log_str(msg);\n+}"}, {"sha": "e0e804f4c04cd35eb59c0ef2f5c8a361b819da3a", "filename": "src/libstd/std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -218,6 +218,7 @@ mod std {\n     pub use option;\n     pub use kinds;\n     pub use local_data;\n+    pub use logging;\n     pub use sys;\n     pub use unstable;\n     pub use str;"}, {"sha": "ca5e31ee4329e3d945889038f336f7fece8b7bab", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -505,7 +505,9 @@ pub enum Expr_ {\n     ExprBreak(Option<Ident>),\n     ExprAgain(Option<Ident>),\n     ExprRet(Option<@Expr>),\n-    ExprLog(@Expr, @Expr),\n+\n+    /// Gets the log level for the enclosing module\n+    ExprLogLevel,\n \n     ExprInlineAsm(inline_asm),\n "}, {"sha": "00248425ee6c1538dfd2227dfa7fb4a879444cc4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 35, "deletions": 53, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -740,59 +740,41 @@ pub fn std_macros() -> @str {\n \n     macro_rules! ignore (($($x:tt)*) => (()))\n \n-    macro_rules! error (\n-        ($arg:expr) => (\n-            __log(1u32, fmt!( \\\"%?\\\", $arg ))\n-        );\n-        ($( $arg:expr ),+) => (\n-            __log(1u32, fmt!( $($arg),+ ))\n-        )\n-    )\n-\n-    macro_rules! warn (\n-        ($arg:expr) => (\n-            __log(2u32, fmt!( \\\"%?\\\", $arg ))\n-        );\n-        ($( $arg:expr ),+) => (\n-            __log(2u32, fmt!( $($arg),+ ))\n-        )\n-    )\n-\n-    macro_rules! info (\n-        ($arg:expr) => (\n-            __log(3u32, fmt!( \\\"%?\\\", $arg ))\n-        );\n-        ($( $arg:expr ),+) => (\n-            __log(3u32, fmt!( $($arg),+ ))\n-        )\n-    )\n-\n-    macro_rules! debug (\n-        ($arg:expr) => (\n-            if cfg!(debug) { __log(4u32, fmt!( \\\"%?\\\", $arg )) }\n-        );\n-        ($( $arg:expr ),+) => (\n-            if cfg!(debug) { __log(4u32, fmt!( $($arg),+ )) }\n-        )\n-    )\n-\n-    macro_rules! error2 (\n-        ($($arg:tt)*) => ( __log(1u32, format!($($arg)*)))\n-    )\n-\n-    macro_rules! warn2 (\n-        ($($arg:tt)*) => ( __log(2u32, format!($($arg)*)))\n-    )\n-\n-    macro_rules! info2 (\n-        ($($arg:tt)*) => ( __log(3u32, format!($($arg)*)))\n+    macro_rules! log(\n+        ($lvl:expr, $arg:expr) => ({\n+            let lvl = $lvl;\n+            if lvl <= __log_level() {\n+                ::std::logging::log(lvl, fmt!(\\\"%?\\\", $arg))\n+            }\n+        });\n+        ($lvl:expr, $($arg:expr),+) => ({\n+            let lvl = $lvl;\n+            if lvl <= __log_level() {\n+                ::std::logging::log(lvl, fmt!($($arg),+))\n+            }\n+        })\n     )\n-\n-    macro_rules! debug2 (\n-        ($($arg:tt)*) => (\n-            if cfg!(debug) { __log(4u32, format!($($arg)*)) }\n-        )\n+    macro_rules! error( ($($arg:tt)+) => (log!(1u32, $($arg)+)) )\n+    macro_rules! warn ( ($($arg:tt)+) => (log!(2u32, $($arg)+)) )\n+    macro_rules! info ( ($($arg:tt)+) => (log!(3u32, $($arg)+)) )\n+    macro_rules! debug( ($($arg:tt)+) => (\n+        if cfg!(debug) { log!(4u32, $($arg)+) }\n+    ))\n+\n+    macro_rules! log2(\n+        ($lvl:expr, $($arg:tt)+) => ({\n+            let lvl = $lvl;\n+            if lvl <= __log_level() {\n+                ::std::logging::log(lvl, format!($($arg)+))\n+            }\n+        })\n     )\n+    macro_rules! error2( ($($arg:tt)+) => (log2!(1u32, $($arg)+)) )\n+    macro_rules! warn2 ( ($($arg:tt)+) => (log2!(2u32, $($arg)+)) )\n+    macro_rules! info2 ( ($($arg:tt)+) => (log2!(3u32, $($arg)+)) )\n+    macro_rules! debug2( ($($arg:tt)+) => (\n+        if cfg!(debug) { log2!(4u32, $($arg)+) }\n+    ))\n \n     macro_rules! fail(\n         () => (\n@@ -989,13 +971,13 @@ pub fn std_macros() -> @str {\n     //              allocation but should rather delegate to an invocation of\n     //              write! instead of format!\n     macro_rules! print (\n-        ($($arg:tt)+) => ( ::std::io::print(format!($($arg)+)))\n+        ($($arg:tt)+) => (::std::io::print(format!($($arg)+)))\n     )\n \n     // FIXME(#6846) once stdio is redesigned, this shouldn't perform an\n     //              allocation but should rather delegate to an io::Writer\n     macro_rules! println (\n-        ($($arg:tt)+) => ({ print!($($arg)+); ::std::io::println(\\\"\\\"); })\n+        ($($arg:tt)+) => (::std::io::println(format!($($arg)+)))\n     )\n \n     // NOTE: use this after a snapshot lands to abstract the details"}, {"sha": "1e4df7811ddbc41bcb344496be187ae796abcf14", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -616,12 +616,7 @@ pub fn noop_fold_expr(e: &Expr_, fld: @ast_fold) -> Expr_ {\n         ExprRet(ref e) => {\n             ExprRet(e.map_move(|x| fld.fold_expr(x)))\n         }\n-        ExprLog(lv, e) => {\n-            ExprLog(\n-                fld.fold_expr(lv),\n-                fld.fold_expr(e)\n-            )\n-        }\n+        ExprLogLevel => ExprLogLevel,\n         ExprInlineAsm(ref a) => {\n             ExprInlineAsm(inline_asm {\n                 inputs: a.inputs.map(|&(c, input)| (c, fld.fold_expr(input))),"}, {"sha": "c9a01cb3804f3fd1e109bbbb0970d0f963b8044d", "filename": "src/libsyntax/oldvisit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Foldvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Foldvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Foldvisit.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -567,10 +567,7 @@ pub fn visit_expr<E:Clone>(ex: @Expr, (e, v): (E, vt<E>)) {\n         ExprBreak(_) => (),\n         ExprAgain(_) => (),\n         ExprRet(eo) => visit_expr_opt(eo, (e.clone(), v)),\n-        ExprLog(lv, x) => {\n-            (v.visit_expr)(lv, (e.clone(), v));\n-            (v.visit_expr)(x, (e.clone(), v));\n-        }\n+        ExprLogLevel => (),\n         ExprMac(ref mac) => visit_mac(mac, (e.clone(), v)),\n         ExprParen(x) => (v.visit_expr)(x, (e.clone(), v)),\n         ExprInlineAsm(ref a) => {"}, {"sha": "7afd9c8bf23cda52bb80b641c7218518be291cf6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -26,7 +26,7 @@ use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock};\n use ast::{ExprBreak, ExprCall, ExprCast, ExprDoBody};\n use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n-use ast::{ExprLit, ExprLog, ExprLoop, ExprMac};\n+use ast::{ExprLit, ExprLogLevel, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprRepeat};\n use ast::{ExprRet, ExprSelf, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprVstore, ExprVstoreMutBox};\n@@ -1827,13 +1827,10 @@ impl Parser {\n                 }\n             }\n             hi = self.last_span.hi;\n-        } else if self.eat_keyword(keywords::__Log) {\n-            // LOG expression\n+        } else if self.eat_keyword(keywords::__LogLevel) {\n+            // LOG LEVEL expression\n             self.expect(&token::LPAREN);\n-            let lvl = self.parse_expr();\n-            self.expect(&token::COMMA);\n-            let e = self.parse_expr();\n-            ex = ExprLog(lvl, e);\n+            ex = ExprLogLevel;\n             hi = self.span.hi;\n             self.expect(&token::RPAREN);\n         } else if self.eat_keyword(keywords::Return) {"}, {"sha": "15cc7e151b98c1935162881d356d88f3d1f070de", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -457,7 +457,7 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"if\",                 // 42\n         \"impl\",               // 43\n         \"let\",                // 44\n-        \"__log\",              // 45\n+        \"__log_level\",        // 45\n         \"loop\",               // 46\n         \"match\",              // 47\n         \"mod\",                // 48\n@@ -583,7 +583,7 @@ pub mod keywords {\n         Impl,\n         In,\n         Let,\n-        __Log,\n+        __LogLevel,\n         Loop,\n         Match,\n         Mod,\n@@ -628,7 +628,7 @@ pub mod keywords {\n                 Impl => Ident { name: 43, ctxt: 0 },\n                 In => Ident { name: 63, ctxt: 0 },\n                 Let => Ident { name: 44, ctxt: 0 },\n-                __Log => Ident { name: 45, ctxt: 0 },\n+                __LogLevel => Ident { name: 45, ctxt: 0 },\n                 Loop => Ident { name: 46, ctxt: 0 },\n                 Match => Ident { name: 47, ctxt: 0 },\n                 Mod => Ident { name: 48, ctxt: 0 },"}, {"sha": "e1b0616bfbfeb0389e4e46cfc0066b8fa95bebf0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -1407,13 +1407,9 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n           _ => ()\n         }\n       }\n-      ast::ExprLog(lexp, expr) => {\n-        word(s.s, \"__log\");\n+      ast::ExprLogLevel => {\n+        word(s.s, \"__log_level\");\n         popen(s);\n-        print_expr(s, lexp);\n-        word(s.s, \",\");\n-        space_if_not_bol(s);\n-        print_expr(s, expr);\n         pclose(s);\n       }\n       ast::ExprInlineAsm(ref a) => {"}, {"sha": "d96eeeb0d40d530a15a54967074c597e3f4e1b0e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a966183fe5129ea2a55a9898ac1bd0f16f3573d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8a966183fe5129ea2a55a9898ac1bd0f16f3573d", "patch": "@@ -643,10 +643,7 @@ pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @Expr, env:\n         ExprRet(optional_expression) => {\n             walk_expr_opt(visitor, optional_expression, env.clone())\n         }\n-        ExprLog(level, subexpression) => {\n-            visitor.visit_expr(level, env.clone());\n-            visitor.visit_expr(subexpression, env.clone());\n-        }\n+        ExprLogLevel => {}\n         ExprMac(ref macro) => walk_mac(visitor, macro, env.clone()),\n         ExprParen(subexpression) => {\n             visitor.visit_expr(subexpression, env.clone())"}]}