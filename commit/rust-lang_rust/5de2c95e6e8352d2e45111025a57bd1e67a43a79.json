{"sha": "5de2c95e6e8352d2e45111025a57bd1e67a43a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTJjOTVlNmU4MzUyZDJlNDUxMTEwMjVhNTdiZDFlNjdhNDNhNzk=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-09-03T18:14:15Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-09-20T13:13:11Z"}, "message": "Remove MMX from Rust", "tree": {"sha": "455a7284680fa7d491960e37f99c2486e38bc7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/455a7284680fa7d491960e37f99c2486e38bc7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de2c95e6e8352d2e45111025a57bd1e67a43a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de2c95e6e8352d2e45111025a57bd1e67a43a79", "html_url": "https://github.com/rust-lang/rust/commit/5de2c95e6e8352d2e45111025a57bd1e67a43a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de2c95e6e8352d2e45111025a57bd1e67a43a79/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ece44a42b6cd33e59d58b5325f637f398464d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ece44a42b6cd33e59d58b5325f637f398464d2", "html_url": "https://github.com/rust-lang/rust/commit/07ece44a42b6cd33e59d58b5325f637f398464d2"}], "stats": {"total": 66, "additions": 6, "deletions": 60}, "files": [{"sha": "45c5f56f44793d349609cdc15e562cb50072b34c", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -948,7 +948,6 @@ extern \"C\" {\n \n     // Operations on other types\n     pub fn LLVMVoidTypeInContext(C: &Context) -> &Type;\n-    pub fn LLVMX86MMXTypeInContext(C: &Context) -> &Type;\n     pub fn LLVMRustMetadataTypeInContext(C: &Context) -> &Type;\n \n     // Operations on all values"}, {"sha": "900f2df383a06c382667f1f7ff34909802ab25de", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -203,7 +203,6 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"fma\", None),\n     (\"fxsr\", None),\n     (\"lzcnt\", None),\n-    (\"mmx\", Some(sym::mmx_target_feature)),\n     (\"movbe\", Some(sym::movbe_target_feature)),\n     (\"pclmulqdq\", None),\n     (\"popcnt\", None),"}, {"sha": "a43724fd49599089a4f2c0e0ac2f61bd648068a6", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -62,10 +62,6 @@ impl CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMIntTypeInContext(self.llcx, num_bits as c_uint) }\n     }\n \n-    crate fn type_x86_mmx(&self) -> &'ll Type {\n-        unsafe { llvm::LLVMX86MMXTypeInContext(self.llcx) }\n-    }\n-\n     crate fn type_vector(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n         unsafe { llvm::LLVMVectorType(ty, len as c_uint) }\n     }"}, {"sha": "e0754d21df1f09e38581da69ada26beabed6cc68", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -21,23 +21,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n     match layout.abi {\n         Abi::Scalar(_) => bug!(\"handled elsewhere\"),\n         Abi::Vector { ref element, count } => {\n-            // LLVM has a separate type for 64-bit SIMD vectors on X86 called\n-            // `x86_mmx` which is needed for some SIMD operations. As a bit of a\n-            // hack (all SIMD definitions are super unstable anyway) we\n-            // recognize any one-element SIMD vector as \"this should be an\n-            // x86_mmx\" type. In general there shouldn't be a need for other\n-            // one-element SIMD vectors, so it's assumed this won't clash with\n-            // much else.\n-            let use_x86_mmx = count == 1\n-                && layout.size.bits() == 64\n-                && (cx.sess().target.target.arch == \"x86\"\n-                    || cx.sess().target.target.arch == \"x86_64\");\n-            if use_x86_mmx {\n-                return cx.type_x86_mmx();\n-            } else {\n-                let element = layout.scalar_llvm_type_at(cx, element, Size::ZERO);\n-                return cx.type_vector(element, count);\n-            }\n+            let element = layout.scalar_llvm_type_at(cx, element, Size::ZERO);\n+            return cx.type_vector(element, count);\n         }\n         Abi::ScalarPair(..) => {\n             return cx.type_struct("}, {"sha": "6452bda293ef5465ff17d2895e04c9fd202a1d84", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -229,7 +229,6 @@ declare_features! (\n     (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n     (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n     (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n     (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n     (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, wasm_target_feature, \"1.30.0\", Some(44839), None),"}, {"sha": "ce6cc4ab035f3990f6cd648f2b14a1b1c74b0cd4", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -677,7 +677,6 @@ symbols! {\n         minnumf32,\n         minnumf64,\n         mips_target_feature,\n-        mmx_target_feature,\n         module,\n         module_path,\n         more_struct_aliases,"}, {"sha": "ad2389a434d89f2cdaf4dd9f23891cab3358ef43", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -2361,7 +2361,6 @@ fn from_target_feature(\n                 Some(sym::mips_target_feature) => rust_features.mips_target_feature,\n                 Some(sym::riscv_target_feature) => rust_features.riscv_target_feature,\n                 Some(sym::avx512_target_feature) => rust_features.avx512_target_feature,\n-                Some(sym::mmx_target_feature) => rust_features.mmx_target_feature,\n                 Some(sym::sse4a_target_feature) => rust_features.sse4a_target_feature,\n                 Some(sym::tbm_target_feature) => rust_features.tbm_target_feature,\n                 Some(sym::wasm_target_feature) => rust_features.wasm_target_feature,"}, {"sha": "dd247e49234e7999e58f301ff61abc92f8af10f6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -132,7 +132,6 @@\n #![feature(unwind_attributes)]\n #![feature(variant_count)]\n #![cfg_attr(bootstrap, feature(doc_alias))]\n-#![feature(mmx_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(sse4a_target_feature)]\n #![feature(arm_target_feature)]"}, {"sha": "9a58ef1c37a80d447d698dffb69efc064363d776", "filename": "src/test/codegen/x86_mmx.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/07ece44a42b6cd33e59d58b5325f637f398464d2/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ece44a42b6cd33e59d58b5325f637f398464d2/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_mmx.rs?ref=07ece44a42b6cd33e59d58b5325f637f398464d2", "patch": "@@ -1,27 +0,0 @@\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-emscripten\n-// ignore-mips\n-// ignore-mips64\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-s390x\n-// compile-flags: -O\n-\n-#![feature(repr_simd)]\n-#![crate_type=\"lib\"]\n-\n-#[repr(simd)]\n-#[derive(Clone, Copy)]\n-pub struct i8x8(u64);\n-\n-#[no_mangle]\n-pub fn a(a: &mut i8x8, b: i8x8) -> i8x8 {\n-    // CHECK-LABEL: define void @a(x86_mmx*{{.*}}, x86_mmx*{{.*}}, x86_mmx*{{.*}})\n-    *a = b;\n-    return b\n-}"}, {"sha": "2682028936c191265c7e3a22d3e5b9560ce36482", "filename": "src/test/ui/auxiliary/using-target-feature-unstable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/src%2Ftest%2Fui%2Fauxiliary%2Fusing-target-feature-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/src%2Ftest%2Fui%2Fauxiliary%2Fusing-target-feature-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fusing-target-feature-unstable.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -1,5 +1,5 @@\n-#![feature(mmx_target_feature)]\n+#![feature(avx512_target_feature)]\n \n #[inline]\n-#[target_feature(enable = \"mmx\")]\n+#[target_feature(enable = \"avx512ifma\")]\n pub unsafe fn foo() {}"}, {"sha": "e4b78c76e169935e1710b47fbd5149ad7fa75cc0", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -19,7 +19,6 @@\n // gate-test-aarch64_target_feature\n // gate-test-hexagon_target_feature\n // gate-test-mips_target_feature\n-// gate-test-mmx_target_feature\n // gate-test-wasm_target_feature\n // gate-test-adx_target_feature\n // gate-test-cmpxchg16b_target_feature\n@@ -30,7 +29,6 @@\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable\n-unsafe fn foo() {\n-}\n+unsafe fn foo() {}\n \n fn main() {}"}, {"sha": "2384a00aa47aa2395ea11d580cf3250289c3fbea", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de2c95e6e8352d2e45111025a57bd1e67a43a79/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5de2c95e6e8352d2e45111025a57bd1e67a43a79/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=5de2c95e6e8352d2e45111025a57bd1e67a43a79", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:31:18\n+  --> $DIR/gate.rs:30:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}]}