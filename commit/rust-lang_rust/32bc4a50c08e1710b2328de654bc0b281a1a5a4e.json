{"sha": "32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYmM0YTUwYzA4ZTE3MTBiMjMyOGRlNjU0YmMwYjI4MWExYTVhNGU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-03T17:47:54Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-25T22:00:59Z"}, "message": "Make more lints incremental", "tree": {"sha": "829d4808f6b2a0e2c9a63f9a5357cc5f40c4dcb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829d4808f6b2a0e2c9a63f9a5357cc5f40c4dcb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "html_url": "https://github.com/rust-lang/rust/commit/32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e156c2066bd9bf3a3d076ed32dd0d7b217c5857", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e156c2066bd9bf3a3d076ed32dd0d7b217c5857", "html_url": "https://github.com/rust-lang/rust/commit/7e156c2066bd9bf3a3d076ed32dd0d7b217c5857"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "2ffb4959951b8896cefcb4eeaade5123baf2cef3", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "patch": "@@ -1013,7 +1013,7 @@ impl<'hir> Map<'hir> {\n     /// corresponding to the Node ID\n     pub fn attrs(&self, id: NodeId) -> &'hir [ast::Attribute] {\n         self.read(id); // reveals attributes on the node\n-        let attrs = match self.find(id) {\n+        let attrs = match self.find_entry(id).map(|entry| entry.node) {\n             Some(Node::Local(l)) => Some(&l.attrs[..]),\n             Some(Node::Item(i)) => Some(&i.attrs[..]),\n             Some(Node::ForeignItem(fi)) => Some(&fi.attrs[..]),\n@@ -1027,6 +1027,7 @@ impl<'hir> Map<'hir> {\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Some(Node::Ctor(..)) => return self.attrs(self.get_parent(id)),\n+            Some(Node::Crate) => Some(&self.forest.krate.attrs[..]),\n             _ => None\n         };\n         attrs.unwrap_or(&[])"}, {"sha": "953d0116aa2ba24d7706f8750d588fc91bcf856f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "patch": "@@ -39,6 +39,7 @@ use errors::DiagnosticBuilder;\n use crate::hir;\n use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::hir::intravisit as hir_visit;\n+use crate::hir::intravisit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n \n@@ -1244,6 +1245,11 @@ pub fn lint_mod<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     let (module, span, hir_id) = tcx.hir().get_module(module_def_id);\n     cx.process_mod(module, span, hir_id);\n \n+    // Visit the crate attributes\n+    if hir_id == hir::CRATE_HIR_ID {\n+        walk_list!(cx, visit_attribute, cx.tcx.hir().attrs_by_hir_id(hir::CRATE_HIR_ID));\n+    }\n+\n     // Put the lint store levels and passes back in the session.\n     let passes = cx.lint_sess.passes;\n     drop(cx.lint_sess.lints);"}, {"sha": "2caaa0159921b36b6910d0704443ba632a976b0e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "patch": "@@ -125,16 +125,17 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         store.register_early_pass(sess, false, true, box BuiltinCombinedEarlyLintPass::new());\n     }\n \n-    // FIXME: Make a separate lint type which do not require typeck tables\n-\n     late_lint_methods!(declare_combined_late_lint_pass, [BuiltinCombinedModuleLateLintPass, [\n         HardwiredLints: HardwiredLints,\n         WhileTrue: WhileTrue,\n         ImproperCTypes: ImproperCTypes,\n         VariantSizeDifferences: VariantSizeDifferences,\n         BoxPointers: BoxPointers,\n         PathStatements: PathStatements,\n+\n+        // Depends on referenced function signatures in expressions\n         UnusedResults: UnusedResults,\n+\n         NonUpperCaseGlobals: NonUpperCaseGlobals,\n         NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n         UnusedAllocation: UnusedAllocation,\n@@ -157,39 +158,35 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n         TrivialConstraints: TrivialConstraints,\n         TypeLimits: TypeLimits::new(),\n+\n+        NonSnakeCase: NonSnakeCase,\n+        InvalidNoMangleItems: InvalidNoMangleItems,\n+\n+        // Depends on access levels\n+        UnreachablePub: UnreachablePub,\n+\n+        ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n     ]], ['tcx]);\n \n     store.register_late_pass(sess, false, true, box BuiltinCombinedModuleLateLintPass::new());\n \n     late_lint_methods!(declare_combined_late_lint_pass, [BuiltinCombinedLateLintPass, [\n-\n         // Uses attr::is_used which is untracked, can't be an incremental module pass.\n-        // Doesn't require type tables. Make a separate combined pass for that?\n         UnusedAttributes: UnusedAttributes,\n \n-\n-        // Checks crate attributes. Find out how that would work.\n-        NonSnakeCase: NonSnakeCase,\n-\n-\n-        // Needs to look at crate attributes. Make sure that works\n+        // Needs to run after UnusedAttributes as it marks all `feature` attributes as used.\n         UnstableFeatures: UnstableFeatures,\n \n-        // Depends on access levels\n-        InvalidNoMangleItems: InvalidNoMangleItems,\n-\n-        // Depends on access levels\n-        UnreachablePub: UnreachablePub,\n-\n+        // Tracks state across modules\n         UnnameableTestItems: UnnameableTestItems::new(),\n \n         // Tracks attributes of parents\n         MissingDoc: MissingDoc::new(),\n \n         // Depends on access levels\n+        // FIXME: Turn the computation of types which implement Debug into a query\n+        // and change this to a module lint pass\n         MissingDebugImplementations: MissingDebugImplementations::new(),\n-\n-        ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n     ]], ['tcx]);\n \n     store.register_late_pass(sess, false, false, box BuiltinCombinedLateLintPass::new());"}, {"sha": "7a164dbcdf12d15922f2d0452b26510bd476366c", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bc4a50c08e1710b2328de654bc0b281a1a5a4e/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=32bc4a50c08e1710b2328de654bc0b281a1a5a4e", "patch": "@@ -267,11 +267,15 @@ impl LintPass for NonSnakeCase {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n-    fn check_crate(&mut self, cx: &LateContext<'_, '_>, cr: &hir::Crate) {\n+    fn check_mod(&mut self, cx: &LateContext<'_, '_>, _: &'tcx hir::Mod, _: Span, id: hir::HirId) {\n+        if id != hir::CRATE_HIR_ID {\n+            return;\n+        }\n+\n         let crate_ident = if let Some(name) = &cx.tcx.sess.opts.crate_name {\n             Some(Ident::from_str(name))\n         } else {\n-            attr::find_by_name(&cr.attrs, \"crate_name\")\n+            attr::find_by_name(&cx.tcx.hir().attrs_by_hir_id(hir::CRATE_HIR_ID), \"crate_name\")\n                 .and_then(|attr| attr.meta())\n                 .and_then(|meta| {\n                     meta.name_value_literal().and_then(|lit| {"}]}