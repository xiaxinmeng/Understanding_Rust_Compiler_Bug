{"sha": "5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "node_id": "C_kwDOAAsO6NoAKDViMDhjOWYzOTc1NDAzOWVmOWM2Y2JkZTE1N2FjOWViOGMyNTJhNTg", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-01-25T14:48:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-01-30T18:09:09Z"}, "message": "stage-step cfgs", "tree": {"sha": "15328c86475b8370cb5a1a45178cf4cc31088876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15328c86475b8370cb5a1a45178cf4cc31088876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "html_url": "https://github.com/rust-lang/rust/commit/5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17887f7a723d8e897e4f05bb89cb2dffe2853e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/17887f7a723d8e897e4f05bb89cb2dffe2853e82", "html_url": "https://github.com/rust-lang/rust/commit/17887f7a723d8e897e4f05bb89cb2dffe2853e82"}], "stats": {"total": 59, "additions": 9, "deletions": 50}, "files": [{"sha": "b75ae996e4853b46219e4495f4ae08f1d5168fb6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -798,16 +798,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         Self: Sized,\n         Self: ~const Destruct,\n     {\n-        #[cfg(not(bootstrap))]\n-        {\n-            max_by(self, other, Ord::cmp)\n-        }\n-\n-        #[cfg(bootstrap)]\n-        match self.cmp(&other) {\n-            Ordering::Less | Ordering::Equal => other,\n-            Ordering::Greater => self,\n-        }\n+        max_by(self, other, Ord::cmp)\n     }\n \n     /// Compares and returns the minimum of two values.\n@@ -828,16 +819,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         Self: Sized,\n         Self: ~const Destruct,\n     {\n-        #[cfg(not(bootstrap))]\n-        {\n-            min_by(self, other, Ord::cmp)\n-        }\n-\n-        #[cfg(bootstrap)]\n-        match self.cmp(&other) {\n-            Ordering::Less | Ordering::Equal => self,\n-            Ordering::Greater => other,\n-        }\n+        min_by(self, other, Ord::cmp)\n     }\n \n     /// Restrict a value to a certain interval.\n@@ -1234,23 +1216,7 @@ where\n     F: ~const Destruct,\n     K: ~const Destruct,\n {\n-    cfg_if! {\n-        if #[cfg(bootstrap)] {\n-            const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n-                f: &mut F,\n-                (v1, v2): (&T, &T),\n-            ) -> Ordering\n-            where\n-                T: ~const Destruct,\n-                K: ~const Destruct,\n-            {\n-                f(v1).cmp(&f(v2))\n-            }\n-            min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n-        } else {\n-            min_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n-        }\n-    }\n+    min_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n }\n \n /// Compares and returns the maximum of two values."}, {"sha": "b1ed3b31e430c0a2badbeb41d5a75f51155debc0", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -58,7 +58,6 @@ use crate::marker::DiscriminantKind;\n use crate::marker::Tuple;\n use crate::mem;\n \n-#[cfg(not(bootstrap))]\n pub mod mir;\n \n // These imports are used for simplifying intra-doc links\n@@ -963,7 +962,6 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     #[rustc_safe_intrinsic]\n-    #[cfg(not(bootstrap))]\n     pub fn assert_mem_uninitialized_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called."}, {"sha": "c0fd71ebae8a723a1c13cb81ea9a68d960550ac1", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -60,8 +60,7 @@\n //!\n //! # Examples\n //!\n-#![cfg_attr(bootstrap, doc = \"```rust,compile_fail\")]\n-#![cfg_attr(not(bootstrap), doc = \"```rust\")]\n+//! ```rust\n //! #![feature(core_intrinsics, custom_mir)]\n //!\n //! extern crate core;\n@@ -294,8 +293,7 @@ define!(\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```rust,compile_fail\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```rust\")]\n+    /// ```rust\n     /// #![feature(custom_mir, core_intrinsics)]\n     ///\n     /// extern crate core;"}, {"sha": "80cd537906739ea9b8a061e06ce2fa3a14cea27b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -191,7 +191,7 @@\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n-#![cfg_attr(not(bootstrap), feature(const_closures))]\n+#![feature(const_closures)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n@@ -248,7 +248,6 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n-#![cfg_attr(bootstrap, feature(f16c_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "a67df7ed557a100dacac62db41470233ceab300d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -682,7 +682,6 @@ pub unsafe fn zeroed<T>() -> T {\n pub unsafe fn uninitialized<T>() -> T {\n     // SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n     unsafe {\n-        #[cfg(not(bootstrap))] // If the compiler hits this itself then it deserves the UB.\n         intrinsics::assert_mem_uninitialized_valid::<T>();\n         let mut val = MaybeUninit::<T>::uninit();\n "}, {"sha": "805a1e51ae9c09e6d583b295701706190e56a98d", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -117,7 +117,7 @@ pub const fn panic(expr: &'static str) -> ! {\n /// Like `panic`, but without unwinding and track_caller to reduce the impact on codesize.\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(bootstrap), lang = \"panic_nounwind\")] // needed by codegen for non-unwinding panics\n+#[lang = \"panic_nounwind\"] // needed by codegen for non-unwinding panics\n #[rustc_nounwind]\n pub fn panic_nounwind(expr: &'static str) -> ! {\n     panic_nounwind_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n@@ -165,8 +165,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n /// any extra arguments (including those synthesized by track_caller).\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(bootstrap, lang = \"panic_no_unwind\")] // needed by codegen for panic in nounwind function\n-#[cfg_attr(not(bootstrap), lang = \"panic_cannot_unwind\")] // needed by codegen for panic in nounwind function\n+#[lang = \"panic_cannot_unwind\"] // needed by codegen for panic in nounwind function\n #[rustc_nounwind]\n fn panic_cannot_unwind() -> ! {\n     panic_nounwind(\"panic in a function that cannot unwind\")"}, {"sha": "808825326aef5372f139bc84630f08d3dc19cad5", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08c9f39754039ef9c6cbde157ac9eb8c252a58/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=5b08c9f39754039ef9c6cbde157ac9eb8c252a58", "patch": "@@ -174,7 +174,7 @@ impl RawWakerVTable {\n /// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg_attr(not(bootstrap), lang = \"Context\")]\n+#[lang = \"Context\"]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing"}]}