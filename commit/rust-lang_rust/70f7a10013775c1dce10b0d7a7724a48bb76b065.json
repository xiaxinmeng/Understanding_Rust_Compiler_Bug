{"sha": "70f7a10013775c1dce10b0d7a7724a48bb76b065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZjdhMTAwMTM3NzVjMWRjZTEwYjBkN2E3NzI0YTQ4YmI3NmIwNjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-20T22:07:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-20T22:07:38Z"}, "message": "Merge #7366\n\n7366: Treat BlockExpr as a potential module origin r=jonas-schievink a=jonas-schievink\n\nA block containing inner items acts like the root module of a crate, so it needs to be representable as a `ModuleSource` and `ModuleOrigin`.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "2f3c97e5f45a8579cc860dc9a57123dbb5302b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3c97e5f45a8579cc860dc9a57123dbb5302b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f7a10013775c1dce10b0d7a7724a48bb76b065", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCKmqCRBK7hj4Ov3rIwAAdHIIAFONyFEh220T6/XRLlUax5kT\nFpEKMZQ2egkHCAM7jZd2eNB864lCRYyb/ZBTM+x/AXAbJM9yuad4VS5nB1JIjtM2\nKGb65vPaTLs1f7k//w98wV2L80WYXe2wyWW/aULyI7bDA7H0XKKQ116wC5N//3hA\nE4yQIVYjTfxq1vnHFUhWstwWileYm1d8v9ZZRGxvYZYCXysyul2pO9KhNMXPC06j\nY2L1GuCe1iBtYZ2V9JMPnXOCqvCPezGcj9cXIxi55wYNE9mMnZWtmmQinUcFy+DR\nBUcxaFWXBdibN4wktHCzR/uiSql+sGGFPX1xpzg9mgpRqT+jJjFvvhCeJ1TqHM8=\n=9wd4\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f3c97e5f45a8579cc860dc9a57123dbb5302b8b\nparent 7d5ed18c42c4ee80e776d04254d69750b70e14ba\nparent 82146737acc74b2483f39f1dd0ae4dfffcfda824\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611180458 +0000\ncommitter GitHub <noreply@github.com> 1611180458 +0000\n\nMerge #7366\n\n7366: Treat BlockExpr as a potential module origin r=jonas-schievink a=jonas-schievink\n\nA block containing inner items acts like the root module of a crate, so it needs to be representable as a `ModuleSource` and `ModuleOrigin`.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f7a10013775c1dce10b0d7a7724a48bb76b065", "html_url": "https://github.com/rust-lang/rust/commit/70f7a10013775c1dce10b0d7a7724a48bb76b065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f7a10013775c1dce10b0d7a7724a48bb76b065/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5ed18c42c4ee80e776d04254d69750b70e14ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5ed18c42c4ee80e776d04254d69750b70e14ba", "html_url": "https://github.com/rust-lang/rust/commit/7d5ed18c42c4ee80e776d04254d69750b70e14ba"}, {"sha": "82146737acc74b2483f39f1dd0ae4dfffcfda824", "url": "https://api.github.com/repos/rust-lang/rust/commits/82146737acc74b2483f39f1dd0ae4dfffcfda824", "html_url": "https://github.com/rust-lang/rust/commit/82146737acc74b2483f39f1dd0ae4dfffcfda824"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "1805c1dfdf71a566cef3c9e20b6019e351f99816", "filename": "crates/assists/src/handlers/generate_function.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -158,11 +158,11 @@ impl FunctionBuilder {\n                 it.text_range().end()\n             }\n             GeneratedFunctionTarget::InEmptyItemList(it) => {\n-                let indent = IndentLevel::from_node(it.syntax());\n+                let indent = IndentLevel::from_node(&it);\n                 leading_ws = format!(\"\\n{}\", indent + 1);\n                 fn_def = fn_def.indent(indent + 1);\n                 trailing_ws = format!(\"\\n{}\", indent);\n-                it.syntax().text_range().start() + TextSize::of('{')\n+                it.text_range().start() + TextSize::of('{')\n             }\n         };\n \n@@ -179,14 +179,14 @@ impl FunctionBuilder {\n \n enum GeneratedFunctionTarget {\n     BehindItem(SyntaxNode),\n-    InEmptyItemList(ast::ItemList),\n+    InEmptyItemList(SyntaxNode),\n }\n \n impl GeneratedFunctionTarget {\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             GeneratedFunctionTarget::BehindItem(it) => it,\n-            GeneratedFunctionTarget::InEmptyItemList(it) => it.syntax(),\n+            GeneratedFunctionTarget::InEmptyItemList(it) => it,\n         }\n     }\n }\n@@ -323,7 +323,16 @@ fn next_space_for_fn_in_module(\n             if let Some(last_item) = it.item_list().and_then(|it| it.items().last()) {\n                 GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n             } else {\n-                GeneratedFunctionTarget::InEmptyItemList(it.item_list()?)\n+                GeneratedFunctionTarget::InEmptyItemList(it.item_list()?.syntax().clone())\n+            }\n+        }\n+        hir::ModuleSource::BlockExpr(it) => {\n+            if let Some(last_item) =\n+                it.statements().take_while(|stmt| matches!(stmt, ast::Stmt::Item(_))).last()\n+            {\n+                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n+            } else {\n+                GeneratedFunctionTarget::InEmptyItemList(it.syntax().clone())\n             }\n         }\n     };"}, {"sha": "c72649c41e4d183f8456db60326ab27ae2f135a1", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -207,6 +207,7 @@ impl Attrs {\n                         mod_data.definition_source(db).as_ref().map(|src| match src {\n                             ModuleSource::SourceFile(file) => file as &dyn AttrsOwner,\n                             ModuleSource::Module(module) => module as &dyn AttrsOwner,\n+                            ModuleSource::BlockExpr(block) => block as &dyn AttrsOwner,\n                         }),\n                     ),\n                 }"}, {"sha": "a3200c710ae576f42372acc048ccc19b39b4bb4f", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -109,6 +109,10 @@ pub enum ModuleOrigin {\n     Inline {\n         definition: AstId<ast::Module>,\n     },\n+    /// Pseudo-module introduced by a block scope (contains only inner items).\n+    BlockExpr {\n+        block: AstId<ast::BlockExpr>,\n+    },\n }\n \n impl Default for ModuleOrigin {\n@@ -122,7 +126,7 @@ impl ModuleOrigin {\n         match self {\n             ModuleOrigin::File { declaration: module, .. }\n             | ModuleOrigin::Inline { definition: module, .. } => Some(*module),\n-            ModuleOrigin::CrateRoot { .. } => None,\n+            ModuleOrigin::CrateRoot { .. } | ModuleOrigin::BlockExpr { .. } => None,\n         }\n     }\n \n@@ -137,7 +141,7 @@ impl ModuleOrigin {\n \n     pub fn is_inline(&self) -> bool {\n         match self {\n-            ModuleOrigin::Inline { .. } => true,\n+            ModuleOrigin::Inline { .. } | ModuleOrigin::BlockExpr { .. } => true,\n             ModuleOrigin::CrateRoot { .. } | ModuleOrigin::File { .. } => false,\n         }\n     }\n@@ -155,6 +159,9 @@ impl ModuleOrigin {\n                 definition.file_id,\n                 ModuleSource::Module(definition.to_node(db.upcast())),\n             ),\n+            ModuleOrigin::BlockExpr { block } => {\n+                InFile::new(block.file_id, ModuleSource::BlockExpr(block.to_node(db.upcast())))\n+            }\n         }\n     }\n }\n@@ -300,6 +307,7 @@ impl ModuleData {\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),\n     Module(ast::Module),\n+    BlockExpr(ast::BlockExpr),\n }\n \n mod diagnostics {"}, {"sha": "9c568c90c3882f36f8831d0de203959b2415ace9", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -294,6 +294,7 @@ impl ToNav for hir::Module {\n             ModuleSource::Module(node) => {\n                 (node.syntax(), node.name().map(|it| it.syntax().text_range()))\n             }\n+            ModuleSource::BlockExpr(node) => (node.syntax(), None),\n         };\n         let frange = src.with_value(syntax).original_file_range(db);\n         NavigationTarget::from_syntax(frange.file_id, name, focus, frange.range, SymbolKind::Module)"}, {"sha": "7ac050473f1bddf29b8531d0e7cb3d3863c8c5bc", "filename": "crates/ide/src/display/short_label.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -53,6 +53,12 @@ impl ShortLabel for ast::SourceFile {\n     }\n }\n \n+impl ShortLabel for ast::BlockExpr {\n+    fn short_label(&self) -> Option<String> {\n+        None\n+    }\n+}\n+\n impl ShortLabel for ast::TypeAlias {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"type \")"}, {"sha": "ec163148658d43d09b1eda65d3fc8064713d49ff", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -321,6 +321,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n                 match it.definition_source(db).value {\n                     ModuleSource::Module(it) => it.short_label(),\n                     ModuleSource::SourceFile(it) => it.short_label(),\n+                    ModuleSource::BlockExpr(it) => it.short_label(),\n                 },\n                 mod_path,\n             ),"}, {"sha": "975abf47f97c2d8415ac02e1caefc6bd2dab5419", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -131,6 +131,7 @@ fn runnables_mod(sema: &Semantics<RootDatabase>, acc: &mut Vec<Runnable>, module\n             match submodule.definition_source(sema.db).value {\n                 hir::ModuleSource::Module(_) => runnables_mod(sema, acc, submodule),\n                 hir::ModuleSource::SourceFile(_) => mark::hit!(dont_recurse_in_outline_submodules),\n+                hir::ModuleSource::BlockExpr(_) => {} // inner items aren't runnable\n             }\n         }\n     }"}, {"sha": "b9ba0aed5d328e0d1e7373c01929905da811beee", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f7a10013775c1dce10b0d7a7724a48bb76b065/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=70f7a10013775c1dce10b0d7a7724a48bb76b065", "patch": "@@ -228,6 +228,15 @@ impl Definition {\n                             // so do nothing.\n                         }\n                     }\n+                    ModuleSource::BlockExpr(b) => {\n+                        if is_first {\n+                            let range = Some(b.syntax().text_range());\n+                            res.insert(file_id, range);\n+                        } else {\n+                            // We have already added the enclosing file to the search scope,\n+                            // so do nothing.\n+                        }\n+                    }\n                     ModuleSource::SourceFile(_) => {\n                         res.insert(file_id, None);\n                     }\n@@ -257,6 +266,7 @@ impl Definition {\n         let mut res = FxHashMap::default();\n         let range = match module_src.value {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n+            ModuleSource::BlockExpr(b) => Some(b.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n         res.insert(file_id, range);"}]}