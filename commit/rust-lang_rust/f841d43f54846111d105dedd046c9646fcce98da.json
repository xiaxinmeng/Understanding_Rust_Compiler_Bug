{"sha": "f841d43f54846111d105dedd046c9646fcce98da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NDFkNDNmNTQ4NDYxMTFkMTA1ZGVkZDA0NmM5NjQ2ZmNjZTk4ZGE=", "commit": {"author": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-11-24T15:19:51Z"}, "committer": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-11-24T15:19:51Z"}, "message": "Fix a bug where read(buf, len) would fail if buf was big enough and succeed if it was too small ... which is the opposite of correct.", "tree": {"sha": "408ea600cb8b477c67de75bbbda4f9ff68bcf0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408ea600cb8b477c67de75bbbda4f9ff68bcf0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f841d43f54846111d105dedd046c9646fcce98da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f841d43f54846111d105dedd046c9646fcce98da", "html_url": "https://github.com/rust-lang/rust/commit/f841d43f54846111d105dedd046c9646fcce98da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f841d43f54846111d105dedd046c9646fcce98da/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc34fb9219d2d5c3f55175fb44404ba0f71976d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc34fb9219d2d5c3f55175fb44404ba0f71976d1", "html_url": "https://github.com/rust-lang/rust/commit/dc34fb9219d2d5c3f55175fb44404ba0f71976d1"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "3c2318d2ed02afdab18cc117a51f51baa5861496", "filename": "src/libcore/io.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f841d43f54846111d105dedd046c9646fcce98da/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f841d43f54846111d105dedd046c9646fcce98da/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=f841d43f54846111d105dedd046c9646fcce98da", "patch": "@@ -404,7 +404,7 @@ fn convert_whence(whence: SeekStyle) -> i32 {\n impl *libc::FILE: Reader {\n     fn read(bytes: &[mut u8], len: uint) -> uint {\n         do vec::as_mut_buf(bytes) |buf_p, buf_len| {\n-            assert buf_len <= len;\n+            assert buf_len >= len;\n \n             let count = libc::fread(buf_p as *mut c_void, 1u as size_t,\n                                     len as size_t, self);\n@@ -1208,6 +1208,29 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    #[should_fail]\n+    fn test_read_buffer_too_small() {\n+        let path = &Path(\"tmp/lib-io-test-read-buffer-too-small.tmp\");\n+        // ensure the file exists\n+        io::file_writer(path, [io::Create]).get();\n+\n+        let file = io::file_reader(path).get();\n+        let mut buf = vec::from_elem(5, 0);\n+        file.read(buf, 6); // this should fail because buf is too small\n+    }\n+\n+    #[test]\n+    fn test_read_buffer_big_enough() {\n+        let path = &Path(\"tmp/lib-io-test-read-buffer-big-enough.tmp\");\n+        // ensure the file exists\n+        io::file_writer(path, [io::Create]).get();\n+\n+        let file = io::file_reader(path).get();\n+        let mut buf = vec::from_elem(5, 0);\n+        file.read(buf, 4); // this should succeed because buf is big enough\n+    }\n+\n     #[test]\n     fn test_write_empty() {\n         let file = io::file_writer(&Path(\"tmp/lib-io-test-write-empty.tmp\"),"}]}