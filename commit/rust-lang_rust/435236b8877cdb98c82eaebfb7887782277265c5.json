{"sha": "435236b8877cdb98c82eaebfb7887782277265c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTIzNmI4ODc3Y2RiOThjODJlYWViZmI3ODg3NzgyMjc3MjY1YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-01T14:43:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-01T14:43:00Z"}, "message": "Auto merge of #63194 - pietroalbini:rollup-xgnvb1b, r=pietroalbini\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #62644 (simplify std::io::Write::write rustdoc)\n - #62971 (Add keywords item into the sidebar)\n - #63122 (Account for `maybe_whole_expr` in range patterns)\n - #63158 (Add test for issue-58951)\n - #63170 (cleanup StringReader fields)\n - #63179 (update test cases for vxWorks)\n - #63188 (Fix typos in release notes.)\n - #63191 (ci: fix toolstate not pushing data for Linux)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5b8892a65e84fc77d3e28886dbf761de3d6f9335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b8892a65e84fc77d3e28886dbf761de3d6f9335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435236b8877cdb98c82eaebfb7887782277265c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435236b8877cdb98c82eaebfb7887782277265c5", "html_url": "https://github.com/rust-lang/rust/commit/435236b8877cdb98c82eaebfb7887782277265c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435236b8877cdb98c82eaebfb7887782277265c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23a5f208de7fba983bfaaa8d60f1208d5780a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23a5f208de7fba983bfaaa8d60f1208d5780a98", "html_url": "https://github.com/rust-lang/rust/commit/f23a5f208de7fba983bfaaa8d60f1208d5780a98"}, {"sha": "b1d5e52840f05e846a56023d2ec68bf700274552", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d5e52840f05e846a56023d2ec68bf700274552", "html_url": "https://github.com/rust-lang/rust/commit/b1d5e52840f05e846a56023d2ec68bf700274552"}], "stats": {"total": 204, "additions": 178, "deletions": 26}, "files": [{"sha": "7ad739d06d54f0aeaf3c56a28ab7a66b017ce32d", "filename": "RELEASES.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -539,7 +539,7 @@ Compiler\n --------\n - [You can now set a linker flavor for `rustc` with the `-Clinker-flavor`\n   command line argument.][56351]\n-- [The mininum required LLVM version has been bumped to 6.0.][56642]\n+- [The minimum required LLVM version has been bumped to 6.0.][56642]\n - [Added support for the PowerPC64 architecture on FreeBSD.][57615]\n - [The `x86_64-fortanix-unknown-sgx` target support has been upgraded to\n   tier 2 support.][57130] Visit the [platform support][platform-support] page for\n@@ -970,7 +970,7 @@ Compiler\n \n Libraries\n ---------\n-- [You can now convert `num::NonZero*` types to their raw equivalvents using the\n+- [You can now convert `num::NonZero*` types to their raw equivalents using the\n   `From` trait.][54240] E.g. `u8` now implements `From<NonZeroU8>`.\n - [You can now convert a `&Option<T>` into `Option<&T>` and `&mut Option<T>`\n   into `Option<&mut T>` using the `From` trait.][53218]\n@@ -1163,7 +1163,7 @@ Security Notes\n   caused by an integer overflow. This has been fixed by deterministically\n   panicking when an overflow happens.\n \n-  Thank you to Scott McMurray for responsibily disclosing this vulnerability to\n+  Thank you to Scott McMurray for responsibly disclosing this vulnerability to\n   us.\n \n \n@@ -1435,7 +1435,7 @@ Security Notes\n   given machine. This release fixes that vulnerability; you can read\n   more about this on the [blog][rustdoc-sec]. The associated CVE is [CVE-2018-1000622].\n \n-  Thank you to Red Hat for responsibily disclosing this vulnerability to us.\n+  Thank you to Red Hat for responsibly disclosing this vulnerability to us.\n \n Compatibility Notes\n -------------------"}, {"sha": "415d6b63eb8dc1152de7a0c191c0ce0cc4da250a", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -172,6 +172,7 @@ docker \\\n   --env BUILD_SOURCEBRANCHNAME \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env TOOLSTATE_REPO \\\n+  --env TOOLSTATE_PUBLISH \\\n   --env CI_JOB_NAME=\"${CI_JOB_NAME-$IMAGE}\" \\\n   --init \\\n   --rm \\"}, {"sha": "62cfc61ce2d0bcf8fd51ade34eb1b5dd48f49e05", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -5007,7 +5007,8 @@ fn sidebar_module(fmt: &mut fmt::Formatter<'_>, _it: &clean::Item,\n                    ItemType::Enum, ItemType::Constant, ItemType::Static, ItemType::Trait,\n                    ItemType::Function, ItemType::Typedef, ItemType::Union, ItemType::Impl,\n                    ItemType::TyMethod, ItemType::Method, ItemType::StructField, ItemType::Variant,\n-                   ItemType::AssocType, ItemType::AssocConst, ItemType::ForeignType] {\n+                   ItemType::AssocType, ItemType::AssocConst, ItemType::ForeignType,\n+                   ItemType::Keyword] {\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty) {\n             let (short, name) = item_ty_to_strs(&myty);\n             sidebar.push_str(&format!(\"<li><a href=\\\"#{id}\\\">{name}</a></li>\","}, {"sha": "f89a7144437154a6382c808eb29c538ce6c95265", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -1105,7 +1105,7 @@ pub trait Write {\n     /// an [`Err`] variant.\n     ///\n     /// If the return value is [`Ok(n)`] then it must be guaranteed that\n-    /// `0 <= n <= buf.len()`. A return value of `0` typically means that the\n+    /// `n <= buf.len()`. A return value of `0` typically means that the\n     /// underlying object is no longer able to accept bytes and will likely not\n     /// be able to in the future as well, or that the buffer provided is empty.\n     ///"}, {"sha": "263eb1ac7a48016c86f8a05795042545df6a4bda", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -29,16 +29,15 @@ pub struct UnmatchedBrace {\n }\n \n pub struct StringReader<'a> {\n-    crate sess: &'a ParseSess,\n-    /// The absolute offset within the source_map of the current character\n-    crate pos: BytePos,\n-    /// The current character (which has been read from self.pos)\n-    crate source_file: Lrc<syntax_pos::SourceFile>,\n+    sess: &'a ParseSess,\n+    /// Initial position, read-only.\n+    start_pos: BytePos,\n+    /// The absolute offset within the source_map of the current character.\n+    pos: BytePos,\n     /// Stop reading src at this index.\n-    crate end_src_index: usize,\n+    end_src_index: usize,\n     fatal_errs: Vec<DiagnosticBuilder<'a>>,\n-    // cache a direct reference to the source text, so that we don't have to\n-    // retrieve it via `self.source_file.src.as_ref().unwrap()` all the time.\n+    /// Source text to tokenize.\n     src: Lrc<String>,\n     override_span: Option<Span>,\n }\n@@ -56,8 +55,8 @@ impl<'a> StringReader<'a> {\n \n         StringReader {\n             sess,\n+            start_pos: source_file.start_pos,\n             pos: source_file.start_pos,\n-            source_file,\n             end_src_index: src.len(),\n             src,\n             fatal_errs: Vec::new(),\n@@ -108,12 +107,12 @@ impl<'a> StringReader<'a> {\n         let text: &str = &self.src[start_src_index..self.end_src_index];\n \n         if text.is_empty() {\n-            let span = self.mk_sp(self.source_file.end_pos, self.source_file.end_pos);\n+            let span = self.mk_sp(self.pos, self.pos);\n             return Ok(Token::new(token::Eof, span));\n         }\n \n         {\n-            let is_beginning_of_file = self.pos == self.source_file.start_pos;\n+            let is_beginning_of_file = self.pos == self.start_pos;\n             if is_beginning_of_file {\n                 if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {\n                     let start = self.pos;\n@@ -533,7 +532,7 @@ impl<'a> StringReader<'a> {\n \n     #[inline]\n     fn src_index(&self, pos: BytePos) -> usize {\n-        (pos - self.source_file.start_pos).to_usize()\n+        (pos - self.start_pos).to_usize()\n     }\n \n     /// Slice of the source text from `start` up to but excluding `self.pos`,"}, {"sha": "7096d6799e2cdf3e7fe438cc28a544a39a9d73ab", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -143,6 +143,7 @@ macro_rules! maybe_whole_expr {\n                         $p.token.span, ExprKind::Block(block, None), ThinVec::new()\n                     ));\n                 }\n+                // N.B: `NtIdent(ident)` is normalized to `Ident` in `fn bump`.\n                 _ => {},\n             };\n         }\n@@ -2756,12 +2757,7 @@ impl<'a> Parser<'a> {\n                     // can't continue an expression after an ident\n                     token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),\n                     token::Literal(..) | token::Pound => true,\n-                    token::Interpolated(ref nt) => match **nt {\n-                        token::NtIdent(..) | token::NtExpr(..) |\n-                        token::NtBlock(..) | token::NtPath(..) => true,\n-                        _ => false,\n-                    },\n-                    _ => false\n+                    _ => t.is_whole_expr(),\n                 };\n                 let cannot_continue_expr = self.look_ahead(1, token_cannot_continue_expr);\n                 if cannot_continue_expr {\n@@ -3728,6 +3724,7 @@ impl<'a> Parser<'a> {\n         self.token.is_path_start() // e.g. `MY_CONST`;\n             || self.token == token::Dot // e.g. `.5` for recovery;\n             || self.token.can_begin_literal_or_bool() // e.g. `42`.\n+            || self.token.is_whole_expr()\n     }\n \n     // Helper function to decide whether to parse as ident binding"}, {"sha": "73adb5c947c0b64ab777780c80a0e75bb1877df8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -476,6 +476,19 @@ impl Token {\n         false\n     }\n \n+    /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?\n+    /// That is, is this a pre-parsed expression dropped into the token stream\n+    /// (which happens while parsing the result of macro expansion)?\n+    crate fn is_whole_expr(&self) -> bool {\n+        if let Interpolated(ref nt) = self.kind {\n+            if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+\n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n     crate fn is_mutability(&self) -> bool {\n         self.is_keyword(kw::Mut) ||"}, {"sha": "db5d115c6da749399713e51efea3267176dffe71", "filename": "src/test/rustdoc/keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -4,6 +4,7 @@\n \n // @has foo/index.html '//h2[@id=\"keywords\"]' 'Keywords'\n // @has foo/index.html '//a[@href=\"keyword.match.html\"]' 'match'\n+// @has foo/index.html '//div[@class=\"block items\"]//a/@href' '#keywords'\n // @has foo/keyword.match.html '//a[@class=\"keyword\"]' 'match'\n // @has foo/keyword.match.html '//span[@class=\"in-band\"]' 'Keyword match'\n // @has foo/keyword.match.html '//section[@id=\"main\"]//div[@class=\"docblock\"]//p' 'this is a test!'"}, {"sha": "410dcdfe347eddfcbb85d3517c6dd18612eb4687", "filename": "src/test/ui/existential_types/issue-58951.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58951.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+#![feature(existential_type)]\n+\n+existential type A: Iterator;\n+fn def_a() -> A { 0..1 }\n+pub fn use_a() {\n+    def_a().map(|x| x);\n+}\n+\n+fn main() {}"}, {"sha": "c4c56cd109d67afdf98cf6463474c247d17eb0f0", "filename": "src/test/ui/issues/issue-2214.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -25,12 +25,15 @@ mod m {\n \n     #[link_name = \"m\"]\n     extern {\n-        #[cfg(any(unix, target_os = \"cloudabi\"))]\n+        #[cfg(any(all(unix, not(target_os = \"vxworks\")), target_os = \"cloudabi\"))]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(windows)]\n         #[link_name=\"lgamma\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        #[cfg(target_os = \"vxworks\")]\n+        #[link_name=\"lgamma\"]\n+        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n     }\n }\n "}, {"sha": "a7d10ca9320a6cee464fec063ba0de8454223bdc", "filename": "src/test/ui/parser/issue-63115-range-pat-interpolated.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(exclusive_range_pattern)]\n+\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    macro_rules! mac_expr {\n+        ($e:expr) => {\n+            if let 2...$e = 3 {}\n+            if let 2..=$e = 3 {}\n+            if let 2..$e = 3 {}\n+        }\n+    }\n+    mac_expr!(4);\n+}"}, {"sha": "260e108315973642bee25231146bc77780d777c7", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -121,3 +121,31 @@ fn inclusive2_to() {\n     //~| ERROR `...` range patterns are deprecated\n     //~| ERROR mismatched types\n }\n+\n+fn with_macro_expr_var() {\n+    macro_rules! mac2 {\n+        ($e1:expr, $e2:expr) => {\n+            let $e1..$e2;\n+            let $e1...$e2;\n+            //~^ ERROR `...` range patterns are deprecated\n+            let $e1..=$e2;\n+        }\n+    }\n+\n+    mac2!(0, 1);\n+\n+    macro_rules! mac {\n+        ($e:expr) => {\n+            let ..$e; //~ ERROR `..X` range patterns are not supported\n+            let ...$e; //~ ERROR `...X` range patterns are not supported\n+            //~^ ERROR `...` range patterns are deprecated\n+            let ..=$e; //~ ERROR `..=X` range patterns are not supported\n+            let $e..; //~ ERROR `X..` range patterns are not supported\n+            let $e...; //~ ERROR `X...` range patterns are not supported\n+            //~^ ERROR `...` range patterns are deprecated\n+            let $e..=; //~ ERROR `X..=` range patterns are not supported\n+        }\n+    }\n+\n+    mac!(0);\n+}"}, {"sha": "89ec059cb8234c72b7f8ff35735d50327ccef9bb", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -214,6 +214,60 @@ error: `...X` range patterns are not supported\n LL |     if let ....3 = 0 {}\n    |            ^^^^^ help: try using the minimum value for the type: `MIN...0.3`\n \n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:139:17\n+   |\n+LL |             let ..$e;\n+   |                 ^^ help: try using the minimum value for the type: `MIN..0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:140:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: try using the minimum value for the type: `MIN...0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:142:17\n+   |\n+LL |             let ..=$e;\n+   |                 ^^^ help: try using the minimum value for the type: `MIN..=0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:143:19\n+   |\n+LL |             let $e..;\n+   |                   ^^ help: try using the maximum value for the type: `0..MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:144:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: try using the maximum value for the type: `0...MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:146:19\n+   |\n+LL |             let $e..=;\n+   |                   ^^^ help: try using the maximum value for the type: `0..=MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:41:13\n    |\n@@ -316,6 +370,33 @@ error: `...` range patterns are deprecated\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n \n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:129:20\n+   |\n+LL |             let $e1...$e2;\n+   |                    ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac2!(0, 1);\n+   |     ------------ in this macro invocation\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:140:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:144:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:19:12\n    |\n@@ -532,7 +613,7 @@ LL |     if let ....3 = 0 {}\n    = note: expected type `{integer}`\n               found type `{float}`\n \n-error: aborting due to 76 previous errors\n+error: aborting due to 85 previous errors\n \n Some errors have detailed explanations: E0029, E0308.\n For more information about an error, try `rustc --explain E0029`."}, {"sha": "62a4733f89a0354c24890cf2e2896755d13ba67d", "filename": "src/test/ui/process/process-envs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -2,6 +2,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-vxworks no 'env'\n \n use std::process::Command;\n use std::env;"}, {"sha": "3fee9e2abb9f8e93d82ea3a962c5bc64726b1593", "filename": "src/test/ui/process/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435236b8877cdb98c82eaebfb7887782277265c5/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs?ref=435236b8877cdb98c82eaebfb7887782277265c5", "patch": "@@ -2,6 +2,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-vxworks no 'env'\n \n use std::process::Command;\n use std::env;"}]}