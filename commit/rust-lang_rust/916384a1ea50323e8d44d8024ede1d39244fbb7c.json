{"sha": "916384a1ea50323e8d44d8024ede1d39244fbb7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjM4NGExZWE1MDMyM2U4ZDQ0ZDgwMjRlZGUxZDM5MjQ0ZmJiN2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T21:31:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T21:31:05Z"}, "message": "Merge #9319\n\n9319: internal: add derive and ord support to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "76a5268851cf7b79447d5de79514c0d0b579e823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a5268851cf7b79447d5de79514c0d0b579e823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/916384a1ea50323e8d44d8024ede1d39244fbb7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy78ZCRBK7hj4Ov3rIwAAw1QIAAtXhVZSSZPc11JXU2qOZP4Z\n1rXdHAcoekM9mSdKMH/shxGMgJxEAOlOjVV/rIfBDcVCcOxjJxvX6h8QtLDhkvE+\nLsDMw5La1zFgxh0cVIy+XHkqCHbSPX8SUEkt7IQCQWs2/0gCgg8E8dMzkqb6G2p6\nTsDquPdl6U/SYX1lPLM3372beWyS30SjMbRVTO8hy58f1Iz9yO73angEScvP64Xw\nW0VtdtHuhCf5ebPeCZn15lLIVXAWxf69yqTTpOsSgqkDvJ25Vfk4ewR/MXUABHF/\nRiXFwpanCvGjyVzECF7UE4MfTJfYSQuHc6fBg+hcqxU85icKtDHtWHgpBXnM//Y=\n=OQwS\n-----END PGP SIGNATURE-----\n", "payload": "tree 76a5268851cf7b79447d5de79514c0d0b579e823\nparent 9b013ffcae672595aeb1aee9de907e05fb7ca065\nparent ebb591a5704f767d783d57af7022272f665318ac\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623965465 +0000\ncommitter GitHub <noreply@github.com> 1623965465 +0000\n\nMerge #9319\n\n9319: internal: add derive and ord support to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/916384a1ea50323e8d44d8024ede1d39244fbb7c", "html_url": "https://github.com/rust-lang/rust/commit/916384a1ea50323e8d44d8024ede1d39244fbb7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/916384a1ea50323e8d44d8024ede1d39244fbb7c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b013ffcae672595aeb1aee9de907e05fb7ca065", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b013ffcae672595aeb1aee9de907e05fb7ca065", "html_url": "https://github.com/rust-lang/rust/commit/9b013ffcae672595aeb1aee9de907e05fb7ca065"}, {"sha": "ebb591a5704f767d783d57af7022272f665318ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb591a5704f767d783d57af7022272f665318ac", "html_url": "https://github.com/rust-lang/rust/commit/ebb591a5704f767d783d57af7022272f665318ac"}], "stats": {"total": 191, "additions": 130, "deletions": 61}, "files": [{"sha": "e81bcf73ec8b1fa7a704033306dc149ff46a61ab", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=916384a1ea50323e8d44d8024ede1d39244fbb7c", "patch": "@@ -3016,8 +3016,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 247..429,\n-                                    focus_range: 286..292,\n+                                    full_range: 248..430,\n+                                    focus_range: 287..293,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "e2bd6e4567edc8aca2c40a8991a913ff3240b0e3", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 66, "deletions": 48, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=916384a1ea50323e8d44d8024ede1d39244fbb7c", "patch": "@@ -147,74 +147,92 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n \n #[cfg(test)]\n mod tests {\n-    use ide_db::helpers::FamousDefs;\n-\n-    use super::*;\n-\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n-    const ORDABLE_FIXTURE: &'static str = r\"\n-//- /lib.rs deps:core crate:ordable\n-struct NonOrderable;\n-struct Orderable;\n-impl core::cmp::Ord for Orderable {}\n-\";\n-\n-    fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,ordable\\n{}\\n{}{}\",\n-            ra_fixture_before,\n-            FamousDefs::FIXTURE,\n-            ORDABLE_FIXTURE\n-        );\n-        check_assist(apply_demorgan, before, &format!(\"{}\\n\", ra_fixture_after));\n-    }\n+    use super::*;\n \n     #[test]\n     fn demorgan_handles_leq() {\n-        check(\n-            r\"use ordable::Orderable;\n+        check_assist(\n+            apply_demorgan,\n+            r#\"\n+//- minicore: ord, derive\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+struct S;\n+\n fn f() {\n-    Orderable < Orderable &&$0 Orderable <= Orderable\n-}\",\n-            r\"use ordable::Orderable;\n+    S < S &&$0 S <= S\n+}\n+\"#,\n+            r#\"\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+struct S;\n+\n fn f() {\n-    !(Orderable >= Orderable || Orderable > Orderable)\n-}\",\n+    !(S >= S || S > S)\n+}\n+\"#,\n         );\n-        check(\n-            r\"use ordable::NonOrderable;\n+\n+        check_assist(\n+            apply_demorgan,\n+            r#\"\n+//- minicore: ord, derive\n+struct S;\n+\n fn f() {\n-    NonOrderable < NonOrderable &&$0 NonOrderable <= NonOrderable\n-}\",\n-            r\"use ordable::NonOrderable;\n+    S < S &&$0 S <= S\n+}\n+\"#,\n+            r#\"\n+struct S;\n+\n fn f() {\n-    !(!(NonOrderable < NonOrderable) || !(NonOrderable <= NonOrderable))\n-}\",\n+    !(!(S < S) || !(S <= S))\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn demorgan_handles_geq() {\n-        check(\n-            r\"use ordable::Orderable;\n+        check_assist(\n+            apply_demorgan,\n+            r#\"\n+//- minicore: ord, derive\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+struct S;\n+\n fn f() {\n-    Orderable > Orderable &&$0 Orderable >= Orderable\n-}\",\n-            r\"use ordable::Orderable;\n+    S > S &&$0 S >= S\n+}\n+\"#,\n+            r#\"\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+struct S;\n+\n fn f() {\n-    !(Orderable <= Orderable || Orderable < Orderable)\n-}\",\n+    !(S <= S || S < S)\n+}\n+\"#,\n         );\n-        check(\n-            r\"use ordable::NonOrderable;\n+        check_assist(\n+            apply_demorgan,\n+            r#\"\n+//- minicore: ord, derive\n+struct S;\n+\n fn f() {\n-    Orderable > Orderable &&$0 Orderable >= Orderable\n-}\",\n-            r\"use ordable::NonOrderable;\n+    S > S &&$0 S >= S\n+}\n+\"#,\n+            r#\"\n+struct S;\n+\n fn f() {\n-    !(!(Orderable > Orderable) || !(Orderable >= Orderable))\n-}\",\n+    !(!(S > S) || !(S >= S))\n+}\n+\"#,\n         );\n     }\n "}, {"sha": "4e96ff1ec95f433e687cf926db45ca98c6b4ccbf", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=916384a1ea50323e8d44d8024ede1d39244fbb7c", "patch": "@@ -35,6 +35,7 @@ pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     RootDatabase::with_single_file(text)\n }\n \n+#[track_caller]\n pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     check(assist, ra_fixture_before, ExpectedResult::After(&ra_fixture_after), None);"}, {"sha": "6310fc0e1bfdba1c28a8bd98174ea367b874b707", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=916384a1ea50323e8d44d8024ede1d39244fbb7c", "patch": "@@ -1,15 +1,5 @@\n //- /libcore.rs crate:core\n //! Signatures of traits, types and functions from the core lib for use in tests.\n-pub mod cmp {\n-\n-    pub trait Ord {\n-        fn cmp(&self, other: &Self) -> Ordering;\n-        fn max(self, other: Self) -> Self;\n-        fn min(self, other: Self) -> Self;\n-        fn clamp(self, min: Self, max: Self) -> Self;\n-    }\n-}\n-\n pub mod prelude {\n     pub mod rust_2018 {\n         pub use crate::{"}, {"sha": "9ec541c573e0e2db89b72a8f8aea326fc6093fcf", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=916384a1ea50323e8d44d8024ede1d39244fbb7c", "patch": "@@ -24,6 +24,9 @@\n //!     iterators: iterator\n //!     default: sized\n //!     from: sized\n+//!     eq: sized\n+//!     ord: eq, option\n+//!     derive:\n \n pub mod marker {\n     // region:sized\n@@ -173,6 +176,49 @@ pub mod ops {\n     // endregion:fn\n }\n \n+// region:eq\n+pub mod cmp {\n+    #[lang = \"eq\"]\n+    pub trait PartialEq<Rhs: ?Sized = Self> {\n+        fn eq(&self, other: &Rhs) -> bool;\n+    }\n+\n+    pub trait Eq: PartialEq<Self> {}\n+\n+    // region:derive\n+    #[rustc_builtin_macro]\n+    pub macro PartialEq($item:item) {}\n+    #[rustc_builtin_macro]\n+    pub macro Eq($item:item) {}\n+    // endregion:derive\n+\n+    // region:ord\n+    #[lang = \"partial_ord\"]\n+    pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n+        fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+    }\n+\n+    pub trait Ord: Eq + PartialOrd<Self> {\n+        fn cmp(&self, other: &Self) -> Ordering;\n+    }\n+\n+    pub enum Ordering {\n+        Less = -1,\n+        Equal = 0,\n+        Greater = 1,\n+    }\n+\n+    // region:derive\n+    #[rustc_builtin_macro]\n+    pub macro PartialOrd($item:item) {}\n+    #[rustc_builtin_macro]\n+    pub macro Ord($item:item) {}\n+    // endregion:derive\n+\n+    // endregion:ord\n+}\n+// endregion:eq\n+\n // region:slice\n pub mod slice {\n     #[lang = \"slice\"]\n@@ -342,16 +388,30 @@ pub mod iter {\n }\n // endregion:iterator\n \n+// region:derive\n+mod macros {\n+    pub(crate) mod builtin {\n+        #[rustc_builtin_macro]\n+        pub macro derive($item:item) {\n+            /* compiler built-in */\n+        }\n+    }\n+}\n+// endregion:derive\n+\n pub mod prelude {\n     pub mod v1 {\n         pub use crate::{\n+            cmp::{Eq, PartialEq},               // :eq\n+            cmp::{Ord, PartialOrd},             // :ord\n+            convert::{From, Into},              // :from\n             default::Default,                   // :default\n             iter::{IntoIterator, Iterator},     // :iterator\n+            macros::builtin::derive,            // :derive\n             marker::Sized,                      // :sized\n             ops::{Fn, FnMut, FnOnce},           // :fn\n             option::Option::{self, None, Some}, // :option\n             result::Result::{self, Err, Ok},    // :result\n-            convert::{From, Into},    // :from\n         };\n     }\n "}]}