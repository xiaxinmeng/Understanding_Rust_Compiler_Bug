{"sha": "890a76f479e32d7509b85aadd48301634508de39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MGE3NmY0NzllMzJkNzUwOWI4NWFhZGQ0ODMwMTYzNDUwOGRlMzk=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-06-24T02:22:06Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-06-24T05:36:40Z"}, "message": "only set \"overruled by outer forbid\" once for lint groups, by group name\n\nPreviously, conflicting forbid/allow attributes for a lint group would\nresult in a separate \"allow(L) overruled by outer forbid(L)\" error for\nevery lint L in the group. This was needlessly and annoyingly verbose;\nwe prefer to just have one error pointing out the conflicting\nattributes.\n\nResolves #42873.", "tree": {"sha": "6ccec1f03bfb4ea0d532ccd9fe1f721140ae1d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ccec1f03bfb4ea0d532ccd9fe1f721140ae1d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890a76f479e32d7509b85aadd48301634508de39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890a76f479e32d7509b85aadd48301634508de39", "html_url": "https://github.com/rust-lang/rust/commit/890a76f479e32d7509b85aadd48301634508de39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890a76f479e32d7509b85aadd48301634508de39/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426331b9e44a955b0e43da9b1542b7cf15fac31e", "url": "https://api.github.com/repos/rust-lang/rust/commits/426331b9e44a955b0e43da9b1542b7cf15fac31e", "html_url": "https://github.com/rust-lang/rust/commit/426331b9e44a955b0e43da9b1542b7cf15fac31e"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "466d163854f1d81bd0a7d4fcb17199fbf979871a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/890a76f479e32d7509b85aadd48301634508de39/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890a76f479e32d7509b85aadd48301634508de39/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=890a76f479e32d7509b85aadd48301634508de39", "patch": "@@ -721,21 +721,22 @@ pub trait LintContext<'tcx>: Sized {\n         let mut pushed = 0;\n \n         for result in gather_attrs(attrs) {\n-            let v = match result {\n+            let (is_group, lint_level_spans) = match result {\n                 Err(span) => {\n                     span_err!(self.sess(), span, E0452,\n                               \"malformed lint attribute\");\n                     continue;\n                 }\n                 Ok((lint_name, level, span)) => {\n                     match self.lints().find_lint(&lint_name.as_str()) {\n-                        Ok(lint_id) => vec![(lint_id, level, span)],\n+                        Ok(lint_id) => (false, vec![(lint_id, level, span)]),\n                         Err(FindLintError::NotFound) => {\n                             match self.lints().lint_groups.get(&*lint_name.as_str()) {\n-                                Some(&(ref v, _)) => v.iter()\n+                                Some(&(ref v, _)) => (true,\n+                                                      v.iter()\n                                                       .map(|lint_id: &LintId|\n                                                            (*lint_id, level, span))\n-                                                      .collect(),\n+                                                      .collect()),\n                                 None => {\n                                     // The lint or lint group doesn't exist.\n                                     // This is an error, but it was handled\n@@ -751,14 +752,18 @@ pub trait LintContext<'tcx>: Sized {\n \n             let lint_attr_name = result.expect(\"lint attribute should be well-formed\").0;\n \n-            for (lint_id, level, span) in v {\n+            for (lint_id, level, span) in lint_level_spans {\n                 let (now, now_source) = self.lint_sess().get_source(lint_id);\n                 if now == Forbid && level != Forbid {\n-                    let lint_name = lint_id.to_string();\n+                    let forbidden_lint_name = match now_source {\n+                        LintSource::Default => lint_id.to_string(),\n+                        LintSource::Node(name, _) => name.to_string(),\n+                        LintSource::CommandLine(name) => name.to_string(),\n+                    };\n                     let mut diag_builder = struct_span_err!(self.sess(), span, E0453,\n                                                             \"{}({}) overruled by outer forbid({})\",\n-                                                            level.as_str(), lint_name,\n-                                                            lint_name);\n+                                                            level.as_str(), lint_attr_name,\n+                                                            forbidden_lint_name);\n                     diag_builder.span_label(span, \"overruled by previous forbid\");\n                     match now_source {\n                         LintSource::Default => &mut diag_builder,\n@@ -769,7 +774,10 @@ pub trait LintContext<'tcx>: Sized {\n                         LintSource::CommandLine(_) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\")\n                         }\n-                    }.emit()\n+                    }.emit();\n+                    if is_group { // don't set a separate error for every lint in the group\n+                        break;\n+                    }\n                 } else if now != level {\n                     let cx = self.lint_sess_mut();\n                     cx.stack.push((lint_id, (now, now_source)));"}, {"sha": "d71da58829a72772ca51a61d1e91ffe1f648c65c", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/890a76f479e32d7509b85aadd48301634508de39/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890a76f479e32d7509b85aadd48301634508de39/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=890a76f479e32d7509b85aadd48301634508de39", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Forbidding a group (here, `unused`) overrules subsequent allowance of both\n+// the group, and an individual lint in the group (here, `unused_variables`);\n+// and, forbidding an individual lint (here, `non_snake_case`) overrules\n+// subsequent allowance of a lint group containing it (here, `bad_style`). See\n+// Issue #42873.\n+\n+#![forbid(unused, non_snake_case)]\n+\n+#[allow(unused, unused_variables, bad_style)]\n+fn main() {\n+    println!(\"hello forbidden world\")\n+}"}, {"sha": "831b3f65634b2b805485b8dfbe8dd3dfe1899c43", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/890a76f479e32d7509b85aadd48301634508de39/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/890a76f479e32d7509b85aadd48301634508de39/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=890a76f479e32d7509b85aadd48301634508de39", "patch": "@@ -0,0 +1,29 @@\n+error[E0453]: allow(unused) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:19:9\n+   |\n+17 | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+18 | \n+19 | #[allow(unused, unused_variables, bad_style)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused_variables) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:19:17\n+   |\n+17 | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+18 | \n+19 | #[allow(unused, unused_variables, bad_style)]\n+   |                 ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(bad_style) overruled by outer forbid(non_snake_case)\n+  --> $DIR/outer-forbid.rs:19:35\n+   |\n+17 | #![forbid(unused, non_snake_case)]\n+   |                   -------------- `forbid` level set here\n+18 | \n+19 | #[allow(unused, unused_variables, bad_style)]\n+   |                                   ^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to previous error(s)\n+"}]}