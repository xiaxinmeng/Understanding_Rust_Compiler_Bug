{"sha": "5abcca516d3563416d3fba9f2e4b8b024d10f846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYmNjYTUxNmQzNTYzNDE2ZDNmYmE5ZjJlNGI4YjAyNGQxMGY4NDY=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-26T09:56:31Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-27T09:26:35Z"}, "message": "make it build again", "tree": {"sha": "45e484435a5ee06d5a71ec7e5a9c525e7f9c7687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e484435a5ee06d5a71ec7e5a9c525e7f9c7687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5abcca516d3563416d3fba9f2e4b8b024d10f846", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niF0EABECAB0WIQQ4AX3IqIzUAd4RqS7tuxqNIEegdAUCXOutSwAKCRDtuxqNIEeg\ndFNwAKDCfK/sWwvx4zcS6l866S+IAgmx9ACZAWh5Pm4mUqXXG8hJ241qa8z9auw=\n=iG/2\n-----END PGP SIGNATURE-----", "payload": "tree 45e484435a5ee06d5a71ec7e5a9c525e7f9c7687\nparent 2b200f6e1a600e263f314efba5d8c3743095071b\nauthor Pascal Hertleif <pascal@technocreatives.com> 1558864591 +0200\ncommitter Pascal Hertleif <pascal@technocreatives.com> 1558949195 +0200\n\nmake it build again\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5abcca516d3563416d3fba9f2e4b8b024d10f846", "html_url": "https://github.com/rust-lang/rust/commit/5abcca516d3563416d3fba9f2e4b8b024d10f846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5abcca516d3563416d3fba9f2e4b8b024d10f846/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b200f6e1a600e263f314efba5d8c3743095071b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b200f6e1a600e263f314efba5d8c3743095071b", "html_url": "https://github.com/rust-lang/rust/commit/2b200f6e1a600e263f314efba5d8c3743095071b"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "84a1564ceb66c8bcbe3d703688c4f9c03ad065ae", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5abcca516d3563416d3fba9f2e4b8b024d10f846/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abcca516d3563416d3fba9f2e4b8b024d10f846/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=5abcca516d3563416d3fba9f2e4b8b024d10f846", "patch": "@@ -18,7 +18,7 @@ fn main() -> Result<()> {\n         .subcommand(SubCommand::with_name(\"symbols\"))\n         .subcommand(\n             SubCommand::with_name(\"highlight\")\n-                .arg(Arg::with_name(\"rainbow\").short(\"r\").long(\"rainbow\"))\n+                .arg(Arg::with_name(\"rainbow\").short(\"r\").long(\"rainbow\")),\n         )\n         .subcommand(\n             SubCommand::with_name(\"analysis-stats\")"}, {"sha": "dcefb051349f35812363089f630c7bb1517f3d0d", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5abcca516d3563416d3fba9f2e4b8b024d10f846/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abcca516d3563416d3fba9f2e4b8b024d10f846/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=5abcca516d3563416d3fba9f2e4b8b024d10f846", "patch": "@@ -85,13 +85,18 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(SelfType(_)) => \"type\",\n                         Some(Pat(ptr)) => {\n                             binding_hash = Some({\n-                                let text = ptr.syntax_node_ptr().to_node(&source_file.syntax()).text().to_smol_string();\n-                                let shadow_count = bindings_shadow_count.entry(text.clone()).or_default();\n+                                let text = ptr\n+                                    .syntax_node_ptr()\n+                                    .to_node(&source_file.syntax())\n+                                    .text()\n+                                    .to_smol_string();\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(text.clone()).or_default();\n                                 calc_binding_hash(file_id, &text, *shadow_count)\n                             });\n \n                             \"variable\"\n-                        },\n+                        }\n                         Some(SelfParam(_)) => \"type\",\n                         Some(GenericParam(_)) => \"type\",\n                         None => \"text\",\n@@ -105,7 +110,8 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     if name.syntax().ancestors().any(|x| ast::BindPat::cast(x).is_some()) {\n                         binding_hash = Some({\n                             let text = name.syntax().text().to_smol_string();\n-                            let shadow_count = bindings_shadow_count.entry(text.clone()).or_insert(0);\n+                            let shadow_count =\n+                                bindings_shadow_count.entry(text.clone()).or_insert(0);\n                             *shadow_count += 1;\n                             calc_binding_hash(file_id, &text, *shadow_count)\n                         });\n@@ -161,7 +167,8 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     fn rainbowify(seed: u64) -> String {\n         use rand::prelude::*;\n         let mut rng = SmallRng::seed_from_u64(seed);\n-        format!(\"hsl({h},{s}%,{l}%)\",\n+        format!(\n+            \"hsl({h},{s}%,{l}%)\",\n             h = rng.gen_range::<u16, _, _>(0, 361),\n             s = rng.gen_range::<u16, _, _>(42, 99),\n             l = rng.gen_range::<u16, _, _>(40, 91),\n@@ -199,8 +206,12 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n             let classes = ranges.iter().map(|x| x.tag).collect::<Vec<_>>().join(\" \");\n             let binding_hash = ranges.first().and_then(|x| x.binding_hash);\n             let color = match (rainbow, binding_hash) {\n-                (true, Some(hash)) => format!(\" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\", hash, rainbowify(hash)),\n-                _ => \"\".into()\n+                (true, Some(hash)) => format!(\n+                    \" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\",\n+                    hash,\n+                    rainbowify(hash)\n+                ),\n+                _ => \"\".into(),\n             };\n             buf.push_str(&format!(\"<span class=\\\"{}\\\"{}>{}</span>\", classes, color, text));\n         }\n@@ -264,10 +275,11 @@ fn main() {\n     }\n     unsafe { vec.set_len(0); }\n }\n-\"#.trim(),\n+\"#\n+            .trim(),\n         );\n         let dst_file = project_dir().join(\"crates/ra_ide_api/src/snapshots/highlighting.html\");\n-        let actual_html = &analysis.highlight_as_html(file_id).unwrap();\n+        let actual_html = &analysis.highlight_as_html(file_id, true).unwrap();\n         let expected_html = &read_text(&dst_file);\n         std::fs::write(dst_file, &actual_html).unwrap();\n         assert_eq_text!(expected_html, actual_html);\n@@ -285,10 +297,12 @@ fn main() {\n     let x = \"other color please!\";\n     let y = x.to_string();\n }\n-\"#.trim(),\n+\"#\n+            .trim(),\n         );\n-        let dst_file = project_dir().join(\"crates/ra_ide_api/src/snapshots/rainbow_highlighting.html\");\n-        let actual_html = &analysis.highlight_as_html(file_id).unwrap();\n+        let dst_file =\n+            project_dir().join(\"crates/ra_ide_api/src/snapshots/rainbow_highlighting.html\");\n+        let actual_html = &analysis.highlight_as_html(file_id, true).unwrap();\n         let expected_html = &read_text(&dst_file);\n         std::fs::write(dst_file, &actual_html).unwrap();\n         assert_eq_text!(expected_html, actual_html);"}, {"sha": "1df8224ba6f9f260b7fcfd3e71e5a88e472e44c8", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5abcca516d3563416d3fba9f2e4b8b024d10f846/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abcca516d3563416d3fba9f2e4b8b024d10f846/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5abcca516d3563416d3fba9f2e4b8b024d10f846", "patch": "@@ -875,7 +875,7 @@ fn highlight(world: &ServerWorld, file_id: FileId) -> Result<Vec<Decoration>> {\n         .map(|h| Decoration {\n             range: h.range.conv_with(&line_index),\n             tag: h.tag,\n-            id: h.id.map(|x| x.to_string()),\n+            id: h.binding_hash.map(|x| x.to_string()),\n         })\n         .collect();\n     Ok(res)"}]}