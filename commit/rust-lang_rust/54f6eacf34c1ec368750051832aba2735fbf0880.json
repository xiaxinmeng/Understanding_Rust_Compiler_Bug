{"sha": "54f6eacf34c1ec368750051832aba2735fbf0880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjZlYWNmMzRjMWVjMzY4NzUwMDUxODMyYWJhMjczNWZiZjA4ODA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-21T01:51:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-21T01:51:29Z"}, "message": "green: Remove some unsafe code in BasicLoop", "tree": {"sha": "3aa5167f3cda078cbf74e5a6ece87c0c2799b194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa5167f3cda078cbf74e5a6ece87c0c2799b194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f6eacf34c1ec368750051832aba2735fbf0880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f6eacf34c1ec368750051832aba2735fbf0880", "html_url": "https://github.com/rust-lang/rust/commit/54f6eacf34c1ec368750051832aba2735fbf0880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f6eacf34c1ec368750051832aba2735fbf0880/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05a453edb3f97aab4c15efdeae238aaea21849a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/05a453edb3f97aab4c15efdeae238aaea21849a5", "html_url": "https://github.com/rust-lang/rust/commit/05a453edb3f97aab4c15efdeae238aaea21849a5"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "1ebebbe555e8bd5ae74c899ebc945f9dd502a7bf", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/54f6eacf34c1ec368750051832aba2735fbf0880/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6eacf34c1ec368750051832aba2735fbf0880/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=54f6eacf34c1ec368750051832aba2735fbf0880", "patch": "@@ -15,6 +15,8 @@\n //! This implementation is also used as the fallback implementation of an event\n //! loop if no other one is provided (and M:N scheduling is desired).\n \n+use alloc::arc::Arc;\n+use std::sync::atomics;\n use std::mem;\n use std::rt::rtio::{EventLoop, IoFactory, RemoteCallback};\n use std::rt::rtio::{PausableIdleCallback, Callback};\n@@ -27,10 +29,11 @@ pub fn event_loop() -> Box<EventLoop:Send> {\n \n struct BasicLoop {\n     work: Vec<proc():Send>,             // pending work\n-    idle: Option<*mut BasicPausable>, // only one is allowed\n     remotes: Vec<(uint, Box<Callback:Send>)>,\n     next_remote: uint,\n     messages: Exclusive<Vec<Message>>,\n+    idle: Option<Box<Callback:Send>>,\n+    idle_active: Option<Arc<atomics::AtomicBool>>,\n }\n \n enum Message { RunRemote(uint), RemoveRemote(uint) }\n@@ -40,6 +43,7 @@ impl BasicLoop {\n         BasicLoop {\n             work: vec![],\n             idle: None,\n+            idle_active: None,\n             next_remote: 0,\n             remotes: vec![],\n             messages: Exclusive::new(vec![]),\n@@ -92,20 +96,18 @@ impl BasicLoop {\n \n     /// Run the idle callback if one is registered\n     fn idle(&mut self) {\n-        unsafe {\n-            match self.idle {\n-                Some(idle) => {\n-                    if (*idle).active {\n-                        (*idle).work.call();\n-                    }\n+        match self.idle {\n+            Some(ref mut idle) => {\n+                if self.idle_active.get_ref().load(atomics::SeqCst) {\n+                    idle.call();\n                 }\n-                None => {}\n             }\n+            None => {}\n         }\n     }\n \n     fn has_idle(&self) -> bool {\n-        unsafe { self.idle.is_some() && (**self.idle.get_ref()).active }\n+        self.idle.is_some() && self.idle_active.get_ref().load(atomics::SeqCst)\n     }\n }\n \n@@ -141,13 +143,11 @@ impl EventLoop for BasicLoop {\n     // FIXME: Seems like a really weird requirement to have an event loop provide.\n     fn pausable_idle_callback(&mut self, cb: Box<Callback:Send>)\n                               -> Box<PausableIdleCallback:Send> {\n-        let callback = box BasicPausable::new(self, cb);\n         rtassert!(self.idle.is_none());\n-        unsafe {\n-            let cb_ptr: &*mut BasicPausable = mem::transmute(&callback);\n-            self.idle = Some(*cb_ptr);\n-        }\n-        callback as Box<PausableIdleCallback:Send>\n+        self.idle = Some(cb);\n+        let a = Arc::new(atomics::AtomicBool::new(true));\n+        self.idle_active = Some(a.clone());\n+        box BasicPausable { active: a } as Box<PausableIdleCallback:Send>\n     }\n \n     fn remote_callback(&mut self, f: Box<Callback:Send>)\n@@ -196,35 +196,21 @@ impl Drop for BasicRemote {\n }\n \n struct BasicPausable {\n-    eloop: *mut BasicLoop,\n-    work: Box<Callback:Send>,\n-    active: bool,\n-}\n-\n-impl BasicPausable {\n-    fn new(eloop: &mut BasicLoop, cb: Box<Callback:Send>) -> BasicPausable {\n-        BasicPausable {\n-            active: false,\n-            work: cb,\n-            eloop: eloop,\n-        }\n-    }\n+    active: Arc<atomics::AtomicBool>,\n }\n \n impl PausableIdleCallback for BasicPausable {\n     fn pause(&mut self) {\n-        self.active = false;\n+        self.active.store(false, atomics::SeqCst);\n     }\n     fn resume(&mut self) {\n-        self.active = true;\n+        self.active.store(true, atomics::SeqCst);\n     }\n }\n \n impl Drop for BasicPausable {\n     fn drop(&mut self) {\n-        unsafe {\n-            (*self.eloop).idle = None;\n-        }\n+        self.active.store(false, atomics::SeqCst);\n     }\n }\n "}, {"sha": "39b6485716315171827904db4b1307c642ee3df1", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f6eacf34c1ec368750051832aba2735fbf0880/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6eacf34c1ec368750051832aba2735fbf0880/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=54f6eacf34c1ec368750051832aba2735fbf0880", "patch": "@@ -435,7 +435,6 @@ impl SchedPool {\n                                             pool.sleepers.clone(),\n                                             pool.task_state.clone());\n             pool.handles.push(sched.make_handle());\n-            let sched = sched;\n             pool.threads.push(Thread::start(proc() { sched.bootstrap(); }));\n         }\n \n@@ -497,7 +496,6 @@ impl SchedPool {\n                                         self.task_state.clone());\n         let ret = sched.make_handle();\n         self.handles.push(sched.make_handle());\n-        let sched = sched;\n         self.threads.push(Thread::start(proc() { sched.bootstrap() }));\n \n         return ret;"}, {"sha": "d28e74a2b80b7c14d823c5a4175b822c43f5a76d", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f6eacf34c1ec368750051832aba2735fbf0880/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6eacf34c1ec368750051832aba2735fbf0880/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=54f6eacf34c1ec368750051832aba2735fbf0880", "patch": "@@ -1142,7 +1142,7 @@ mod test {\n \n         Thread::start(proc() {\n             let sleepers = SleeperList::new();\n-            let mut pool = BufferPool::new();\n+            let pool = BufferPool::new();\n             let (normal_worker, normal_stealer) = pool.deque();\n             let (special_worker, special_stealer) = pool.deque();\n             let queues = vec![normal_stealer, special_stealer];"}]}