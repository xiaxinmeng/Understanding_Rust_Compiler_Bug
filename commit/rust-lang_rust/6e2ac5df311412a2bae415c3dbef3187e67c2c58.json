{"sha": "6e2ac5df311412a2bae415c3dbef3187e67c2c58", "node_id": "C_kwDOAAsO6NoAKDZlMmFjNWRmMzExNDEyYTJiYWU0MTVjM2RiZWYzMTg3ZTY3YzJjNTg", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2022-06-02T10:36:11Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2022-06-02T13:32:48Z"}, "message": "Improve documentation for constructors of pinned `Box`es", "tree": {"sha": "c5fa28222e9b7bfeba7976c4070e84aeb5bab17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5fa28222e9b7bfeba7976c4070e84aeb5bab17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e2ac5df311412a2bae415c3dbef3187e67c2c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2ac5df311412a2bae415c3dbef3187e67c2c58", "html_url": "https://github.com/rust-lang/rust/commit/6e2ac5df311412a2bae415c3dbef3187e67c2c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e2ac5df311412a2bae415c3dbef3187e67c2c58/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9598b4b594c97dff66feb93522e22db500deea07", "url": "https://api.github.com/repos/rust-lang/rust/commits/9598b4b594c97dff66feb93522e22db500deea07", "html_url": "https://github.com/rust-lang/rust/commit/9598b4b594c97dff66feb93522e22db500deea07"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "7e548d639fd677523f706665e3c9f2b61d741ce8", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6e2ac5df311412a2bae415c3dbef3187e67c2c58/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2ac5df311412a2bae415c3dbef3187e67c2c58/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=6e2ac5df311412a2bae415c3dbef3187e67c2c58", "patch": "@@ -266,8 +266,13 @@ impl<T> Box<T> {\n         Self::new_zeroed_in(Global)\n     }\n \n-    /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n+    /// Constructs a new `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n     /// `x` will be pinned in memory and unable to be moved.\n+    ///\n+    /// Constructing and pinning of the `Box` can also be done in two steps: `Box::pin(x)`\n+    /// does the same as <code>[Box::into_pin]\\([Box::new]\\(x))</code>. Consider using\n+    /// [`into_pin`](Box::into_pin) if you already have a `Box<T>`, or if you want to\n+    /// construct a (pinned) `Box` in a different way than with [`Box::new`].\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[must_use]\n@@ -553,8 +558,13 @@ impl<T, A: Allocator> Box<T, A> {\n         unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }\n     }\n \n-    /// Constructs a new `Pin<Box<T, A>>`. If `T` does not implement `Unpin`, then\n+    /// Constructs a new `Pin<Box<T, A>>`. If `T` does not implement [`Unpin`], then\n     /// `x` will be pinned in memory and unable to be moved.\n+    ///\n+    /// Constructing and pinning of the `Box` can also be done in two steps: `Box::pin_in(x, alloc)`\n+    /// does the same as <code>[Box::into_pin]\\([Box::new_in]\\(x, alloc))</code>. Consider using\n+    /// [`into_pin`](Box::into_pin) if you already have a `Box<T, A>`, or if you want to\n+    /// construct a (pinned) `Box` in a different way than with [`Box::new_in`].\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n@@ -1170,12 +1180,18 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n         unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }\n     }\n \n-    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n+    /// `*boxed` will be pinned in memory and unable to be moved.\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n     ///\n     /// This is also available via [`From`].\n     ///\n+    /// Constructing and pinning a `Box` with <code>Box::into_pin([Box::new]\\(x))</code>\n+    /// can also be written more concisely using <code>[Box::pin]\\(x)</code>.\n+    /// This `into_pin` method is useful if you already have a `Box<T>`, or you are\n+    /// constructing a (pinned) `Box` in a different way than with [`Box::new`].\n+    ///\n     /// # Notes\n     ///\n     /// It's not recommended that crates add an impl like `From<Box<T>> for Pin<T>`,\n@@ -1437,9 +1453,17 @@ impl<T: ?Sized, A: Allocator> const From<Box<T, A>> for Pin<Box<T, A>>\n where\n     A: 'static,\n {\n-    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n+    /// `*boxed` will be pinned in memory and unable to be moved.\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// This is also available via [`Box::into_pin`].\n+    ///\n+    /// Constructing and pinning a `Box` with <code><Pin<Box\\<T>>>::from([Box::new]\\(x))</code>\n+    /// can also be written more concisely using <code>[Box::pin]\\(x)</code>.\n+    /// This `From` implementation is useful if you already have a `Box<T>`, or you are\n+    /// constructing a (pinned) `Box` in a different way than with [`Box::new`].\n     fn from(boxed: Box<T, A>) -> Self {\n         Box::into_pin(boxed)\n     }"}]}