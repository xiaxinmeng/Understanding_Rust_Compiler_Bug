{"sha": "9ccad60acca0d359f1fd9046c99952d0c1adc763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljY2FkNjBhY2NhMGQzNTlmMWZkOTA0NmM5OTk1MmQwYzFhZGM3NjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-19T17:21:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-19T17:21:26Z"}, "message": "Implement ChildBySource for DefWithBody", "tree": {"sha": "b25ab818073492ff8c80176043b68ffe7a40ab3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25ab818073492ff8c80176043b68ffe7a40ab3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ccad60acca0d359f1fd9046c99952d0c1adc763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccad60acca0d359f1fd9046c99952d0c1adc763", "html_url": "https://github.com/rust-lang/rust/commit/9ccad60acca0d359f1fd9046c99952d0c1adc763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ccad60acca0d359f1fd9046c99952d0c1adc763/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f", "html_url": "https://github.com/rust-lang/rust/commit/ba12e83c26b24358e1bfbae0f913f8dfa13fc68f"}], "stats": {"total": 97, "additions": 55, "deletions": 42}, "files": [{"sha": "f5a65ad40970fb8cb279377eee7da71d5f6362cf", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 55, "deletions": 42, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9ccad60acca0d359f1fd9046c99952d0c1adc763/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ccad60acca0d359f1fd9046c99952d0c1adc763/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=9ccad60acca0d359f1fd9046c99952d0c1adc763", "patch": "@@ -11,8 +11,8 @@ use crate::{\n     dyn_map::DynMap,\n     keys,\n     src::{HasChildSource, HasSource},\n-    AdtId, AssocItemId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId, ModuleId,\n-    StructFieldId, TraitId, VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId,\n+    ModuleId, StructFieldId, TraitId, VariantId,\n };\n \n pub trait ChildBySource {\n@@ -76,47 +76,11 @@ impl ChildBySource for ModuleId {\n         let mut res = DynMap::default();\n \n         let crate_def_map = db.crate_def_map(self.krate);\n-        for item in crate_def_map[self.local_id].scope.declarations() {\n-            match item {\n-                ModuleDefId::FunctionId(func) => {\n-                    let src = func.lookup(db).source(db);\n-                    res[keys::FUNCTION].insert(src, func)\n-                }\n-                ModuleDefId::ConstId(konst) => {\n-                    let src = konst.lookup(db).source(db);\n-                    res[keys::CONST].insert(src, konst)\n-                }\n-                ModuleDefId::StaticId(statik) => {\n-                    let src = statik.lookup(db).source(db);\n-                    res[keys::STATIC].insert(src, statik)\n-                }\n-                ModuleDefId::TypeAliasId(ty) => {\n-                    let src = ty.lookup(db).source(db);\n-                    res[keys::TYPE_ALIAS].insert(src, ty)\n-                }\n-                ModuleDefId::TraitId(trait_) => {\n-                    let src = trait_.lookup(db).source(db);\n-                    res[keys::TRAIT].insert(src, trait_)\n-                }\n-                ModuleDefId::AdtId(adt) => match adt {\n-                    AdtId::StructId(strukt) => {\n-                        let src = strukt.lookup(db).source(db);\n-                        res[keys::STRUCT].insert(src, strukt)\n-                    }\n-                    AdtId::UnionId(union_) => {\n-                        let src = union_.lookup(db).source(db);\n-                        res[keys::UNION].insert(src, union_)\n-                    }\n-                    AdtId::EnumId(enum_) => {\n-                        let src = enum_.lookup(db).source(db);\n-                        res[keys::ENUM].insert(src, enum_)\n-                    }\n-                },\n-                _ => (),\n-            }\n-        }\n+        let module_data = &crate_def_map[self.local_id];\n \n-        for &impl_ in crate_def_map[self.local_id].impls.iter() {\n+        module_data.scope.declarations().for_each(|item| add_module_def(db, &mut res, item));\n+\n+        for &impl_ in module_data.impls.iter() {\n             let src = impl_.lookup(db).source(db);\n             res[keys::IMPL].insert(src, impl_)\n         }\n@@ -125,6 +89,46 @@ impl ChildBySource for ModuleId {\n     }\n }\n \n+fn add_module_def(db: &impl DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n+    match item {\n+        ModuleDefId::FunctionId(func) => {\n+            let src = func.lookup(db).source(db);\n+            map[keys::FUNCTION].insert(src, func)\n+        }\n+        ModuleDefId::ConstId(konst) => {\n+            let src = konst.lookup(db).source(db);\n+            map[keys::CONST].insert(src, konst)\n+        }\n+        ModuleDefId::StaticId(statik) => {\n+            let src = statik.lookup(db).source(db);\n+            map[keys::STATIC].insert(src, statik)\n+        }\n+        ModuleDefId::TypeAliasId(ty) => {\n+            let src = ty.lookup(db).source(db);\n+            map[keys::TYPE_ALIAS].insert(src, ty)\n+        }\n+        ModuleDefId::TraitId(trait_) => {\n+            let src = trait_.lookup(db).source(db);\n+            map[keys::TRAIT].insert(src, trait_)\n+        }\n+        ModuleDefId::AdtId(adt) => match adt {\n+            AdtId::StructId(strukt) => {\n+                let src = strukt.lookup(db).source(db);\n+                map[keys::STRUCT].insert(src, strukt)\n+            }\n+            AdtId::UnionId(union_) => {\n+                let src = union_.lookup(db).source(db);\n+                map[keys::UNION].insert(src, union_)\n+            }\n+            AdtId::EnumId(enum_) => {\n+                let src = enum_.lookup(db).source(db);\n+                map[keys::ENUM].insert(src, enum_)\n+            }\n+        },\n+        _ => (),\n+    }\n+}\n+\n impl ChildBySource for VariantId {\n     fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n         let mut res = DynMap::default();\n@@ -160,3 +164,12 @@ impl ChildBySource for EnumId {\n         res\n     }\n }\n+\n+impl ChildBySource for DefWithBodyId {\n+    fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n+        let mut res = DynMap::default();\n+        let body = db.body(*self);\n+        body.defs.iter().copied().for_each(|item| add_module_def(db, &mut res, item));\n+        res\n+    }\n+}"}]}