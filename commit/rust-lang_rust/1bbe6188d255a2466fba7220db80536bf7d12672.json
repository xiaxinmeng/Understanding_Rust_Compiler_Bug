{"sha": "1bbe6188d255a2466fba7220db80536bf7d12672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYmU2MTg4ZDI1NWEyNDY2ZmJhNzIyMGRiODA1MzZiZjdkMTI2NzI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-28T12:24:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-30T09:30:34Z"}, "message": "Add missing examples for NonNull", "tree": {"sha": "0f7d5989b11e1a32f77f31e5e5e7fd5d8bb2138b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f7d5989b11e1a32f77f31e5e5e7fd5d8bb2138b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbe6188d255a2466fba7220db80536bf7d12672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbe6188d255a2466fba7220db80536bf7d12672", "html_url": "https://github.com/rust-lang/rust/commit/1bbe6188d255a2466fba7220db80536bf7d12672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbe6188d255a2466fba7220db80536bf7d12672/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea2e446f09b923d513013743b37b43fca7282dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea2e446f09b923d513013743b37b43fca7282dc", "html_url": "https://github.com/rust-lang/rust/commit/aea2e446f09b923d513013743b37b43fca7282dc"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "032df7f5a80ad8d82d52443d8e786116eb210701", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1bbe6188d255a2466fba7220db80536bf7d12672/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbe6188d255a2466fba7220db80536bf7d12672/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=1bbe6188d255a2466fba7220db80536bf7d12672", "patch": "@@ -71,6 +71,16 @@ impl<T: Sized> NonNull<T> {\n     /// a `T`, which means this must not be used as a \"not yet initialized\"\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let ptr = NonNull::<u32>::dangling();\n+    /// // Important: don't try to access the value of `ptr` without\n+    /// // initializing it first! The pointer is not null but isn't valid either!\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.36.0\")]\n     #[inline]\n@@ -155,6 +165,18 @@ impl<T: ?Sized> NonNull<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = unsafe { NonNull::new_unchecked(&mut x as *mut _) };\n+    ///\n+    /// // NEVER DO THAT!!!\n+    /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.25.0\")]\n     #[inline]\n@@ -164,6 +186,19 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect(\"ptr is null!\");\n+    ///\n+    /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {\n+    ///     unreachable!();\n+    /// }\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n@@ -205,6 +240,22 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::new(&mut x).expect(\"ptr is null!\");\n+    ///\n+    /// let x_value = unsafe { *ptr.as_ptr() };\n+    /// assert_eq!(x_value, 0);\n+    ///\n+    /// unsafe { *ptr.as_ptr() += 2; }\n+    /// let x_value = unsafe { *ptr.as_ptr() };\n+    /// assert_eq!(x_value, 2);\n+    /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n@@ -239,6 +290,18 @@ impl<T: ?Sized> NonNull<T> {\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::new(&mut x as *mut _).expect(\"ptr is null!\");\n+    ///\n+    /// let ref_x = unsafe { ptr.as_ref() };\n+    /// println!(\"{}\", ref_x);\n+    /// ```\n+    ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n@@ -274,6 +337,19 @@ impl<T: ?Sized> NonNull<T> {\n     /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let mut ptr = NonNull::new(&mut x).expect(\"null pointer\");\n+    ///\n+    /// let x_ref = unsafe { ptr.as_mut() };\n+    /// assert_eq!(*x_ref, 0);\n+    /// *x_ref += 2;\n+    /// assert_eq!(*x_ref, 2);\n+    /// ```\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n@@ -285,6 +361,18 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Casts to a pointer of another type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let mut x = 0u32;\n+    /// let ptr = NonNull::new(&mut x as *mut _).expect(\"null pointer\");\n+    ///\n+    /// let casted_ptr = ptr.cast::<i8>();\n+    /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();\n+    /// ```\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.36.0\")]\n     #[inline]"}]}