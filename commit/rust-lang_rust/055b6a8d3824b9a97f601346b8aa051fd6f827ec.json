{"sha": "055b6a8d3824b9a97f601346b8aa051fd6f827ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NWI2YThkMzgyNGI5YTk3ZjYwMTM0NmI4YWEwNTFmZDZmODI3ZWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T07:36:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T07:36:37Z"}, "message": "store full TargetDataLayout in Memory instead of just pointer size", "tree": {"sha": "89a8cd966f1b772d6c9d558fecd0ee894d0fca95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a8cd966f1b772d6c9d558fecd0ee894d0fca95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/055b6a8d3824b9a97f601346b8aa051fd6f827ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXa5GFAAoJEFbW7qD8Z6xGN34P/2zSBnmJDL3OUR1HOxuhFpxy\nHTegWzg7cymrMuOdqozfq4r6vNpxrRMbQhnULNhOmAXStcoEK+dJVgYLDwVT5B4t\ncXMgTa2Y3MLEbddTlArU/D+F46ExNUf6vNkkhI/cr9cAKOhwdZCn7EiWvuPnMMQP\n3Q+RD+z56ah+Y9pEdd8aPmTh5C/VbbQhJ49Sc3vZ3AmqF1jpoyX3dGDMw+SZOa6v\nbS+gk/PsWGAoxY0LtpXhF3l8uQZG7tbW2AC88wSAgN4PvrcPXtZT55cF86wNiUkH\nZ53T5in+511l6buEamJhUgakjfAxd3FDO/kMGbXCxnQ3ofsws30FKgYMPnfquT61\nTH7i97gQ9UQiOaDKPuGycRlln+GWwZblk0DB5a/WbFlO41LWRvavu/CRK7zrczbW\nypf/3bbjf5azt1M9WV0vVhkqRf+9tfoKY6oG08t/E2wzzIWoZGsCiCko+JfPr/Hs\nCbb7nbH6+XfGFmIT0VvI0djEUE1mX/ZLweY6djFazc+YSJVDEKp2EnxWEUFDfDOy\n2ycEJBiCGCZeCQFZAVCf6j+k0g96mGBF+isPWrWgXqn/IMbjPHxGOOBGctdFD6/j\naZMRfVZ9E0kH96wVaLphyOd7/hqgwGZAlWrVtY0njPEf6M6K0tmxjSi66OEu5wSS\n64gFEf1dW4ZM9USgLrNu\n=VDbB\n-----END PGP SIGNATURE-----", "payload": "tree 89a8cd966f1b772d6c9d558fecd0ee894d0fca95\nparent b33a9f34311834807f580191394e45136bd58210\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466667384 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466667397 +0200\n\nstore full TargetDataLayout in Memory instead of just pointer size"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/055b6a8d3824b9a97f601346b8aa051fd6f827ec", "html_url": "https://github.com/rust-lang/rust/commit/055b6a8d3824b9a97f601346b8aa051fd6f827ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/055b6a8d3824b9a97f601346b8aa051fd6f827ec/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b33a9f34311834807f580191394e45136bd58210", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33a9f34311834807f580191394e45136bd58210", "html_url": "https://github.com/rust-lang/rust/commit/b33a9f34311834807f580191394e45136bd58210"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "ec6ac0cbcc6fca50665ada036bc5ef3f03ffaac1", "filename": "src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/055b6a8d3824b9a97f601346b8aa051fd6f827ec/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055b6a8d3824b9a97f601346b8aa051fd6f827ec/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=055b6a8d3824b9a97f601346b8aa051fd6f827ec", "patch": "@@ -16,7 +16,7 @@ pub enum EvalError<'tcx> {\n     PointerOutOfBounds {\n         ptr: Pointer,\n         size: usize,\n-        allocation_size: usize,\n+        allocation_size: u64,\n     },\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,"}, {"sha": "5531718a879ec411bda8e6d310851136987ba1be", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/055b6a8d3824b9a97f601346b8aa051fd6f827ec/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055b6a8d3824b9a97f601346b8aa051fd6f827ec/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=055b6a8d3824b9a97f601346b8aa051fd6f827ec", "patch": "@@ -35,7 +35,7 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     mir_cache: RefCell<DefIdMap<Rc<mir::Mir<'tcx>>>>,\n \n     /// The virtual memory system.\n-    memory: Memory<'tcx>,\n+    memory: Memory<'a, 'tcx>,\n \n     /// Precomputed statics, constants and promoteds.\n     statics: HashMap<ConstantId<'tcx>, Pointer>,\n@@ -138,11 +138,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             tcx: tcx,\n             mir_map: mir_map,\n             mir_cache: RefCell::new(DefIdMap()),\n-            memory: Memory::new(tcx.sess\n-                                   .target\n-                                   .uint_type\n-                                   .bit_width()\n-                                   .expect(\"Session::target::uint_type was usize\")/8),\n+            memory: Memory::new(&tcx.data_layout),\n             statics: HashMap::new(),\n             stack: Vec::new(),\n         }\n@@ -162,7 +158,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &self.memory\n     }\n \n-    pub fn memory_mut(&mut self) -> &mut Memory<'tcx> {\n+    pub fn memory_mut(&mut self) -> &mut Memory<'a, 'tcx> {\n         &mut self.memory\n     }\n "}, {"sha": "cf704c36cb205a977fb062e3bd324b3c7603397a", "filename": "src/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/055b6a8d3824b9a97f601346b8aa051fd6f827ec/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055b6a8d3824b9a97f601346b8aa051fd6f827ec/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=055b6a8d3824b9a97f601346b8aa051fd6f827ec", "patch": "@@ -6,6 +6,7 @@ use std::{fmt, iter, mem, ptr};\n use rustc::hir::def_id::DefId;\n use rustc::ty::BareFnTy;\n use rustc::ty::subst::Substs;\n+use rustc::ty::layout::{Size, TargetDataLayout};\n \n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n@@ -53,7 +54,7 @@ pub struct FunctionDefinition<'tcx> {\n // Top-level interpreter memory\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub struct Memory<'tcx> {\n+pub struct Memory<'a, 'tcx> {\n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations)\n     alloc_map: HashMap<AllocId, Allocation>,\n     /// Function \"allocations\". They exist solely so pointers have something to point to, and\n@@ -62,18 +63,17 @@ pub struct Memory<'tcx> {\n     /// Inverse map of `functions` so we don't allocate a new pointer every time we need one\n     function_alloc_cache: HashMap<FunctionDefinition<'tcx>, AllocId>,\n     next_id: AllocId,\n-    pub pointer_size: usize,\n+    pub layout: &'a TargetDataLayout,\n }\n \n-impl<'tcx> Memory<'tcx> {\n-    // FIXME: pass tcx.data_layout (This would also allow it to use primitive type alignments to diagnose unaligned memory accesses.)\n-    pub fn new(pointer_size: usize) -> Self {\n+impl<'a, 'tcx> Memory<'a, 'tcx> {\n+    pub fn new(layout: &'a TargetDataLayout) -> Self {\n         Memory {\n             alloc_map: HashMap::new(),\n             functions: HashMap::new(),\n             function_alloc_cache: HashMap::new(),\n             next_id: AllocId(0),\n-            pointer_size: pointer_size,\n+            layout: layout,\n         }\n     }\n "}, {"sha": "a401257c6ae7e955ee450f37a6d495ae176ed90b", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/055b6a8d3824b9a97f601346b8aa051fd6f827ec/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055b6a8d3824b9a97f601346b8aa051fd6f827ec/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=055b6a8d3824b9a97f601346b8aa051fd6f827ec", "patch": "@@ -77,7 +77,7 @@ fn compile_test() {\n             match cmd.output() {\n                 Ok(ref output) if output.status.success() => writeln!(stderr.lock(), \"ok\").unwrap(),\n                 Ok(output) => {\n-                    writeln!(stderr.lock(), \"FAILED with exit code {}\", output.status.code().unwrap_or(0)).unwrap();\n+                    writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n                     writeln!(stderr.lock(), \"stdout: \\n {}\", std::str::from_utf8(&output.stdout).unwrap()).unwrap();\n                     writeln!(stderr.lock(), \"stderr: \\n {}\", std::str::from_utf8(&output.stderr).unwrap()).unwrap();\n                     panic!(\"some tests failed\");"}]}