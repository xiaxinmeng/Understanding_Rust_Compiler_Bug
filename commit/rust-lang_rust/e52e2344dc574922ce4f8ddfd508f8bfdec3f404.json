{"sha": "e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "node_id": "C_kwDOAAsO6NoAKGU1MmUyMzQ0ZGM1NzQ5MjJjZTRmOGRkZmQ1MDhmOGJmZGVjM2Y0MDQ", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-15T04:01:44Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-21T15:43:22Z"}, "message": "FIX - adopt new Diagnostic naming in newly migrated modules\n\nFIX - ambiguous Diagnostic link in docs\n\nUPDATE - rename diagnostic_items to IntoDiagnostic and AddToDiagnostic\n\n[Gardening] FIX - formatting via `x fmt`\n\nFIX - rebase conflicts. NOTE: Confirm wheather or not we want to handle TargetDataLayoutErrorsWrapper this way\n\nDELETE - unneeded allow attributes in Handler method\n\nFIX - broken test\n\nFIX - Rebase conflict\n\nUPDATE - rename residual _SessionDiagnostic and fix LintDiag link", "tree": {"sha": "eeb9ec3b3c8ff3aa0bc879378a1519a861e2c855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb9ec3b3c8ff3aa0bc879378a1519a861e2c855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "html_url": "https://github.com/rust-lang/rust/commit/e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f91719f75a1012f4b59391fd89a20bb989b2801", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f91719f75a1012f4b59391fd89a20bb989b2801", "html_url": "https://github.com/rust-lang/rust/commit/5f91719f75a1012f4b59391fd89a20bb989b2801"}], "stats": {"total": 215, "additions": 88, "deletions": 127}, "files": [{"sha": "1ad5fa21d8530515976b9a4c60131fd19c28d125", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -335,7 +335,7 @@ pub struct InclusiveRangeWithNoEnd {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering::trait_fn_async, code = \"E0706\")]\n #[note]\n #[note(ast_lowering::note2)]"}, {"sha": "d3e9a16a9a809bc79f79d1aea659f05ff0e982e6", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -2,8 +2,7 @@ use std::num::IntErrorKind;\n \n use rustc_ast as ast;\n use rustc_errors::{\n-    error_code, fluent, Applicability, DiagnosticBuilder, IntoDiagnostic, ErrorGuaranteed,\n-    Handler,\n+    error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n };\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};"}, {"sha": "a52e95e92d55c81b749f26ac6f18ab3518a81844", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -178,7 +178,7 @@ impl IntoDiagnosticArg for hir::ConstContext {\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n #[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"Subdiagnostic\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"AddToDiagnostic\")]\n pub trait AddToDiagnostic {\n     /// Add a subdiagnostic to an existing diagnostic.\n     fn add_to_diagnostic(self, diag: &mut Diagnostic);"}, {"sha": "b4ba65ca96d3b7486a561fc8e3611c99dab1b100", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -16,7 +16,7 @@ use std::thread::panicking;\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Diagnostic)]` -- see [rustc_macros::Diagnostic].\n #[cfg_attr(bootstrap, rustc_diagnostic_item = \"SessionDiagnostic\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"Diagnostic\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"IntoDiagnostic\")]\n pub trait IntoDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `Handler`.\n     #[must_use]"}, {"sha": "68971cebc3527aec2c3572ab3103931fd66d7c21", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -437,11 +437,11 @@ struct HandlerInner {\n     /// have been converted.\n     check_unstable_expect_diagnostics: bool,\n \n-    /// Expected [`Diagnostic`]s store a [`LintExpectationId`] as part of\n+    /// Expected [`Diagnostic`][diagnostic::Diagnostic]s store a [`LintExpectationId`] as part of\n     /// the lint level. [`LintExpectationId`]s created early during the compilation\n     /// (before `HirId`s have been defined) are not stable and can therefore not be\n     /// stored on disk. This buffer stores these diagnostics until the ID has been\n-    /// replaced by a stable [`LintExpectationId`]. The [`Diagnostic`]s are the\n+    /// replaced by a stable [`LintExpectationId`]. The [`Diagnostic`][diagnostic::Diagnostic]s are the\n     /// submitted for storage and added to the list of fulfilled expectations.\n     unstable_expect_diagnostics: Vec<Diagnostic>,\n \n@@ -647,8 +647,6 @@ impl Handler {\n \n     /// Construct a builder with the `msg` at the level appropriate for the specific `EmissionGuarantee`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -662,8 +660,6 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -680,8 +676,6 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_warn_with_expectation(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -695,8 +689,6 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -710,8 +702,6 @@ impl Handler {\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -729,8 +719,6 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning(None), msg)\n     }\n@@ -741,8 +729,6 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -753,16 +739,12 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -773,8 +755,6 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -787,8 +767,6 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -803,8 +781,6 @@ impl Handler {\n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -814,16 +790,12 @@ impl Handler {\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors.\n     #[doc(hidden)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err_lint(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Error { lint: true }, msg)\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -836,8 +808,6 @@ impl Handler {\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -850,8 +820,6 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -864,8 +832,6 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -879,24 +845,18 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_help(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n     /// Construct a builder at the `Note` level with the `msg`.\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,"}, {"sha": "cd8a525e062c5430f6c27f38ebe2e674defd12c2", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -11,7 +11,7 @@ use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{\n-    Applicability, DiagnosticBuilder, IntoDiagnostic, ErrorGuaranteed, MultiSpan, PResult,\n+    Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan, PResult,\n };\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics};"}, {"sha": "85b877652c6aad9fe4e4a91437a6ed463f7d9aae", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,10 +1,10 @@\n use hir::GenericParamKind;\n use rustc_errors::{\n-    fluent, AddSubdiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n+    fluent, AddToDiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::{FnRetTy, Ty};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::{Region, TyCtxt};\n use rustc_span::symbol::kw;\n use rustc_span::{symbol::Ident, BytePos, Span};\n@@ -16,7 +16,7 @@ use crate::infer::error_reporting::{\n \n pub mod note_and_explain;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::opaque_hidden_type)]\n pub struct OpaqueHiddenTypeDiag {\n     #[primary_span]\n@@ -28,7 +28,7 @@ pub struct OpaqueHiddenTypeDiag {\n     pub hidden_type: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::type_annotations_needed, code = \"E0282\")]\n pub struct AnnotationRequired<'a> {\n     #[primary_span]\n@@ -46,7 +46,7 @@ pub struct AnnotationRequired<'a> {\n }\n \n // Copy of `AnnotationRequired` for E0283\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::type_annotations_needed, code = \"E0283\")]\n pub struct AmbigousImpl<'a> {\n     #[primary_span]\n@@ -64,7 +64,7 @@ pub struct AmbigousImpl<'a> {\n }\n \n // Copy of `AnnotationRequired` for E0284\n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::type_annotations_needed, code = \"E0284\")]\n pub struct AmbigousReturn<'a> {\n     #[primary_span]\n@@ -81,7 +81,7 @@ pub struct AmbigousReturn<'a> {\n     pub multi_suggestions: Vec<SourceKindMultiSuggestion<'a>>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::need_type_info_in_generator, code = \"E0698\")]\n pub struct NeedTypeInfoInGenerator<'a> {\n     #[primary_span]\n@@ -92,7 +92,7 @@ pub struct NeedTypeInfoInGenerator<'a> {\n }\n \n // Used when a better one isn't available\n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(infer::label_bad)]\n pub struct InferenceBadError<'a> {\n     #[primary_span]\n@@ -106,7 +106,7 @@ pub struct InferenceBadError<'a> {\n     pub name: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum SourceKindSubdiag<'a> {\n     #[suggestion_verbose(\n         infer::source_kind_subdiag_let,\n@@ -147,7 +147,7 @@ pub enum SourceKindSubdiag<'a> {\n     },\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum SourceKindMultiSuggestion<'a> {\n     #[multipart_suggestion_verbose(\n         infer::source_kind_fully_qualified,\n@@ -228,7 +228,7 @@ pub enum RegionOriginNote<'a> {\n     },\n }\n \n-impl AddSubdiagnostic for RegionOriginNote<'_> {\n+impl AddToDiagnostic for RegionOriginNote<'_> {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         let mut label_or_note = |span, msg: DiagnosticMessage| {\n             let sub_count = diag.children.iter().filter(|d| d.span.is_dummy()).count();\n@@ -289,7 +289,7 @@ pub enum LifetimeMismatchLabels {\n     },\n }\n \n-impl AddSubdiagnostic for LifetimeMismatchLabels {\n+impl AddToDiagnostic for LifetimeMismatchLabels {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self {\n             LifetimeMismatchLabels::InRet { param_span, ret_span, span, label_var1 } => {\n@@ -339,7 +339,7 @@ pub struct AddLifetimeParamsSuggestion<'a> {\n     pub add_note: bool,\n }\n \n-impl AddSubdiagnostic for AddLifetimeParamsSuggestion<'_> {\n+impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         let mut mk_suggestion = || {\n             let (\n@@ -422,7 +422,7 @@ impl AddSubdiagnostic for AddLifetimeParamsSuggestion<'_> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::lifetime_mismatch, code = \"E0623\")]\n pub struct LifetimeMismatch<'a> {\n     #[primary_span]\n@@ -438,7 +438,7 @@ pub struct IntroducesStaticBecauseUnmetLifetimeReq {\n     pub binding_span: Span,\n }\n \n-impl AddSubdiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n+impl AddToDiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n     fn add_to_diagnostic(mut self, diag: &mut rustc_errors::Diagnostic) {\n         self.unmet_requirements\n             .push_span_label(self.binding_span, fluent::infer::msl_introduces_static);\n@@ -450,7 +450,7 @@ pub struct ImplNote {\n     pub impl_span: Option<Span>,\n }\n \n-impl AddSubdiagnostic for ImplNote {\n+impl AddToDiagnostic for ImplNote {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self.impl_span {\n             Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n@@ -465,7 +465,7 @@ pub enum TraitSubdiag {\n }\n \n // FIXME(#100717) used in `Vec<TraitSubdiag>` so requires eager translation/list support\n-impl AddSubdiagnostic for TraitSubdiag {\n+impl AddToDiagnostic for TraitSubdiag {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         match self {\n             TraitSubdiag::Note { span } => {\n@@ -483,7 +483,7 @@ impl AddSubdiagnostic for TraitSubdiag {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(infer::mismatched_static_lifetime)]\n pub struct MismatchedStaticLifetime<'a> {\n     #[primary_span]"}, {"sha": "7f54918f73614e2cd94d478d6fa9c1b13c1858e5", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::error_reporting::nice_region_error::find_anon_type;\n-use rustc_errors::{self, fluent, AddSubdiagnostic, IntoDiagnosticArg};\n+use rustc_errors::{self, fluent, AddToDiagnostic, IntoDiagnosticArg};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{symbol::kw, Span};\n \n@@ -158,7 +158,7 @@ impl RegionExplanation<'_> {\n     }\n }\n \n-impl AddSubdiagnostic for RegionExplanation<'_> {\n+impl AddToDiagnostic for RegionExplanation<'_> {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         if let Some(span) = self.desc.span {\n             diag.span_note(span, fluent::infer::region_explanation);"}, {"sha": "da0271a345e40ed6f1ef80c14e16b3696d0d6e63", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -11,7 +11,7 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::SubregionOrigin;\n use crate::infer::TyCtxt;\n \n-use rustc_errors::AddSubdiagnostic;\n+use rustc_errors::AddToDiagnostic;\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir::Ty;\n use rustc_middle::ty::Region;"}, {"sha": "880f3fbd00e60791bda61a70989304eeca0d2962", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{fluent, AddToDiagnostic, IntoDiagnostic, ErrorGuaranteed, Handler};\n+use rustc_errors::{fluent, AddToDiagnostic, ErrorGuaranteed, Handler, IntoDiagnostic};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::lint::Level;\n use rustc_span::{Span, Symbol};"}, {"sha": "d8a03024d132334d424361582457a34816612e6c", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -404,7 +404,7 @@ impl LateLintPass<'_> for Diagnostics {\n                 let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n                 let Some(def_id) = of_trait.trait_def_id() &&\n                 let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n-                matches!(name, sym::Diagnostic | sym::Subdiagnostic | sym::DecorateLint)\n+                matches!(name, sym::IntoDiagnostic | sym::AddToDiagnostic | sym::DecorateLint)\n             {\n                 found_impl = true;\n                 break;"}, {"sha": "3b8d9594eb91abad6892b860b5c58d84910eca9e", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -9,13 +9,13 @@ use syn::spanned::Spanned;\n use synstructure::Structure;\n \n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n-pub(crate) struct SessionDiagnosticDerive<'a> {\n+pub(crate) struct DiagnosticDerive<'a> {\n     structure: Structure<'a>,\n     handler: syn::Ident,\n     builder: DiagnosticDeriveBuilder,\n }\n \n-impl<'a> SessionDiagnosticDerive<'a> {\n+impl<'a> DiagnosticDerive<'a> {\n     pub(crate) fn new(diag: syn::Ident, handler: syn::Ident, structure: Structure<'a>) -> Self {\n         Self {\n             builder: DiagnosticDeriveBuilder {\n@@ -31,7 +31,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n     }\n \n     pub(crate) fn into_tokens(self) -> TokenStream {\n-        let SessionDiagnosticDerive { mut structure, handler, mut builder } = self;\n+        let DiagnosticDerive { mut structure, handler, mut builder } = self;\n \n         let ast = structure.ast();\n         let implementation = {"}, {"sha": "4166816b5e3c7feb80402134bd8dca76f1bac62d", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -5,7 +5,7 @@ mod fluent;\n mod subdiagnostic;\n mod utils;\n \n-use diagnostic::{LintDiagnosticDerive, SessionDiagnosticDerive};\n+use diagnostic::{DiagnosticDerive, LintDiagnosticDerive};\n pub(crate) use fluent::fluent_messages;\n use proc_macro2::TokenStream;\n use quote::format_ident;\n@@ -59,7 +59,7 @@ use synstructure::Structure;\n /// See rustc dev guide for more examples on using the `#[derive(Diagnostic)]`:\n /// <https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html>\n pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n-    SessionDiagnosticDerive::new(format_ident!(\"diag\"), format_ident!(\"handler\"), s).into_tokens()\n+    DiagnosticDerive::new(format_ident!(\"diag\"), format_ident!(\"handler\"), s).into_tokens()\n }\n \n /// Implements `#[derive(LintDiagnostic)]`, which allows for lints to be specified as a struct,\n@@ -103,7 +103,7 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```\n ///\n /// See rustc dev guide for more examples on using the `#[derive(LintDiagnostic)]`:\n-/// <https://rustc-dev-guide.rust-lang.org/diagnostics/sessiondiagnostic.html>\n+/// <https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html#reference>\n pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n     LintDiagnosticDerive::new(format_ident!(\"diag\"), s).into_tokens()\n }"}, {"sha": "1cd550644bf4de5dc62b601d81132d1bc5bed061", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -3,7 +3,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use rustc_errors::{error_code, IntoDiagnostic, ErrorGuaranteed};\n+use rustc_errors::{error_code, ErrorGuaranteed, IntoDiagnostic};\n use rustc_macros::Diagnostic;\n use rustc_session::config;\n use rustc_span::{sym, Span, Symbol};"}, {"sha": "2b5b4017a5a1172eb49c532e2f1fe318656d5a53", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -53,6 +53,7 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::cstore::CrateStoreDyn;\n+use rustc_session::errors::TargetDataLayoutErrorsWrapper;\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1245,7 +1246,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.emit_fatal(err);\n+            s.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "cf6e18c013be8843dfc263dc6ddcbd3d2e413d52", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,7 +1,7 @@\n use std::path::PathBuf;\n \n-use rustc_errors::IntoDiagnostic;\n use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::IntoDiagnostic;\n use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_span::Span;\n "}, {"sha": "dcea11eadcbf1762368ee47f151d203b8c95f38b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -434,7 +434,7 @@ pub(crate) struct NotAsNegationOperator {\n     pub sub: NotAsNegationOperatorSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum NotAsNegationOperatorSub {\n     #[suggestion_short(\n         parser::unexpected_token_after_not_default,\n@@ -737,7 +737,7 @@ pub(crate) struct RemoveLet {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(parser::use_eq_instead)]\n pub(crate) struct UseEqInstead {\n     #[primary_span]"}, {"sha": "be67c9e3b82d9a6ee594d97329fd37a2ca126dc2", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -650,7 +650,7 @@ pub struct RustcLintOptDenyFieldAccess {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(passes::collapse_debuginfo)]\n pub struct CollapseDebuginfo {\n     #[primary_span]"}, {"sha": "8602a4cf5aef2ec236126215a5025c44fa6ffeb5", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,7 +1,7 @@\n use rustc_errors::AddToDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n-use rustc_macros::{Diagnostic, Subdiagnostic};\n \n pub struct CycleStack {\n     pub span: Span,"}, {"sha": "64aba4703ca3a92e6a0cfa9315e5f93788e43c98", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -4,7 +4,7 @@ use crate::query::{QueryContext, QueryStackFrame};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n-    Diagnostic, DiagnosticBuilder, IntoDiagnostic, ErrorGuaranteed, Handler, Level,\n+    Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, Level,\n };\n use rustc_hir::def::DefKind;\n use rustc_session::Session;"}, {"sha": "57c9a3f4822dcbc050fc9bed09f880f6f5d0a362", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -3,6 +3,7 @@\n \n pub use crate::options::*;\n \n+use crate::errors::TargetDataLayoutErrorsWrapper;\n use crate::search_paths::SearchPath;\n use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n@@ -898,7 +899,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.emit_fatal(err);\n+        sess.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "e01dafe2102b87e7b30d43ca52749460554c863b", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,9 +1,10 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n-use crate::{self as rustc_session, SessionDiagnostic};\n-use rustc_errors::{fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, MultiSpan};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_errors::{\n+    fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, MultiSpan,\n+};\n+use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n@@ -46,10 +47,12 @@ pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n+pub struct TargetDataLayoutErrorsWrapper<'a>(pub TargetDataLayoutErrors<'a>);\n+\n+impl IntoDiagnostic<'_, !> for TargetDataLayoutErrorsWrapper<'_> {\n     fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;\n-        match self {\n+        match self.0 {\n             TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n                 diag = handler.struct_fatal(fluent::session::target_invalid_address_space);\n                 diag.set_arg(\"addr_space\", addr_space);\n@@ -97,87 +100,87 @@ impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::not_circumvent_feature)]\n pub struct NotCircumventFeature;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::linker_plugin_lto_windows_not_supported)]\n pub struct LinkerPluginToWindowsNotSupported;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::profile_use_file_does_not_exist)]\n pub struct ProfileUseFileDoesNotExist<'a> {\n     pub path: &'a std::path::Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::profile_sample_use_file_does_not_exist)]\n pub struct ProfileSampleUseFileDoesNotExist<'a> {\n     pub path: &'a std::path::Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::target_requires_unwind_tables)]\n pub struct TargetRequiresUnwindTables;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::sanitizer_not_supported)]\n pub struct SanitizerNotSupported {\n     pub us: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::sanitizers_not_supported)]\n pub struct SanitizersNotSupported {\n     pub us: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::cannot_mix_and_match_sanitizers)]\n pub struct CannotMixAndMatchSanitizers {\n     pub first: String,\n     pub second: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::cannot_enable_crt_static_linux)]\n pub struct CannotEnableCrtStaticLinux;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::sanitizer_cfi_enabled)]\n pub struct SanitizerCfiEnabled;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::unstable_virtual_function_elimination)]\n pub struct UnstableVirtualFunctionElimination;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::unsupported_dwarf_version)]\n pub struct UnsupportedDwarfVersion {\n     pub dwarf_version: u32,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::target_stack_protector_not_supported)]\n pub struct StackProtectorNotSupportedForTarget<'a> {\n     pub stack_protector: StackProtector,\n     pub target_triple: &'a TargetTriple,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::split_debuginfo_unstable_platform)]\n pub struct SplitDebugInfoUnstablePlatform {\n     pub debuginfo: SplitDebuginfo,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::file_is_not_writeable)]\n pub struct FileIsNotWriteable<'a> {\n     pub file: &'a std::path::Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::crate_name_does_not_match)]\n pub struct CrateNameDoesNotMatch<'a> {\n     #[primary_span]\n@@ -186,13 +189,13 @@ pub struct CrateNameDoesNotMatch<'a> {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::crate_name_invalid)]\n pub struct CrateNameInvalid<'a> {\n     pub s: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(session::crate_name_empty)]\n pub struct CrateNameEmpty {\n     #[primary_span]\n@@ -205,11 +208,8 @@ pub struct InvalidCharacterInCrateName<'a> {\n     pub crate_name: &'a str,\n }\n \n-impl crate::SessionDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n-    fn into_diagnostic(\n-        self,\n-        sess: &Handler,\n-    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+impl IntoDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n+    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n         if let Some(sp) = self.span {\n             diag.set_span(sp);"}, {"sha": "b9202af2a6765c432e3cf5728d2888bbc5922540", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -11,8 +11,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, IntoDiagnostic,\n-    DiagnosticId, DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n+    fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;"}, {"sha": "0142e98176633495abcdaad3f41ae4d45b4e806f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -27,8 +27,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    error_code, fallback_fluent_bundle, DiagnosticBuilder, IntoDiagnostic, DiagnosticId,\n-    DiagnosticMessage, ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan,\n+    error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n+    ErrorGuaranteed, FluentBundle, IntoDiagnostic, LazyFallbackBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;"}, {"sha": "7785d29c15f2cd1ab37bb57ebf417b1ca2b60479", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -125,6 +125,7 @@ symbols! {\n     Symbols {\n         AcqRel,\n         Acquire,\n+        AddToDiagnostic,\n         Alignment,\n         Any,\n         Arc,\n@@ -176,7 +177,6 @@ symbols! {\n         DecorateLint,\n         Default,\n         Deref,\n-        Diagnostic,\n         DiagnosticMessage,\n         DirBuilder,\n         Display,\n@@ -210,6 +210,7 @@ symbols! {\n         Implied,\n         Input,\n         Into,\n+        IntoDiagnostic,\n         IntoFuture,\n         IntoIterator,\n         IoRead,\n@@ -282,7 +283,6 @@ symbols! {\n         String,\n         StructuralEq,\n         StructuralPartialEq,\n-        Subdiagnostic,\n         SubdiagnosticMessage,\n         Sync,\n         T,"}, {"sha": "5e1b80eae393a9c86bd7fdf7c1f1e369fd5a42dd", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{fluent, IntoDiagnostic, ErrorGuaranteed, Handler};\n+use rustc_errors::{fluent, ErrorGuaranteed, Handler, IntoDiagnostic};\n use rustc_macros::Diagnostic;\n use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n use rustc_session::Limit;"}, {"sha": "18e39108ecab14d20598239345be41bad1cb0976", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -20,7 +20,7 @@ use rustc_span::Span;\n \n #[derive(Diagnostic)]\n #[diag(parser::expect_path)]\n-struct DeriveSessionDiagnostic {\n+struct DeriveDiagnostic {\n     #[primary_span]\n     span: Span,\n }\n@@ -32,18 +32,18 @@ struct Note {\n     span: Span,\n }\n \n-pub struct UntranslatableInSessionDiagnostic;\n+pub struct UntranslatableInIntoDiagnostic;\n \n-impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n+impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for UntranslatableInIntoDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         handler.struct_err(\"untranslatable diagnostic\")\n         //~^ ERROR diagnostics should be created using translatable messages\n     }\n }\n \n-pub struct TranslatableInSessionDiagnostic;\n+pub struct TranslatableInIntoDiagnostic;\n \n-impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n+impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInIntoDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         handler.struct_err(fluent::parser::expect_path)\n     }"}, {"sha": "c3972beb51282ca897c79e2f162ba0ad84061c1d", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e52e2344dc574922ce4f8ddfd508f8bfdec3f404/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=e52e2344dc574922ce4f8ddfd508f8bfdec3f404", "patch": "@@ -449,7 +449,7 @@ error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n   --> $DIR/diagnostic-derive.rs:331:10\n    |\n LL | #[derive(Diagnostic)]\n-   |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n+   |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`"}]}