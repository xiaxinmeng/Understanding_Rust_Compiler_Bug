{"sha": "e9e57725aa9ff093af5825503bcd0f28aca341a1", "node_id": "C_kwDOAAsO6NoAKGU5ZTU3NzI1YWE5ZmYwOTNhZjU4MjU1MDNiY2QwZjI4YWNhMzQxYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T08:37:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T08:37:33Z"}, "message": "Auto merge of #14505 - Veykril:block-trait-impls, r=Veykril\n\nfix: Fix block local impl trait solving regressions\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/14443", "tree": {"sha": "11f90c077f97d58ca976e4fd2cd80013b140f16d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f90c077f97d58ca976e4fd2cd80013b140f16d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e57725aa9ff093af5825503bcd0f28aca341a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e57725aa9ff093af5825503bcd0f28aca341a1", "html_url": "https://github.com/rust-lang/rust/commit/e9e57725aa9ff093af5825503bcd0f28aca341a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e57725aa9ff093af5825503bcd0f28aca341a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e324d8305cbc8993ede1a083a0c47a39f711e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e324d8305cbc8993ede1a083a0c47a39f711e9", "html_url": "https://github.com/rust-lang/rust/commit/e3e324d8305cbc8993ede1a083a0c47a39f711e9"}, {"sha": "1c16e4ee978f5581b33b1abf33b9eeac830641d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c16e4ee978f5581b33b1abf33b9eeac830641d2", "html_url": "https://github.com/rust-lang/rust/commit/1c16e4ee978f5581b33b1abf33b9eeac830641d2"}], "stats": {"total": 111, "additions": 100, "deletions": 11}, "files": [{"sha": "94123ed23eae777250a467ad54bfdcaf508569cb", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=e9e57725aa9ff093af5825503bcd0f28aca341a1", "patch": "@@ -18,9 +18,10 @@ use hir_expand::name::name;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n-    from_assoc_type_id, from_chalk_trait_id, make_binders, make_single_type_binders,\n+    from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id, make_binders,\n+    make_single_type_binders,\n     mapping::{from_chalk, ToChalk, TypeAliasAsValue},\n-    method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n+    method_resolution::{TraitImpls, TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n     traits::ChalkContext,\n     utils::generics,\n@@ -106,6 +107,19 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n             _ => self_ty_fp.as_ref().map(std::slice::from_ref).unwrap_or(&[]),\n         };\n \n+        let trait_module = trait_.module(self.db.upcast());\n+        let type_module = match self_ty_fp {\n+            Some(TyFingerprint::Adt(adt_id)) => Some(adt_id.module(self.db.upcast())),\n+            Some(TyFingerprint::ForeignType(type_id)) => {\n+                Some(from_foreign_def_id(type_id).module(self.db.upcast()))\n+            }\n+            Some(TyFingerprint::Dyn(trait_id)) => Some(trait_id.module(self.db.upcast())),\n+            _ => None,\n+        };\n+\n+        let mut def_blocks =\n+            [trait_module.containing_block(), type_module.and_then(|it| it.containing_block())];\n+\n         // Note: Since we're using impls_for_trait, only impls where the trait\n         // can be resolved should ever reach Chalk. impl_datum relies on that\n         // and will panic if the trait can't be resolved.\n@@ -120,25 +134,42 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 .and_then(|map| map.parent())\n                 .and_then(|module| module.containing_block())\n         })\n+        .inspect(|&block_id| {\n+            // make sure we don't search the same block twice\n+            def_blocks.iter_mut().for_each(|block| {\n+                if *block == Some(block_id) {\n+                    *block = None;\n+                }\n+            });\n+        })\n         .filter_map(|block_id| self.db.trait_impls_in_block(block_id));\n \n         let id_to_chalk = |id: hir_def::ImplId| id.to_chalk(self.db);\n         let mut result = vec![];\n         match fps {\n             [] => {\n                 debug!(\"Unrestricted search for {:?} impls...\", trait_);\n-                impl_maps.into_iter().chain(block_impls).for_each(|impls| {\n+                let mut f = |impls: Arc<TraitImpls>| {\n                     result.extend(impls.for_trait(trait_).map(id_to_chalk));\n-                });\n+                };\n+                impl_maps.into_iter().chain(block_impls).for_each(&mut f);\n+                def_blocks\n+                    .into_iter()\n+                    .filter_map(|it| self.db.trait_impls_in_block(it?))\n+                    .for_each(f);\n             }\n             fps => {\n-                impl_maps.into_iter().chain(block_impls).for_each(|impls| {\n-                    result.extend(\n-                        fps.iter().flat_map(|fp| {\n+                let mut f =\n+                    |impls: Arc<TraitImpls>| {\n+                        result.extend(fps.iter().flat_map(|fp| {\n                             impls.for_trait_and_self_ty(trait_, *fp).map(id_to_chalk)\n-                        }),\n-                    );\n-                });\n+                        }));\n+                    };\n+                impl_maps.into_iter().chain(block_impls).for_each(&mut f);\n+                def_blocks\n+                    .into_iter()\n+                    .filter_map(|it| self.db.trait_impls_in_block(it?))\n+                    .for_each(f);\n             }\n         }\n "}, {"sha": "c165a7cb161e25842be441e037fc896344ae8d6a", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=e9e57725aa9ff093af5825503bcd0f28aca341a1", "patch": "@@ -902,3 +902,32 @@ fn test() {\n }\",\n     );\n }\n+\n+#[test]\n+fn regression_14443_dyn_coercion_block_impls() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: coerce_unsized\n+trait T {}\n+\n+fn dyn_t(d: &dyn T) {}\n+\n+fn main() {\n+    struct A;\n+    impl T for A {}\n+\n+    let a = A;\n+\n+    let b = {\n+        struct B;\n+        impl T for B {}\n+\n+        B\n+    };\n+\n+    dyn_t(&a);\n+    dyn_t(&b);\n+}\n+\"#,\n+    )\n+}"}, {"sha": "161e8385ec7be8ae0849287374ee4240bda387d1", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=e9e57725aa9ff093af5825503bcd0f28aca341a1", "patch": "@@ -3811,6 +3811,35 @@ fn f() {\n     );\n }\n \n+#[test]\n+fn regression_14443_trait_solve() {\n+    check_no_mismatches(\n+        r#\"\n+trait T {\n+    fn f(&self) {}\n+}\n+\n+\n+fn main() {\n+    struct A;\n+    impl T for A {}\n+\n+    let a = A;\n+\n+    let b = {\n+        struct B;\n+        impl T for B {}\n+\n+        B\n+    };\n+\n+    a.f();\n+    b.f();\n+}\n+\"#,\n+    )\n+}\n+\n #[test]\n fn associated_type_sized_bounds() {\n     check_infer("}, {"sha": "ddf130e08dd60c0f002106b38b465689e562128a", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e57725aa9ff093af5825503bcd0f28aca341a1/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e9e57725aa9ff093af5825503bcd0f28aca341a1", "patch": "@@ -456,7 +456,7 @@ impl GlobalState {\n             let mut proc_macros = Vec::default();\n             for ws in &**self.workspaces {\n                 let (other, mut crate_proc_macros) =\n-                    ws.to_crate_graph(&mut load, &self.config.cargo().extra_env);\n+                    ws.to_crate_graph(&mut load, &self.config.extra_env());\n                 crate_graph.extend(other, &mut crate_proc_macros);\n                 proc_macros.push(crate_proc_macros);\n             }"}]}