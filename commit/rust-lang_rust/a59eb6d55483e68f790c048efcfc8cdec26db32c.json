{"sha": "a59eb6d55483e68f790c048efcfc8cdec26db32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWViNmQ1NTQ4M2U2OGY3OTBjMDQ4ZWZjZmM4Y2RlYzI2ZGIzMmM=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-02T07:29:16Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-08T16:10:00Z"}, "message": "Pretty print function pointer const values.", "tree": {"sha": "3237289c439a632275c4130a258aff70168173a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3237289c439a632275c4130a258aff70168173a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59eb6d55483e68f790c048efcfc8cdec26db32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59eb6d55483e68f790c048efcfc8cdec26db32c", "html_url": "https://github.com/rust-lang/rust/commit/a59eb6d55483e68f790c048efcfc8cdec26db32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59eb6d55483e68f790c048efcfc8cdec26db32c/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "html_url": "https://github.com/rust-lang/rust/commit/2afd277bc3ad53ddb6064b7f2a739583e8b4820a"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "6c31d54e081c42b9ee62c787ff815eb7e58f02c8", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a59eb6d55483e68f790c048efcfc8cdec26db32c", "patch": "@@ -470,6 +470,14 @@ impl<'tcx> AllocMap<'tcx> {\n         }\n     }\n \n+    /// Panics if the `AllocId` does not refer to a function\n+    pub fn unwrap_fn(&self, id: AllocId) -> Instance<'tcx> {\n+        match self.get(id) {\n+            Some(GlobalAlloc::Function(instance)) => instance,\n+            _ => bug!(\"expected allocation ID {} to point to a function\", id),\n+        }\n+    }\n+\n     /// Freezes an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n     pub fn set_alloc_id_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {"}, {"sha": "7694d529aa3cb0a9bf6096540a03999eb68d2e26", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=a59eb6d55483e68f790c048efcfc8cdec26db32c", "patch": "@@ -980,6 +980,18 @@ pub trait PrettyPrinter<'tcx>:\n                 return Ok(self);\n             }\n         }\n+\n+        if let ty::FnPtr(_) = ct.ty.kind {\n+            if let ConstValue::Scalar(Scalar::Ptr(ptr)) = ct.val {\n+                let instance = {\n+                    let alloc_map = self.tcx().alloc_map.lock();\n+                    alloc_map.unwrap_fn(ptr.alloc_id)\n+                };\n+                p!(print_value_path(instance.def_id(), instance.substs));\n+                return Ok(self);\n+            }\n+        }\n+\n         p!(write(\"{:?} : \", ct.val), print(ct.ty));\n \n         Ok(self)"}, {"sha": "41f34703622e7f9606828a90947243840a97429d", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=a59eb6d55483e68f790c048efcfc8cdec26db32c", "patch": "@@ -8,7 +8,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar, GlobalAlloc};\n+use crate::mir::interpret::{ConstValue, get_slice_bytes};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -577,16 +577,8 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                 Ok(ConstValue::Scalar(a_val))\n             } else if let ty::FnPtr(_) = a.ty.kind {\n                 let alloc_map = tcx.alloc_map.lock();\n-                let get_fn_instance = |val: Scalar| {\n-                    let ptr = val.to_ptr().unwrap();\n-                    if let Some(GlobalAlloc::Function(instance)) = alloc_map.get(ptr.alloc_id) {\n-                        instance\n-                    } else {\n-                        bug!(\"Allocation for FnPtr isn't a function\");\n-                    }\n-                };\n-                let a_instance = get_fn_instance(a_val);\n-                let b_instance = get_fn_instance(b_val);\n+                let a_instance = alloc_map.unwrap_fn(a_val.to_ptr().unwrap().alloc_id);\n+                let b_instance = alloc_map.unwrap_fn(b_val.to_ptr().unwrap().alloc_id);\n                 if a_instance == b_instance {\n                     Ok(ConstValue::Scalar(a_val))\n                 } else {"}, {"sha": "1fb57897e286deeb2f4d962b0fda485812d67f48", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=a59eb6d55483e68f790c048efcfc8cdec26db32c", "patch": "@@ -17,4 +17,4 @@ impl<const F: fn() -> u32> Wrapper<{F}> {\n \n fn main() {\n     assert_eq!(Wrapper::<{function}>::call(), 17);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "65a1523a3547e5fac65c678e8e187a6324a8f03d", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=a59eb6d55483e68f790c048efcfc8cdec26db32c", "patch": "@@ -23,4 +23,4 @@ fn main() {\n     let _ = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8598cd95b8169dd891b3e32dce51787d692f767c", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a59eb6d55483e68f790c048efcfc8cdec26db32c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=a59eb6d55483e68f790c048efcfc8cdec26db32c", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:16:33\n    |\n LL |     let _: Checked<{not_one}> = Checked::<{not_two}>;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `Scalar(AllocId(1).0x0) : fn(usize) -> bool`, found `Scalar(AllocId(10).0x0) : fn(usize) -> bool`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n    |\n    = note: expected type `Checked<>`\n               found type `Checked<>`\n@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40\n    |\n LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Scalar(AllocId(7).0x0) : fn(usize) -> bool`, found `Scalar(AllocId(20).0x0) : fn(usize) -> bool`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `generic::<u32>`, found `generic::<u16>`\n    |\n    = note: expected type `Checked<>`\n               found type `Checked<>`"}]}