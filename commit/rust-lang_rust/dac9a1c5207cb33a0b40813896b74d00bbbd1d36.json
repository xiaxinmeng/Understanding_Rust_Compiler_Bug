{"sha": "dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzlhMWM1MjA3Y2IzM2EwYjQwODEzODk2Yjc0ZDAwYmJiZDFkMzY=", "commit": {"author": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-07-31T02:36:24Z"}, "committer": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-08-01T04:41:19Z"}, "message": "libuuid: use `Decoder::error()` rather than failing on bad decode", "tree": {"sha": "25ecb89241b9081954eb2ea6e79d058650c25cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ecb89241b9081954eb2ea6e79d058650c25cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "html_url": "https://github.com/rust-lang/rust/commit/dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac9a1c5207cb33a0b40813896b74d00bbbd1d36/comments", "author": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116", "html_url": "https://github.com/rust-lang/rust/commit/5bd8edc1121a5736994d69b2dc9cf3efb6fbc116"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "d922dde6f85372c6e5d92c13305b10555ec51bf4", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dac9a1c5207cb33a0b40813896b74d00bbbd1d36/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac9a1c5207cb33a0b40813896b74d00bbbd1d36/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "patch": "@@ -501,7 +501,10 @@ impl<T: Encoder<E>, E> Encodable<T, E> for Uuid {\n impl<T: Decoder<E>, E> Decodable<T, E> for Uuid {\n     /// Decode a UUID from a string\n     fn decode(d: &mut T) -> Result<Uuid, E> {\n-        Ok(from_str(try!(d.read_str()).as_slice()).unwrap())\n+        match from_str(try!(d.read_str()).as_slice()) {\n+            Some(decode) => Ok(decode),\n+            None => Err(d.error(\"Unable to decode UUID\"))\n+        }\n     }\n }\n \n@@ -802,6 +805,23 @@ mod test {\n         assert_eq!(u, u2);\n     }\n \n+    #[test]\n+    fn test_bad_decode() {\n+        use serialize::json;\n+        use serialize::{Encodable, Decodable};\n+\n+        let js_good = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7a8\".to_string());\n+        let js_bad1 = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7ah\".to_string());\n+        let js_bad2 = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7a\".to_string());\n+\n+        let u_good: Result<Uuid, _> = Decodable::decode(&mut json::Decoder::new(js_good));\n+        let u_bad1: Result<Uuid, _> = Decodable::decode(&mut json::Decoder::new(js_bad1));\n+        let u_bad2: Result<Uuid, _> = Decodable::decode(&mut json::Decoder::new(js_bad2));\n+        assert!(u_good.is_ok());\n+        assert!(u_bad1.is_err());\n+        assert!(u_bad2.is_err());\n+    }\n+\n     #[test]\n     fn test_iterbytes_impl_for_uuid() {\n         use std::collections::HashSet;"}]}