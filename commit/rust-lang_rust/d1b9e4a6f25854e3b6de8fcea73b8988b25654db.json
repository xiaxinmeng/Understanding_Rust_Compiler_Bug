{"sha": "d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "node_id": "C_kwDOAAsO6NoAKGQxYjllNGE2ZjI1ODU0ZTNiNmRlOGZjZWE3M2I4OTg4YjI1NjU0ZGI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-02-08T05:03:06Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-02-08T05:51:05Z"}, "message": "Pretty print ItemKind::Use in rustfmt style", "tree": {"sha": "5a5059ade5715c15c664e525aa33c96d69e6da90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5059ade5715c15c664e525aa33c96d69e6da90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmICBMkACgkQ+boUO5X/\nbYKe8w//VTbjWOLIG+HkJkGZiUGcKikg32DQUrtNfaOwGhYQenx7p4aWqA0cvPz3\nHnyc4BCgXxJZ3TaJJTGqMYUFVUFILqfPcoBqIckIEK+bMEfTAWxrg6jbYBiVOkdu\nvsGlX0bwAZnCgNaoWtdJzivgVNpsDqxDDnDnx5tJm+ghzZuuLEozrsRAHMItrvKI\n7l4HJyIMKBX9jHpiojqVaBndpe1aUyWNcUI7sJaczTXy/7mICbr6iAZjUhoMhxQe\nGaABjrg3dgvT5SmpCtlVVW5DGjmePz/D0abt6MYDG+eiyos76jIobxgF+5MfojWd\nkW9miG2vddpNx8mApP1DgmzY0wXU4YPTh5n+NnaKqdRl3jZ/NseicQNH1dWNVd0M\nXhkesQppJ9wnX6T0sBSnKucUOTbmEPyoR6cR/dzFBndI/nvGQGIvn8e9OdXiUAPE\n9ntDjPbMZr5P5K1pWbRkkJX2MV+ACNiExKNLxNO5NE1L1KyYG/3PIAsAHUFQ05lp\niE2VixmW5W6LXsSN2V7Xymp5LTwvnvGdm43VHVYERRSq5OMg35kzU7xiwpX/4GVH\nqJrB7vlWfvZH1CfTK0uKiNp/ZqSGudEMiEcsCOYDh3fbotZFSgtE6mVBa2PdiuK1\ncw/0RTjYATDvLkOASCJV5OO3WiKuZilek2X5JOgF/NmVaBtA8ts=\n=zPvl\n-----END PGP SIGNATURE-----", "payload": "tree 5a5059ade5715c15c664e525aa33c96d69e6da90\nparent 8b13fd447a890507c8690929ad6840ea3de444aa\nauthor David Tolnay <dtolnay@gmail.com> 1644296586 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1644299465 -0800\n\nPretty print ItemKind::Use in rustfmt style\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "html_url": "https://github.com/rust-lang/rust/commit/d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b13fd447a890507c8690929ad6840ea3de444aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b13fd447a890507c8690929ad6840ea3de444aa", "html_url": "https://github.com/rust-lang/rust/commit/8b13fd447a890507c8690929ad6840ea3de444aa"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "93310dd45c575783e54e04eaa72c3d85105466f6", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "patch": "@@ -75,6 +75,10 @@ impl Printer {\n     }\n \n     pub fn trailing_comma(&mut self) {\n+        self.scan_break(BreakToken { pre_break: Some(','), ..BreakToken::default() });\n+    }\n+\n+    pub fn trailing_comma_or_space(&mut self) {\n         self.scan_break(BreakToken {\n             blank_space: 1,\n             pre_break: Some(','),"}, {"sha": "6435f1b6141e35a66c82211ab67a2b27883ad402", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "patch": "@@ -142,7 +142,7 @@ impl<'a> State<'a> {\n             if !field.is_last || has_rest {\n                 self.word_space(\",\");\n             } else {\n-                self.trailing_comma();\n+                self.trailing_comma_or_space();\n             }\n         }\n         if has_rest {"}, {"sha": "d7e9ef0e50dd864e92700acdaa9d6a1809f0fa77", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b9e4a6f25854e3b6de8fcea73b8988b25654db/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=d1b9e4a6f25854e3b6de8fcea73b8988b25654db", "patch": "@@ -1,5 +1,6 @@\n use crate::pp::Breaks::Inconsistent;\n-use crate::pprust::state::{AnnNode, PrintState, State};\n+use crate::pprust::state::delimited::IterDelimited;\n+use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n@@ -138,11 +139,10 @@ impl<'a> State<'a> {\n                 self.end(); // end outer head-block\n             }\n             ast::ItemKind::Use(ref tree) => {\n-                self.head(visibility_qualified(&item.vis, \"use\"));\n+                self.print_visibility(&item.vis);\n+                self.word_nbsp(\"use\");\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n-                self.end(); // end inner head-block\n-                self.end(); // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, mutbl, ref body) => {\n                 let def = ast::Defaultness::Final;\n@@ -615,8 +615,8 @@ impl<'a> State<'a> {\n             ast::UseTreeKind::Simple(rename, ..) => {\n                 self.print_path(&tree.prefix, false, 0);\n                 if let Some(rename) = rename {\n-                    self.space();\n-                    self.word_space(\"as\");\n+                    self.nbsp();\n+                    self.word_nbsp(\"as\");\n                     self.print_ident(rename);\n                 }\n             }\n@@ -628,16 +628,36 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n             }\n             ast::UseTreeKind::Nested(ref items) => {\n-                if tree.prefix.segments.is_empty() {\n-                    self.word(\"{\");\n-                } else {\n+                if !tree.prefix.segments.is_empty() {\n                     self.print_path(&tree.prefix, false, 0);\n-                    self.word(\"::{\");\n+                    self.word(\"::\");\n+                }\n+                if items.is_empty() {\n+                    self.word(\"{}\");\n+                } else if items.len() == 1 {\n+                    self.print_use_tree(&items[0].0);\n+                } else {\n+                    self.cbox(INDENT_UNIT);\n+                    self.word(\"{\");\n+                    self.zerobreak();\n+                    self.ibox(0);\n+                    for use_tree in items.iter().delimited() {\n+                        self.print_use_tree(&use_tree.0);\n+                        if !use_tree.is_last {\n+                            self.word(\",\");\n+                            if let ast::UseTreeKind::Nested(_) = use_tree.0.kind {\n+                                self.hardbreak();\n+                            } else {\n+                                self.space();\n+                            }\n+                        }\n+                    }\n+                    self.end();\n+                    self.trailing_comma();\n+                    self.offset(-INDENT_UNIT);\n+                    self.word(\"}\");\n+                    self.end();\n                 }\n-                self.commasep(Inconsistent, &items, |this, &(ref tree, _)| {\n-                    this.print_use_tree(tree)\n-                });\n-                self.word(\"}\");\n             }\n         }\n     }"}]}