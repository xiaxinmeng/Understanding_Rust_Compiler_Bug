{"sha": "82784cb89d590106a30dd2143120472ec269c2f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzg0Y2I4OWQ1OTAxMDZhMzBkZDIxNDMxMjA0NzJlYzI2OWMyZjE=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-03T15:27:03Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-12T05:16:08Z"}, "message": "libcore: deny warnings in doctests", "tree": {"sha": "dcb237c50d9d987ed9b273a0ff39e73abd5fe997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcb237c50d9d987ed9b273a0ff39e73abd5fe997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82784cb89d590106a30dd2143120472ec269c2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82784cb89d590106a30dd2143120472ec269c2f1", "html_url": "https://github.com/rust-lang/rust/commit/82784cb89d590106a30dd2143120472ec269c2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82784cb89d590106a30dd2143120472ec269c2f1/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf964afea55f627eee047988d1cc44c386b23ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf964afea55f627eee047988d1cc44c386b23ba", "html_url": "https://github.com/rust-lang/rust/commit/bbf964afea55f627eee047988d1cc44c386b23ba"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "59b05c21d80050b6902f7cb2d768241683cc8122", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -76,6 +76,7 @@\n //! a trait method that was originally defined to take `&self`.\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! use std::cell::RefCell;\n //!\n //! struct Graph {\n@@ -125,6 +126,7 @@\n //! }\n //!\n //! struct RcBox<T> {\n+//! # #[allow(dead_code)]\n //!     value: T,\n //!     refcount: Cell<usize>\n //! }\n@@ -776,6 +778,7 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n /// use std::cell::UnsafeCell;\n /// use std::marker::Sync;\n ///\n+/// # #[allow(dead_code)]\n /// struct NotThreadSafe<T> {\n ///     value: UnsafeCell<T>,\n /// }"}, {"sha": "5458a7b9c38b01b24ba479a71c29f617e965c924", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -140,8 +140,6 @@ impl Ordering {\n     /// This method can be used to reverse a comparison:\n     ///\n     /// ```\n-    /// use std::cmp::Ordering;\n-    ///\n     /// let mut data: &mut [_] = &mut [2, 10, 5, 8];\n     ///\n     /// // sort the array from largest to smallest.\n@@ -263,8 +261,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::cmp::Ordering;\n-    ///\n     /// let result = 1.0 < 2.0;\n     /// assert_eq!(result, true);\n     ///"}, {"sha": "12c4a5ca200ad3b1c7271cc6baff8878764800b0", "filename": "src/libcore/default.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -15,6 +15,7 @@\n //! that define a set of options:\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! struct SomeOptions {\n //!     foo: i32,\n //!     bar: f32,\n@@ -24,6 +25,7 @@\n //! How can we define some default values? You can use `Default`:\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! #[derive(Default)]\n //! struct SomeOptions {\n //!     foo: i32,\n@@ -40,6 +42,7 @@\n //! If you have your own type, you need to implement `Default` yourself:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! enum Kind {\n //!     A,\n //!     B,\n@@ -66,6 +69,7 @@\n //! If you want to override a particular option, but still retain the other defaults:\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! # #[derive(Default)]\n //! # struct SomeOptions {\n //! #     foo: i32,\n@@ -88,6 +92,7 @@ use marker::Sized;\n /// # Examples\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// #[derive(Default)]\n /// struct SomeOptions {\n ///     foo: i32,\n@@ -114,6 +119,7 @@ pub trait Default: Sized {\n     /// Making your own:\n     ///\n     /// ```\n+    /// # #[allow(dead_code)]\n     /// enum Kind {\n     ///     A,\n     ///     B,"}, {"sha": "0899dc28848195b844aab0e736f7442bbd84324a", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -45,6 +45,7 @@\n //!\n //! struct Person {\n //!     id: u32,\n+//! # #[allow(dead_code)]\n //!     name: String,\n //!     phone: u64,\n //! }"}, {"sha": "a094bcd0192d24664ae01e7b40e7fef6afcc045d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -334,6 +334,7 @@ extern \"rust-intrinsic\" {\n     /// use std::mem;\n     /// use std::ptr;\n     ///\n+    /// # #[allow(dead_code)]\n     /// fn swap<T>(x: &mut T, y: &mut T) {\n     ///     unsafe {\n     ///         // Give ourselves some scratch space to work with\n@@ -372,6 +373,7 @@ extern \"rust-intrinsic\" {\n     /// ```\n     /// use std::ptr;\n     ///\n+    /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n     ///     dst.set_len(elts);"}, {"sha": "8558927e4acae35e9eb2108f3a67eda51f21ce02", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -241,6 +241,7 @@\n //! method calls a closure on each element it iterates over:\n //!\n //! ```\n+//! # #![allow(unused_must_use)]\n //! let v = vec![1, 2, 3, 4, 5];\n //! v.iter().map(|x| println!(\"{}\", x));\n //! ```\n@@ -419,7 +420,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// // an infinite iterator has no upper bound\n-    /// let iter = (0..);\n+    /// let iter = 0..;\n     ///\n     /// assert_eq!((0, None), iter.size_hint());\n     /// ```\n@@ -709,6 +710,7 @@ pub trait Iterator {\n     /// If you're doing some sort of side effect, prefer [`for`] to `map()`:\n     ///\n     /// ```\n+    /// # #![allow(unused_must_use)]\n     /// // don't do this:\n     /// (0..5).map(|x| println!(\"{}\", x));\n     ///\n@@ -2695,7 +2697,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n ///\n /// ```\n /// // a finite range knows exactly how many times it will iterate\n-/// let five = (0..5);\n+/// let five = 0..5;\n ///\n /// assert_eq!(5, five.len());\n /// ```\n@@ -2761,7 +2763,7 @@ pub trait ExactSizeIterator: Iterator {\n     ///\n     /// ```\n     /// // a finite range knows exactly how many times it will iterate\n-    /// let five = (0..5);\n+    /// let five = 0..5;\n     ///\n     /// assert_eq!(5, five.len());\n     /// ```"}, {"sha": "df7b7c437c3cc44ca3e8fd56c008aa43bed5b94b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -60,7 +60,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n-#![doc(test(no_crate_inject))]\n+#![doc(test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n \n #![no_core]\n #![allow(raw_pointer_derive)]"}, {"sha": "ad78ab307a076750f1aa1d08c15a4eae6563a067", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -247,6 +247,7 @@ macro_rules! writeln {\n /// Match arms:\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// fn foo(x: Option<i32>) {\n ///     match x {\n ///         Some(n) if n >= 0 => println!(\"Some(Non-negative)\"),\n@@ -260,6 +261,7 @@ macro_rules! writeln {\n /// Iterators:\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n ///     for i in 0.. {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }"}, {"sha": "6e6ae6185278711079a75a1d4b0a87e81cc3e933", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -42,6 +42,7 @@ impl<T> !Send for *mut T { }\n /// `?Sized` can be used to remove this bound if it is not appropriate.\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// struct Foo<T>(T);\n /// struct Bar<T: ?Sized>(T);\n ///\n@@ -106,6 +107,7 @@ pub trait Unsize<T: ?Sized> {\n /// `struct` can be `Copy`:\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// struct Point {\n ///    x: i32,\n ///    y: i32,\n@@ -115,6 +117,7 @@ pub trait Unsize<T: ?Sized> {\n /// A `struct` can be `Copy`, and `i32` is `Copy`, so therefore, `Point` is eligible to be `Copy`.\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// # struct Point;\n /// struct PointList {\n ///     points: Vec<Point>,\n@@ -303,6 +306,7 @@ macro_rules! impls{\n /// ```\n /// use std::marker::PhantomData;\n ///\n+/// # #[allow(dead_code)]\n /// struct Slice<'a, T:'a> {\n ///     start: *const T,\n ///     end: *const T,\n@@ -323,6 +327,7 @@ macro_rules! impls{\n /// mismatches by enforcing types in the method implementations:\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// # trait ResType { fn foo(&self); }\n /// # struct ParamType;\n /// # mod foreign_lib {\n@@ -393,6 +398,8 @@ mod impls {\n /// #![feature(reflect_marker)]\n /// use std::marker::Reflect;\n /// use std::any::Any;\n+///\n+/// # #[allow(dead_code)]\n /// fn foo<T:Reflect+'static>(x: &T) {\n ///     let any: &Any = x;\n ///     if any.is::<u32>() { println!(\"u32\"); }"}, {"sha": "2f01ea383400a1d83ff6b4beabf4cfaa34dad754", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -92,6 +92,7 @@ pub use intrinsics::transmute;\n /// use std::mem;\n /// use std::ptr;\n ///\n+/// # #[allow(dead_code)]\n /// fn swap<T>(x: &mut T, y: &mut T) {\n ///     unsafe {\n ///         // Give ourselves some scratch space to work with\n@@ -151,6 +152,7 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// # Examples\n ///\n /// ```\n+/// # #![allow(deprecated)]\n /// use std::mem;\n ///\n /// assert_eq!(4, mem::min_align_of::<i32>());\n@@ -167,6 +169,7 @@ pub fn min_align_of<T>() -> usize {\n /// # Examples\n ///\n /// ```\n+/// # #![allow(deprecated)]\n /// use std::mem;\n ///\n /// assert_eq!(4, mem::min_align_of_val(&5i32));\n@@ -414,6 +417,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// `self`, allowing it to be returned:\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// use std::mem;\n /// # struct Buffer<T> { buf: Vec<T> }\n /// impl<T> Buffer<T> {"}, {"sha": "7ad49eef8f711aa09ec78545863556c6f974dcf9", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -947,6 +947,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo += Foo;\n@@ -996,6 +997,7 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo -= Foo;\n@@ -1045,6 +1047,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo *= Foo;\n@@ -1094,6 +1097,7 @@ mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo /= Foo;\n@@ -1143,6 +1147,7 @@ div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo %= Foo;\n@@ -1192,6 +1197,7 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo &= Foo;\n@@ -1241,6 +1247,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo |= Foo;\n@@ -1290,6 +1297,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo ^= Foo;\n@@ -1339,6 +1347,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo <<= Foo;\n@@ -1407,6 +1416,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo >>= Foo;"}, {"sha": "7a3b83f68d0d881535784fc02f5734b208ed441a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -275,6 +275,7 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// #![feature(as_slice)]\n+    /// # #![allow(deprecated)]\n     ///\n     /// let mut x = Some(\"Diamonds\");\n     /// {"}, {"sha": "d547a17e8b778383ec1e9a09adfcffc1092dbb96", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -16,6 +16,7 @@\n //! and containing an error value.\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! enum Result<T, E> {\n //!    Ok(T),\n //!    Err(E)\n@@ -104,6 +105,7 @@\n //! something like this:\n //!\n //! ```no_run\n+//! # #![allow(unused_must_use)] // \\o/\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //!\n@@ -143,6 +145,7 @@\n //! # use std::fs::File;\n //! # use std::io::prelude::*;\n //! # use std::io;\n+//! # #[allow(dead_code)]\n //! fn write_message() -> io::Result<()> {\n //!     let mut file = try!(File::create(\"valuable_data.txt\"));\n //!     try!(file.write_all(b\"important message\"));\n@@ -160,6 +163,7 @@\n //! It replaces this:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //! use std::io;\n@@ -189,6 +193,7 @@\n //! With this:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //! use std::io;\n@@ -422,6 +427,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// ```\n     /// #![feature(as_slice)]\n+    /// # #![allow(deprecated)]\n     ///\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {"}, {"sha": "7954bc3a0bf53e50046a4ad63f68eee94a757585", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82784cb89d590106a30dd2143120472ec269c2f1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=82784cb89d590106a30dd2143120472ec269c2f1", "patch": "@@ -142,8 +142,6 @@ impl Utf8Error {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(utf8_error)]\n-    ///\n     /// use std::str;\n     ///\n     /// // some invalid bytes, in a vector"}]}