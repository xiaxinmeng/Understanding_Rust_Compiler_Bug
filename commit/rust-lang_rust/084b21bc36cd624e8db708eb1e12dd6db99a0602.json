{"sha": "084b21bc36cd624e8db708eb1e12dd6db99a0602", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NGIyMWJjMzZjZDYyNGU4ZGI3MDhlYjFlMTJkZDZkYjk5YTA2MDI=", "commit": {"author": {"name": "Luciano Bestia", "email": "LucianoBestia@gmail.com", "date": "2021-02-05T13:32:03Z"}, "committer": {"name": "Luciano Bestia", "email": "LucianoBestia@gmail.com", "date": "2021-02-05T13:32:03Z"}, "message": "simple comparison instead of regex", "tree": {"sha": "ea3500a01b5412ffb6391bff3d9d81a46c08d476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea3500a01b5412ffb6391bff3d9d81a46c08d476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084b21bc36cd624e8db708eb1e12dd6db99a0602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084b21bc36cd624e8db708eb1e12dd6db99a0602", "html_url": "https://github.com/rust-lang/rust/commit/084b21bc36cd624e8db708eb1e12dd6db99a0602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084b21bc36cd624e8db708eb1e12dd6db99a0602/comments", "author": null, "committer": null, "parents": [{"sha": "9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "html_url": "https://github.com/rust-lang/rust/commit/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702"}], "stats": {"total": 47, "additions": 8, "deletions": 39}, "files": [{"sha": "30cef4cf81d8f746fad10ae6079a08f113d6a51c", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/084b21bc36cd624e8db708eb1e12dd6db99a0602/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/084b21bc36cd624e8db708eb1e12dd6db99a0602/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=084b21bc36cd624e8db708eb1e12dd6db99a0602", "patch": "@@ -15,15 +15,6 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n \n-[[package]]\n-name = \"aho-corasick\"\n-version = \"0.7.15\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5\"\n-dependencies = [\n- \"memchr\",\n-]\n-\n [[package]]\n name = \"ansi_term\"\n version = \"0.12.1\"\n@@ -649,13 +640,11 @@ dependencies = [\n  \"ide_db\",\n  \"indexmap\",\n  \"itertools 0.10.0\",\n- \"lazy_static\",\n  \"log\",\n  \"oorandom\",\n  \"profile\",\n  \"pulldown-cmark\",\n  \"pulldown-cmark-to-cmark\",\n- \"regex\",\n  \"rustc-hash\",\n  \"ssr\",\n  \"stdx\",\n@@ -1317,10 +1306,7 @@ version = \"1.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a\"\n dependencies = [\n- \"aho-corasick\",\n- \"memchr\",\n  \"regex-syntax\",\n- \"thread_local\",\n ]\n \n [[package]]"}, {"sha": "15a48c0f37b4ecb60bcb1b50f3e80533b287ca60", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/084b21bc36cd624e8db708eb1e12dd6db99a0602/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/084b21bc36cd624e8db708eb1e12dd6db99a0602/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=084b21bc36cd624e8db708eb1e12dd6db99a0602", "patch": "@@ -31,13 +31,10 @@ assists = { path = \"../assists\", version = \"0.0.0\" }\n ssr = { path = \"../ssr\", version = \"0.0.0\" }\n completion = { path = \"../completion\", version = \"0.0.0\" }\n \n-lazy_static = \"1.4.0\"\n-regex = \"1.4.3\"\n-env_logger = { version = \"0.8.1\", default-features = false }\n-\n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n hir = { path = \"../hir\", version = \"0.0.0\" }\n \n [dev-dependencies]\n expect-test = \"1.1\"\n+env_logger = { version = \"0.8.1\", default-features = false }\n\\ No newline at end of file"}, {"sha": "7ba775a771c6144bfc83c6e589fa204e304c6d85", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/084b21bc36cd624e8db708eb1e12dd6db99a0602/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084b21bc36cd624e8db708eb1e12dd6db99a0602/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=084b21bc36cd624e8db708eb1e12dd6db99a0602", "patch": "@@ -9,8 +9,6 @@ use syntax::{\n     SyntaxNode, TextRange, TextSize,\n };\n \n-use lazy_static::lazy_static;\n-\n #[derive(Debug, PartialEq, Eq)]\n pub enum FoldKind {\n     Comment,\n@@ -53,17 +51,10 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n                 // Fold groups of comments\n                 if let Some(comment) = ast::Comment::cast(token) {\n                     if !visited_comments.contains(&comment) {\n-                        // regions are not really comments\n-                        use regex::Regex;\n-                        lazy_static! {\n-                            static ref RE_START: Regex =\n-                                Regex::new(r\"^\\s*//\\s*#?region\\b\").unwrap();\n-                            static ref RE_END: Regex =\n-                                Regex::new(r\"^\\s*//\\s*#?endregion\\b\").unwrap();\n-                        }\n-                        if RE_START.is_match(comment.text()) {\n+                        // regions are not real comments\n+                        if comment.text().trim().starts_with(\"// region:\") {\n                             regions_starts.push(comment.syntax().text_range().start());\n-                        } else if RE_END.is_match(comment.text()) {\n+                        } else if comment.text().trim().starts_with(\"// endregion\") {\n                             if !regions_starts.is_empty() {\n                                 res.push(Fold {\n                                     range: TextRange::new(\n@@ -202,15 +193,10 @@ fn contiguous_range_for_comment(\n                 }\n                 if let Some(c) = ast::Comment::cast(token) {\n                     if c.kind() == group_kind {\n-                        // regions are not really comments\n-                        use regex::Regex;\n-                        lazy_static! {\n-                            static ref RE_START: Regex =\n-                                Regex::new(r\"^\\s*//\\s*#?region\\b\").unwrap();\n-                            static ref RE_END: Regex =\n-                                Regex::new(r\"^\\s*//\\s*#?endregion\\b\").unwrap();\n-                        }\n-                        if RE_START.is_match(c.text()) || RE_END.is_match(c.text()) {\n+                        // regions are not real comments\n+                        if c.text().trim().starts_with(\"// region:\")\n+                            || c.text().trim().starts_with(\"// endregion\")\n+                        {\n                             break;\n                         } else {\n                             visited.insert(c.clone());"}]}