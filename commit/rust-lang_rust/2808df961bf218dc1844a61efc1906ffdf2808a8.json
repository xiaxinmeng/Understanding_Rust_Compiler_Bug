{"sha": "2808df961bf218dc1844a61efc1906ffdf2808a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MDhkZjk2MWJmMjE4ZGMxODQ0YTYxZWZjMTkwNmZmZGYyODA4YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-14T23:18:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-14T23:18:00Z"}, "message": "Auto merge of #31661 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #31607, #31649, #31655, #31658\n- Failed merges:", "tree": {"sha": "835a3661a74c4ff18f5030e13876a075e7b7cb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835a3661a74c4ff18f5030e13876a075e7b7cb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2808df961bf218dc1844a61efc1906ffdf2808a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2808df961bf218dc1844a61efc1906ffdf2808a8", "html_url": "https://github.com/rust-lang/rust/commit/2808df961bf218dc1844a61efc1906ffdf2808a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2808df961bf218dc1844a61efc1906ffdf2808a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "url": "https://api.github.com/repos/rust-lang/rust/commits/a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "html_url": "https://github.com/rust-lang/rust/commit/a888333ea6acad7e289fa3f0f9e6c1058aa2a011"}, {"sha": "fb09a441c664704a7a49d0fba70c1c61dc7bed51", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb09a441c664704a7a49d0fba70c1c61dc7bed51", "html_url": "https://github.com/rust-lang/rust/commit/fb09a441c664704a7a49d0fba70c1c61dc7bed51"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "31c9da3fadae2cd0f983938d99b81d6294094535", "filename": "src/doc/book/functions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Fdoc%2Fbook%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Fdoc%2Fbook%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ffunctions.md?ref=2808df961bf218dc1844a61efc1906ffdf2808a8", "patch": "@@ -68,7 +68,7 @@ You get this error:\n \n ```text\n expected one of `!`, `:`, or `@`, found `)`\n-fn print_number(x, y) {\n+fn print_sum(x, y) {\n ```\n \n This is a deliberate design decision. While full-program inference is possible,"}, {"sha": "68c7235975e8c39a1b68ee4ca43fb1d49def0de0", "filename": "src/doc/book/strings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Fdoc%2Fbook%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Fdoc%2Fbook%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstrings.md?ref=2808df961bf218dc1844a61efc1906ffdf2808a8", "patch": "@@ -39,7 +39,7 @@ The second, with a `\\`, trims the spaces and the newline:\n \n ```rust\n let s = \"foo\\\n-    bar\"; \n+    bar\";\n \n assert_eq!(\"foobar\", s);\n ```"}, {"sha": "ed370bb91648fc457a9359bdae4d4667a8701783", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2808df961bf218dc1844a61efc1906ffdf2808a8", "patch": "@@ -479,7 +479,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Checked negation. Computes `!self`, returning `None` if `self ==\n+        /// Checked negation. Computes `-self`, returning `None` if `self ==\n         /// MIN`.\n         ///\n         /// # Examples"}, {"sha": "3cbb2f17be78b0343aa63d42c9596343df5e18b5", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2808df961bf218dc1844a61efc1906ffdf2808a8", "patch": "@@ -127,8 +127,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n     tmp\n }\n \n-/// Variant of read_and_zero that writes the specific drop-flag byte\n-/// (which may be more appropriate than zero).\n+#[allow(missing_docs)]\n #[inline(always)]\n #[unstable(feature = \"filling_drop\",\n            reason = \"may play a larger role in std::ptr future extensions\","}, {"sha": "4d367cfd432f94a2f5333ec3bbbcdc94b33b493c", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2808df961bf218dc1844a61efc1906ffdf2808a8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2808df961bf218dc1844a61efc1906ffdf2808a8", "patch": "@@ -157,7 +157,7 @@ impl Utf8Error {\n     /// // std::str::from_utf8 returns a Utf8Error\n     /// let error = str::from_utf8(&sparkle_heart).unwrap_err();\n     ///\n-    /// // the first byte is invalid here\n+    /// // the second byte is invalid here\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n@@ -174,10 +174,10 @@ impl Utf8Error {\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n-/// this function, [`from_utf8_unchecked()`][fromutf8], which has the same\n+/// this function, [`from_utf8_unchecked()`][fromutf8u], which has the same\n /// behavior but skips the check.\n ///\n-/// [fromutf8]: fn.from_utf8.html\n+/// [fromutf8u]: fn.from_utf8_unchecked.html\n ///\n /// If you need a `String` instead of a `&str`, consider\n /// [`String::from_utf8()`][string].\n@@ -275,7 +275,7 @@ unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n-/// See the safe version, [`from_utf8()`][fromutf8], for more.\n+/// See the safe version, [`from_utf8()`][fromutf8], for more information.\n ///\n /// [fromutf8]: fn.from_utf8.html\n ///"}]}