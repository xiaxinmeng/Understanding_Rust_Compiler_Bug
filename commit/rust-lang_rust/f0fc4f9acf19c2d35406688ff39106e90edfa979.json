{"sha": "f0fc4f9acf19c2d35406688ff39106e90edfa979", "node_id": "C_kwDOAAsO6NoAKGYwZmM0ZjlhY2YxOWMyZDM1NDA2Njg4ZmYzOTEwNmU5MGVkZmE5Nzk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T18:59:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T17:18:11Z"}, "message": "Tweak await span", "tree": {"sha": "2985b293b46fba1c0ce9befa1e59cf7f43bf1f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2985b293b46fba1c0ce9befa1e59cf7f43bf1f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fc4f9acf19c2d35406688ff39106e90edfa979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc4f9acf19c2d35406688ff39106e90edfa979", "html_url": "https://github.com/rust-lang/rust/commit/f0fc4f9acf19c2d35406688ff39106e90edfa979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc4f9acf19c2d35406688ff39106e90edfa979/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a2f24b156973316dd0853dc0263bf8efff1ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a2f24b156973316dd0853dc0263bf8efff1ac4", "html_url": "https://github.com/rust-lang/rust/commit/12a2f24b156973316dd0853dc0263bf8efff1ac4"}], "stats": {"total": 879, "additions": 479, "deletions": 400}, "files": [{"sha": "341adc87b9322a6ab44d70e8dfd6e3a879efa438", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1430,8 +1430,8 @@ pub enum ExprKind {\n     /// The async block used to have a `NodeId`, which was removed in favor of\n     /// using the parent `NodeId` of the parent `Expr`.\n     Async(CaptureBy, P<Block>),\n-    /// An await expression (`my_future.await`).\n-    Await(P<Expr>),\n+    /// An await expression (`my_future.await`). Span is of await keyword.\n+    Await(P<Expr>, Span),\n \n     /// A try block (`try { ... }`).\n     TryBlock(P<Block>),"}, {"sha": "68a4d522993c1620799d76c52f6be2ddc671a6aa", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1415,7 +1415,10 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         ExprKind::Async(_capture_by, body) => {\n             vis.visit_block(body);\n         }\n-        ExprKind::Await(expr) => vis.visit_expr(expr),\n+        ExprKind::Await(expr, await_kw_span) => {\n+            vis.visit_expr(expr);\n+            vis.visit_span(await_kw_span);\n+        }\n         ExprKind::Assign(el, er, _) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);"}, {"sha": "64ae904513cb30b6cafd797d454bc7db5bef114a", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -388,7 +388,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             // X { y: 1 } + X { y: 2 }\n             contains_exterior_struct_lit(lhs) || contains_exterior_struct_lit(rhs)\n         }\n-        ast::ExprKind::Await(x)\n+        ast::ExprKind::Await(x, _)\n         | ast::ExprKind::Unary(_, x)\n         | ast::ExprKind::Cast(x, _)\n         | ast::ExprKind::Type(x, _)"}, {"sha": "1526ffa0b0306f656bbddd9656336885b76a5473", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -864,7 +864,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Async(_, body) => {\n             visitor.visit_block(body);\n         }\n-        ExprKind::Await(expr) => visitor.visit_expr(expr),\n+        ExprKind::Await(expr, _) => visitor.visit_expr(expr),\n         ExprKind::Assign(lhs, rhs, _) => {\n             visitor.visit_expr(lhs);\n             visitor.visit_expr(rhs);"}, {"sha": "8a5b26476c2fca9bb3e2fed3eadff4fb88733ebc", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -185,20 +185,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::AsyncGeneratorKind::Block,\n                     |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n                 ),\n-                ExprKind::Await(expr) => {\n-                    let dot_await_span = if expr.span.hi() < e.span.hi() {\n-                        let span_with_whitespace = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_extend_while(expr.span, char::is_whitespace)\n-                            .unwrap_or(expr.span);\n-                        span_with_whitespace.shrink_to_hi().with_hi(e.span.hi())\n+                ExprKind::Await(expr, await_kw_span) => {\n+                    let await_kw_span = if expr.span.hi() < await_kw_span.hi() {\n+                        *await_kw_span\n                     } else {\n                         // this is a recovered `await expr`\n                         e.span\n                     };\n-                    self.lower_expr_await(dot_await_span, expr)\n+                    self.lower_expr_await(await_kw_span, expr)\n                 }\n                 ExprKind::Closure(box Closure {\n                     binder,\n@@ -710,18 +704,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     }\n     /// }\n     /// ```\n-    fn lower_expr_await(&mut self, dot_await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n-        let full_span = expr.span.to(dot_await_span);\n+    fn lower_expr_await(&mut self, await_kw_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let full_span = expr.span.to(await_kw_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n                 self.tcx.sess.emit_err(AwaitOnlyInAsyncFnAndBlocks {\n-                    dot_await_span,\n+                    dot_await_span: await_kw_span,\n                     item_span: self.current_item,\n                 });\n             }\n         }\n-        let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n+        let span = self.mark_span_with_reason(DesugaringKind::Await, await_kw_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n             full_span,"}, {"sha": "270e11e55904d40ccf53b380907009eb8f43137b", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -583,7 +583,7 @@ fn may_contain_yield_point(e: &ast::Expr) -> bool {\n \n     impl Visitor<'_> for MayContainYieldPoint {\n         fn visit_expr(&mut self, e: &ast::Expr) {\n-            if let ast::ExprKind::Await(_) | ast::ExprKind::Yield(_) = e.kind {\n+            if let ast::ExprKind::Await(_, _) | ast::ExprKind::Yield(_) = e.kind {\n                 self.0 = true;\n             } else {\n                 visit::walk_expr(self, e);"}, {"sha": "bac8d21eb7a6b6587c5f553c7157f07e08431aaa", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -447,7 +447,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Await(expr) => {\n+            ast::ExprKind::Await(expr, _) => {\n                 self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n                 self.word(\".await\");\n             }"}, {"sha": "bd3f148c9a79c87d527c2f4e523c8f0ada0f8467", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -288,7 +288,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             ExprKind::Assign(_, _, _)\n             | ExprKind::AssignOp(_, _, _)\n             | ExprKind::Async(_, _)\n-            | ExprKind::Await(_)\n+            | ExprKind::Await(_, _)\n             | ExprKind::Block(_, _)\n             | ExprKind::Break(_, _)\n             | ExprKind::Closure(_)"}, {"sha": "0e041df898cac3550b94125dcd8c98e0a8afdb5d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1646,7 +1646,7 @@ impl<'a> Parser<'a> {\n             // Avoid knock-down errors as we don't know whether to interpret this as `foo().await?`\n             // or `foo()?.await` (the very reason we went with postfix syntax \ud83d\ude05).\n             ExprKind::Try(_) => ExprKind::Err,\n-            _ => ExprKind::Await(expr),\n+            _ => ExprKind::Await(expr, await_sp),\n         };\n         let expr = self.mk_expr(lo.to(sp), kind);\n         self.maybe_recover_from_bad_qpath(expr)"}, {"sha": "2dd0232d6ebfdb98dd7d16d1813b49b11fb6c19e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -859,7 +859,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Field(_, _) => \"a field access\",\n                     ExprKind::MethodCall(_) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n-                    ExprKind::Await(_) => \"`.await`\",\n+                    ExprKind::Await(_, _) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n                     _ => unreachable!(\"parse_dot_or_call_expr_with_ shouldn't produce this\"),\n                 }\n@@ -3256,7 +3256,7 @@ impl<'a> Parser<'a> {\n \n     fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {\n         let span = lo.to(self.prev_token.span);\n-        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg));\n+        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg, self.prev_token.span));\n         self.recover_from_await_method_call();\n         await_expr\n     }"}, {"sha": "9fc16145915934eb4abbe0d34afc29fe889d77a1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1583,55 +1583,59 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic) {\n-        let span = obligation.cause.span;\n-\n-        if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code().peel_derives() {\n-            let hir = self.tcx.hir();\n-            if let Some(hir::Node::Expr(expr)) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n-                // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n-                // and if not maybe suggest doing something else? If we kept the expression around we\n-                // could also check if it is an fn call (very likely) and suggest changing *that*, if\n-                // it is from the local crate.\n+        let hir = self.tcx.hir();\n+        if let ObligationCauseCode::AwaitableExpr(Some(hir_id)) = obligation.cause.code().peel_derives()\n+            && let hir::Node::Expr(expr) = hir.get(*hir_id)\n+        {\n+            // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n+            // and if not maybe suggest doing something else? If we kept the expression around we\n+            // could also check if it is an fn call (very likely) and suggest changing *that*, if\n+            // it is from the local crate.\n+\n+            if let hir::Node::Expr(parent_expr) = hir.get_parent(*hir_id)\n+                // Peel off the DesugaringKind from the span\n+                && let Some(desugar_parent_span) = parent_expr.span.parent_callsite()\n+            {\n                 err.span_suggestion(\n-                    span,\n+                    self.tcx.sess.source.shrink_to_hi().to(desugar_parent_span),\n                     \"remove the `.await`\",\n                     \"\",\n                     Applicability::MachineApplicable,\n                 );\n-                // FIXME: account for associated `async fn`s.\n-                if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n-                    if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n-                        obligation.predicate.kind().skip_binder()\n+            }\n+            // FIXME: account for associated `async fn`s.\n+            if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n+                if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n+                    obligation.predicate.kind().skip_binder()\n+                {\n+                    err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n+                }\n+                if let Some(typeck_results) = &self.typeck_results\n+                        && let ty = typeck_results.expr_ty_adjusted(base)\n+                        && let ty::FnDef(def_id, _substs) = ty.kind()\n+                        && let Some(hir::Node::Item(hir::Item { ident, span, vis_span, .. })) =\n+                            hir.get_if_local(*def_id)\n                     {\n-                        err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n-                    }\n-                    if let Some(typeck_results) = &self.typeck_results\n-                            && let ty = typeck_results.expr_ty_adjusted(base)\n-                            && let ty::FnDef(def_id, _substs) = ty.kind()\n-                            && let Some(hir::Node::Item(hir::Item { ident, span, vis_span, .. })) =\n-                                hir.get_if_local(*def_id)\n-                        {\n-                            let msg = format!(\n-                                \"alternatively, consider making `fn {}` asynchronous\",\n-                                ident\n+                        let msg = format!(\n+                            \"alternatively, consider making `fn {}` asynchronous\",\n+                            ident\n+                        );\n+                        if vis_span.is_empty() {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                &msg,\n+                                \"async \",\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_suggestion_verbose(\n+                                vis_span.shrink_to_hi(),\n+                                &msg,\n+                                \" async\",\n+                                Applicability::MaybeIncorrect,\n                             );\n-                            if vis_span.is_empty() {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    &msg,\n-                                    \"async \",\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                err.span_suggestion_verbose(\n-                                    vis_span.shrink_to_hi(),\n-                                    &msg,\n-                                    \" async\",\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n                         }\n-                }\n+                    }\n             }\n         }\n     }"}, {"sha": "0afce7cf65962d01917319b6bc88e3a3aca7f9e5", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -232,7 +232,7 @@ impl ChainItemKind {\n                 let span = mk_sp(nested.span.hi(), field.span.hi());\n                 (kind, span)\n             }\n-            ast::ExprKind::Await(ref nested) => {\n+            ast::ExprKind::Await(ref nested, _) => {\n                 let span = mk_sp(nested.span.hi(), expr.span.hi());\n                 (ChainItemKind::Await, span)\n             }\n@@ -459,7 +459,7 @@ impl Chain {\n             ast::ExprKind::MethodCall(ref call) => Some(Self::convert_try(&call.receiver, context)),\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)\n-            | ast::ExprKind::Await(ref subexpr) => Some(Self::convert_try(subexpr, context)),\n+            | ast::ExprKind::Await(ref subexpr, _) => Some(Self::convert_try(subexpr, context)),\n             _ => None,\n         }\n     }"}, {"sha": "5dc628adb0c6f8e644f5116f431f44e636802c24", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -218,7 +218,7 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::MethodCall(..)\n-        | ast::ExprKind::Await(_) => rewrite_chain(expr, context, shape),\n+        | ast::ExprKind::Await(_, _) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::MacCall(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n@@ -1889,7 +1889,7 @@ impl<'ast> RhsAssignKind<'ast> {\n                     ast::ExprKind::Try(..)\n                         | ast::ExprKind::Field(..)\n                         | ast::ExprKind::MethodCall(..)\n-                        | ast::ExprKind::Await(_)\n+                        | ast::ExprKind::Await(_, _)\n                 )\n             }\n             _ => false,"}, {"sha": "cefb8ff3ca9010bc746934c923049d8f4fe14600", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@\n         _0: GeneratorSavedTy {\n             ty: impl std::future::Future<Output = ()>,\n             source_info: SourceInfo {\n-                span: $DIR/async_await.rs:15:8: 15:14 (#8),\n+                span: $DIR/async_await.rs:15:9: 15:14 (#8),\n                 scope: scope[0],\n             },\n             ignore_for_traits: false,\n@@ -35,42 +35,42 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     debug _task_context => _38;          // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let mut _0: std::task::Poll<()>;     // return place in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let _3: ();                          // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _7: ();                      // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let _8: ();                          // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _9: std::task::Poll<()>;     // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let _8: ();                          // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _9: std::task::Poll<()>;     // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _13: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n     let mut _14: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _15: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _16: isize;                  // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _15: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _16: isize;                  // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n     let mut _18: !;                      // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _19: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _20: ();                     // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-    let mut _21: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _19: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _20: ();                     // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+    let mut _21: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _22: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-    let mut _23: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let _24: ();                         // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _25: std::task::Poll<()>;    // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _27: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _28: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _23: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let _24: ();                         // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _25: std::task::Poll<()>;    // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _27: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _28: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _29: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n     let mut _30: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _31: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _32: isize;                  // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _31: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _32: isize;                  // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _34: !;                      // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _35: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-    let mut _36: ();                     // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _35: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+    let mut _36: ();                     // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n     let mut _37: ();                     // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let mut _38: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     let mut _39: u32;                    // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     scope 1 {\n-        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at $DIR/async_await.rs:+1:9: +1:14\n         let _17: ();                     // in scope 1 at $DIR/async_await.rs:+1:5: +1:14\n         scope 2 {\n         }\n@@ -79,7 +79,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         }\n     }\n     scope 4 {\n-        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at $DIR/async_await.rs:+2:9: +2:14\n         let _33: ();                     // in scope 4 at $DIR/async_await.rs:+2:5: +2:14\n         scope 5 {\n         }\n@@ -96,7 +96,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb1: {\n         _38 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n         StorageLive(_5);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n         _5 = a() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n                                          // mir::Constant\n@@ -105,75 +105,75 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb2: {\n-        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + span: $DIR/async_await.rs:15:9: 15:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n         StorageDead(_5);                 // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n-        nop;                             // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n-        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        nop;                             // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n+        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb4: {\n-        StorageLive(_8);                 // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_9);                 // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_10);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_11);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_8);                 // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_9);                 // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_10);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_11);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + span: $DIR/async_await.rs:15:9: 15:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n         StorageDead(_11);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n         StorageLive(_13);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         StorageLive(_14);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_15);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _15 = _38;                       // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_15);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n+        _15 = _38;                       // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n         _14 = move _15;                  // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         goto -> bb6;                     // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n     }\n \n     bb6: {\n         _13 = &mut (*_14);               // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         StorageDead(_15);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + span: $DIR/async_await.rs:15:9: 15:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n     }\n \n     bb7: {\n         StorageDead(_13);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_10);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _16 = discriminant(_9);          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _16 = discriminant(_9);          // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb8: {\n-        _8 = const ();                   // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _8 = const ();                   // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n         StorageDead(_14);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_12);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_9);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n         StorageDead(_8);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        return;                          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        return;                          // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb9: {\n-        unreachable;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        unreachable;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb10: {\n@@ -190,10 +190,10 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n \n     bb11: {\n         StorageDead(_20);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        _38 = move _19;                  // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _38 = move _19;                  // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n         StorageDead(_19);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        _7 = const ();                   // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n-        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _7 = const ();                   // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n     }\n \n     bb12: {\n@@ -204,7 +204,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb13: {\n         StorageDead(_4);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n         StorageDead(_3);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n-        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n         StorageLive(_22);                // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n         _22 = a() -> [return: bb14, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n                                          // mir::Constant\n@@ -213,71 +213,71 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb14: {\n-        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + span: $DIR/async_await.rs:16:9: 16:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n     }\n \n     bb15: {\n         StorageDead(_22);                // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n-        nop;                             // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n-        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        nop;                             // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21; // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n+        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb16: {\n-        StorageLive(_24);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_25);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_26);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_27);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_24);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_25);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_26);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_27);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + span: $DIR/async_await.rs:16:9: 16:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n     }\n \n     bb17: {\n         StorageDead(_27);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         StorageLive(_29);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         StorageLive(_30);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n-        StorageLive(_31);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _31 = _38;                       // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_31);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n+        _31 = _38;                       // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n         _30 = move _31;                  // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         goto -> bb18;                    // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n     }\n \n     bb18: {\n         _29 = &mut (*_30);               // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         StorageDead(_31);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + span: $DIR/async_await.rs:16:9: 16:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n     }\n \n     bb19: {\n         StorageDead(_29);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_26);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb20: {\n-        _24 = const ();                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _24 = const ();                  // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n         StorageDead(_30);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        return;                          // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        return;                          // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb21: {\n@@ -294,10 +294,10 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n \n     bb22: {\n         StorageDead(_36);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n         StorageDead(_35);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n     }\n \n     bb23: {"}, {"sha": "dee90262fd44397ffc565a49ddce4e997fa85acc", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(foo(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:11:14\n+  --> $DIR/async-await-let-else.rs:11:15\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await\n-   |              ^^^^^^ await occurs here, with `r` maybe used later\n+   |               ^^^^^ await occurs here, with `r` maybe used later\n LL |     };\n    |     - `r` is later dropped here\n note: required by a bound in `is_send`\n@@ -65,12 +65,12 @@ LL |     is_send(foo3(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:33:28\n+  --> $DIR/async-await-let-else.rs:33:29\n    |\n LL |         (Rc::new(()), bar().await);\n-   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n-   |          |                 |\n-   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          -----------        ^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                  |\n+   |          |                  await occurs here, with `Rc::new(())` maybe used later\n    |          has type `Rc<()>` which is not `Send`\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n@@ -86,12 +86,12 @@ LL |     is_send(foo4(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:41:14\n+  --> $DIR/async-await-let-else.rs:41:15\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await;\n-   |              ^^^^^^ await occurs here, with `r` maybe used later\n+   |               ^^^^^ await occurs here, with `r` maybe used later\n ...\n LL |     };\n    |     - `r` is later dropped here"}, {"sha": "e3fcceaa3921a7a14174a444c0be1cdefcd8f0c3", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking_mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(foo(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:11:14\n+  --> $DIR/async-await-let-else.rs:11:15\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await\n-   |              ^^^^^^ await occurs here, with `r` maybe used later\n+   |               ^^^^^ await occurs here, with `r` maybe used later\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |\n@@ -63,10 +63,10 @@ LL |     is_send(foo3(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:33:28\n+  --> $DIR/async-await-let-else.rs:33:29\n    |\n LL |         (Rc::new(()), bar().await);\n-   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |          -----------        ^^^^^ await occurs here, with `Rc::new(())` maybe used later\n    |          |\n    |          has type `Rc<()>` which is not `Send`\n note: required by a bound in `is_send`\n@@ -83,12 +83,12 @@ LL |     is_send(foo4(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:41:14\n+  --> $DIR/async-await-let-else.rs:41:15\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await;\n-   |              ^^^^^^ await occurs here, with `r` maybe used later\n+   |               ^^^^^ await occurs here, with `r` maybe used later\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n    |"}, {"sha": "ece4e51ecff100e5fb168e7949fd1d6fdcde91ff", "filename": "tests/ui/async-await/async-await-let-else.no_drop_tracking.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(foo(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:11:14\n+  --> $DIR/async-await-let-else.rs:11:15\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await\n-   |              ^^^^^^ await occurs here, with `r` maybe used later\n+   |               ^^^^^ await occurs here, with `r` maybe used later\n LL |     };\n    |     - `r` is later dropped here\n note: required by a bound in `is_send`\n@@ -28,10 +28,10 @@ LL |     is_send(foo2(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:23:26\n+  --> $DIR/async-await-let-else.rs:23:27\n    |\n LL |         bar2(Rc::new(())).await\n-   |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |              -----------  ^^^^^ await occurs here, with `Rc::new(())` maybe used later\n    |              |\n    |              has type `Rc<()>` which is not `Send`\n LL |     };\n@@ -50,12 +50,12 @@ LL |     is_send(foo3(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:33:28\n+  --> $DIR/async-await-let-else.rs:33:29\n    |\n LL |         (Rc::new(()), bar().await);\n-   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n-   |          |                 |\n-   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          -----------        ^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                  |\n+   |          |                  await occurs here, with `Rc::new(())` maybe used later\n    |          has type `Rc<()>` which is not `Send`\n note: required by a bound in `is_send`\n   --> $DIR/async-await-let-else.rs:19:15\n@@ -71,12 +71,12 @@ LL |     is_send(foo4(Some(true)));\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:41:14\n+  --> $DIR/async-await-let-else.rs:41:15\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n LL |         bar().await;\n-   |              ^^^^^^ await occurs here, with `r` maybe used later\n+   |               ^^^^^ await occurs here, with `r` maybe used later\n ...\n LL |     };\n    |     - `r` is later dropped here"}, {"sha": "99a674a2684c468d0211e88fffde3c95fe1e42f3", "filename": "tests/ui/async-await/async-error-span.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -14,10 +14,10 @@ LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:19:17\n+  --> $DIR/async-error-span.rs:19:18\n    |\n LL |     get_future().await;\n-   |                 ^^^^^^\n+   |                  ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99a674a2684c468d0211e88fffde3c95fe1e42f3", "filename": "tests/ui/async-await/async-error-span.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -14,10 +14,10 @@ LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:19:17\n+  --> $DIR/async-error-span.rs:19:18\n    |\n LL |     get_future().await;\n-   |                 ^^^^^^\n+   |                  ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0515edaeda342f16f235fabd509bcab59c5fbc46", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:36:25\n+  --> $DIR/async-fn-nonsend.rs:36:26\n    |\n LL |     match Some(non_send()) {\n    |           ---------------- has type `Option<impl Debug>` which is not `Send`\n LL |         Some(_) => fut().await,\n-   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n+   |                          ^^^^^ await occurs here, with `Some(non_send())` maybe used later\n ...\n LL | }\n    | - `Some(non_send())` is later dropped here\n@@ -29,13 +29,13 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:49:14\n+  --> $DIR/async-fn-nonsend.rs:49:15\n    |\n LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n    |                                            --------------- has type `Formatter<'_>` which is not `Send`\n ...\n LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+   |               ^^^^^ await occurs here, with `get_formatter()` maybe used later\n LL |     }\n LL | }\n    | - `get_formatter()` is later dropped here"}, {"sha": "219945e0971b96090bdc221aeee2890f271f8e2f", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking_mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:36:25\n+  --> $DIR/async-fn-nonsend.rs:36:26\n    |\n LL |     match Some(non_send()) {\n    |           ---------------- has type `Option<impl Debug>` which is not `Send`\n LL |         Some(_) => fut().await,\n-   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n+   |                          ^^^^^ await occurs here, with `Some(non_send())` maybe used later\n note: required by a bound in `assert_send`\n   --> $DIR/async-fn-nonsend.rs:67:24\n    |\n@@ -26,13 +26,13 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:49:14\n+  --> $DIR/async-fn-nonsend.rs:49:15\n    |\n LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n    |                                            --------------- has type `Formatter<'_>` which is not `Send`\n ...\n LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+   |               ^^^^^ await occurs here, with `get_formatter()` maybe used later\n note: required by a bound in `assert_send`\n   --> $DIR/async-fn-nonsend.rs:67:24\n    |"}, {"sha": "b29d2e192f4f5c58e260c1bf2a06ceb2671261bd", "filename": "tests/ui/async-await/async-fn-nonsend.no_drop_tracking.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:27:10\n+  --> $DIR/async-fn-nonsend.rs:27:11\n    |\n LL |     let x = non_send();\n    |         - has type `impl Debug` which is not `Send`\n LL |     drop(x);\n LL |     fut().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `assert_send`\n@@ -29,12 +29,12 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:36:25\n+  --> $DIR/async-fn-nonsend.rs:36:26\n    |\n LL |     match Some(non_send()) {\n    |                ---------- has type `impl Debug` which is not `Send`\n LL |         Some(_) => fut().await,\n-   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n+   |                          ^^^^^ await occurs here, with `non_send()` maybe used later\n ...\n LL | }\n    | - `non_send()` is later dropped here\n@@ -52,13 +52,13 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:49:14\n+  --> $DIR/async-fn-nonsend.rs:49:15\n    |\n LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n    |                                            --------------- has type `Formatter<'_>` which is not `Send`\n ...\n LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+   |               ^^^^^ await occurs here, with `get_formatter()` maybe used later\n LL |     }\n LL | }\n    | - `get_formatter()` is later dropped here\n@@ -76,13 +76,13 @@ LL |     assert_send(non_sync_with_method_call_panic());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:56:14\n+  --> $DIR/async-fn-nonsend.rs:56:15\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n    |         - has type `&mut Formatter<'_>` which is not `Send`\n LL |     if non_sync().fmt(f).unwrap() == () {\n LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `f` maybe used later\n+   |               ^^^^^ await occurs here, with `f` maybe used later\n LL |     }\n LL | }\n    | - `f` is later dropped here\n@@ -100,13 +100,13 @@ LL |     assert_send(non_sync_with_method_call_infinite_loop());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:63:14\n+  --> $DIR/async-fn-nonsend.rs:63:15\n    |\n LL |     let f: &mut std::fmt::Formatter = loop {};\n    |         - has type `&mut Formatter<'_>` which is not `Send`\n LL |     if non_sync().fmt(f).unwrap() == () {\n LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `f` maybe used later\n+   |               ^^^^^ await occurs here, with `f` maybe used later\n LL |     }\n LL | }\n    | - `f` is later dropped here"}, {"sha": "5d29325c82730c3614f55f78cec42417836c2768", "filename": "tests/ui/async-await/async-is-unwindsafe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -17,13 +17,13 @@ LL | |     });\n    = help: within `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`, the trait `UnwindSafe` is not implemented for `&mut Context<'_>`\n    = note: `UnwindSafe` is implemented for `&std::task::Context<'_>`, but not for `&mut std::task::Context<'_>`\n note: future does not implement `UnwindSafe` as this value is used across an await\n-  --> $DIR/async-is-unwindsafe.rs:25:17\n+  --> $DIR/async-is-unwindsafe.rs:25:18\n    |\n LL |         let cx_ref = &mut cx;\n    |             ------ has type `&mut Context<'_>` which does not implement `UnwindSafe`\n LL |\n LL |         async {}.await; // this needs an inner await point\n-   |                 ^^^^^^ await occurs here, with `cx_ref` maybe used later\n+   |                  ^^^^^ await occurs here, with `cx_ref` maybe used later\n ...\n LL |     });\n    |     - `cx_ref` is later dropped here"}, {"sha": "59630e837b7cbef66ac4132c34cf6c7e41bba55d", "filename": "tests/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -162,68 +162,68 @@ LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:71:18\n+  --> $DIR/incorrect-syntax-suggestions.rs:71:19\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n-   |                  ^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:76:18\n+  --> $DIR/incorrect-syntax-suggestions.rs:76:19\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n-   |                  ^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:81:18\n+  --> $DIR/incorrect-syntax-suggestions.rs:81:19\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n-   |                  ^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:18\n+  --> $DIR/incorrect-syntax-suggestions.rs:85:19\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n-   |                  ^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:90:22\n+  --> $DIR/incorrect-syntax-suggestions.rs:90:23\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n-   |                      ^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:97:22\n+  --> $DIR/incorrect-syntax-suggestions.rs:97:23\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n-   |                      ^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:113:29\n+  --> $DIR/incorrect-syntax-suggestions.rs:113:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                             ^ only allowed inside `async` functions and blocks\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:121:29\n+  --> $DIR/incorrect-syntax-suggestions.rs:121:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                             ^ only allowed inside `async` functions and blocks\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to 33 previous errors\n "}, {"sha": "3514cd63df1981a13224f92c171a619ed6afbf7b", "filename": "tests/ui/async-await/clone-suggestion.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fclone-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fclone-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fclone-suggestion.fixed?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -0,0 +1,28 @@\n+// edition: 2021\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+#[derive(Clone)]\n+struct SharedFuture;\n+\n+impl Future for SharedFuture {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<<Self as Future>::Output> {\n+        todo!()\n+    }\n+}\n+\n+async fn foo() {\n+    let f = SharedFuture;\n+    f.clone().await;\n+    f.await;\n+    //~^ ERROR use of moved value\n+}\n+\n+fn main() {}"}, {"sha": "5a4f70cbf4437b774cc7961b6d06d23e5302dae8", "filename": "tests/ui/async-await/clone-suggestion.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fclone-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fclone-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fclone-suggestion.rs?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -0,0 +1,28 @@\n+// edition: 2021\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+#[derive(Clone)]\n+struct SharedFuture;\n+\n+impl Future for SharedFuture {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<<Self as Future>::Output> {\n+        todo!()\n+    }\n+}\n+\n+async fn foo() {\n+    let f = SharedFuture;\n+    f.await;\n+    f.await;\n+    //~^ ERROR use of moved value\n+}\n+\n+fn main() {}"}, {"sha": "8eea8bc39114b071eff5e2468033cc331f163be5", "filename": "tests/ui/async-await/clone-suggestion.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fclone-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fclone-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fclone-suggestion.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `f`\n+  --> $DIR/clone-suggestion.rs:24:5\n+   |\n+LL |     let f = SharedFuture;\n+   |         - move occurs because `f` has type `SharedFuture`, which does not implement the `Copy` trait\n+LL |     f.await;\n+   |       ----- `f` moved due to this method call\n+LL |     f.await;\n+   |     ^ value used here after move\n+   |\n+note: `into_future` takes ownership of the receiver `self`, which moves `f`\n+  --> $SRC_DIR/core/src/future/into_future.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     f.clone().await;\n+   |       ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "07ab8b3c9035376d8920f0ab23decce0c23fde3a", "filename": "tests/ui/async-await/drop-track-bad-field-in-fru.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,12 +5,12 @@ LL |     None { value: (), ..Default::default() }.await;\n    |            ^^^^^ `Option<_>::None` does not have this field\n \n error[E0277]: `Option<_>` is not a future\n-  --> $DIR/drop-track-bad-field-in-fru.rs:7:45\n+  --> $DIR/drop-track-bad-field-in-fru.rs:7:46\n    |\n LL |     None { value: (), ..Default::default() }.await;\n-   |                                             ^^^^^^\n-   |                                             |\n-   |                                             `Option<_>` is not a future\n+   |                                             -^^^^^\n+   |                                             ||\n+   |                                             |`Option<_>` is not a future\n    |                                             help: remove the `.await`\n    |\n    = help: the trait `Future` is not implemented for `Option<_>`"}, {"sha": "80402d8424de0026fa693bd494011256b01fdf1f", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(agent.handle());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:39\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n ...\n LL |         let _ = send_element(element).await;\n-   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+   |                                       ^^^^^ await occurs here, with `mut info` maybe used later\n LL |     }\n    |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`"}, {"sha": "d9141cf4e3642404901a7a53b1f97049cd2158ab", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(agent.handle());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:39\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n ...\n LL |         let _ = send_element(element).await;\n-   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+   |                                       ^^^^^ await occurs here, with `mut info` maybe used later\n note: required by a bound in `assert_send`\n   --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n    |"}, {"sha": "80402d8424de0026fa693bd494011256b01fdf1f", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(agent.handle());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:39\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n ...\n LL |         let _ = send_element(element).await;\n-   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+   |                                       ^^^^^ await occurs here, with `mut info` maybe used later\n LL |     }\n    |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`"}, {"sha": "e2e64c9ae0c4f64e8fe0022e5a0321b21a487590", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(agent.handle());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/field-assign-nonsend.rs:23:38\n+  --> $DIR/field-assign-nonsend.rs:23:39\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n ...\n LL |         let _ = send_element(element).await;\n-   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+   |                                       ^^^^^ await occurs here, with `mut info` maybe used later\n LL |     }\n    |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`"}, {"sha": "d1df8e91afa2c2921872055a55e589555337dd1f", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(agent.handle());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/field-assign-nonsend.rs:23:38\n+  --> $DIR/field-assign-nonsend.rs:23:39\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n ...\n LL |         let _ = send_element(element).await;\n-   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+   |                                       ^^^^^ await occurs here, with `mut info` maybe used later\n note: required by a bound in `assert_send`\n   --> $DIR/field-assign-nonsend.rs:40:19\n    |"}, {"sha": "e2e64c9ae0c4f64e8fe0022e5a0321b21a487590", "filename": "tests/ui/async-await/field-assign-nonsend.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(agent.handle());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/field-assign-nonsend.rs:23:38\n+  --> $DIR/field-assign-nonsend.rs:23:39\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n ...\n LL |         let _ = send_element(element).await;\n-   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+   |                                       ^^^^^ await occurs here, with `mut info` maybe used later\n LL |     }\n    |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`"}, {"sha": "3d0b49b3909680590b9c500616440479c4c94361", "filename": "tests/ui/async-await/issue-101715.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-101715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-101715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-101715.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,11 +1,13 @@\n error[E0277]: `()` is not a future\n-  --> $DIR/issue-101715.rs:11:9\n+  --> $DIR/issue-101715.rs:11:10\n    |\n-LL |         .await\n-   |         ^^^^^^\n-   |         |\n-   |         `()` is not a future\n-   |         help: remove the `.await`\n+LL |       S.very_long_method_name_the_longest_method_name_in_the_whole_universe()\n+   |  ____________________________________________________________________________-\n+LL | |         .await\n+   | |          ^^^^-\n+   | |__________|___|\n+   |            |   help: remove the `.await`\n+   |            `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited"}, {"sha": "56aa035f44babb700ae788295a2e78558e158727", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_sync(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:18:10\n+  --> $DIR/issue-64130-1-sync.rs:18:11\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL |     drop(x);\n LL | }\n    | - `x` is later dropped here"}, {"sha": "ea1bfb9f9ac2357f83301eddd7aaa2b14366f103", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_sync(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:18:10\n+  --> $DIR/issue-64130-1-sync.rs:18:11\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n note: required by a bound in `is_sync`\n   --> $DIR/issue-64130-1-sync.rs:14:15\n    |"}, {"sha": "56aa035f44babb700ae788295a2e78558e158727", "filename": "tests/ui/async-await/issue-64130-1-sync.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_sync(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:18:10\n+  --> $DIR/issue-64130-1-sync.rs:18:11\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL |     drop(x);\n LL | }\n    | - `x` is later dropped here"}, {"sha": "d1717ad3310abbd910df1fc517a06d6beda8f488", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(bar());\n    |\n    = note: the trait bound `Unique<Foo>: Send` is not satisfied\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:18:10\n+  --> $DIR/issue-64130-2-send.rs:18:11\n    |\n LL |     let x = Box::new(Foo);\n    |         - has type `Box<Foo>` which is not `Send`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "45e43525a206a4a3b99ca921f6ee7f9306cca9d4", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(bar());\n    |\n    = note: the trait bound `Unique<Foo>: Send` is not satisfied\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:18:10\n+  --> $DIR/issue-64130-2-send.rs:18:11\n    |\n LL |     let x = Box::new(Foo);\n    |         - has type `Box<Foo>` which is not `Send`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n note: required by a bound in `is_send`\n   --> $DIR/issue-64130-2-send.rs:14:15\n    |"}, {"sha": "d1717ad3310abbd910df1fc517a06d6beda8f488", "filename": "tests/ui/async-await/issue-64130-2-send.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(bar());\n    |\n    = note: the trait bound `Unique<Foo>: Send` is not satisfied\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:18:10\n+  --> $DIR/issue-64130-2-send.rs:18:11\n    |\n LL |     let x = Box::new(Foo);\n    |         - has type `Box<Foo>` which is not `Send`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "b69f06da1cde55705b63c625c4981f52269a15a2", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -8,12 +8,12 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:21:10\n+  --> $DIR/issue-64130-3-other.rs:21:11\n    |\n LL |     let x = Box::new(Foo);\n    |         - has type `Box<Foo>` which does not implement `Qux`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_qux`"}, {"sha": "1298371241cede870d170ac72effc46ced10fb2e", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -8,12 +8,12 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:21:10\n+  --> $DIR/issue-64130-3-other.rs:21:11\n    |\n LL |     let x = Box::new(Foo);\n    |         - has type `Box<Foo>` which does not implement `Qux`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n note: required by a bound in `is_qux`\n   --> $DIR/issue-64130-3-other.rs:17:14\n    |"}, {"sha": "b69f06da1cde55705b63c625c4981f52269a15a2", "filename": "tests/ui/async-await/issue-64130-3-other.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -8,12 +8,12 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:21:10\n+  --> $DIR/issue-64130-3-other.rs:21:11\n    |\n LL |     let x = Box::new(Foo);\n    |         - has type `Box<Foo>` which does not implement `Qux`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n+   |           ^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_qux`"}, {"sha": "4b575a3d3b47a06ebe3180d277d99942bff90603", "filename": "tests/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,13 +6,13 @@ LL | pub fn foo() -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:27:31\n+  --> $DIR/issue-64130-4-async-move.rs:27:32\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n LL |             200 => {\n LL |                 let _x = get().await;\n-   |                               ^^^^^^ await occurs here, with `client` maybe used later\n+   |                                ^^^^^ await occurs here, with `client` maybe used later\n ...\n LL |     }\n    |     - `client` is later dropped here"}, {"sha": "e044e2ca011f00974a0ae136e847fe8a2d80c71f", "filename": "tests/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(foo());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-non-send-future-diags.rs:17:10\n+  --> $DIR/issue-64130-non-send-future-diags.rs:17:11\n    |\n LL |     let g = x.lock().unwrap();\n    |         - has type `MutexGuard<'_, u32>` which is not `Send`\n LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `g` maybe used later\n+   |           ^^^^^ await occurs here, with `g` maybe used later\n LL | }\n    | - `g` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "fa22298658b348eaf8df58348f946c31b61afe8a", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -11,12 +11,12 @@ LL | |     });\n    |\n    = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+  --> $DIR/issue-67252-unnamed-future.rs:23:17\n    |\n LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n    |             - has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `a` maybe used later\n+   |                 ^^^^^ await occurs here, with `a` maybe used later\n LL |         drop(a);\n LL |     });\n    |     - `a` is later dropped here"}, {"sha": "8cf7bb8d9179a43a0a8104162b7e40f60709788a", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     spawn(async {\n    |\n    = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+  --> $DIR/issue-67252-unnamed-future.rs:23:17\n    |\n LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n    |             - has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `a` maybe used later\n+   |                 ^^^^^ await occurs here, with `a` maybe used later\n note: required by a bound in `spawn`\n   --> $DIR/issue-67252-unnamed-future.rs:9:13\n    |"}, {"sha": "fa22298658b348eaf8df58348f946c31b61afe8a", "filename": "tests/ui/async-await/issue-67252-unnamed-future.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -11,12 +11,12 @@ LL | |     });\n    |\n    = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 25:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+  --> $DIR/issue-67252-unnamed-future.rs:23:17\n    |\n LL |         let a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n    |             - has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |                ^^^^^^ await occurs here, with `a` maybe used later\n+   |                 ^^^^^ await occurs here, with `a` maybe used later\n LL |         drop(a);\n LL |     });\n    |     - `a` is later dropped here"}, {"sha": "9866e00bb83a9a197a1e5abc6788f0c542e3815f", "filename": "tests/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,10 +1,10 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-70594.rs:4:11\n+  --> $DIR/issue-70594.rs:4:12\n    |\n LL | async fn fun() {\n    |          --- this is not `async`\n LL |     [1; ().await];\n-   |           ^^^^^^ only allowed inside `async` functions and blocks\n+   |            ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0744]: `.await` is not allowed in a `const`\n   --> $DIR/issue-70594.rs:4:9\n@@ -13,18 +13,18 @@ LL |     [1; ().await];\n    |         ^^^^^^^^\n \n error[E0744]: `.await` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:11\n+  --> $DIR/issue-70594.rs:4:12\n    |\n LL |     [1; ().await];\n-   |           ^^^^^^\n+   |            ^^^^^\n \n error[E0277]: `()` is not a future\n-  --> $DIR/issue-70594.rs:4:11\n+  --> $DIR/issue-70594.rs:4:12\n    |\n LL |     [1; ().await];\n-   |           ^^^^^^\n-   |           |\n-   |           `()` is not a future\n+   |           -^^^^^\n+   |           ||\n+   |           |`()` is not a future\n    |           help: remove the `.await`\n    |\n    = help: the trait `Future` is not implemented for `()`"}, {"sha": "ef0e182e5156f944f1457198b473151466f7f96e", "filename": "tests/ui/async-await/issue-70935-complex-spans.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,15 +6,15 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:19:11\n+  --> $DIR/issue-70935-complex-spans.rs:19:12\n    |\n LL |           baz(|| async{\n    |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n-   | |         - ^^^^^^- the value is later dropped here\n-   | |         | |\n-   | |_________| await occurs here, with the value maybe used later\n+   | |         -  ^^^^^- the value is later dropped here\n+   | |         |  |\n+   | |_________|  await occurs here, with the value maybe used later\n    |           has type `[closure@$DIR/issue-70935-complex-spans.rs:17:13: 17:15]` which is not `Send`\n \n error: aborting due to previous error"}, {"sha": "a344246d6bfffecb9f1aef2660d48359c815f418", "filename": "tests/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |   fake_spawn(wrong_mutex());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-71137.rs:14:25\n+  --> $DIR/issue-71137.rs:14:26\n    |\n LL |     let mut guard = m.lock().unwrap();\n    |         --------- has type `MutexGuard<'_, i32>` which is not `Send`\n LL |     (async { \"right\"; }).await;\n-   |                         ^^^^^^ await occurs here, with `mut guard` maybe used later\n+   |                          ^^^^^ await occurs here, with `mut guard` maybe used later\n LL |     *guard += 1;\n LL |   }\n    |   - `mut guard` is later dropped here"}, {"sha": "574904ceafadaded10a4e9a7565ca8531e27b8a0", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -23,10 +23,10 @@ LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n \n error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n-  --> $DIR/issue-98634.rs:45:33\n+  --> $DIR/issue-98634.rs:45:34\n    |\n LL |         StructAsync { callback }.await;\n-   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n+   |                                  ^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35"}, {"sha": "2e69862a0e09fa0486c5834bfbc8301694cc9d5b", "filename": "tests/ui/async-await/issues/issue-107280.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-107280.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -23,10 +23,10 @@ LL |     inner::<false>().await\n    |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/issue-107280.rs:4:21\n+  --> $DIR/issue-107280.rs:4:22\n    |\n LL |     inner::<false>().await\n-   |                     ^^^^^^\n+   |                      ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/issue-107280.rs:4:5\n@@ -35,10 +35,10 @@ LL |     inner::<false>().await\n    |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/issue-107280.rs:4:21\n+  --> $DIR/issue-107280.rs:4:22\n    |\n LL |     inner::<false>().await\n-   |                     ^^^^^^\n+   |                      ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/issue-107280.rs:4:5\n@@ -47,10 +47,10 @@ LL |     inner::<false>().await\n    |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/issue-107280.rs:4:21\n+  --> $DIR/issue-107280.rs:4:22\n    |\n LL |     inner::<false>().await\n-   |                     ^^^^^^\n+   |                      ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/issue-107280.rs:4:5\n@@ -59,10 +59,10 @@ LL |     inner::<false>().await\n    |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/issue-107280.rs:4:21\n+  --> $DIR/issue-107280.rs:4:22\n    |\n LL |     inner::<false>().await\n-   |                     ^^^^^^\n+   |                      ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/issue-107280.rs:4:5\n@@ -71,10 +71,10 @@ LL |     inner::<false>().await\n    |     ^^^^^^^^^^^^^^ cannot infer the value of const parameter `PING` declared on the function `inner`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/issue-107280.rs:4:21\n+  --> $DIR/issue-107280.rs:4:22\n    |\n LL |     inner::<false>().await\n-   |                     ^^^^^^\n+   |                      ^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "19cc339ec0a07ca78e63ef4e5d13ff477b48f056", "filename": "tests/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,8 +1,8 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:8:24\n+  --> $DIR/issue-51719.rs:8:25\n    |\n LL |     let _gen = || foo().await;\n-   |                --      ^^^^^^ only allowed inside `async` functions and blocks\n+   |                --       ^^^^^ only allowed inside `async` functions and blocks\n    |                |\n    |                this is not `async`\n "}, {"sha": "6dd3726608ba89a81fd7f1fa17d5dcb5b56ded74", "filename": "tests/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:9:26\n+  --> $DIR/issue-51751.rs:9:27\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let result = inc(10000);\n LL |     let finished = result.await;\n-   |                          ^^^^^^ only allowed inside `async` functions and blocks\n+   |                           ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "53d0577a1b23c55ecb516a15ca33ca6cbca86c65", "filename": "tests/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,36 +1,36 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:22\n+  --> $DIR/issue-62009-1.rs:6:23\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n-   |                      ^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:6\n+  --> $DIR/issue-62009-1.rs:10:7\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     }.await;\n-   |      ^^^^^^ only allowed inside `async` functions and blocks\n+   |       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:15\n+  --> $DIR/issue-62009-1.rs:12:16\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n-   |               ^^^^^^ only allowed inside `async` functions and blocks\n+   |                ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n-  --> $DIR/issue-62009-1.rs:12:15\n+  --> $DIR/issue-62009-1.rs:12:16\n    |\n LL |     (|_| 2333).await;\n-   |               ^^^^^^\n-   |               |\n-   |               `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n+   |               -^^^^^\n+   |               ||\n+   |               |`[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` is not a future\n    |               help: remove the `.await`\n    |\n    = help: the trait `Future` is not implemented for closure `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`"}, {"sha": "9c2f20df6576f18e63534436bc2d155326e791eb", "filename": "tests/ui/async-await/issues/issue-62009-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,10 +1,10 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-2.rs:8:22\n+  --> $DIR/issue-62009-2.rs:8:23\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     (async || 2333)().await;\n-   |                      ^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "53d32620241c75777442819e672894ca847c8f1a", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -10,12 +10,12 @@ LL | |     })\n    |\n    = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:17:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:35\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:36\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n-   |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n-   |                 |                 |\n-   |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n+   |                 ----------------   ^^^^^- `std::ptr::null()` is later dropped here\n+   |                 |                  |\n+   |                 |                  await occurs here, with `std::ptr::null()` maybe used later\n    |                 has type `*const u8` which is not `Send`\n help: consider moving this into a `let` binding to create a shorter lived borrow\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:19:13"}, {"sha": "c941b9eeb29acd471422a607f7f94c6493695fe2", "filename": "tests/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     g(issue_67893::run())\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/auxiliary/issue_67893.rs:12:26\n+  --> $DIR/auxiliary/issue_67893.rs:12:27\n    |\n LL |     f(*x.lock().unwrap()).await;\n-   |        ----------------- ^^^^^^- `x.lock().unwrap()` is later dropped here\n-   |        |                 |\n-   |        |                 await occurs here, with `x.lock().unwrap()` maybe used later\n+   |        -----------------  ^^^^^- `x.lock().unwrap()` is later dropped here\n+   |        |                  |\n+   |        |                  await occurs here, with `x.lock().unwrap()` maybe used later\n    |        has type `MutexGuard<'_, ()>` which is not `Send`\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14"}, {"sha": "b6583022c161a439f59f04709a5941c47d194fe8", "filename": "tests/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:9:27\n+  --> $DIR/non-async-enclosing-span.rs:9:28\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let x = move || {};\n LL |     let y = do_the_thing().await;\n-   |                           ^^^^^^ only allowed inside `async` functions and blocks\n+   |                            ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "f1b358ed68a6d30c97f6428bc584132f92881853", "filename": "tests/ui/async-await/unnecessary-await.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `()` is not a future\n-  --> $DIR/unnecessary-await.rs:9:10\n+  --> $DIR/unnecessary-await.rs:9:11\n    |\n LL |     boo().await;\n-   |     -----^^^^^^ `()` is not a future\n+   |     ----- ^^^^^ `()` is not a future\n    |     |\n    |     this call returns `()`\n    |"}, {"sha": "6b4a3a36395f8bd2f227dddc32a440b5ff8338b6", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,10 +5,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:12:5\n@@ -17,10 +17,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:12:5\n@@ -29,10 +29,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6642e90acd86101c090689b9d7c4cbf2cca0f8f8", "filename": "tests/ui/async-await/unresolved_type_param.no_drop_tracking.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,10 +5,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:12:5\n@@ -17,10 +17,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:12:5\n@@ -29,10 +29,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:12:5\n@@ -41,10 +41,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:12:5\n@@ -53,10 +53,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:12:10\n+  --> $DIR/unresolved_type_param.rs:12:11\n    |\n LL |     bar().await;\n-   |          ^^^^^^\n+   |           ^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "dec0141ab67178ff49f4785aac9228fae8e0aa13", "filename": "tests/ui/generator/unresolved-ct-var-drop-tracking.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: `[(); _]` is not a future\n-  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                 ---------------------------^^^^^^\n-   |                 |                          |\n-   |                 |                          `[(); _]` is not a future\n+   |                 ----------------------------^^^^^\n+   |                 |                          ||\n+   |                 |                          |`[(); _]` is not a future\n    |                 |                          help: remove the `.await`\n    |                 this call returns `[(); _]`\n    |\n@@ -19,10 +19,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n@@ -31,10 +31,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n@@ -43,10 +43,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n@@ -55,10 +55,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n@@ -67,10 +67,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ace254178b7fac63f54b4de9c86f8a9d553bd392", "filename": "tests/ui/generator/unresolved-ct-var.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fgenerator%2Funresolved-ct-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fgenerator%2Funresolved-ct-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Funresolved-ct-var.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: `[(); _]` is not a future\n-  --> $DIR/unresolved-ct-var.rs:6:44\n+  --> $DIR/unresolved-ct-var.rs:6:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                 ---------------------------^^^^^^\n-   |                 |                          |\n-   |                 |                          `[(); _]` is not a future\n+   |                 ----------------------------^^^^^\n+   |                 |                          ||\n+   |                 |                          |`[(); _]` is not a future\n    |                 |                          help: remove the `.await`\n    |                 this call returns `[(); _]`\n    |\n@@ -19,10 +19,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var.rs:6:44\n+  --> $DIR/unresolved-ct-var.rs:6:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var.rs:6:17\n@@ -31,10 +31,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var.rs:6:44\n+  --> $DIR/unresolved-ct-var.rs:6:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var.rs:6:17\n@@ -43,10 +43,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var.rs:6:44\n+  --> $DIR/unresolved-ct-var.rs:6:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var.rs:6:17\n@@ -55,10 +55,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var.rs:6:44\n+  --> $DIR/unresolved-ct-var.rs:6:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error[E0698]: type inside `async` block must be known in this context\n   --> $DIR/unresolved-ct-var.rs:6:17\n@@ -67,10 +67,10 @@ LL |         let s = std::array::from_fn(|_| ()).await;\n    |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n    |\n note: the type is part of the `async` block because of this `await`\n-  --> $DIR/unresolved-ct-var.rs:6:44\n+  --> $DIR/unresolved-ct-var.rs:6:45\n    |\n LL |         let s = std::array::from_fn(|_| ()).await;\n-   |                                            ^^^^^^\n+   |                                             ^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a2abfffc170b7f073528f31d2da533aacdf516fc", "filename": "tests/ui/lint/must_not_suspend/boxed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: boxed `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/boxed.rs:20:9"}, {"sha": "cd3baa857abff2e032cc06fe0fa3f42968e15e91", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `No` held across a suspend point, but should not be\n LL |     let no = No {};\n    |         ^^\n LL |     wheeee(&no).await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/dedup.rs:19:9"}, {"sha": "cd3baa857abff2e032cc06fe0fa3f42968e15e91", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `No` held across a suspend point, but should not be\n LL |     let no = No {};\n    |         ^^\n LL |     wheeee(&no).await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/dedup.rs:19:9"}, {"sha": "aff2f7c32b96d2af2a8104496eed1a75742d6bbd", "filename": "tests/ui/lint/must_not_suspend/dedup.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `No` held across a suspend point, but should not be\n LL |     let no = No {};\n    |         ^^\n LL |     wheeee(&no).await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/dedup.rs:19:9\n@@ -21,7 +21,7 @@ error: `No` held across a suspend point, but should not be\n   --> $DIR/dedup.rs:20:13\n    |\n LL |     wheeee(&no).await;\n-   |             ^^ ------ the value is held across this suspend point\n+   |             ^^  ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/dedup.rs:20:13"}, {"sha": "9b5fc37a3329b114b61e60b1fca8e8a68339298c", "filename": "tests/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `MutexGuard` held across a suspend point, but should not be\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n   --> $DIR/mutex.rs:8:9"}, {"sha": "348880b9c9f3133f4c1823362af0b06e26fdf020", "filename": "tests/ui/lint/must_not_suspend/ref-drop-tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |         let guard = &mut self.u;\n    |             ^^^^^\n LL |\n LL |         other().await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref-drop-tracking.rs:19:13"}, {"sha": "fb18c2be9cb3a6f64a348f54749b19f86f3a647b", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |         let guard = &mut self.u;\n    |             ^^^^^\n LL |\n LL |         other().await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref.rs:22:13"}, {"sha": "fb18c2be9cb3a6f64a348f54749b19f86f3a647b", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |         let guard = &mut self.u;\n    |             ^^^^^\n LL |\n LL |         other().await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref.rs:22:13"}, {"sha": "6976dd34991943083613f31709cd1590ab7bfe36", "filename": "tests/ui/lint/must_not_suspend/ref.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n LL |\n LL |         other().await;\n-   |                ------ the value is held across this suspend point\n+   |                 ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref.rs:22:26"}, {"sha": "8c8ad1f3788daf6592071e26880ef397dc5af3a3", "filename": "tests/ui/lint/must_not_suspend/trait.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n ...\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:24:9\n@@ -25,7 +25,7 @@ LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n LL |\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:25:9"}, {"sha": "8c8ad1f3788daf6592071e26880ef397dc5af3a3", "filename": "tests/ui/lint/must_not_suspend/trait.drop_tracking_mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n ...\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:24:9\n@@ -25,7 +25,7 @@ LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n LL |\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:25:9"}, {"sha": "8c8ad1f3788daf6592071e26880ef397dc5af3a3", "filename": "tests/ui/lint/must_not_suspend/trait.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -5,7 +5,7 @@ LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n ...\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:24:9\n@@ -25,7 +25,7 @@ LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n LL |\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:25:9"}, {"sha": "e24cffdd0df430df7b56b411b21dffa8b3dcb2ad", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/unit.rs:22:9"}, {"sha": "e24cffdd0df430df7b56b411b21dffa8b3dcb2ad", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/unit.rs:22:9"}, {"sha": "e24cffdd0df430df7b56b411b21dffa8b3dcb2ad", "filename": "tests/ui/lint/must_not_suspend/unit.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ error: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/unit.rs:22:9"}, {"sha": "4f7b40a5efed1846548472cfab0d43949a885618", "filename": "tests/ui/lint/must_not_suspend/warn.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ warning: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/warn.rs:24:9"}, {"sha": "4f7b40a5efed1846548472cfab0d43949a885618", "filename": "tests/ui/lint/must_not_suspend/warn.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ warning: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/warn.rs:24:9"}, {"sha": "4f7b40a5efed1846548472cfab0d43949a885618", "filename": "tests/ui/lint/must_not_suspend/warn.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -4,7 +4,7 @@ warning: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |            ------ the value is held across this suspend point\n+   |             ----- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/warn.rs:24:9"}, {"sha": "1a1e069f09eb40c1e84f361d3937daa93f1a5d57", "filename": "tests/ui/suggestions/issue-96555.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fsuggestions%2Fissue-96555.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Fsuggestions%2Fissue-96555.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-96555.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `()` is not a future\n-  --> $DIR/issue-96555.rs:4:12\n+  --> $DIR/issue-96555.rs:4:13\n    |\n LL |     m::f1().await;\n-   |     -------^^^^^^ `()` is not a future\n+   |     ------- ^^^^^ `()` is not a future\n    |     |\n    |     this call returns `()`\n    |\n@@ -20,10 +20,10 @@ LL |     pub async fn f1() {}\n    |         +++++\n \n error[E0277]: `()` is not a future\n-  --> $DIR/issue-96555.rs:5:12\n+  --> $DIR/issue-96555.rs:5:13\n    |\n LL |     m::f2().await;\n-   |     -------^^^^^^ `()` is not a future\n+   |     ------- ^^^^^ `()` is not a future\n    |     |\n    |     this call returns `()`\n    |\n@@ -41,10 +41,10 @@ LL |     pub(crate) async fn f2() {}\n    |                +++++\n \n error[E0277]: `()` is not a future\n-  --> $DIR/issue-96555.rs:6:12\n+  --> $DIR/issue-96555.rs:6:13\n    |\n LL |     m::f3().await;\n-   |     -------^^^^^^ `()` is not a future\n+   |     ------- ^^^^^ `()` is not a future\n    |     |\n    |     this call returns `()`\n    |"}, {"sha": "6ce1cf452f459122b0540272ea8538a604b6be5f", "filename": "tests/ui/traits/unsend-future.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Ftraits%2Funsend-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc4f9acf19c2d35406688ff39106e90edfa979/tests%2Fui%2Ftraits%2Funsend-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Funsend-future.stderr?ref=f0fc4f9acf19c2d35406688ff39106e90edfa979", "patch": "@@ -6,12 +6,12 @@ LL |     require_handler(handler)\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const i32`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/unsend-future.rs:15:13\n+  --> $DIR/unsend-future.rs:15:14\n    |\n LL |     let a = &1 as *const i32;\n    |         - has type `*const i32` which is not `Send`\n LL |     async {}.await;\n-   |             ^^^^^^ await occurs here, with `a` maybe used later\n+   |              ^^^^^ await occurs here, with `a` maybe used later\n LL | }\n    | - `a` is later dropped here\n note: required by a bound in `require_handler`"}]}