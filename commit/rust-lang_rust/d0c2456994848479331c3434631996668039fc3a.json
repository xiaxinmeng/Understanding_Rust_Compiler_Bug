{"sha": "d0c2456994848479331c3434631996668039fc3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYzI0NTY5OTQ4NDg0NzkzMzFjMzQzNDYzMTk5NjY2ODAzOWZjM2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-10T09:00:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T09:00:54Z"}, "message": "Merge #7226\n\n7226: Replace state with function r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "754c480770c8f46d28c0f75e76c21d63138dda3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754c480770c8f46d28c0f75e76c21d63138dda3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c2456994848479331c3434631996668039fc3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+sJGCRBK7hj4Ov3rIwAAdHIIAJwCU2DrmBn9znJBRb5su0SZ\nRHZpTzY9IjJq6Ef/Lvfx5TNSBxY/aXTZTOnenwElj9omcjaY4euw9y4dtUFSRuOd\nQJ26XnFYCvJDP7zdGuXW1wcxqE1FRZm4HaPp242P+CvlY9dZZUQr9JJ/LMUHwb89\nAqBfrwGWw+Aj/40nK+eMP7hu++hiwzMbEhaTXl1sebuGqCzRk8q6+IMFZCkX3te+\n6QIuPHXc6yt99vQv8ui2bMwskghxVypYCBgm0n+t7ZFbRmfU6Y3o7bpHDhjiaNbZ\noLlkAbOl76etakl46fcUZS2OTPZV7xuD8LklaO8oBxUSVsSlL29nnR71Mg1lKpM=\n=LtkN\n-----END PGP SIGNATURE-----\n", "payload": "tree 754c480770c8f46d28c0f75e76c21d63138dda3a\nparent bcb9ae18de1fa405eb2add56409ae264267607bb\nparent 083986030e2a81c1135321f89e0984564ac73c41\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610269254 +0000\ncommitter GitHub <noreply@github.com> 1610269254 +0000\n\nMerge #7226\n\n7226: Replace state with function r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c2456994848479331c3434631996668039fc3a", "html_url": "https://github.com/rust-lang/rust/commit/d0c2456994848479331c3434631996668039fc3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c2456994848479331c3434631996668039fc3a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb9ae18de1fa405eb2add56409ae264267607bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb9ae18de1fa405eb2add56409ae264267607bb", "html_url": "https://github.com/rust-lang/rust/commit/bcb9ae18de1fa405eb2add56409ae264267607bb"}, {"sha": "083986030e2a81c1135321f89e0984564ac73c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/083986030e2a81c1135321f89e0984564ac73c41", "html_url": "https://github.com/rust-lang/rust/commit/083986030e2a81c1135321f89e0984564ac73c41"}], "stats": {"total": 122, "additions": 54, "deletions": 68}, "files": [{"sha": "f2d4da78d006b4339349f588245bb322a1b00270", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d0c2456994848479331c3434631996668039fc3a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c2456994848479331c3434631996668039fc3a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=d0c2456994848479331c3434631996668039fc3a", "patch": "@@ -24,7 +24,7 @@ use syntax::{\n \n use crate::{\n     syntax_highlighting::{\n-        format::FormatStringHighlighter, highlights::Highlights,\n+        format::highlight_format_string, highlights::Highlights,\n         macro_rules::MacroRulesHighlighter, tags::Highlight,\n     },\n     FileId, HlMod, HlTag, SymbolKind,\n@@ -88,7 +88,6 @@ fn traverse(\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n     let mut current_macro_rules: Option<ast::MacroRules> = None;\n-    let mut format_string_highlighter = FormatStringHighlighter::default();\n     let mut macro_rules_highlighter = MacroRulesHighlighter::default();\n     let mut inside_attribute = false;\n \n@@ -120,7 +119,6 @@ fn traverse(\n             WalkEvent::Leave(Some(mc)) => {\n                 assert_eq!(current_macro_call, Some(mc));\n                 current_macro_call = None;\n-                format_string_highlighter = FormatStringHighlighter::default();\n             }\n             _ => (),\n         }\n@@ -175,8 +173,6 @@ fn traverse(\n             let token = sema.descend_into_macros(token.clone());\n             let parent = token.parent();\n \n-            format_string_highlighter.check_for_format_string(&parent);\n-\n             // We only care Name and Name_ref\n             match (token.kind(), parent.kind()) {\n                 (IDENT, NAME) | (IDENT, NAME_REF) => parent.into(),\n@@ -195,6 +191,10 @@ fn traverse(\n             }\n         }\n \n+        if let Some(_) = macro_rules_highlighter.highlight(element_to_highlight.clone()) {\n+            continue;\n+        }\n+\n         if let Some((mut highlight, binding_hash)) = highlight::element(\n             &sema,\n             &mut bindings_shadow_count,\n@@ -205,24 +205,20 @@ fn traverse(\n                 highlight = highlight | HlMod::Attribute;\n             }\n \n-            if macro_rules_highlighter.highlight(element_to_highlight.clone()).is_none() {\n-                hl.add(HlRange { range, highlight, binding_hash });\n-            }\n+            hl.add(HlRange { range, highlight, binding_hash });\n+        }\n \n-            if let Some(string) =\n-                element_to_highlight.as_token().cloned().and_then(ast::String::cast)\n-            {\n-                format_string_highlighter.highlight_format_string(hl, &string, range);\n-                // Highlight escape sequences\n-                if let Some(char_ranges) = string.char_ranges() {\n-                    for (piece_range, _) in char_ranges.iter().filter(|(_, char)| char.is_ok()) {\n-                        if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n-                            hl.add(HlRange {\n-                                range: piece_range + range.start(),\n-                                highlight: HlTag::EscapeSequence.into(),\n-                                binding_hash: None,\n-                            });\n-                        }\n+        if let Some(string) = element_to_highlight.as_token().cloned().and_then(ast::String::cast) {\n+            highlight_format_string(hl, &string, range);\n+            // Highlight escape sequences\n+            if let Some(char_ranges) = string.char_ranges() {\n+                for (piece_range, _) in char_ranges.iter().filter(|(_, char)| char.is_ok()) {\n+                    if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n+                        hl.add(HlRange {\n+                            range: piece_range + range.start(),\n+                            highlight: HlTag::EscapeSequence.into(),\n+                            binding_hash: None,\n+                        });\n                     }\n                 }\n             }"}, {"sha": "a74ca844b33f89f955e9d2e0327dfe1c9fd9b40f", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 36, "deletions": 46, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d0c2456994848479331c3434631996668039fc3a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c2456994848479331c3434631996668039fc3a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=d0c2456994848479331c3434631996668039fc3a", "patch": "@@ -1,60 +1,48 @@\n //! Syntax highlighting for format macro strings.\n use syntax::{\n     ast::{self, FormatSpecifier, HasFormatSpecifier},\n-    AstNode, AstToken, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n+    AstNode, AstToken, TextRange,\n };\n \n-use crate::{HlRange, HlTag, SymbolKind};\n+use crate::{syntax_highlighting::highlights::Highlights, HlRange, HlTag, SymbolKind};\n \n-use super::highlights::Highlights;\n+pub(super) fn highlight_format_string(\n+    stack: &mut Highlights,\n+    string: &ast::String,\n+    range: TextRange,\n+) {\n+    if is_format_string(string).is_none() {\n+        return;\n+    }\n \n-#[derive(Default)]\n-pub(super) struct FormatStringHighlighter {\n-    format_string: Option<SyntaxElement>,\n+    string.lex_format_specifier(|piece_range, kind| {\n+        if let Some(highlight) = highlight_format_specifier(kind) {\n+            stack.add(HlRange {\n+                range: piece_range + range.start(),\n+                highlight: highlight.into(),\n+                binding_hash: None,\n+            });\n+        }\n+    });\n }\n \n-impl FormatStringHighlighter {\n-    pub(super) fn check_for_format_string(&mut self, parent: &SyntaxNode) {\n-        // Check if macro takes a format string and remember it for highlighting later.\n-        // The macros that accept a format string expand to a compiler builtin macros\n-        // `format_args` and `format_args_nl`.\n-        if let Some(name) = parent\n-            .parent()\n-            .and_then(ast::MacroCall::cast)\n-            .and_then(|mc| mc.path())\n-            .and_then(|p| p.segment())\n-            .and_then(|s| s.name_ref())\n-        {\n-            match name.text().as_str() {\n-                \"format_args\" | \"format_args_nl\" => {\n-                    self.format_string = parent\n-                        .children_with_tokens()\n-                        .filter(|t| t.kind() != SyntaxKind::WHITESPACE)\n-                        .nth(1)\n-                        .filter(|e| ast::String::can_cast(e.kind()))\n-                }\n-                _ => {}\n-            }\n-        }\n+fn is_format_string(string: &ast::String) -> Option<()> {\n+    let parent = string.syntax().parent();\n+\n+    let name = parent.parent().and_then(ast::MacroCall::cast)?.path()?.segment()?.name_ref()?;\n+    if !matches!(name.text().as_str(), \"format_args\" | \"format_args_nl\") {\n+        return None;\n     }\n-    pub(super) fn highlight_format_string(\n-        &self,\n-        stack: &mut Highlights,\n-        string: &impl HasFormatSpecifier,\n-        range: TextRange,\n-    ) {\n-        if self.format_string.as_ref() == Some(&SyntaxElement::from(string.syntax().clone())) {\n-            string.lex_format_specifier(|piece_range, kind| {\n-                if let Some(highlight) = highlight_format_specifier(kind) {\n-                    stack.add(HlRange {\n-                        range: piece_range + range.start(),\n-                        highlight: highlight.into(),\n-                        binding_hash: None,\n-                    });\n-                }\n-            });\n-        }\n+\n+    let first_literal = parent\n+        .children_with_tokens()\n+        .filter_map(|it| it.as_token().cloned().and_then(ast::String::cast))\n+        .next()?;\n+    if &first_literal != string {\n+        return None;\n     }\n+\n+    Some(())\n }\n \n fn highlight_format_specifier(kind: FormatSpecifier) -> Option<HlTag> {\n@@ -70,7 +58,9 @@ fn highlight_format_specifier(kind: FormatSpecifier) -> Option<HlTag> {\n         | FormatSpecifier::Dot\n         | FormatSpecifier::Asterisk\n         | FormatSpecifier::QuestionMark => HlTag::FormatSpecifier,\n+\n         FormatSpecifier::Integer | FormatSpecifier::Zero => HlTag::NumericLiteral,\n+\n         FormatSpecifier::Identifier => HlTag::Symbol(SymbolKind::Local),\n     })\n }"}]}