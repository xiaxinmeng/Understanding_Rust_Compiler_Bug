{"sha": "d671948779fc14c195833f48b64e2c6e1a54a0bb", "node_id": "C_kwDOAAsO6NoAKGQ2NzE5NDg3NzlmYzE0YzE5NTgzM2Y0OGI2NGUyYzZlMWE1NGEwYmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-15T02:43:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-15T02:59:54Z"}, "message": "Allow eliding GATs in expr position", "tree": {"sha": "ca6a7c83af17b89888bc4f6d3bef5b6ca89b86b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca6a7c83af17b89888bc4f6d3bef5b6ca89b86b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d671948779fc14c195833f48b64e2c6e1a54a0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d671948779fc14c195833f48b64e2c6e1a54a0bb", "html_url": "https://github.com/rust-lang/rust/commit/d671948779fc14c195833f48b64e2c6e1a54a0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d671948779fc14c195833f48b64e2c6e1a54a0bb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad46af24713115e7b9b258346e66b9b2d14eacfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad46af24713115e7b9b258346e66b9b2d14eacfc", "html_url": "https://github.com/rust-lang/rust/commit/ad46af24713115e7b9b258346e66b9b2d14eacfc"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "05ff7f818c75f22549d30a228cd0431e456dc261", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d671948779fc14c195833f48b64e2c6e1a54a0bb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d671948779fc14c195833f48b64e2c6e1a54a0bb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=d671948779fc14c195833f48b64e2c6e1a54a0bb", "patch": "@@ -445,7 +445,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let named_type_param_count =\n             param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n-            gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n+            (gen_pos != GenericArgPosition::Type || infer_args) && !gen_args.has_lifetime_params();\n \n         if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n             Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);"}, {"sha": "71444d8a8af340133ebf9297763042d41280d3c1", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d671948779fc14c195833f48b64e2c6e1a54a0bb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d671948779fc14c195833f48b64e2c6e1a54a0bb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d671948779fc14c195833f48b64e2c6e1a54a0bb", "patch": "@@ -482,7 +482,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ) -> subst::GenericArg<'tcx> {\n                 let tcx = self.astconv.tcx();\n                 match param.kind {\n-                    GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+                    GenericParamDefKind::Lifetime => self\n+                        .astconv\n+                        .re_infer(Some(param), self.span)\n+                        .unwrap_or_else(|| {\n+                            debug!(?param, \"unelided lifetime in signature\");\n+\n+                            // This indicates an illegal lifetime in a non-assoc-trait position\n+                            tcx.sess.delay_span_bug(self.span, \"unelided lifetime in signature\");\n+\n+                            // Supply some dummy value. We don't have an\n+                            // `re_error`, annoyingly, so use `'static`.\n+                            tcx.lifetimes.re_static\n+                        })\n+                        .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_args && has_default {\n                             // No type parameter provided, but a default exists."}, {"sha": "482d0d5c00a6319d69615a1ec4fe74a9b0d034dd", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d671948779fc14c195833f48b64e2c6e1a54a0bb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d671948779fc14c195833f48b64e2c6e1a54a0bb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs?ref=d671948779fc14c195833f48b64e2c6e1a54a0bb", "patch": "@@ -0,0 +1,38 @@\n+#![feature(generic_associated_types)]\n+#![allow(unused)]\n+\n+pub trait Trait  {\n+    type Assoc<'a> where Self: 'a;\n+\n+    fn f(&self) -> Self::Assoc<'_>;\n+\n+    // Disallow elision in return position, for now\n+    fn g(&self) -> Self::Assoc;\n+    //~^ ERROR missing generics for associated type `Trait::Assoc`\n+}\n+\n+pub struct Struct {\n+    item: f32\n+}\n+\n+pub struct GenericStruct<'a> {\n+    ref_item: &'a f32\n+}\n+\n+impl Trait for Struct {\n+    type Assoc<'a> = GenericStruct<'a>;\n+\n+    fn f(&self) -> Self::Assoc<'_> {\n+        Self::Assoc {\n+            ref_item: &self.item\n+        }\n+    }\n+\n+    // Disallow elision in return position, for now\n+    fn g(&self) -> Self::Assoc {\n+    //~^ ERROR missing generics for associated type `Trait::Assoc`\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9263f3d67e3d2f28f2c944e6dde8938e384835b0", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d671948779fc14c195833f48b64e2c6e1a54a0bb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d671948779fc14c195833f48b64e2c6e1a54a0bb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=d671948779fc14c195833f48b64e2c6e1a54a0bb", "patch": "@@ -0,0 +1,35 @@\n+error[E0107]: missing generics for associated type `Trait::Assoc`\n+  --> $DIR/elided-in-expr-position.rs:10:26\n+   |\n+LL |     fn g(&self) -> Self::Assoc;\n+   |                          ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/elided-in-expr-position.rs:5:10\n+   |\n+LL |     type Assoc<'a> where Self: 'a;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn g(&self) -> Self::Assoc<'_>;\n+   |                          ~~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `Trait::Assoc`\n+  --> $DIR/elided-in-expr-position.rs:32:26\n+   |\n+LL |     fn g(&self) -> Self::Assoc {\n+   |                          ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/elided-in-expr-position.rs:5:10\n+   |\n+LL |     type Assoc<'a> where Self: 'a;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn g(&self) -> Self::Assoc<'_> {\n+   |                          ~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}]}