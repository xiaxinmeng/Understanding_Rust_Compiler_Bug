{"sha": "3b158b3e425b8adb42eab076acc9962bb22783ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTU4YjNlNDI1YjhhZGI0MmVhYjA3NmFjYzk5NjJiYjIyNzgzY2E=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-07-18T07:35:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-07-18T07:35:12Z"}, "message": "Silence various warnings in bootstrap build.", "tree": {"sha": "d364ec70255b4c060e80e11d20ad472efcb19d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d364ec70255b4c060e80e11d20ad472efcb19d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b158b3e425b8adb42eab076acc9962bb22783ca", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b158b3e425b8adb42eab076acc9962bb22783ca", "html_url": "https://github.com/rust-lang/rust/commit/3b158b3e425b8adb42eab076acc9962bb22783ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b158b3e425b8adb42eab076acc9962bb22783ca/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d300a64520294eac39a649c276b0b41a62a0fb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/d300a64520294eac39a649c276b0b41a62a0fb99", "html_url": "https://github.com/rust-lang/rust/commit/d300a64520294eac39a649c276b0b41a62a0fb99"}], "stats": {"total": 17, "additions": 1, "deletions": 16}, "files": [{"sha": "6a6f6ed62474e49b4181af222630643359726761", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -17,7 +17,6 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-#[allow(non_implicitly_copyable_typarams)];\n #[deny(deprecated_pattern)];\n \n extern mod extra;"}, {"sha": "413df2f3358cf0090899f189c749a8d0fdf49fd6", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -43,7 +43,6 @@ impl Clone for Ctxt {\n     }\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let ctxt = Ctxt {\n         srv: srv,\n@@ -66,7 +65,6 @@ fn fold_item(fold: &fold::Fold<Ctxt>, doc: doc::ItemDoc) -> doc::ItemDoc {\n     }\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n fn fold_mod(fold: &fold::Fold<Ctxt>, doc: doc::ModDoc) -> doc::ModDoc {\n     let is_topmod = doc.id() == ast::crate_node_id;\n "}, {"sha": "cd2ffd7d602196ebfe683a73850f0a6e587b775c", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -19,8 +19,6 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-#[allow(non_implicitly_copyable_typarams)];\n-\n extern mod extra;\n extern mod rustc;\n extern mod syntax;"}, {"sha": "5119f1e3bfc81be277a93fbc81deff277696fa7d", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -42,7 +42,6 @@ pub fn mk_pass(name: ~str, lteq: ItemLtEqOp) -> Pass {\n     }\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n fn run(\n     _srv: astsrv::Srv,\n     doc: doc::Doc,\n@@ -55,7 +54,6 @@ fn run(\n     (fold.fold_doc)(&fold, doc)\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n fn fold_mod(\n     fold: &fold::Fold<ItemLtEq>,\n     doc: doc::ModDoc"}, {"sha": "41c0dcfb6d252b0fbf1f5d907319f99a1f063767", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -44,7 +44,6 @@ impl Clone for WrappedOp {\n     }\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n fn run(\n     _srv: astsrv::Srv,\n     doc: doc::Doc,"}, {"sha": "aef201a02324b4e7cc15c7c9dbc8f5a3c70f92f2", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -20,7 +20,6 @@ use print::pprust;\n use visit;\n use syntax::parse::token::special_idents;\n \n-use std::cmp;\n use std::hashmap::HashMap;\n use std::vec;\n "}, {"sha": "97e940805bbbca17812f557b902d119d042d09a8", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -16,8 +16,6 @@ use opt_vec;\n use parse::token;\n use visit;\n \n-use std::cast::unsafe_copy;\n-use std::cast;\n use std::hashmap::HashMap;\n use std::int;\n use std::local_data;"}, {"sha": "fb5d3b5262cf461dce25fd148f96224a503a82b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b158b3e425b8adb42eab076acc9962bb22783ca/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3b158b3e425b8adb42eab076acc9962bb22783ca", "patch": "@@ -2713,7 +2713,6 @@ impl Parser {\n           token::LBRACE => {\n             self.bump();\n             let (_, _) = self.parse_pat_fields();\n-            hi = self.span.hi;\n             self.bump();\n             self.obsolete(*self.span, ObsoleteRecordPattern);\n             pat = pat_wild;\n@@ -2744,7 +2743,6 @@ impl Parser {\n                     }\n                 }\n                 if fields.len() == 1 { self.expect(&token::COMMA); }\n-                hi = self.span.hi;\n                 self.expect(&token::RPAREN);\n                 pat = pat_tup(fields);\n             }\n@@ -2760,7 +2758,6 @@ impl Parser {\n             self.bump();\n             let (before, slice, after) =\n                 self.parse_pat_vec_elements();\n-            hi = self.span.hi;\n             self.expect(&token::RBRACKET);\n             pat = ast::pat_vec(before, slice, after);\n             hi = self.last_span.hi;\n@@ -4654,7 +4651,7 @@ impl Parser {\n \n     pub fn parse_item(&self, attrs: ~[attribute]) -> Option<@ast::item> {\n         match self.parse_item_or_view_item(attrs, true) {\n-            iovi_none(attrs) =>\n+            iovi_none(_) =>\n                 None,\n             iovi_view_item(_) =>\n                 self.fatal(\"view items are not allowed here\"),\n@@ -4824,7 +4821,6 @@ impl Parser {\n         // First, parse view items.\n         let mut view_items : ~[ast::view_item] = ~[];\n         let mut items = ~[];\n-        let mut done = false;\n         // I think this code would probably read better as a single\n         // loop with a mutable three-state-variable (for extern mods,\n         // view items, and regular items) ... except that because"}]}