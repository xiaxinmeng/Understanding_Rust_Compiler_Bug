{"sha": "739d57180fa207410b8858f8cede7b8a9ea6f01e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOWQ1NzE4MGZhMjA3NDEwYjg4NThmOGNlZGU3YjhhOWVhNmYwMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-14T05:41:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-14T05:41:34Z"}, "message": "Auto merge of #36041 - ahmedcharles:try, r=nrc\n\nReplace try! with ?.", "tree": {"sha": "48bd42052665b2f0b5c7b82ffadd10d0e1844a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48bd42052665b2f0b5c7b82ffadd10d0e1844a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/739d57180fa207410b8858f8cede7b8a9ea6f01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/739d57180fa207410b8858f8cede7b8a9ea6f01e", "html_url": "https://github.com/rust-lang/rust/commit/739d57180fa207410b8858f8cede7b8a9ea6f01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/739d57180fa207410b8858f8cede7b8a9ea6f01e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1363a73ede57ae595f3a1be2bb75d308ba4f7f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6", "html_url": "https://github.com/rust-lang/rust/commit/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6"}, {"sha": "694d601dbc2df575c32a490a529656a864dc0a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/694d601dbc2df575c32a490a529656a864dc0a2e", "html_url": "https://github.com/rust-lang/rust/commit/694d601dbc2df575c32a490a529656a864dc0a2e"}], "stats": {"total": 214, "additions": 105, "deletions": 109}, "files": [{"sha": "ebca0c8ecea76ac0a127f931836065122a6db111", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -45,7 +45,7 @@ use util::{exe, mtime, libdir, add_lib_path};\n /// * The error itself\n ///\n /// This is currently used judiciously throughout the build system rather than\n-/// using a `Result` with `try!`, but this may change on day...\n+/// using a `Result` with `try!`, but this may change one day...\n macro_rules! t {\n     ($e:expr) => (match $e {\n         Ok(e) => e,"}, {"sha": "1ca550c67463c3606c8db65c78577235ca283feb", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -474,9 +474,9 @@ macro_rules! define_bignum {\n                 let sz = if self.size < 1 {1} else {self.size};\n                 let digitlen = mem::size_of::<$ty>() * 2;\n \n-                try!(write!(f, \"{:#x}\", self.base[sz-1]));\n+                write!(f, \"{:#x}\", self.base[sz-1])?;\n                 for &v in self.base[..sz-1].iter().rev() {\n-                    try!(write!(f, \"_{:01$x}\", v, digitlen));\n+                    write!(f, \"_{:01$x}\", v, digitlen)?;\n                 }\n                 ::result::Result::Ok(())\n             }"}, {"sha": "eebc8fa9e5d5dfd6aadc0cd48cca061f0e427418", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -1756,9 +1756,9 @@ impl<'a> State<'a> {\n                         self.commasep(Inconsistent, &elts[ddpos..], |s, p| s.print_pat(&p))?;\n                     }\n                 } else {\n-                    try!(self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(&p)));\n+                    self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(&p))?;\n                 }\n-                try!(self.pclose());\n+                self.pclose()?;\n             }\n             PatKind::Path(None, ref path) => {\n                 self.print_path(path, true, 0)?;"}, {"sha": "7c02de05d26d5bb351ada05a6d02dd8302c37c62", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             debug!(\"higher_ranked_match: skol_map={:?}\", skol_map);\n \n             // Equate types now that bound regions have been replaced.\n-            try!(self.equate(a_is_expected).relate(&a_match, &b_match));\n+            self.equate(a_is_expected).relate(&a_match, &b_match)?;\n \n             // Map each skolemized region to a vector of other regions that it\n             // must be equated with. (Note that this vector may include other"}, {"sha": "c290d8f893e9ed8e9c077e7fb53045f1c56bc845", "filename": "src/librustc/util/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc%2Futil%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc%2Futil%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ffs.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -68,7 +68,7 @@ pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<Li\n     let p = p.as_ref();\n     let q = q.as_ref();\n     if q.exists() {\n-        try!(fs::remove_file(&q));\n+        fs::remove_file(&q)?;\n     }\n \n     match fs::hard_link(p, q) {"}, {"sha": "660ed0ac7b8439f97bf1deaa625931056217f045", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {\n-    let base = try!(opts(Arch::Arm64));\n+    let base = opts(Arch::Arm64)?;\n     Ok(Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "17492b8bdcb64bf6537b9e71964872d8639ca41a", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -68,7 +68,7 @@ fn build_pre_link_args(arch: Arch) -> Result<Vec<String>, String> {\n \n     let arch_name = arch.to_string();\n \n-    let sdk_root = try!(get_sdk_root(sdk_name));\n+    let sdk_root = get_sdk_root(sdk_name)?;\n \n     Ok(vec![\"-arch\".to_string(), arch_name.to_string(),\n          \"-Wl,-syslibroot\".to_string(), sdk_root])\n@@ -85,7 +85,7 @@ fn target_cpu(arch: Arch) -> String {\n }\n \n pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n-    let pre_link_args = try!(build_pre_link_args(arch));\n+    let pre_link_args = build_pre_link_args(arch)?;\n     Ok(TargetOptions {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,"}, {"sha": "71533a09b16724cbd839801c64987eb39303c5df", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {\n-    let base = try!(opts(Arch::Armv7));\n+    let base = opts(Arch::Armv7)?;\n     Ok(Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "f24b9969910ef0e3f4f864c054fa2ae99c09930c", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {\n-    let base = try!(opts(Arch::Armv7s));\n+    let base = opts(Arch::Armv7s)?;\n     Ok(Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "94146fe9d9885266e15a000dc356f2f9aeb6ece7", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {\n-    let base = try!(opts(Arch::I386));\n+    let base = opts(Arch::I386)?;\n     Ok(Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "9b88cde5989370da54e65423f397cd295831ac2c", "filename": "src/librustc_back/target/i586_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi586_pc_windows_msvc.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -11,7 +11,7 @@\n use target::TargetResult;\n \n pub fn target() -> TargetResult {\n-    let mut base = try!(super::i686_pc_windows_msvc::target());\n+    let mut base = super::i686_pc_windows_msvc::target()?;\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-pc-windows-msvc\".to_string();\n     Ok(base)"}, {"sha": "40fb4a67acdf13506ca33077385b6a03432cf67e", "filename": "src/librustc_back/target/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -11,7 +11,7 @@\n use target::TargetResult;\n \n pub fn target() -> TargetResult {\n-    let mut base = try!(super::i686_unknown_linux_gnu::target());\n+    let mut base = super::i686_unknown_linux_gnu::target()?;\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n     Ok(base)"}, {"sha": "756586602b45a6d7f9bcbd6cec0809b72067e13e", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -77,12 +77,12 @@ macro_rules! supported_targets {\n             match target {\n                 $(\n                     $triple => {\n-                        let mut t = try!($module::target());\n+                        let mut t = $module::target()?;\n                         t.options.is_builtin = true;\n \n                         // round-trip through the JSON parser to ensure at\n                         // run-time that the parser works correctly\n-                        t = try!(Target::from_json(t.to_json()));\n+                        t = Target::from_json(t.to_json())?;\n                         debug!(\"Got builtin target: {:?}\", t);\n                         Ok(t)\n                     },\n@@ -438,12 +438,12 @@ impl Target {\n         };\n \n         let mut base = Target {\n-            llvm_target: try!(get_req_field(\"llvm-target\")),\n-            target_endian: try!(get_req_field(\"target-endian\")),\n-            target_pointer_width: try!(get_req_field(\"target-pointer-width\")),\n-            data_layout: try!(get_req_field(\"data-layout\")),\n-            arch: try!(get_req_field(\"arch\")),\n-            target_os: try!(get_req_field(\"os\")),\n+            llvm_target: get_req_field(\"llvm-target\")?,\n+            target_endian: get_req_field(\"target-endian\")?,\n+            target_pointer_width: get_req_field(\"target-pointer-width\")?,\n+            data_layout: get_req_field(\"data-layout\")?,\n+            arch: get_req_field(\"arch\")?,\n+            target_os: get_req_field(\"os\")?,\n             target_env: get_opt_field(\"env\", \"\"),\n             target_vendor: get_opt_field(\"vendor\", \"unknown\"),\n             options: Default::default(),"}, {"sha": "3b8b636b6dc66ef1e0c88de4617d4df3227f28d6", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -12,7 +12,7 @@ use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {\n-    let base = try!(opts(Arch::X86_64));\n+    let base = opts(Arch::X86_64)?;\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "4ced9d87f0a5ab8f8a0c5a204b38af58af513c04", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -278,9 +278,9 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n     let pat = match expr.node {\n         hir::ExprTup(ref exprs) =>\n-            PatKind::Tuple(try!(exprs.iter()\n-                                     .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n-                                     .collect()), None),\n+            PatKind::Tuple(exprs.iter()\n+                                .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n+                                .collect::<Result<_, _>>()?, None),\n \n         hir::ExprCall(ref callee, ref args) => {\n             let def = tcx.expect_def(callee.id);\n@@ -297,34 +297,31 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 })),\n                 _ => bug!()\n             };\n-            let pats = try!(args.iter()\n-                                .map(|expr| const_expr_to_pat(tcx, &**expr,\n-                                                              pat_id, span))\n-                                .collect());\n+            let pats = args.iter()\n+                           .map(|expr| const_expr_to_pat(tcx, &**expr, pat_id, span))\n+                           .collect::<Result<_, _>>()?;\n             PatKind::TupleStruct(path, pats, None)\n         }\n \n         hir::ExprStruct(ref path, ref fields, None) => {\n             let field_pats =\n-                try!(fields.iter()\n-                           .map(|field| Ok(codemap::Spanned {\n-                               span: syntax_pos::DUMMY_SP,\n-                               node: hir::FieldPat {\n-                                   name: field.name.node,\n-                                   pat: try!(const_expr_to_pat(tcx, &field.expr,\n-                                                               pat_id, span)),\n-                                   is_shorthand: false,\n-                               },\n-                           }))\n-                           .collect());\n+                fields.iter()\n+                      .map(|field| Ok(codemap::Spanned {\n+                          span: syntax_pos::DUMMY_SP,\n+                          node: hir::FieldPat {\n+                              name: field.name.node,\n+                              pat: const_expr_to_pat(tcx, &field.expr, pat_id, span)?,\n+                              is_shorthand: false,\n+                          },\n+                      }))\n+                      .collect::<Result<_, _>>()?;\n             PatKind::Struct(path.clone(), field_pats, false)\n         }\n \n         hir::ExprVec(ref exprs) => {\n-            let pats = try!(exprs.iter()\n-                                 .map(|expr| const_expr_to_pat(tcx, &expr,\n-                                                               pat_id, span))\n-                                 .collect());\n+            let pats = exprs.iter()\n+                            .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n+                            .collect::<Result<_, _>>()?;\n             PatKind::Vec(pats, None, hir::HirVec::new())\n         }\n "}, {"sha": "1bdc9ef30881fe44390e2c7ca615b11864419203", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -882,45 +882,45 @@ impl Destination {\n         match style {\n             Style::FileNameStyle | Style::LineAndColumn => {}\n             Style::LineNumber => {\n-                try!(self.start_attr(term::Attr::Bold));\n+                self.start_attr(term::Attr::Bold)?;\n                 if cfg!(windows) {\n-                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN)));\n+                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN))?;\n                 } else {\n-                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE)));\n+                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE))?;\n                 }\n             }\n             Style::ErrorCode => {\n-                try!(self.start_attr(term::Attr::Bold));\n-                try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_MAGENTA)));\n+                self.start_attr(term::Attr::Bold)?;\n+                self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_MAGENTA))?;\n             }\n             Style::Quotation => {}\n             Style::OldSchoolNote => {\n-                try!(self.start_attr(term::Attr::Bold));\n-                try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_GREEN)));\n+                self.start_attr(term::Attr::Bold)?;\n+                self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_GREEN))?;\n             }\n             Style::OldSchoolNoteText | Style::HeaderMsg => {\n-                try!(self.start_attr(term::Attr::Bold));\n+                self.start_attr(term::Attr::Bold)?;\n                 if cfg!(windows) {\n-                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_WHITE)));\n+                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_WHITE))?;\n                 }\n             }\n             Style::UnderlinePrimary | Style::LabelPrimary => {\n-                try!(self.start_attr(term::Attr::Bold));\n-                try!(self.start_attr(term::Attr::ForegroundColor(lvl.color())));\n+                self.start_attr(term::Attr::Bold)?;\n+                self.start_attr(term::Attr::ForegroundColor(lvl.color()))?;\n             }\n             Style::UnderlineSecondary |\n             Style::LabelSecondary => {\n-                try!(self.start_attr(term::Attr::Bold));\n+                self.start_attr(term::Attr::Bold)?;\n                 if cfg!(windows) {\n-                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN)));\n+                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN))?;\n                 } else {\n-                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE)));\n+                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE))?;\n                 }\n             }\n             Style::NoStyle => {}\n             Style::Level(l) => {\n-                try!(self.start_attr(term::Attr::Bold));\n-                try!(self.start_attr(term::Attr::ForegroundColor(l.color())));\n+                self.start_attr(term::Attr::Bold)?;\n+                self.start_attr(term::Attr::ForegroundColor(l.color()))?;\n             }\n         }\n         Ok(())\n@@ -960,4 +960,4 @@ impl Write for Destination {\n             Raw(ref mut w) => w.flush(),\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "bafaafd4afa0e7c8ab34bfe165316701f143a56d", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -194,15 +194,15 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n \n         // Load up the hashes for the def-ids from this crate.\n         let mut decoder = Decoder::new(data, 0);\n-        let svh_in_hashes_file = try!(Svh::decode(&mut decoder));\n+        let svh_in_hashes_file = Svh::decode(&mut decoder)?;\n \n         if svh_in_hashes_file != expected_svh {\n             // We should not be able to get here. If we do, then\n             // `fs::find_metadata_hashes_for()` has messed up.\n             bug!(\"mismatch between SVH in crate and SVH in incr. comp. hashes\")\n         }\n \n-        let serialized_hashes = try!(SerializedMetadataHashes::decode(&mut decoder));\n+        let serialized_hashes = SerializedMetadataHashes::decode(&mut decoder)?;\n         for serialized_hash in serialized_hashes.hashes {\n             // the hashes are stored with just a def-index, which is\n             // always relative to the old crate; convert that to use"}, {"sha": "6e6464e49683a9d108c5d6bd70672b014344975b", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -125,11 +125,11 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     // Decode the list of work_products\n     let mut work_product_decoder = Decoder::new(work_products_data, 0);\n-    let work_products = try!(<Vec<SerializedWorkProduct>>::decode(&mut work_product_decoder));\n+    let work_products = <Vec<SerializedWorkProduct>>::decode(&mut work_product_decoder)?;\n \n     // Deserialize the directory and dep-graph.\n     let mut dep_graph_decoder = Decoder::new(dep_graph_data, 0);\n-    let prev_commandline_args_hash = try!(u64::decode(&mut dep_graph_decoder));\n+    let prev_commandline_args_hash = u64::decode(&mut dep_graph_decoder)?;\n \n     if prev_commandline_args_hash != tcx.sess.opts.dep_tracking_hash() {\n         // We can't reuse the cache, purge it.\n@@ -142,8 +142,8 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Ok(());\n     }\n \n-    let directory = try!(DefIdDirectory::decode(&mut dep_graph_decoder));\n-    let serialized_dep_graph = try!(SerializedDepGraph::decode(&mut dep_graph_decoder));\n+    let directory = DefIdDirectory::decode(&mut dep_graph_decoder)?;\n+    let serialized_dep_graph = SerializedDepGraph::decode(&mut dep_graph_decoder)?;\n \n     // Retrace the paths in the directory to find their current location (if any).\n     let retraced = directory.retrace(tcx);"}, {"sha": "41212d8e138da66e52396cc1e889f93ba493e080", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -110,7 +110,7 @@ pub fn encode_dep_graph(preds: &Predecessors,\n                         -> io::Result<()> {\n     // First encode the commandline arguments hash\n     let tcx = builder.tcx();\n-    try!(tcx.sess.opts.dep_tracking_hash().encode(encoder));\n+    tcx.sess.opts.dep_tracking_hash().encode(encoder)?;\n \n     // Create a flat list of (Input, WorkProduct) edges for\n     // serialization.\n@@ -149,8 +149,8 @@ pub fn encode_dep_graph(preds: &Predecessors,\n     debug!(\"graph = {:#?}\", graph);\n \n     // Encode the directory and then the graph data.\n-    try!(builder.directory().encode(encoder));\n-    try!(graph.encode(encoder));\n+    builder.directory().encode(encoder)?;\n+    graph.encode(encoder)?;\n \n     Ok(())\n }\n@@ -222,8 +222,8 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n     }\n \n     // Encode everything.\n-    try!(svh.encode(encoder));\n-    try!(serialized_hashes.encode(encoder));\n+    svh.encode(encoder)?;\n+    serialized_hashes.encode(encoder)?;\n \n     Ok(())\n }"}, {"sha": "a4f8ee47799058a87a08bb06dfcca9ee147338e0", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -809,7 +809,7 @@ fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Pat\n             None => Err(format!(\"failed to read rlib metadata: '{}'\",\n                                 filename.display())),\n             Some(blob) => {\n-                try!(verify_decompressed_encoding_version(&blob, filename));\n+                verify_decompressed_encoding_version(&blob, filename)?;\n                 Ok(blob)\n             }\n         };\n@@ -858,7 +858,7 @@ fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Pat\n                 match flate::inflate_bytes(bytes) {\n                     Ok(inflated) => {\n                         let blob = MetadataVec(inflated);\n-                        try!(verify_decompressed_encoding_version(&blob, filename));\n+                        verify_decompressed_encoding_version(&blob, filename)?;\n                         return Ok(blob);\n                     }\n                     Err(_) => {}"}, {"sha": "01e2c6308ba01b9ef9d00a81e6da5519fb08a64f", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -77,12 +77,12 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             node_id, promotion_id, pass_name, disambiguator);\n     file_path.push(&file_name);\n     let _ = fs::File::create(&file_path).and_then(|mut file| {\n-        try!(writeln!(file, \"// MIR for `{}`\", node_path));\n-        try!(writeln!(file, \"// node_id = {}\", node_id));\n-        try!(writeln!(file, \"// pass_name = {}\", pass_name));\n-        try!(writeln!(file, \"// disambiguator = {}\", disambiguator));\n-        try!(writeln!(file, \"\"));\n-        try!(write_mir_fn(tcx, src, mir, &mut file, auxiliary));\n+        writeln!(file, \"// MIR for `{}`\", node_path)?;\n+        writeln!(file, \"// node_id = {}\", node_id)?;\n+        writeln!(file, \"// pass_name = {}\", pass_name)?;\n+        writeln!(file, \"// disambiguator = {}\", disambiguator)?;\n+        writeln!(file, \"\")?;\n+        write_mir_fn(tcx, src, mir, &mut file, auxiliary)?;\n         Ok(())\n     });\n }"}, {"sha": "6ccc0be41bc0f7f3c0f23df423adafed0312efcb", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -475,15 +475,14 @@ impl<'a> Encoder<'a> {\n }\n \n macro_rules! emit_enquoted_if_mapkey {\n-    ($enc:ident,$e:expr) => {\n+    ($enc:ident,$e:expr) => ({\n         if $enc.is_emitting_map_key {\n-            try!(write!($enc.writer, \"\\\"{}\\\"\", $e));\n-            Ok(())\n+            write!($enc.writer, \"\\\"{}\\\"\", $e)?;\n         } else {\n-            try!(write!($enc.writer, \"{}\", $e));\n-            Ok(())\n+            write!($enc.writer, \"{}\", $e)?;\n         }\n-    }\n+        Ok(())\n+    })\n }\n \n impl<'a> ::Encoder for Encoder<'a> {"}, {"sha": "8e271597dfcb6dd31c7b341c4632cf19d0bbbc7d", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -511,10 +511,10 @@ macro_rules! tuple {\n                 let len: usize = count_idents!($($name,)*);\n                 d.read_tuple(len, |d| {\n                     let mut i = 0;\n-                    let ret = ($(try!(d.read_tuple_arg({ i+=1; i-1 },\n-                                                       |d| -> Result<$name,D::Error> {\n+                    let ret = ($(d.read_tuple_arg({ i+=1; i-1 },\n+                                                  |d| -> Result<$name,D::Error> {\n                         Decodable::decode(d)\n-                    })),)*);\n+                    })?,)*);\n                     Ok(ret)\n                 })\n             }\n@@ -527,7 +527,7 @@ macro_rules! tuple {\n                 $(let $name = $name; n += 1;)*\n                 s.emit_tuple(n, |s| {\n                     let mut i = 0;\n-                    $(try!(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s)));)*\n+                    $(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s))?;)*\n                     Ok(())\n                 })\n             }"}, {"sha": "7389280b853dbfb87905dea8406c5ead548c3c8d", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -150,7 +150,7 @@ impl<T> Packet<T> {\n                     let timed_out = !wait_token.wait_max_until(deadline);\n                     // Try to reset the state\n                     if timed_out {\n-                        try!(self.abort_selection().map_err(Upgraded));\n+                        self.abort_selection().map_err(Upgraded)?;\n                     }\n                 } else {\n                     wait_token.wait();"}, {"sha": "61c8316467d9ab345fbefe290f1bff45a5390950", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -187,8 +187,7 @@ impl<T> Packet<T> {\n             if let Some(deadline) = deadline {\n                 let timed_out = !wait_token.wait_max_until(deadline);\n                 if timed_out {\n-                    try!(self.abort_selection(/* was_upgrade = */ false)\n-                             .map_err(Upgraded));\n+                    self.abort_selection(/* was_upgrade = */ false).map_err(Upgraded)?;\n                 }\n             } else {\n                 wait_token.wait();"}, {"sha": "a8540fed9286f1aaae8f9843c25ec5f293d301e7", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -153,11 +153,11 @@ pub fn demangle(writer: &mut Write, s: &str) -> io::Result<()> {\n                     macro_rules! demangle {\n                         ($($pat:expr => $demangled:expr),*) => ({\n                             $(if rest.starts_with($pat) {\n-                                try!(writer.write_all($demangled));\n+                                writer.write_all($demangled)?;\n                                 rest = &rest[$pat.len()..];\n                               } else)*\n                             {\n-                                try!(writer.write_all(rest.as_bytes()));\n+                                writer.write_all(rest.as_bytes())?;\n                                 break;\n                             }\n "}, {"sha": "bfb85dd479d56e0978f86621c824f644a17e74dc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -2113,23 +2113,23 @@ actual:\\n\\\n     }\n \n     fn aggressive_rm_rf(&self, path: &Path) -> io::Result<()> {\n-        for e in try!(path.read_dir()) {\n-            let entry = try!(e);\n+        for e in path.read_dir()? {\n+            let entry = e?;\n             let path = entry.path();\n-            if try!(entry.file_type()).is_dir() {\n-                try!(self.aggressive_rm_rf(&path));\n+            if entry.file_type()?.is_dir() {\n+                self.aggressive_rm_rf(&path)?;\n             } else {\n                 // Remove readonly files as well on windows (by default we can't)\n-                try!(fs::remove_file(&path).or_else(|e| {\n+                fs::remove_file(&path).or_else(|e| {\n                     if cfg!(windows) && e.kind() == io::ErrorKind::PermissionDenied {\n-                        let mut meta = try!(entry.metadata()).permissions();\n+                        let mut meta = entry.metadata()?.permissions();\n                         meta.set_readonly(false);\n-                        try!(fs::set_permissions(&path, meta));\n+                        fs::set_permissions(&path, meta)?;\n                         fs::remove_file(&path)\n                     } else {\n                         Err(e)\n                     }\n-                }))\n+                })?;\n             }\n         }\n         fs::remove_dir(path)"}, {"sha": "3e2bc9032a1ccae31c4ca3e8a60847ce2aec90d3", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739d57180fa207410b8858f8cede7b8a9ea6f01e/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=739d57180fa207410b8858f8cede7b8a9ea6f01e", "patch": "@@ -24,6 +24,8 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n+#![feature(question_mark)]\n+\n extern crate url;\n \n use std::env;\n@@ -243,15 +245,14 @@ fn load_file(cache: &mut Cache,\n             None\n         }\n         Entry::Vacant(entry) => {\n-            let mut fp = try!(File::open(file.clone()).map_err(|err| {\n+            let mut fp = File::open(file.clone()).map_err(|err| {\n                 if let FromRedirect(true) = redirect {\n                     LoadError::BrokenRedirect(file.clone(), err)\n                 } else {\n                     LoadError::IOError(err)\n                 }\n-            }));\n-            try!(fp.read_to_string(&mut contents)\n-                   .map_err(|err| LoadError::IOError(err)));\n+            })?;\n+            fp.read_to_string(&mut contents).map_err(|err| LoadError::IOError(err))?;\n \n             let maybe = maybe_redirect(&contents);\n             if maybe.is_some() {"}]}