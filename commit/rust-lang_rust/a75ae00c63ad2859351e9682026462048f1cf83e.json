{"sha": "a75ae00c63ad2859351e9682026462048f1cf83e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NWFlMDBjNjNhZDI4NTkzNTFlOTY4MjAyNjQ2MjA0OGYxY2Y4M2U=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-01-29T11:40:22Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-01-29T11:42:56Z"}, "message": "SGX target: improve panic & exit handling", "tree": {"sha": "db3326216b594c6363993c762896cc938c6e4119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db3326216b594c6363993c762896cc938c6e4119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a75ae00c63ad2859351e9682026462048f1cf83e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a75ae00c63ad2859351e9682026462048f1cf83e", "html_url": "https://github.com/rust-lang/rust/commit/a75ae00c63ad2859351e9682026462048f1cf83e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a75ae00c63ad2859351e9682026462048f1cf83e/comments", "author": null, "committer": null, "parents": [{"sha": "5f60208ba11171c249284f8fe0ea6b3e9b63383c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f60208ba11171c249284f8fe0ea6b3e9b63383c", "html_url": "https://github.com/rust-lang/rust/commit/5f60208ba11171c249284f8fe0ea6b3e9b63383c"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "9b46c2180d9a25a3a05853b6872b85272ff03f6d", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=a75ae00c63ad2859351e9682026462048f1cf83e", "patch": "@@ -66,7 +66,7 @@ IMAGE_BASE:\n     globvar EH_FRM_HDR_SIZE 8\n \n .Lreentry_panic_msg:\n-    .asciz \"Re-entered panicked enclave!\"\n+    .asciz \"Re-entered aborted enclave!\"\n .Lreentry_panic_msg_end:\n \n .Lusercall_panic_msg:\n@@ -80,7 +80,7 @@ IMAGE_BASE:\n     .org .+48 /*  reserved bits */\n \n .data\n-.Lpanicked:\n+.Laborted:\n     .byte 0\n \n /*  TCS local storage section */\n@@ -134,6 +134,9 @@ sgx_entry:\n     jz .Lskip_debug_init\n     mov %r10,%gs:tcsls_debug_panic_buf_ptr\n .Lskip_debug_init:\n+/*  check for abort */\n+    bt $0,.Laborted(%rip)\n+    jc .Lreentry_panic\n /*  check if returning from usercall */\n     mov %gs:tcsls_last_rsp,%r11\n     test %r11,%r11\n@@ -164,9 +167,6 @@ sgx_entry:\n     mov %r14,%r8\n     mov %r15,%r9\n .Lskip_init:\n-/*  check for panic */\n-    bt $0,.Lpanicked(%rip)\n-    jc .Lreentry_panic\n /*  call into main entry point */\n     load_tcsls_flag_secondary_bool cx /* RCX = entry() argument: secondary: bool */\n     call entry /* RDI, RSI, RDX, R8, R9 passed in from userspace */\n@@ -237,18 +237,18 @@ sgx_entry:\n     stmxcsr (%rsp)\n .endm\n \n-.global panic_exit\n-panic_exit:\n+.global usercall_exit\n+usercall_exit:\n /* save registers in DEBUG mode, so that debugger can reconstruct the stack */\n     testb $0xff,DEBUG(%rip)\n     jz .Lskip_save_registers\n     push_callee_saved_registers\n     movq %rsp,%gs:tcsls_panic_last_rsp\n .Lskip_save_registers:\n-/* set panicked bit */\n-    movb $1,.Lpanicked(%rip)\n+/* set aborted bit */\n+    movb $1,.Laborted(%rip)\n /* call usercall exit(true) */\n-    mov $1,%esi   /*  RSI = usercall() argument: panic = true */\n+    /* NOP: mov %rsi,%rsi */ /*  RSI = usercall() argument: panic */\n     xor %rdx,%rdx /*  RDX cleared */\n     movq $usercall_nr_exit,%rdi /*  RDI = usercall exit */\n     jmp .Lexit"}, {"sha": "d23fa9a9ec6f9783c4c653101d8a22b1bc49f271", "filename": "src/libstd/sys/sgx/abi/panic.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs?ref=a75ae00c63ad2859351e9682026462048f1cf83e", "patch": "@@ -1,12 +1,18 @@\n+use super::usercalls::alloc::UserRef;\n+use cmp;\n use io::{self, Write};\n-use slice::from_raw_parts_mut;\n+use mem;\n \n extern \"C\" {\n     fn take_debug_panic_buf_ptr() -> *mut u8;\n     static DEBUG: u8;\n }\n \n-pub(crate) struct SgxPanicOutput(Option<&'static mut [u8]>);\n+pub(crate) struct SgxPanicOutput(Option<&'static mut UserRef<[u8]>>);\n+\n+fn empty_user_slice() -> &'static mut UserRef<[u8]> {\n+    unsafe { UserRef::from_raw_parts_mut(1 as *mut u8, 0) }\n+}\n \n impl SgxPanicOutput {\n     pub(crate) fn new() -> Option<Self> {\n@@ -17,32 +23,36 @@ impl SgxPanicOutput {\n         }\n     }\n \n-    fn init(&mut self) -> &mut &'static mut [u8] {\n+    fn init(&mut self) -> &mut &'static mut UserRef<[u8]> {\n         self.0.get_or_insert_with(|| unsafe {\n             let ptr = take_debug_panic_buf_ptr();\n             if ptr.is_null() {\n-                &mut []\n+                empty_user_slice()\n             } else {\n-                from_raw_parts_mut(ptr, 1024)\n+                UserRef::from_raw_parts_mut(ptr, 1024)\n             }\n         })\n     }\n }\n \n impl Write for SgxPanicOutput {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        self.init().write(buf)\n+    fn write(&mut self, src: &[u8]) -> io::Result<usize> {\n+        let dst = mem::replace(self.init(), empty_user_slice());\n+        let written = cmp::min(src.len(), dst.len());\n+        dst[..written].copy_from_enclave(&src[..written]);\n+        self.0 = Some(&mut dst[written..]);\n+        Ok(written)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n-        self.init().flush()\n+        Ok(())\n     }\n }\n \n #[no_mangle]\n pub extern \"C\" fn panic_msg(msg: &str) -> ! {\n     let _ = SgxPanicOutput::new().map(|mut out| out.write(msg.as_bytes()));\n-    unsafe { panic_exit(); }\n+    unsafe { usercall_exit(true); }\n }\n \n-extern \"C\" { pub fn panic_exit() -> !; }\n+extern \"C\" { pub fn usercall_exit(panic: bool) -> !; }"}, {"sha": "4e889c172ef38109fd9b2e2991b89007511bfa85", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=a75ae00c63ad2859351e9682026462048f1cf83e", "patch": "@@ -119,7 +119,7 @@ pub unsafe fn launch_thread() -> IoResult<()> {\n /// Usercall `exit`. See the ABI documentation for more information.\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn exit(panic: bool) -> ! {\n-    unsafe { raw::exit(panic) }\n+    unsafe { super::panic::usercall_exit(panic) }\n }\n \n /// Usercall `wait`. See the ABI documentation for more information."}, {"sha": "f2593c35bed14c6c79103d2716e6b0a098e9627f", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75ae00c63ad2859351e9682026462048f1cf83e/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=a75ae00c63ad2859351e9682026462048f1cf83e", "patch": "@@ -125,7 +125,7 @@ pub unsafe fn strlen(mut s: *const c_char) -> usize {\n }\n \n pub unsafe fn abort_internal() -> ! {\n-    abi::panic::panic_exit()\n+    abi::panic::usercall_exit(true)\n }\n \n pub fn hashmap_random_keys() -> (u64, u64) {"}]}