{"sha": "b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYmY0MWIyYmFjNDhlZGQ1M2UzMDU5YWRmYmE0YTEyYjNjOTZhYTA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-27T11:45:41Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-27T11:45:41Z"}, "message": "Merge #1334\n\n1334: check for cancellation during macro expansion r=matklad a=matklad\n\ncloses #1331\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "35b1737a82c1ae207fa9288341c82fb0e8a5cfd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b1737a82c1ae207fa9288341c82fb0e8a5cfd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "html_url": "https://github.com/rust-lang/rust/commit/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0d1c6076073c73f57340e256dc25da9d37311ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1c6076073c73f57340e256dc25da9d37311ef0", "html_url": "https://github.com/rust-lang/rust/commit/0d1c6076073c73f57340e256dc25da9d37311ef0"}, {"sha": "a2845bb1f59e5f3d9f41012ace70037b783468ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2845bb1f59e5f3d9f41012ace70037b783468ce", "html_url": "https://github.com/rust-lang/rust/commit/a2845bb1f59e5f3d9f41012ace70037b783468ce"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "5c3799e95b7dbc693827d75b5629bcc4189ca53c", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "patch": "@@ -61,6 +61,7 @@ impl HirFileId {\n         db: &impl DefDatabase,\n         file_id: HirFileId,\n     ) -> Option<TreeArc<SyntaxNode>> {\n+        db.check_canceled();\n         let _p = profile(\"parse_or_expand_query\");\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => Some(db.parse(file_id).syntax().to_owned()),"}, {"sha": "0e64abdbd49835656fd6db596dd6475a28da5f9b", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "patch": "@@ -156,6 +156,10 @@ impl RootDatabase {\n     pub(crate) fn apply_change(&mut self, change: AnalysisChange) {\n         let _p = profile(\"RootDatabase::apply_change\");\n         log::info!(\"apply_change {:?}\", change);\n+        {\n+            let _p = profile(\"RootDatabase::apply_change/cancellation\");\n+            self.salsa_runtime().next_revision();\n+        }\n         if !change.new_roots.is_empty() {\n             let mut local_roots = Vec::clone(&self.local_roots());\n             for (root_id, is_local) in change.new_roots {"}, {"sha": "f61048aaf09f12f62f50c26b570ba589c2a45b43", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "patch": "@@ -6,17 +6,19 @@ use std::{\n };\n \n use lsp_types::{\n-    CodeActionContext, DocumentFormattingParams, FormattingOptions, Position, Range,\n+    CodeActionContext, DocumentFormattingParams, FormattingOptions, Position, Range, DidOpenTextDocumentParams, TextDocumentItem, TextDocumentPositionParams\n };\n use ra_lsp_server::req::{\n     CodeActionParams, CodeActionRequest, Formatting, Runnables, RunnablesParams, CompletionParams, Completion,\n+    DidOpenTextDocument, OnEnter,\n };\n use serde_json::json;\n use tempfile::TempDir;\n \n use crate::support::{project, Project};\n \n const LOG: &'static str = \"\";\n+const PROFILE: &'static str = \"*@3>100\";\n \n #[test]\n fn completes_items_from_standard_library() {\n@@ -341,3 +343,68 @@ fn main() {{}}\n         json!([]),\n     );\n }\n+\n+#[test]\n+fn diagnostics_dont_block_typing() {\n+    let librs: String = (0..10).map(|i| format!(\"mod m{};\", i)).collect();\n+    let libs: String = (0..10).map(|i| format!(\"//- src/m{}.rs\\nfn foo() {{}}\\n\\n\", i)).collect();\n+    let server = project(&format!(\n+        r#\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+{}\n+\n+{}\n+\n+fn main() {{}}\n+\"#,\n+        librs, libs\n+    ));\n+    server.wait_until_workspace_is_loaded();\n+    for i in 0..10 {\n+        server.notification::<DidOpenTextDocument>(DidOpenTextDocumentParams {\n+            text_document: TextDocumentItem {\n+                uri: server.doc_id(&format!(\"src/m{}.rs\", i)).uri,\n+                language_id: \"rust\".to_string(),\n+                version: 0,\n+                text: \"/// Docs\\nfn foo() {}\".to_string(),\n+            },\n+        });\n+    }\n+    let start = std::time::Instant::now();\n+    server.request::<OnEnter>(\n+        TextDocumentPositionParams {\n+            text_document: server.doc_id(\"src/m0.rs\"),\n+            position: Position { line: 0, character: 5 },\n+        },\n+        json!({\n+          \"cursorPosition\": {\n+            \"position\": { \"character\": 4, \"line\": 1 },\n+            \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\" }\n+          },\n+          \"label\": \"on enter\",\n+          \"workspaceEdit\": {\n+            \"documentChanges\": [\n+              {\n+                \"edits\": [\n+                  {\n+                    \"newText\": \"\\n/// \",\n+                    \"range\": {\n+                      \"end\": { \"character\": 5, \"line\": 0 },\n+                      \"start\": { \"character\": 5, \"line\": 0 }\n+                    }\n+                  }\n+                ],\n+                \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\", \"version\": null }\n+              }\n+            ]\n+          }\n+        }),\n+    );\n+    let elapsed = start.elapsed();\n+    assert!(elapsed.as_millis() < 2000, \"typing enter took {:?}\", elapsed);\n+}"}, {"sha": "729067395fc57c27a20d64f594a813216a805c27", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf41b2bac48edd53e3059adfba4a12b3c96aa0/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=b2bf41b2bac48edd53e3059adfba4a12b3c96aa0", "patch": "@@ -52,6 +52,11 @@ impl<'a> Project<'a> {\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n             let _ = Logger::with_env_or_str(crate::LOG).start().unwrap();\n+            ra_prof::set_filter(if crate::PROFILE.is_empty() {\n+                ra_prof::Filter::disabled()\n+            } else {\n+                ra_prof::Filter::from_spec(&crate::PROFILE)\n+            });\n         });\n \n         let mut paths = vec![];\n@@ -121,6 +126,15 @@ impl Server {\n         TextDocumentIdentifier { uri: Url::from_file_path(path).unwrap() }\n     }\n \n+    pub fn notification<N>(&self, params: N::Params)\n+    where\n+        N: Notification,\n+        N::Params: Serialize,\n+    {\n+        let r = RawNotification::new::<N>(&params);\n+        self.send_notification(r)\n+    }\n+\n     pub fn request<R>(&self, params: R::Params, expected_resp: Value)\n     where\n         R: Request,"}]}