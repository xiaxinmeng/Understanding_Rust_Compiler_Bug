{"sha": "ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNWRjNTRjM2YwNDQ0ZmQzZjIwMTkxZmExYjFkOTQzNzJjNzRjNjU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-11T12:30:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T21:57:13Z"}, "message": "Add functionality for running external programs to the std lib\n\nSee lib/run_program.rs.", "tree": {"sha": "0a80b98563553f56962cc956e94210462a9d66e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a80b98563553f56962cc956e94210462a9d66e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "html_url": "https://github.com/rust-lang/rust/commit/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441697ab359ae2a17c531e5b8e26f66ffcf72992", "url": "https://api.github.com/repos/rust-lang/rust/commits/441697ab359ae2a17c531e5b8e26f66ffcf72992", "html_url": "https://github.com/rust-lang/rust/commit/441697ab359ae2a17c531e5b8e26f66ffcf72992"}], "stats": {"total": 289, "additions": 280, "deletions": 9}, "files": [{"sha": "242738353e80d23641c5e74a0a950570fc1cdf02", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -255,6 +255,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/rust.cpp \\\n               rt/rust_builtin.cpp \\\n+              rt/rust_run_program.cpp \\\n               rt/rust_crate.cpp \\\n               rt/rust_crate_cache.cpp \\\n               rt/rust_crate_reader.cpp \\"}, {"sha": "7135c2bc857489853b30ed7f96e8b17ada9ef846", "filename": "src/lib/io.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -17,6 +17,8 @@ type reader =\n           impure fn read_bytes(uint len) -> vec[u8];\n           impure fn read_char() -> int;\n           impure fn unread_char(int i);\n+          impure fn eof() -> bool;\n+          impure fn read_line() -> str;\n           impure fn read_c_str() -> str;\n           impure fn read_le_uint(uint size) -> uint;\n           impure fn read_le_int(uint size) -> int;\n@@ -31,7 +33,7 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n     impure fn read_bytes(uint len) -> vec[u8] {\n         auto buf = _vec.alloc[u8](len);\n         auto read = os.libc.fread(_vec.buf[u8](buf), 1u, len, f);\n-        check(read == len);\n+        _vec.len_set[u8](buf, read);\n         ret buf;\n     }\n     impure fn read_char() -> int {\n@@ -40,6 +42,21 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n     impure fn unread_char(int ch) {\n         os.libc.ungetc(ch, f);\n     }\n+    impure fn eof() -> bool {\n+      auto ch = os.libc.fgetc(f);\n+      if (ch == -1) {ret true;}\n+      os.libc.ungetc(ch, f);\n+      ret false;\n+    }\n+    impure fn read_line() -> str {\n+      auto buf = \"\";\n+      while (true) {\n+        auto ch = os.libc.fgetc(f);\n+        if (ch == -1) {break;} if (ch == 10) {break;}\n+        buf += _str.unsafe_from_bytes(vec(ch as u8));\n+      }\n+      ret buf;\n+    }\n     impure fn read_c_str() -> str {\n         auto buf = \"\";\n         while (true) {"}, {"sha": "6695377db398c9330ba7b3473a7f67cd7598197c", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -1,6 +1,9 @@\n import _str.sbuf;\n import _vec.vbuf;\n \n+// FIXE Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n+// by https://github.com/graydon/rust/issues#issue/268\n+\n native mod libc = \"libc.so.6\" {\n \n     fn open(sbuf s, int flags, uint mode) -> int;\n@@ -10,6 +13,7 @@ native mod libc = \"libc.so.6\" {\n \n     type FILE;\n     fn fopen(sbuf path, sbuf mode) -> FILE;\n+    fn fdopen(int fd, sbuf mode) -> FILE;\n     fn fclose(FILE f);\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n@@ -25,6 +29,9 @@ native mod libc = \"libc.so.6\" {\n     fn getenv(sbuf n) -> sbuf;\n     fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n     fn unsetenv(sbuf n) -> int;\n+\n+    fn pipe(vbuf buf) -> int;\n+    fn waitpid(int pid, vbuf status, int options) -> int;\n }\n \n mod libc_constants {\n@@ -50,6 +57,22 @@ fn target_os() -> str {\n     ret \"linux\";\n }\n \n+fn pipe() -> tup(int, int) {\n+    let vec[mutable int] fds = vec(mutable 0, 0);\n+    check(os.libc.pipe(_vec.buf[mutable int](fds)) == 0);\n+    ret tup(fds.(0), fds.(1));\n+}\n+\n+fn fd_FILE(int fd) -> libc.FILE {\n+    ret libc.fdopen(fd, _str.buf(\"r\"));\n+}\n+\n+fn waitpid(int pid) -> int {\n+    let vec[mutable int] status = vec(mutable 0);\n+    check(os.libc.waitpid(pid, _vec.buf[mutable int](status), 0) != -1);\n+    ret status.(0);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "a484f72b3736fd85ddb46ed326f2f9247cfe006f", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -9,6 +9,7 @@ native mod libc = \"libc.dylib\" {\n \n     type FILE;\n     fn fopen(sbuf path, sbuf mode) -> FILE;\n+    fn fdopen(int fd, sbuf mode) -> FILE;\n     fn fclose(FILE f);\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n@@ -24,6 +25,9 @@ native mod libc = \"libc.dylib\" {\n     fn getenv(sbuf n) -> sbuf;\n     fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n     fn unsetenv(sbuf n) -> int;\n+\n+    fn pipe(vbuf buf) -> int;\n+    fn waitpid(int pid, vbuf status, int options) -> int;\n }\n \n mod libc_constants {\n@@ -49,6 +53,22 @@ fn target_os() -> str {\n     ret \"macos\";\n }\n \n+fn pipe() -> tup(int, int) {\n+    let vec[mutable int] fds = vec(mutable 0, 0);\n+    check(os.libc.pipe(_vec.buf[mutable int](fds)) == 0);\n+    ret tup(fds.(0), fds.(1));\n+}\n+\n+fn fd_FILE(int fd) -> libc.FILE {\n+    ret libc.fdopen(fd, _str.buf(\"r\"));\n+}\n+\n+fn waitpid(int pid) -> int {\n+    let vec[mutable int] status = vec(mutable 0);\n+    check(os.libc.waitpid(pid, _vec.buf[mutable int](status), 0) != -1);\n+    ret status.(0);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "bd9edbc86ac8f2e8ee6e6a8196d65e27ea7e1952", "filename": "src/lib/run_program.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -0,0 +1,96 @@\n+import _str.sbuf;\n+import _vec.vbuf;\n+\n+native \"rust\" mod rustrt {\n+    fn rust_run_program(vbuf argv, int in_fd, int out_fd, int err_fd) -> int;\n+}\n+\n+fn argvec(str prog, vec[str] args) -> vec[sbuf] {\n+    auto argptrs = vec(_str.buf(prog));\n+    for (str arg in args) {\n+        argptrs = _vec.push[sbuf](argptrs, _str.buf(arg));\n+    }\n+    argptrs = _vec.push[sbuf](argptrs, 0 as sbuf);\n+    ret argptrs;\n+}\n+\n+impure fn run_program(str prog, vec[str] args) -> int {\n+    auto pid = rustrt.rust_run_program(_vec.buf[sbuf](argvec(prog, args)),\n+                                       0, 0, 0);\n+    ret os.waitpid(pid);\n+}\n+\n+type program =\n+    state obj {\n+        fn get_id() -> int;\n+        fn input() -> io.writer;\n+        fn output() -> io.reader;\n+        impure fn close_input();\n+        impure fn finish() -> int;\n+    };\n+\n+impure fn start_program(str prog, vec[str] args) -> @program {\n+    auto pipe_input = os.pipe();\n+    auto pipe_output = os.pipe();\n+    auto pid = rustrt.rust_run_program\n+        (_vec.buf[sbuf](argvec(prog, args)),\n+         pipe_input._0, pipe_output._1, 0);\n+    if (pid == -1) {fail;}\n+    os.libc.close(pipe_input._0);\n+    os.libc.close(pipe_output._1);\n+\n+    state obj new_program(int pid,\n+                          int in_fd,\n+                          os.libc.FILE out_file,\n+                          mutable bool finished) {\n+        fn get_id() -> int {ret pid;}\n+        fn input() -> io.writer {\n+            ret io.new_writer(io.fd_buf_writer(in_fd, false));\n+        }\n+        fn output() -> io.reader {\n+            ret io.FILE_reader(out_file, false);\n+        }\n+        impure fn close_input() {\n+            os.libc.close(in_fd);\n+        }\n+        impure fn finish() -> int {\n+            if (finished) {ret 0;}\n+            finished = true;\n+            os.libc.close(in_fd);\n+            ret os.waitpid(pid);\n+        }\n+        drop {\n+            if (!finished) {\n+                os.libc.close(in_fd);\n+                os.waitpid(pid);\n+            }\n+            os.libc.fclose(out_file);\n+        }\n+    }\n+    ret @new_program(pid, pipe_input._1,\n+                     os.fd_FILE(pipe_output._0),\n+                     false);\n+}\n+\n+impure fn program_output(str prog, vec[str] args)\n+    -> rec(int status, str out) {\n+    auto pr = start_program(prog, args);\n+    pr.close_input();\n+    auto out = pr.output();\n+    auto buf = \"\";\n+    while (!out.eof()) {\n+        auto bytes = out.read_bytes(4096u);\n+        buf += _str.unsafe_from_bytes(bytes);\n+    }\n+    ret rec(status=pr.finish(), out=buf);\n+}\n+\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "a339fd8576abe666d9d56b89040d75d79a5eb106", "filename": "src/lib/std.rc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -27,7 +27,9 @@ mod util;\n \n auth io = unsafe;\n auth fs = unsafe;\n+auth os = unsafe;\n auth os_fs = unsafe;\n+auth run = unsafe;\n auth _str = unsafe;\n auth _vec = unsafe;\n auth _task = unsafe;\n@@ -52,9 +54,9 @@ alt (target_os) {\n         mod os_fs = \"posix_fs.rs\";\n     }\n }\n+mod run = \"run_program.rs\";\n mod fs;\n \n-\n // FIXME: parametric\n mod map;\n mod deque;"}, {"sha": "56c65bfcc800fcecbf78005472c96d4782164617", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -9,11 +9,14 @@ native mod libc = \"msvcrt.dll\" {\n \n     type FILE;\n     fn fopen(sbuf path, sbuf mode) -> FILE;\n+    fn _fdopen(int fd, sbuf mode) -> FILE;\n     fn fclose(FILE f);\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;\n+\n+    fn _pipe(vbuf fds, uint size, int mode) -> int;\n }\n \n mod libc_constants {\n@@ -39,6 +42,25 @@ fn target_os() -> str {\n     ret \"win32\";\n }\n \n+fn pipe() -> tup(int, int) {\n+    let vec[mutable int] fds = vec(mutable 0, 0);\n+    check(os.libc._pipe(_vec.buf[mutable int](fds), 1024u,\n+                        libc_constants.O_BINARY()) == 0);\n+    ret tup(fds.(0), fds.(1));\n+}\n+\n+fn fd_FILE(int fd) -> libc.FILE {\n+    ret libc._fdopen(fd, _str.buf(\"r\"));\n+}\n+\n+native \"rust\" mod rustrt {\n+    fn rust_process_wait(int handle) -> int;\n+}\n+\n+fn waitpid(int pid) -> int {\n+    ret rustrt.rust_process_wait(pid);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "fcea449ddd984165a521dc7aa9aaca48ec498155", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -1,7 +1,4 @@\n \n-#include <dirent.h>\n-#include <sys/types.h>\n-#include <sys/stat.h>\n #include \"rust_internal.h\"\n \n /* Native builtins. */"}, {"sha": "5bd62d2b7a47f1c723da3da3fa0173194ca72b8a", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -11,9 +11,12 @@\n #include <stdint.h>\n #include <inttypes.h>\n #include <stdarg.h>\n-\n+#include <sys/types.h>\n+#include <sys/stat.h>\n #include <stdio.h>\n #include <string.h>\n+#include <fcntl.h>\n+\n #include \"rust.h\"\n #include \"rand.h\"\n #include \"uthash.h\"\n@@ -26,12 +29,10 @@ extern \"C\" {\n }\n #elif defined(__GNUC__)\n #include <unistd.h>\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <fcntl.h>\n #include <dlfcn.h>\n #include <pthread.h>\n #include <errno.h>\n+#include <dirent.h>\n #else\n #error \"Platform not supported.\"\n #endif"}, {"sha": "5919f68e8449455e428ffeebaf824784aa164b9d", "filename": "src/rt/rust_run_program.cpp", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Frt%2Frust_run_program.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ea5dc54c3f0444fd3f20191fa1b1d94372c74c65/src%2Frt%2Frust_run_program.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_run_program.cpp?ref=ea5dc54c3f0444fd3f20191fa1b1d94372c74c65", "patch": "@@ -0,0 +1,92 @@\n+#include \"rust_internal.h\"\n+\n+#if defined(__WIN32__)\n+\n+#include <process.h>\n+#include <io.h>\n+\n+extern \"C\" CDECL int\n+rust_run_program(void* task, const char* argv[],\n+                 int in_fd, int out_fd, int err_fd) {\n+    STARTUPINFO si;\n+    ZeroMemory(&si, sizeof(STARTUPINFO));\n+    si.cb = sizeof(STARTUPINFO);\n+    si.dwFlags = STARTF_USESTDHANDLES;\n+    si.hStdInput = (HANDLE)_get_osfhandle(in_fd ? in_fd : 0);\n+    si.hStdOutput = (HANDLE)_get_osfhandle(out_fd ? out_fd : 1);\n+    si.hStdError = (HANDLE)_get_osfhandle(err_fd ? err_fd : 2);\n+\n+    size_t cmd_len = 0;\n+    for (const char** arg = argv; *arg; arg++) {\n+        cmd_len += strlen(*arg);\n+        cmd_len++; // Space or \\0\n+    }\n+    char* cmd = (char*)malloc(cmd_len);\n+    char* pos = cmd;\n+    for (const char** arg = argv; *arg; arg++) {\n+        strcpy(pos, *arg);\n+        pos += strlen(*arg);\n+        if (*(arg+1)) *(pos++) = ' ';\n+    }\n+\n+    PROCESS_INFORMATION pi;\n+    BOOL created = CreateProcess(NULL, cmd, NULL, NULL, TRUE,\n+                                 0, NULL, NULL, &si, &pi);\n+    free(cmd);\n+\n+    if (!created) return -1;\n+    return (int)pi.hProcess;\n+}\n+\n+extern \"C\" CDECL int\n+rust_process_wait(void* task, int proc) {\n+    DWORD status;\n+    while (true) {\n+        if (GetExitCodeProcess((HANDLE)proc, &status) &&\n+            status != STILL_ACTIVE)\n+            return (int)status;\n+        WaitForSingleObject((HANDLE)proc, INFINITE);\n+    }\n+}\n+\n+#elif defined(__GNUC__)\n+\n+#include <sys/file.h>\n+#include <signal.h>\n+#include <sys/ioctl.h>\n+#include <unistd.h>\n+#include <termios.h>\n+\n+extern \"C\" CDECL int\n+rust_run_program(rust_task* task, char* argv[],\n+                 int in_fd, int out_fd, int err_fd) {\n+    int pid = fork();\n+    if (pid != 0) return pid;\n+\n+    sigset_t sset;\n+    sigemptyset(&sset);\n+    sigprocmask(SIG_SETMASK, &sset, NULL);\n+\n+    if (in_fd) dup2(in_fd, 0);\n+    if (out_fd) dup2(out_fd, 1);\n+    if (err_fd) dup2(err_fd, 2);\n+    /* Close all other fds. */\n+    for (int fd = getdtablesize() - 1; fd >= 3; fd--) close(fd);\n+    execvp(argv[0], argv);\n+    exit(1);\n+}\n+\n+#else\n+#error \"Platform not supported.\"\n+#endif\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}]}