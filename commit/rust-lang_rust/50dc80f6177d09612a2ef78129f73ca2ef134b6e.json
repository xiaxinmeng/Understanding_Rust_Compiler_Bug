{"sha": "50dc80f6177d09612a2ef78129f73ca2ef134b6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZGM4MGY2MTc3ZDA5NjEyYTJlZjc4MTI5ZjczY2EyZWYxMzRiNmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-19T23:58:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-20T00:24:10Z"}, "message": "rt: Give upcall_new_stack the same convention as other upcalls", "tree": {"sha": "99703e4026b258e678c7382187375eda3148f604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99703e4026b258e678c7382187375eda3148f604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50dc80f6177d09612a2ef78129f73ca2ef134b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50dc80f6177d09612a2ef78129f73ca2ef134b6e", "html_url": "https://github.com/rust-lang/rust/commit/50dc80f6177d09612a2ef78129f73ca2ef134b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50dc80f6177d09612a2ef78129f73ca2ef134b6e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedcaad97eaeb5ae09c2782a76d92749ac5585c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedcaad97eaeb5ae09c2782a76d92749ac5585c4", "html_url": "https://github.com/rust-lang/rust/commit/bedcaad97eaeb5ae09c2782a76d92749ac5585c4"}], "stats": {"total": 91, "additions": 33, "deletions": 58}, "files": [{"sha": "4de9713421868b594da2cb3f7920741407e99579", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/50dc80f6177d09612a2ef78129f73ca2ef134b6e/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/50dc80f6177d09612a2ef78129f73ca2ef134b6e/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=50dc80f6177d09612a2ef78129f73ca2ef134b6e", "patch": "@@ -68,30 +68,27 @@\n \n #if defined(__APPLE__)\n #define RUST_GET_TASK           L_rust_get_task$stub\n+#define UPCALL_NEW_STACK        L_upcall_new_stack$stub\n #define UPCALL_DEL_STACK        L_upcall_del_stack$stub\n-#define UPCALL_CALL_C           L_upcall_call_shim_on_c_stack$stub\n #define MORESTACK               ___morestack\n #else\n #if defined(__linux__)\n #define UPCALL_NEW_STACK        upcall_new_stack\n #define UPCALL_DEL_STACK        upcall_del_stack\n #define RUST_GET_TASK           rust_get_task\n-#define UPCALL_CALL_C           upcall_call_shim_on_c_stack\n #define MORESTACK               __morestack\n #else\n #define UPCALL_NEW_STACK        _upcall_new_stack\n #define UPCALL_DEL_STACK        _upcall_del_stack\n #define RUST_GET_TASK           _rust_get_task\n-#define UPCALL_CALL_C           _upcall_call_shim_on_c_stack\n #define MORESTACK               ___morestack\n #endif\n #endif\n \n-.globl UPCALL_NEW_STACK\n #ifndef __APPLE__\n+.globl UPCALL_NEW_STACK\n .globl UPCALL_DEL_STACK\n .globl RUST_GET_TASK\n-.globl UPCALL_CALL_C_STACK\n #endif\n .globl MORESTACK\n \n@@ -170,29 +167,19 @@ MORESTACK:\n \t// The size of the stack arguments to copy to the new stack,\n \t// ane of the the arguments to __morestack\n \tmovl 56(%esp),%eax\n-\tmovl %eax,20(%esp)\n+\tmovl %eax,8(%esp)\n \t// The address of the stack arguments to the original function\n \tleal 64(%esp),%eax\n-\tmovl %eax,16(%esp)\n+\tmovl %eax,4(%esp)\n \t// The amount of stack needed for the original function,\n \t// the other argument to __morestack\n \tmovl 52(%esp),%eax // The amount of stack needed\n-\tmovl %eax,12(%esp)\n-\t// Out pointer to the new stack\n-\tmovl $0, 8(%esp)\n+\tmovl %eax,(%esp)\n \n-#ifdef __APPLE__\n-\tcall 1f\n-1:\tpopl %eax\n-\tmovl L_upcall_new_stack$non_lazy_ptr-1b(%eax),%eax\n-\tmovl %eax, 4(%esp)\n-#else\n-\tmovl $UPCALL_NEW_STACK,4(%esp)\n-#endif\n+\tcall UPCALL_NEW_STACK\n \n-\tleal 8(%esp), %eax\n-\tmovl %eax,(%esp)\n-\tcall UPCALL_CALL_C\n+\t// Save the address of the new stack\n+\tmovl %eax, (%esp)\n \n \t// Grab the __morestack return pointer\n \tmovl 48(%esp),%eax\n@@ -204,7 +191,7 @@ MORESTACK:\n \tmovl 24(%esp), %edx\n \n         // Switch stacks\n-\tmovl 8(%esp),%esp\n+\tmovl (%esp),%esp\n         // Re-enter the function that called us\n \tcall *%eax\n \n@@ -253,26 +240,21 @@ MORESTACK:\n \n #ifdef __APPLE__\n \n-\t.section __IMPORT,__pointers,non_lazy_symbol_pointers\n-L_upcall_new_stack$non_lazy_ptr:\n-\t.indirect_symbol _upcall_new_stack\n-\t.long 0\n-\n .section __IMPORT,__jump_table,symbol_stubs,pure_instructions+self_modifying_code,5\n \n \t// Linker will replace the hlts (the ascii) with jmp\n L_rust_get_task$stub:\n \t.indirect_symbol _rust_get_task\n \t.ascii\t \"\\364\\364\\364\\364\\364\"\n \n+L_upcall_new_stack$stub:\n+\t.indirect_symbol _upcall_new_stack\n+\t.ascii\t \"\\364\\364\\364\\364\\364\"\n+\t\n L_upcall_del_stack$stub:\n \t.indirect_symbol _upcall_del_stack\n \t.ascii\t \"\\364\\364\\364\\364\\364\"\n \n-L_upcall_call_shim_on_c_stack$stub:\n-\t.indirect_symbol _upcall_call_shim_on_c_stack\n-\t.ascii\t \"\\364\\364\\364\\364\\364\"\n-\n \t.subsections_via_symbols\n #endif\n "}, {"sha": "50f1361940649b08b55721388605c50b76b91dc4", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50dc80f6177d09612a2ef78129f73ca2ef134b6e/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/50dc80f6177d09612a2ef78129f73ca2ef134b6e/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=50dc80f6177d09612a2ef78129f73ca2ef134b6e", "patch": "@@ -9,18 +9,15 @@\n #if defined(__APPLE__) || defined(_WIN32)\n #define UPCALL_NEW_STACK        _upcall_new_stack\n #define UPCALL_DEL_STACK        _upcall_del_stack\n-#define UPCALL_CALL_C           _upcall_call_shim_on_c_stack\n #define MORESTACK               ___morestack\n #else\n #define UPCALL_NEW_STACK        upcall_new_stack\n #define UPCALL_DEL_STACK        upcall_del_stack\n-#define UPCALL_CALL_C           upcall_call_shim_on_c_stack\n #define MORESTACK               __morestack\n #endif\n \n .globl UPCALL_NEW_STACK\n .globl UPCALL_DEL_STACK\n-.globl UPCALL_CALL_C\n .globl MORESTACK\n \n #if defined(__linux__)\n@@ -70,29 +67,22 @@ MORESTACK:\n \t// Calculate the address of the stack arguments.\n \t// We have the base pointer, __morestack's return address,\n \t// and __morestack's caller's return address to skip\n-\tmovq %rbp, %rcx\n-\taddq $24, %rcx  // Base pointer, return address x2\n+\tmovq %rbp, %rax\n+\taddq $24, %rax  // Base pointer, return address x2\n \n \t// The arguments to __morestack are passed in %r10 & %r11\n \n-\tpushq %r11 // Size of stack arguments\n-\tpushq %rcx // Address of stack arguments\n-\tpushq %r10 // The amount of stack needed\n-\tpushq $0   // Out pointer\n+\tmovq %r11, %rdx // Size of stack arguments\n+\tmovq %rax, %rsi // Address of stack arguments\n+\tmovq %r10, %rdi // The amount of stack needed\n \n-\tmovq UPCALL_NEW_STACK@GOTPCREL(%rip), %rsi\n-\tmovq %rsp, %rdi\n #ifdef __APPLE__\n-\tcall UPCALL_CALL_C\n+\tcall UPCALL_NEW_STACK\n #endif\n #ifdef __linux__\n-\tcall UPCALL_CALL_C@PLT\n+\tcall UPCALL_NEW_STACK@PLT\n #endif\n \n-\t// Pop the new_stack_args struct\n-\tpopq %rax\n-\taddq $24, %rsp\n-\n \t// Pop the saved arguments\n \tpopq %r9\n \tpopq %r8"}, {"sha": "867f9cd58b624ef10c2901089c1ffd71939490f1", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/50dc80f6177d09612a2ef78129f73ca2ef134b6e/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/50dc80f6177d09612a2ef78129f73ca2ef134b6e/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=50dc80f6177d09612a2ef78129f73ca2ef134b6e", "patch": "@@ -595,23 +595,26 @@ upcall_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     UPCALL_SWITCH_STACK(&args, upcall_s_log_type);\n }\n \n-struct rust_new_stack2_args {\n-    void *new_stack;\n+struct s_new_stack_args {\n+    void *result;\n     size_t stk_sz;\n     void *args_addr;\n     size_t args_sz;\n };\n \n-// A new stack function suitable for calling through\n-// upcall_call_shim_on_c_stack\n-// FIXME: Convert this to the same arrangement as\n-// the other upcalls, simplify __morestack\n extern \"C\" CDECL void\n-upcall_new_stack(struct rust_new_stack2_args *args) {\n+upcall_s_new_stack(struct s_new_stack_args *args) {\n     rust_task *task = rust_scheduler::get_task();\n-    args->new_stack = task->new_stack(args->stk_sz,\n-                                      args->args_addr,\n-                                      args->args_sz);\n+    args->result = task->new_stack(args->stk_sz,\n+                                   args->args_addr,\n+                                   args->args_sz);\n+}\n+\n+extern \"C\" CDECL void *\n+upcall_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n+    s_new_stack_args args = {NULL, stk_sz, args_addr, args_sz};\n+    UPCALL_SWITCH_STACK(&args, upcall_s_new_stack);\n+    return args.result;\n }\n \n extern \"C\" CDECL void"}]}