{"sha": "4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "node_id": "C_kwDOAAsO6NoAKDRhZWU5MTFjZTQxZDZhZTdhNDFiNzRjYTgzYzIxYmY3ZjRkMmYzZDk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-14T16:37:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-14T16:41:16Z"}, "message": "Slim down GenericArgs by one usize once more", "tree": {"sha": "67b4fd9bfdfba99f705608109de472c397b6325a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b4fd9bfdfba99f705608109de472c397b6325a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "html_url": "https://github.com/rust-lang/rust/commit/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "853ae1927d4ce75931ba3137718fd293d3279880", "url": "https://api.github.com/repos/rust-lang/rust/commits/853ae1927d4ce75931ba3137718fd293d3279880", "html_url": "https://github.com/rust-lang/rust/commit/853ae1927d4ce75931ba3137718fd293d3279880"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "36d4c36a26894550135d732e08ab3f704ae55f7e", "filename": "crates/hir-def/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath.rs?ref=4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "patch": "@@ -49,7 +49,7 @@ pub struct Path {\n /// also includes bindings of associated types, like in `Iterator<Item = Foo>`.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct GenericArgs {\n-    pub args: Vec<GenericArg>,\n+    pub args: Box<[GenericArg]>,\n     /// This specifies whether the args contain a Self type as the first\n     /// element. This is the case for path segments like `<T as Trait>`, where\n     /// `T` is actually a type parameter for the path `Trait` specifying the\n@@ -212,7 +212,7 @@ impl GenericArgs {\n \n     pub(crate) fn empty() -> GenericArgs {\n         GenericArgs {\n-            args: Vec::new(),\n+            args: Box::default(),\n             has_self_type: false,\n             bindings: Box::default(),\n             desugared_from_fn: false,"}, {"sha": "c85a11db6d1947fa6bdf0f8e11a81eeed8fb6e73", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "patch": "@@ -1,5 +1,7 @@\n //! Transforms syntax into `Path` objects, ideally with accounting for hygiene\n \n+use std::iter;\n+\n use crate::type_ref::ConstScalarOrPath;\n \n use either::Either;\n@@ -86,15 +88,26 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx<'_>) -> Option<Path\n                             generic_args.resize(segments.len(), None);\n                         }\n \n+                        let self_type = GenericArg::Type(self_type);\n+\n                         // Insert the type reference (T in the above example) as Self parameter for the trait\n                         let last_segment = generic_args.get_mut(segments.len() - num_segments)?;\n-                        let mut args_inner = match last_segment {\n-                            Some(it) => it.as_ref().clone(),\n-                            None => GenericArgs::empty(),\n-                        };\n-                        args_inner.has_self_type = true;\n-                        args_inner.args.insert(0, GenericArg::Type(self_type));\n-                        *last_segment = Some(Interned::new(args_inner));\n+                        *last_segment = Some(Interned::new(match last_segment.take() {\n+                            Some(it) => GenericArgs {\n+                                args: iter::once(self_type)\n+                                    .chain(it.args.iter().cloned())\n+                                    .collect(),\n+\n+                                has_self_type: true,\n+                                bindings: it.bindings.clone(),\n+                                desugared_from_fn: it.desugared_from_fn,\n+                            },\n+                            None => GenericArgs {\n+                                args: Box::new([self_type]),\n+                                has_self_type: true,\n+                                ..GenericArgs::empty()\n+                            },\n+                        }));\n                     }\n                 }\n             }\n@@ -209,7 +222,7 @@ pub(super) fn lower_generic_args(\n         return None;\n     }\n     Some(GenericArgs {\n-        args,\n+        args: args.into_boxed_slice(),\n         has_self_type: false,\n         bindings: bindings.into_boxed_slice(),\n         desugared_from_fn: false,\n@@ -223,15 +236,13 @@ fn lower_generic_args_from_fn_path(\n     params: Option<ast::ParamList>,\n     ret_type: Option<ast::RetType>,\n ) -> Option<GenericArgs> {\n-    let mut args = Vec::new();\n     let params = params?;\n     let mut param_types = Vec::new();\n     for param in params.params() {\n         let type_ref = TypeRef::from_ast_opt(ctx, param.ty());\n         param_types.push(type_ref);\n     }\n-    let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n-    args.push(arg);\n+    let args = Box::new([GenericArg::Type(TypeRef::Tuple(param_types))]);\n     let bindings = if let Some(ret_type) = ret_type {\n         let type_ref = TypeRef::from_ast_opt(ctx, ret_type.ty());\n         Box::new([AssociatedTypeBinding {"}, {"sha": "9652b01b91bf6bd8f593560ea332904d98f307ca", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "patch": "@@ -292,7 +292,7 @@ impl TypeRef {\n             }\n             for segment in path.segments().iter() {\n                 if let Some(args_and_bindings) = segment.args_and_bindings {\n-                    for arg in &args_and_bindings.args {\n+                    for arg in args_and_bindings.args.iter() {\n                         match arg {\n                             crate::path::GenericArg::Type(type_ref) => {\n                                 go(type_ref, f);"}, {"sha": "b22064d8c42e49be63b872eeb35733b276c34256", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=4aee911ce41d6ae7a41b74ca83c21bf7f4d2f3d9", "patch": "@@ -1419,7 +1419,7 @@ impl HirDisplay for Path {\n \n                 write!(f, \"<\")?;\n                 let mut first = true;\n-                for arg in &generic_args.args {\n+                for arg in generic_args.args.iter() {\n                     if first {\n                         first = false;\n                         if generic_args.has_self_type {"}]}