{"sha": "d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmYwZjc5YmNmZDg2YjY4OWQ4OGEyZWRmY2RiNGFhZmFjMmU4YWY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-03T17:57:17Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-03T17:57:17Z"}, "message": "Fix some indentation in check::vtable.", "tree": {"sha": "65aebe4ec4afbe1cc9fced51bc709d462a08e59d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65aebe4ec4afbe1cc9fced51bc709d462a08e59d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af", "html_url": "https://github.com/rust-lang/rust/commit/d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c854d6ebdb582116e2be0cb2a4a3a4004bc6dce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c854d6ebdb582116e2be0cb2a4a3a4004bc6dce2", "html_url": "https://github.com/rust-lang/rust/commit/c854d6ebdb582116e2be0cb2a4a3a4004bc6dce2"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "d410369c2edbe7686799258293ffc8772965b974", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=d52f0f79bcfd86b689d88a2edfcdb4aafac2e8af", "patch": "@@ -115,67 +115,67 @@ fn lookup_vtable(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n         for list::each(isc) |impls| {\n             /* For each impl in scope... */\n             for vec::each(*impls) |im| {\n-                    // im = one specific impl\n-                    // find the iface that im implements (if any)\n-                    let of_ty = alt ty::impl_iface(tcx, im.did) {\n-                      some(of_ty) { of_ty }\n-                      _ { cont; }\n-                    };\n+                // im = one specific impl\n+                // find the iface that im implements (if any)\n+                let of_ty = alt ty::impl_iface(tcx, im.did) {\n+                  some(of_ty) { of_ty }\n+                  _ { cont; }\n+                };\n \n-                    // it must have the same id as the expected one\n-                    alt ty::get(of_ty).struct {\n-                      ty::ty_iface(id, _) if id != iface_id { cont; }\n-                      _ { /* ok */ }\n-                    }\n+                // it must have the same id as the expected one\n+                alt ty::get(of_ty).struct {\n+                  ty::ty_iface(id, _) if id != iface_id { cont; }\n+                  _ { /* ok */ }\n+                }\n \n-                    // check whether the type unifies with the type\n-                    // that the impl is for, and continue if not\n-                    let {substs: substs, ty: for_ty} =\n-                        impl_self_ty(fcx, im.did);\n-                    let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n-                    alt fcx.mk_subty(ty, for_ty) {\n-                      result::err(_) { cont; }\n-                      result::ok(()) { }\n-                    }\n+                // check whether the type unifies with the type\n+                // that the impl is for, and continue if not\n+                let {substs: substs, ty: for_ty} =\n+                    impl_self_ty(fcx, im.did);\n+                let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n+                alt fcx.mk_subty(ty, for_ty) {\n+                  result::err(_) { cont; }\n+                  result::ok(()) { }\n+                }\n \n-                    // check that desired iface type unifies\n-                    #debug(\"(checking vtable) @2 relating iface ty %s to \\\n-                            of_ty %s\",\n-                            fcx.infcx.ty_to_str(iface_ty),\n-                            fcx.infcx.ty_to_str(of_ty));\n-                    let of_ty = ty::subst(tcx, substs, of_ty);\n-                    relate_iface_tys(fcx, sp, iface_ty, of_ty);\n+                // check that desired iface type unifies\n+                #debug(\"(checking vtable) @2 relating iface ty %s to \\\n+                        of_ty %s\",\n+                       fcx.infcx.ty_to_str(iface_ty),\n+                       fcx.infcx.ty_to_str(of_ty));\n+                let of_ty = ty::subst(tcx, substs, of_ty);\n+                relate_iface_tys(fcx, sp, iface_ty, of_ty);\n \n-                    // recursively process the bounds\n-                    let iface_tps = iface_substs.tps;\n-                    let substs_f = fixup_substs(fcx, sp, iface_id, substs);\n-                    connect_iface_tps(fcx, sp, substs_f.tps,\n-                                      iface_tps, im.did);\n-                    let subres = lookup_vtables(fcx, isc, sp,\n-                                                im_bs, substs_f, false);\n-                    vec::push(found,\n-                              vtable_static(im.did, substs_f.tps, subres));\n-                }\n+                // recursively process the bounds\n+                let iface_tps = iface_substs.tps;\n+                let substs_f = fixup_substs(fcx, sp, iface_id, substs);\n+                connect_iface_tps(fcx, sp, substs_f.tps,\n+                                  iface_tps, im.did);\n+                let subres = lookup_vtables(fcx, isc, sp,\n+                                            im_bs, substs_f, false);\n+                vec::push(found,\n+                          vtable_static(im.did, substs_f.tps, subres));\n+            }\n \n-                alt found.len() {\n-                  0u { /* fallthrough */ }\n-                  1u { ret found[0]; }\n-                  _ {\n-                    fcx.ccx.tcx.sess.span_err(\n-                        sp, \"multiple applicable methods in scope\");\n-                    ret found[0];\n-                  }\n-                }\n+            alt found.len() {\n+              0u { /* fallthrough */ }\n+              1u { ret found[0]; }\n+              _ {\n+                fcx.ccx.tcx.sess.span_err(\n+                    sp, \"multiple applicable methods in scope\");\n+                ret found[0];\n+              }\n             }\n-          }\n         }\n-\n-        tcx.sess.span_fatal(\n-            sp, \"failed to find an implementation of interface \" +\n-            ty_to_str(tcx, iface_ty) + \" for \" +\n-            ty_to_str(tcx, ty));\n+      }\n     }\n \n+    tcx.sess.span_fatal(\n+        sp, \"failed to find an implementation of interface \" +\n+        ty_to_str(tcx, iface_ty) + \" for \" +\n+        ty_to_str(tcx, ty));\n+}\n+\n fn fixup_ty(fcx: @fn_ctxt, sp: span, ty: ty::t) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n     alt infer::resolve_deep(fcx.infcx, ty, force_all) {"}]}