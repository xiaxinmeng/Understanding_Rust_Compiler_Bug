{"sha": "eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYTBkOGU1ZDBhMjZiZWU4NWRhNjQ2ZmI2MWIzOTE3YTFiYTc5YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-20T17:28:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-20T17:28:38Z"}, "message": "Auto merge of #5067 - JohnTitor:lint-skip-while-next, r=flip1995\n\nAdd `skip_while_next` lint\n\nFixes #4036\n\nchangelog: Add `skip_while_next` lint", "tree": {"sha": "539ed3f98a3f467c4e03ccb8a152d1d8468b4f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/539ed3f98a3f467c4e03ccb8a152d1d8468b4f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "html_url": "https://github.com/rust-lang/rust/commit/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32949da78ee11ae06afb77a68b5c82187a6dd2ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/32949da78ee11ae06afb77a68b5c82187a6dd2ab", "html_url": "https://github.com/rust-lang/rust/commit/32949da78ee11ae06afb77a68b5c82187a6dd2ab"}, {"sha": "bec5b69e4550f14310ee8b5cf9c6ac35222d48eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec5b69e4550f14310ee8b5cf9c6ac35222d48eb", "html_url": "https://github.com/rust-lang/rust/commit/bec5b69e4550f14310ee8b5cf9c6ac35222d48eb"}], "stats": {"total": 124, "additions": 117, "deletions": 7}, "files": [{"sha": "f7e8a4534de6b525f54ed18aee9c40499c8df710", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -1285,6 +1285,7 @@ Released 2018-09-13\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n+[`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`str_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add"}, {"sha": "d752e5b4cc15a9443ecf6efc5cfdfa1457d0281f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 347 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 348 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "962ff38eb6cdf785a26dec43833eb0f7485c17de", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -645,6 +645,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n         &methods::SINGLE_CHAR_PATTERN,\n+        &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n         &methods::TEMPORARY_CSTRING_AS_PTR,\n@@ -1223,6 +1224,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n+        LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n@@ -1475,6 +1477,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::OPTION_AND_THEN_SOME),\n         LintId::of(&methods::SEARCH_IS_SOME),\n+        LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n         LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(&methods::USELESS_ASREF),"}, {"sha": "6a5d6d64cf4e403fd9a3dca3f3557be3d13e05af", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -375,6 +375,29 @@ declare_clippy_lint! {\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.skip_while(condition).next()`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// `_.find(!condition)`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # let vec = vec![1];\n+    /// vec.iter().skip_while(|x| **x == 0).next();\n+    /// ```\n+    /// Could be written as\n+    /// ```rust\n+    /// # let vec = vec![1];\n+    /// vec.iter().find(|x| **x != 0);\n+    /// ```\n+    pub SKIP_WHILE_NEXT,\n+    complexity,\n+    \"using `skip_while(p).next()`, which is more succinctly expressed as `.find(!p)`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.map(_).flatten(_)`,\n     ///\n@@ -1193,6 +1216,7 @@ declare_lint_pass!(Methods => [\n     SEARCH_IS_SOME,\n     TEMPORARY_CSTRING_AS_PTR,\n     FILTER_NEXT,\n+    SKIP_WHILE_NEXT,\n     FILTER_MAP,\n     FILTER_MAP_NEXT,\n     FLAT_MAP_IDENTITY,\n@@ -1238,6 +1262,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n             [\"and_then\", ..] => lint_option_and_then_some(cx, expr, arg_lists[0]),\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n+            [\"next\", \"skip_while\"] => lint_skip_while_next(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1]),\n@@ -2531,6 +2556,24 @@ fn lint_filter_next<'a, 'tcx>(\n     }\n }\n \n+/// lint use of `skip_while().next()` for `Iterators`\n+fn lint_skip_while_next<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    _skip_while_args: &'tcx [hir::Expr<'_>],\n+) {\n+    // lint if caller of `.skip_while().next()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        span_help_and_lint(\n+            cx,\n+            SKIP_WHILE_NEXT,\n+            expr.span,\n+            \"called `skip_while(p).next()` on an `Iterator`\",\n+            \"this is more succinctly expressed by calling `.find(!p)` instead\",\n+        );\n+    }\n+}\n+\n /// lint use of `filter().map()` for `Iterators`\n fn lint_filter_map<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "deecbf80a228272ad80e86ccc3b3ac08a1748230", "filename": "doc/adding_lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -55,7 +55,7 @@ we want to check. The output of Clippy is compared against a `.stderr` file.\n Note that you don't have to create this file yourself, we'll get to\n generating the `.stderr` files further down.\n \n-We start by opening the test file created at `tests/ui/foo_functions.rs`. \n+We start by opening the test file created at `tests/ui/foo_functions.rs`.\n \n Update the file with some examples to get started:\n \n@@ -102,7 +102,7 @@ Once we are satisfied with the output, we need to run\n `tests/ui/update-all-references.sh` to update the `.stderr` file for our lint.\n Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n every time before running `tests/ui/update-all-references.sh`.\n-Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit \n+Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n our lint, we need to commit the generated `.stderr` files, too.\n \n ### Rustfix tests\n@@ -133,7 +133,7 @@ With tests in place, let's have a look at implementing our lint now.\n \n ### Lint declaration\n \n-Let's start by opening the new file created in the `clippy_lints` crate \n+Let's start by opening the new file created in the `clippy_lints` crate\n at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n lint code is. This file has already imported some initial things we will need:\n \n@@ -178,7 +178,7 @@ state the thing that is being checked for and read well when used with\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-The rest of this file contains an empty implementation for our lint pass, \n+The rest of this file contains an empty implementation for our lint pass,\n which in this case is `EarlyLintPass` and should look like this:\n \n ```rust\n@@ -194,7 +194,7 @@ impl EarlyLintPass for FooFunctions {}\n Don't worry about the `name` method here. As long as it includes the name of the\n lint pass it should be fine.\n \n-The new lint automation runs `update_lints`, which automates some things, but it \n+The new lint automation runs `update_lints`, which automates some things, but it\n doesn't automate everything. We will have to register our lint pass manually in\n the `register_plugins` function in `clippy_lints/src/lib.rs`:\n "}, {"sha": "dcdfd015393b2a18af6ee2770b44fe258bee5a18", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 347] = [\n+pub const ALL_LINTS: [Lint; 348] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1862,6 +1862,13 @@ pub const ALL_LINTS: [Lint; 347] = [\n         deprecation: None,\n         module: \"matches\",\n     },\n+    Lint {\n+        name: \"skip_while_next\",\n+        group: \"complexity\",\n+        desc: \"using `skip_while(p).next()`, which is more succinctly expressed as `.find(!p)`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"slow_vector_initialization\",\n         group: \"perf\","}, {"sha": "ed11c41e21c1a7e9a738918926bfcc8d933fd8bc", "filename": "tests/ui/auxiliary/option_helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Foption_helpers.rs?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -44,4 +44,8 @@ impl IteratorFalsePositives {\n     pub fn skip(self, _: usize) -> IteratorFalsePositives {\n         self\n     }\n+\n+    pub fn skip_while(self) -> IteratorFalsePositives {\n+        self\n+    }\n }"}, {"sha": "a522c0f08b207a5abd7cf037c304b39357c4a4b3", "filename": "tests/ui/skip_while_next.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/tests%2Fui%2Fskip_while_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/tests%2Fui%2Fskip_while_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fskip_while_next.rs?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -0,0 +1,29 @@\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::skip_while_next)]\n+#![allow(clippy::blacklisted_name)]\n+\n+extern crate option_helpers;\n+use option_helpers::IteratorFalsePositives;\n+\n+#[rustfmt::skip]\n+fn skip_while_next() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // Single-line case.\n+    let _ = v.iter().skip_while(|&x| *x < 0).next();\n+\n+    // Multi-line case.\n+    let _ = v.iter().skip_while(|&x| {\n+                                *x < 0\n+                            }\n+                   ).next();\n+\n+    // Check that hat we don't lint if the caller is not an `Iterator`.\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.skip_while().next();\n+}\n+\n+fn main() {\n+    skip_while_next();\n+}"}, {"sha": "a6b7bcd63ff39922285bcf8973e06d9e09ee7e71", "filename": "tests/ui/skip_while_next.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/tests%2Fui%2Fskip_while_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eca0d8e5d0a26bee85da646fb61b3917a1ba79ae/tests%2Fui%2Fskip_while_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fskip_while_next.stderr?ref=eca0d8e5d0a26bee85da646fb61b3917a1ba79ae", "patch": "@@ -0,0 +1,23 @@\n+error: called `skip_while(p).next()` on an `Iterator`\n+  --> $DIR/skip_while_next.rs:14:13\n+   |\n+LL |     let _ = v.iter().skip_while(|&x| *x < 0).next();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::skip-while-next` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `.find(!p)` instead\n+\n+error: called `skip_while(p).next()` on an `Iterator`\n+  --> $DIR/skip_while_next.rs:17:13\n+   |\n+LL |       let _ = v.iter().skip_while(|&x| {\n+   |  _____________^\n+LL | |                                 *x < 0\n+LL | |                             }\n+LL | |                    ).next();\n+   | |___________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `.find(!p)` instead\n+\n+error: aborting due to 2 previous errors\n+"}]}