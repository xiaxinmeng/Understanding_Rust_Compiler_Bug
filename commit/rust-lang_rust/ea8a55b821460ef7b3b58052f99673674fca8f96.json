{"sha": "ea8a55b821460ef7b3b58052f99673674fca8f96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOGE1NWI4MjE0NjBlZjdiM2I1ODA1MmY5OTY3MzY3NGZjYThmOTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-18T08:27:58Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-18T08:35:58Z"}, "message": "iterator: make nth and last return Option\n\nThere isn't a way to take the length of any iterator, so failing on a\nzero length would make these much less useful.", "tree": {"sha": "877fd1a08cd4edace99ecbefe8f4408c73f094b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/877fd1a08cd4edace99ecbefe8f4408c73f094b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea8a55b821460ef7b3b58052f99673674fca8f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8a55b821460ef7b3b58052f99673674fca8f96", "html_url": "https://github.com/rust-lang/rust/commit/ea8a55b821460ef7b3b58052f99673674fca8f96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea8a55b821460ef7b3b58052f99673674fca8f96/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c465ce1f1caaae58a31c57f665217ee58bb876", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c465ce1f1caaae58a31c57f665217ee58bb876", "html_url": "https://github.com/rust-lang/rust/commit/a9c465ce1f1caaae58a31c57f665217ee58bb876"}], "stats": {"total": 50, "additions": 15, "deletions": 35}, "files": [{"sha": "65c36b122c766cde55f018da7b1ae21a60f65a1b", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ea8a55b821460ef7b3b58052f99673674fca8f96/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8a55b821460ef7b3b58052f99673674fca8f96/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=ea8a55b821460ef7b3b58052f99673674fca8f96", "patch": "@@ -48,8 +48,8 @@ pub trait IteratorUtil<A> {\n     #[cfg(not(stage0))]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n     fn to_vec(self) -> ~[A];\n-    fn nth(&mut self, n: uint) -> A;\n-    fn last(&mut self) -> A;\n+    fn nth(&mut self, n: uint) -> Option<A>;\n+    fn last(&mut self) -> Option<A>;\n     fn fold<B>(&mut self, start: B, f: &fn(B, A) -> B) -> B;\n     fn count(&mut self) -> uint;\n     fn all(&mut self, f: &fn(&A) -> bool) -> bool;\n@@ -154,30 +154,24 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         return v;\n     }\n \n-    /// Get `n`th element of an iterator.\n+    /// Return the `n`th item yielded by an iterator.\n     #[inline(always)]\n-    fn nth(&mut self, n: uint) -> A {\n-        let mut i = n;\n+    fn nth(&mut self, mut n: uint) -> Option<A> {\n         loop {\n             match self.next() {\n-                Some(x) => { if i == 0 { return x; }}\n-                None => { fail!(\"cannot get %uth element\", n) }\n+                Some(x) => if n == 0 { return Some(x) },\n+                None => return None\n             }\n-            i -= 1;\n+            n -= 1;\n         }\n     }\n \n-    // Get last element of an iterator.\n-    //\n-    // If the iterator have an infinite length, this method won't return.\n+    /// Return the last item yielded by an iterator.\n     #[inline(always)]\n-    fn last(&mut self) -> A {\n-        let mut elm = match self.next() {\n-            Some(x) => x,\n-            None    => fail!(\"cannot get last element\")\n-        };\n-        for self.advance |e| { elm = e; }\n-        return elm;\n+    fn last(&mut self) -> Option<A> {\n+        let mut last = None;\n+        for self.advance |x| { last = Some(x); }\n+        last\n     }\n \n     /// Reduce an iterator to an accumulated value\n@@ -679,29 +673,15 @@ mod tests {\n     fn test_iterator_nth() {\n         let v = &[0, 1, 2, 3, 4];\n         for uint::range(0, v.len()) |i| {\n-            assert_eq!(v.iter().nth(i), &v[i]);\n+            assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n         }\n     }\n \n-    #[test]\n-    #[should_fail]\n-    fn test_iterator_nth_fail() {\n-        let v = &[0, 1, 2, 3, 4];\n-        v.iter().nth(5);\n-    }\n-\n     #[test]\n     fn test_iterator_last() {\n         let v = &[0, 1, 2, 3, 4];\n-        assert_eq!(v.iter().last(), &4);\n-        assert_eq!(v.slice(0, 1).iter().last(), &0);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_iterator_last_fail() {\n-        let v: &[uint] = &[];\n-        v.iter().last();\n+        assert_eq!(v.iter().last().unwrap(), &4);\n+        assert_eq!(v.slice(0, 1).iter().last().unwrap(), &0);\n     }\n \n     #[test]"}]}