{"sha": "419df99e1824a5b65eb0c6d67850dfe014b019fa", "node_id": "C_kwDOAAsO6NoAKDQxOWRmOTllMTgyNGE1YjY1ZWIwYzZkNjc4NTBkZmUwMTRiMDE5ZmE", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-03-30T04:17:30Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-03-30T04:17:30Z"}, "message": "Merge commit '5ff7b632a95bac6955611d85040859128902c580' into sync-rustfmt-subtree", "tree": {"sha": "f48b577363bf95818a608eecbbcfef182abbbcd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48b577363bf95818a608eecbbcfef182abbbcd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419df99e1824a5b65eb0c6d67850dfe014b019fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419df99e1824a5b65eb0c6d67850dfe014b019fa", "html_url": "https://github.com/rust-lang/rust/commit/419df99e1824a5b65eb0c6d67850dfe014b019fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419df99e1824a5b65eb0c6d67850dfe014b019fa/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c06e1ba47e1077725a950e0b5d1870a89c8b536", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c06e1ba47e1077725a950e0b5d1870a89c8b536", "html_url": "https://github.com/rust-lang/rust/commit/9c06e1ba47e1077725a950e0b5d1870a89c8b536"}, {"sha": "5ff7b632a95bac6955611d85040859128902c580", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff7b632a95bac6955611d85040859128902c580", "html_url": "https://github.com/rust-lang/rust/commit/5ff7b632a95bac6955611d85040859128902c580"}], "stats": {"total": 2248, "additions": 2013, "deletions": 235}, "files": [{"sha": "45f63b83c056217722dc91908ed2e89c52f4c559", "filename": "src/tools/rustfmt/.github/workflows/linux.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2F.github%2Fworkflows%2Flinux.yml", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2F.github%2Fworkflows%2Flinux.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2F.github%2Fworkflows%2Flinux.yml?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -40,6 +40,10 @@ jobs:\n         rustc -Vv\n         cargo -V\n         cargo build\n+      env:\n+        RUSTFLAGS: '-D warnings'\n \n     - name: test\n       run: cargo test\n+      env:\n+        RUSTFLAGS: '-D warnings'"}, {"sha": "5b2336085835650beead28a5bdf5756a30059bce", "filename": "src/tools/rustfmt/CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FCHANGELOG.md?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -2,6 +2,10 @@\n \n ## [Unreleased]\n \n+### Fixed\n+\n+- Fixes issue where wrapped strings would be incorrectly indented in macro defs when `format_strings` was enabled [#4036](https://github.com/rust-lang/rustfmt/issues/4036)\n+\n ## [1.4.38] 2021-10-20\n \n ### Changed\n@@ -57,6 +61,7 @@ Note this hit the rustup distributions prior to the v1.4.38 release as part of a\n \n - New `One` variant added to `imports_granularity` configuration option which can be used to reformat all imports into a single use statement [#4669](https://github.com/rust-lang/rustfmt/issues/4669)\n - rustfmt will now skip files that are annotated with `@generated` at the top of the file [#3958](https://github.com/rust-lang/rustfmt/issues/3958)\n+  if `format_generated_files` option is set to `false` (by default `@generated` files are formatted)\n - New configuration option `hex_literal_case` that allows user to control the casing utilized for hex literals [PR #4903](https://github.com/rust-lang/rustfmt/pull/4903)\n \n See the section on the configuration site for more information"}, {"sha": "b932e15ef7461ce0e9794ddcab0d478b75889344", "filename": "src/tools/rustfmt/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FCargo.lock?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -275,9 +275,9 @@ dependencies = [\n \n [[package]]\n name = \"itertools\"\n-version = \"0.9.0\"\n+version = \"0.10.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\n+checksum = \"a9a9d19fa1e79b6215ff29b9d6880b706147f16e9b1dbb1e4e5947b5b02bc5e3\"\n dependencies = [\n  \"either\",\n ]"}, {"sha": "a47439b9ba96c6a17209c40d603d57292fae7aa9", "filename": "src/tools/rustfmt/Configurations.md", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2FConfigurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2FConfigurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FConfigurations.md?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -930,6 +930,8 @@ fn add_one(x: i32) -> i32 {\n \n Format generated files. A file is considered generated\n if any of the first five lines contain a `@generated` comment marker.\n+By default, generated files are reformatted, i. e. `@generated` marker is ignored.\n+This option is currently ignored for stdin (`@generated` in stdin is ignored.)\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n@@ -2198,13 +2200,47 @@ specific version of rustfmt is used in your CI, use this option.\n - **Possible values**: any published version (e.g. `\"0.3.8\"`)\n - **Stable**: No (tracking issue: [#3386](https://github.com/rust-lang/rustfmt/issues/3386))\n \n+## `short_array_element_width_threshold`\n+\n+The width threshold for an array element to be considered \"short\".\n+\n+The layout of an array is dependent on the length of each of its elements. \n+If the length of every element in an array is below this threshold (all elements are \"short\") then the array can be formatted in the mixed/compressed style, but if any one element has a length that exceeds this threshold then the array elements will have to be formatted vertically.\n+\n+- **Default value**: `10`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+#### `10` (default):\n+```rust\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000,\n+        0xaaaaaaaaaaaaaaaa,\n+        0xbbbbbbbbbbbbbbbb,\n+        0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}\n+```\n+#### `20`:\n+```rust\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbbbbbbbbbbbbbbbb, 0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}\n+```\n+See also [`max_width`](#max_width).\n+\n ## `skip_children`\n \n Don't reformat out of line modules\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: [#3389](https://github.com/rust-lang/rustfmt/issues/3386))\n+- **Stable**: No (tracking issue: [#3389](https://github.com/rust-lang/rustfmt/issues/3389))\n \n ## `single_line_if_else_max_width`\n "}, {"sha": "f5cba87b07b678a47efd2d29bd3bff6278fa5bdd", "filename": "src/tools/rustfmt/config_proc_macro/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fconfig_proc_macro%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fconfig_proc_macro%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fconfig_proc_macro%2Fsrc%2Futils.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -22,10 +22,10 @@ pub fn is_unit(v: &syn::Variant) -> bool {\n #[cfg(feature = \"debug-with-rustfmt\")]\n /// Pretty-print the output of proc macro using rustfmt.\n pub fn debug_with_rustfmt(input: &TokenStream) {\n-    use std::io::Write;\n-    use std::process::{Command, Stdio};\n     use std::env;\n     use std::ffi::OsStr;\n+    use std::io::Write;\n+    use std::process::{Command, Stdio};\n \n     let rustfmt_var = env::var_os(\"RUSTFMT\");\n     let rustfmt = match &rustfmt_var {"}, {"sha": "94b57d506c20b0e86839ba819440b76cbb49de15", "filename": "src/tools/rustfmt/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Frust-toolchain?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-29\"\n+channel = \"nightly-2022-03-27\"\n components = [\"rustc-dev\"]"}, {"sha": "befe12ae2c4cd7f6d80fb207cc3856464d6ef463", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -389,6 +389,10 @@ impl Rewrite for [ast::Attribute] {\n         let mut attrs = self;\n         let mut result = String::new();\n \n+        // Determine if the source text is annotated with `#[rustfmt::skip::attributes(derive)]`\n+        // or `#![rustfmt::skip::attributes(derive)]`\n+        let skip_derives = context.skip_context.skip_attribute(\"derive\");\n+\n         // This is not just a simple map because we need to handle doc comments\n         // (where we take as many doc comment attributes as possible) and possibly\n         // merging derives into a single attribute.\n@@ -431,7 +435,7 @@ impl Rewrite for [ast::Attribute] {\n             }\n \n             // Handle derives if we will merge them.\n-            if context.config.merge_derives() && is_derive(&attrs[0]) {\n+            if !skip_derives && context.config.merge_derives() && is_derive(&attrs[0]) {\n                 let derives = take_while_with_pred(context, attrs, is_derive);\n                 let derive_str = format_derive(derives, shape, context)?;\n                 result.push_str(&derive_str);"}, {"sha": "ad10b9ede608fdb1da2ed45493d4d6696716de79", "filename": "src/tools/rustfmt/src/bin/main.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     let exit_code = match execute(&opts) {\n         Ok(code) => code,\n         Err(e) => {\n-            eprintln!(\"{}\", e);\n+            eprintln!(\"{:#}\", e);\n             1\n         }\n     };\n@@ -74,14 +74,10 @@ pub enum OperationError {\n     /// An io error during reading or writing.\n     #[error(\"{0}\")]\n     IoError(IoError),\n-    /// Attempt to use --check with stdin, which isn't currently\n-    /// supported.\n-    #[error(\"The `--check` option is not supported with standard input.\")]\n-    CheckWithStdin,\n-    /// Attempt to use --emit=json with stdin, which isn't currently\n-    /// supported.\n-    #[error(\"Using `--emit` other than stdout is not supported with standard input.\")]\n-    EmitWithStdin,\n+    /// Attempt to use --emit with a mode which is not currently\n+    /// supported with stdandard input.\n+    #[error(\"Emit mode {0} not supported with standard output.\")]\n+    StdinBadEmit(EmitMode),\n }\n \n impl From<IoError> for OperationError {\n@@ -255,15 +251,20 @@ fn format_string(input: String, options: GetOptsOptions) -> Result<i32> {\n     let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n     if options.check {\n-        return Err(OperationError::CheckWithStdin.into());\n-    }\n-    if let Some(emit_mode) = options.emit_mode {\n-        if emit_mode != EmitMode::Stdout {\n-            return Err(OperationError::EmitWithStdin.into());\n+        config.set().emit_mode(EmitMode::Diff);\n+    } else {\n+        match options.emit_mode {\n+            // Emit modes which work with standard input\n+            // None means default, which is Stdout.\n+            None | Some(EmitMode::Stdout) | Some(EmitMode::Checkstyle) | Some(EmitMode::Json) => {}\n+            Some(emit_mode) => {\n+                return Err(OperationError::StdinBadEmit(emit_mode).into());\n+            }\n         }\n+        config\n+            .set()\n+            .emit_mode(options.emit_mode.unwrap_or(EmitMode::Stdout));\n     }\n-    // emit mode is always Stdout for Stdin.\n-    config.set().emit_mode(EmitMode::Stdout);\n     config.set().verbose(Verbosity::Quiet);\n \n     // parse file_lines\n@@ -393,9 +394,8 @@ fn print_usage_to_stdout(opts: &Options, reason: &str) {\n         format!(\"{}\\n\\n\", reason)\n     };\n     let msg = format!(\n-        \"{}Format Rust code\\n\\nusage: {} [options] <file>...\",\n-        sep,\n-        env::args_os().next().unwrap().to_string_lossy()\n+        \"{}Format Rust code\\n\\nusage: rustfmt [options] <file>...\",\n+        sep\n     );\n     println!(\"{}\", opts.usage(&msg));\n }"}, {"sha": "8cb7b4585ecb27c2d54f7149034ba5c36037a358", "filename": "src/tools/rustfmt/src/cargo-fmt/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -387,8 +387,7 @@ fn get_targets_root_only(\n                         .unwrap_or_default()\n                         == current_dir_manifest\n             })\n-            .map(|p| p.targets)\n-            .flatten()\n+            .flat_map(|p| p.targets)\n             .collect(),\n     };\n "}, {"sha": "f9d8a0fa70c00fb6538e76c42af0698d7e2a043b", "filename": "src/tools/rustfmt/src/comment.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -432,36 +432,49 @@ impl CodeBlockAttribute {\n \n /// Block that is formatted as an item.\n ///\n-/// An item starts with either a star `*` or a dash `-`. Different level of indentation are\n-/// handled by shrinking the shape accordingly.\n+/// An item starts with either a star `*` a dash `-` or a greater-than `>`.\n+/// Different level of indentation are handled by shrinking the shape accordingly.\n struct ItemizedBlock {\n     /// the lines that are identified as part of an itemized block\n     lines: Vec<String>,\n-    /// the number of whitespaces up to the item sigil\n+    /// the number of characters (typically whitespaces) up to the item sigil\n     indent: usize,\n     /// the string that marks the start of an item\n     opener: String,\n-    /// sequence of whitespaces to prefix new lines that are part of the item\n+    /// sequence of characters (typically whitespaces) to prefix new lines that are part of the item\n     line_start: String,\n }\n \n impl ItemizedBlock {\n     /// Returns `true` if the line is formatted as an item\n     fn is_itemized_line(line: &str) -> bool {\n         let trimmed = line.trim_start();\n-        trimmed.starts_with(\"* \") || trimmed.starts_with(\"- \")\n+        trimmed.starts_with(\"* \") || trimmed.starts_with(\"- \") || trimmed.starts_with(\"> \")\n     }\n \n     /// Creates a new ItemizedBlock described with the given line.\n     /// The `is_itemized_line` needs to be called first.\n     fn new(line: &str) -> ItemizedBlock {\n         let space_to_sigil = line.chars().take_while(|c| c.is_whitespace()).count();\n-        let indent = space_to_sigil + 2;\n+        // +2 = '* ', which will add the appropriate amount of whitespace to keep itemized\n+        // content formatted correctly.\n+        let mut indent = space_to_sigil + 2;\n+        let mut line_start = \" \".repeat(indent);\n+\n+        // Markdown blockquote start with a \"> \"\n+        if line.trim_start().starts_with(\">\") {\n+            // remove the original +2 indent because there might be multiple nested block quotes\n+            // and it's easier to reason about the final indent by just taking the length\n+            // of th new line_start. We update the indent because it effects the max width\n+            // of each formatted line.\n+            line_start = itemized_block_quote_start(line, line_start, 2);\n+            indent = line_start.len();\n+        }\n         ItemizedBlock {\n             lines: vec![line[indent..].to_string()],\n             indent,\n             opener: line[..indent].to_string(),\n-            line_start: \" \".repeat(indent),\n+            line_start,\n         }\n     }\n \n@@ -504,6 +517,25 @@ impl ItemizedBlock {\n     }\n }\n \n+/// Determine the line_start when formatting markdown block quotes.\n+/// The original line_start likely contains indentation (whitespaces), which we'd like to\n+/// replace with '> ' characters.\n+fn itemized_block_quote_start(line: &str, mut line_start: String, remove_indent: usize) -> String {\n+    let quote_level = line\n+        .chars()\n+        .take_while(|c| !c.is_alphanumeric())\n+        .fold(0, |acc, c| if c == '>' { acc + 1 } else { acc });\n+\n+    for _ in 0..remove_indent {\n+        line_start.pop();\n+    }\n+\n+    for _ in 0..quote_level {\n+        line_start.push_str(\"> \")\n+    }\n+    line_start\n+}\n+\n struct CommentRewrite<'a> {\n     result: String,\n     code_block_buffer: String,\n@@ -651,6 +683,7 @@ impl<'a> CommentRewrite<'a> {\n         i: usize,\n         line: &'a str,\n         has_leading_whitespace: bool,\n+        is_doc_comment: bool,\n     ) -> bool {\n         let num_newlines = count_newlines(orig);\n         let is_last = i == num_newlines;\n@@ -757,10 +790,19 @@ impl<'a> CommentRewrite<'a> {\n             }\n         }\n \n-        if self.fmt.config.wrap_comments()\n+        let is_markdown_header_doc_comment = is_doc_comment && line.starts_with(\"#\");\n+\n+        // We only want to wrap the comment if:\n+        // 1) wrap_comments = true is configured\n+        // 2) The comment is not the start of a markdown header doc comment\n+        // 3) The comment width exceeds the shape's width\n+        // 4) No URLS were found in the commnet\n+        let should_wrap_comment = self.fmt.config.wrap_comments()\n+            && !is_markdown_header_doc_comment\n             && unicode_str_width(line) > self.fmt.shape.width\n-            && !has_url(line)\n-        {\n+            && !has_url(line);\n+\n+        if should_wrap_comment {\n             match rewrite_string(line, &self.fmt, self.max_width) {\n                 Some(ref s) => {\n                     self.is_prev_line_multi_line = s.contains('\\n');\n@@ -850,7 +892,7 @@ fn rewrite_comment_inner(\n         });\n \n     for (i, (line, has_leading_whitespace)) in lines.enumerate() {\n-        if rewriter.handle_line(orig, i, line, has_leading_whitespace) {\n+        if rewriter.handle_line(orig, i, line, has_leading_whitespace, is_doc_comment) {\n             break;\n         }\n     }"}, {"sha": "e4e51a3f3b40927e05b2021c4e259a9f66a30d6a", "filename": "src/tools/rustfmt/src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Ffile_lines.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -39,7 +39,7 @@ impl fmt::Display for FileName {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             FileName::Real(p) => write!(f, \"{}\", p.to_str().unwrap()),\n-            FileName::Stdin => write!(f, \"stdin\"),\n+            FileName::Stdin => write!(f, \"<stdin>\"),\n         }\n     }\n }"}, {"sha": "18e1854612bf79de163227e7c79d572505bfc206", "filename": "src/tools/rustfmt/src/config/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Fmod.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -106,6 +106,8 @@ create_config! {\n     // Misc.\n     remove_nested_parens: bool, true, true, \"Remove nested parens\";\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls\";\n+    short_array_element_width_threshold: usize, 10, true,\n+        \"Width threshold for an array element to be considered short\";\n     overflow_delimited_expr: bool, false, false,\n         \"Allow trailing bracket/brace delimited expressions to overflow\";\n     struct_field_align_threshold: usize, 0, false,\n@@ -364,7 +366,9 @@ fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n             // find the project file yet, and continue searching.\n             Err(e) => {\n                 if e.kind() != ErrorKind::NotFound {\n-                    return Err(e);\n+                    let ctx = format!(\"Failed to get metadata for config file {:?}\", &config_file);\n+                    let err = anyhow::Error::new(e).context(ctx);\n+                    return Err(Error::new(ErrorKind::Other, err));\n                 }\n             }\n             _ => {}\n@@ -589,6 +593,7 @@ spaces_around_ranges = false\n binop_separator = \"Front\"\n remove_nested_parens = true\n combine_control_expr = true\n+short_array_element_width_threshold = 10\n overflow_delimited_expr = false\n struct_field_align_threshold = 0\n enum_discrim_align_threshold = 0"}, {"sha": "545b259979d911d04b8200a3459fbe2b5cfce07c", "filename": "src/tools/rustfmt/src/emitter/checkstyle.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fcheckstyle.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -2,7 +2,6 @@ use self::xml::XmlEscaped;\n use super::*;\n use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n use std::io::{self, Write};\n-use std::path::Path;\n \n mod xml;\n \n@@ -30,7 +29,6 @@ impl Emitter for CheckstyleEmitter {\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 0;\n-        let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         output_checkstyle_file(output, filename, diff)?;\n         Ok(EmitterResult::default())\n@@ -39,13 +37,13 @@ impl Emitter for CheckstyleEmitter {\n \n pub(crate) fn output_checkstyle_file<T>(\n     mut writer: T,\n-    filename: &Path,\n+    filename: &FileName,\n     diff: Vec<Mismatch>,\n ) -> Result<(), io::Error>\n where\n     T: Write,\n {\n-    write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n+    write!(writer, r#\"<file name=\"{}\">\"#, filename)?;\n     for mismatch in diff {\n         let begin_line = mismatch.line_number;\n         let mut current_line;\n@@ -77,7 +75,11 @@ mod tests {\n     fn emits_empty_record_on_file_with_no_mismatches() {\n         let file_name = \"src/well_formatted.rs\";\n         let mut writer = Vec::new();\n-        let _ = output_checkstyle_file(&mut writer, &PathBuf::from(file_name), vec![]);\n+        let _ = output_checkstyle_file(\n+            &mut writer,\n+            &FileName::Real(PathBuf::from(file_name)),\n+            vec![],\n+        );\n         assert_eq!(\n             &writer[..],\n             format!(r#\"<file name=\"{}\"></file>\"#, file_name).as_bytes()"}, {"sha": "5e1f1344656052dc2b5c26306bed3d8e414c77f1", "filename": "src/tools/rustfmt/src/emitter/diff.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -28,7 +28,7 @@ impl Emitter for DiffEmitter {\n \n         if has_diff {\n             if self.config.print_misformatted_file_names() {\n-                writeln!(output, \"{}\", ensure_real_path(filename).display())?;\n+                writeln!(output, \"{}\", filename)?;\n             } else {\n                 print_diff(\n                     mismatch,\n@@ -40,8 +40,7 @@ impl Emitter for DiffEmitter {\n             // This occurs when the only difference between the original and formatted values\n             // is the newline style. This happens because The make_diff function compares the\n             // original and formatted values line by line, independent of line endings.\n-            let file_path = ensure_real_path(filename);\n-            writeln!(output, \"Incorrect newline style in {}\", file_path.display())?;\n+            writeln!(output, \"Incorrect newline style in {}\", filename)?;\n             return Ok(EmitterResult { has_diff: true });\n         }\n "}, {"sha": "c7f68d4675a67beb10d5af09bdd779dc7dbecb66", "filename": "src/tools/rustfmt/src/emitter/json.rs", "status": "modified", "additions": 92, "deletions": 95, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fjson.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -3,14 +3,13 @@ use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n use serde::Serialize;\n use serde_json::to_string as to_json_string;\n use std::io::{self, Write};\n-use std::path::Path;\n \n #[derive(Debug, Default)]\n pub(crate) struct JsonEmitter {\n-    num_files: u32,\n+    mismatched_files: Vec<MismatchedFile>,\n }\n \n-#[derive(Debug, Default, Serialize)]\n+#[derive(Debug, Default, PartialEq, Serialize)]\n struct MismatchedBlock {\n     original_begin_line: u32,\n     original_end_line: u32,\n@@ -20,98 +19,88 @@ struct MismatchedBlock {\n     expected: String,\n }\n \n-#[derive(Debug, Default, Serialize)]\n+#[derive(Debug, Default, PartialEq, Serialize)]\n struct MismatchedFile {\n     name: String,\n     mismatches: Vec<MismatchedBlock>,\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_header(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n-        write!(output, \"[\")?;\n-        Ok(())\n-    }\n-\n     fn emit_footer(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n-        write!(output, \"]\")?;\n-        Ok(())\n+        writeln!(output, \"{}\", &to_json_string(&self.mismatched_files)?)\n     }\n \n     fn emit_formatted_file(\n         &mut self,\n-        output: &mut dyn Write,\n+        _output: &mut dyn Write,\n         FormattedFile {\n             filename,\n             original_text,\n             formatted_text,\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 0;\n-        let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         let has_diff = !diff.is_empty();\n \n         if has_diff {\n-            output_json_file(output, filename, diff, self.num_files)?;\n-            self.num_files += 1;\n+            self.add_misformatted_file(filename, diff)?;\n         }\n \n         Ok(EmitterResult { has_diff })\n     }\n }\n \n-fn output_json_file<T>(\n-    mut writer: T,\n-    filename: &Path,\n-    diff: Vec<Mismatch>,\n-    num_emitted_files: u32,\n-) -> Result<(), io::Error>\n-where\n-    T: Write,\n-{\n-    let mut mismatches = vec![];\n-    for mismatch in diff {\n-        let original_begin_line = mismatch.line_number_orig;\n-        let expected_begin_line = mismatch.line_number;\n-        let mut original_end_line = original_begin_line;\n-        let mut expected_end_line = expected_begin_line;\n-        let mut original_line_counter = 0;\n-        let mut expected_line_counter = 0;\n-        let mut original_lines = vec![];\n-        let mut expected_lines = vec![];\n+impl JsonEmitter {\n+    fn add_misformatted_file(\n+        &mut self,\n+        filename: &FileName,\n+        diff: Vec<Mismatch>,\n+    ) -> Result<(), io::Error> {\n+        let mut mismatches = vec![];\n+        for mismatch in diff {\n+            let original_begin_line = mismatch.line_number_orig;\n+            let expected_begin_line = mismatch.line_number;\n+            let mut original_end_line = original_begin_line;\n+            let mut expected_end_line = expected_begin_line;\n+            let mut original_line_counter = 0;\n+            let mut expected_line_counter = 0;\n+            let mut original = String::new();\n+            let mut expected = String::new();\n \n-        for line in mismatch.lines {\n-            match line {\n-                DiffLine::Expected(msg) => {\n-                    expected_end_line = expected_begin_line + expected_line_counter;\n-                    expected_line_counter += 1;\n-                    expected_lines.push(msg)\n-                }\n-                DiffLine::Resulting(msg) => {\n-                    original_end_line = original_begin_line + original_line_counter;\n-                    original_line_counter += 1;\n-                    original_lines.push(msg)\n+            for line in mismatch.lines {\n+                match line {\n+                    DiffLine::Expected(msg) => {\n+                        expected_end_line = expected_begin_line + expected_line_counter;\n+                        expected_line_counter += 1;\n+                        expected.push_str(&msg);\n+                        expected.push('\\n');\n+                    }\n+                    DiffLine::Resulting(msg) => {\n+                        original_end_line = original_begin_line + original_line_counter;\n+                        original_line_counter += 1;\n+                        original.push_str(&msg);\n+                        original.push('\\n');\n+                    }\n+                    DiffLine::Context(_) => continue,\n                 }\n-                DiffLine::Context(_) => continue,\n             }\n-        }\n \n-        mismatches.push(MismatchedBlock {\n-            original_begin_line,\n-            original_end_line,\n-            expected_begin_line,\n-            expected_end_line,\n-            original: original_lines.join(\"\\n\"),\n-            expected: expected_lines.join(\"\\n\"),\n+            mismatches.push(MismatchedBlock {\n+                original_begin_line,\n+                original_end_line,\n+                expected_begin_line,\n+                expected_end_line,\n+                original,\n+                expected,\n+            });\n+        }\n+        self.mismatched_files.push(MismatchedFile {\n+            name: format!(\"{}\", filename),\n+            mismatches,\n         });\n+        Ok(())\n     }\n-    let json = to_json_string(&MismatchedFile {\n-        name: String::from(filename.to_str().unwrap()),\n-        mismatches,\n-    })?;\n-    let prefix = if num_emitted_files > 0 { \",\" } else { \"\" };\n-    write!(writer, \"{}{}\", prefix, &json)?;\n-    Ok(())\n }\n \n #[cfg(test)]\n@@ -122,6 +111,9 @@ mod tests {\n \n     #[test]\n     fn expected_line_range_correct_when_single_line_split() {\n+        let mut emitter = JsonEmitter {\n+            mismatched_files: vec![],\n+        };\n         let file = \"foo/bar.rs\";\n         let mismatched_file = MismatchedFile {\n             name: String::from(file),\n@@ -130,8 +122,8 @@ mod tests {\n                 original_end_line: 79,\n                 expected_begin_line: 79,\n                 expected_end_line: 82,\n-                original: String::from(\"fn Foo<T>() where T: Bar {\"),\n-                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"),\n+                original: String::from(\"fn Foo<T>() where T: Bar {\\n\"),\n+                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\\n\"),\n             }],\n         };\n         let mismatch = Mismatch {\n@@ -146,14 +138,19 @@ mod tests {\n             ],\n         };\n \n-        let mut writer = Vec::new();\n-        let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n-        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+        let _ = emitter\n+            .add_misformatted_file(&FileName::Real(PathBuf::from(file)), vec![mismatch])\n+            .unwrap();\n+\n+        assert_eq!(emitter.mismatched_files.len(), 1);\n+        assert_eq!(emitter.mismatched_files[0], mismatched_file);\n     }\n \n     #[test]\n     fn context_lines_ignored() {\n+        let mut emitter = JsonEmitter {\n+            mismatched_files: vec![],\n+        };\n         let file = \"src/lib.rs\";\n         let mismatched_file = MismatchedFile {\n             name: String::from(file),\n@@ -163,10 +160,10 @@ mod tests {\n                 expected_begin_line: 5,\n                 expected_end_line: 5,\n                 original: String::from(\n-                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\",\n+                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\\n\",\n                 ),\n                 expected: String::from(\n-                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\",\n+                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\\n\",\n                 ),\n             }],\n         };\n@@ -186,10 +183,12 @@ mod tests {\n             ],\n         };\n \n-        let mut writer = Vec::new();\n-        let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n-        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+        let _ = emitter\n+            .add_misformatted_file(&FileName::Real(PathBuf::from(file)), vec![mismatch])\n+            .unwrap();\n+\n+        assert_eq!(emitter.mismatched_files.len(), 1);\n+        assert_eq!(emitter.mismatched_files[0], mismatched_file);\n     }\n \n     #[test]\n@@ -209,7 +208,7 @@ mod tests {\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n         assert_eq!(result.has_diff, false);\n-        assert_eq!(&writer[..], \"[]\".as_bytes());\n+        assert_eq!(&writer[..], \"[]\\n\".as_bytes());\n     }\n \n     #[test]\n@@ -255,34 +254,34 @@ mod tests {\n             )\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n-        let exp_json = to_json_string(&MismatchedFile {\n+        let exp_json = to_json_string(&vec![MismatchedFile {\n             name: String::from(file_name),\n             mismatches: vec![\n                 MismatchedBlock {\n                     original_begin_line: 2,\n                     original_end_line: 2,\n                     expected_begin_line: 2,\n                     expected_end_line: 2,\n-                    original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n-                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                    original: String::from(\"println!(\\\"Hello, world!\\\");\\n\"),\n+                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\\n\"),\n                 },\n                 MismatchedBlock {\n                     original_begin_line: 7,\n                     original_end_line: 10,\n                     expected_begin_line: 7,\n                     expected_end_line: 10,\n                     original: String::from(\n-                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\",\n+                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\\n\",\n                     ),\n                     expected: String::from(\n-                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\",\n+                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\\n\",\n                     ),\n                 },\n             ],\n-        })\n+        }])\n         .unwrap();\n         assert_eq!(result.has_diff, true);\n-        assert_eq!(&writer[..], format!(\"[{}]\", exp_json).as_bytes());\n+        assert_eq!(&writer[..], format!(\"{}\\n\", exp_json).as_bytes());\n     }\n \n     #[test]\n@@ -317,33 +316,31 @@ mod tests {\n             )\n             .unwrap();\n         let _ = emitter.emit_footer(&mut writer);\n-        let exp_bin_json = to_json_string(&MismatchedFile {\n+        let exp_bin = MismatchedFile {\n             name: String::from(bin_file),\n             mismatches: vec![MismatchedBlock {\n                 original_begin_line: 2,\n                 original_end_line: 2,\n                 expected_begin_line: 2,\n                 expected_end_line: 2,\n-                original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n-                expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                original: String::from(\"println!(\\\"Hello, world!\\\");\\n\"),\n+                expected: String::from(\"    println!(\\\"Hello, world!\\\");\\n\"),\n             }],\n-        })\n-        .unwrap();\n-        let exp_lib_json = to_json_string(&MismatchedFile {\n+        };\n+\n+        let exp_lib = MismatchedFile {\n             name: String::from(lib_file),\n             mismatches: vec![MismatchedBlock {\n                 original_begin_line: 2,\n                 original_end_line: 2,\n                 expected_begin_line: 2,\n                 expected_end_line: 2,\n-                original: String::from(\"println!(\\\"Greetings!\\\");\"),\n-                expected: String::from(\"    println!(\\\"Greetings!\\\");\"),\n+                original: String::from(\"println!(\\\"Greetings!\\\");\\n\"),\n+                expected: String::from(\"    println!(\\\"Greetings!\\\");\\n\"),\n             }],\n-        })\n-        .unwrap();\n-        assert_eq!(\n-            &writer[..],\n-            format!(\"[{},{}]\", exp_bin_json, exp_lib_json).as_bytes()\n-        );\n+        };\n+\n+        let exp_json = to_json_string(&vec![exp_bin, exp_lib]).unwrap();\n+        assert_eq!(&writer[..], format!(\"{}\\n\", exp_json).as_bytes());\n     }\n }"}, {"sha": "90406cdb95e2b1474440593fce77698df58b08c3", "filename": "src/tools/rustfmt/src/format_report_formatter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fformat_report_formatter.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -20,6 +20,7 @@ impl<'a> FormatReportFormatterBuilder<'a> {\n     }\n \n     /// Enables colors and formatting in the output.\n+    #[must_use]\n     pub fn enable_colors(self, enable_colors: bool) -> Self {\n         Self {\n             enable_colors,"}, {"sha": "d955949496a67c7214902c39cc174952e6fb883c", "filename": "src/tools/rustfmt/src/ignore_path.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fignore_path.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -32,16 +32,15 @@ impl IgnorePathSet {\n \n #[cfg(test)]\n mod test {\n-    use std::path::{Path, PathBuf};\n-\n-    use crate::config::{Config, FileName};\n-    use crate::ignore_path::IgnorePathSet;\n-\n     use rustfmt_config_proc_macro::nightly_only_test;\n \n     #[nightly_only_test]\n     #[test]\n     fn test_ignore_path_set() {\n+        use crate::config::{Config, FileName};\n+        use crate::ignore_path::IgnorePathSet;\n+        use std::path::{Path, PathBuf};\n+\n         let config =\n             Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#, Path::new(\"\")).unwrap();\n         let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();"}, {"sha": "0231980948686e2b691be3de84ae8a92ea4308ba", "filename": "src/tools/rustfmt/src/imports.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -190,13 +190,17 @@ pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>, merge_by: SharedPrefix) -\n             continue;\n         }\n \n-        for flattened in use_tree.flatten() {\n+        for mut flattened in use_tree.flatten() {\n             if let Some(tree) = result\n                 .iter_mut()\n                 .find(|tree| tree.share_prefix(&flattened, merge_by))\n             {\n                 tree.merge(&flattened, merge_by);\n             } else {\n+                // If this is the first tree with this prefix, handle potential trailing ::self\n+                if merge_by == SharedPrefix::Module {\n+                    flattened = flattened.nest_trailing_self();\n+                }\n                 result.push(flattened);\n             }\n         }\n@@ -208,17 +212,7 @@ pub(crate) fn flatten_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n     use_trees\n         .into_iter()\n         .flat_map(UseTree::flatten)\n-        .map(|mut tree| {\n-            // If a path ends in `::self`, rewrite it to `::{self}`.\n-            if let Some(UseSegment::Slf(..)) = tree.path.last() {\n-                let self_segment = tree.path.pop().unwrap();\n-                tree.path.push(UseSegment::List(vec![UseTree::from_path(\n-                    vec![self_segment],\n-                    DUMMY_SP,\n-                )]));\n-            }\n-            tree\n-        })\n+        .map(UseTree::nest_trailing_self)\n         .collect()\n }\n \n@@ -238,7 +232,8 @@ impl fmt::Display for UseSegment {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             UseSegment::Glob => write!(f, \"*\"),\n-            UseSegment::Ident(ref s, _) => write!(f, \"{}\", s),\n+            UseSegment::Ident(ref s, Some(ref alias)) => write!(f, \"{} as {}\", s, alias),\n+            UseSegment::Ident(ref s, None) => write!(f, \"{}\", s),\n             UseSegment::Slf(..) => write!(f, \"self\"),\n             UseSegment::Super(..) => write!(f, \"super\"),\n             UseSegment::Crate(..) => write!(f, \"crate\"),\n@@ -622,7 +617,8 @@ impl UseTree {\n     fn merge(&mut self, other: &UseTree, merge_by: SharedPrefix) {\n         let mut prefix = 0;\n         for (a, b) in self.path.iter().zip(other.path.iter()) {\n-            if a.equal_except_alias(b) {\n+            // only discard the alias at the root of the tree\n+            if (prefix == 0 && a.equal_except_alias(b)) || a == b {\n                 prefix += 1;\n             } else {\n                 break;\n@@ -633,6 +629,18 @@ impl UseTree {\n             self.span = self.span.to(other.span);\n         }\n     }\n+\n+    /// If this tree ends in `::self`, rewrite it to `::{self}`.\n+    fn nest_trailing_self(mut self) -> UseTree {\n+        if let Some(UseSegment::Slf(..)) = self.path.last() {\n+            let self_segment = self.path.pop().unwrap();\n+            self.path.push(UseSegment::List(vec![UseTree::from_path(\n+                vec![self_segment],\n+                DUMMY_SP,\n+            )]));\n+        }\n+        self\n+    }\n }\n \n fn merge_rest(\n@@ -1309,4 +1317,24 @@ mod test {\n                 < parse_use_tree(\"std::cmp::{b, e, g, f}\").normalize()\n         );\n     }\n+\n+    #[test]\n+    fn test_use_tree_nest_trailing_self() {\n+        assert_eq!(\n+            parse_use_tree(\"a::b::self\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::{self}\")\n+        );\n+        assert_eq!(\n+            parse_use_tree(\"a::b::c\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::c\")\n+        );\n+        assert_eq!(\n+            parse_use_tree(\"a::b::{c, d}\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::{c, d}\")\n+        );\n+        assert_eq!(\n+            parse_use_tree(\"a::b::{self, c}\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::{self, c}\")\n+        );\n+    }\n }"}, {"sha": "92f423bbb6275d647e6116a5ca6f6d1c48e8693d", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -1273,7 +1273,13 @@ pub(crate) fn format_struct_struct(\n     result.push_str(&header_str);\n \n     let header_hi = struct_parts.ident.span.hi();\n-    let body_lo = context.snippet_provider.span_after(span, \"{\");\n+    let body_lo = if let Some(generics) = struct_parts.generics {\n+        // Adjust the span to start at the end of the generic arguments before searching for the '{'\n+        let span = span.with_lo(generics.span.hi());\n+        context.snippet_provider.span_after(span, \"{\")\n+    } else {\n+        context.snippet_provider.span_after(span, \"{\")\n+    };\n \n     let generics_str = match struct_parts.generics {\n         Some(g) => format_generics(\n@@ -1377,17 +1383,21 @@ fn format_empty_struct_or_tuple(\n         result.push_str(&offset.to_string_with_newline(context.config))\n     }\n     result.push_str(opener);\n-    match rewrite_missing_comment(span, Shape::indented(offset, context.config), context) {\n+\n+    // indented shape for proper indenting of multi-line comments\n+    let shape = Shape::indented(offset.block_indent(context.config), context.config);\n+    match rewrite_missing_comment(span, shape, context) {\n         Some(ref s) if s.is_empty() => (),\n         Some(ref s) => {\n-            if !is_single_line(s) || first_line_contains_single_line_comment(s) {\n+            let is_multi_line = !is_single_line(s);\n+            if is_multi_line || first_line_contains_single_line_comment(s) {\n                 let nested_indent_str = offset\n                     .block_indent(context.config)\n                     .to_string_with_newline(context.config);\n                 result.push_str(&nested_indent_str);\n             }\n             result.push_str(s);\n-            if last_line_contains_single_line_comment(s) {\n+            if is_multi_line || last_line_contains_single_line_comment(s) {\n                 result.push_str(&offset.to_string_with_newline(context.config));\n             }\n         }\n@@ -2046,9 +2056,15 @@ impl Rewrite for ast::Param {\n                 {\n                     result.push_str(&ty_str);\n                 } else {\n+                    let prev_str = if param_attrs_result.is_empty() {\n+                        param_attrs_result\n+                    } else {\n+                        param_attrs_result + &shape.to_string_with_newline(context.config)\n+                    };\n+\n                     result = combine_strs_with_missing_comments(\n                         context,\n-                        &(param_attrs_result + &shape.to_string_with_newline(context.config)),\n+                        &prev_str,\n                         param_name,\n                         span,\n                         shape,"}, {"sha": "e87850507824f03b7907f738bd5c0f8251643795", "filename": "src/tools/rustfmt/src/lists.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -611,15 +611,30 @@ pub(crate) fn extract_post_comment(\n     post_snippet: &str,\n     comment_end: usize,\n     separator: &str,\n+    is_last: bool,\n ) -> Option<String> {\n     let white_space: &[_] = &[' ', '\\t'];\n \n     // Cleanup post-comment: strip separators and whitespace.\n     let post_snippet = post_snippet[..comment_end].trim();\n+\n+    let last_inline_comment_ends_with_separator = if is_last {\n+        if let Some(line) = post_snippet.lines().last() {\n+            line.ends_with(separator) && line.trim().starts_with(\"//\")\n+        } else {\n+            false\n+        }\n+    } else {\n+        false\n+    };\n+\n     let post_snippet_trimmed = if post_snippet.starts_with(|c| c == ',' || c == ':') {\n         post_snippet[1..].trim_matches(white_space)\n     } else if let Some(stripped) = post_snippet.strip_prefix(separator) {\n         stripped.trim_matches(white_space)\n+    } else if last_inline_comment_ends_with_separator {\n+        // since we're on the last item it's fine to keep any trailing separators in comments\n+        post_snippet.trim_matches(white_space)\n     }\n     // not comment or over two lines\n     else if post_snippet.ends_with(',')\n@@ -748,14 +763,12 @@ where\n                 .snippet_provider\n                 .span_to_snippet(mk_sp((self.get_hi)(&item), next_start))\n                 .unwrap_or(\"\");\n-            let comment_end = get_comment_end(\n-                post_snippet,\n-                self.separator,\n-                self.terminator,\n-                self.inner.peek().is_none(),\n-            );\n+            let is_last = self.inner.peek().is_none();\n+            let comment_end =\n+                get_comment_end(post_snippet, self.separator, self.terminator, is_last);\n             let new_lines = has_extra_newline(post_snippet, comment_end);\n-            let post_comment = extract_post_comment(post_snippet, comment_end, self.separator);\n+            let post_comment =\n+                extract_post_comment(post_snippet, comment_end, self.separator, is_last);\n \n             self.prev_span_end = (self.get_hi)(&item) + BytePos(comment_end as u32);\n "}, {"sha": "664f152e8be1d3ba2e7586b1acdbc6afcdcc42af", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -112,6 +112,7 @@ fn rewrite_macro_name(\n fn return_macro_parse_failure_fallback(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n+    position: MacroPosition,\n     span: Span,\n ) -> Option<String> {\n     // Mark this as a failure however we format it\n@@ -140,7 +141,11 @@ fn return_macro_parse_failure_fallback(\n     ));\n \n     // Return the snippet unmodified if the macro is not block-like\n-    Some(context.snippet(span).to_owned())\n+    let mut snippet = context.snippet(span).to_owned();\n+    if position == MacroPosition::Item {\n+        snippet.push(';');\n+    }\n+    Some(snippet)\n }\n \n pub(crate) fn rewrite_macro(\n@@ -152,7 +157,7 @@ pub(crate) fn rewrite_macro(\n ) -> Option<String> {\n     let should_skip = context\n         .skip_context\n-        .skip_macro(&context.snippet(mac.path.span).to_owned());\n+        .skip_macro(context.snippet(mac.path.span));\n     if should_skip {\n         None\n     } else {\n@@ -233,7 +238,12 @@ fn rewrite_macro_inner(\n     } = match parse_macro_args(context, ts, style, is_forced_bracket) {\n         Some(args) => args,\n         None => {\n-            return return_macro_parse_failure_fallback(context, shape.indent, mac.span());\n+            return return_macro_parse_failure_fallback(\n+                context,\n+                shape.indent,\n+                position,\n+                mac.span(),\n+            );\n         }\n     };\n "}, {"sha": "a65dc66f7972e06f3648025b18f5998cff209d64", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -81,6 +81,7 @@ pub struct ModuleResolutionError {\n     pub(crate) kind: ModuleResolutionErrorKind,\n }\n \n+/// Defines variants similar to those of [rustc_expand::module::ModError]\n #[derive(Debug, Error)]\n pub(crate) enum ModuleResolutionErrorKind {\n     /// Find a file that cannot be parsed.\n@@ -89,6 +90,12 @@ pub(crate) enum ModuleResolutionErrorKind {\n     /// File cannot be found.\n     #[error(\"{file} does not exist\")]\n     NotFound { file: PathBuf },\n+    /// File a.rs and a/mod.rs both exist\n+    #[error(\"file for module found at both {default_path:?} and {secondary_path:?}\")]\n+    MultipleCandidates {\n+        default_path: PathBuf,\n+        secondary_path: PathBuf,\n+    },\n }\n \n #[derive(Clone)]\n@@ -444,12 +451,31 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 }\n                 Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n             }\n-            Err(_) => Err(ModuleResolutionError {\n-                module: mod_name.to_string(),\n-                kind: ModuleResolutionErrorKind::NotFound {\n-                    file: self.directory.path.clone(),\n-                },\n-            }),\n+            Err(e) => match e {\n+                ModError::FileNotFound(_, default_path, _secondary_path) => {\n+                    Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::NotFound { file: default_path },\n+                    })\n+                }\n+                ModError::MultipleCandidates(_, default_path, secondary_path) => {\n+                    Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::MultipleCandidates {\n+                            default_path,\n+                            secondary_path,\n+                        },\n+                    })\n+                }\n+                ModError::ParserError(_)\n+                | ModError::CircularInclusion(_)\n+                | ModError::ModInBlock(_) => Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::ParseError {\n+                        file: self.directory.path.clone(),\n+                    },\n+                }),\n+            },\n         }\n     }\n \n@@ -458,6 +484,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.directory.path.push(path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n+            let id = id.as_str();\n             // We have to push on the current module name in the case of relative\n             // paths in order to ensure that any additional module paths from inline\n             // `mod x { ... }` come after the relative extension.\n@@ -468,9 +495,15 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 if let Some(ident) = relative.take() {\n                     // remove the relative offset\n                     self.directory.path.push(ident.as_str());\n+\n+                    // In the case where there is an x.rs and an ./x directory we want\n+                    // to prevent adding x twice. For example, ./x/x\n+                    if self.directory.path.exists() && !self.directory.path.join(id).exists() {\n+                        return;\n+                    }\n                 }\n             }\n-            self.directory.path.push(id.as_str());\n+            self.directory.path.push(id);\n         }\n     }\n "}, {"sha": "80aed998d7377d83c16925e2d0fe55ef5fa2f943", "filename": "src/tools/rustfmt/src/overflow.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -26,8 +26,6 @@ use crate::spanned::Spanned;\n use crate::types::{can_be_overflowed_type, SegmentParam};\n use crate::utils::{count_newlines, extra_offset, first_line_width, last_line_width, mk_sp};\n \n-const SHORT_ITEM_THRESHOLD: usize = 10;\n-\n /// A list of `format!`-like macros, that take a long format string and a list of arguments to\n /// format.\n ///\n@@ -572,7 +570,12 @@ impl<'a> Context<'a> {\n                             if one_line {\n                                 tactic = DefinitiveListTactic::SpecialMacro(num_args_before);\n                             };\n-                        } else if is_every_expr_simple(&self.items) && no_long_items(list_items) {\n+                        } else if is_every_expr_simple(&self.items)\n+                            && no_long_items(\n+                                list_items,\n+                                self.context.config.short_array_element_width_threshold(),\n+                            )\n+                        {\n                             tactic = DefinitiveListTactic::Mixed;\n                         }\n                     }\n@@ -755,9 +758,9 @@ fn shape_from_indent_style(\n     }\n }\n \n-fn no_long_items(list: &[ListItem]) -> bool {\n+fn no_long_items(list: &[ListItem], short_array_element_width_threshold: usize) -> bool {\n     list.iter()\n-        .all(|item| item.inner_as_ref().len() <= SHORT_ITEM_THRESHOLD)\n+        .all(|item| item.inner_as_ref().len() <= short_array_element_width_threshold)\n }\n \n /// In case special-case style is required, returns an offset from which we start horizontal layout."}, {"sha": "7571e6d078a7bfe029767be0a33f99b413f24489", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -12,6 +12,7 @@ use rustc_span::{\n \n use crate::config::file_lines::LineRange;\n use crate::ignore_path::IgnorePathSet;\n+use crate::parse::parser::{ModError, ModulePathSuccess};\n use crate::source_map::LineRangeUtils;\n use crate::utils::starts_with_newline;\n use crate::visitor::SnippetProvider;\n@@ -145,13 +146,33 @@ impl ParseSess {\n         })\n     }\n \n+    /// Determine the submodule path for the given module identifier.\n+    ///\n+    /// * `id` - The name of the module\n+    /// * `relative` - If Some(symbol), the symbol name is a directory relative to the dir_path.\n+    ///   If relative is Some, resolve the submodle at {dir_path}/{symbol}/{id}.rs\n+    ///   or {dir_path}/{symbol}/{id}/mod.rs. if None, resolve the module at {dir_path}/{id}.rs.\n+    /// *  `dir_path` - Module resolution will occur relative to this direcotry.\n     pub(crate) fn default_submod_path(\n         &self,\n         id: symbol::Ident,\n         relative: Option<symbol::Ident>,\n         dir_path: &Path,\n-    ) -> Result<rustc_expand::module::ModulePathSuccess, rustc_expand::module::ModError<'_>> {\n-        rustc_expand::module::default_submod_path(&self.parse_sess, id, relative, dir_path)\n+    ) -> Result<ModulePathSuccess, ModError<'_>> {\n+        rustc_expand::module::default_submod_path(&self.parse_sess, id, relative, dir_path).or_else(\n+            |e| {\n+                // If resloving a module relative to {dir_path}/{symbol} fails because a file\n+                // could not be found, then try to resolve the module relative to {dir_path}.\n+                // If we still can't find the module after searching for it in {dir_path},\n+                // surface the original error.\n+                if matches!(e, ModError::FileNotFound(..)) && relative.is_some() {\n+                    rustc_expand::module::default_submod_path(&self.parse_sess, id, None, dir_path)\n+                        .map_err(|_| e)\n+                } else {\n+                    Err(e)\n+                }\n+            },\n+        )\n     }\n \n     pub(crate) fn is_file_parsed(&self, path: &Path) -> bool {\n@@ -197,6 +218,15 @@ impl ParseSess {\n         self.parse_sess.source_map().lookup_char_pos(pos).line\n     }\n \n+    // TODO(calebcartwright): Preemptive, currently unused addition\n+    // that will be used to support formatting scenarios that take original\n+    // positions into account\n+    /// Determines whether two byte positions are in the same source line.\n+    #[allow(dead_code)]\n+    pub(crate) fn byte_pos_same_line(&self, a: BytePos, b: BytePos) -> bool {\n+        self.line_of_byte_pos(a) == self.line_of_byte_pos(b)\n+    }\n+\n     pub(crate) fn span_to_debug_info(&self, span: Span) -> String {\n         self.parse_sess.source_map().span_to_diagnostic_string(span)\n     }"}, {"sha": "2136cfeae1af107592aabbdf92d4aef98d104835", "filename": "src/tools/rustfmt/src/spanned.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fspanned.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -113,17 +113,10 @@ impl Spanned for ast::Param {\n \n impl Spanned for ast::GenericParam {\n     fn span(&self) -> Span {\n-        let lo = if let ast::GenericParamKind::Const {\n-            ty: _,\n-            kw_span,\n-            default: _,\n-        } = self.kind\n-        {\n-            kw_span.lo()\n-        } else if self.attrs.is_empty() {\n-            self.ident.span.lo()\n-        } else {\n-            self.attrs[0].span.lo()\n+        let lo = match self.kind {\n+            _ if !self.attrs.is_empty() => self.attrs[0].span.lo(),\n+            ast::GenericParamKind::Const { kw_span, .. } => kw_span.lo(),\n+            _ => self.ident.span.lo(),\n         };\n         let hi = if self.bounds.is_empty() {\n             self.ident.span.hi()"}, {"sha": "b65aa5b33b241b4a16f38719d9d39863e16626aa", "filename": "src/tools/rustfmt/src/string.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -278,6 +278,9 @@ fn break_string(max_width: usize, trim_end: bool, line_end: &str, input: &[&str]\n         }\n         cur_index\n     };\n+    if max_width_index_in_input == 0 {\n+        return SnippetState::EndOfInput(input.concat());\n+    }\n \n     // Find the position in input for breaking the string\n     if line_end.is_empty()\n@@ -301,7 +304,7 @@ fn break_string(max_width: usize, trim_end: bool, line_end: &str, input: &[&str]\n         return if trim_end {\n             SnippetState::LineEnd(input[..=url_index_end].concat(), index_plus_ws + 1)\n         } else {\n-            return SnippetState::LineEnd(input[..=index_plus_ws].concat(), index_plus_ws + 1);\n+            SnippetState::LineEnd(input[..=index_plus_ws].concat(), index_plus_ws + 1)\n         };\n     }\n "}, {"sha": "c8fda7c8556db9ea4f42704db5ad34dbb24d48d1", "filename": "src/tools/rustfmt/src/test/configuration_snippet.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fconfiguration_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fconfiguration_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fconfiguration_snippet.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -290,3 +290,33 @@ fn get_code_blocks() -> Vec<ConfigCodeBlock> {\n \n     code_blocks\n }\n+\n+#[test]\n+fn check_unstable_option_tracking_issue_numbers() {\n+    // Ensure that tracking issue links point to the correct issue number\n+    let tracking_issue =\n+        regex::Regex::new(r\"\\(tracking issue: \\[#(?P<number>\\d+)\\]\\((?P<link>\\S+)\\)\\)\")\n+            .expect(\"failed creating configuration pattern\");\n+\n+    let lines = BufReader::new(\n+        fs::File::open(Path::new(CONFIGURATIONS_FILE_NAME))\n+            .unwrap_or_else(|_| panic!(\"couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n+    )\n+    .lines()\n+    .map(Result::unwrap)\n+    .enumerate();\n+\n+    for (idx, line) in lines {\n+        if let Some(capture) = tracking_issue.captures(&line) {\n+            let number = capture.name(\"number\").unwrap().as_str();\n+            let link = capture.name(\"link\").unwrap().as_str();\n+            assert!(\n+                link.ends_with(number),\n+                \"{} on line {} does not point to issue #{}\",\n+                link,\n+                idx + 1,\n+                number,\n+            );\n+        }\n+    }\n+}"}, {"sha": "ab966d4a36075168684fea3103a6271694c33ca7", "filename": "src/tools/rustfmt/src/test/mod.rs", "status": "modified", "additions": 125, "deletions": 3, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -307,6 +307,52 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n     }\n }\n \n+// Helper function for comparing the results of rustfmt\n+// to a known output generated by one of the write modes.\n+fn assert_stdin_output(\n+    source: &Path,\n+    expected_filename: &Path,\n+    emit_mode: EmitMode,\n+    has_diff: bool,\n+) {\n+    let mut config = Config::default();\n+    config.set().newline_style(NewlineStyle::Unix);\n+    config.set().emit_mode(emit_mode);\n+\n+    let mut source_file = fs::File::open(&source).expect(\"couldn't open source\");\n+    let mut source_text = String::new();\n+    source_file\n+        .read_to_string(&mut source_text)\n+        .expect(\"Failed reading target\");\n+    let input = Input::Text(source_text);\n+\n+    // Populate output by writing to a vec.\n+    let mut buf: Vec<u8> = vec![];\n+    {\n+        let mut session = Session::new(config, Some(&mut buf));\n+        session.format(input).unwrap();\n+        let errors = ReportedErrors {\n+            has_diff: has_diff,\n+            ..Default::default()\n+        };\n+        assert_eq!(session.errors, errors);\n+    }\n+\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"couldn't open target\");\n+    let mut expected_text = String::new();\n+    expected_file\n+        .read_to_string(&mut expected_text)\n+        .expect(\"Failed reading target\");\n+\n+    let output = String::from_utf8(buf).unwrap();\n+    let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n+    if !compare.is_empty() {\n+        let mut failures = HashMap::new();\n+        failures.insert(source.to_owned(), compare);\n+        print_mismatches_default_message(failures);\n+        panic!(\"Text does not match expected output\");\n+    }\n+}\n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n #[nightly_only_test]\n@@ -420,9 +466,9 @@ fn stdin_formatting_smoke_test() {\n     }\n \n     #[cfg(not(windows))]\n-    assert_eq!(buf, \"stdin:\\n\\nfn main() {}\\n\".as_bytes());\n+    assert_eq!(buf, \"<stdin>:\\n\\nfn main() {}\\n\".as_bytes());\n     #[cfg(windows)]\n-    assert_eq!(buf, \"stdin:\\n\\nfn main() {}\\r\\n\".as_bytes());\n+    assert_eq!(buf, \"<stdin>:\\n\\nfn main() {}\\r\\n\".as_bytes());\n }\n \n #[test]\n@@ -463,6 +509,30 @@ fn stdin_works_with_modified_lines() {\n     assert_eq!(buf, output.as_bytes());\n }\n \n+/// Ensures that `EmitMode::Json` works with input from `stdin`.\n+#[test]\n+fn stdin_works_with_json() {\n+    init_log();\n+    assert_stdin_output(\n+        Path::new(\"tests/writemode/source/stdin.rs\"),\n+        Path::new(\"tests/writemode/target/stdin.json\"),\n+        EmitMode::Json,\n+        true,\n+    );\n+}\n+\n+/// Ensures that `EmitMode::Checkstyle` works with input from `stdin`.\n+#[test]\n+fn stdin_works_with_checkstyle() {\n+    init_log();\n+    assert_stdin_output(\n+        Path::new(\"tests/writemode/source/stdin.rs\"),\n+        Path::new(\"tests/writemode/target/stdin.xml\"),\n+        EmitMode::Checkstyle,\n+        false,\n+    );\n+}\n+\n #[test]\n fn stdin_disable_all_formatting_test() {\n     init_log();\n@@ -502,7 +572,10 @@ fn stdin_generated_files_issue_5172() {\n         assert!(session.has_no_errors());\n     }\n     // N.B. this should be changed once `format_generated_files` is supported with stdin\n-    assert_eq!(buf, \"stdin:\\n\\n//@generated\\nfn main() {}\\n\".as_bytes());\n+    assert_eq!(\n+        String::from_utf8(buf).unwrap(),\n+        \"<stdin>:\\n\\n//@generated\\nfn main() {}\\n\",\n+    );\n }\n \n #[test]\n@@ -914,3 +987,52 @@ fn verify_check_works() {\n         .status()\n         .expect(\"run with check option failed\");\n }\n+\n+#[test]\n+fn verify_check_works_with_stdin() {\n+    init_log();\n+\n+    let mut child = Command::new(rustfmt().to_str().unwrap())\n+        .arg(\"--check\")\n+        .stdin(Stdio::piped())\n+        .stderr(Stdio::piped())\n+        .spawn()\n+        .expect(\"run with check option failed\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+        stdin\n+            .write_all(\"fn main() {}\\n\".as_bytes())\n+            .expect(\"Failed to write to rustfmt --check\");\n+    }\n+    let output = child\n+        .wait_with_output()\n+        .expect(\"Failed to wait on rustfmt child\");\n+    assert!(output.status.success());\n+}\n+\n+#[test]\n+fn verify_check_l_works_with_stdin() {\n+    init_log();\n+\n+    let mut child = Command::new(rustfmt().to_str().unwrap())\n+        .arg(\"--check\")\n+        .arg(\"-l\")\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .stderr(Stdio::piped())\n+        .spawn()\n+        .expect(\"run with check option failed\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+        stdin\n+            .write_all(\"fn main()\\n{}\\n\".as_bytes())\n+            .expect(\"Failed to write to rustfmt --check\");\n+    }\n+    let output = child\n+        .wait_with_output()\n+        .expect(\"Failed to wait on rustfmt child\");\n+    assert!(output.status.success());\n+    assert_eq!(std::str::from_utf8(&output.stdout).unwrap(), \"<stdin>\\n\");\n+}"}, {"sha": "aacb2acc684986b3d6b0ceae263a19468a22b99e", "filename": "src/tools/rustfmt/src/test/mod_resolver.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftest%2Fmod_resolver.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -50,3 +50,33 @@ fn skip_out_of_line_nested_inline_within_out_of_line() {\n         &[\"tests/mod-resolver/skip-files-issue-5065/one.rs\"],\n     );\n }\n+\n+#[test]\n+fn fmt_out_of_line_test_modules() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5119\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs\",\n+        &[\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs\",\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub1.rs\",\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub2.rs\",\n+            \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/sub4.rs\",\n+        ],\n+    )\n+}\n+\n+#[test]\n+fn fallback_and_try_to_resolve_external_submod_relative_to_current_dir_path() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5198\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/issue-5198/lib.rs\",\n+        &[\n+            \"tests/mod-resolver/issue-5198/a.rs\",\n+            \"tests/mod-resolver/issue-5198/lib/b.rs\",\n+            \"tests/mod-resolver/issue-5198/lib/c/mod.rs\",\n+            \"tests/mod-resolver/issue-5198/lib/c/e.rs\",\n+            \"tests/mod-resolver/issue-5198/lib/c/d/f.rs\",\n+            \"tests/mod-resolver/issue-5198/lib/c/d/g/mod.rs\",\n+        ],\n+    )\n+}"}, {"sha": "64a201e45ddd4fbf7b662b96f1c9c7f8e0da3d42", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -575,7 +575,16 @@ impl Rewrite for ast::GenericParam {\n         let mut result = String::with_capacity(128);\n         // FIXME: If there are more than one attributes, this will force multiline.\n         match self.attrs.rewrite(context, shape) {\n-            Some(ref rw) if !rw.is_empty() => result.push_str(&format!(\"{} \", rw)),\n+            Some(ref rw) if !rw.is_empty() => {\n+                result.push_str(rw);\n+                // When rewriting generic params, an extra newline should be put\n+                // if the attributes end with a doc comment\n+                if let Some(true) = self.attrs.last().map(|a| a.is_doc_comment()) {\n+                    result.push_str(&shape.indent.to_string_with_newline(context.config));\n+                } else {\n+                    result.push(' ');\n+                }\n+            }\n             _ => (),\n         }\n "}, {"sha": "35512e78fa6e29988e58eee9bd427f7eeb4c96a5", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -646,9 +646,22 @@ pub(crate) fn trim_left_preserve_layout(\n }\n \n /// Based on the given line, determine if the next line can be indented or not.\n-/// This allows to preserve the indentation of multi-line literals.\n-pub(crate) fn indent_next_line(kind: FullCodeCharKind, _line: &str, config: &Config) -> bool {\n-    !(kind.is_string() || (config.version() == Version::Two && kind.is_commented_string()))\n+/// This allows to preserve the indentation of multi-line literals when\n+/// re-inserted a code block that has been formatted separately from the rest\n+/// of the code, such as code in macro defs or code blocks doc comments.\n+pub(crate) fn indent_next_line(kind: FullCodeCharKind, line: &str, config: &Config) -> bool {\n+    if kind.is_string() {\n+        // If the string ends with '\\', the string has been wrapped over\n+        // multiple lines. If `format_strings = true`, then the indentation of\n+        // strings wrapped over multiple lines will have been adjusted while\n+        // formatting the code block, therefore the string's indentation needs\n+        // to be adjusted for the code surrounding the code block.\n+        config.format_strings() && line.ends_with('\\\\')\n+    } else if config.version() == Version::Two {\n+        !kind.is_commented_string()\n+    } else {\n+        true\n+    }\n }\n \n pub(crate) fn is_empty_line(s: &str) -> bool {"}, {"sha": "a06bc995aa55e5885a918ec6a313893f530d1706", "filename": "src/tools/rustfmt/src/vertical.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Fsrc%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvertical.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -160,8 +160,18 @@ pub(crate) fn rewrite_with_alignment<T: AlignedItem>(\n     };\n     let init_span = mk_sp(span.lo(), init_last_pos);\n     let one_line_width = if rest.is_empty() { one_line_width } else { 0 };\n-    let result =\n-        rewrite_aligned_items_inner(context, init, init_span, shape.indent, one_line_width)?;\n+\n+    // if another group follows, we must force a separator\n+    let force_separator = !rest.is_empty();\n+\n+    let result = rewrite_aligned_items_inner(\n+        context,\n+        init,\n+        init_span,\n+        shape.indent,\n+        one_line_width,\n+        force_separator,\n+    )?;\n     if rest.is_empty() {\n         Some(result + spaces)\n     } else {\n@@ -201,6 +211,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     span: Span,\n     offset: Indent,\n     one_line_width: usize,\n+    force_trailing_separator: bool,\n ) -> Option<String> {\n     // 1 = \",\"\n     let item_shape = Shape::indented(offset, context.config).sub_width(1)?;\n@@ -246,9 +257,15 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n             });\n     }\n \n+    let separator_tactic = if force_trailing_separator {\n+        SeparatorTactic::Always\n+    } else {\n+        context.config.trailing_comma()\n+    };\n+\n     let fmt = ListFormatting::new(item_shape, context.config)\n         .tactic(tactic)\n-        .trailing_separator(context.config.trailing_comma())\n+        .trailing_separator(separator_tactic)\n         .preserve_newline(true);\n     write_list(&items, &fmt)\n }"}, {"sha": "348876cd264fa3a0e0df022a4eb0c7c09cb71fda", "filename": "src/tools/rustfmt/tests/cargo-fmt/main.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fcargo-fmt%2Fmain.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -1,6 +1,7 @@\n // Integration tests for cargo-fmt.\n \n use std::env;\n+use std::path::Path;\n use std::process::Command;\n \n /// Run the cargo-fmt executable and return its output.\n@@ -71,3 +72,27 @@ fn rustfmt_help() {\n     assert_that!(&[\"--\", \"-h\"], contains(\"Format Rust code\"));\n     assert_that!(&[\"--\", \"--help=config\"], contains(\"Configuration Options:\"));\n }\n+\n+#[ignore]\n+#[test]\n+fn cargo_fmt_out_of_line_test_modules() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5119\n+    let expected_modified_files = [\n+        \"tests/mod-resolver/test-submodule-issue-5119/src/lib.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub1.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub2.rs\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/sub4.rs\",\n+    ];\n+    let args = [\n+        \"-v\",\n+        \"--check\",\n+        \"--manifest-path\",\n+        \"tests/mod-resolver/test-submodule-issue-5119/Cargo.toml\",\n+    ];\n+    let (stdout, _) = cargo_fmt(&args);\n+    for file in expected_modified_files {\n+        let path = Path::new(file).canonicalize().unwrap();\n+        assert!(stdout.contains(&format!(\"Diff in {}\", path.display())))\n+    }\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5167/src/a.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5167/src/a/mod.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa%2Fmod.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa"}, {"sha": "f21af614da057799f1daff3eae932ab1a1505ea6", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5167/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Flib.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+mod a;"}, {"sha": "cd686f5611690cfd925f399d03360647a4325b11", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/a.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Fa.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+fn main(        ) {   println!(\"Hello World!\")                         }"}, {"sha": "696832913c87931a0548feedac66a7ef85466280", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,3 @@\n+mod a;\n+mod b;\n+mod c;"}, {"sha": "cd686f5611690cfd925f399d03360647a4325b11", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/b.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fb.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+fn main(        ) {   println!(\"Hello World!\")                         }"}, {"sha": "d1604aa23a3cbbb4b4593048ca177187d78009fe", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/d.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,3 @@\n+mod e;\n+mod f;\n+mod g;"}, {"sha": "92c9e3021431f84d78a57e0f2838c145f173a78d", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/d/explanation.txt", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fexplanation.txt", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fexplanation.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fexplanation.txt?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,16 @@\n+This file is contained in the './lib/c/d/' directory.\n+\n+The directory name './lib/c/d/' conflicts with the './lib/c/d.rs' file name.\n+\n+'./lib/c/d.rs' defines 3 external modules:\n+\n+    * mod e;\n+    * mod f;\n+    * mod g;\n+\n+Module resolution will fail if we look for './lib/c/d/e.rs' or './lib/c/d/e/mod.rs',\n+so we should fall back to looking for './lib/c/e.rs', which correctly finds the modlue, that\n+rustfmt should format.\n+\n+'./lib/c/d/f.rs' and './lib/c/d/g/mod.rs' exist at the default submodule paths so we should be able\n+to resolve these modules with no problems.\n\\ No newline at end of file"}, {"sha": "cd686f5611690cfd925f399d03360647a4325b11", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/d/f.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Ff.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+fn main(        ) {   println!(\"Hello World!\")                         }"}, {"sha": "cd686f5611690cfd925f399d03360647a4325b11", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/d/g/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fg%2Fmod.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+fn main(        ) {   println!(\"Hello World!\")                         }"}, {"sha": "cd686f5611690cfd925f399d03360647a4325b11", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/e.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fe.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+fn main(        ) {   println!(\"Hello World!\")                         }"}, {"sha": "81904619650f9017626f96c488ffaf52f590b248", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fmod.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,3 @@\n+mod d;\n+\n+fn main(        ) {   println!(\"Hello World!\")                         }"}, {"sha": "d436a8076cd717accfd288772ca1c2d4e46c41fe", "filename": "src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/explanation.txt", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fexplanation.txt", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fexplanation.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fissue-5198%2Flib%2Fexplanation.txt?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,16 @@\n+This file is contained in the './lib' directory.\n+\n+The directory name './lib' conflicts with the './lib.rs' file name.\n+\n+'lib.rs' defines 3 external modules:\n+\n+    * mod a;\n+    * mod b;\n+    * mod c;\n+\n+Module resolution will fail if we look for './lib/a.rs' or './lib/a/mod.rs',\n+so we should fall back to looking for './a.rs', which correctly finds the modlue that\n+rustfmt should format.\n+\n+'./lib/b.rs' and './lib/c/mod.rs' exist at the default submodule paths so we should be able\n+to resolve these modules with no problems."}, {"sha": "2a63c961be8fc3a9b1426c7fe161759c0bc9a5bb", "filename": "src/tools/rustfmt/tests/mod-resolver/module-not-found/bad_path_attribute/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Fbad_path_attribute%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Fbad_path_attribute%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Fbad_path_attribute%2Flib.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,3 @@\n+// module resolution fails because the path does not exist.\n+#[path = \"path/to/does_not_exist.rs\"]\n+mod a;"}, {"sha": "4a1eac8965ded13bed593c52e47ea1521b187af2", "filename": "src/tools/rustfmt/tests/mod-resolver/module-not-found/relative_module/a.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Fa.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,2 @@\n+// module resolution fails because `./a/b.rs` does not exist\n+mod b;"}, {"sha": "f21af614da057799f1daff3eae932ab1a1505ea6", "filename": "src/tools/rustfmt/tests/mod-resolver/module-not-found/relative_module/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Flib.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+mod a;"}, {"sha": "d9d9e1e3c90877a4a3d73ed258a9120051c69858", "filename": "src/tools/rustfmt/tests/mod-resolver/module-not-found/sibling_module/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Fsibling_module%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Fsibling_module%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Fmodule-not-found%2Fsibling_module%2Flib.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,2 @@\n+// module resolution fails because `./a.rs` does not exist\n+mod a;"}, {"sha": "0993f12795991d2ec4a75bb396aff7643cfa1d16", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2FCargo.toml?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"rustfmt-test-submodule-issue\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "3f7ddba8a288c71986e6735c31f2576befc6cb23", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Fsrc%2Flib.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,7 @@\n+pub fn foo() -> i32 {\n+3\n+}\n+\n+pub fn bar() -> i32 {\n+4\n+}"}, {"sha": "da4e86169ad926dcae7d34de1f480fdd79f32666", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/tests/test1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,8 @@\n+mod test1 {\n+#[cfg(unix)]\n+mod sub1;\n+#[cfg(not(unix))]\n+mod sub2;\n+\n+mod sub3;\n+}"}, {"sha": "b760ba23cd2775c3aa55c763f2f86a7791ba50c6", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub1.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+use rustfmt_test_submodule_issue::foo;\n+\n+#[test]\n+fn test_foo() {\n+assert_eq!(3, foo());\n+}"}, {"sha": "4fd8286eac400a4bc2cc9846aa2341127bf55668", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub2.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+use rustfmt_test_submodule_issue::bar;\n+\n+#[test]\n+fn test_bar() {\n+assert_eq!(4, bar());\n+}"}, {"sha": "e029785bc24579303fbcf4f0b5c75b1f880fd0ac", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fmod.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+mod sub4;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/tools/rustfmt/tests/mod-resolver/test-submodule-issue-5119/tests/test1/sub3/sub4.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fsub4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fsub4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fmod-resolver%2Ftest-submodule-issue-5119%2Ftests%2Ftest1%2Fsub3%2Fsub4.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa"}, {"sha": "450051d2fec617165fcfe6e02677caf78538782e", "filename": "src/tools/rustfmt/tests/rustfmt/main.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Frustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Frustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Frustfmt%2Fmain.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -106,3 +106,54 @@ fn inline_config() {\n             && contains(\"format_strings = true\")\n     );\n }\n+\n+#[test]\n+fn rustfmt_usage_text() {\n+    let args = [\"--help\"];\n+    let (stdout, _) = rustfmt(&args);\n+    assert!(stdout.contains(\"Format Rust code\\n\\nusage: rustfmt [options] <file>...\"));\n+}\n+\n+#[test]\n+fn mod_resolution_error_multiple_candidate_files() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5167\n+    let default_path = Path::new(\"tests/mod-resolver/issue-5167/src/a.rs\");\n+    let secondary_path = Path::new(\"tests/mod-resolver/issue-5167/src/a/mod.rs\");\n+    let error_message = format!(\n+        \"file for module found at both {:?} and {:?}\",\n+        default_path.canonicalize().unwrap(),\n+        secondary_path.canonicalize().unwrap(),\n+    );\n+\n+    let args = [\"tests/mod-resolver/issue-5167/src/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    assert!(stderr.contains(&error_message))\n+}\n+\n+#[test]\n+fn mod_resolution_error_sibling_module_not_found() {\n+    let args = [\"tests/mod-resolver/module-not-found/sibling_module/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    // Module resolution fails because we're unable to find `a.rs` in the same directory as lib.rs\n+    assert!(stderr.contains(\"a.rs does not exist\"))\n+}\n+\n+#[test]\n+fn mod_resolution_error_relative_module_not_found() {\n+    let args = [\"tests/mod-resolver/module-not-found/relative_module/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    // The file `./a.rs` and directory `./a` both exist.\n+    // Module resolution fails becuase we're unable to find `./a/b.rs`\n+    #[cfg(not(windows))]\n+    assert!(stderr.contains(\"a/b.rs does not exist\"));\n+    #[cfg(windows)]\n+    assert!(stderr.contains(\"a\\\\b.rs does not exist\"));\n+}\n+\n+#[test]\n+fn mod_resolution_error_path_attribute_does_not_exist() {\n+    let args = [\"tests/mod-resolver/module-not-found/bad_path_attribute/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    // The path attribute points to a file that does not exist\n+    assert!(stderr.contains(\"does_not_exist.rs does not exist\"));\n+}"}, {"sha": "96a31659022aa95834132e850580115e70e595da", "filename": "src/tools/rustfmt/tests/source/5131_crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_crate.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-imports_granularity: Crate\n+\n+use foo::a;\n+use foo::a;\n+use foo::b;\n+use foo::b as b2;\n+use foo::b::f;\n+use foo::b::g;\n+use foo::b::g as g2;\n+use foo::c;\n+use foo::d::e;\n+use qux::h;\n+use qux::h as h2;\n+use qux::i;"}, {"sha": "3e9139177c56ed5df57c2aeb1d73985344581687", "filename": "src/tools/rustfmt/tests/source/5131_module.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_module.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,33 @@\n+// rustfmt-imports_granularity: Module\n+\n+#![allow(dead_code)]\n+\n+mod a {\n+    pub mod b {\n+        pub struct Data {\n+            pub a: i32,\n+        }\n+    }\n+\n+    use crate::a::b::Data;\n+    use crate::a::b::Data as Data2;\n+\n+    pub fn data(a: i32) -> Data {\n+        Data { a }\n+    }\n+\n+    pub fn data2(a: i32) -> Data2 {\n+        Data2 { a }\n+    }\n+\n+    #[cfg(test)]\n+    mod tests {\n+        use super::*;\n+\n+        #[test]\n+        pub fn test() {\n+            data(1);\n+            data2(1);\n+        }\n+    }\n+}"}, {"sha": "61ddf13410d4b6f3935e31508e7578b9007c7f39", "filename": "src/tools/rustfmt/tests/source/5131_one.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2F5131_one.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-imports_granularity: One\n+\n+pub use foo::x;\n+pub use foo::x as x2;\n+pub use foo::y;\n+use bar::a;\n+use bar::b;\n+use bar::b::f;\n+use bar::b::f as f2;\n+use bar::b::g;\n+use bar::c;\n+use bar::d::e;\n+use bar::d::e as e2;\n+use qux::h;\n+use qux::i;"}, {"sha": "7d0d70919a607f1126bc52ccd5790ed636e834ff", "filename": "src/tools/rustfmt/tests/source/configs/short_array_element_width_threshold/10.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2F10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2F10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2F10.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-short_array_element_width_threshold: 10\n+\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000,\n+        0xaaaaaaaaaaaaaaaa,\n+        0xbbbbbbbbbbbbbbbb,\n+        0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}\n\\ No newline at end of file"}, {"sha": "8a93a51d6a2814a667df2a446c12d672082b7347", "filename": "src/tools/rustfmt/tests/source/configs/short_array_element_width_threshold/20.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2F20.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-short_array_element_width_threshold: 20\n+\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000,\n+        0xaaaaaaaaaaaaaaaa,\n+        0xbbbbbbbbbbbbbbbb,\n+        0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}\n\\ No newline at end of file"}, {"sha": "710b6fe7c4ba0c764483e12f539644aca109bf3b", "filename": "src/tools/rustfmt/tests/source/configs/short_array_element_width_threshold/greater_than_max_width.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2Fgreater_than_max_width.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2Fgreater_than_max_width.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fshort_array_element_width_threshold%2Fgreater_than_max_width.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-max_width: 20\n+// rustfmt-short_array_element_width_threshold: 30\n+\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000,\n+        0xaaaaaaaaaaaaaaaa,\n+        0xbbbbbbbbbbbbbbbb,\n+        0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}"}, {"sha": "f51ba6e98c9f597d7f0c4a080c3269eb11c9e682", "filename": "src/tools/rustfmt/tests/source/extern.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fextern.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -77,3 +77,16 @@ libc::c_long;\n extern {\n \n }\n+\n+macro_rules! x {\n+    ($tt:tt) => {};\n+}\n+\n+extern \"macros\" {\n+    x!(ident);\n+    x!(#);\n+    x![ident];\n+    x![#];\n+    x! {ident}\n+    x! {#}\n+}"}, {"sha": "2d7bb299aaacef723e33266587af6c1dca936d6a", "filename": "src/tools/rustfmt/tests/source/imports_granularity_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fimports_granularity_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fimports_granularity_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fimports_granularity_module.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -4,6 +4,7 @@ use a::{b::c, d::e};\n use a::{f, g::{h, i}};\n use a::{j::{self, k::{self, l}, m}, n::{o::p, q}};\n pub use a::{r::s, t};\n+use b::{c::d, self};\n \n #[cfg(test)]\n use foo::{a::b, c::d};"}, {"sha": "9f9675f51631a76519d27ba428fa8e724e8e2f0a", "filename": "src/tools/rustfmt/tests/source/issue-4036/one.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Fone.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-format_strings: true\n+\n+macro_rules! test {\n+    () => {\n+        fn from() {\n+            None.expect(\n+                \"We asserted that `buffer.len()` is exactly `$n` so we can expect `ApInt::from_iter` to be successful.\",\n+            )\n+        }\n+    };\n+}"}, {"sha": "e1865dd0868b61ec0613eab13e7ce183f03b2b00", "filename": "src/tools/rustfmt/tests/source/issue-4036/three.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Fthree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Fthree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Fthree.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-format_strings: true\n+// rustfmt-hard_tabs: true\n+\n+macro_rules! test {\n+    () => {\n+        fn from() {\n+            None.expect(\n+                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n+            )\n+        }\n+    };\n+}"}, {"sha": "fa54d2e3e09cbe58bcc0d9ba1a7ba1ed3d759005", "filename": "src/tools/rustfmt/tests/source/issue-4036/two.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4036%2Ftwo.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-format_strings: true\n+\n+macro_rules! test {\n+    () => {\n+        fn from() {\n+            None.expect(\n+                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n+            )\n+        }\n+    };\n+}"}, {"sha": "4760022eeaf0d7de1497c1b92ac252137f85f8c9", "filename": "src/tools/rustfmt/tests/source/issue-4791/buggy.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4791%2Fbuggy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4791%2Fbuggy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4791%2Fbuggy.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-trailing_comma: Never\n+\n+struct Foo {\n+    group_a: u8,\n+\n+    group_b: u8,\n+}\n+\n+struct Bar {\n+    group_a: u8,\n+\n+    group_b: u8\n+}"}, {"sha": "c56c70faeae40f4916275883540b10b342fca9da", "filename": "src/tools/rustfmt/tests/source/issue-4791/trailing_comma.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4791%2Ftrailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4791%2Ftrailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-4791%2Ftrailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-trailing_comma: Always\n+\n+struct Foo {\n+    group_a: u8,\n+\n+    group_b: u8\n+}\n+\n+struct Bar {\n+    group_a: u8,\n+\n+    group_b: u8,\n+}"}, {"sha": "ae1c723eff76aa9334c8270c2b14b525e3f25d3f", "filename": "src/tools/rustfmt/tests/source/issue-5023.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5023.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,22 @@\n+// rustfmt-wrap_comments: true\n+\n+/// A comment to test special unicode characters on boundaries\n+/// \u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f  it should break right here this goes to the next line\n+fn main() {\n+    if xxx {\n+        let xxx = xxx\n+            .into_iter()\n+            .filter(|(xxx, xxx)| {\n+                if let Some(x) = Some(1) {\n+                    // xxxxxxxxxxxxxxxxxx, xxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx xxx xxxxxxx, xxxxx xxx\n+                    // xxxxxxxxxx. xxxxxxxxxxxxxxxx\uff0cxxxxxxxxxxxxxxxxx xxx xxxxxxx\n+                    // \u662fsdfadsdfxxxxxxxxx\uff0csdfaxxxxxx_xxxxx_masdfaonxxx\uff0c\n+                    if false {\n+                        return true;\n+                    }\n+                }\n+                false\n+            })\n+            .collect();\n+    }\n+}"}, {"sha": "5d171f32a1aea10b1bfdd19915f44690df52eab1", "filename": "src/tools/rustfmt/tests/source/issue-5042/multi-line_comment_with_trailing_comma.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fmulti-line_comment_with_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fmulti-line_comment_with_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fmulti-line_comment_with_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    // 5042 deals with trailing commas, not the indentation issue of these comments\n+    // When a future PR fixes the inentation issues these test can be updated\n+    let _ = std::ops::Add::add(10, 20\n+        // ...\n+        // ...,\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        /* ... */\n+        // ...,\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        // ...,\n+        // ...,\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        // ...,\n+        /* ...\n+        */,\n+        );\n+}"}, {"sha": "b8a824b34b796e32d611c4b024385f5e2959a740", "filename": "src/tools/rustfmt/tests/source/issue-5042/multi-line_comment_without_trailing_comma.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fmulti-line_comment_without_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fmulti-line_comment_without_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fmulti-line_comment_without_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    // 5042 deals with trailing commas, not the indentation issue of these comments\n+    // When a future PR fixes the inentation issues these test can be updated\n+    let _ = std::ops::Add::add(10, 20\n+        // ...\n+        // ...\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        /* ... */\n+        // ...\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        // ...\n+        // ...\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        // ...\n+        /* ...\n+        */\n+        );\n+}"}, {"sha": "bd765b7b41f4972d29cdec26c8ae4021e4d92d06", "filename": "src/tools/rustfmt/tests/source/issue-5042/single-line_comment_with_trailing_comma.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fsingle-line_comment_with_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fsingle-line_comment_with_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fsingle-line_comment_with_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let _ = std::ops::Add::add(10, 20\n+        // ...,\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        /* ... */,\n+        );\n+}"}, {"sha": "2ed8de875add8b87722dbda589b108ca26ac8969", "filename": "src/tools/rustfmt/tests/source/issue-5042/single-line_comment_without_trailing_comma.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fsingle-line_comment_without_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fsingle-line_comment_without_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5042%2Fsingle-line_comment_without_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let _ = std::ops::Add::add(10, 20\n+        // ...\n+        );\n+\n+    let _ = std::ops::Add::add(10, 20\n+        /* ... */\n+        );\n+}\n+"}, {"sha": "5c1d79a74309876f6f04b626bad77e117bd7bcc2", "filename": "src/tools/rustfmt/tests/source/issue-5157/indented_itemized_markdown_blockquote.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-wrap_comments: true\n+\n+///        > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "cf200d04e08ef9bdb77717872584a1c86156590a", "filename": "src/tools/rustfmt/tests/source/issue-5157/nested_itemized_markdown_blockquote.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+///\n+/// > > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+///\n+/// > > > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+///\n+/// > > > > > > > > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "eb436402e4e00fd2be93a07da36b6c2529d5a2d6", "filename": "src/tools/rustfmt/tests/source/issue-5157/support_itemized_markdown_blockquote.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a sample_state relative to each DataReader. The sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "229c6e5753d2e994eafdab282ee0015b4b5da4c1", "filename": "src/tools/rustfmt/tests/source/issue-5238/markdown_header_wrap_comments_false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5238%2Fmarkdown_header_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5238%2Fmarkdown_header_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5238%2Fmarkdown_header_wrap_comments_false.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-wrap_comments: false\n+\n+/// no markdown header so rustfmt should wrap this comment when `format_code_in_doc_comments = true` and `wrap_comments = true`\n+fn not_documented_with_markdown_header() {\n+    // This is just a normal inline comment so rustfmt should wrap this comment when `wrap_comments = true`\n+}\n+\n+/// # We're using a markdown header here so rustfmt should refuse to wrap this comment in all circumstances\n+fn documented_with_markdown_header() {\n+    // # We're using a markdown header in an inline comment. rustfmt should be able to wrap this comment when `wrap_comments = true`\n+}"}, {"sha": "c547ff35c691bc14155dd9e0b55cbebdf0b0f282", "filename": "src/tools/rustfmt/tests/source/issue-5238/markdown_header_wrap_comments_true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5238%2Fmarkdown_header_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5238%2Fmarkdown_header_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5238%2Fmarkdown_header_wrap_comments_true.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-wrap_comments: true\n+\n+/// no markdown header so rustfmt should wrap this comment when `format_code_in_doc_comments = true` and `wrap_comments = true`\n+fn not_documented_with_markdown_header() {\n+    // This is just a normal inline comment so rustfmt should wrap this comment when `wrap_comments = true`\n+}\n+\n+/// # We're using a markdown header here so rustfmt should refuse to wrap this comment in all circumstances\n+fn documented_with_markdown_header() {\n+    // # We're using a markdown header in an inline comment. rustfmt should be able to wrap this comment when `wrap_comments = true`\n+}"}, {"sha": "b31bbf095e73074b6ad6c9757bd3597114ff06fb", "filename": "src/tools/rustfmt/tests/source/issue-5270/merge_derives_true.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5270%2Fmerge_derives_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5270%2Fmerge_derives_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-5270%2Fmerge_derives_true.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,62 @@\n+// rustfmt-merge_derives:true\n+\n+#[rustfmt::skip::attributes(derive)]\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+struct DoNotMergeDerives {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[rustfmt::skip::attributes(derive)]\n+#[derive(Clone)]\n+struct DoNotMergeDerivesSkipInMiddle {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+#[rustfmt::skip::attributes(derive)]\n+struct DoNotMergeDerivesSkipAtEnd {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+struct MergeDerives {\n+    field: String,\n+}\n+\n+mod inner_attribute_derive_skip {\n+    #![rustfmt::skip::attributes(derive)]\n+\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct DoNotMergeDerives {\n+        field: String,\n+    }\n+}\n+\n+#[rustfmt::skip::attributes(derive)]\n+mod outer_attribute_derive_skip {\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct DoNotMergeDerives {\n+        field: String,\n+    }\n+}\n+\n+mod no_derive_skip {\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct MergeDerives {\n+        field: String,\n+    }\n+}"}, {"sha": "35d6e21affeeb57a21275d234bdbb4259d504356", "filename": "src/tools/rustfmt/tests/source/issue_4854.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4854.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4854.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue_4854.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,113 @@\n+struct Struct {\n+    // Multiline comment\n+    // should be formatted\n+    // properly.\n+}\n+\n+struct Struct2 {\n+    // This formatting\n+// Should be changed\n+}\n+\n+struct Struct3(\n+    // This\n+    // is\n+    // correct\n+);\n+\n+struct Struct4(\n+    // This\n+// is\n+// not\n+// correct\n+);\n+\n+struct Struct5 {\n+    /*\n+    Comment block\n+    with many lines.\n+    */\n+}\n+\n+struct Struct6(\n+    /*\n+    Comment block\n+    with many lines.\n+    */\n+);\n+\n+struct Struct7 {\n+    /*\n+Invalid\n+format\n+*/\n+}\n+\n+struct Struct8(\n+    /*\n+Invalid\n+format\n+*/\n+);\n+\n+struct Struct9 { /* bar */ }\n+\n+struct Struct10 { /* bar\n+baz\n+*/ }\n+\n+mod module {\n+    struct Struct {\n+        // Multiline comment\n+        // should be formatted\n+        // properly.\n+    }\n+\n+    struct Struct2 {\n+        // This formatting\n+// Should be changed\n+    }\n+\n+    struct Struct3(\n+        // This\n+        // is\n+        // correct\n+    );\n+\n+    struct Struct4(\n+        // This\n+    // is\n+    // not\n+// correct\n+    );\n+\n+    struct Struct5 {\n+        /*\n+        Comment block\n+        with many lines.\n+         */\n+    }\n+\n+    struct Struct6(\n+        /*\n+        Comment block\n+        with many lines.\n+        */\n+    );\n+\n+    struct Struct7 {\n+        /*\n+Invalid\n+format\n+*/\n+    }\n+\n+    struct Struct8(\n+        /*\n+Invalid\n+format\n+*/\n+    );\n+\n+    struct Struct9 { /* bar */ }\n+}"}, {"sha": "557d66703554614633f3d36c8ef41471113d58a9", "filename": "src/tools/rustfmt/tests/target/5131_crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_crate.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-imports_granularity: Crate\n+\n+use foo::{\n+    a, b, b as b2,\n+    b::{f, g, g as g2},\n+    c,\n+    d::e,\n+};\n+use qux::{h, h as h2, i};"}, {"sha": "763024d6fa4959d5db34f2fbd19f08d29cc96a9c", "filename": "src/tools/rustfmt/tests/target/5131_module.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_module.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,32 @@\n+// rustfmt-imports_granularity: Module\n+\n+#![allow(dead_code)]\n+\n+mod a {\n+    pub mod b {\n+        pub struct Data {\n+            pub a: i32,\n+        }\n+    }\n+\n+    use crate::a::b::{Data, Data as Data2};\n+\n+    pub fn data(a: i32) -> Data {\n+        Data { a }\n+    }\n+\n+    pub fn data2(a: i32) -> Data2 {\n+        Data2 { a }\n+    }\n+\n+    #[cfg(test)]\n+    mod tests {\n+        use super::*;\n+\n+        #[test]\n+        pub fn test() {\n+            data(1);\n+            data2(1);\n+        }\n+    }\n+}"}, {"sha": "a086dae5a42218d77867d6d9420a1d8f2fecdabb", "filename": "src/tools/rustfmt/tests/target/5131_one.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2F5131_one.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-imports_granularity: One\n+\n+pub use foo::{x, x as x2, y};\n+use {\n+    bar::{\n+        a,\n+        b::{self, f, g},\n+        c,\n+        d::{e, e as e2},\n+    },\n+    qux::{h, i},\n+};"}, {"sha": "be4b7a8c42e3e38dbe195d5fddfca2f466aca015", "filename": "src/tools/rustfmt/tests/target/comments-in-lists/format-doc-comments.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fformat-doc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fformat-doc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fformat-doc-comments.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -25,9 +25,8 @@ pub enum E {\n }\n \n pub enum E2 {\n-    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n pub struct S {\n@@ -42,9 +41,8 @@ pub struct S {\n }\n \n pub struct S2 {\n-    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n fn foo("}, {"sha": "db4da6223721c33ae8667aebb049cb704ac38a77", "filename": "src/tools/rustfmt/tests/target/comments-in-lists/wrap-comments-false.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-false.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -13,9 +13,8 @@ pub enum E {\n }\n \n pub enum E2 {\n-    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n pub struct S {\n@@ -30,9 +29,8 @@ pub struct S {\n }\n \n pub struct S2 {\n-    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n fn foo("}, {"sha": "9b9147eb1247a4ce383cb2187bc5892995d6617b", "filename": "src/tools/rustfmt/tests/target/comments-in-lists/wrap-comments-not-normalized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-not-normalized.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -14,8 +14,8 @@ pub enum E {\n \n pub enum E2 {\n     // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n pub enum E3 {\n@@ -42,8 +42,8 @@ pub struct S {\n \n pub struct S2 {\n     // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n pub struct S3 {"}, {"sha": "c1531d22a4a70cd29aae2693dd70950ac27a262a", "filename": "src/tools/rustfmt/tests/target/comments-in-lists/wrap-comments-true.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcomments-in-lists%2Fwrap-comments-true.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -15,8 +15,8 @@ pub enum E {\n \n pub enum E2 {\n     // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n pub enum E3 {\n@@ -43,8 +43,8 @@ pub struct S {\n \n pub struct S2 {\n     // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n-// Expand as needed, numbers should be ascending according to the stage\n-// through the inclusion pipeline, or according to the descriptions\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n }\n \n pub struct S3 {"}, {"sha": "78c4adba1c1f184a1b099735d429e06aa70627a3", "filename": "src/tools/rustfmt/tests/target/configs/short_array_element_width_threshold/10.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2F10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2F10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2F10.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-short_array_element_width_threshold: 10\n+\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000,\n+        0xaaaaaaaaaaaaaaaa,\n+        0xbbbbbbbbbbbbbbbb,\n+        0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}"}, {"sha": "6084690652f0682651bc29fcd59ce47d0e861981", "filename": "src/tools/rustfmt/tests/target/configs/short_array_element_width_threshold/20.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2F20.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-short_array_element_width_threshold: 20\n+\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbbbbbbbbbbbbbbbb, 0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}"}, {"sha": "710b6fe7c4ba0c764483e12f539644aca109bf3b", "filename": "src/tools/rustfmt/tests/target/configs/short_array_element_width_threshold/greater_than_max_width.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2Fgreater_than_max_width.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2Fgreater_than_max_width.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fshort_array_element_width_threshold%2Fgreater_than_max_width.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-max_width: 20\n+// rustfmt-short_array_element_width_threshold: 30\n+\n+fn main() {\n+    pub const FORMAT_TEST: [u64; 5] = [\n+        0x0000000000000000,\n+        0xaaaaaaaaaaaaaaaa,\n+        0xbbbbbbbbbbbbbbbb,\n+        0xcccccccccccccccc,\n+        0xdddddddddddddddd,\n+    ];\n+}"}, {"sha": "2efc5e09a3d34e684604f5b4994a382cce1cea8a", "filename": "src/tools/rustfmt/tests/target/doc-of-generic-item.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fdoc-of-generic-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fdoc-of-generic-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fdoc-of-generic-item.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// Non-doc pre-comment of Foo\n+/// doc of Foo\n+// Non-doc post-comment of Foo\n+struct Foo<\n+    // Non-doc pre-comment of 'a\n+    /// doc of 'a\n+    'a,\n+    // Non-doc pre-comment of T\n+    /// doc of T\n+    T,\n+    // Non-doc pre-comment of N\n+    /// doc of N\n+    const N: item,\n+>;"}, {"sha": "d1741360cfd6437878535bb9bd840517ebab4282", "filename": "src/tools/rustfmt/tests/target/extern.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fextern.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -82,3 +82,16 @@ extern \"C\" {\n }\n \n extern \"C\" {}\n+\n+macro_rules! x {\n+    ($tt:tt) => {};\n+}\n+\n+extern \"macros\" {\n+    x!(ident);\n+    x!(#);\n+    x![ident];\n+    x![#];\n+    x! {ident}\n+    x! {#}\n+}"}, {"sha": "e4e1a299e58669f809ae8f9826776c9a6466f43b", "filename": "src/tools/rustfmt/tests/target/imports_granularity_module.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fimports_granularity_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fimports_granularity_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fimports_granularity_module.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -10,6 +10,8 @@ use a::n::o::p;\n use a::n::q;\n pub use a::r::s;\n pub use a::t;\n+use b::c::d;\n+use b::{self};\n \n use foo::e;\n #[cfg(test)]"}, {"sha": "54e490b7fbeae313c0ef898a30dd2f4fbf7374a5", "filename": "src/tools/rustfmt/tests/target/issue-4036/one.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Fone.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-format_strings: true\n+\n+macro_rules! test {\n+    () => {\n+        fn from() {\n+            None.expect(\n+                \"We asserted that `buffer.len()` is exactly `$n` so we can expect \\\n+                 `ApInt::from_iter` to be successful.\",\n+            )\n+        }\n+    };\n+}"}, {"sha": "394dc8633f5344926adf82bad1ac4998882e7af4", "filename": "src/tools/rustfmt/tests/target/issue-4036/three.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Fthree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Fthree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Fthree.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-format_strings: true\n+// rustfmt-hard_tabs: true\n+\n+macro_rules! test {\n+\t() => {\n+\t\tfn from() {\n+\t\t\tNone.expect(\n+\t\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor \\\n+\t\t\t\t incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \\\n+\t\t\t\t nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \\\n+\t\t\t\t Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu \\\n+\t\t\t\t fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in \\\n+\t\t\t\t culpa qui officia deserunt mollit anim id est laborum.\",\n+\t\t\t)\n+\t\t}\n+\t};\n+}"}, {"sha": "01cafa76b68424b9012e16c6ff3a8c11414ddb31", "filename": "src/tools/rustfmt/tests/target/issue-4036/two.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4036%2Ftwo.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-format_strings: true\n+\n+macro_rules! test {\n+    () => {\n+        fn from() {\n+            None.expect(\n+                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor \\\n+                 incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \\\n+                 nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \\\n+                 Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu \\\n+                 fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in \\\n+                 culpa qui officia deserunt mollit anim id est laborum.\",\n+            )\n+        }\n+    };\n+}"}, {"sha": "fff58be99a5096d8c5ff07de952585aa3d19c6fc", "filename": "src/tools/rustfmt/tests/target/issue-4791/buggy.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fbuggy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fbuggy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fbuggy.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-trailing_comma: Never\n+\n+struct Foo {\n+    group_a: u8,\n+\n+    group_b: u8\n+}\n+\n+struct Bar {\n+    group_a: u8,\n+\n+    group_b: u8\n+}"}, {"sha": "588656b535fa1af1746da854cc1e64dbb303f06e", "filename": "src/tools/rustfmt/tests/target/issue-4791/issue_4928.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fissue_4928.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fissue_4928.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fissue_4928.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,70 @@\n+// rustfmt-brace_style: SameLineWhere\n+// rustfmt-comment_width: 100\n+// rustfmt-edition: 2018\n+// rustfmt-fn_args_layout: Compressed\n+// rustfmt-hard_tabs: false\n+// rustfmt-match_block_trailing_comma: true\n+// rustfmt-max_width: 100\n+// rustfmt-merge_derives: false\n+// rustfmt-newline_style: Unix\n+// rustfmt-normalize_doc_attributes: true\n+// rustfmt-overflow_delimited_expr: true\n+// rustfmt-reorder_imports: false\n+// rustfmt-reorder_modules: true\n+// rustfmt-struct_field_align_threshold: 20\n+// rustfmt-tab_spaces: 4\n+// rustfmt-trailing_comma: Never\n+// rustfmt-use_small_heuristics: Max\n+// rustfmt-use_try_shorthand: true\n+// rustfmt-wrap_comments: true\n+\n+/// Lorem ipsum dolor sit amet.\n+#[repr(C)]\n+#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]\n+pub struct BufferAttr {\n+    /* NOTE: Blah blah blah blah blah. */\n+    /// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n+    /// ut labore et dolore magna aliqua. Morbi quis commodo odio aenean sed adipiscing. Nunc\n+    /// congue nisi vitae suscipit tellus mauris a. Consectetur adipiscing elit pellentesque\n+    /// habitant morbi tristique senectus.\n+    pub foo: u32,\n+\n+    /// Elit eget gravida cum sociis natoque penatibus et magnis dis. Consequat semper viverra nam\n+    /// libero. Accumsan in nisl nisi scelerisque eu. Pellentesque id nibh tortor id aliquet. Sed\n+    /// velit dignissim sodales ut. Facilisis sed odio morbi quis commodo odio aenean sed. Et\n+    /// ultrices neque ornare aenean euismod elementum. Condimentum lacinia quis vel eros donec ac\n+    /// odio tempor.\n+    ///\n+    /// Lacinia at quis risus sed vulputate odio ut enim. Etiam erat velit scelerisque in dictum.\n+    /// Nibh tellus molestie nunc non blandit massa enim nec. Nascetur ridiculus mus mauris vitae.\n+    pub bar: u32,\n+\n+    /// Mi proin sed libero enim sed faucibus turpis. Amet consectetur adipiscing elit duis\n+    /// tristique sollicitudin nibh sit amet. Congue quisque egestas diam in arcu cursus euismod\n+    /// quis viverra. Cum sociis natoque penatibus et magnis dis parturient montes. Enim sit amet\n+    /// venenatis urna cursus eget nunc scelerisque viverra. Cras semper auctor neque vitae tempus\n+    /// quam pellentesque. Tortor posuere ac ut consequat semper viverra nam libero justo. Vitae\n+    /// auctor eu augue ut lectus arcu bibendum at. Faucibus vitae aliquet nec ullamcorper sit amet\n+    /// risus nullam. Maecenas accumsan lacus vel facilisis volutpat. Arcu non odio euismod\n+    /// lacinia.\n+    ///\n+    /// [`FooBar::beep()`]: crate::foobar::FooBar::beep\n+    /// [`FooBar::boop()`]: crate::foobar::FooBar::boop\n+    /// [`foobar::BazBaq::BEEP_BOOP`]: crate::foobar::BazBaq::BEEP_BOOP\n+    pub baz: u32,\n+\n+    /// Eu consequat ac felis donec et odio pellentesque diam. Ut eu sem integer vitae justo eget.\n+    /// Consequat ac felis donec et odio pellentesque diam volutpat.\n+    pub baq: u32,\n+\n+    /// Amet consectetur adipiscing elit pellentesque habitant. Ut morbi tincidunt augue interdum\n+    /// velit euismod in pellentesque. Imperdiet sed euismod nisi porta lorem. Nec tincidunt\n+    /// praesent semper feugiat. Facilisis leo vel fringilla est. Egestas diam in arcu cursus\n+    /// euismod quis viverra. Sagittis eu volutpat odio facilisis mauris sit amet. Posuere morbi\n+    /// leo urna molestie at.\n+    ///\n+    /// Pretium aenean pharetra magna ac. Nisl condimentum id venenatis a condimentum vitae. Semper\n+    /// quis lectus nulla at volutpat diam ut venenatis tellus. Egestas tellus rutrum tellus\n+    /// pellentesque eu tincidunt tortor aliquam.\n+    pub foobar: u32\n+}"}, {"sha": "4a37163969ae95959865c3b4cd038a11e7c553d5", "filename": "src/tools/rustfmt/tests/target/issue-4791/no_trailing_comma.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fno_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fno_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Fno_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-struct_field_align_threshold: 0\n+// rustfmt-trailing_comma: Never\n+\n+pub struct Baz {\n+    group_a: u8,\n+\n+    group_b: u8\n+}"}, {"sha": "29a224b3f6d9686828106cc84cd9bf25913a7214", "filename": "src/tools/rustfmt/tests/target/issue-4791/trailing_comma.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Ftrailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Ftrailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-4791%2Ftrailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-trailing_comma: Always\n+\n+struct Foo {\n+    group_a: u8,\n+\n+    group_b: u8,\n+}\n+\n+struct Bar {\n+    group_a: u8,\n+\n+    group_b: u8,\n+}"}, {"sha": "4e84c7d98427a03a70f91a4e37d9ef6082f9cbed", "filename": "src/tools/rustfmt/tests/target/issue-5023.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5023.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,23 @@\n+// rustfmt-wrap_comments: true\n+\n+/// A comment to test special unicode characters on boundaries\n+/// \u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f\uff0c\u662f  it should break right here\n+/// this goes to the next line\n+fn main() {\n+    if xxx {\n+        let xxx = xxx\n+            .into_iter()\n+            .filter(|(xxx, xxx)| {\n+                if let Some(x) = Some(1) {\n+                    // xxxxxxxxxxxxxxxxxx, xxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx xxx xxxxxxx, xxxxx xxx\n+                    // xxxxxxxxxx. xxxxxxxxxxxxxxxx\uff0cxxxxxxxxxxxxxxxxx xxx xxxxxxx\n+                    // \u662fsdfadsdfxxxxxxxxx\uff0csdfaxxxxxx_xxxxx_masdfaonxxx\uff0c\n+                    if false {\n+                        return true;\n+                    }\n+                }\n+                false\n+            })\n+            .collect();\n+    }\n+}"}, {"sha": "1ae1212b488d9112a36be37564bf2db2658ab729", "filename": "src/tools/rustfmt/tests/target/issue-5042/multi-line_comment_with_trailing_comma.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fmulti-line_comment_with_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fmulti-line_comment_with_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fmulti-line_comment_with_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    // 5042 deals with trailing commas, not the indentation issue of these comments\n+    // When a future PR fixes the inentation issues these test can be updated\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...\n+           // ...,\n+    );\n+\n+    let _ = std::ops::Add::add(\n+        10, 20, /* ... */\n+           // ...,\n+    );\n+\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...,\n+           // ...,\n+    );\n+\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...,\n+           /* ...\n+            */\n+    );\n+}"}, {"sha": "30d174664c9cfbf5fa6579d314a5ef72caea3abc", "filename": "src/tools/rustfmt/tests/target/issue-5042/multi-line_comment_without_trailing_comma.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fmulti-line_comment_without_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fmulti-line_comment_without_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fmulti-line_comment_without_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    // 5042 deals with trailing commas, not the indentation issue of these comments\n+    // When a future PR fixes the inentation issues these test can be updated\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...\n+           // ...\n+    );\n+\n+    let _ = std::ops::Add::add(\n+        10, 20, /* ... */\n+           // ...\n+    );\n+\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...\n+           // ...\n+    );\n+\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...\n+           /* ...\n+            */\n+    );\n+}"}, {"sha": "87b651dd285efa6c1421993db791e588b23fb259", "filename": "src/tools/rustfmt/tests/target/issue-5042/single-line_comment_with_trailing_comma.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fsingle-line_comment_with_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fsingle-line_comment_with_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fsingle-line_comment_with_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...,\n+    );\n+\n+    let _ = std::ops::Add::add(10, 20 /* ... */);\n+}"}, {"sha": "116df86a4b55468d48325adbb0f74fe43789be82", "filename": "src/tools/rustfmt/tests/target/issue-5042/single-line_comment_without_trailing_comma.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fsingle-line_comment_without_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fsingle-line_comment_without_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5042%2Fsingle-line_comment_without_trailing_comma.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let _ = std::ops::Add::add(\n+        10, 20, // ...\n+    );\n+\n+    let _ = std::ops::Add::add(10, 20 /* ... */);\n+}"}, {"sha": "5d167932828f3f29f32158c1bd88eb86bdfeb855", "filename": "src/tools/rustfmt/tests/target/issue-5125/attributes_in_formal_fuction_parameter.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fattributes_in_formal_fuction_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fattributes_in_formal_fuction_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fattributes_in_formal_fuction_parameter.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+fn foo(\n+    #[unused] a: <u16 as intercom::type_system::ExternType<\n+        intercom::type_system::AutomationTypeSystem,\n+    >>::ForeignType,\n+) {\n+}"}, {"sha": "cab20381ce8f7151359f3b227be6b0f94539ecac", "filename": "src/tools/rustfmt/tests/target/issue-5125/long_parameter_in_different_positions.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Flong_parameter_in_different_positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Flong_parameter_in_different_positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Flong_parameter_in_different_positions.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,24 @@\n+fn middle(\n+    a: usize,\n+    b: <u16 as intercom::type_system::ExternType<\n+        intercom::type_system::AutomationTypeSystem,\n+    >>::ForeignType,\n+    c: bool,\n+) {\n+}\n+\n+fn last(\n+    a: usize,\n+    b: <u16 as intercom::type_system::ExternType<\n+        intercom::type_system::AutomationTypeSystem,\n+    >>::ForeignType,\n+) {\n+}\n+\n+fn first(\n+    a: <u16 as intercom::type_system::ExternType<\n+        intercom::type_system::AutomationTypeSystem,\n+    >>::ForeignType,\n+    b: usize,\n+) {\n+}"}, {"sha": "8003e66968c787c7b308b1c4bf5f58f1737a7e04", "filename": "src/tools/rustfmt/tests/target/issue-5125/minimum_example.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fminimum_example.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+fn foo(\n+    a: <u16 as intercom::type_system::ExternType<\n+        intercom::type_system::AutomationTypeSystem,\n+    >>::ForeignType,\n+) {\n+}"}, {"sha": "2340b2f3472e985ca4c2b85860051de637a07e2f", "filename": "src/tools/rustfmt/tests/target/issue-5125/with_leading_and_inline_comments.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fwith_leading_and_inline_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fwith_leading_and_inline_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5125%2Fwith_leading_and_inline_comments.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,7 @@\n+fn foo(\n+    // Pre Comment\n+    a: <u16 as intercom::type_system::ExternType<\n+        intercom::type_system::AutomationTypeSystem,\n+    >>::ForeignType, // Inline comment\n+) {\n+}"}, {"sha": "e47677f203903ea10193d24d7f88fa603cb02185", "filename": "src/tools/rustfmt/tests/target/issue-5157/indented_itemized_markdown_blockquote.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Findented_itemized_markdown_blockquote.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-wrap_comments: true\n+\n+///        > For each sample received, the middleware internally maintains a\n+///        > sample_state relative to each DataReader. The sample_state can\n+///        > either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "079510442b7992ad183b9edaa458f8c4f7b77f97", "filename": "src/tools/rustfmt/tests/target/issue-5157/nested_itemized_markdown_blockquote.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Fnested_itemized_markdown_blockquote.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a\n+/// > sample_state relative to each DataReader. The sample_state can either be\n+/// > READ or NOT_READ.\n+///\n+/// > > For each sample received, the middleware internally maintains a\n+/// > > sample_state relative to each DataReader. The sample_state can either be\n+/// > > READ or NOT_READ.\n+///\n+/// > > > For each sample received, the middleware internally maintains a\n+/// > > > sample_state relative to each DataReader. The sample_state can either\n+/// > > > be READ or NOT_READ.\n+///\n+/// > > > > > > > > For each sample received, the middleware internally\n+/// > > > > > > > > maintains a sample_state relative to each DataReader. The\n+/// > > > > > > > > sample_state can either be READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "029ee37d22a8ba73722459683bdbe1982302bca3", "filename": "src/tools/rustfmt/tests/target/issue-5157/support_itemized_markdown_blockquote.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5157%2Fsupport_itemized_markdown_blockquote.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-wrap_comments: true\n+\n+/// > For each sample received, the middleware internally maintains a\n+/// > sample_state relative to each DataReader. The sample_state can either be\n+/// > READ or NOT_READ.\n+fn block_quote() {}"}, {"sha": "229c6e5753d2e994eafdab282ee0015b4b5da4c1", "filename": "src/tools/rustfmt/tests/target/issue-5238/markdown_header_wrap_comments_false.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5238%2Fmarkdown_header_wrap_comments_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5238%2Fmarkdown_header_wrap_comments_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5238%2Fmarkdown_header_wrap_comments_false.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-wrap_comments: false\n+\n+/// no markdown header so rustfmt should wrap this comment when `format_code_in_doc_comments = true` and `wrap_comments = true`\n+fn not_documented_with_markdown_header() {\n+    // This is just a normal inline comment so rustfmt should wrap this comment when `wrap_comments = true`\n+}\n+\n+/// # We're using a markdown header here so rustfmt should refuse to wrap this comment in all circumstances\n+fn documented_with_markdown_header() {\n+    // # We're using a markdown header in an inline comment. rustfmt should be able to wrap this comment when `wrap_comments = true`\n+}"}, {"sha": "87dae58eccd73c97a71c36db1c1997bc979f24cd", "filename": "src/tools/rustfmt/tests/target/issue-5238/markdown_header_wrap_comments_true.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5238%2Fmarkdown_header_wrap_comments_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5238%2Fmarkdown_header_wrap_comments_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5238%2Fmarkdown_header_wrap_comments_true.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-wrap_comments: true\n+\n+/// no markdown header so rustfmt should wrap this comment when\n+/// `format_code_in_doc_comments = true` and `wrap_comments = true`\n+fn not_documented_with_markdown_header() {\n+    // This is just a normal inline comment so rustfmt should wrap this comment\n+    // when `wrap_comments = true`\n+}\n+\n+/// # We're using a markdown header here so rustfmt should refuse to wrap this comment in all circumstances\n+fn documented_with_markdown_header() {\n+    // # We're using a markdown header in an inline comment. rustfmt should be\n+    // able to wrap this comment when `wrap_comments = true`\n+}"}, {"sha": "3b6f7e66993c0023678d6ef00d71efd7226a8cdc", "filename": "src/tools/rustfmt/tests/target/issue-5270/merge_derives_false.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5270%2Fmerge_derives_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5270%2Fmerge_derives_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5270%2Fmerge_derives_false.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,62 @@\n+// rustfmt-merge_derives:false\n+\n+#[rustfmt::skip::attributes(derive)]\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+struct DoNotMergeDerives {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[rustfmt::skip::attributes(derive)]\n+#[derive(Clone)]\n+struct DoNotMergeDerivesSkipInMiddle {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+#[rustfmt::skip::attributes(derive)]\n+struct DoNotMergeDerivesSkipAtEnd {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+struct MergeDerives {\n+    field: String,\n+}\n+\n+mod inner_attribute_derive_skip {\n+    #![rustfmt::skip::attributes(derive)]\n+\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct DoNotMergeDerives {\n+        field: String,\n+    }\n+}\n+\n+#[rustfmt::skip::attributes(derive)]\n+mod outer_attribute_derive_skip {\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct DoNotMergeDerives {\n+        field: String,\n+    }\n+}\n+\n+mod no_derive_skip {\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct MergeDerives {\n+        field: String,\n+    }\n+}"}, {"sha": "5f488b4542d0b60877cac5850fc1935e93acbeb8", "filename": "src/tools/rustfmt/tests/target/issue-5270/merge_derives_true.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5270%2Fmerge_derives_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5270%2Fmerge_derives_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-5270%2Fmerge_derives_true.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,60 @@\n+// rustfmt-merge_derives:true\n+\n+#[rustfmt::skip::attributes(derive)]\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+struct DoNotMergeDerives {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[rustfmt::skip::attributes(derive)]\n+#[derive(Clone)]\n+struct DoNotMergeDerivesSkipInMiddle {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField)]\n+#[derive(Clone)]\n+#[rustfmt::skip::attributes(derive)]\n+struct DoNotMergeDerivesSkipAtEnd {\n+    field: String,\n+}\n+\n+#[allow(dead_code)]\n+#[derive(StructField, Clone)]\n+struct MergeDerives {\n+    field: String,\n+}\n+\n+mod inner_attribute_derive_skip {\n+    #![rustfmt::skip::attributes(derive)]\n+\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct DoNotMergeDerives {\n+        field: String,\n+    }\n+}\n+\n+#[rustfmt::skip::attributes(derive)]\n+mod outer_attribute_derive_skip {\n+    #[allow(dead_code)]\n+    #[derive(StructField)]\n+    #[derive(Clone)]\n+    struct DoNotMergeDerives {\n+        field: String,\n+    }\n+}\n+\n+mod no_derive_skip {\n+    #[allow(dead_code)]\n+    #[derive(StructField, Clone)]\n+    struct MergeDerives {\n+        field: String,\n+    }\n+}"}, {"sha": "a81c5a5171fb58544e4ef69575f1690b0da03a4c", "filename": "src/tools/rustfmt/tests/target/issue_4854.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4854.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4854.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4854.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,115 @@\n+struct Struct {\n+    // Multiline comment\n+    // should be formatted\n+    // properly.\n+}\n+\n+struct Struct2 {\n+    // This formatting\n+    // Should be changed\n+}\n+\n+struct Struct3(\n+    // This\n+    // is\n+    // correct\n+);\n+\n+struct Struct4(\n+    // This\n+    // is\n+    // not\n+    // correct\n+);\n+\n+struct Struct5 {\n+    /*\n+    Comment block\n+    with many lines.\n+    */\n+}\n+\n+struct Struct6(\n+    /*\n+    Comment block\n+    with many lines.\n+    */\n+);\n+\n+struct Struct7 {\n+    /*\n+    Invalid\n+    format\n+    */\n+}\n+\n+struct Struct8(\n+    /*\n+    Invalid\n+    format\n+    */\n+);\n+\n+struct Struct9 {/* bar */}\n+\n+struct Struct10 {\n+    /* bar\n+    baz\n+    */\n+}\n+\n+mod module {\n+    struct Struct {\n+        // Multiline comment\n+        // should be formatted\n+        // properly.\n+    }\n+\n+    struct Struct2 {\n+        // This formatting\n+        // Should be changed\n+    }\n+\n+    struct Struct3(\n+        // This\n+        // is\n+        // correct\n+    );\n+\n+    struct Struct4(\n+        // This\n+        // is\n+        // not\n+        // correct\n+    );\n+\n+    struct Struct5 {\n+        /*\n+        Comment block\n+        with many lines.\n+         */\n+    }\n+\n+    struct Struct6(\n+        /*\n+        Comment block\n+        with many lines.\n+        */\n+    );\n+\n+    struct Struct7 {\n+        /*\n+        Invalid\n+        format\n+        */\n+    }\n+\n+    struct Struct8(\n+        /*\n+        Invalid\n+        format\n+        */\n+    );\n+\n+    struct Struct9 {/* bar */}\n+}"}, {"sha": "3bb9048a5fd3d6a0eae954c7a2baa6543e824011", "filename": "src/tools/rustfmt/tests/target/issue_5273.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_5273.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_5273.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_5273.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,3 @@\n+struct Example<const N: usize = { 1048576 }> {\n+    //\n+}"}, {"sha": "06f8a0c288d7fadee2d4abb621de66cee7cbb51c", "filename": "src/tools/rustfmt/tests/writemode/source/stdin.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Fsource%2Fstdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Fsource%2Fstdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Fsource%2Fstdin.rs?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,6 @@\n+\n+fn\n+ some( )\n+{\n+}\n+fn main () {}"}, {"sha": "d8b5467ee91ca23f245741e6f1d958262378446e", "filename": "src/tools/rustfmt/tests/writemode/target/output.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Foutput.json", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Foutput.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Foutput.json?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -1 +1 @@\n-[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\",\"expected\":\"fn foo_expr() { 1 }\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\",\"expected\":\"fn foo_stmt() { foo(); }\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\",\"expected\":\"fn foo_decl_local() { let z = 5; }\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\",\"expected\":\"fn empty() {}\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\",\"expected\":\"fn lots_of_space() { 1 }\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\",\"expected\":\"    fn dummy(&self) {}\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"}]}]\n\\ No newline at end of file\n+[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\\n\",\"expected\":\"fn foo_expr() { 1 }\\n\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\\n\",\"expected\":\"fn foo_stmt() { foo(); }\\n\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\\n\",\"expected\":\"fn foo_decl_local() { let z = 5; }\\n\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\\n\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\\n\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\\n\",\"expected\":\"fn empty() {}\\n\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\\n\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\\n\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\\n\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\\n\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\\n\",\"expected\":\"fn lots_of_space() { 1 }\\n\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\\n\",\"expected\":\"    fn dummy(&self) {}\\n\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \\n\",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\\n\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\\n\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\\n\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\\n\"}]}]"}, {"sha": "dbf2c486322957fa44e3d63091efd2120af88bbd", "filename": "src/tools/rustfmt/tests/writemode/target/stdin.json", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Fstdin.json", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Fstdin.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Fstdin.json?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1 @@\n+[{\"name\":\"<stdin>\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\\n\",\"expected\":\"fn some() {}\\nfn main() {}\\n\"}]}]"}, {"sha": "a7301bbc553c39a606824d7759d25f7e7cb60635", "filename": "src/tools/rustfmt/tests/writemode/target/stdin.xml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Fstdin.xml", "raw_url": "https://github.com/rust-lang/rust/raw/419df99e1824a5b65eb0c6d67850dfe014b019fa/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Fstdin.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fwritemode%2Ftarget%2Fstdin.xml?ref=419df99e1824a5b65eb0c6d67850dfe014b019fa", "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+<checkstyle version=\"4.3\"><file name=\"<stdin>\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn some() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn main() {}`\" /></file></checkstyle>\r"}]}