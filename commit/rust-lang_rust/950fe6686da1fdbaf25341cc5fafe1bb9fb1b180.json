{"sha": "950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MGZlNjY4NmRhMWZkYmFmMjUzNDFjYzVmYWZlMWJiOWZiMWIxODA=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-06T18:53:01Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-06T18:53:01Z"}, "message": "librustc_errors => 2018", "tree": {"sha": "e7075f977bce6e6b63d41aca635fb060524d3c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7075f977bce6e6b63d41aca635fb060524d3c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "html_url": "https://github.com/rust-lang/rust/commit/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b139669f374eb5024a50eb13f116ff763b1c5935", "url": "https://api.github.com/repos/rust-lang/rust/commits/b139669f374eb5024a50eb13f116ff763b1c5935", "html_url": "https://github.com/rust-lang/rust/commit/b139669f374eb5024a50eb13f116ff763b1c5935"}], "stats": {"total": 82, "additions": 37, "deletions": 45}, "files": [{"sha": "02c011857bd2a7334e6c2587d768c4f49db54d29", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_errors\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_errors\""}, {"sha": "aefe296ad0fa78d18436bb0397198ca94d66bcab", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -1,11 +1,11 @@\n-use CodeSuggestion;\n-use SubstitutionPart;\n-use Substitution;\n-use Applicability;\n-use Level;\n+use crate::CodeSuggestion;\n+use crate::SubstitutionPart;\n+use crate::Substitution;\n+use crate::Applicability;\n+use crate::Level;\n+use crate::snippet::Style;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n-use snippet::Style;\n \n #[must_use]\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "fd4ea7f2d823f2db417edb1bfa52cd56b407492b", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -1,14 +1,15 @@\n-use Diagnostic;\n-use DiagnosticId;\n-use DiagnosticStyledString;\n-use Applicability;\n+use crate::Diagnostic;\n+use crate::DiagnosticId;\n+use crate::DiagnosticStyledString;\n+use crate::Applicability;\n \n-use Level;\n-use Handler;\n+use crate::Level;\n+use crate::Handler;\n use std::fmt::{self, Debug};\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n use syntax_pos::{MultiSpan, Span};\n+use log::debug;\n \n /// Used for emitting structured error messages and other diagnostic information.\n ///\n@@ -111,8 +112,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         // implements `Drop`.\n         let diagnostic;\n         unsafe {\n-            diagnostic = ::std::ptr::read(&self.diagnostic);\n-            ::std::mem::forget(self);\n+            diagnostic = std::ptr::read(&self.diagnostic);\n+            std::mem::forget(self);\n         };\n         // Logging here is useful to help track down where in logs an error was\n         // actually emitted.\n@@ -298,7 +299,7 @@ impl<'a> DiagnosticBuilder<'a> {\n }\n \n impl<'a> Debug for DiagnosticBuilder<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.diagnostic.fmt(f)\n     }\n }"}, {"sha": "061d23697fa3a26bd6be5b3212dfd06cd318d02f", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -1,28 +1,26 @@\n-use self::Destination::*;\n+use Destination::*;\n \n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n-use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, DiagnosticId};\n-use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n-use styled_buffer::StyledBuffer;\n+use crate::{Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, DiagnosticId};\n+use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n+use crate::styled_buffer::StyledBuffer;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use atty;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::cmp::{min, Reverse};\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n use termcolor::{WriteColor, Color, Buffer};\n-use unicode_width;\n \n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n \n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n-    fn emit(&mut self, db: &DiagnosticBuilder);\n+    fn emit(&mut self, db: &DiagnosticBuilder<'_>);\n \n     /// Check if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n@@ -31,7 +29,7 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn emit(&mut self, db: &DiagnosticBuilder) {\n+    fn emit(&mut self, db: &DiagnosticBuilder<'_>) {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n         let mut suggestions: &[_] = &[];\n@@ -1431,7 +1429,7 @@ fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n                        dst: &mut Destination,\n                        short_message: bool)\n                        -> io::Result<()> {\n-    use lock;\n+    use crate::lock;\n \n     let mut dst = dst.writable();\n "}, {"sha": "831415ed0bb8c038725f01b5918c722452a3d17e", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -6,23 +6,15 @@\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n-#![feature(nll)]\n #![feature(optin_builtin_traits)]\n+#![deny(rust_2018_idioms)]\n \n-extern crate atty;\n-extern crate termcolor;\n-#[cfg(unix)]\n-extern crate libc;\n-#[macro_use]\n-extern crate log;\n-extern crate rustc_data_structures;\n-extern crate serialize as rustc_serialize;\n-extern crate syntax_pos;\n-extern crate unicode_width;\n+#[allow(unused_extern_crates)]\n+extern crate serialize as rustc_serialize; // used by deriving\n \n pub use emitter::ColorConfig;\n \n-use self::Level::*;\n+use Level::*;\n \n use emitter::{Emitter, EmitterWriter};\n \n@@ -144,7 +136,7 @@ impl CodeSuggestion {\n         use syntax_pos::{CharPos, Loc, Pos};\n \n         fn push_trailing(buf: &mut String,\n-                         line_opt: Option<&Cow<str>>,\n+                         line_opt: Option<&Cow<'_, str>>,\n                          lo: &Loc,\n                          hi_opt: Option<&Loc>) {\n             let (lo, hi_opt) = (lo.col.to_usize(), hi_opt.map(|hi| hi.col.to_usize()));\n@@ -247,7 +239,7 @@ impl FatalError {\n }\n \n impl fmt::Display for FatalError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"parser fatal error\")\n     }\n }\n@@ -264,7 +256,7 @@ impl error::Error for FatalError {\n pub struct ExplicitBug;\n \n impl fmt::Display for ExplicitBug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"parser internal bug\")\n     }\n }\n@@ -496,7 +488,7 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n-    pub fn cancel(&self, err: &mut DiagnosticBuilder) {\n+    pub fn cancel(&self, err: &mut DiagnosticBuilder<'_>) {\n         err.cancel();\n     }\n \n@@ -698,12 +690,12 @@ impl Handler {\n         self.taught_diagnostics.borrow_mut().insert(code.clone())\n     }\n \n-    pub fn force_print_db(&self, mut db: DiagnosticBuilder) {\n+    pub fn force_print_db(&self, mut db: DiagnosticBuilder<'_>) {\n         self.emitter.borrow_mut().emit(&db);\n         db.cancel();\n     }\n \n-    fn emit_db(&self, db: &DiagnosticBuilder) {\n+    fn emit_db(&self, db: &DiagnosticBuilder<'_>) {\n         let diagnostic = &**db;\n \n         TRACK_DIAGNOSTICS.with(|track_diagnostics| {\n@@ -749,7 +741,7 @@ pub enum Level {\n }\n \n impl fmt::Display for Level {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.to_str().fmt(f)\n     }\n }"}, {"sha": "0c62ff0ff89b27e3f9f665c7cffd75cc4e3257f1", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -1,6 +1,6 @@\n // Code for annotating snippets.\n \n-use Level;\n+use crate::Level;\n \n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Line {"}, {"sha": "6e03618d2b0b5f24b6d2296d5e9f60317284aaff", "filename": "src/librustc_errors/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950fe6686da1fdbaf25341cc5fafe1bb9fb1b180/src%2Flibrustc_errors%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fstyled_buffer.rs?ref=950fe6686da1fdbaf25341cc5fafe1bb9fb1b180", "patch": "@@ -1,6 +1,6 @@\n // Code for creating styled buffers\n \n-use snippet::{Style, StyledString};\n+use crate::snippet::{Style, StyledString};\n \n #[derive(Debug)]\n pub struct StyledBuffer {"}]}