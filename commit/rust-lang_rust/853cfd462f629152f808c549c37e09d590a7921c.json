{"sha": "853cfd462f629152f808c549c37e09d590a7921c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1M2NmZDQ2MmY2MjkxNTJmODA4YzU0OWMzN2UwOWQ1OTBhNzkyMWM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-01T13:29:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-01T13:29:37Z"}, "message": "Rollup merge of #81504 - matsujika:suggestion-field-access, r=estebank\n\nSuggest accessing field when appropriate\n\nFix #81222\n\nr? ``@estebank``", "tree": {"sha": "da23803c55973ec30c86f635a58864e8f7639943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da23803c55973ec30c86f635a58864e8f7639943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853cfd462f629152f808c549c37e09d590a7921c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGAJBCRBK7hj4Ov3rIwAAdHIIADm7vqOSWl4MAZJ9fFSxhNFN\nyh2WNfFGP6tZo1CwM3fYCEXr5PZ51PIZW13ICCnWJU580mu2fkXrZjPu4fVbGNgv\naibgesSb8MxbywQhnEwlWI/ck86otDWS0UV7R4wCZwmpRNoefo/OqETEbTKA9Rgr\nuLRBce6X4eKzz3jWcHOTl7mqIq6/hmcjSfO8OLgI+MpjwOvEAgUXCPMIs6tHqFVF\nGh7Cvia8ONncr5wfUmyKo+tI8GDcqNsFxmXvTqSM5j33X3DQuVSQjnX1eiLYVtIi\n+Ax19ku/2CS0rER2Hn+lciSXaYpP49HfvZtsYbRG2Y7wEx+CjIWb7tMzj1OnkI8=\n=Z2dY\n-----END PGP SIGNATURE-----\n", "payload": "tree da23803c55973ec30c86f635a58864e8f7639943\nparent 9e8753e2bba28a003917ca8228ba4199948ae2d5\nparent f45a99361a1c8691de15b99f3d8073ba4b433ae0\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612186177 +0100\ncommitter GitHub <noreply@github.com> 1612186177 +0100\n\nRollup merge of #81504 - matsujika:suggestion-field-access, r=estebank\n\nSuggest accessing field when appropriate\n\nFix #81222\n\nr? ``@estebank``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853cfd462f629152f808c549c37e09d590a7921c", "html_url": "https://github.com/rust-lang/rust/commit/853cfd462f629152f808c549c37e09d590a7921c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853cfd462f629152f808c549c37e09d590a7921c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8753e2bba28a003917ca8228ba4199948ae2d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8753e2bba28a003917ca8228ba4199948ae2d5", "html_url": "https://github.com/rust-lang/rust/commit/9e8753e2bba28a003917ca8228ba4199948ae2d5"}, {"sha": "f45a99361a1c8691de15b99f3d8073ba4b433ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f45a99361a1c8691de15b99f3d8073ba4b433ae0", "html_url": "https://github.com/rust-lang/rust/commit/f45a99361a1c8691de15b99f3d8073ba4b433ae0"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "2abb1c725b914dceeb1dba72e7ea3f5d64a442a9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/853cfd462f629152f808c549c37e09d590a7921c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853cfd462f629152f808c549c37e09d590a7921c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=853cfd462f629152f808c549c37e09d590a7921c", "patch": "@@ -1661,6 +1661,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"exp_found {:?} terr {:?}\", exp_found, terr);\n         if let Some(exp_found) = exp_found {\n             self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n+            self.suggest_accessing_field_where_appropriate(cause, &exp_found, diag);\n             self.suggest_await_on_expect_found(cause, span, &exp_found, diag);\n         }\n \n@@ -1819,6 +1820,53 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_accessing_field_where_appropriate(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n+        diag: &mut DiagnosticBuilder<'tcx>,\n+    ) {\n+        debug!(\n+            \"suggest_accessing_field_where_appropriate(cause={:?}, exp_found={:?})\",\n+            cause, exp_found\n+        );\n+        if let ty::Adt(expected_def, expected_substs) = exp_found.expected.kind() {\n+            if expected_def.is_enum() {\n+                return;\n+            }\n+\n+            if let Some((name, ty)) = expected_def\n+                .non_enum_variant()\n+                .fields\n+                .iter()\n+                .filter(|field| field.vis.is_accessible_from(field.did, self.tcx))\n+                .map(|field| (field.ident.name, field.ty(self.tcx, expected_substs)))\n+                .find(|(_, ty)| ty::TyS::same_type(ty, exp_found.found))\n+            {\n+                if let ObligationCauseCode::Pattern { span: Some(span), .. } = cause.code {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        let suggestion = if expected_def.is_struct() {\n+                            format!(\"{}.{}\", snippet, name)\n+                        } else if expected_def.is_union() {\n+                            format!(\"unsafe {{ {}.{} }}\", snippet, name)\n+                        } else {\n+                            return;\n+                        };\n+                        diag.span_suggestion(\n+                            span,\n+                            &format!(\n+                                \"you might have meant to use field `{}` of type `{}`\",\n+                                name, ty\n+                            ),\n+                            suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,\n     /// suggests it.\n     fn suggest_as_ref_where_appropriate("}, {"sha": "05a4a0eb1266debed55155a0fa6b9651ca88b17f", "filename": "src/test/ui/suggestions/field-access.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/853cfd462f629152f808c549c37e09d590a7921c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/853cfd462f629152f808c549c37e09d590a7921c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed?ref=853cfd462f629152f808c549c37e09d590a7921c", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct A {\n+    b: B,\n+}\n+\n+enum B {\n+    Fst,\n+    Snd,\n+}\n+\n+union Foo {\n+    bar: u32,\n+    qux: f32,\n+}\n+\n+fn main() {\n+    let a = A { b: B::Fst };\n+    if let B::Fst = a.b {}; //~ ERROR mismatched types [E0308]\n+    //~^ HELP you might have meant to use field `b` of type `B`\n+    match a.b {\n+        //~^ HELP you might have meant to use field `b` of type `B`\n+        //~| HELP you might have meant to use field `b` of type `B`\n+        B::Fst => (), //~ ERROR mismatched types [E0308]\n+        B::Snd => (), //~ ERROR mismatched types [E0308]\n+    }\n+\n+    let foo = Foo { bar: 42 };\n+    match unsafe { foo.bar } {\n+        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        1u32 => (), //~ ERROR mismatched types [E0308]\n+        _ => (),\n+    }\n+}"}, {"sha": "ad23c0ffa2e74c60abba1ea2c1969a16331ad633", "filename": "src/test/ui/suggestions/field-access.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/853cfd462f629152f808c549c37e09d590a7921c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853cfd462f629152f808c549c37e09d590a7921c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs?ref=853cfd462f629152f808c549c37e09d590a7921c", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct A {\n+    b: B,\n+}\n+\n+enum B {\n+    Fst,\n+    Snd,\n+}\n+\n+union Foo {\n+    bar: u32,\n+    qux: f32,\n+}\n+\n+fn main() {\n+    let a = A { b: B::Fst };\n+    if let B::Fst = a {}; //~ ERROR mismatched types [E0308]\n+    //~^ HELP you might have meant to use field `b` of type `B`\n+    match a {\n+        //~^ HELP you might have meant to use field `b` of type `B`\n+        //~| HELP you might have meant to use field `b` of type `B`\n+        B::Fst => (), //~ ERROR mismatched types [E0308]\n+        B::Snd => (), //~ ERROR mismatched types [E0308]\n+    }\n+\n+    let foo = Foo { bar: 42 };\n+    match foo {\n+        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        1u32 => (), //~ ERROR mismatched types [E0308]\n+        _ => (),\n+    }\n+}"}, {"sha": "aad9872032a2a85b8bd5db6a5c0fdefe01ddbc82", "filename": "src/test/ui/suggestions/field-access.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/853cfd462f629152f808c549c37e09d590a7921c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/853cfd462f629152f808c549c37e09d590a7921c/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr?ref=853cfd462f629152f808c549c37e09d590a7921c", "patch": "@@ -0,0 +1,67 @@\n+error[E0308]: mismatched types\n+  --> $DIR/field-access.rs:20:12\n+   |\n+LL |     Fst,\n+   |     --- unit variant defined here\n+...\n+LL |     if let B::Fst = a {};\n+   |            ^^^^^^   - this expression has type `A`\n+   |            |\n+   |            expected struct `A`, found enum `B`\n+   |\n+help: you might have meant to use field `b` of type `B`\n+   |\n+LL |     if let B::Fst = a.b {};\n+   |                     ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/field-access.rs:25:9\n+   |\n+LL |     Fst,\n+   |     --- unit variant defined here\n+...\n+LL |     match a {\n+   |           - this expression has type `A`\n+...\n+LL |         B::Fst => (),\n+   |         ^^^^^^ expected struct `A`, found enum `B`\n+   |\n+help: you might have meant to use field `b` of type `B`\n+   |\n+LL |     match a.b {\n+   |           ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/field-access.rs:26:9\n+   |\n+LL |     Snd,\n+   |     --- unit variant defined here\n+...\n+LL |     match a {\n+   |           - this expression has type `A`\n+...\n+LL |         B::Snd => (),\n+   |         ^^^^^^ expected struct `A`, found enum `B`\n+   |\n+help: you might have meant to use field `b` of type `B`\n+   |\n+LL |     match a.b {\n+   |           ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/field-access.rs:32:9\n+   |\n+LL |     match foo {\n+   |           --- this expression has type `Foo`\n+LL |\n+LL |         1u32 => (),\n+   |         ^^^^ expected union `Foo`, found `u32`\n+   |\n+help: you might have meant to use field `bar` of type `u32`\n+   |\n+LL |     match unsafe { foo.bar } {\n+   |           ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}