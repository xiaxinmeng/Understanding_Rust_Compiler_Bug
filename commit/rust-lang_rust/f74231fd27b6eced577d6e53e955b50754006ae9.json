{"sha": "f74231fd27b6eced577d6e53e955b50754006ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDIzMWZkMjdiNmVjZWQ1NzdkNmU1M2U5NTViNTA3NTQwMDZhZTk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-04T20:56:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-04T20:56:35Z"}, "message": "Rollup merge of #82765 - oli-obk:polymorphization_regression, r=davidtwco\n\nFix polymorphization ICE on associated types in trait decls using const generics in bounds\n\nr? `@davidtwco`\n\nonly the last commit actually changes something", "tree": {"sha": "e7aed351f67f46d1fa85b0c1c8dedd2023af74d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7aed351f67f46d1fa85b0c1c8dedd2023af74d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74231fd27b6eced577d6e53e955b50754006ae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQUmDCRBK7hj4Ov3rIwAAdHIIAJs3k/HrIuce+TfPJzQMNvGH\nmTtztbK/Uu6ecU5cTgxhf2vJ9GM3V1YRPtj7+rkqd+tN/13DWQiPx7R7dglt0zwk\nVdrgODF/NVQQ4WcixCRp0YcYhWXKApiJR91bY9bDyqgYXoOI50T4ewBp/N+cnCpc\nR4UX8saxS0UCMwVc/wch+aVuldt6PFSNem5Ff/EnztAVhw8IbRv1kdde8q9+lT9M\n0HZNVX7q7rzNd19f4PcoGDZo/VModNeQdwrWyOBCRBdmZnTKBs+/kFC15ZFpYU4X\n3YO0ag5eAUDh1LamZV8RMabbiLuI2gV49/EXf52FFbXXVywlDHYJdiGUVAXKCFQ=\n=RqiK\n-----END PGP SIGNATURE-----\n", "payload": "tree e7aed351f67f46d1fa85b0c1c8dedd2023af74d8\nparent e89276baba21a178399dc47d9d6de7a17fc7798d\nparent 29f4aa753fdf8a48523fbb51ddd2d21546b281a9\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1614891395 +0100\ncommitter GitHub <noreply@github.com> 1614891395 +0100\n\nRollup merge of #82765 - oli-obk:polymorphization_regression, r=davidtwco\n\nFix polymorphization ICE on associated types in trait decls using const generics in bounds\n\nr? `@davidtwco`\n\nonly the last commit actually changes something\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74231fd27b6eced577d6e53e955b50754006ae9", "html_url": "https://github.com/rust-lang/rust/commit/f74231fd27b6eced577d6e53e955b50754006ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74231fd27b6eced577d6e53e955b50754006ae9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89276baba21a178399dc47d9d6de7a17fc7798d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e89276baba21a178399dc47d9d6de7a17fc7798d", "html_url": "https://github.com/rust-lang/rust/commit/e89276baba21a178399dc47d9d6de7a17fc7798d"}, {"sha": "29f4aa753fdf8a48523fbb51ddd2d21546b281a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f4aa753fdf8a48523fbb51ddd2d21546b281a9", "html_url": "https://github.com/rust-lang/rust/commit/29f4aa753fdf8a48523fbb51ddd2d21546b281a9"}], "stats": {"total": 123, "additions": 69, "deletions": 54}, "files": [{"sha": "f2f7242a8fdde7adaceb8c338678e4bdbc5572d5", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=f74231fd27b6eced577d6e53e955b50754006ae9", "patch": "@@ -438,18 +438,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    #[inline]\n-    pub fn optimized_mir_or_const_arg_mir(\n-        self,\n-        def: ty::WithOptConstParam<DefId>,\n-    ) -> &'tcx Body<'tcx> {\n-        if let Some((did, param_did)) = def.as_const_arg() {\n-            self.mir_for_ctfe_of_const_arg((did, param_did))\n-        } else {\n-            self.optimized_mir(def.did)\n-        }\n-    }\n-\n     #[inline]\n     pub fn mir_for_ctfe_opt_const_arg(self, def: ty::WithOptConstParam<DefId>) -> &'tcx Body<'tcx> {\n         if let Some((did, param_did)) = def.as_const_arg() {"}, {"sha": "23cedfd499eaa2e9d86fd2e6d4f2b1daaf1bc72d", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=f74231fd27b6eced577d6e53e955b50754006ae9", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     /// Returns a new `Instance` where generic parameters in `instance.substs` are replaced by\n-    /// identify parameters if they are determined to be unused in `instance.def`.\n+    /// identity parameters if they are determined to be unused in `instance.def`.\n     pub fn polymorphize(self, tcx: TyCtxt<'tcx>) -> Self {\n         debug!(\"polymorphize: running polymorphization analysis\");\n         if !tcx.sess.opts.debugging_opts.polymorphize {"}, {"sha": "c27a337554e675342504189171201f35f6eb07b3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f74231fd27b6eced577d6e53e955b50754006ae9", "patch": "@@ -2963,7 +2963,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 | DefKind::AnonConst => self.mir_for_ctfe_opt_const_arg(def),\n                 // If the caller wants `mir_for_ctfe` of a function they should not be using\n                 // `instance_mir`, so we'll assume const fn also wants the optimized version.\n-                _ => self.optimized_mir_or_const_arg_mir(def),\n+                _ => {\n+                    assert_eq!(def.const_param_did, None);\n+                    self.optimized_mir(def.did)\n+                }\n             },\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)"}, {"sha": "05b0e3a7dab954ba1114ff6a80736ae90c26ac4d", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 64, "deletions": 40, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74231fd27b6eced577d6e53e955b50754006ae9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=f74231fd27b6eced577d6e53e955b50754006ae9", "patch": "@@ -30,9 +30,8 @@ pub fn provide(providers: &mut Providers) {\n /// Determine which generic parameters are used by the function/method/closure represented by\n /// `def_id`. Returns a bitset where bits representing unused parameters are set (`is_empty`\n /// indicates all parameters are used).\n+#[instrument(skip(tcx))]\n fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n-    debug!(\"unused_generic_params({:?})\", def_id);\n-\n     if !tcx.sess.opts.debugging_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return FiniteBitSet::new_empty();\n@@ -46,7 +45,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     }\n \n     let generics = tcx.generics_of(def_id);\n-    debug!(\"unused_generic_params: generics={:?}\", generics);\n+    debug!(?generics);\n \n     // Exit early when there are no parameters to be unused.\n     if generics.count() == 0 {\n@@ -57,11 +56,11 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     let context = tcx.hir().body_const_context(def_id.expect_local());\n     match context {\n         Some(ConstContext::ConstFn) | None if !tcx.is_mir_available(def_id) => {\n-            debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n+            debug!(\"no mir available\");\n             return FiniteBitSet::new_empty();\n         }\n         Some(_) if !tcx.is_ctfe_mir_available(def_id) => {\n-            debug!(\"unused_generic_params: (no ctfe mir available) def_id={:?}\", def_id);\n+            debug!(\"no ctfe mir available\");\n             return FiniteBitSet::new_empty();\n         }\n         _ => {}\n@@ -72,9 +71,9 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n     let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n     unused_parameters.set_range(0..generics_count);\n-    debug!(\"unused_generic_params: (start) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(start)\");\n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n-    debug!(\"unused_generic_params: (after default) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(after default)\");\n \n     // Visit MIR and accumululate used generic parameters.\n     let body = match context {\n@@ -85,10 +84,10 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     };\n     let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters: &mut unused_parameters };\n     vis.visit_body(body);\n-    debug!(\"unused_generic_params: (after visitor) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(after visitor)\");\n \n     mark_used_by_predicates(tcx, def_id, &mut unused_parameters);\n-    debug!(\"unused_generic_params: (end) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(end)\");\n \n     // Emit errors for debugging and testing if enabled.\n     if !unused_parameters.is_empty() {\n@@ -101,24 +100,55 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n /// Some parameters are considered used-by-default, such as non-generic parameters and the dummy\n /// generic parameters from closures, this function marks them as used. `leaf_is_closure` should\n /// be `true` if the item that `unused_generic_params` was invoked on is a closure.\n+#[instrument(skip(tcx, def_id, generics, unused_parameters))]\n fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n     unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n-    if !tcx.is_trait(def_id) && (tcx.is_closure(def_id) || tcx.type_of(def_id).is_generator()) {\n-        for param in &generics.params {\n-            debug!(\"mark_used_by_default_parameters: (closure/gen) param={:?}\", param);\n-            unused_parameters.clear(param.index);\n-        }\n-    } else {\n-        for param in &generics.params {\n-            debug!(\"mark_used_by_default_parameters: (other) param={:?}\", param);\n-            if let ty::GenericParamDefKind::Lifetime = param.kind {\n+    match tcx.def_kind(def_id) {\n+        DefKind::Closure | DefKind::Generator => {\n+            for param in &generics.params {\n+                debug!(?param, \"(closure/gen)\");\n                 unused_parameters.clear(param.index);\n             }\n         }\n+        DefKind::Mod\n+        | DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::AssocTy\n+        | DefKind::TyParam\n+        | DefKind::Fn\n+        | DefKind::Const\n+        | DefKind::ConstParam\n+        | DefKind::Static\n+        | DefKind::Ctor(_, _)\n+        | DefKind::AssocFn\n+        | DefKind::AssocConst\n+        | DefKind::Macro(_)\n+        | DefKind::ExternCrate\n+        | DefKind::Use\n+        | DefKind::ForeignMod\n+        | DefKind::AnonConst\n+        | DefKind::OpaqueTy\n+        | DefKind::Field\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::Impl => {\n+            for param in &generics.params {\n+                debug!(?param, \"(other)\");\n+                if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                    unused_parameters.clear(param.index);\n+                }\n+            }\n+        }\n     }\n \n     if let Some(parent) = generics.parent {\n@@ -128,23 +158,20 @@ fn mark_used_by_default_parameters<'tcx>(\n \n /// Search the predicates on used generic parameters for any unused generic parameters, and mark\n /// those as used.\n+#[instrument(skip(tcx, def_id))]\n fn mark_used_by_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n     let def_id = tcx.closure_base_def_id(def_id);\n     let predicates = tcx.explicit_predicates_of(def_id);\n-    debug!(\"mark_used_by_predicates: predicates_of={:?}\", predicates);\n \n     let mut current_unused_parameters = FiniteBitSet::new_empty();\n     // Run to a fixed point to support `where T: Trait<U>, U: Trait<V>`, starting with an empty\n     // bit set so that this is skipped if all parameters are already used.\n     while current_unused_parameters != *unused_parameters {\n-        debug!(\n-            \"mark_used_by_predicates: current_unused_parameters={:?} = unused_parameters={:?}\",\n-            current_unused_parameters, unused_parameters\n-        );\n+        debug!(?current_unused_parameters, ?unused_parameters);\n         current_unused_parameters = *unused_parameters;\n \n         for (predicate, _) in predicates.predicates {\n@@ -169,13 +196,13 @@ fn mark_used_by_predicates<'tcx>(\n \n /// Emit errors for the function annotated by `#[rustc_polymorphize_error]`, labelling each generic\n /// parameter which was unused.\n+#[instrument(skip(tcx, generics))]\n fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n     unused_parameters: &FiniteBitSet<u32>,\n ) {\n-    debug!(\"emit_unused_generic_params_error: def_id={:?}\", def_id);\n     let base_def_id = tcx.closure_base_def_id(def_id);\n     if !tcx\n         .get_attrs(base_def_id)\n@@ -185,7 +212,6 @@ fn emit_unused_generic_params_error<'tcx>(\n         return;\n     }\n \n-    debug!(\"emit_unused_generic_params_error: unused_parameters={:?}\", unused_parameters);\n     let fn_span = match tcx.opt_item_name(def_id) {\n         Some(ident) => ident.span,\n         _ => tcx.def_span(def_id),\n@@ -197,7 +223,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     while let Some(generics) = next_generics {\n         for param in &generics.params {\n             if unused_parameters.contains(param.index).unwrap_or(false) {\n-                debug!(\"emit_unused_generic_params_error: param={:?}\", param);\n+                debug!(?param);\n                 let def_span = tcx.def_span(param.def_id);\n                 err.span_label(def_span, &format!(\"generic parameter `{}` is unused\", param.name));\n             }\n@@ -219,33 +245,31 @@ struct MarkUsedGenericParams<'a, 'tcx> {\n impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n     /// Invoke `unused_generic_params` on a body contained within the current item (e.g.\n     /// a closure, generator or constant).\n+    #[instrument(skip(self, def_id, substs))]\n     fn visit_child_body(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) {\n         let unused = self.tcx.unused_generic_params(def_id);\n-        debug!(\n-            \"visit_child_body: unused_parameters={:?} unused={:?}\",\n-            self.unused_parameters, unused\n-        );\n+        debug!(?self.unused_parameters, ?unused);\n         for (i, arg) in substs.iter().enumerate() {\n             let i = i.try_into().unwrap();\n             if !unused.contains(i).unwrap_or(false) {\n                 arg.visit_with(self);\n             }\n         }\n-        debug!(\"visit_child_body: unused_parameters={:?}\", self.unused_parameters);\n+        debug!(?self.unused_parameters);\n     }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+    #[instrument(skip(self, local))]\n     fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n-        debug!(\"visit_local_decl: local_decl={:?}\", local_decl);\n         if local == Local::from_usize(1) {\n             let def_kind = self.tcx.def_kind(self.def_id);\n             if matches!(def_kind, DefKind::Closure | DefKind::Generator) {\n                 // Skip visiting the closure/generator that is currently being processed. This only\n                 // happens because the first argument to the closure is a reference to itself and\n                 // that will call `visit_substs`, resulting in each generic parameter captured being\n                 // considered used by default.\n-                debug!(\"visit_local_decl: skipping closure substs\");\n+                debug!(\"skipping closure substs\");\n                 return;\n             }\n         }\n@@ -263,15 +287,15 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+    #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n         match c.val {\n             ty::ConstKind::Param(param) => {\n-                debug!(\"visit_const: param={:?}\", param);\n+                debug!(?param);\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n@@ -296,15 +320,15 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n         match *ty.kind() {\n             ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n-                debug!(\"visit_ty: def_id={:?}\", def_id);\n+                debug!(?def_id);\n                 // Avoid cycle errors with generators.\n                 if def_id == self.def_id {\n                     return ControlFlow::CONTINUE;\n@@ -316,7 +340,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 ControlFlow::CONTINUE\n             }\n             ty::Param(param) => {\n-                debug!(\"visit_ty: param={:?}\", param);\n+                debug!(?param);\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n@@ -333,8 +357,8 @@ struct HasUsedGenericParams<'a> {\n impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n     type BreakTy = ();\n \n+    #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n@@ -351,8 +375,8 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n         }\n     }\n \n+    #[instrument(skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }"}]}