{"sha": "6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDU5MDZmYmEwYmNhMmJjNzdkYTlhZDA5Y2M5ZjkxYzNjZWEzZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T14:14:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T14:14:47Z"}, "message": "Auto merge of #71125 - Dylan-DPC:rollup-3b8prjh, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71112 (Remove the last remnant of unsigned Neg)\n - #71120 (Clean up E0517 explanation)\n - #71121 (Fix broken link in documentation for String::from_utf8)\n - #71122 (update `FnCtxt::lookup_method` docs)\n - #71124 (Add missing comma)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "387ee6e30eec34b94999b8b49bd2770a5313c07c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/387ee6e30eec34b94999b8b49bd2770a5313c07c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "html_url": "https://github.com/rust-lang/rust/commit/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba72b15666b2491415aec703a02c2364fe5e2790", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba72b15666b2491415aec703a02c2364fe5e2790", "html_url": "https://github.com/rust-lang/rust/commit/ba72b15666b2491415aec703a02c2364fe5e2790"}, {"sha": "816443e6cfbd07443ec9c26f9b83fdd9ffa5715c", "url": "https://api.github.com/repos/rust-lang/rust/commits/816443e6cfbd07443ec9c26f9b83fdd9ffa5715c", "html_url": "https://github.com/rust-lang/rust/commit/816443e6cfbd07443ec9c26f9b83fdd9ffa5715c"}], "stats": {"total": 35, "additions": 11, "deletions": 24}, "files": [{"sha": "80fa813991567881ee7549682d2dccd43cbc753e", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "patch": "@@ -482,6 +482,7 @@ impl String {\n     /// [`String`]: struct.String.html\n     /// [`u8`]: ../../std/primitive.u8.html\n     /// [`Vec<u8>`]: ../../std/vec/struct.Vec.html\n+    /// [`&str`]: ../../std/primitive.str.html\n     /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n     /// [`into_bytes`]: struct.String.html#method.into_bytes\n     /// [`FromUtf8Error`]: struct.FromUtf8Error.html"}, {"sha": "622a138abe9d19cae5ff0945563469b166a1da82", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "patch": "@@ -617,35 +617,22 @@ pub trait Neg {\n     fn neg(self) -> Self::Output;\n }\n \n-macro_rules! neg_impl_core {\n-    ($id:ident => $body:expr, $($t:ty)*) => ($(\n+macro_rules! neg_impl {\n+    ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Neg for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            fn neg(self) -> $t { let $id = self; $body }\n+            fn neg(self) -> $t { -self }\n         }\n \n         forward_ref_unop! { impl Neg, neg for $t }\n     )*)\n }\n \n-macro_rules! neg_impl_numeric {\n-    ($($t:ty)*) => { neg_impl_core!{ x => -x, $($t)*} }\n-}\n-\n-#[allow(unused_macros)]\n-macro_rules! neg_impl_unsigned {\n-    ($($t:ty)*) => {\n-        neg_impl_core!{ x => {\n-            !x.wrapping_add(1)\n-        }, $($t)*} }\n-}\n-\n-// neg_impl_unsigned! { usize u8 u16 u32 u64 }\n-neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n+neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The addition assignment operator `+=`.\n ///"}, {"sha": "ae802245bd1d70dcbdefac72562148a93b394169", "filename": "src/librustc_error_codes/error_codes/E0517.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0517.md", "raw_url": "https://github.com/rust-lang/rust/raw/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0517.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0517.md?ref=6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "patch": "@@ -1,5 +1,4 @@\n-This error indicates that a `#[repr(..)]` attribute was placed on an\n-unsupported item.\n+A `#[repr(..)]` attribute was placed on an unsupported item.\n \n Examples of erroneous code:\n "}, {"sha": "c4f53332cb6739011a956ae5dc88ac035a6c8286", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "patch": "@@ -171,11 +171,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// Given a method call like `foo.bar::<T1,...Tn>(...)`:\n     ///\n-    /// * `fcx`:                   the surrounding `FnCtxt` (!)\n-    /// * `span`:                  the span for the method call\n-    /// * `method_name`:           the name of the method being called (`bar`)\n+    /// * `self`:                  the surrounding `FnCtxt` (!)\n     /// * `self_ty`:               the (unadjusted) type of the self expression (`foo`)\n-    /// * `supplied_method_types`: the explicit method type parameters, if any (`T1..Tn`)\n+    /// * `segment`:               the name and generic arguments of the method (`bar::<T1, ...Tn>`)\n+    /// * `span`:                  the span for the method call\n+    /// * `call_expr`:             the complete method call: (`foo.bar::<T1,...Tn>(...)`)\n     /// * `self_expr`:             the self expression (`foo`)\n     pub fn lookup_method(\n         &self,"}, {"sha": "f85120d170f737269f11ffdf445acf4fc7e0d608", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "patch": "@@ -224,7 +224,7 @@ pub trait OpenOptionsExt {\n     /// opening a named pipe, to control to which degree a server process can\n     /// act on behalf of a client process (security impersonation level).\n     ///\n-    /// When `security_qos_flags` is not set a malicious program can gain the\n+    /// When `security_qos_flags` is not set, a malicious program can gain the\n     /// elevated privileges of a privileged Rust process when it allows opening\n     /// user-specified paths, by tricking it into opening a named pipe. So\n     /// arguably `security_qos_flags` should also be set when opening arbitrary"}]}