{"sha": "8fcb015b442860866e39b6bda77b557d6267242e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmY2IwMTViNDQyODYwODY2ZTM5YjZiZGE3N2I1NTdkNjI2NzI0MmU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T03:36:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T03:36:08Z"}, "message": "Rollup merge of #73910 - cuviper:while-indexing, r=oli-obk\n\nRewrite a few manual index loops with while-let\n\nThere were a few instances of this pattern:\n\n```rust\nwhile index < vec.len() {\n    let item = &vec[index];\n    // ...\n}\n```\n\nThese can be indexed at once:\n\n```rust\nwhile let Some(item) = vec.get(index) {\n    // ...\n}\n```\n\nParticularly in `ObligationForest::process_obligations`, this mitigates\na codegen regression found with LLVM 11 (#73526).", "tree": {"sha": "07b1eafc951ee7238bc336935efade730d1989ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b1eafc951ee7238bc336935efade730d1989ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fcb015b442860866e39b6bda77b557d6267242e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/VYoCRBK7hj4Ov3rIwAAdHIIABEN9iLInnS8Sc/sNgx1rbN+\nbfsY4N4Nd/+xRo5wLugxMU93lb3rDapsnTs7z6tTj/A4H1DOaY5LENcoYzoC+/Ts\np5gzbCc2g4Aa/0jM5A1wuMHaEdEZkLu1E2uKqpgkpvQ8lwarDfWWHNnItPrBrZsU\n4SOznSursZxF3IkyEMRw89m//IqZvDeyk7Pd8QhAWMHQ0ncberH21giVip2ilDOy\nmNxBM0dyiP8EI12rekHCDub1cHwwvz34qI6ZGHJAUQ/nedo7SslCJLsW1FqGLnbJ\nfK32wb3GgrlL9gX2BJQk90Bt7zB8nXBzq5f+rfYlPEmiXhabEJ8IFAYYCtidQf4=\n=wrCH\n-----END PGP SIGNATURE-----\n", "payload": "tree 07b1eafc951ee7238bc336935efade730d1989ef\nparent 441f04b56be65c9228b17adde686b0bda6d38917\nparent 47425e476b8fd087799d1229a23f7aa81c1835bf\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593660968 -0700\ncommitter GitHub <noreply@github.com> 1593660968 -0700\n\nRollup merge of #73910 - cuviper:while-indexing, r=oli-obk\n\nRewrite a few manual index loops with while-let\n\nThere were a few instances of this pattern:\n\n```rust\nwhile index < vec.len() {\n    let item = &vec[index];\n    // ...\n}\n```\n\nThese can be indexed at once:\n\n```rust\nwhile let Some(item) = vec.get(index) {\n    // ...\n}\n```\n\nParticularly in `ObligationForest::process_obligations`, this mitigates\na codegen regression found with LLVM 11 (#73526).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fcb015b442860866e39b6bda77b557d6267242e", "html_url": "https://github.com/rust-lang/rust/commit/8fcb015b442860866e39b6bda77b557d6267242e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fcb015b442860866e39b6bda77b557d6267242e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441f04b56be65c9228b17adde686b0bda6d38917", "url": "https://api.github.com/repos/rust-lang/rust/commits/441f04b56be65c9228b17adde686b0bda6d38917", "html_url": "https://github.com/rust-lang/rust/commit/441f04b56be65c9228b17adde686b0bda6d38917"}, {"sha": "47425e476b8fd087799d1229a23f7aa81c1835bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/47425e476b8fd087799d1229a23f7aa81c1835bf", "html_url": "https://github.com/rust-lang/rust/commit/47425e476b8fd087799d1229a23f7aa81c1835bf"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "7cf5202d919f8269ee500813568cb12e77627d9b", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fcb015b442860866e39b6bda77b557d6267242e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fcb015b442860866e39b6bda77b557d6267242e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=8fcb015b442860866e39b6bda77b557d6267242e", "patch": "@@ -412,9 +412,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         // be computed with the initial length, and we would miss the appended\n         // nodes. Therefore we use a `while` loop.\n         let mut index = 0;\n-        while index < self.nodes.len() {\n-            let node = &mut self.nodes[index];\n-\n+        while let Some(node) = self.nodes.get_mut(index) {\n             // `processor.process_obligation` can modify the predicate within\n             // `node.obligation`, and that predicate is the key used for\n             // `self.active_cache`. This means that `self.active_cache` can get\n@@ -666,16 +664,16 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         for node in &mut self.nodes {\n             let mut i = 0;\n-            while i < node.dependents.len() {\n-                let new_index = node_rewrites[node.dependents[i]];\n+            while let Some(dependent) = node.dependents.get_mut(i) {\n+                let new_index = node_rewrites[*dependent];\n                 if new_index >= orig_nodes_len {\n                     node.dependents.swap_remove(i);\n                     if i == 0 && node.has_parent {\n                         // We just removed the parent.\n                         node.has_parent = false;\n                     }\n                 } else {\n-                    node.dependents[i] = new_index;\n+                    *dependent = new_index;\n                     i += 1;\n                 }\n             }"}, {"sha": "189da3395ad1b32999e43db90bd67b6e1ebc33f9", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fcb015b442860866e39b6bda77b557d6267242e/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fcb015b442860866e39b6bda77b557d6267242e/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=8fcb015b442860866e39b6bda77b557d6267242e", "patch": "@@ -391,14 +391,12 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n /// - Input: `[a, x, b, y]`. Output: `[a, x]`.\n fn pare_down(candidates: &mut Vec<usize>, closure: &BitMatrix<usize, usize>) {\n     let mut i = 0;\n-    while i < candidates.len() {\n-        let candidate_i = candidates[i];\n+    while let Some(&candidate_i) = candidates.get(i) {\n         i += 1;\n \n         let mut j = i;\n         let mut dead = 0;\n-        while j < candidates.len() {\n-            let candidate_j = candidates[j];\n+        while let Some(&candidate_j) = candidates.get(j) {\n             if closure.contains(candidate_i, candidate_j) {\n                 // If `i` can reach `j`, then we can remove `j`. So just\n                 // mark it as dead and move on; subsequent indices will be"}]}