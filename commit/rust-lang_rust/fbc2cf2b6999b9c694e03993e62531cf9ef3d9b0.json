{"sha": "fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzJjZjJiNjk5OWI5YzY5NGUwMzk5M2U2MjUzMWNmOWVmM2Q5YjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-20T12:48:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T12:48:27Z"}, "message": "Merge #2609\n\n2609: Use generic ItemLoc for impls r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a476ee7ed8ef381806f6b7959dd256379e25133e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a476ee7ed8ef381806f6b7959dd256379e25133e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/MMbCRBK7hj4Ov3rIwAAdHIIAJaaFtAy3IplAVSP5aQV3U6j\nH+HokJqY2TKJCownbcFlwKPnTyN0MVAVd8LimPFDxNeZdhWW+1S709L9unJayuH+\n7c03+S4yGk9XDi4dKKMoFzLIBd1+Xy70+HtWMUE/RmuqGcp+QhHyN0VVUUxZfk4O\n+f5+Vxq0EQa8PjnOHdFGywDzLzrvoj+xQ+t3h8mNIl6TnQ3RhIW9d5doxfHvJSSj\nsUdCOmu5hFpjGzcLmLi7+gafZuMo+KZ4VZjORQm2AIyZj2UNDO/QRdkEIDAwksCb\nJs/ihW4Rb5ApmiBVx58T5eGr+LIPf2+AFZjlBKLj/aqJ/cZXAVjyeZZyemRqaAA=\n=T/Pj\n-----END PGP SIGNATURE-----\n", "payload": "tree a476ee7ed8ef381806f6b7959dd256379e25133e\nparent 65377620245bda207145742595a7bd878e14f7ec\nparent 1234dda9ee60a19a83a9664c2e1208247566b49b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576846107 +0000\ncommitter GitHub <noreply@github.com> 1576846107 +0000\n\nMerge #2609\n\n2609: Use generic ItemLoc for impls r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "html_url": "https://github.com/rust-lang/rust/commit/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65377620245bda207145742595a7bd878e14f7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/65377620245bda207145742595a7bd878e14f7ec", "html_url": "https://github.com/rust-lang/rust/commit/65377620245bda207145742595a7bd878e14f7ec"}, {"sha": "1234dda9ee60a19a83a9664c2e1208247566b49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1234dda9ee60a19a83a9664c2e1208247566b49b", "html_url": "https://github.com/rust-lang/rust/commit/1234dda9ee60a19a83a9664c2e1208247566b49b"}], "stats": {"total": 259, "additions": 61, "deletions": 198}, "files": [{"sha": "ecf883272d6d995f4e606fb0da653202edbafcd4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "patch": "@@ -754,7 +754,7 @@ impl ImplBlock {\n         let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n         Type {\n-            krate: self.id.lookup(db).container.krate,\n+            krate: self.id.lookup(db).container.module(db).krate,\n             ty: InEnvironment { value: ty, environment },\n         }\n     }\n@@ -768,7 +768,7 @@ impl ImplBlock {\n     }\n \n     pub fn module(&self, db: &impl DefDatabase) -> Module {\n-        self.id.lookup(db).container.into()\n+        self.id.lookup(db).container.module(db).into()\n     }\n \n     pub fn krate(&self, db: &impl DefDatabase) -> Crate {"}, {"sha": "d11b573e5f5861252f41d50eb00480b6fc872b0c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 55, "deletions": 193, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "patch": "@@ -45,7 +45,7 @@ use std::hash::Hash;\n use hir_expand::{ast_id_map::FileAstId, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n-use ra_syntax::ast;\n+use ra_syntax::{ast, AstNode};\n \n use crate::builtin_type::BuiltinType;\n \n@@ -65,101 +65,57 @@ pub struct ModuleId {\n pub struct LocalModuleId(RawId);\n impl_arena_id!(LocalModuleId);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct FunctionId(salsa::InternId);\n-impl_intern_key!(FunctionId);\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FunctionLoc {\n-    pub container: AssocContainerId,\n-    pub ast_id: AstId<ast::FnDef>,\n+pub struct ItemLoc<N: AstNode> {\n+    pub container: ContainerId,\n+    pub ast_id: AstId<N>,\n }\n \n-impl Intern for FunctionLoc {\n-    type ID = FunctionId;\n-    fn intern(self, db: &impl db::DefDatabase) -> FunctionId {\n-        db.intern_function(self)\n-    }\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AssocItemLoc<N: AstNode> {\n+    pub container: AssocContainerId,\n+    pub ast_id: AstId<N>,\n }\n \n-impl Lookup for FunctionId {\n-    type Data = FunctionLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> FunctionLoc {\n-        db.lookup_intern_function(*self)\n-    }\n-}\n+macro_rules! impl_intern {\n+    ($id:ident, $loc:ident, $intern:ident, $lookup:ident) => {\n+        impl_intern_key!($id);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructId(salsa::InternId);\n-impl_intern_key!(StructId);\n+        impl Intern for $loc {\n+            type ID = $id;\n+            fn intern(self, db: &impl db::DefDatabase) -> $id {\n+                db.$intern(self)\n+            }\n+        }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::StructDef>,\n+        impl Lookup for $id {\n+            type Data = $loc;\n+            fn lookup(&self, db: &impl db::DefDatabase) -> $loc {\n+                db.$lookup(*self)\n+            }\n+        }\n+    };\n }\n \n-impl Intern for StructLoc {\n-    type ID = StructId;\n-    fn intern(self, db: &impl db::DefDatabase) -> StructId {\n-        db.intern_struct(self)\n-    }\n-}\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct FunctionId(salsa::InternId);\n+type FunctionLoc = AssocItemLoc<ast::FnDef>;\n+impl_intern!(FunctionId, FunctionLoc, intern_function, lookup_intern_function);\n \n-impl Lookup for StructId {\n-    type Data = StructLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> StructLoc {\n-        db.lookup_intern_struct(*self)\n-    }\n-}\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct StructId(salsa::InternId);\n+type StructLoc = ItemLoc<ast::StructDef>;\n+impl_intern!(StructId, StructLoc, intern_struct, lookup_intern_struct);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct UnionId(salsa::InternId);\n-impl_intern_key!(UnionId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnionLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::UnionDef>,\n-}\n-\n-impl Intern for UnionLoc {\n-    type ID = UnionId;\n-    fn intern(self, db: &impl db::DefDatabase) -> UnionId {\n-        db.intern_union(self)\n-    }\n-}\n-\n-impl Lookup for UnionId {\n-    type Data = UnionLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> UnionLoc {\n-        db.lookup_intern_union(*self)\n-    }\n-}\n+pub type UnionLoc = ItemLoc<ast::UnionDef>;\n+impl_intern!(UnionId, UnionLoc, intern_union, lookup_intern_union);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(salsa::InternId);\n-impl_intern_key!(EnumId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::EnumDef>,\n-}\n-\n-impl Intern for EnumLoc {\n-    type ID = EnumId;\n-    fn intern(self, db: &impl db::DefDatabase) -> EnumId {\n-        db.intern_enum(self)\n-    }\n-}\n-\n-impl Lookup for EnumId {\n-    type Data = EnumLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> EnumLoc {\n-        db.lookup_intern_enum(*self)\n-    }\n-}\n+pub type EnumLoc = ItemLoc<ast::EnumDef>;\n+impl_intern!(EnumId, EnumLoc, intern_enum, lookup_intern_enum);\n \n // FIXME: rename to `VariantId`, only enums can ave variants\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -184,122 +140,38 @@ impl_arena_id!(LocalStructFieldId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n-impl_intern_key!(ConstId);\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstLoc {\n-    pub container: AssocContainerId,\n-    pub ast_id: AstId<ast::ConstDef>,\n-}\n-\n-impl Intern for ConstLoc {\n-    type ID = ConstId;\n-    fn intern(self, db: &impl db::DefDatabase) -> ConstId {\n-        db.intern_const(self)\n-    }\n-}\n-\n-impl Lookup for ConstId {\n-    type Data = ConstLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> ConstLoc {\n-        db.lookup_intern_const(*self)\n-    }\n-}\n+type ConstLoc = AssocItemLoc<ast::ConstDef>;\n+impl_intern!(ConstId, ConstLoc, intern_const, lookup_intern_const);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StaticId(salsa::InternId);\n-impl_intern_key!(StaticId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StaticLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::StaticDef>,\n-}\n-\n-impl Intern for StaticLoc {\n-    type ID = StaticId;\n-    fn intern(self, db: &impl db::DefDatabase) -> StaticId {\n-        db.intern_static(self)\n-    }\n-}\n-\n-impl Lookup for StaticId {\n-    type Data = StaticLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> StaticLoc {\n-        db.lookup_intern_static(*self)\n-    }\n-}\n+pub type StaticLoc = ItemLoc<ast::StaticDef>;\n+impl_intern!(StaticId, StaticLoc, intern_static, lookup_intern_static);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TraitId(salsa::InternId);\n-impl_intern_key!(TraitId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TraitLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::TraitDef>,\n-}\n-\n-impl Intern for TraitLoc {\n-    type ID = TraitId;\n-    fn intern(self, db: &impl db::DefDatabase) -> TraitId {\n-        db.intern_trait(self)\n-    }\n-}\n-\n-impl Lookup for TraitId {\n-    type Data = TraitLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> TraitLoc {\n-        db.lookup_intern_trait(*self)\n-    }\n-}\n+pub type TraitLoc = ItemLoc<ast::TraitDef>;\n+impl_intern!(TraitId, TraitLoc, intern_trait, lookup_intern_trait);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAliasId(salsa::InternId);\n-impl_intern_key!(TypeAliasId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeAliasLoc {\n-    pub container: AssocContainerId,\n-    pub ast_id: AstId<ast::TypeAliasDef>,\n-}\n-\n-impl Intern for TypeAliasLoc {\n-    type ID = TypeAliasId;\n-    fn intern(self, db: &impl db::DefDatabase) -> TypeAliasId {\n-        db.intern_type_alias(self)\n-    }\n-}\n-\n-impl Lookup for TypeAliasId {\n-    type Data = TypeAliasLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> TypeAliasLoc {\n-        db.lookup_intern_type_alias(*self)\n-    }\n-}\n+type TypeAliasLoc = AssocItemLoc<ast::TypeAliasDef>;\n+impl_intern!(TypeAliasId, TypeAliasLoc, intern_type_alias, lookup_intern_type_alias);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);\n-impl_intern_key!(ImplId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ImplLoc {\n-    pub container: ModuleId,\n-    pub ast_id: AstId<ast::ImplBlock>,\n-}\n+type ImplLoc = ItemLoc<ast::ImplBlock>;\n+impl_intern!(ImplId, ImplLoc, intern_impl, lookup_intern_impl);\n \n-impl Intern for ImplLoc {\n-    type ID = ImplId;\n-    fn intern(self, db: &impl db::DefDatabase) -> ImplId {\n-        db.intern_impl(self)\n-    }\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TypeParamId {\n+    pub parent: GenericDefId,\n+    pub local_id: LocalTypeParamId,\n }\n \n-impl Lookup for ImplId {\n-    type Data = ImplLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> ImplLoc {\n-        db.lookup_intern_impl(*self)\n-    }\n-}\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct LocalTypeParamId(RawId);\n+impl_arena_id!(LocalTypeParamId);\n \n macro_rules! impl_froms {\n     ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {\n@@ -320,16 +192,6 @@ macro_rules! impl_froms {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TypeParamId {\n-    pub parent: GenericDefId,\n-    pub local_id: LocalTypeParamId,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalTypeParamId(RawId);\n-impl_arena_id!(LocalTypeParamId);\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {\n     ModuleId(ModuleId),\n@@ -498,7 +360,7 @@ impl HasModule for AssocContainerId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match *self {\n             AssocContainerId::ContainerId(it) => it.module(db),\n-            AssocContainerId::ImplId(it) => it.lookup(db).container,\n+            AssocContainerId::ImplId(it) => it.lookup(db).container.module(db),\n             AssocContainerId::TraitId(it) => it.lookup(db).container.module(db),\n         }\n     }\n@@ -550,7 +412,7 @@ impl HasModule for GenericDefId {\n             GenericDefId::AdtId(it) => it.module(db),\n             GenericDefId::TraitId(it) => it.lookup(db).container.module(db),\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n-            GenericDefId::ImplId(it) => it.lookup(db).container,\n+            GenericDefId::ImplId(it) => it.lookup(db).container.module(db),\n             GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }"}, {"sha": "e68bf4868867428b4706338702483f19054af17f", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "patch": "@@ -661,9 +661,10 @@ where\n                             krate: self.def_collector.def_map.krate,\n                             local_id: self.module_id,\n                         };\n+                        let container = ContainerId::ModuleId(module);\n                         let ast_id = self.raw_items[imp].ast_id;\n                         let impl_id =\n-                            ImplLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                            ImplLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                                 .intern(self.def_collector.db);\n                         self.def_collector.def_map.modules[self.module_id].impls.push(impl_id)\n                     }"}, {"sha": "92fb4c0817dace09712aa99dd445861f92fb82d1", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "patch": "@@ -134,7 +134,7 @@ impl Ty {\n                 LangItemTarget::ImplBlockId(it) => Some(it),\n                 _ => None,\n             })\n-            .map(|it| it.lookup(db).container.krate)\n+            .map(|it| it.lookup(db).container.module(db).krate)\n             .collect();\n         Some(res)\n     }"}, {"sha": "5eb032d86a897b0b3c72c31754bae68bba35eb27", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=fbc2cf2b6999b9c694e03993e62531cf9ef3d9b0", "patch": "@@ -673,7 +673,7 @@ fn impl_block_datum(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let trait_ref = trait_ref.subst(&bound_vars);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_id.lookup(db).container.krate == krate {\n+    let impl_type = if impl_id.lookup(db).container.module(db).krate == krate {\n         chalk_rust_ir::ImplType::Local\n     } else {\n         chalk_rust_ir::ImplType::External"}]}