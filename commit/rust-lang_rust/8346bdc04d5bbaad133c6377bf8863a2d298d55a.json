{"sha": "8346bdc04d5bbaad133c6377bf8863a2d298d55a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDZiZGMwNGQ1YmJhYWQxMzNjNjM3N2JmODg2M2EyZDI5OGQ1NWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T01:17:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T01:17:50Z"}, "message": "Rearrange code", "tree": {"sha": "c7f7e1d0aed4a2a5514c132f229e6d78a3a06f99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f7e1d0aed4a2a5514c132f229e6d78a3a06f99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8346bdc04d5bbaad133c6377bf8863a2d298d55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8346bdc04d5bbaad133c6377bf8863a2d298d55a", "html_url": "https://github.com/rust-lang/rust/commit/8346bdc04d5bbaad133c6377bf8863a2d298d55a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8346bdc04d5bbaad133c6377bf8863a2d298d55a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d6ab2650bce0faac87b87ef279674d6f63f8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d6ab2650bce0faac87b87ef279674d6f63f8ec", "html_url": "https://github.com/rust-lang/rust/commit/44d6ab2650bce0faac87b87ef279674d6f63f8ec"}], "stats": {"total": 213, "additions": 106, "deletions": 107}, "files": [{"sha": "30dd9811c2590852242254e947b332509713ab9a", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8346bdc04d5bbaad133c6377bf8863a2d298d55a/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8346bdc04d5bbaad133c6377bf8863a2d298d55a/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=8346bdc04d5bbaad133c6377bf8863a2d298d55a", "patch": "@@ -65,7 +65,7 @@ export class Ctx {\n     async sendRequestWithRetry<R>(\n         method: string,\n         param: any,\n-        token: vscode.CancellationToken,\n+        token?: vscode.CancellationToken,\n     ): Promise<R> {\n         await this.client.onReady();\n         for (const delay of [2, 4, 6, 8, 10, null]) {"}, {"sha": "4c2e7f67be639c4def40d1e2e2cb7a5330ebee31", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 105, "deletions": 106, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/8346bdc04d5bbaad133c6377bf8863a2d298d55a/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8346bdc04d5bbaad133c6377bf8863a2d298d55a/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=8346bdc04d5bbaad133c6377bf8863a2d298d55a", "patch": "@@ -47,7 +47,7 @@ export function activateHighlighting(ctx: Ctx) {\n             const params: lc.TextDocumentIdentifier = {\n                 uri: editor.document.uri.toString(),\n             };\n-            const decorations = await ctx.client.sendRequest<Decoration[]>(\n+            const decorations = await ctx.sendRequestWithRetry<Decoration[]>(\n                 'rust-analyzer/decorationsRequest',\n                 params,\n             );\n@@ -62,7 +62,7 @@ interface PublishDecorationsParams {\n     decorations: Decoration[];\n }\n \n-export interface Decoration {\n+interface Decoration {\n     range: lc.Range;\n     tag: string;\n     bindingHash?: string;\n@@ -81,116 +81,17 @@ function fancify(seed: string, shade: 'light' | 'dark') {\n     return `hsl(${h},${s}%,${l}%)`;\n }\n \n-function createDecorationFromTextmate(\n-    themeStyle: scopes.TextMateRuleSettings,\n-): vscode.TextEditorDecorationType {\n-    const decorationOptions: vscode.DecorationRenderOptions = {};\n-    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n-\n-    if (themeStyle.foreground) {\n-        decorationOptions.color = themeStyle.foreground;\n-    }\n-\n-    if (themeStyle.background) {\n-        decorationOptions.backgroundColor = themeStyle.background;\n-    }\n-\n-    if (themeStyle.fontStyle) {\n-        const parts: string[] = themeStyle.fontStyle.split(' ');\n-        parts.forEach(part => {\n-            switch (part) {\n-                case 'italic':\n-                    decorationOptions.fontStyle = 'italic';\n-                    break;\n-                case 'bold':\n-                    decorationOptions.fontWeight = 'bold';\n-                    break;\n-                case 'underline':\n-                    decorationOptions.textDecoration = 'underline';\n-                    break;\n-                default:\n-                    break;\n-            }\n-        });\n-    }\n-    return vscode.window.createTextEditorDecorationType(decorationOptions);\n-}\n-\n class Highlighter {\n     private ctx: Ctx;\n-\n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n-    }\n-\n-    private static initDecorations(): Map<\n-        string,\n-        vscode.TextEditorDecorationType\n-    > {\n-        const decoration = (\n-            tag: string,\n-            textDecoration?: string,\n-        ): [string, vscode.TextEditorDecorationType] => {\n-            const rule = scopesMapper.toRule(tag, scopes.find);\n-\n-            if (rule) {\n-                const decor = createDecorationFromTextmate(rule);\n-                return [tag, decor];\n-            } else {\n-                const fallBackTag = 'ralsp.' + tag;\n-                // console.log(' ');\n-                // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n-                // console.log(scopesMapper.find(tag));\n-                // console.log('Falling back to values defined in: ' + fallBackTag);\n-                // console.log(' ');\n-                const color = new vscode.ThemeColor(fallBackTag);\n-                const decor = vscode.window.createTextEditorDecorationType({\n-                    color,\n-                    textDecoration,\n-                });\n-                return [tag, decor];\n-            }\n-        };\n-\n-        const decorations: Iterable<[\n-            string,\n-            vscode.TextEditorDecorationType,\n-        ]> = [\n-                decoration('comment'),\n-                decoration('string'),\n-                decoration('keyword'),\n-                decoration('keyword.control'),\n-                decoration('keyword.unsafe'),\n-                decoration('function'),\n-                decoration('parameter'),\n-                decoration('constant'),\n-                decoration('type.builtin'),\n-                decoration('type.generic'),\n-                decoration('type.lifetime'),\n-                decoration('type.param'),\n-                decoration('type.self'),\n-                decoration('type'),\n-                decoration('text'),\n-                decoration('attribute'),\n-                decoration('literal'),\n-                decoration('literal.numeric'),\n-                decoration('literal.char'),\n-                decoration('literal.byte'),\n-                decoration('macro'),\n-                decoration('variable'),\n-                decoration('variable.mut', 'underline'),\n-                decoration('field'),\n-                decoration('module'),\n-            ];\n-\n-        return new Map<string, vscode.TextEditorDecorationType>(decorations);\n-    }\n-\n     private decorations: Map<\n         string,\n         vscode.TextEditorDecorationType\n     > | null = null;\n \n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n+    }\n+\n     public removeHighlights() {\n         if (this.decorations == null) {\n             return;\n@@ -210,7 +111,7 @@ class Highlighter {\n         // Note: decoration objects need to be kept around so we can dispose them\n         // if the user disables syntax highlighting\n         if (this.decorations == null) {\n-            this.decorations = Highlighter.initDecorations();\n+            this.decorations = initDecorations();\n         }\n \n         const byTag: Map<string, vscode.Range[]> = new Map();\n@@ -266,3 +167,101 @@ class Highlighter {\n         }\n     }\n }\n+\n+function initDecorations(): Map<\n+    string,\n+    vscode.TextEditorDecorationType\n+> {\n+    const decoration = (\n+        tag: string,\n+        textDecoration?: string,\n+    ): [string, vscode.TextEditorDecorationType] => {\n+        const rule = scopesMapper.toRule(tag, scopes.find);\n+\n+        if (rule) {\n+            const decor = createDecorationFromTextmate(rule);\n+            return [tag, decor];\n+        } else {\n+            const fallBackTag = 'ralsp.' + tag;\n+            // console.log(' ');\n+            // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n+            // console.log(scopesMapper.find(tag));\n+            // console.log('Falling back to values defined in: ' + fallBackTag);\n+            // console.log(' ');\n+            const color = new vscode.ThemeColor(fallBackTag);\n+            const decor = vscode.window.createTextEditorDecorationType({\n+                color,\n+                textDecoration,\n+            });\n+            return [tag, decor];\n+        }\n+    };\n+\n+    const decorations: Iterable<[\n+        string,\n+        vscode.TextEditorDecorationType,\n+    ]> = [\n+            decoration('comment'),\n+            decoration('string'),\n+            decoration('keyword'),\n+            decoration('keyword.control'),\n+            decoration('keyword.unsafe'),\n+            decoration('function'),\n+            decoration('parameter'),\n+            decoration('constant'),\n+            decoration('type.builtin'),\n+            decoration('type.generic'),\n+            decoration('type.lifetime'),\n+            decoration('type.param'),\n+            decoration('type.self'),\n+            decoration('type'),\n+            decoration('text'),\n+            decoration('attribute'),\n+            decoration('literal'),\n+            decoration('literal.numeric'),\n+            decoration('literal.char'),\n+            decoration('literal.byte'),\n+            decoration('macro'),\n+            decoration('variable'),\n+            decoration('variable.mut', 'underline'),\n+            decoration('field'),\n+            decoration('module'),\n+        ];\n+\n+    return new Map<string, vscode.TextEditorDecorationType>(decorations);\n+}\n+\n+function createDecorationFromTextmate(\n+    themeStyle: scopes.TextMateRuleSettings,\n+): vscode.TextEditorDecorationType {\n+    const decorationOptions: vscode.DecorationRenderOptions = {};\n+    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n+\n+    if (themeStyle.foreground) {\n+        decorationOptions.color = themeStyle.foreground;\n+    }\n+\n+    if (themeStyle.background) {\n+        decorationOptions.backgroundColor = themeStyle.background;\n+    }\n+\n+    if (themeStyle.fontStyle) {\n+        const parts: string[] = themeStyle.fontStyle.split(' ');\n+        parts.forEach(part => {\n+            switch (part) {\n+                case 'italic':\n+                    decorationOptions.fontStyle = 'italic';\n+                    break;\n+                case 'bold':\n+                    decorationOptions.fontWeight = 'bold';\n+                    break;\n+                case 'underline':\n+                    decorationOptions.textDecoration = 'underline';\n+                    break;\n+                default:\n+                    break;\n+            }\n+        });\n+    }\n+    return vscode.window.createTextEditorDecorationType(decorationOptions);\n+}"}]}