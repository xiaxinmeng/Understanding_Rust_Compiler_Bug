{"sha": "b78a571ce1f293aab990c98a86db3b2084a9a794", "node_id": "C_kwDOAAsO6NoAKGI3OGE1NzFjZTFmMjkzYWFiOTkwYzk4YTg2ZGIzYjIwODRhOWE3OTQ", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-11T22:54:46Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-11T22:54:46Z"}, "message": "Clean up `OnUnimplementedFormatString::verify`", "tree": {"sha": "11569445e2311129578c20f7495ca97e3c534163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11569445e2311129578c20f7495ca97e3c534163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78a571ce1f293aab990c98a86db3b2084a9a794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78a571ce1f293aab990c98a86db3b2084a9a794", "html_url": "https://github.com/rust-lang/rust/commit/b78a571ce1f293aab990c98a86db3b2084a9a794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78a571ce1f293aab990c98a86db3b2084a9a794/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "e599996230f51691b87c4a97c34d2195d2307739", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b78a571ce1f293aab990c98a86db3b2084a9a794/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78a571ce1f293aab990c98a86db3b2084a9a794/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=b78a571ce1f293aab990c98a86db3b2084a9a794", "patch": "@@ -37,6 +37,21 @@ pub trait TypeErrCtxtExt<'tcx> {\n     ) -> OnUnimplementedNote;\n }\n \n+/// The symbols which are always allowed in a format string\n+static ALLOWED_FORMAT_SYMBOLS: &[Symbol] = &[\n+    kw::SelfUpper,\n+    sym::ItemContext,\n+    sym::from_method,\n+    sym::from_desugaring,\n+    sym::direct,\n+    sym::cause,\n+    sym::integral,\n+    sym::integer_,\n+    sym::float,\n+    sym::_Self,\n+    sym::crate_local,\n+];\n+\n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn impl_similar_to(\n         &self,\n@@ -543,38 +558,26 @@ impl<'tcx> OnUnimplementedFormatString {\n                 Piece::NextArgument(a) => match a.position {\n                     Position::ArgumentNamed(s) => {\n                         match Symbol::intern(s) {\n-                            // `{Self}` is allowed\n-                            kw::SelfUpper => (),\n                             // `{ThisTraitsName}` is allowed\n                             s if s == trait_name => (),\n-                            // `{from_method}` is allowed\n-                            sym::from_method => (),\n-                            // `{from_desugaring}` is allowed\n-                            sym::from_desugaring => (),\n-                            // `{ItemContext}` is allowed\n-                            sym::ItemContext => (),\n-                            // `{integral}` and `{integer}` and `{float}` are allowed\n-                            sym::integral | sym::integer_ | sym::float => (),\n+                            s if ALLOWED_FORMAT_SYMBOLS.contains(&s) => (),\n                             // So is `{A}` if A is a type parameter\n-                            s => match generics.params.iter().find(|param| param.name == s) {\n-                                Some(_) => (),\n-                                None => {\n-                                    let reported = struct_span_err!(\n-                                        tcx.sess,\n-                                        span,\n-                                        E0230,\n-                                        \"there is no parameter `{}` on {}\",\n-                                        s,\n-                                        if trait_def_id == item_def_id {\n-                                            format!(\"trait `{}`\", trait_name)\n-                                        } else {\n-                                            \"impl\".to_string()\n-                                        }\n-                                    )\n-                                    .emit();\n-                                    result = Err(reported);\n-                                }\n-                            },\n+                            s if generics.params.iter().any(|param| param.name == s) => (),\n+                            s => {\n+                                result = Err(struct_span_err!(\n+                                    tcx.sess,\n+                                    span,\n+                                    E0230,\n+                                    \"there is no parameter `{}` on {}\",\n+                                    s,\n+                                    if trait_def_id == item_def_id {\n+                                        format!(\"trait `{}`\", trait_name)\n+                                    } else {\n+                                        \"impl\".to_string()\n+                                    }\n+                                )\n+                                .emit());\n+                            }\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used"}]}