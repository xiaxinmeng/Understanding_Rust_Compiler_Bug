{"sha": "fd5a4f42ad425a19c022fcafe482341e2612f29e", "node_id": "C_kwDOAAsO6NoAKGZkNWE0ZjQyYWQ0MjVhMTljMDIyZmNhZmU0ODIzNDFlMjYxMmYyOWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-09T18:00:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-09T18:00:45Z"}, "message": "Rollup merge of #90701 - michaelwoerister:more-artifact-sizes, r=davidtwco\n\nRecord more artifact sizes during self-profiling.\n\nThis PR adds artifact size recording for\n\n- \"linked artifacts\" (executables, RLIBs, dylibs, static libs)\n- object files\n- dwo files\n- assembly files\n- crate metadata\n- LLVM bitcode files\n- LLVM IR files\n- codegen unit size estimates\n\nCurrently the identifiers emitted for these are hard-coded as string literals. Is it worth adding constants to https://github.com/rust-lang/measureme/blob/master/measureme/src/rustc.rs instead? We don't do that for query names and the like -- but artifact kinds might be more stable than query names.", "tree": {"sha": "def10e9ccca8128963ea1abcc1d914a439840330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def10e9ccca8128963ea1abcc1d914a439840330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5a4f42ad425a19c022fcafe482341e2612f29e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhirdOCRBK7hj4Ov3rIwAAVmcIAJwuvjEKe48MYWtcfM3ZxUme\nZujEzbtJZRGTy85ASwIP9s98SsNwIagsESrbHerER5Rlv/0xOiu5X/lZfV4Gu0Tj\nU29oKiceiT+JFe+i2lFhTOkUNtXrtAdC5LEIQPxjwQQDxE3obmZL7qMhfacVz6Oz\nQ24uPUOE1T/b0r0Crp/Mp3bsk5mcUHrJ6WOeQ/hQsdY0aqI9pi7biQ20AYHyeQTF\nlfbxsqWkO9+AvYj+nCZ8wUG+toWv2xnaZpFOpHdwcLUYX0/JeQkzD/aSyfMXxlEd\nAws9z3jQ8y8V2+vG5azA277IXKVDAPhT9q0jUi9jpCIHUQSJsRicuyEdXvf10ZQ=\n=Ty2p\n-----END PGP SIGNATURE-----\n", "payload": "tree def10e9ccca8128963ea1abcc1d914a439840330\nparent 21b0ce1b951850a4cb9ec113cda3b4ea2c509a83\nparent fefe1e9192696c07f1655ed2726c4e114b70b096\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636480845 +0100\ncommitter GitHub <noreply@github.com> 1636480845 +0100\n\nRollup merge of #90701 - michaelwoerister:more-artifact-sizes, r=davidtwco\n\nRecord more artifact sizes during self-profiling.\n\nThis PR adds artifact size recording for\n\n- \"linked artifacts\" (executables, RLIBs, dylibs, static libs)\n- object files\n- dwo files\n- assembly files\n- crate metadata\n- LLVM bitcode files\n- LLVM IR files\n- codegen unit size estimates\n\nCurrently the identifiers emitted for these are hard-coded as string literals. Is it worth adding constants to https://github.com/rust-lang/measureme/blob/master/measureme/src/rustc.rs instead? We don't do that for query names and the like -- but artifact kinds might be more stable than query names.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5a4f42ad425a19c022fcafe482341e2612f29e", "html_url": "https://github.com/rust-lang/rust/commit/fd5a4f42ad425a19c022fcafe482341e2612f29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5a4f42ad425a19c022fcafe482341e2612f29e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b0ce1b951850a4cb9ec113cda3b4ea2c509a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b0ce1b951850a4cb9ec113cda3b4ea2c509a83", "html_url": "https://github.com/rust-lang/rust/commit/21b0ce1b951850a4cb9ec113cda3b4ea2c509a83"}, {"sha": "fefe1e9192696c07f1655ed2726c4e114b70b096", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefe1e9192696c07f1655ed2726c4e114b70b096", "html_url": "https://github.com/rust-lang/rust/commit/fefe1e9192696c07f1655ed2726c4e114b70b096"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "3d05fc15b38f4121c22f737cccc040d78f734db2", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=fd5a4f42ad425a19c022fcafe482341e2612f29e", "patch": "@@ -17,6 +17,7 @@ use rustc_codegen_ssa::back::write::{\n };\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler, Level};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n@@ -53,6 +54,7 @@ pub fn write_output_file(\n     output: &Path,\n     dwo_output: Option<&Path>,\n     file_type: llvm::FileType,\n+    self_profiler_ref: &SelfProfilerRef,\n ) -> Result<(), FatalError> {\n     unsafe {\n         let output_c = path_to_c_string(output);\n@@ -76,6 +78,19 @@ pub fn write_output_file(\n                 file_type,\n             )\n         };\n+\n+        // Record artifact sizes for self-profiling\n+        if result == llvm::LLVMRustResult::Success {\n+            let artifact_kind = match file_type {\n+                llvm::FileType::ObjectFile => \"object_file\",\n+                llvm::FileType::AssemblyFile => \"assembly_file\",\n+            };\n+            record_artifact_size(self_profiler_ref, artifact_kind, output);\n+            if let Some(dwo_file) = dwo_output {\n+                record_artifact_size(self_profiler_ref, \"dwo_file\", dwo_file);\n+            }\n+        }\n+\n         result.into_result().map_err(|()| {\n             let msg = format!(\"could not write output to {}\", output.display());\n             llvm_err(handler, &msg)\n@@ -752,6 +767,14 @@ pub(crate) unsafe fn codegen(\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n+            if let Some(bitcode_filename) = bc_out.file_name() {\n+                cgcx.prof.artifact_size(\n+                    \"llvm_bitcode\",\n+                    bitcode_filename.to_string_lossy(),\n+                    data.len() as u64,\n+                );\n+            }\n+\n             if config.emit_bc || config.emit_obj == EmitObj::Bitcode {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_emit_bitcode\",\n@@ -812,6 +835,11 @@ pub(crate) unsafe fn codegen(\n             }\n \n             let result = llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n+\n+            if result == llvm::LLVMRustResult::Success {\n+                record_artifact_size(&cgcx.prof, \"llvm_ir\", &out);\n+            }\n+\n             result.into_result().map_err(|()| {\n                 let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n                 llvm_err(diag_handler, &msg)\n@@ -842,6 +870,7 @@ pub(crate) unsafe fn codegen(\n                     &path,\n                     None,\n                     llvm::FileType::AssemblyFile,\n+                    &cgcx.prof,\n                 )\n             })?;\n         }\n@@ -875,6 +904,7 @@ pub(crate) unsafe fn codegen(\n                         &obj_out,\n                         dwo_out,\n                         llvm::FileType::ObjectFile,\n+                        &cgcx.prof,\n                     )\n                 })?;\n             }\n@@ -1131,3 +1161,19 @@ fn create_msvc_imps(\n         symbol_name.starts_with(b\"__llvm_profile_\")\n     }\n }\n+\n+fn record_artifact_size(\n+    self_profiler_ref: &SelfProfilerRef,\n+    artifact_kind: &'static str,\n+    path: &Path,\n+) {\n+    // Don't stat the file if we are not going to record its size.\n+    if !self_profiler_ref.enabled() {\n+        return;\n+    }\n+\n+    if let Some(artifact_name) = path.file_name() {\n+        let file_size = std::fs::metadata(path).map(|m| m.len()).unwrap_or(0);\n+        self_profiler_ref.artifact_size(artifact_kind, artifact_name.to_string_lossy(), file_size);\n+    }\n+}"}, {"sha": "1ba0c4fa05b5b3688c3345511efb74131e3e9a7c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=fd5a4f42ad425a19c022fcafe482341e2612f29e", "patch": "@@ -121,6 +121,19 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             if sess.opts.json_artifact_notifications {\n                 sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename, \"link\");\n             }\n+\n+            if sess.prof.enabled() {\n+                if let Some(artifact_name) = out_filename.file_name() {\n+                    // Record size for self-profiling\n+                    let file_size = std::fs::metadata(&out_filename).map(|m| m.len()).unwrap_or(0);\n+\n+                    sess.prof.artifact_size(\n+                        \"linked_artifact\",\n+                        artifact_name.to_string_lossy(),\n+                        file_size,\n+                    );\n+                }\n+            }\n         }\n     }\n "}, {"sha": "d46829c2ceea693b047305ca5165b8dd0696a9fd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=fd5a4f42ad425a19c022fcafe482341e2612f29e", "patch": "@@ -2193,5 +2193,8 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     result[header + 2] = (pos >> 8) as u8;\n     result[header + 3] = (pos >> 0) as u8;\n \n+    // Record metadata size for self-profiling\n+    tcx.prof.artifact_size(\"crate_metadata\", \"crate_metadata\", result.len() as u64);\n+\n     EncodedMetadata { raw_data: result }\n }"}, {"sha": "658c9028ca1a1d0e3866bf9b74875d74a959ae4a", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a4f42ad425a19c022fcafe482341e2612f29e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=fd5a4f42ad425a19c022fcafe482341e2612f29e", "patch": "@@ -361,6 +361,17 @@ fn collect_and_partition_mono_items<'tcx>(\n         )\n     });\n \n+    if tcx.prof.enabled() {\n+        // Record CGU size estimates for self-profiling.\n+        for cgu in codegen_units {\n+            tcx.prof.artifact_size(\n+                \"codegen_unit_size_estimate\",\n+                &cgu.name().as_str()[..],\n+                cgu.size_estimate() as u64,\n+            );\n+        }\n+    }\n+\n     let mono_items: DefIdSet = items\n         .iter()\n         .filter_map(|mono_item| match *mono_item {"}]}