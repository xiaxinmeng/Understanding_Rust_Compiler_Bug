{"sha": "7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNWI5YWM0MWUzNmIyOWQ1MjA4ZjRlNTQ1NWFhZGUwN2Q0ZDEwN2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-24T15:34:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-09T21:45:34Z"}, "message": "ci: Compile LLVM with Clang 6.0.0\n\nCurrently on CI we predominately compile LLVM with the default system compiler\nwhich means gcc on Linux, some version of Clang on OSX, MSVC on Windows, and\ngcc on MinGW. This commit switches Linux, OSX, and Windows to all use Clang\n6.0.0 to build LLVM (aka the C/C++ compiler as part of the bootstrap). This\nlooks to generate faster code according to #49879 which translates to a faster\nrustc (as LLVM internally is faster)\n\nThe major changes here were to the containers that build Linux releases,\nbasically adding a new step that uses the previous gcc 4.8 compiler to compile\nthe next Clang 6.0.0 compiler. Otherwise the OSX and Windows scripts have been\nupdated to download precompiled versions of Clang 6 and configure the build to\nuse them.\n\nNote that `cc` was updated here to fix using `clang-cl` with `cc-rs` on MSVC, as\nwell as an update to `sccache` on Windows which was needed to correctly work\nwith `clang-cl`. Finally the MinGW compiler is entirely left out here\nintentionally as it's currently thought that Clang can't generate C++ code for\nMinGW and we need to use gcc, but this should be verified eventually.", "tree": {"sha": "089e6f1ef7eac8c624658ed2328d2cfbdc6cb41b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/089e6f1ef7eac8c624658ed2328d2cfbdc6cb41b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "html_url": "https://github.com/rust-lang/rust/commit/7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac287ed167f07619409928008e4a50eecac4a285", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac287ed167f07619409928008e4a50eecac4a285", "html_url": "https://github.com/rust-lang/rust/commit/ac287ed167f07619409928008e4a50eecac4a285"}], "stats": {"total": 604, "additions": 267, "deletions": 337}, "files": [{"sha": "23c47bc9f7648199848b65a90d1abc71461c9047", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -230,7 +230,11 @@ install:\n           travis_retry curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin &&\n             chmod +x /usr/local/bin/sccache &&\n           travis_retry curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n-            chmod +x /usr/local/bin/stamp\n+            chmod +x /usr/local/bin/stamp &&\n+          travis_retry curl -f http://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz | tar xJf - &&\n+            export CC=`pwd`/clang+llvm-6.0.0-x86_64-apple-darwin/bin/clang &&\n+            export CXX=`pwd`/clang+llvm-6.0.0-x86_64-apple-darwin/bin/clang++ &&\n+            export AR=ar\n           ;;\n     esac\n "}, {"sha": "a92f4a17811814a95f07f2a7b55efd0578804bf5", "filename": "appveyor.yml", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -138,6 +138,20 @@ install:\n   - if defined MINGW_URL 7z x -y %MINGW_ARCHIVE% > nul\n   - if defined MINGW_URL set PATH=%CD%\\%MINGW_DIR%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n+  # If we're compiling for MSVC then we, like most other distribution builders,\n+  # switch to clang as the compiler. This'll allow us eventually to enable LTO\n+  # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+  # clang has an output mode compatible with MinGW that we need. If it does we\n+  # should switch to clang for MinGW as well!\n+  #\n+  # Note that the LLVM installer is an NSIS installer\n+  #\n+  # Original downloaded here came from\n+  # http://releases.llvm.org/6.0.0/LLVM-6.0.0-win64.exe\n+  - if NOT defined MINGW_URL appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-6.0.0-win64.exe\n+  - if NOT defined MINGW_URL .\\LLVM-6.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n+  - if NOT defined MINGW_URL set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=C:\\clang-rust\\bin\\clang-cl.exe\n+\n   # Here we do a pretty heinous thing which is to mangle the MinGW installation\n   # we just had above. Currently, as of this writing, we're using MinGW-w64\n   # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n@@ -166,8 +180,8 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-pc-windows-msvc\n-  - mv 2018-04-02-sccache-x86_64-pc-windows-msvc sccache.exe\n+  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\n+  - mv 2018-04-26-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja"}, {"sha": "33ad9147ce059c2057080ca1663779f63314e621", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -76,6 +76,10 @@\n # passed to prefer linking to shared libraries.\n #link-shared = false\n \n+# On MSVC you can compile LLVM with clang-cl, but the test suite doesn't pass\n+# with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n+#clang-cl = '/path/to/clang-cl.exe'\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "e2a9a6efbdad4fc855a0794e2c748903ff1cef17", "filename": "src/Cargo.lock", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -20,7 +20,7 @@ name = \"alloc_jemalloc\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n@@ -117,7 +117,7 @@ name = \"backtrace-sys\"\n version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -145,7 +145,7 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cmake 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -270,7 +270,7 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.10\"\n+version = \"1.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -348,7 +348,7 @@ name = \"cmake\"\n version = \"0.1.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -379,7 +379,7 @@ dependencies = [\n name = \"compiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -513,7 +513,7 @@ name = \"curl\"\n version = \"0.4.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl-sys 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -525,10 +525,10 @@ dependencies = [\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.2\"\n+version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1044,9 +1044,9 @@ name = \"libgit2-sys\"\n version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cmake 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"curl-sys 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1071,7 +1071,7 @@ name = \"libz-sys\"\n version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1110,7 +1110,7 @@ name = \"lzma-sys\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1192,7 +1192,7 @@ name = \"miniz-sys\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1288,7 +1288,7 @@ name = \"openssl-sys\"\n version = \"0.9.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1459,7 +1459,7 @@ dependencies = [\n name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n@@ -1988,7 +1988,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"build_helper 0.1.0\",\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n ]\n@@ -2149,7 +2149,7 @@ dependencies = [\n name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n- \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3014,7 +3014,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87\"\n \"checksum cargo_metadata 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f56ec3e469bca7c276f2eea015aa05c5e381356febdbb0683c2580189604537\"\n \"checksum cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ebd6272a2ca4fd39dbabbd6611eb03df45c2259b3b80b39a9ff8fbdcf42a4b3\"\n-\"checksum cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b9d2900f78631a5876dc5d6c9033ede027253efcd33dd36b1309fc6cab97ee0\"\n+\"checksum cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ebb87d1116151416c0cf66a0e3fb6430cccd120fd6300794b4dfaa050ac40ba\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum chrono 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba5f60682a4c264e7f8d77b82e7788938a76befdf949d4a98026d19099c9d873\"\n \"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\n@@ -3031,7 +3031,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9\"\n \"checksum crypto-hash 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09de9ee0fc255ace04c7fa0763c9395a945c37c8292bb554f8d48361d1dcf1b4\"\n \"checksum curl 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aaf20bbe084f285f215eef2165feed70d6b75ba29cad24469badb853a4a287d0\"\n-\"checksum curl-sys 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3f7738d877ec81040305d5bb91976ac594f564f5e455dc02a29a23c1d00fe6f\"\n+\"checksum curl-sys 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71c63a540a9ee4e15e56c3ed9b11a2f121239b9f6d7b7fe30f616e048148df9a\"\n \"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n \"checksum derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6fcb923bab47a948f1b01cec2f758fdebba95c9ebc255458654b2b88efe59d71\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\""}, {"sha": "af33ebf3c4250f77703d5c21b3aa4e05db5224c3", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -28,6 +28,11 @@ name = \"sccache-plus-cl\"\n path = \"bin/sccache-plus-cl.rs\"\n test = false\n \n+[[bin]]\n+name = \"llvm-config-wrapper\"\n+path = \"bin/llvm-config-wrapper.rs\"\n+test = false\n+\n [dependencies]\n build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.23\""}, {"sha": "b1703f8c728e255dfd1af97277064619d59785ec", "filename": "src/bootstrap/bin/llvm-config-wrapper.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fbin%2Fllvm-config-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fbin%2Fllvm-config-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fllvm-config-wrapper.rs?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The sheer existence of this file is an awful hack. See the comments in\n+// `src/bootstrap/native.rs` for why this is needed when compiling LLD.\n+\n+use std::env;\n+use std::process::{self, Stdio, Command};\n+use std::io::{self, Write};\n+\n+fn main() {\n+    let real_llvm_config = env::var_os(\"LLVM_CONFIG_REAL\").unwrap();\n+    let mut cmd = Command::new(real_llvm_config);\n+    cmd.args(env::args().skip(1)).stderr(Stdio::piped());\n+    let output = cmd.output().expect(\"failed to spawn llvm-config\");\n+    let stdout = String::from_utf8_lossy(&output.stdout);\n+    print!(\"{}\", stdout.replace(\"\\\\\", \"/\"));\n+    io::stdout().flush().unwrap();\n+    process::exit(output.status.code().unwrap_or(1));\n+}"}, {"sha": "0a20ac7e492dc44f87e4e4b4109b07b2a51aced0", "filename": "src/bootstrap/bin/sccache-plus-cl.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -16,8 +16,8 @@ use std::process::{self, Command};\n fn main() {\n     let target = env::var(\"SCCACHE_TARGET\").unwrap();\n     // Locate the actual compiler that we're invoking\n-    env::remove_var(\"CC\");\n-    env::remove_var(\"CXX\");\n+    env::set_var(\"CC\", env::var_os(\"SCCACHE_CC\").unwrap());\n+    env::set_var(\"CXX\", env::var_os(\"SCCACHE_CXX\").unwrap());\n     let mut cfg = cc::Build::new();\n     cfg.cargo_metadata(false)\n        .out_dir(\"/\")\n@@ -39,6 +39,12 @@ fn main() {\n         cmd.arg(arg);\n     }\n \n+    if let Ok(s) = env::var(\"SCCACHE_EXTRA_ARGS\") {\n+        for s in s.split_whitespace() {\n+            cmd.arg(s);\n+        }\n+    }\n+\n     let status = cmd.status().expect(\"failed to spawn\");\n     process::exit(status.code().unwrap_or(2))\n }"}, {"sha": "465f7045ded5c930f38000048b16772dc69a2013", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -726,7 +726,11 @@ impl<'a> Builder<'a> {\n         // the options through environment variables that are fetched and understood by both.\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n-        if !target.contains(\"msvc\") {\n+        if target.contains(\"msvc\") {\n+            if let Some(ref cl) = self.config.llvm_clang_cl {\n+                cargo.env(\"CC\", cl).env(\"CXX\", cl);\n+            }\n+        } else {\n             let ccache = self.config.ccache.as_ref();\n             let ccacheify = |s: &Path| {\n                 let ccache = match ccache {"}, {"sha": "9840682d1379bb905a7ffd8c2759616053dac170", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -82,6 +82,7 @@ pub struct Config {\n     pub llvm_version_check: bool,\n     pub llvm_static_stdcpp: bool,\n     pub llvm_link_shared: bool,\n+    pub llvm_clang_cl: Option<String>,\n     pub llvm_targets: Option<String>,\n     pub llvm_experimental_targets: String,\n     pub llvm_link_jobs: Option<u32>,\n@@ -250,6 +251,7 @@ struct Llvm {\n     experimental_targets: Option<String>,\n     link_jobs: Option<u32>,\n     link_shared: Option<bool>,\n+    clang_cl: Option<String>\n }\n \n #[derive(Deserialize, Default, Clone)]\n@@ -504,6 +506,7 @@ impl Config {\n             config.llvm_experimental_targets = llvm.experimental_targets.clone()\n                 .unwrap_or(\"WebAssembly\".to_string());\n             config.llvm_link_jobs = llvm.link_jobs;\n+            config.llvm_clang_cl = llvm.clang_cl.clone();\n         }\n \n         if let Some(ref rust) = toml.rust {"}, {"sha": "002044050f351ec9a8829425a8db980adedda7ec", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 59, "deletions": 9, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -275,21 +275,53 @@ fn configure_cmake(builder: &Builder,\n         return\n     }\n \n-    let cc = builder.cc(target);\n-    let cxx = builder.cxx(target).unwrap();\n+    let (cc, cxx) = match builder.config.llvm_clang_cl {\n+        Some(ref cl) => (cl.as_ref(), cl.as_ref()),\n+        None => (builder.cc(target), builder.cxx(target).unwrap()),\n+    };\n \n     // Handle msvc + ninja + ccache specially (this is what the bots use)\n     if target.contains(\"msvc\") &&\n        builder.config.ninja &&\n-       builder.config.ccache.is_some() {\n-        let mut cc = env::current_exe().expect(\"failed to get cwd\");\n-        cc.set_file_name(\"sccache-plus-cl.exe\");\n+       builder.config.ccache.is_some()\n+    {\n+       let mut wrap_cc = env::current_exe().expect(\"failed to get cwd\");\n+       wrap_cc.set_file_name(\"sccache-plus-cl.exe\");\n \n-       cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n-          .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cc));\n+       cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&wrap_cc))\n+          .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&wrap_cc));\n        cfg.env(\"SCCACHE_PATH\",\n                builder.config.ccache.as_ref().unwrap())\n-          .env(\"SCCACHE_TARGET\", target);\n+          .env(\"SCCACHE_TARGET\", target)\n+          .env(\"SCCACHE_CC\", &cc)\n+          .env(\"SCCACHE_CXX\", &cxx);\n+\n+       // Building LLVM on MSVC can be a little ludicrous at times. We're so far\n+       // off the beaten path here that I'm not really sure this is even half\n+       // supported any more. Here we're trying to:\n+       //\n+       // * Build LLVM on MSVC\n+       // * Build LLVM with `clang-cl` instead of `cl.exe`\n+       // * Build a project with `sccache`\n+       // * Build for 32-bit as well\n+       // * Build with Ninja\n+       //\n+       // For `cl.exe` there are different binaries to compile 32/64 bit which\n+       // we use but for `clang-cl` there's only one which internally\n+       // multiplexes via flags. As a result it appears that CMake's detection\n+       // of a compiler's architecture and such on MSVC **doesn't** pass any\n+       // custom flags we pass in CMAKE_CXX_FLAGS below. This means that if we\n+       // use `clang-cl.exe` it's always diagnosed as a 64-bit compiler which\n+       // definitely causes problems since all the env vars are pointing to\n+       // 32-bit libraries.\n+       //\n+       // To hack aroudn this... again... we pass an argument that's\n+       // unconditionally passed in the sccache shim. This'll get CMake to\n+       // correctly diagnose it's doing a 32-bit compilation and LLVM will\n+       // internally configure itself appropriately.\n+       if builder.config.llvm_clang_cl.is_some() && target.contains(\"i686\") {\n+           cfg.env(\"SCCACHE_EXTRA_ARGS\", \"-m32\");\n+       }\n \n     // If ccache is configured we inform the build a little differently hwo\n     // to invoke ccache while also invoking our compilers.\n@@ -368,9 +400,27 @@ impl Step for Lld {\n         let mut cfg = cmake::Config::new(builder.src.join(\"src/tools/lld\"));\n         configure_cmake(builder, target, &mut cfg, true);\n \n+        // This is an awful, awful hack. Discovered when we migrated to using\n+        // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n+        // tree, will execute `llvm-config --cmakedir` and then tell CMake about\n+        // that directory for later processing. Unfortunately if this path has\n+        // forward slashes in it (which it basically always does on Windows)\n+        // then CMake will hit a syntax error later on as... something isn't\n+        // escaped it seems?\n+        //\n+        // Instead of attempting to fix this problem in upstream CMake and/or\n+        // LLVM/LLD we just hack around it here. This thin wrapper will take the\n+        // output from llvm-config and replace all instances of `\\` with `/` to\n+        // ensure we don't hit the same bugs with escaping. It means that you\n+        // can't build on a system where your paths require `\\` on Windows, but\n+        // there's probably a lot of reasons you can't do that other than this.\n+        let llvm_config_shim = env::current_exe()\n+            .unwrap()\n+            .with_file_name(\"llvm-config-wrapper\");\n         cfg.out_dir(&out_dir)\n            .profile(\"Release\")\n-           .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+           .env(\"LLVM_CONFIG_REAL\", llvm_config)\n+           .define(\"LLVM_CONFIG_PATH\", llvm_config_shim)\n            .define(\"LLVM_INCLUDE_TESTS\", \"OFF\");\n \n         cfg.build();"}, {"sha": "d591fb28f36edcd9e0260471764dfc9d7cbac523", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -29,13 +29,13 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY dist-i686-linux/shared.sh dist-i686-linux/build-binutils.sh /tmp/\n+COPY dist-x86_64-linux/shared.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n # later as well), so build a copy of OpenSSL with dynamic libraries into our\n # generic root.\n-COPY dist-i686-linux/build-openssl.sh /tmp/\n+COPY dist-x86_64-linux/build-openssl.sh /tmp/\n RUN ./build-openssl.sh\n \n # The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n@@ -44,36 +44,43 @@ RUN ./build-openssl.sh\n #\n # Note that we also disable a bunch of optional features of curl that we don't\n # really need.\n-COPY dist-i686-linux/build-curl.sh /tmp/\n+COPY dist-x86_64-linux/build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n # binutils < 2.22 has a bug where the 32-bit executables it generates\n # immediately segfault in Rust, so we need to install our own binutils.\n #\n # See https://github.com/rust-lang/rust/issues/20440 for more info\n+COPY dist-x86_64-linux/build-binutils.sh /tmp/\n RUN ./build-binutils.sh\n \n+# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n+# only has 2.6.4, so build our own\n+COPY dist-x86_64-linux/build-cmake.sh /tmp/\n+RUN ./build-cmake.sh\n+\n # Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY dist-i686-linux/build-gcc.sh /tmp/\n+COPY dist-x86_64-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n-COPY dist-i686-linux/build-python.sh /tmp/\n+COPY dist-x86_64-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n+# Now build LLVM+Clang 6, afterwards configuring further compilations to use the\n+# clang/clang++ compilers.\n+COPY dist-x86_64-linux/build-clang.sh /tmp/\n+RUN ./build-clang.sh\n+ENV CC=clang CXX=clang++\n+\n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n-COPY dist-i686-linux/build-git.sh /tmp/\n+COPY dist-x86_64-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n-# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n-# only has 2.6.4, so build our own\n-COPY dist-i686-linux/build-cmake.sh /tmp/\n-RUN ./build-cmake.sh\n-\n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n-COPY dist-i686-linux/build-headers.sh /tmp/\n+COPY dist-x86_64-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n COPY scripts/sccache.sh /scripts/\n@@ -84,11 +91,21 @@ ENV HOSTS=i686-unknown-linux-gnu\n ENV RUST_CONFIGURE_ARGS \\\n       --enable-full-tools \\\n       --enable-sanitizers \\\n-      --enable-profiler\n+      --enable-profiler \\\n+      --set target.i686-unknown-linux-gnu.linker=clang \\\n+      --build=i686-unknown-linux-gnu\n ENV SCRIPT python2.7 ../x.py dist --build $HOSTS --host $HOSTS --target $HOSTS\n-\n-# This is the only builder which will create source tarballs\n-ENV DIST_SRC 1\n+ENV CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=clang\n+\n+# This was added when we switched from gcc to clang. It's not clear why this is\n+# needed unfortunately, but without this the stage1 bootstrap segfaults\n+# somewhere inside of a build script. The build ends up just hanging instead of\n+# actually killing the process that segfaulted, but if the process is run\n+# manually in a debugger the segfault is immediately seen as well as the\n+# misaligned stack access.\n+#\n+# Added in #50200 there's some more logs there\n+ENV CFLAGS -mstackrealign\n \n # When we build cargo in this container, we don't want it to use the system\n # libcurl, instead it should compile its own."}, {"sha": "f4bdbd80d0edb761dc08e34286e0c76a1ef4a0a0", "filename": "src/ci/docker/dist-i686-linux/build-binutils.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-source shared.sh\n-\n-curl https://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.bz2 | tar xfj -\n-\n-mkdir binutils-build\n-cd binutils-build\n-hide_output ../binutils-2.25.1/configure --prefix=/rustroot\n-hide_output make -j10\n-hide_output make install\n-\n-cd ..\n-rm -rf binutils-build\n-rm -rf binutils-2.25.1"}, {"sha": "9a3763d421ad2b721d773494cc11fc2d7ffbec28", "filename": "src/ci/docker/dist-i686-linux/build-cmake.sh", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,25 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-source shared.sh\n-\n-curl https://cmake.org/files/v3.6/cmake-3.6.3.tar.gz | tar xzf -\n-\n-mkdir cmake-build\n-cd cmake-build\n-hide_output ../cmake-3.6.3/configure --prefix=/rustroot\n-hide_output make -j10\n-hide_output make install\n-\n-cd ..\n-rm -rf cmake-build\n-rm -rf cmake-3.6.3"}, {"sha": "edf3175b81c436321f510ec99b560f627d93a677", "filename": "src/ci/docker/dist-i686-linux/build-curl.sh", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,43 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-source shared.sh\n-\n-VERSION=7.51.0\n-\n-curl http://cool.haxx.se/download/curl-$VERSION.tar.bz2 | tar xjf -\n-\n-mkdir curl-build\n-cd curl-build\n-hide_output ../curl-$VERSION/configure \\\n-      --prefix=/rustroot \\\n-      --with-ssl=/rustroot \\\n-      --disable-sspi \\\n-      --disable-gopher \\\n-      --disable-smtp \\\n-      --disable-smb \\\n-      --disable-imap \\\n-      --disable-pop3 \\\n-      --disable-tftp \\\n-      --disable-telnet \\\n-      --disable-manual \\\n-      --disable-dict \\\n-      --disable-rtsp \\\n-      --disable-ldaps \\\n-      --disable-ldap\n-hide_output make -j10\n-hide_output make install\n-\n-cd ..\n-rm -rf curl-build\n-rm -rf curl-$VERSION\n-yum erase -y curl"}, {"sha": "08020e533ff191ca565868062cef8f7d5ab55967", "filename": "src/ci/docker/dist-i686-linux/build-gcc.sh", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,50 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-source shared.sh\n-\n-GCC=4.8.5\n-\n-curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n-cd gcc-$GCC\n-\n-# FIXME(#49246): Remove the `sed` below.\n-#\n-# On 2018 March 21st, two Travis builders' cache for Docker are suddenly invalidated. Normally this\n-# is fine, because we just need to rebuild the Docker image. However, it reveals a network issue:\n-# downloading from `ftp://gcc.gnu.org/` from Travis (using passive mode) often leads to \"Connection\n-# timed out\" error, and even when the download completed, the file is usually corrupted. This causes\n-# nothing to be landed that day.\n-#\n-# We observed that the `gcc-4.8.5.tar.bz2` above can be downloaded successfully, so as a stability\n-# improvement we try to download from the HTTPS mirror instead. Turns out this uncovered the third\n-# bug: the host `gcc.gnu.org` and `cygwin.com` share the same IP, and the TLS certificate of the\n-# latter host is presented to `wget`! Therefore, we choose to download from the insecure HTTP server\n-# instead here.\n-#\n-sed -i'' 's|ftp://gcc\\.gnu\\.org/|http://gcc.gnu.org/|g' ./contrib/download_prerequisites\n-\n-./contrib/download_prerequisites\n-mkdir ../gcc-build\n-cd ../gcc-build\n-hide_output ../gcc-$GCC/configure \\\n-    --prefix=/rustroot \\\n-    --enable-languages=c,c++\n-hide_output make -j10\n-hide_output make install\n-ln -nsf gcc /rustroot/bin/cc\n-\n-cd ..\n-rm -rf gcc-build\n-rm -rf gcc-$GCC\n-yum erase -y gcc gcc-c++ binutils"}, {"sha": "aa31f50ba0343134bfbece006ad3faf6c13afc72", "filename": "src/ci/docker/dist-i686-linux/build-git.sh", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,24 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-source shared.sh\n-\n-curl -L https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz | tar xzf -\n-\n-cd git-2.10.0\n-make configure\n-hide_output ./configure --prefix=/rustroot\n-hide_output make -j10\n-hide_output make install\n-\n-cd ..\n-rm -rf git-2.10.0"}, {"sha": "2f15114d6f98028857bbeef289cedc70d1c887e0", "filename": "src/ci/docker/dist-i686-linux/build-headers.sh", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,25 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-source shared.sh\n-\n-curl https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-3.2.84.tar.xz | unxz | tar x\n-\n-cd linux-3.2.84\n-hide_output make mrproper\n-hide_output make INSTALL_HDR_PATH=dest headers_install\n-\n-find dest/include \\( -name .install -o -name ..install.cmd \\) -delete\n-yes | cp -fr dest/include/* /usr/include\n-\n-cd ..\n-rm -rf linux-3.2.84"}, {"sha": "e7226ace020bd8bc8dc35b11e1e07b3ab9b66a53", "filename": "src/ci/docker/dist-i686-linux/build-openssl.sh", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,28 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-source shared.sh\n-\n-VERSION=1.0.2k\n-URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/openssl-$VERSION.tar.gz\n-\n-curl $URL | tar xzf -\n-\n-cd openssl-$VERSION\n-hide_output ./config --prefix=/rustroot shared -fPIC\n-hide_output make -j10\n-hide_output make install\n-cd ..\n-rm -rf openssl-$VERSION\n-\n-# Make the system cert collection available to the new install.\n-ln -nsf /etc/pki/tls/cert.pem /rustroot/ssl/"}, {"sha": "c6b8cdde4b9af4d57737dd910efe1ebb67c4425e", "filename": "src/ci/docker/dist-i686-linux/build-python.sh", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,30 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-source shared.sh\n-\n-curl https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz | \\\n-  tar xzf -\n-\n-mkdir python-build\n-cd python-build\n-\n-# Gotta do some hackery to tell python about our custom OpenSSL build, but other\n-# than that fairly normal.\n-CFLAGS='-I /rustroot/include' LDFLAGS='-L /rustroot/lib -L /rustroot/lib64' \\\n-    hide_output ../Python-2.7.12/configure --prefix=/rustroot\n-hide_output make -j10\n-hide_output make install\n-\n-cd ..\n-rm -rf python-build\n-rm -rf Python-2.7.12"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-i686-linux/shared.sh", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,25 +0,0 @@\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}"}, {"sha": "5726fab7524ae88a55e35d27d8b1291f18fa8816", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -29,7 +29,7 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY dist-x86_64-linux/shared.sh dist-x86_64-linux/build-binutils.sh /tmp/\n+COPY dist-x86_64-linux/shared.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n@@ -51,26 +51,33 @@ RUN ./build-curl.sh\n # immediately segfault in Rust, so we need to install our own binutils.\n #\n # See https://github.com/rust-lang/rust/issues/20440 for more info\n+COPY dist-x86_64-linux/build-binutils.sh /tmp/\n RUN ./build-binutils.sh\n \n-# Need a newer version of gcc than centos has to compile LLVM nowadays\n+# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n+# only has 2.6.4, so build our own\n+COPY dist-x86_64-linux/build-cmake.sh /tmp/\n+RUN ./build-cmake.sh\n+\n+# Build a version of gcc capable of building LLVM 6\n COPY dist-x86_64-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n COPY dist-x86_64-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n+# Now build LLVM+Clang 6, afterwards configuring further compilations to use the\n+# clang/clang++ compilers.\n+COPY dist-x86_64-linux/build-clang.sh /tmp/\n+RUN ./build-clang.sh\n+ENV CC=clang CXX=clang++\n+\n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n COPY dist-x86_64-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n-# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n-# only has 2.6.4, so build our own\n-COPY dist-x86_64-linux/build-cmake.sh /tmp/\n-RUN ./build-cmake.sh\n-\n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n COPY dist-x86_64-linux/build-headers.sh /tmp/\n@@ -85,8 +92,10 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-full-tools \\\n       --enable-sanitizers \\\n       --enable-profiler \\\n-      --enable-compiler-docs\n+      --enable-compiler-docs \\\n+      --set target.x86_64-unknown-linux-gnu.linker=clang\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n+ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang\n \n # This is the only builder which will create source tarballs\n ENV DIST_SRC 1"}, {"sha": "b0c27aa45bf9319d50c1574319c9d16ba0852be0", "filename": "src/ci/docker/dist-x86_64-linux/build-clang.sh", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+LLVM=6.0.0\n+\n+mkdir clang\n+cd clang\n+\n+curl https://releases.llvm.org/$LLVM/llvm-$LLVM.src.tar.xz | \\\n+  xz -d | \\\n+  tar xf -\n+\n+cd llvm-$LLVM.src\n+\n+mkdir -p tools/clang\n+\n+curl https://releases.llvm.org/$LLVM/cfe-$LLVM.src.tar.xz | \\\n+  xz -d | \\\n+  tar xf - -C tools/clang --strip-components=1\n+\n+mkdir ../clang-build\n+cd ../clang-build\n+\n+# For whatever reason the default set of include paths for clang is different\n+# than that of gcc. As a result we need to manually include our sysroot's\n+# include path, /rustroot/include, to clang's default include path.\n+#\n+# Alsow there's this weird oddity with gcc where there's an 'include-fixed'\n+# directory that it generates. It turns out [1] that Centos 5's headers are so\n+# old that they're incompatible with modern C semantics. While gcc automatically\n+# fixes that clang doesn't account for this. Tell clang to manually include the\n+# fixed headers so we can successfully compile code later on.\n+#\n+# [1]: https://sourceware.org/ml/crossgcc/2008-11/msg00028.html\n+INC=\"/rustroot/include\"\n+INC=\"$INC:/rustroot/lib/gcc/x86_64-unknown-linux-gnu/4.8.5/include-fixed\"\n+INC=\"$INC:/usr/include\"\n+\n+hide_output \\\n+    cmake ../llvm-$LLVM.src \\\n+      -DCMAKE_C_COMPILER=/rustroot/bin/gcc \\\n+      -DCMAKE_CXX_COMPILER=/rustroot/bin/g++ \\\n+      -DCMAKE_BUILD_TYPE=Release \\\n+      -DCMAKE_INSTALL_PREFIX=/rustroot \\\n+      -DLLVM_TARGETS_TO_BUILD=X86 \\\n+      -DC_INCLUDE_DIRS=\"$INC\"\n+\n+hide_output make -j10\n+hide_output make install\n+\n+cd ../..\n+rm -rf clang"}, {"sha": "62ea2506f4ef81964c7e14d5f84dcc46539c1a2c", "filename": "src/ci/docker/dist-x86_64-linux/build-gcc.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7e5b9ac41e36b29d5208f4e5455aade07d4d107d/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -42,7 +42,6 @@ hide_output ../gcc-$GCC/configure \\\n     --enable-languages=c,c++\n hide_output make -j10\n hide_output make install\n-ln -nsf gcc /rustroot/bin/cc\n \n cd ..\n rm -rf gcc-build"}, {"sha": "b6c1a03fb498f6c03d1cbfd4404223a046f8c3b2", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=7e5b9ac41e36b29d5208f4e5455aade07d4d107d", "patch": "@@ -1 +1 @@\n-Subproject commit 7243155b1c3da0a980c868a87adebf00e0b33989\n+Subproject commit b6c1a03fb498f6c03d1cbfd4404223a046f8c3b2"}]}