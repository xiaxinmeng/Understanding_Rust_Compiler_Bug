{"sha": "0c99d806eabd32a2ee2e6c71b400222b99c659e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTlkODA2ZWFiZDMyYTJlZTJlNmM3MWI0MDAyMjJiOTljNjU5ZTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-06T22:11:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-06T22:16:10Z"}, "message": "Use the proper kind for associated items\n\nSee comments in the diff; this is such a hack.\n\nThe reason this can't be done properly in `register_res` is because\nthere's no way to get back the parent type: calling\n`tcx.parent(assoc_item)` gets you the _impl_, not the type.\nYou can call `tcx.impl_trait_ref(impl_).self_ty()`, but there's no way\nto go from that to a DefId without unwrapping.", "tree": {"sha": "f168d4df6e7904113b48d776d8b63a1525a57f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f168d4df6e7904113b48d776d8b63a1525a57f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c99d806eabd32a2ee2e6c71b400222b99c659e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c99d806eabd32a2ee2e6c71b400222b99c659e1", "html_url": "https://github.com/rust-lang/rust/commit/0c99d806eabd32a2ee2e6c71b400222b99c659e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c99d806eabd32a2ee2e6c71b400222b99c659e1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05e9da493a9e447dd2dafc271b06ad80358496f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e9da493a9e447dd2dafc271b06ad80358496f", "html_url": "https://github.com/rust-lang/rust/commit/f05e9da493a9e447dd2dafc271b06ad80358496f"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "7f3bb13edd7f2d3531e76c71ea9b395f5ad25599", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c99d806eabd32a2ee2e6c71b400222b99c659e1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c99d806eabd32a2ee2e6c71b400222b99c659e1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=0c99d806eabd32a2ee2e6c71b400222b99c659e1", "patch": "@@ -17,6 +17,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n \n+use std::cell::Cell;\n use std::ops::Range;\n \n use crate::clean::*;\n@@ -62,11 +63,12 @@ struct LinkCollector<'a, 'tcx> {\n     cx: &'a DocContext<'tcx>,\n     // NOTE: this may not necessarily be a module in the current crate\n     mod_ids: Vec<DefId>,\n+    kind_side_channel: Cell<Option<DefKind>>,\n }\n \n impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     fn new(cx: &'a DocContext<'tcx>) -> Self {\n-        LinkCollector { cx, mod_ids: Vec::new() }\n+        LinkCollector { cx, mod_ids: Vec::new(), kind_side_channel: Cell::new(None) }\n     }\n \n     fn variant_field(\n@@ -347,6 +349,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                 AnchorFailure::AssocConstant\n                             }))\n                         } else {\n+                            // HACK(jynelson): `clean` expects the type, not the associated item.\n+                            // but the disambiguator logic expects the associated item.\n+                            // Store the kind in a side channel so that only the disambiguator logic looks at it.\n+                            self.kind_side_channel.replace(Some(item.kind.as_def_kind()));\n                             Ok((ty_res, Some(format!(\"{}.{}\", out, item_name))))\n                         }\n                     } else {\n@@ -763,7 +769,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n                     // NOTE: this relies on the fact that `''` is never parsed as a disambiguator\n                     // NOTE: this needs to be kept in sync with the disambiguator parsing\n-                    match (kind, disambiguator) {\n+                    match (self.kind_side_channel.take().unwrap_or(kind), disambiguator) {\n                         | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n                         // NOTE: this allows 'method' to mean both normal functions and associated functions\n                         // This can't cause ambiguity because both are in the same namespace."}, {"sha": "5af2ff0699497ed0667ce9326a31003007387593", "filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c99d806eabd32a2ee2e6c71b400222b99c659e1/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c99d806eabd32a2ee2e6c71b400222b99c659e1/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.rs?ref=0c99d806eabd32a2ee2e6c71b400222b99c659e1", "patch": "@@ -2,6 +2,10 @@\n //~^ NOTE lint level is defined\n pub enum S {}\n \n+impl S {\n+    fn assoc_fn() {}\n+}\n+\n macro_rules! m {\n     () => {};\n }\n@@ -65,4 +69,6 @@ trait T {}\n //~^ ERROR incompatible link kind for `f`\n //~| NOTE this link resolved\n //~| HELP use its disambiguator\n+\n+/// Link to [S::assoc_fn()]\n pub fn f() {}"}, {"sha": "7cf15db6017cb72f61ec8f4bd810aae562103de2", "filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c99d806eabd32a2ee2e6c71b400222b99c659e1/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c99d806eabd32a2ee2e6c71b400222b99c659e1/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-disambiguator-mismatch.stderr?ref=0c99d806eabd32a2ee2e6c71b400222b99c659e1", "patch": "@@ -1,5 +1,5 @@\n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:14:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:18:14\n    |\n LL | /// Link to [struct@S]\n    |              ^^^^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n@@ -12,79 +12,79 @@ LL | #![deny(broken_intra_doc_links)]\n    = note: this link resolved to an enum, which is not a struct\n \n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:19:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:23:14\n    |\n LL | /// Link to [mod@S]\n    |              ^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n    |\n    = note: this link resolved to an enum, which is not a module\n \n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:24:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:28:14\n    |\n LL | /// Link to [union@S]\n    |              ^^^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n    |\n    = note: this link resolved to an enum, which is not a union\n \n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:29:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:33:14\n    |\n LL | /// Link to [trait@S]\n    |              ^^^^^^^ help: to link to the enum, use its disambiguator: `enum@S`\n    |\n    = note: this link resolved to an enum, which is not a trait\n \n error: incompatible link kind for `T`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:34:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:38:14\n    |\n LL | /// Link to [struct@T]\n    |              ^^^^^^^^ help: to link to the trait, use its disambiguator: `trait@T`\n    |\n    = note: this link resolved to a trait, which is not a struct\n \n error: incompatible link kind for `m`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:39:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:43:14\n    |\n LL | /// Link to [derive@m]\n    |              ^^^^^^^^ help: to link to the macro, use its disambiguator: `m!`\n    |\n    = note: this link resolved to a macro, which is not a derive macro\n \n error: incompatible link kind for `s`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:44:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:48:14\n    |\n LL | /// Link to [const@s]\n    |              ^^^^^^^ help: to link to the static, use its disambiguator: `static@s`\n    |\n    = note: this link resolved to a static, which is not a constant\n \n error: incompatible link kind for `c`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:49:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:53:14\n    |\n LL | /// Link to [static@c]\n    |              ^^^^^^^^ help: to link to the constant, use its disambiguator: `const@c`\n    |\n    = note: this link resolved to a constant, which is not a static\n \n error: incompatible link kind for `c`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:54:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:58:14\n    |\n LL | /// Link to [fn@c]\n    |              ^^^^ help: to link to the constant, use its disambiguator: `const@c`\n    |\n    = note: this link resolved to a constant, which is not a function\n \n error: incompatible link kind for `c`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:59:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:63:14\n    |\n LL | /// Link to [c()]\n    |              ^^^ help: to link to the constant, use its disambiguator: `const@c`\n    |\n    = note: this link resolved to a constant, which is not a function\n \n error: incompatible link kind for `f`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:64:14\n+  --> $DIR/intra-links-disambiguator-mismatch.rs:68:14\n    |\n LL | /// Link to [const@f]\n    |              ^^^^^^^ help: to link to the function, use its disambiguator: `f()`"}]}