{"sha": "a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGNiMTA4NGE1YTkwY2Y3NmNhMzIwN2Q0MmIxNmI5YzNhYjFjNzY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-21T19:40:38Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:04Z"}, "message": "Require just the Unicode Scalar Values to be matched for a char", "tree": {"sha": "b9d46f3f6487155ff4fb837a27f9afeeed4fe4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d46f3f6487155ff4fb837a27f9afeeed4fe4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76", "html_url": "https://github.com/rust-lang/rust/commit/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9778a81e9287571710ebbd83aba1a6b816297c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9778a81e9287571710ebbd83aba1a6b816297c3b", "html_url": "https://github.com/rust-lang/rust/commit/9778a81e9287571710ebbd83aba1a6b816297c3b"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "4a94030e876056e14266d86ce632d7a3361a7f82", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76", "patch": "@@ -460,11 +460,15 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 .collect()\n         }\n         ty::TyChar if exhaustive_integer_patterns => {\n-            let (min, max) = (0u128, char::MAX as u128);\n+            let endpoint = |c: char| {\n+                ty::Const::from_bits(cx.tcx, c as u128, cx.tcx.types.char)\n+            };\n             value_constructors = true;\n-            vec![ConstantRange(ty::Const::from_bits(cx.tcx, min, cx.tcx.types.char),\n-                               ty::Const::from_bits(cx.tcx, max, cx.tcx.types.char),\n-                               RangeEnd::Included)]\n+            vec![\n+                // The valid Unicode Scalar Value ranges.\n+                ConstantRange(endpoint('\\u{0000}'), endpoint('\\u{D7FF}'), RangeEnd::Included),\n+                ConstantRange(endpoint('\\u{E000}'), endpoint('\\u{10FFFF}'), RangeEnd::Included),\n+            ]\n         }\n         ty::TyInt(int_ty) if exhaustive_integer_patterns => {\n             use syntax::ast::IntTy::*;"}, {"sha": "8076441504565850091be39a6a278ceb2332a53a", "filename": "src/test/ui/exhaustive_integer_patterns.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs?ref=a20cb1084a5a90cf76ca3207d42b16b9c3ab1c76", "patch": "@@ -55,10 +55,19 @@ fn main() {\n     }\n \n     // Let's test other types too!\n-    match '\\u{0}' {\n+    let c: char = '\\u{0}';\n+    match c {\n         '\\u{0}' ..= char::MAX => {} // ok\n     }\n \n+    // We can actually get away with just covering the\n+    // following two ranges, which correspond to all\n+    // valid Unicode Scalar Values.\n+    match c {\n+        '\\u{0000}' ..= '\\u{D7FF}' => {}\n+        '\\u{E000}' ..= '\\u{10_FFFF}' => {}\n+    }\n+\n     match 0usize {\n         0 ..= usize::MAX => {} // ok\n     }\n@@ -84,7 +93,7 @@ fn main() {\n     }\n \n     match 0i8 {\n-        -128..=127 => {} // ok\n+        -128 ..= 127 => {} // ok\n     }\n \n     match 0i16 {"}]}