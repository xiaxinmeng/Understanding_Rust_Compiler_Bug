{"sha": "75eabb17aec390fd91b5bf11539012e4fc7307b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWFiYjE3YWVjMzkwZmQ5MWI1YmYxMTUzOTAxMmU0ZmM3MzA3Yjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-13T21:14:11Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:37:24Z"}, "message": "Account for diverging types in return `impl Trait`", "tree": {"sha": "de95b689608968a0e6f7172798d6f4b2b9b7527a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de95b689608968a0e6f7172798d6f4b2b9b7527a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75eabb17aec390fd91b5bf11539012e4fc7307b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75eabb17aec390fd91b5bf11539012e4fc7307b7", "html_url": "https://github.com/rust-lang/rust/commit/75eabb17aec390fd91b5bf11539012e4fc7307b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75eabb17aec390fd91b5bf11539012e4fc7307b7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd564112f1ec00f6f8a56e8a3577dd255639131", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd564112f1ec00f6f8a56e8a3577dd255639131", "html_url": "https://github.com/rust-lang/rust/commit/6fd564112f1ec00f6f8a56e8a3577dd255639131"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "698fdfa3897b1d92c55fa9cb1afe8fba499784dd", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75eabb17aec390fd91b5bf11539012e4fc7307b7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75eabb17aec390fd91b5bf11539012e4fc7307b7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=75eabb17aec390fd91b5bf11539012e4fc7307b7", "patch": "@@ -1348,6 +1348,34 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 \"...is found to be `{}` here\",\n                 fcx.resolve_vars_with_obligations(expected),\n             ));\n+            err.note(\n+                \"`impl Trait` as a return type requires that all the returned values must have \\\n+                 the same type\",\n+            );\n+            let snippet = fcx\n+                .tcx\n+                .sess\n+                .source_map()\n+                .span_to_snippet(return_sp)\n+                .unwrap_or_else(|_| \"dyn Trait\".to_string());\n+            let mut snippet_iter = snippet.split_whitespace();\n+            let has_impl = snippet_iter.next().map_or(false, |s| s == \"impl\");\n+            if has_impl {\n+                err.help(&format!(\n+                    \"you can instead return a trait object using `Box<dyn {}>`\",\n+                    &snippet[5..]\n+                ));\n+            }\n+            let impl_trait_msg = \"for information on `impl Trait`, see \\\n+                <https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                #returning-types-that-implement-traits>\";\n+            let trait_obj_msg = \"for information on trait objects, see \\\n+                <https://doc.rust-lang.org/book/ch17-02-trait-objects.html\\\n+                #using-trait-objects-that-allow-for-values-of-different-types>\";\n+            err.note(impl_trait_msg);\n+            if has_impl {\n+                err.note(trait_obj_msg);\n+            }\n         }\n         err\n     }"}, {"sha": "215b6d52918abe8196f568e5c30deafc6e195c11", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75eabb17aec390fd91b5bf11539012e4fc7307b7/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75eabb17aec390fd91b5bf11539012e4fc7307b7/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=75eabb17aec390fd91b5bf11539012e4fc7307b7", "patch": "@@ -9,6 +9,11 @@ LL |         return 1_i32;\n LL |     }\n LL |     0_u32\n    |     ^^^^^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn Foo>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "9db5250e4d87697ef7f1bd0ba9528784c088071d", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/75eabb17aec390fd91b5bf11539012e4fc7307b7/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75eabb17aec390fd91b5bf11539012e4fc7307b7/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=75eabb17aec390fd91b5bf11539012e4fc7307b7", "patch": "@@ -9,6 +9,11 @@ LL |         return 0i32;\n LL |     }\n LL |     1u32\n    |     ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n@@ -21,6 +26,11 @@ LL |         return 0i32;\n LL |     } else {\n LL |         return 1u32;\n    |                ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n@@ -33,6 +43,11 @@ LL |         return 0i32;\n LL |     } else {\n LL |         1u32\n    |         ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n@@ -57,6 +72,11 @@ LL |         0 => return 0i32,\n    |                     ---- ...is found to be `i32` here\n LL |         _ => 1u32,\n    |              ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n@@ -71,6 +91,11 @@ LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n@@ -83,6 +108,11 @@ LL |             return 0i32;\n ...\n LL |             1u32\n    |             ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: `impl Trait` as a return type requires that all the returned values must have the same type\n+   = help: you can instead return a trait object using `Box<dyn std::fmt::Display>`\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n \n error: aborting due to 7 previous errors\n "}]}