{"sha": "87c3ee861ec488827044e07d5d0cd7c8508c681f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzNlZTg2MWVjNDg4ODI3MDQ0ZTA3ZDVkMGNkN2M4NTA4YzY4MWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:20:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:20:35Z"}, "message": "rollup merge of #21457: alexcrichton/issue-21436\n\nConflicts:\n\tsrc/liballoc/boxed.rs\n\tsrc/librustc/middle/traits/error_reporting.rs\n\tsrc/libstd/sync/mpsc/mod.rs", "tree": {"sha": "49a374a1baf3e3b816120ffdbf28959e10a5ea34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a374a1baf3e3b816120ffdbf28959e10a5ea34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c3ee861ec488827044e07d5d0cd7c8508c681f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c3ee861ec488827044e07d5d0cd7c8508c681f", "html_url": "https://github.com/rust-lang/rust/commit/87c3ee861ec488827044e07d5d0cd7c8508c681f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c3ee861ec488827044e07d5d0cd7c8508c681f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b81d25122b0ff230182375d09300d5403b1750", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b81d25122b0ff230182375d09300d5403b1750", "html_url": "https://github.com/rust-lang/rust/commit/e4b81d25122b0ff230182375d09300d5403b1750"}, {"sha": "3cb9fa26ef9905c00a29ea577fb55a12a91c8e7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb9fa26ef9905c00a29ea577fb55a12a91c8e7b", "html_url": "https://github.com/rust-lang/rust/commit/3cb9fa26ef9905c00a29ea577fb55a12a91c8e7b"}], "stats": {"total": 1469, "additions": 763, "deletions": 706}, "files": [{"sha": "c21785c45a3ac8422a1ed2dd5c4f04f3b9cf6e34", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::str::FromStr;\n use regex::Regex;\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,\n     RunFail,\n@@ -43,9 +43,9 @@ impl FromStr for Mode {\n     }\n }\n \n-impl fmt::String for Mode {\n+impl fmt::Display for Mode {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(match *self {\n+        fmt::Display::fmt(match *self {\n             CompileFail => \"compile-fail\",\n             RunFail => \"run-fail\",\n             RunPass => \"run-pass\",\n@@ -58,12 +58,6 @@ impl fmt::String for Mode {\n     }\n }\n \n-impl fmt::Show for Mode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n #[derive(Clone)]\n pub struct Config {\n     // The library paths required for running the compiler"}, {"sha": "b703b092efc79441c43ec2afe6d9ae080797beac", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -548,7 +548,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n             // Add line breakpoints\n             for line in breakpoint_lines.iter() {\n-                script_str.push_str(&format!(\"break '{:?}':{}\\n\",\n+                script_str.push_str(&format!(\"break '{}':{}\\n\",\n                                              testfile.filename_display(),\n                                              *line)[]);\n             }\n@@ -751,7 +751,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n             status: status,\n             stdout: out,\n             stderr: err,\n-            cmdline: format!(\"{}\", cmd)\n+            cmdline: format!(\"{:?}\", cmd)\n         };\n     }\n }\n@@ -954,7 +954,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n     }\n \n     let prefixes = expected_errors.iter().map(|ee| {\n-        format!(\"{:?}:{}:\", testfile.display(), ee.line)\n+        format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<Vec<String> >();\n \n     #[cfg(windows)]"}, {"sha": "5f8cd6baf9a743c7ec8072e396c367a1fff2dbf2", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -72,7 +72,7 @@ use core::prelude::*;\n use core::atomic;\n use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::borrow::BorrowFrom;\n-use core::fmt::{self, Show};\n+use core::fmt;\n use core::cmp::{Ordering};\n use core::default::Default;\n use core::mem::{min_align_of, size_of};\n@@ -578,16 +578,17 @@ impl<T: Ord> Ord for Arc<T> {\n #[stable]\n impl<T: Eq> Eq for Arc<T> {}\n \n-impl<T: fmt::Show> fmt::Show for Arc<T> {\n+#[stable]\n+impl<T: fmt::Display> fmt::Display for Arc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Arc({:?})\", (**self))\n+        fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable]\n-impl<T: fmt::String> fmt::String for Arc<T> {\n+impl<T: fmt::Debug> fmt::Debug for Arc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(&**self, f)\n+        fmt::Debug::fmt(&**self, f)\n     }\n }\n \n@@ -806,7 +807,7 @@ mod tests {\n     #[test]\n     fn show_arc() {\n         let a = Arc::new(5u32);\n-        assert!(format!(\"{:?}\", a) == \"Arc(5u32)\")\n+        assert_eq!(format!(\"{:?}\", a), \"5\");\n     }\n \n     // Make sure deriving works with Arc<T>"}, {"sha": "5ec08a1f254066cea102e316e4e70d911a471d4d", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -16,17 +16,18 @@ use core::any::Any;\n use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n+use core::error::{Error, FromError};\n use core::fmt;\n use core::hash::{self, Hash};\n use core::iter::Iterator;\n use core::marker::Sized;\n use core::mem;\n+use core::ops::{Deref, DerefMut};\n use core::option::Option;\n use core::ptr::Unique;\n use core::raw::TraitObject;\n-use core::result::Result;\n use core::result::Result::{Ok, Err};\n-use core::ops::{Deref, DerefMut};\n+use core::result::Result;\n \n /// A value that represents the global exchange heap. This is the default\n /// place that the `box` keyword allocates into when no place is supplied.\n@@ -157,20 +158,22 @@ impl BoxAny for Box<Any> {\n     }\n }\n \n-impl<T: ?Sized + fmt::Show> fmt::Show for Box<T> {\n+#[stable]\n+impl<T: fmt::Display + ?Sized> fmt::Display for Box<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Box({:?})\", &**self)\n+        fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable]\n-impl<T: ?Sized + fmt::String> fmt::String for Box<T> {\n+impl<T: fmt::Debug + ?Sized> fmt::Debug for Box<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(&**self, f)\n+        fmt::Debug::fmt(&**self, f)\n     }\n }\n \n-impl fmt::Show for Box<Any> {\n+#[stable]\n+impl fmt::Debug for Box<Any> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Box<Any>\")\n     }\n@@ -201,3 +204,9 @@ impl<'a, T> Iterator for Box<Iterator<Item=T> + 'a> {\n         (**self).size_hint()\n     }\n }\n+\n+impl<'a, E: Error + 'a> FromError<E> for Box<Error + 'a> {\n+    fn from_error(err: E) -> Box<Error + 'a> {\n+        Box::new(err)\n+    }\n+}"}, {"sha": "f5a5025c665d83961493f5bb18039534220111ee", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -606,17 +606,17 @@ impl<S: hash::Hasher, T: Hash<S>> Hash<S> for Rc<T> {\n     }\n }\n \n-#[unstable = \"Show is experimental.\"]\n-impl<T: fmt::Show> fmt::Show for Rc<T> {\n+#[stable]\n+impl<T: fmt::Display> fmt::Display for Rc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Rc({:?})\", **self)\n+        fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[stable]\n-impl<T: fmt::String> fmt::String for Rc<T> {\n+impl<T: fmt::Debug> fmt::Debug for Rc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(&**self, f)\n+        fmt::Debug::fmt(&**self, f)\n     }\n }\n \n@@ -737,8 +737,8 @@ impl<T> Clone for Weak<T> {\n     }\n }\n \n-#[unstable = \"Show is experimental.\"]\n-impl<T: fmt::Show> fmt::Show for Weak<T> {\n+#[stable]\n+impl<T: fmt::Debug> fmt::Debug for Weak<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"(Weak)\")\n     }\n@@ -1013,7 +1013,7 @@ mod tests {\n     #[test]\n     fn test_show() {\n         let foo = Rc::new(75u);\n-        assert!(format!(\"{:?}\", foo) == \"Rc(75u)\")\n+        assert_eq!(format!(\"{:?}\", foo), \"75\");\n     }\n \n }"}, {"sha": "4c07f5b31e64d01c0afa8e7d405d5c49b131efb8", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -972,7 +972,7 @@ impl Ord for Bitv {\n }\n \n #[stable]\n-impl fmt::Show for Bitv {\n+impl fmt::Debug for Bitv {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         for bit in self.iter() {\n             try!(write!(fmt, \"{}\", if bit { 1u32 } else { 0u32 }));\n@@ -1727,7 +1727,7 @@ impl BitvSet {\n     }\n }\n \n-impl fmt::Show for BitvSet {\n+impl fmt::Debug for BitvSet {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"BitvSet {{\"));\n         let mut first = true;\n@@ -2622,7 +2622,7 @@ mod bitv_set_test {\n         s.insert(10);\n         s.insert(50);\n         s.insert(2);\n-        assert_eq!(\"BitvSet {1u, 2u, 10u, 50u}\", format!(\"{:?}\", s));\n+        assert_eq!(\"BitvSet {1, 2, 10, 50}\", format!(\"{:?}\", s));\n     }\n \n     #[test]"}, {"sha": "8c2f00a5695144f53f8ffcce8f6fb4cb61ffda12", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -22,7 +22,7 @@ use core::prelude::*;\n use core::borrow::BorrowFrom;\n use core::cmp::Ordering;\n use core::default::Default;\n-use core::fmt::Show;\n+use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n use core::iter::{Map, FromIterator};\n use core::ops::{Index, IndexMut};\n@@ -871,7 +871,7 @@ impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n }\n \n #[stable]\n-impl<K: Show, V: Show> Show for BTreeMap<K, V> {\n+impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"BTreeMap {{\"));\n "}, {"sha": "d307b7dbde75d20267d72e4760365d90bdabfaf2", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -16,7 +16,7 @@ use core::prelude::*;\n use core::borrow::BorrowFrom;\n use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::default::Default;\n-use core::fmt::Show;\n+use core::fmt::Debug;\n use core::fmt;\n use core::iter::{Peekable, Map, FromIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n@@ -589,7 +589,7 @@ impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n }\n \n #[stable]\n-impl<T: Show> Show for BTreeSet<T> {\n+impl<T: Debug> Debug for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"BTreeSet {{\"));\n \n@@ -889,7 +889,7 @@ mod test {\n \n         let set_str = format!(\"{:?}\", set);\n \n-        assert_eq!(set_str, \"BTreeSet {1i, 2i}\");\n+        assert_eq!(set_str, \"BTreeSet {1, 2}\");\n         assert_eq!(format!(\"{:?}\", empty), \"BTreeSet {}\");\n     }\n }"}, {"sha": "73fd806c9070bcfe930a5299bb5dbb003552f6ac", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -874,7 +874,7 @@ impl<A: Clone> Clone for DList<A> {\n }\n \n #[stable]\n-impl<A: fmt::Show> fmt::Show for DList<A> {\n+impl<A: fmt::Debug> fmt::Debug for DList<A> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"DList [\"));\n \n@@ -1333,7 +1333,7 @@ mod tests {\n     #[test]\n     fn test_show() {\n         let list: DList<int> = range(0i, 10).collect();\n-        assert_eq!(format!(\"{:?}\", list), \"DList [0i, 1i, 2i, 3i, 4i, 5i, 6i, 7i, 8i, 9i]\");\n+        assert_eq!(format!(\"{:?}\", list), \"DList [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n         let list: DList<&str> = vec![\"just\", \"one\", \"test\", \"more\"].iter()\n                                                                    .map(|&s| s)"}, {"sha": "a40a590c51ace8abdeb4e818f9806d506cf50ff5", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -31,7 +31,7 @@ pub struct EnumSet<E> {\n \n impl<E> Copy for EnumSet<E> {}\n \n-impl<E:CLike+fmt::Show> fmt::Show for EnumSet<E> {\n+impl<E:CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"EnumSet {{\"));\n         let mut first = true;"}, {"sha": "badd7a8d6ccc34b8ba747b503f508f594180de67", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -1611,7 +1611,7 @@ impl<A> Extend<A> for RingBuf<A> {\n }\n \n #[stable]\n-impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n+impl<T: fmt::Debug> fmt::Debug for RingBuf<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"RingBuf [\"));\n \n@@ -1630,7 +1630,7 @@ mod tests {\n     use self::Taggypar::*;\n     use prelude::*;\n     use core::iter;\n-    use std::fmt::Show;\n+    use std::fmt::Debug;\n     use std::hash::{self, SipHasher};\n     use test::Bencher;\n     use test;\n@@ -1678,7 +1678,7 @@ mod tests {\n     }\n \n     #[cfg(test)]\n-    fn test_parameterized<T:Clone + PartialEq + Show>(a: T, b: T, c: T, d: T) {\n+    fn test_parameterized<T:Clone + PartialEq + Debug>(a: T, b: T, c: T, d: T) {\n         let mut deq = RingBuf::new();\n         assert_eq!(deq.len(), 0);\n         deq.push_front(a.clone());\n@@ -2302,7 +2302,7 @@ mod tests {\n     #[test]\n     fn test_show() {\n         let ringbuf: RingBuf<int> = range(0i, 10).collect();\n-        assert_eq!(format!(\"{:?}\", ringbuf), \"RingBuf [0i, 1i, 2i, 3i, 4i, 5i, 6i, 7i, 8i, 9i]\");\n+        assert_eq!(format!(\"{:?}\", ringbuf), \"RingBuf [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\");\n \n         let ringbuf: RingBuf<&str> = vec![\"just\", \"one\", \"test\", \"more\"].iter()\n                                                                         .map(|&s| s)"}, {"sha": "6fdeea0deafd6ea865056f91ec2b330279f15e3b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -2480,19 +2480,19 @@ mod tests {\n         }\n         let empty: Vec<int> = vec![];\n         test_show_vec!(empty, \"[]\");\n-        test_show_vec!(vec![1i], \"[1i]\");\n-        test_show_vec!(vec![1i, 2, 3], \"[1i, 2i, 3i]\");\n+        test_show_vec!(vec![1i], \"[1]\");\n+        test_show_vec!(vec![1i, 2, 3], \"[1, 2, 3]\");\n         test_show_vec!(vec![vec![], vec![1u], vec![1u, 1u]],\n-                       \"[[], [1u], [1u, 1u]]\");\n+                       \"[[], [1], [1, 1]]\");\n \n         let empty_mut: &mut [int] = &mut[];\n         test_show_vec!(empty_mut, \"[]\");\n         let v: &mut[int] = &mut[1];\n-        test_show_vec!(v, \"[1i]\");\n+        test_show_vec!(v, \"[1]\");\n         let v: &mut[int] = &mut[1, 2, 3];\n-        test_show_vec!(v, \"[1i, 2i, 3i]\");\n+        test_show_vec!(v, \"[1, 2, 3]\");\n         let v: &mut [&mut[uint]] = &mut[&mut[], &mut[1u], &mut[1u, 1u]];\n-        test_show_vec!(v, \"[[], [1u], [1u, 1u]]\");\n+        test_show_vec!(v, \"[[], [1], [1, 1]]\");\n     }\n \n     #[test]"}, {"sha": "e6f438ecded86fc7c1b32eff0bf74d28100b61fb", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -18,6 +18,7 @@ use core::prelude::*;\n \n use core::borrow::{Cow, IntoCow};\n use core::default::Default;\n+use core::error::Error;\n use core::fmt;\n use core::hash;\n use core::iter::FromIterator;\n@@ -40,6 +41,7 @@ pub struct String {\n \n /// A possible error value from the `String::from_utf8` function.\n #[stable]\n+#[derive(Show)]\n pub struct FromUtf8Error {\n     bytes: Vec<u8>,\n     error: Utf8Error,\n@@ -48,6 +50,7 @@ pub struct FromUtf8Error {\n /// A possible error value from the `String::from_utf16` function.\n #[stable]\n #[allow(missing_copy_implementations)]\n+#[derive(Show)]\n pub struct FromUtf16Error(());\n \n impl String {\n@@ -680,30 +683,28 @@ impl FromUtf8Error {\n     pub fn utf8_error(&self) -> Utf8Error { self.error }\n }\n \n-impl fmt::Show for FromUtf8Error {\n+#[stable]\n+impl fmt::Display for FromUtf8Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Display::fmt(&self.error, f)\n     }\n }\n \n #[stable]\n-impl fmt::String for FromUtf8Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(&self.error, f)\n-    }\n+impl Error for FromUtf8Error {\n+    fn description(&self) -> &str { \"invalid utf-8\" }\n }\n \n-impl fmt::Show for FromUtf16Error {\n+#[stable]\n+impl fmt::Display for FromUtf16Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Display::fmt(\"invalid utf-16: lone surrogate found\", f)\n     }\n }\n \n #[stable]\n-impl fmt::String for FromUtf16Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(\"invalid utf-16: lone surrogate found\", f)\n-    }\n+impl Error for FromUtf16Error {\n+    fn description(&self) -> &str { \"invalid utf-16\" }\n }\n \n #[stable]\n@@ -814,18 +815,18 @@ impl Default for String {\n }\n \n #[stable]\n-impl fmt::String for String {\n+impl fmt::Display for String {\n     #[inline]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(&**self, f)\n+        fmt::Display::fmt(&**self, f)\n     }\n }\n \n-#[unstable = \"waiting on fmt stabilization\"]\n-impl fmt::Show for String {\n+#[stable]\n+impl fmt::Debug for String {\n     #[inline]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Show::fmt(&**self, f)\n+        fmt::Debug::fmt(&**self, f)\n     }\n }\n \n@@ -934,7 +935,7 @@ pub trait ToString {\n     fn to_string(&self) -> String;\n }\n \n-impl<T: fmt::String + ?Sized> ToString for T {\n+impl<T: fmt::Display + ?Sized> ToString for T {\n     #[inline]\n     fn to_string(&self) -> String {\n         use core::fmt::Writer;\n@@ -1295,10 +1296,10 @@ mod tests {\n     fn test_vectors() {\n         let x: Vec<int> = vec![];\n         assert_eq!(format!(\"{:?}\", x), \"[]\");\n-        assert_eq!(format!(\"{:?}\", vec![1i]), \"[1i]\");\n-        assert_eq!(format!(\"{:?}\", vec![1i, 2, 3]), \"[1i, 2i, 3i]\");\n+        assert_eq!(format!(\"{:?}\", vec![1i]), \"[1]\");\n+        assert_eq!(format!(\"{:?}\", vec![1i, 2, 3]), \"[1, 2, 3]\");\n         assert!(format!(\"{:?}\", vec![vec![], vec![1i], vec![1i, 1]]) ==\n-               \"[[], [1i], [1i, 1i]]\");\n+               \"[[], [1], [1, 1]]\");\n     }\n \n     #[test]"}, {"sha": "bc90a5ab846fbe7e24ba1012b119b87b0b82e0f5", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -1486,10 +1486,10 @@ impl<T> Default for Vec<T> {\n     }\n }\n \n-#[unstable = \"waiting on Show stability\"]\n-impl<T: fmt::Show> fmt::Show for Vec<T> {\n+#[stable]\n+impl<T: fmt::Debug> fmt::Debug for Vec<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Show::fmt(self.as_slice(), f)\n+        fmt::Debug::fmt(self.as_slice(), f)\n     }\n }\n "}, {"sha": "f178d5bc7e9ed3aa26246e38517bb694f71ef3af", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -513,7 +513,7 @@ impl<V: Ord> Ord for VecMap<V> {\n }\n \n #[stable]\n-impl<V: fmt::Show> fmt::Show for VecMap<V> {\n+impl<V: fmt::Debug> fmt::Debug for VecMap<V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"VecMap {{\"));\n \n@@ -990,7 +990,7 @@ mod test_map {\n         map.insert(3, 4i);\n \n         let map_str = format!(\"{:?}\", map);\n-        assert!(map_str == \"VecMap {1: 2i, 3: 4i}\" || map_str == \"{3: 4i, 1: 2i}\");\n+        assert!(map_str == \"VecMap {1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n         assert_eq!(format!(\"{:?}\", empty), \"VecMap {}\");\n     }\n "}, {"sha": "6e9d2f349bfe96cc19fc1817b0da75bc7b25fee0", "filename": "src/libcore/any.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -34,11 +34,11 @@\n //! use runtime reflection instead.\n //!\n //! ```rust\n-//! use std::fmt::Show;\n+//! use std::fmt::Debug;\n //! use std::any::Any;\n //!\n-//! // Logger function for any type that implements Show.\n-//! fn log<T: Any+Show>(value: &T) {\n+//! // Logger function for any type that implements Debug.\n+//! fn log<T: Any + Debug>(value: &T) {\n //!     let value_any = value as &Any;\n //!\n //!     // try to convert our value to a String.  If successful, we want to\n@@ -55,7 +55,7 @@\n //! }\n //!\n //! // This function wants to log its parameter out prior to doing work with it.\n-//! fn do_work<T: Show+'static>(value: &T) {\n+//! fn do_work<T: Debug + 'static>(value: &T) {\n //!     log(value);\n //!     // ...do some other work\n //! }"}, {"sha": "a83537e12f7a9cae95cf81e6ef62decbfa3acff1", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -39,10 +39,10 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable = \"waiting for Show to stabilize\"]\n-            impl<T:fmt::Show> fmt::Show for [T; $N] {\n+            #[stable]\n+            impl<T: fmt::Debug> fmt::Debug for [T; $N] {\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                    fmt::Show::fmt(&&self[], f)\n+                    fmt::Debug::fmt(&&self[], f)\n                 }\n             }\n "}, {"sha": "63614aaa4633567b6aaab2e54e84aea1caac5139", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -133,7 +133,6 @@ impl<T> ToOwned<T> for T where T: Clone {\n ///     }\n /// }\n /// ```\n-#[derive(Show)]\n pub enum Cow<'a, T, B: ?Sized + 'a> where B: ToOwned<T> {\n     /// Borrowed data.\n     Borrowed(&'a B),\n@@ -239,14 +238,27 @@ impl<'a, T, B: ?Sized> PartialOrd for Cow<'a, T, B> where B: PartialOrd + ToOwne\n }\n \n #[stable]\n-impl<'a, T, B: ?Sized> fmt::String for Cow<'a, T, B> where\n-    B: fmt::String + ToOwned<T>,\n-    T: fmt::String,\n+impl<'a, T, B: ?Sized> fmt::Debug for Cow<'a, T, B> where\n+    B: fmt::Debug + ToOwned<T>,\n+    T: fmt::Debug,\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            Borrowed(ref b) => fmt::String::fmt(b, f),\n-            Owned(ref o) => fmt::String::fmt(o, f),\n+            Borrowed(ref b) => fmt::Debug::fmt(b, f),\n+            Owned(ref o) => fmt::Debug::fmt(o, f),\n+        }\n+    }\n+}\n+\n+#[stable]\n+impl<'a, T, B: ?Sized> fmt::Display for Cow<'a, T, B> where\n+    B: fmt::Display + ToOwned<T>,\n+    T: fmt::Display,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            Borrowed(ref b) => fmt::Display::fmt(b, f),\n+            Owned(ref o) => fmt::Display::fmt(o, f),\n         }\n     }\n }"}, {"sha": "9ff38028df9f30e246552b7b7e93ec326fdafc61", "filename": "src/libcore/error.rs", "status": "renamed", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -14,14 +14,15 @@\n //!\n //! `Error` is a trait representing the basic expectations for error values,\n //! i.e. values of type `E` in `Result<T, E>`. At a minimum, errors must provide\n-//! a description, but they may optionally provide additional detail and cause\n-//! chain information:\n+//! a description, but they may optionally provide additional detail (via\n+//! `Display`) and cause chain information:\n //!\n //! ```\n-//! trait Error {\n+//! use std::fmt::Display;\n+//!\n+//! trait Error: Display {\n //!     fn description(&self) -> &str;\n //!\n-//!     fn detail(&self) -> Option<String> { None }\n //!     fn cause(&self) -> Option<&Error> { None }\n //! }\n //! ```\n@@ -80,20 +81,15 @@\n \n #![stable]\n \n-use prelude::v1::*;\n-\n-use str::Utf8Error;\n-use string::{FromUtf8Error, FromUtf16Error};\n+use prelude::*;\n+use fmt::Display;\n \n /// Base functionality for all errors in Rust.\n #[unstable = \"the exact API of this trait may change\"]\n-pub trait Error {\n+pub trait Error: Display {\n     /// A short description of the error; usually a static string.\n     fn description(&self) -> &str;\n \n-    /// A detailed description of the error, usually including dynamic information.\n-    fn detail(&self) -> Option<String> { None }\n-\n     /// The lower-level cause of this error, if any.\n     fn cause(&self) -> Option<&Error> { None }\n }\n@@ -112,26 +108,3 @@ impl<E> FromError<E> for E {\n         err\n     }\n }\n-\n-#[stable]\n-impl Error for Utf8Error {\n-    fn description(&self) -> &str {\n-        match *self {\n-            Utf8Error::TooShort => \"invalid utf-8: not enough bytes\",\n-            Utf8Error::InvalidByte(..) => \"invalid utf-8: corrupt contents\",\n-        }\n-    }\n-\n-    fn detail(&self) -> Option<String> { Some(self.to_string()) }\n-}\n-\n-#[stable]\n-impl Error for FromUtf8Error {\n-    fn description(&self) -> &str { \"invalid utf-8\" }\n-    fn detail(&self) -> Option<String> { Some(self.to_string()) }\n-}\n-\n-#[stable]\n-impl Error for FromUtf16Error {\n-    fn description(&self) -> &str { \"invalid utf-16\" }\n-}", "previous_filename": "src/libstd/error.rs"}, {"sha": "0e8d31a62eed99f3c0cbab5a048d903ea4020327", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 91, "deletions": 51, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -26,12 +26,15 @@ use ops::{Deref, FnOnce};\n use result;\n use slice::SliceExt;\n use slice;\n-use str::{self, StrExt, Utf8Error};\n+use str::{self, StrExt};\n \n pub use self::num::radix;\n pub use self::num::Radix;\n pub use self::num::RadixFmt;\n \n+#[cfg(stage0)] pub use self::Debug as Show;\n+#[cfg(stage0)] pub use self::Display as String;\n+\n mod num;\n mod float;\n pub mod rt;\n@@ -46,7 +49,7 @@ pub type Result = result::Result<(), Error>;\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n #[unstable = \"core and I/O reconciliation may alter this definition\"]\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub struct Error;\n \n /// A collection of methods that are required to format a message into a stream.\n@@ -133,7 +136,7 @@ pub struct Argument<'a> {\n impl<'a> Argument<'a> {\n     #[inline(never)]\n     fn show_uint(x: &uint, f: &mut Formatter) -> Result {\n-        Show::fmt(x, f)\n+        Display::fmt(x, f)\n     }\n \n     fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter) -> Result) -> Argument<'b> {\n@@ -214,35 +217,65 @@ pub struct Arguments<'a> {\n     args: &'a [Argument<'a>],\n }\n \n-impl<'a> Show for Arguments<'a> {\n+#[stable]\n+impl<'a> Debug for Arguments<'a> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n-        String::fmt(self, fmt)\n+        Display::fmt(self, fmt)\n     }\n }\n \n #[stable]\n-impl<'a> String for Arguments<'a> {\n+impl<'a> Display for Arguments<'a> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         write(fmt.buf, *self)\n     }\n }\n \n /// Format trait for the `:?` format. Useful for debugging, most all types\n /// should implement this.\n-#[unstable = \"I/O and core have yet to be reconciled\"]\n+#[deprecated = \"renamed to Debug\"]\n+#[cfg(not(stage0))]\n pub trait Show {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n+/// Format trait for the `:?` format. Useful for debugging, most all types\n+/// should implement this.\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n+pub trait Debug {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n+#[cfg(not(stage0))]\n+impl<T: Show + ?Sized> Debug for T {\n+    #[allow(deprecated)]\n+    fn fmt(&self, f: &mut Formatter) -> Result { Show::fmt(self, f) }\n+}\n+\n+/// When a value can be semantically expressed as a String, this trait may be\n+/// used. It corresponds to the default format, `{}`.\n+#[deprecated = \"renamed to Display\"]\n+#[cfg(not(stage0))]\n+pub trait String {\n+    /// Formats the value using the given formatter.\n+    fn fmt(&self, &mut Formatter) -> Result;\n+}\n+\n /// When a value can be semantically expressed as a String, this trait may be\n /// used. It corresponds to the default format, `{}`.\n #[unstable = \"I/O and core have yet to be reconciled\"]\n-pub trait String {\n+pub trait Display {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n+#[cfg(not(stage0))]\n+impl<T: String + ?Sized> Display for T {\n+    #[allow(deprecated)]\n+    fn fmt(&self, f: &mut Formatter) -> Result { String::fmt(self, f) }\n+}\n \n /// Format trait for the `o` character\n #[unstable = \"I/O and core have yet to be reconciled\"]\n@@ -583,9 +616,10 @@ impl<'a> Formatter<'a> {\n     pub fn precision(&self) -> Option<uint> { self.precision }\n }\n \n-impl Show for Error {\n+#[stable]\n+impl Display for Error {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        String::fmt(\"an error occurred when formatting an argument\", f)\n+        Display::fmt(\"an error occurred when formatting an argument\", f)\n     }\n }\n \n@@ -611,32 +645,36 @@ pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n macro_rules! fmt_refs {\n     ($($tr:ident),*) => {\n         $(\n+        #[stable]\n         impl<'a, T: ?Sized + $tr> $tr for &'a T {\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n+        #[stable]\n         impl<'a, T: ?Sized + $tr> $tr for &'a mut T {\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         )*\n     }\n }\n \n-fmt_refs! { Show, String, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n+fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-impl Show for bool {\n+#[stable]\n+impl Debug for bool {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        String::fmt(self, f)\n+        Display::fmt(self, f)\n     }\n }\n \n #[stable]\n-impl String for bool {\n+impl Display for bool {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        String::fmt(if *self { \"true\" } else { \"false\" }, f)\n+        Display::fmt(if *self { \"true\" } else { \"false\" }, f)\n     }\n }\n \n-impl Show for str {\n+#[stable]\n+impl Debug for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         try!(write!(f, \"\\\"\"));\n         for c in self.chars().flat_map(|c| c.escape_default()) {\n@@ -647,13 +685,14 @@ impl Show for str {\n }\n \n #[stable]\n-impl String for str {\n+impl Display for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(self)\n     }\n }\n \n-impl Show for char {\n+#[stable]\n+impl Debug for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         use char::CharExt;\n         try!(write!(f, \"'\"));\n@@ -665,15 +704,16 @@ impl Show for char {\n }\n \n #[stable]\n-impl String for char {\n+impl Display for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         let mut utf8 = [0u8; 4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);\n         let s: &str = unsafe { mem::transmute(&utf8[..amt]) };\n-        String::fmt(s, f)\n+        Display::fmt(s, f)\n     }\n }\n \n+#[stable]\n impl<T> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.flags |= 1 << (rt::FlagAlternate as uint);\n@@ -683,18 +723,21 @@ impl<T> Pointer for *const T {\n     }\n }\n \n+#[stable]\n impl<T> Pointer for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n+#[stable]\n impl<'a, T> Pointer for &'a T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n+#[stable]\n impl<'a, T> Pointer for &'a mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(&**self as *const T), f)\n@@ -703,15 +746,15 @@ impl<'a, T> Pointer for &'a mut T {\n \n macro_rules! floating { ($ty:ident) => {\n \n-    impl Show for $ty {\n+    #[stable]\n+    impl Debug for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            try!(String::fmt(self, fmt));\n-            fmt.write_str(stringify!($ty))\n+            Display::fmt(self, fmt)\n         }\n     }\n \n     #[stable]\n-    impl String for $ty {\n+    impl Display for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n             use num::Float;\n \n@@ -732,6 +775,7 @@ macro_rules! floating { ($ty:ident) => {\n         }\n     }\n \n+    #[stable]\n     impl LowerExp for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n             use num::Float;\n@@ -753,6 +797,7 @@ macro_rules! floating { ($ty:ident) => {\n         }\n     }\n \n+    #[stable]\n     impl UpperExp for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n             use num::Float;\n@@ -777,12 +822,14 @@ macro_rules! floating { ($ty:ident) => {\n floating! { f32 }\n floating! { f64 }\n \n-// Implementation of Show for various core types\n+// Implementation of Display/Debug for various core types\n \n-impl<T> Show for *const T {\n+#[stable]\n+impl<T> Debug for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n-impl<T> Show for *mut T {\n+#[stable]\n+impl<T> Debug for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n \n@@ -793,7 +840,8 @@ macro_rules! peel {\n macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n-        impl<$($name:Show),*> Show for ($($name,)*) {\n+        #[stable]\n+        impl<$($name:Debug),*> Debug for ($($name,)*) {\n             #[allow(non_snake_case, unused_assignments)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 try!(write!(f, \"(\"));\n@@ -818,11 +866,13 @@ macro_rules! tuple {\n \n tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n-impl<'a> Show for &'a (any::Any+'a) {\n+#[stable]\n+impl<'a> Debug for &'a (any::Any+'a) {\n     fn fmt(&self, f: &mut Formatter) -> Result { f.pad(\"&Any\") }\n }\n \n-impl<T: Show> Show for [T] {\n+#[stable]\n+impl<T: Debug> Debug for [T] {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {\n             try!(write!(f, \"[\"));\n@@ -843,20 +893,22 @@ impl<T: Show> Show for [T] {\n     }\n }\n \n-impl Show for () {\n+#[stable]\n+impl Debug for () {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(\"()\")\n     }\n }\n \n-impl<T: Copy + Show> Show for Cell<T> {\n+#[stable]\n+impl<T: Copy + Debug> Debug for Cell<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         write!(f, \"Cell {{ value: {:?} }}\", self.get())\n     }\n }\n \n-#[unstable]\n-impl<T: Show> Show for RefCell<T> {\n+#[stable]\n+impl<T: Debug> Debug for RefCell<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         match self.try_borrow() {\n             Some(val) => write!(f, \"RefCell {{ value: {:?} }}\", val),\n@@ -865,29 +917,17 @@ impl<T: Show> Show for RefCell<T> {\n     }\n }\n \n-impl<'b, T: Show> Show for Ref<'b, T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        Show::fmt(&**self, f)\n-    }\n-}\n-\n-impl<'b, T: Show> Show for RefMut<'b, T> {\n+#[stable]\n+impl<'b, T: Debug> Debug for Ref<'b, T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        Show::fmt(&*(self.deref()), f)\n+        Debug::fmt(&**self, f)\n     }\n }\n \n #[stable]\n-impl String for Utf8Error {\n+impl<'b, T: Debug> Debug for RefMut<'b, T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        match *self {\n-            Utf8Error::InvalidByte(n) => {\n-                write!(f, \"invalid utf-8: invalid byte at index {}\", n)\n-            }\n-            Utf8Error::TooShort => {\n-                write!(f, \"invalid utf-8: byte slice too short\")\n-            }\n-        }\n+        Debug::fmt(&*(self.deref()), f)\n     }\n }\n "}, {"sha": "c456b3379e8d36b8729d96f9d932422ef8080b95", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -154,13 +154,14 @@ pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n \n macro_rules! radix_fmt {\n     ($T:ty as $U:ty, $fmt:ident, $S:expr) => {\n-        impl fmt::Show for RadixFmt<$T, Radix> {\n+        #[stable]\n+        impl fmt::Debug for RadixFmt<$T, Radix> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                try!(fmt::String::fmt(self, f));\n-                f.write_str($S)\n+                fmt::Display::fmt(self, f)\n             }\n         }\n-        impl fmt::String for RadixFmt<$T, Radix> {\n+        #[stable]\n+        impl fmt::Display for RadixFmt<$T, Radix> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 match *self { RadixFmt(ref x, radix) => radix.$fmt(*x as $U, f) }\n             }\n@@ -169,6 +170,7 @@ macro_rules! radix_fmt {\n }\n macro_rules! int_base {\n     ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n+        #[stable]\n         impl fmt::$Trait for $T {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 $Radix.fmt_int(*self as $U, f)\n@@ -179,10 +181,10 @@ macro_rules! int_base {\n \n macro_rules! show {\n     ($T:ident with $S:expr) => {\n-        impl fmt::Show for $T {\n+        #[stable]\n+        impl fmt::Debug for $T {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                try!(fmt::String::fmt(self, f));\n-                f.write_str($S)\n+                fmt::Display::fmt(self, f)\n             }\n         }\n     }\n@@ -192,15 +194,15 @@ macro_rules! integer {\n         integer! { $Int, $Uint, stringify!($Int), stringify!($Uint) }\n     };\n     ($Int:ident, $Uint:ident, $SI:expr, $SU:expr) => {\n-        int_base! { String   for $Int as $Int   -> Decimal }\n+        int_base! { Display  for $Int as $Int   -> Decimal }\n         int_base! { Binary   for $Int as $Uint  -> Binary }\n         int_base! { Octal    for $Int as $Uint  -> Octal }\n         int_base! { LowerHex for $Int as $Uint  -> LowerHex }\n         int_base! { UpperHex for $Int as $Uint  -> UpperHex }\n         radix_fmt! { $Int as $Int, fmt_int, $SI }\n         show! { $Int with $SI }\n \n-        int_base! { String   for $Uint as $Uint -> Decimal }\n+        int_base! { Display  for $Uint as $Uint -> Decimal }\n         int_base! { Binary   for $Uint as $Uint -> Binary }\n         int_base! { Octal    for $Uint as $Uint -> Octal }\n         int_base! { LowerHex for $Uint as $Uint -> LowerHex }"}, {"sha": "1e271f972b13132bc125c7183bf624546d0a9d7e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -138,6 +138,7 @@ pub mod slice;\n pub mod str;\n pub mod hash;\n pub mod fmt;\n+pub mod error;\n \n // note: does not need to be public\n mod tuple;"}, {"sha": "e15c1001f0e64ec0bec3ea8ec7a97303b7bb5424", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -947,10 +947,10 @@ pub trait IndexMut<Index: ?Sized> {\n #[unstable = \"API still in development\"]\n pub struct FullRange;\n \n-#[unstable = \"API still in development\"]\n-impl fmt::Show for FullRange {\n+#[stable]\n+impl fmt::Debug for FullRange {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Show::fmt(\"..\", fmt)\n+        fmt::Debug::fmt(\"..\", fmt)\n     }\n }\n \n@@ -1006,8 +1006,8 @@ impl<Idx: Clone + Step> DoubleEndedIterator for Range<Idx> {\n #[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> ExactSizeIterator for Range<Idx> {}\n \n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::Show> fmt::Show for Range<Idx> {\n+#[stable]\n+impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"{:?}..{:?}\", self.start, self.end)\n     }\n@@ -1035,8 +1035,8 @@ impl<Idx: Clone + Step> Iterator for RangeFrom<Idx> {\n     }\n }\n \n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::Show> fmt::Show for RangeFrom<Idx> {\n+#[stable]\n+impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"{:?}..\", self.start)\n     }\n@@ -1051,8 +1051,8 @@ pub struct RangeTo<Idx> {\n     pub end: Idx,\n }\n \n-#[unstable = \"API still in development\"]\n-impl<Idx: fmt::Show> fmt::Show for RangeTo<Idx> {\n+#[stable]\n+impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"..{:?}\", self.end)\n     }"}, {"sha": "c3d49e24978455c5ab75a0c66cf6ab2e14723c25", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -229,7 +229,7 @@\n use self::Result::{Ok, Err};\n \n use clone::Clone;\n-use fmt::Show;\n+use fmt::Display;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use ops::{FnMut, FnOnce};\n use option::Option::{self, None, Some};\n@@ -714,7 +714,7 @@ impl<T, E> Result<T, E> {\n }\n \n #[stable]\n-impl<T, E: Show> Result<T, E> {\n+impl<T, E: Display> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Ok`.\n     ///\n     /// # Panics\n@@ -739,13 +739,13 @@ impl<T, E: Show> Result<T, E> {\n         match self {\n             Ok(t) => t,\n             Err(e) =>\n-                panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", e)\n+                panic!(\"called `Result::unwrap()` on an `Err` value: {}\", e)\n         }\n     }\n }\n \n #[stable]\n-impl<T: Show, E> Result<T, E> {\n+impl<T: Display, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Err`.\n     ///\n     /// # Panics\n@@ -769,7 +769,7 @@ impl<T: Show, E> Result<T, E> {\n     pub fn unwrap_err(self) -> E {\n         match self {\n             Ok(t) =>\n-                panic!(\"called `Result::unwrap_err()` on an `Ok` value: {:?}\", t),\n+                panic!(\"called `Result::unwrap_err()` on an `Ok` value: {}\", t),\n             Err(e) => e\n         }\n     }"}, {"sha": "6bb9ddf750b3cab67f5b34a570da32666654fc49", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -20,8 +20,10 @@ use self::Searcher::{Naive, TwoWay, TwoWayLong};\n \n use cmp::{self, Eq};\n use default::Default;\n-use iter::range;\n+use error::Error;\n+use fmt;\n use iter::ExactSizeIterator;\n+use iter::range;\n use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n use marker::Sized;\n use mem;\n@@ -242,6 +244,30 @@ impl<'a> CharEq for &'a [char] {\n     }\n }\n \n+#[stable]\n+impl Error for Utf8Error {\n+    fn description(&self) -> &str {\n+        match *self {\n+            Utf8Error::TooShort => \"invalid utf-8: not enough bytes\",\n+            Utf8Error::InvalidByte(..) => \"invalid utf-8: corrupt contents\",\n+        }\n+    }\n+}\n+\n+#[stable]\n+impl fmt::Display for Utf8Error {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            Utf8Error::InvalidByte(n) => {\n+                write!(f, \"invalid utf-8: invalid byte at index {}\", n)\n+            }\n+            Utf8Error::TooShort => {\n+                write!(f, \"invalid utf-8: byte slice too short\")\n+            }\n+        }\n+    }\n+}\n+\n /*\n Section: Iterators\n */"}, {"sha": "6ec87203e00306c307ad8fab73c28ba4d9e23891", "filename": "src/libcoretest/finally.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffinally.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use core::finally::{try_finally, Finally};\n use std::thread::Thread;\n "}, {"sha": "eb278d2cc9044366f06f435fa8f813b602451c1d", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -26,11 +26,11 @@ fn test_format_int() {\n     assert!(format!(\"{}\", -1i16) == \"-1\");\n     assert!(format!(\"{}\", -1i32) == \"-1\");\n     assert!(format!(\"{}\", -1i64) == \"-1\");\n-    assert!(format!(\"{:?}\", 1i) == \"1i\");\n-    assert!(format!(\"{:?}\", 1i8) == \"1i8\");\n-    assert!(format!(\"{:?}\", 1i16) == \"1i16\");\n-    assert!(format!(\"{:?}\", 1i32) == \"1i32\");\n-    assert!(format!(\"{:?}\", 1i64) == \"1i64\");\n+    assert!(format!(\"{:?}\", 1i) == \"1\");\n+    assert!(format!(\"{:?}\", 1i8) == \"1\");\n+    assert!(format!(\"{:?}\", 1i16) == \"1\");\n+    assert!(format!(\"{:?}\", 1i32) == \"1\");\n+    assert!(format!(\"{:?}\", 1i64) == \"1\");\n     assert!(format!(\"{:b}\", 1i) == \"1\");\n     assert!(format!(\"{:b}\", 1i8) == \"1\");\n     assert!(format!(\"{:b}\", 1i16) == \"1\");\n@@ -57,11 +57,11 @@ fn test_format_int() {\n     assert!(format!(\"{}\", 1u16) == \"1\");\n     assert!(format!(\"{}\", 1u32) == \"1\");\n     assert!(format!(\"{}\", 1u64) == \"1\");\n-    assert!(format!(\"{:?}\", 1u) == \"1u\");\n-    assert!(format!(\"{:?}\", 1u8) == \"1u8\");\n-    assert!(format!(\"{:?}\", 1u16) == \"1u16\");\n-    assert!(format!(\"{:?}\", 1u32) == \"1u32\");\n-    assert!(format!(\"{:?}\", 1u64) == \"1u64\");\n+    assert!(format!(\"{:?}\", 1u) == \"1\");\n+    assert!(format!(\"{:?}\", 1u8) == \"1\");\n+    assert!(format!(\"{:?}\", 1u16) == \"1\");\n+    assert!(format!(\"{:?}\", 1u32) == \"1\");\n+    assert!(format!(\"{:?}\", 1u64) == \"1\");\n     assert!(format!(\"{:b}\", 1u) == \"1\");\n     assert!(format!(\"{:b}\", 1u8) == \"1\");\n     assert!(format!(\"{:b}\", 1u16) == \"1\");\n@@ -94,14 +94,14 @@ fn test_format_int() {\n #[test]\n fn test_format_int_zero() {\n     assert!(format!(\"{}\", 0i) == \"0\");\n-    assert!(format!(\"{:?}\", 0i) == \"0i\");\n+    assert!(format!(\"{:?}\", 0i) == \"0\");\n     assert!(format!(\"{:b}\", 0i) == \"0\");\n     assert!(format!(\"{:o}\", 0i) == \"0\");\n     assert!(format!(\"{:x}\", 0i) == \"0\");\n     assert!(format!(\"{:X}\", 0i) == \"0\");\n \n     assert!(format!(\"{}\", 0u) == \"0\");\n-    assert!(format!(\"{:?}\", 0u) == \"0u\");\n+    assert!(format!(\"{:?}\", 0u) == \"0\");\n     assert!(format!(\"{:b}\", 0u) == \"0\");\n     assert!(format!(\"{:o}\", 0u) == \"0\");\n     assert!(format!(\"{:x}\", 0u) == \"0\");"}, {"sha": "e0623bade5c0eb41ef4cfaba0bb47d31c0398ae9", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use core::cmp::PartialEq;\n-use core::fmt::Show;\n+use core::fmt::Debug;\n use core::num::{NumCast, cast};\n use core::ops::{Add, Sub, Mul, Div, Rem};\n use core::marker::Copy;\n@@ -37,7 +37,7 @@ pub fn test_num<T>(ten: T, two: T) where\n     T: PartialEq + NumCast\n      + Add<Output=T> + Sub<Output=T>\n      + Mul<Output=T> + Div<Output=T>\n-     + Rem<Output=T> + Show\n+     + Rem<Output=T> + Debug\n      + Copy\n {\n     assert_eq!(ten.add(two),  cast(12i).unwrap());"}, {"sha": "daccb709890e158e8a83944903d3a04ed5689c93", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -14,11 +14,11 @@ pub fn op2() -> Result<int, &'static str> { Err(\"sadface\") }\n #[test]\n pub fn test_and() {\n     assert_eq!(op1().and(Ok(667i)).unwrap(), 667);\n-    assert_eq!(op1().and(Err::<(), &'static str>(\"bad\")).unwrap_err(),\n+    assert_eq!(op1().and(Err::<i32, &'static str>(\"bad\")).unwrap_err(),\n                \"bad\");\n \n     assert_eq!(op2().and(Ok(667i)).unwrap_err(), \"sadface\");\n-    assert_eq!(op2().and(Err::<(),&'static str>(\"bad\")).unwrap_err(),\n+    assert_eq!(op2().and(Err::<i32,&'static str>(\"bad\")).unwrap_err(),\n                \"sadface\");\n }\n \n@@ -94,7 +94,7 @@ pub fn test_fmt_default() {\n     let err: Result<int, &'static str> = Err(\"Err\");\n \n     let s = format!(\"{:?}\", ok);\n-    assert_eq!(s, \"Ok(100i)\");\n+    assert_eq!(s, \"Ok(100)\");\n     let s = format!(\"{:?}\", err);\n     assert_eq!(s, \"Err(\\\"Err\\\")\");\n }"}, {"sha": "e524d8de0569342549b485b424786cf98aa013ba", "filename": "src/libcoretest/tuple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibcoretest%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ftuple.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -60,9 +60,9 @@ fn test_tuple_cmp() {\n #[test]\n fn test_show() {\n     let s = format!(\"{:?}\", (1i,));\n-    assert_eq!(s, \"(1i,)\");\n+    assert_eq!(s, \"(1,)\");\n     let s = format!(\"{:?}\", (1i, true));\n-    assert_eq!(s, \"(1i, true)\");\n+    assert_eq!(s, \"(1, true)\");\n     let s = format!(\"{:?}\", (1i, \"hi\", true));\n-    assert_eq!(s, \"(1i, \\\"hi\\\", true)\");\n+    assert_eq!(s, \"(1, \\\"hi\\\", true)\");\n }"}, {"sha": "70f2429282b9adc1f91ffb8768e872f0677ea6be", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -544,7 +544,7 @@ impl Fail {\n     }\n }\n \n-impl fmt::String for Fail {\n+impl fmt::Display for Fail {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ArgumentMissing(ref nm) => {"}, {"sha": "0ed32b7bf4f327647378dfe5ec4f5265b23c6b74", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -358,19 +358,19 @@ impl<'a> Id<'a> {\n     ///\n     /// Passing an invalid string (containing spaces, brackets,\n     /// quotes, ...) will return an empty `Err` value.\n-    pub fn new<Name: IntoCow<'a, String, str>>(name: Name) -> Result<Id<'a>, ()> {\n+    pub fn new<Name: IntoCow<'a, String, str>>(name: Name) -> Option<Id<'a>> {\n         let name = name.into_cow();\n         {\n             let mut chars = name.chars();\n             match chars.next() {\n                 Some(c) if is_letter_or_underscore(c) => { ; },\n-                _ => return Err(())\n+                _ => return None\n             }\n             if !chars.all(is_constituent) {\n-                return Err(());\n+                return None\n             }\n         }\n-        return Ok(Id{ name: name });\n+        return Some(Id{ name: name });\n \n         fn is_letter_or_underscore(c: char) -> bool {\n             in_range('a', c, 'z') || in_range('A', c, 'Z') || c == '_'\n@@ -874,17 +874,17 @@ r#\"digraph syntax_tree {\n     fn simple_id_construction() {\n         let id1 = Id::new(\"hello\");\n         match id1 {\n-            Ok(_) => {;},\n-            Err(_) => panic!(\"'hello' is not a valid value for id anymore\")\n+            Some(_) => {;},\n+            None => panic!(\"'hello' is not a valid value for id anymore\")\n         }\n     }\n \n     #[test]\n     fn badly_formatted_id() {\n         let id2 = Id::new(\"Weird { struct : ure } !!!\");\n         match id2 {\n-            Ok(_) => panic!(\"graphviz id suddenly allows spaces, brackets and stuff\"),\n-            Err(_) => {;}\n+            Some(_) => panic!(\"graphviz id suddenly allows spaces, brackets and stuff\"),\n+            None => {;}\n         }\n     }\n }"}, {"sha": "4e6437a5e761fd88d64d7cf4f57d54d3fc117057", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -124,7 +124,7 @@ impl<'a,T> FromIterator<T> for MaybeOwnedVector<'a,T> {\n     }\n }\n \n-impl<'a,T:fmt::Show> fmt::Show for MaybeOwnedVector<'a,T> {\n+impl<'a,T:fmt::Debug> fmt::Debug for MaybeOwnedVector<'a,T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.as_slice().fmt(f)\n     }"}, {"sha": "4da07c50c595e5dee2bc1c84b01d4490431392f9", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -240,21 +240,15 @@ struct DefaultLogger {\n }\n \n /// Wraps the log level with fmt implementations.\n-#[derive(Copy, PartialEq, PartialOrd)]\n+#[derive(Copy, PartialEq, PartialOrd, Show)]\n pub struct LogLevel(pub u32);\n \n-impl fmt::Show for LogLevel {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, fmt)\n-    }\n-}\n-\n-impl fmt::String for LogLevel {\n+impl fmt::Display for LogLevel {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let LogLevel(level) = *self;\n         match LOG_LEVEL_NAMES.get(level as uint - 1) {\n-            Some(ref name) => fmt::String::fmt(name, fmt),\n-            None => fmt::String::fmt(&level, fmt)\n+            Some(ref name) => fmt::Display::fmt(name, fmt),\n+            None => fmt::Display::fmt(&level, fmt)\n         }\n     }\n }"}, {"sha": "50fe56ff5c0733f2c8369d84ff999d70050e8a87", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -38,6 +38,7 @@ pub use self::EbmlEncoderTag::*;\n pub use self::Error::*;\n \n use std::str;\n+use std::fmt;\n \n pub mod io;\n \n@@ -113,6 +114,13 @@ pub enum Error {\n     IoError(std::io::IoError),\n     ApplicationError(String)\n }\n+\n+impl fmt::Display for Error {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // FIXME: this should be a more useful display form\n+        fmt::Debug::fmt(self, f)\n+    }\n+}\n // --------------------------------------\n \n pub mod reader {"}, {"sha": "c2186a0ec241ce30b2184e05227c96e5dda92a63", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -30,14 +30,15 @@ static MAX_REPEAT: uint = 1000;\n ///\n /// (Once an expression is compiled, it is not possible to produce an error\n /// via searching, splitting or replacing.)\n+#[derive(Show)]\n pub struct Error {\n     /// The *approximate* character index of where the error occurred.\n     pub pos: uint,\n     /// A message describing the error.\n     pub msg: String,\n }\n \n-impl fmt::Show for Error {\n+impl fmt::Display for Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Regex syntax error near position {}: {:?}\",\n                self.pos, self.msg)"}, {"sha": "a740e2043b96396ec64b0017ac7be03e73b90ef7", "filename": "src/libregex/re.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -90,10 +90,10 @@ impl Clone for ExNative {\n     }\n }\n \n-impl fmt::String for Regex {\n+impl fmt::Display for Regex {\n     /// Shows the original regular expression.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self.as_str(), f)\n+        fmt::Display::fmt(self.as_str(), f)\n     }\n }\n "}, {"sha": "aa803d9d8aea5b6971bebb648f61e7e250681114", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -57,7 +57,7 @@ struct Matrix<'a>(Vec<Vec<&'a Pat>>);\n /// ++++++++++++++++++++++++++\n /// + _     + [_, _, ..tail] +\n /// ++++++++++++++++++++++++++\n-impl<'a> fmt::Show for Matrix<'a> {\n+impl<'a> fmt::Debug for Matrix<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"\\n\"));\n "}, {"sha": "affeef330c4541cbafeae7e255fcb449fc3407b6", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -32,7 +32,7 @@\n \n #![allow(dead_code)] // still WIP\n \n-use std::fmt::{Formatter, Error, Show};\n+use std::fmt::{Formatter, Error, Debug};\n use std::uint;\n use std::collections::BitvSet;\n \n@@ -53,7 +53,7 @@ pub struct Edge<E> {\n     pub data: E,\n }\n \n-impl<E: Show> Show for Edge<E> {\n+impl<E: Debug> Debug for Edge<E> {\n     fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n         write!(f, \"Edge {{ next_edge: [{:?}, {:?}], source: {:?}, target: {:?}, data: {:?} }}\",\n                self.next_edge[0], self.next_edge[1], self.source,\n@@ -353,7 +353,7 @@ impl<E> Edge<E> {\n #[cfg(test)]\n mod test {\n     use middle::graph::*;\n-    use std::fmt::Show;\n+    use std::fmt::Debug;\n \n     type TestNode = Node<&'static str>;\n     type TestEdge = Edge<&'static str>;\n@@ -408,7 +408,7 @@ mod test {\n         });\n     }\n \n-    fn test_adjacent_edges<N:PartialEq+Show,E:PartialEq+Show>(graph: &Graph<N,E>,\n+    fn test_adjacent_edges<N:PartialEq+Debug,E:PartialEq+Debug>(graph: &Graph<N,E>,\n                                       start_index: NodeIndex,\n                                       start_data: N,\n                                       expected_incoming: &[(E,N)],"}, {"sha": "ed11cafdca9b5573015fe077ba260f729a68f3b6", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -17,7 +17,7 @@ use middle::ty::{self, Ty};\n use middle::infer::{uok, ures};\n use middle::infer::InferCtxt;\n use std::cell::RefCell;\n-use std::fmt::Show;\n+use std::fmt::Debug;\n use syntax::ast;\n use util::ppaux::Repr;\n use util::snapshot_vec as sv;\n@@ -32,7 +32,7 @@ use util::snapshot_vec as sv;\n /// (possibly not yet known) sort of integer.\n ///\n /// Implementations of this trait are at the end of this file.\n-pub trait UnifyKey<'tcx, V> : Clone + Show + PartialEq + Repr<'tcx> {\n+pub trait UnifyKey<'tcx, V> : Clone + Debug + PartialEq + Repr<'tcx> {\n     fn index(&self) -> uint;\n \n     fn from_index(u: uint) -> Self;"}, {"sha": "43989d0aadc8adf1322e8cc744f4cb7cd13958cf", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -198,13 +198,13 @@ pub fn check_crate(tcx: &ty::ctxt) {\n     tcx.sess.abort_if_errors();\n }\n \n-impl fmt::Show for LiveNode {\n+impl fmt::Debug for LiveNode {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"ln({})\", self.get())\n     }\n }\n \n-impl fmt::Show for Variable {\n+impl fmt::Debug for Variable {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"v({})\", self.get())\n     }"}, {"sha": "4aec30e11ea4acd3d80e9f2208e0c5367b8ea2da", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -597,7 +597,7 @@ fn early_bound_lifetime_names(generics: &ast::Generics) -> Vec<ast::Name> {\n     }\n }\n \n-impl<'a> fmt::Show for ScopeChain<'a> {\n+impl<'a> fmt::Debug for ScopeChain<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             EarlyScope(space, defs, _) => write!(fmt, \"EarlyScope({:?}, {:?})\", space, defs),"}, {"sha": "83bb9a351e400ed0c2d29250f9bec4834ff14881", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -238,7 +238,7 @@ pub struct SeparateVecsPerParamSpace<T> {\n     pub fns: Vec<T>,\n }\n \n-impl<T:fmt::Show> fmt::Show for VecPerParamSpace<T> {\n+impl<T: fmt::Debug> fmt::Debug for VecPerParamSpace<T> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"VecPerParamSpace {{\"));\n         for space in ParamSpace::all().iter() {"}, {"sha": "7ccb5e6e7116022f811c8546b104de064399afac", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -189,7 +189,7 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                         ty::Predicate::Equate(ref predicate) => {\n                             let predicate = infcx.resolve_type_vars_if_possible(predicate);\n                             let err = infcx.equality_predicate(obligation.cause.span,\n-                                                               &predicate).unwrap_err();\n+                                                               &predicate).err().unwrap();\n                             span_err!(infcx.tcx.sess, obligation.cause.span, E0278,\n                                     \"the requirement `{}` is not satisfied (`{}`)\",\n                                     predicate.user_string(infcx.tcx),\n@@ -199,7 +199,7 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                         ty::Predicate::RegionOutlives(ref predicate) => {\n                             let predicate = infcx.resolve_type_vars_if_possible(predicate);\n                             let err = infcx.region_outlives_predicate(obligation.cause.span,\n-                                                                      &predicate).unwrap_err();\n+                                                                      &predicate).err().unwrap();\n                             span_err!(infcx.tcx.sess, obligation.cause.span, E0279,\n                                     \"the requirement `{}` is not satisfied (`{}`)\",\n                                     predicate.user_string(infcx.tcx),"}, {"sha": "bdf9b16f139602346c2d3b88d34d2009ff0733fd", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -236,13 +236,13 @@ pub fn fresh_substs_for_impl<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     infcx.fresh_substs_for_generics(span, &impl_generics)\n }\n \n-impl<'tcx, N> fmt::Show for VtableImplData<'tcx, N> {\n+impl<'tcx, N> fmt::Debug for VtableImplData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"VtableImpl({:?})\", self.impl_def_id)\n     }\n }\n \n-impl<'tcx> fmt::Show for super::VtableObjectData<'tcx> {\n+impl<'tcx> fmt::Debug for super::VtableObjectData<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"VtableObject(...)\")\n     }\n@@ -449,7 +449,7 @@ impl<'tcx> Repr<'tcx> for super::FulfillmentErrorCode<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Show for super::FulfillmentErrorCode<'tcx> {\n+impl<'tcx> fmt::Debug for super::FulfillmentErrorCode<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             super::CodeSelectionError(ref e) => write!(f, \"{:?}\", e),\n@@ -465,7 +465,7 @@ impl<'tcx> Repr<'tcx> for super::MismatchedProjectionTypes<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Show for super::MismatchedProjectionTypes<'tcx> {\n+impl<'tcx> fmt::Debug for super::MismatchedProjectionTypes<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"MismatchedProjectionTypes(..)\")\n     }"}, {"sha": "83bbdf14e4a74e4029145df21ded019da80afe00", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -925,7 +925,7 @@ pub struct TyS<'tcx> {\n     region_depth: u32,\n }\n \n-impl fmt::Show for TypeFlags {\n+impl fmt::Debug for TypeFlags {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.bits)\n     }\n@@ -1689,37 +1689,37 @@ impl cmp::PartialEq for InferRegion {\n     }\n }\n \n-impl fmt::Show for TyVid {\n+impl fmt::Debug for TyVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result{\n         write!(f, \"_#{}t\", self.index)\n     }\n }\n \n-impl fmt::Show for IntVid {\n+impl fmt::Debug for IntVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"_#{}i\", self.index)\n     }\n }\n \n-impl fmt::Show for FloatVid {\n+impl fmt::Debug for FloatVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"_#{}f\", self.index)\n     }\n }\n \n-impl fmt::Show for RegionVid {\n+impl fmt::Debug for RegionVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"'_#{}r\", self.index)\n     }\n }\n \n-impl<'tcx> fmt::Show for FnSig<'tcx> {\n+impl<'tcx> fmt::Debug for FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"({:?}; variadic: {})->{:?}\", self.inputs, self.variadic, self.output)\n     }\n }\n \n-impl fmt::Show for InferTy {\n+impl fmt::Debug for InferTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             TyVar(ref v) => v.fmt(f),\n@@ -1731,7 +1731,7 @@ impl fmt::Show for InferTy {\n     }\n }\n \n-impl fmt::Show for IntVarValue {\n+impl fmt::Debug for IntVarValue {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             IntType(ref v) => v.fmt(f),\n@@ -3305,7 +3305,7 @@ impl ops::Sub for TypeContents {\n     }\n }\n \n-impl fmt::Show for TypeContents {\n+impl fmt::Debug for TypeContents {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"TypeContents({:b})\", self.bits)\n     }"}, {"sha": "a2bba313cca87331810027506a364395f18998ba", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -249,7 +249,7 @@ pub enum EntryFnType {\n     EntryNone,\n }\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Show)]\n pub enum CrateType {\n     CrateTypeExecutable,\n     CrateTypeDylib,\n@@ -1069,7 +1069,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n     return Ok(crate_types);\n }\n \n-impl fmt::Show for CrateType {\n+impl fmt::Display for CrateType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             CrateTypeExecutable => \"bin\".fmt(f),"}, {"sha": "8915d55e2063e7b5fa7ce1c4ffee26bfaedbff3e", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -12,7 +12,7 @@\n \n use std::cell::{RefCell, Cell};\n use std::collections::HashMap;\n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::hash::{Hash, Hasher};\n use std::iter::repeat;\n use std::time::Duration;\n@@ -58,7 +58,7 @@ pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where\n }\n \n pub fn indent<R, F>(op: F) -> R where\n-    R: Show,\n+    R: Debug,\n     F: FnOnce() -> R,\n {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`"}, {"sha": "fa754b4a3018cda0fb8fa671529365c1c8ebdd57", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -59,7 +59,7 @@ fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,\n     let mut cmd = Command::new(ar);\n \n     cmd.arg(args).args(paths);\n-    debug!(\"{}\", cmd);\n+    debug!(\"{:?}\", cmd);\n \n     match cwd {\n         Some(p) => {\n@@ -73,9 +73,7 @@ fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,\n         Ok(prog) => {\n             let o = prog.wait_with_output().unwrap();\n             if !o.status.success() {\n-                handler.err(&format!(\"{} failed with: {}\",\n-                                 cmd,\n-                                 o.status)[]);\n+                handler.err(&format!(\"{:?} failed with: {}\", cmd, o.status)[]);\n                 handler.note(&format!(\"stdout ---\\n{}\",\n                                   str::from_utf8(&o.output[]).unwrap())[]);\n                 handler.note(&format!(\"stderr ---\\n{}\","}, {"sha": "77ee59dc2baf368333abb29cb7c3f945facbd7c2", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -52,7 +52,7 @@ use std::iter::range_step;\n use syntax::ast;\n use syntax::visit;\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, PartialEq, Show)]\n pub struct Svh {\n     hash: String,\n }\n@@ -117,13 +117,7 @@ impl Svh {\n     }\n }\n \n-impl fmt::Show for Svh {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Svh {{ {} }}\", self.as_str())\n-    }\n-}\n-\n-impl fmt::String for Svh {\n+impl fmt::Display for Svh {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(self.as_str())\n     }"}, {"sha": "b1cc3a651200c427592334bd2fe3302ac000637d", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -491,7 +491,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n         if let ast::ExprAddrOf(mutbl, ref base) = ex.node {\n             let param_env = ty::empty_parameter_environment(self.bccx.tcx);\n             let mc = mc::MemCategorizationContext::new(&param_env);\n-            let base_cmt = mc.cat_expr(&**base).unwrap();\n+            let base_cmt = mc.cat_expr(&**base).ok().unwrap();\n             let borrow_kind = ty::BorrowKind::from_mutbl(mutbl);\n             // Check that we don't allow borrows of unsafe static items.\n             if check_aliasability(self.bccx, ex.span, euv::AddrOf,"}, {"sha": "cb184b6ab718adb2847a050589c09426f1d06f07", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -540,7 +540,7 @@ impl Module {\n     }\n }\n \n-impl fmt::Show for Module {\n+impl fmt::Debug for Module {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?}, kind: {:?}, {}\",\n                self.def_id,"}, {"sha": "8b28ee7cb57be4a16574a088697cce0c36ce5545", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -779,22 +779,22 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     }\n \n     if sess.opts.debugging_opts.print_link_args {\n-        println!(\"{}\", &cmd);\n+        println!(\"{:?}\", &cmd);\n     }\n \n     // May have not found libraries in the right formats.\n     sess.abort_if_errors();\n \n     // Invoke the system linker\n-    debug!(\"{}\", &cmd);\n+    debug!(\"{:?}\", &cmd);\n     let prog = time(sess.time_passes(), \"running linker\", (), |()| cmd.output());\n     match prog {\n         Ok(prog) => {\n             if !prog.status.success() {\n                 sess.err(&format!(\"linking with `{}` failed: {}\",\n                                  pname,\n                                  prog.status)[]);\n-                sess.note(&format!(\"{}\", &cmd)[]);\n+                sess.note(&format!(\"{:?}\", &cmd)[]);\n                 let mut output = prog.error.clone();\n                 output.push_all(&prog.output[]);\n                 sess.note(str::from_utf8(&output[]).unwrap());"}, {"sha": "b07c2060e692f043bff622efb6dc8f93dc3dc16e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -716,7 +716,7 @@ pub fn run_passes(sess: &Session,\n         cmd.args(&sess.target.target.options.post_link_args[]);\n \n         if sess.opts.debugging_opts.print_link_args {\n-            println!(\"{}\", &cmd);\n+            println!(\"{:?}\", &cmd);\n         }\n \n         cmd.stdin(::std::io::process::Ignored)\n@@ -725,7 +725,7 @@ pub fn run_passes(sess: &Session,\n         match cmd.status() {\n             Ok(status) => {\n                 if !status.success() {\n-                    sess.err(&format!(\"linking of {} with `{}` failed\",\n+                    sess.err(&format!(\"linking of {} with `{:?}` failed\",\n                                      output_path.display(), cmd)[]);\n                     sess.abort_if_errors();\n                 }\n@@ -953,15 +953,15 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n \n     cmd.arg(\"-c\").arg(\"-o\").arg(outputs.path(config::OutputTypeObject))\n                            .arg(outputs.temp_path(config::OutputTypeAssembly));\n-    debug!(\"{}\", &cmd);\n+    debug!(\"{:?}\", &cmd);\n \n     match cmd.output() {\n         Ok(prog) => {\n             if !prog.status.success() {\n                 sess.err(&format!(\"linking with `{}` failed: {}\",\n                                  pname,\n                                  prog.status)[]);\n-                sess.note(&format!(\"{}\", &cmd)[]);\n+                sess.note(&format!(\"{:?}\", &cmd)[]);\n                 let mut note = prog.error.clone();\n                 note.push_all(&prog.output[]);\n                 sess.note(str::from_utf8(&note[]).unwrap());"}, {"sha": "de2a69226bd4ff0cec8545063b48ce2ab383469b", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -65,7 +65,7 @@ pub enum CleanupScopeKind<'blk, 'tcx: 'blk> {\n     LoopScopeKind(ast::NodeId, [Block<'blk, 'tcx>; EXIT_MAX])\n }\n \n-impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n+impl<'blk, 'tcx: 'blk> fmt::Debug for CleanupScopeKind<'blk, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             CustomScopeKind => write!(f, \"CustomScopeKind\"),"}, {"sha": "cba12babb9b105aa674f179c3f139f7528f3673d", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -481,7 +481,7 @@ impl<'tcx> Datum<'tcx, Lvalue> {\n }\n \n /// Generic methods applicable to any sort of datum.\n-impl<'tcx, K: KindOps + fmt::Show> Datum<'tcx, K> {\n+impl<'tcx, K: KindOps + fmt::Debug> Datum<'tcx, K> {\n     pub fn new(val: ValueRef, ty: Ty<'tcx>, kind: K) -> Datum<'tcx, K> {\n         Datum { val: val, ty: ty, kind: kind }\n     }\n@@ -591,7 +591,7 @@ impl<'blk, 'tcx, K> DatumBlock<'blk, 'tcx, K> {\n     }\n }\n \n-impl<'blk, 'tcx, K: KindOps + fmt::Show> DatumBlock<'blk, 'tcx, K> {\n+impl<'blk, 'tcx, K: KindOps + fmt::Debug> DatumBlock<'blk, 'tcx, K> {\n     pub fn to_expr_datumblock(self) -> DatumBlock<'blk, 'tcx, Expr> {\n         DatumBlock::new(self.bcx, self.datum.to_expr_datum())\n     }"}, {"sha": "5c07fcb3688de12d3d3a51d3bab5728690db32dd", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -240,7 +240,7 @@ enum VarianceTerm<'a> {\n     InferredTerm(InferredIndex),\n }\n \n-impl<'a> fmt::Show for VarianceTerm<'a> {\n+impl<'a> fmt::Debug for VarianceTerm<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ConstantTerm(c1) => write!(f, \"{:?}\", c1),"}, {"sha": "c2b18962192772fd06eeb8c6410a05d22381523b", "filename": "src/librustdoc/html/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fescape.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n /// string when passed to a format string.\n pub struct Escape<'a>(pub &'a str);\n \n-impl<'a> fmt::String for Escape<'a> {\n+impl<'a> fmt::Display for Escape<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         // Because the internet is always right, turns out there's not that many\n         // characters to escape: http://stackoverflow.com/questions/7381974"}, {"sha": "bc0f77d1957f075322158f4654324345c6b009f5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -66,7 +66,7 @@ impl UnsafetySpace {\n     }\n }\n \n-impl<'a, T: fmt::String> fmt::String for CommaSep<'a, T> {\n+impl<'a, T: fmt::Display> fmt::Display for CommaSep<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, item) in self.0.iter().enumerate() {\n             if i != 0 { try!(write!(f, \", \")); }\n@@ -76,7 +76,7 @@ impl<'a, T: fmt::String> fmt::String for CommaSep<'a, T> {\n     }\n }\n \n-impl<'a> fmt::String for TyParamBounds<'a> {\n+impl<'a> fmt::Display for TyParamBounds<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let &TyParamBounds(bounds) = self;\n         for (i, bound) in bounds.iter().enumerate() {\n@@ -89,7 +89,7 @@ impl<'a> fmt::String for TyParamBounds<'a> {\n     }\n }\n \n-impl fmt::String for clean::Generics {\n+impl fmt::Display for clean::Generics {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.lifetimes.len() == 0 && self.type_params.len() == 0 { return Ok(()) }\n         try!(f.write_str(\"&lt;\"));\n@@ -126,7 +126,7 @@ impl fmt::String for clean::Generics {\n     }\n }\n \n-impl<'a> fmt::String for WhereClause<'a> {\n+impl<'a> fmt::Display for WhereClause<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let &WhereClause(gens) = self;\n         if gens.where_predicates.len() == 0 {\n@@ -163,14 +163,14 @@ impl<'a> fmt::String for WhereClause<'a> {\n     }\n }\n \n-impl fmt::String for clean::Lifetime {\n+impl fmt::Display for clean::Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(f.write_str(self.get_ref()));\n         Ok(())\n     }\n }\n \n-impl fmt::String for clean::PolyTrait {\n+impl fmt::Display for clean::PolyTrait {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.lifetimes.len() > 0 {\n             try!(f.write_str(\"for&lt;\"));\n@@ -186,7 +186,7 @@ impl fmt::String for clean::PolyTrait {\n     }\n }\n \n-impl fmt::String for clean::TyParamBound {\n+impl fmt::Display for clean::TyParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::RegionBound(ref lt) => {\n@@ -203,7 +203,7 @@ impl fmt::String for clean::TyParamBound {\n     }\n }\n \n-impl fmt::String for clean::PathParameters {\n+impl fmt::Display for clean::PathParameters {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::PathParameters::AngleBracketed {\n@@ -257,14 +257,14 @@ impl fmt::String for clean::PathParameters {\n     }\n }\n \n-impl fmt::String for clean::PathSegment {\n+impl fmt::Display for clean::PathSegment {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(f.write_str(self.name.as_slice()));\n         write!(f, \"{}\", self.params)\n     }\n }\n \n-impl fmt::String for clean::Path {\n+impl fmt::Display for clean::Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.global {\n             try!(f.write_str(\"::\"))\n@@ -450,7 +450,7 @@ fn tybounds(w: &mut fmt::Formatter,\n     }\n }\n \n-impl fmt::String for clean::Type {\n+impl fmt::Display for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::TyParamBinder(id) => {\n@@ -539,7 +539,7 @@ impl fmt::String for clean::Type {\n     }\n }\n \n-impl fmt::String for clean::Arguments {\n+impl fmt::Display for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {\n             if i > 0 { try!(write!(f, \", \")); }\n@@ -552,7 +552,7 @@ impl fmt::String for clean::Arguments {\n     }\n }\n \n-impl fmt::String for clean::FunctionRetTy {\n+impl fmt::Display for clean::FunctionRetTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::Return(clean::Tuple(ref tys)) if tys.is_empty() => Ok(()),\n@@ -563,13 +563,13 @@ impl fmt::String for clean::FunctionRetTy {\n     }\n }\n \n-impl fmt::String for clean::FnDecl {\n+impl fmt::Display for clean::FnDecl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"({args}){arrow}\", args = self.inputs, arrow = self.output)\n     }\n }\n \n-impl<'a> fmt::String for Method<'a> {\n+impl<'a> fmt::Display for Method<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Method(selfty, d) = *self;\n         let mut args = String::new();\n@@ -599,7 +599,7 @@ impl<'a> fmt::String for Method<'a> {\n     }\n }\n \n-impl fmt::String for VisSpace {\n+impl fmt::Display for VisSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n             Some(ast::Public) => write!(f, \"pub \"),\n@@ -608,7 +608,7 @@ impl fmt::String for VisSpace {\n     }\n }\n \n-impl fmt::String for UnsafetySpace {\n+impl fmt::Display for UnsafetySpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n             ast::Unsafety::Unsafe => write!(f, \"unsafe \"),\n@@ -617,7 +617,7 @@ impl fmt::String for UnsafetySpace {\n     }\n }\n \n-impl fmt::String for clean::ViewPath {\n+impl fmt::Display for clean::ViewPath {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::SimpleImport(ref name, ref src) => {\n@@ -644,7 +644,7 @@ impl fmt::String for clean::ViewPath {\n     }\n }\n \n-impl fmt::String for clean::ImportSource {\n+impl fmt::Display for clean::ImportSource {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.did {\n             Some(did) => resolved_path(f, did, &self.path, true),\n@@ -661,7 +661,7 @@ impl fmt::String for clean::ImportSource {\n     }\n }\n \n-impl fmt::String for clean::ViewListIdent {\n+impl fmt::Display for clean::ViewListIdent {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.source {\n             Some(did) => {\n@@ -683,13 +683,13 @@ impl fmt::String for clean::ViewListIdent {\n     }\n }\n \n-impl fmt::String for clean::TypeBinding {\n+impl fmt::Display for clean::TypeBinding {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}={}\", self.name, self.ty)\n     }\n }\n \n-impl fmt::String for MutableSpace {\n+impl fmt::Display for MutableSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             MutableSpace(clean::Immutable) => Ok(()),\n@@ -698,7 +698,7 @@ impl fmt::String for MutableSpace {\n     }\n }\n \n-impl fmt::String for RawMutableSpace {\n+impl fmt::Display for RawMutableSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             RawMutableSpace(clean::Immutable) => write!(f, \"const \"),\n@@ -707,7 +707,7 @@ impl fmt::String for RawMutableSpace {\n     }\n }\n \n-impl<'a> fmt::String for Stability<'a> {\n+impl<'a> fmt::Display for Stability<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Stability(stab) = *self;\n         match *stab {\n@@ -721,7 +721,7 @@ impl<'a> fmt::String for Stability<'a> {\n     }\n }\n \n-impl<'a> fmt::String for ConciseStability<'a> {\n+impl<'a> fmt::Display for ConciseStability<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let ConciseStability(stab) = *self;\n         match *stab {\n@@ -738,7 +738,7 @@ impl<'a> fmt::String for ConciseStability<'a> {\n     }\n }\n \n-impl fmt::String for ModuleSummary {\n+impl fmt::Display for ModuleSummary {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fn fmt_inner<'a>(f: &mut fmt::Formatter,\n                          context: &mut Vec<&'a str>,"}, {"sha": "fbc8ae2c0b417abe4151dbe12ef790a537c36d4d", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -103,7 +103,7 @@ impl ItemType {\n     }\n }\n \n-impl fmt::String for ItemType {\n+impl fmt::Display for ItemType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.to_static_str().fmt(f)\n     }"}, {"sha": "e3bd2b4e27f0074576fdc922561ddea25fa212e4", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -30,7 +30,7 @@ pub struct Page<'a> {\n     pub keywords: &'a str\n }\n \n-pub fn render<T: fmt::String, S: fmt::String>(\n+pub fn render<T: fmt::Display, S: fmt::Display>(\n     dst: &mut io::Writer, layout: &Layout, page: &Page, sidebar: &S, t: &T)\n     -> io::IoResult<()>\n {"}, {"sha": "4bdc2a164822b13ab74f8af92d7144db95ed8694", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -426,7 +426,7 @@ pub fn reset_headers() {\n     USED_HEADER_MAP.with(|s| s.borrow_mut().clear());\n }\n \n-impl<'a> fmt::String for Markdown<'a> {\n+impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Markdown(md) = *self;\n         // This is actually common enough to special-case\n@@ -435,7 +435,7 @@ impl<'a> fmt::String for Markdown<'a> {\n     }\n }\n \n-impl<'a> fmt::String for MarkdownWithToc<'a> {\n+impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let MarkdownWithToc(md) = *self;\n         render(fmt, md.as_slice(), true)"}, {"sha": "7fff4c1c99aa263fff86ad3a4ca3f95acd31ff9e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -1351,7 +1351,7 @@ impl<'a> Item<'a> {\n }\n \n \n-impl<'a> fmt::String for Item<'a> {\n+impl<'a> fmt::Display for Item<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         // Write the breadcrumb trail header for the top\n         try!(write!(fmt, \"\\n<h1 class='fqn'><span class='in-band'>\"));\n@@ -1626,7 +1626,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n struct Initializer<'a>(&'a str);\n \n-impl<'a> fmt::String for Initializer<'a> {\n+impl<'a> fmt::Display for Initializer<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Initializer(s) = *self;\n         if s.len() == 0 { return Ok(()); }\n@@ -2192,7 +2192,7 @@ fn item_typedef(w: &mut fmt::Formatter, it: &clean::Item,\n     document(w, it)\n }\n \n-impl<'a> fmt::String for Sidebar<'a> {\n+impl<'a> fmt::Display for Sidebar<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let cx = self.cx;\n         let it = self.item;\n@@ -2247,7 +2247,7 @@ impl<'a> fmt::String for Sidebar<'a> {\n     }\n }\n \n-impl<'a> fmt::String for Source<'a> {\n+impl<'a> fmt::Display for Source<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Source(s) = *self;\n         let lines = s.lines().count();"}, {"sha": "aca6e5bb10ed106c4dc202e2f047be78a83e5541", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -176,13 +176,13 @@ impl TocBuilder {\n     }\n }\n \n-impl fmt::Show for Toc {\n+impl fmt::Debug for Toc {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n-impl fmt::String for Toc {\n+impl fmt::Display for Toc {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"<ul>\"));\n         for entry in self.entries.iter() {"}, {"sha": "849a231fff22f0875b9bbf22615addbc4a6aa019", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -111,7 +111,7 @@ pub fn main() {\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).scoped(move || {\n         main_args(std::os::args().as_slice())\n     }).join();\n-    std::os::set_exit_status(res.map_err(|_| ()).unwrap());\n+    std::os::set_exit_status(res.ok().unwrap());\n }\n \n pub fn opts() -> Vec<getopts::OptGroup> {"}, {"sha": "c97d67ba1b9b4229bbe1cf642c8c1efcc1c83aab", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -177,15 +177,15 @@ pub trait FromBase64 {\n }\n \n /// Errors that can occur when decoding a base64 encoded string\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub enum FromBase64Error {\n     /// The input contained a character not part of the base64 format\n     InvalidBase64Byte(u8, uint),\n     /// The input had an invalid length\n     InvalidBase64Length,\n }\n \n-impl fmt::Show for FromBase64Error {\n+impl fmt::Display for FromBase64Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             InvalidBase64Byte(ch, idx) =>\n@@ -202,10 +202,6 @@ impl error::Error for FromBase64Error {\n             InvalidBase64Length => \"invalid length\",\n         }\n     }\n-\n-    fn detail(&self) -> Option<String> {\n-        Some(format!(\"{:?}\", self))\n-    }\n }\n \n impl FromBase64 for str {"}, {"sha": "e477f4418a52ffd8b49fecc66569f01292f440ff", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -61,15 +61,15 @@ pub trait FromHex {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),\n     /// The input had an invalid length\n     InvalidHexLength,\n }\n \n-impl fmt::Show for FromHexError {\n+impl fmt::Display for FromHexError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             InvalidHexCharacter(ch, idx) =>\n@@ -86,10 +86,6 @@ impl error::Error for FromHexError {\n             InvalidHexLength => \"invalid length\",\n         }\n     }\n-\n-    fn detail(&self) -> Option<String> {\n-        Some(format!(\"{:?}\", self))\n-    }\n }\n \n "}, {"sha": "5f4ba8ef9fcc743393f4f0ad3077dd19b50c0482", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -235,7 +235,7 @@ pub struct AsJson<'a, T: 'a> { inner: &'a T }\n pub struct AsPrettyJson<'a, T: 'a> { inner: &'a T, indent: Option<uint> }\n \n /// The errors that can arise while parsing a JSON stream.\n-#[derive(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n pub enum ErrorCode {\n     InvalidSyntax,\n     InvalidNumber,\n@@ -325,7 +325,7 @@ pub fn encode<T: ::Encodable>(object: &T) -> string::String {\n     s\n }\n \n-impl fmt::Show for ErrorCode {\n+impl fmt::Display for ErrorCode {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         error_str(*self).fmt(f)\n     }\n@@ -335,14 +335,33 @@ fn io_error_to_error(io: io::IoError) -> ParserError {\n     IoError(io.kind, io.desc)\n }\n \n+impl fmt::Display for ParserError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // FIXME this should be a nicer error\n+        fmt::Debug::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Display for DecoderError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // FIXME this should be a nicer error\n+        fmt::Debug::fmt(self, f)\n+    }\n+}\n+\n impl std::error::Error for DecoderError {\n     fn description(&self) -> &str { \"decoder error\" }\n-    fn detail(&self) -> Option<std::string::String> { Some(format!(\"{:?}\", self)) }\n+}\n+\n+impl fmt::Display for EncoderError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // FIXME this should be a nicer error\n+        fmt::Debug::fmt(self, f)\n+    }\n }\n \n impl std::error::Error for EncoderError {\n     fn description(&self) -> &str { \"encoder error\" }\n-    fn detail(&self) -> Option<std::string::String> { Some(format!(\"{:?}\", self)) }\n }\n \n impl std::error::FromError<fmt::Error> for EncoderError {\n@@ -2519,7 +2538,7 @@ impl<'a, 'b> fmt::Writer for FormatShim<'a, 'b> {\n     }\n }\n \n-impl fmt::String for Json {\n+impl fmt::Display for Json {\n     /// Encodes a json value into a string\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n@@ -2531,7 +2550,7 @@ impl fmt::String for Json {\n     }\n }\n \n-impl<'a> fmt::String for PrettyJson<'a> {\n+impl<'a> fmt::Display for PrettyJson<'a> {\n     /// Encodes a json value into a string\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n@@ -2543,7 +2562,7 @@ impl<'a> fmt::String for PrettyJson<'a> {\n     }\n }\n \n-impl<'a, T: Encodable> fmt::String for AsJson<'a, T> {\n+impl<'a, T: Encodable> fmt::Display for AsJson<'a, T> {\n     /// Encodes a json value into a string\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n@@ -2563,7 +2582,7 @@ impl<'a, T> AsPrettyJson<'a, T> {\n     }\n }\n \n-impl<'a, T: Encodable> fmt::String for AsPrettyJson<'a, T> {\n+impl<'a, T: Encodable> fmt::Display for AsPrettyJson<'a, T> {\n     /// Encodes a json value into a string\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n@@ -3920,7 +3939,7 @@ mod tests {\n         let mut mem_buf = Vec::new();\n         let mut encoder = Encoder::new(&mut mem_buf as &mut fmt::Writer);\n         let result = hm.encode(&mut encoder);\n-        match result.unwrap_err() {\n+        match result.err().unwrap() {\n             EncoderError::BadHashmapKey => (),\n             _ => panic!(\"expected bad hash map key\")\n         }"}, {"sha": "342d00a23c80116c2408ac1f3c4763e4f6584537", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -18,7 +18,7 @@ use borrow::BorrowFrom;\n use clone::Clone;\n use cmp::{max, Eq, PartialEq};\n use default::Default;\n-use fmt::{self, Show};\n+use fmt::{self, Debug};\n use hash::{self, Hash, SipHasher};\n use iter::{self, Iterator, ExactSizeIterator, IteratorExt, FromIterator, Extend, Map};\n use marker::Sized;\n@@ -270,7 +270,7 @@ fn test_resize_policy() {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// #[derive(Hash, Eq, PartialEq, Show)]\n+/// #[derive(Hash, Eq, PartialEq, Debug)]\n /// struct Viking {\n ///     name: String,\n ///     country: String,\n@@ -1216,8 +1216,8 @@ impl<K, V, S, H> Eq for HashMap<K, V, S>\n {}\n \n #[stable]\n-impl<K, V, S, H> Show for HashMap<K, V, S>\n-    where K: Eq + Hash<H> + Show, V: Show,\n+impl<K, V, S, H> Debug for HashMap<K, V, S>\n+    where K: Eq + Hash<H> + Debug, V: Debug,\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n@@ -1996,8 +1996,8 @@ mod test_map {\n \n         let map_str = format!(\"{:?}\", map);\n \n-        assert!(map_str == \"HashMap {1i: 2i, 3i: 4i}\" ||\n-                map_str == \"HashMap {3i: 4i, 1i: 2i}\");\n+        assert!(map_str == \"HashMap {1: 2, 3: 4}\" ||\n+                map_str == \"HashMap {3: 4, 1: 2}\");\n         assert_eq!(format!(\"{:?}\", empty), \"HashMap {}\");\n     }\n "}, {"sha": "29e247d96d2399982ce2bad0c294158e9452595a", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -15,7 +15,7 @@ use clone::Clone;\n use cmp::{Eq, PartialEq};\n use core::marker::Sized;\n use default::Default;\n-use fmt::Show;\n+use fmt::Debug;\n use fmt;\n use hash::{self, Hash};\n use iter::{Iterator, ExactSizeIterator, IteratorExt, FromIterator, Map, Chain, Extend};\n@@ -71,7 +71,7 @@ use super::state::HashState;\n ///\n /// ```\n /// use std::collections::HashSet;\n-/// #[derive(Hash, Eq, PartialEq, Show)]\n+/// #[derive(Hash, Eq, PartialEq, Debug)]\n /// struct Viking<'a> {\n ///     name: &'a str,\n ///     power: uint,\n@@ -596,8 +596,8 @@ impl<T, S, H> Eq for HashSet<T, S>\n {}\n \n #[stable]\n-impl<T, S, H> fmt::Show for HashSet<T, S>\n-    where T: Eq + Hash<H> + fmt::Show,\n+impl<T, S, H> fmt::Debug for HashSet<T, S>\n+    where T: Eq + Hash<H> + fmt::Debug,\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n@@ -1179,7 +1179,7 @@ mod test_set {\n \n         let set_str = format!(\"{:?}\", set);\n \n-        assert!(set_str == \"HashSet {1i, 2i}\" || set_str == \"HashSet {2i, 1i}\");\n+        assert!(set_str == \"HashSet {1, 2}\" || set_str == \"HashSet {2, 1}\");\n         assert_eq!(format!(\"{:?}\", empty), \"HashSet {}\");\n     }\n "}, {"sha": "b7f4b07059137840f47e9661397484c17fc2a5fd", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -119,7 +119,8 @@ impl Deref for CString {\n     }\n }\n \n-impl fmt::Show for CString {\n+#[stable]\n+impl fmt::Debug for CString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         String::from_utf8_lossy(self.as_bytes()).fmt(f)\n     }\n@@ -215,4 +216,10 @@ mod tests {\n             assert_eq!(s.as_bytes(), b\"\\0\");\n         }\n     }\n+\n+    #[test]\n+    fn formatted() {\n+        let s = CString::from_slice(b\"12\");\n+        assert_eq!(format!(\"{:?}\", s), \"\\\"12\\\"\");\n+    }\n }"}, {"sha": "f3b159cf819c9358508cc76ae39d3e36b9e23267", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -123,8 +123,8 @@\n //! This allows multiple actual types to be formatted via `{:x}` (like `i8` as\n //! well as `int`).  The current mapping of types to traits is:\n //!\n-//! * *nothing* \u21d2 `String`\n-//! * `?` \u21d2 `Show`\n+//! * *nothing* \u21d2 `Display`\n+//! * `?` \u21d2 `Debug`\n //! * `o` \u21d2 `Octal`\n //! * `x` \u21d2 `LowerHex`\n //! * `X` \u21d2 `UpperHex`\n@@ -137,15 +137,15 @@\n //! `std::fmt::Binary` trait can then be formatted with `{:b}`. Implementations\n //! are provided for these traits for a number of primitive types by the\n //! standard library as well. If no format is specified (as in `{}` or `{:6}`),\n-//! then the format trait used is the `String` trait.\n+//! then the format trait used is the `Display` trait.\n //!\n //! When implementing a format trait for your own type, you will have to\n //! implement a method of the signature:\n //!\n //! ```rust\n //! # use std::fmt;\n //! # struct Foo; // our custom type\n-//! # impl fmt::Show for Foo {\n+//! # impl fmt::Display for Foo {\n //! fn fmt(&self, f: &mut std::fmt::Formatter) -> fmt::Result {\n //! # write!(f, \"testing, testing\")\n //! # } }\n@@ -171,13 +171,13 @@\n //! use std::f64;\n //! use std::num::Float;\n //!\n-//! #[derive(Show)]\n+//! #[derive(Debug)]\n //! struct Vector2D {\n //!     x: int,\n //!     y: int,\n //! }\n //!\n-//! impl fmt::String for Vector2D {\n+//! impl fmt::Display for Vector2D {\n //!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n //!         // The `f` value implements the `Writer` trait, which is what the\n //!         // write! macro is expecting. Note that this formatting ignores the\n@@ -211,22 +211,22 @@\n //! }\n //! ```\n //!\n-//! #### fmt::String vs fmt::Show\n+//! #### fmt::Display vs fmt::Debug\n //!\n //! These two formatting traits have distinct purposes:\n //!\n-//! - `fmt::String` implementations assert that the type can be faithfully\n+//! - `fmt::Display` implementations assert that the type can be faithfully\n //!   represented as a UTF-8 string at all times. It is **not** expected that\n-//!   all types implement the `String` trait.\n-//! - `fmt::Show` implementations should be implemented for **all** public types.\n+//!   all types implement the `Display` trait.\n+//! - `fmt::Debug` implementations should be implemented for **all** public types.\n //!   Output will typically represent the internal state as faithfully as possible.\n-//!   The purpose of the `Show` trait is to facilitate debugging Rust code. In\n-//!   most cases, using `#[derive(Show)]` is sufficient and recommended.\n+//!   The purpose of the `Debug` trait is to facilitate debugging Rust code. In\n+//!   most cases, using `#[derive(Debug)]` is sufficient and recommended.\n //!\n //! Some examples of the output from both traits:\n //!\n //! ```\n-//! assert_eq!(format!(\"{} {:?}\", 3i32, 4i32), \"3 4i32\");\n+//! assert_eq!(format!(\"{} {:?}\", 3i32, 4i32), \"3 4\");\n //! assert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");\n //! assert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");\n //! ```\n@@ -409,6 +409,7 @@ use string;\n \n pub use core::fmt::{Formatter, Result, Writer, rt};\n pub use core::fmt::{Show, String, Octal, Binary};\n+pub use core::fmt::{Display, Debug};\n pub use core::fmt::{LowerHex, UpperHex, Pointer};\n pub use core::fmt::{LowerExp, UpperExp};\n pub use core::fmt::Error;"}, {"sha": "1d2bb62abe0cd1bcb8526ef332922777de97b20a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -52,7 +52,8 @@ pub struct BufferedReader<R> {\n     cap: uint,\n }\n \n-impl<R> fmt::Show for BufferedReader<R> where R: fmt::Show {\n+#[stable]\n+impl<R> fmt::Debug for BufferedReader<R> where R: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"BufferedReader {{ reader: {:?}, buffer: {}/{} }}\",\n                self.inner, self.cap - self.pos, self.buf.len())\n@@ -150,7 +151,8 @@ pub struct BufferedWriter<W> {\n     pos: uint\n }\n \n-impl<W> fmt::Show for BufferedWriter<W> where W: fmt::Show {\n+#[stable]\n+impl<W> fmt::Debug for BufferedWriter<W> where W: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"BufferedWriter {{ writer: {:?}, buffer: {}/{} }}\",\n                self.inner.as_ref().unwrap(), self.pos, self.buf.len())\n@@ -249,7 +251,8 @@ pub struct LineBufferedWriter<W> {\n     inner: BufferedWriter<W>,\n }\n \n-impl<W> fmt::Show for LineBufferedWriter<W> where W: fmt::Show {\n+#[stable]\n+impl<W> fmt::Debug for LineBufferedWriter<W> where W: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"LineBufferedWriter {{ writer: {:?}, buffer: {}/{} }}\",\n                self.inner.inner, self.inner.pos, self.inner.buf.len())\n@@ -339,7 +342,8 @@ pub struct BufferedStream<S> {\n     inner: BufferedReader<InternalBufferedWriter<S>>\n }\n \n-impl<S> fmt::Show for BufferedStream<S> where S: fmt::Show {\n+#[stable]\n+impl<S> fmt::Debug for BufferedStream<S> where S: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let reader = &self.inner;\n         let writer = &self.inner.inner.0;"}, {"sha": "cc36c5640d0a7c224436d24f3e61712201a118bd", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -156,7 +156,7 @@ impl File {\n                 })\n             }\n         }).update_err(\"couldn't open path as file\", |e| {\n-            format!(\"{}; path={:?}; mode={}; access={}\", e, path.display(),\n+            format!(\"{}; path={}; mode={}; access={}\", e, path.display(),\n                 mode_string(mode), access_string(access))\n         })\n     }\n@@ -211,7 +211,7 @@ impl File {\n     pub fn fsync(&mut self) -> IoResult<()> {\n         self.fd.fsync()\n             .update_err(\"couldn't fsync file\",\n-                        |e| format!(\"{}; path={:?}\", e, self.path.display()))\n+                        |e| format!(\"{}; path={}\", e, self.path.display()))\n     }\n \n     /// This function is similar to `fsync`, except that it may not synchronize\n@@ -221,7 +221,7 @@ impl File {\n     pub fn datasync(&mut self) -> IoResult<()> {\n         self.fd.datasync()\n             .update_err(\"couldn't datasync file\",\n-                        |e| format!(\"{}; path={:?}\", e, self.path.display()))\n+                        |e| format!(\"{}; path={}\", e, self.path.display()))\n     }\n \n     /// Either truncates or extends the underlying file, updating the size of\n@@ -235,7 +235,7 @@ impl File {\n     pub fn truncate(&mut self, size: i64) -> IoResult<()> {\n         self.fd.truncate(size)\n             .update_err(\"couldn't truncate file\", |e|\n-                format!(\"{}; path={:?}; size={:?}\", e, self.path.display(), size))\n+                format!(\"{}; path={}; size={}\", e, self.path.display(), size))\n     }\n \n     /// Returns true if the stream has reached the end of the file.\n@@ -255,7 +255,7 @@ impl File {\n     pub fn stat(&self) -> IoResult<FileStat> {\n         self.fd.fstat()\n             .update_err(\"couldn't fstat file\", |e|\n-                format!(\"{}; path={:?}\", e, self.path.display()))\n+                format!(\"{}; path={}\", e, self.path.display()))\n     }\n }\n \n@@ -283,7 +283,7 @@ impl File {\n pub fn unlink(path: &Path) -> IoResult<()> {\n     fs_imp::unlink(path)\n            .update_err(\"couldn't unlink path\", |e|\n-               format!(\"{}; path={:?}\", e, path.display()))\n+               format!(\"{}; path={}\", e, path.display()))\n }\n \n /// Given a path, query the file system to get information about a file,\n@@ -310,7 +310,7 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n pub fn stat(path: &Path) -> IoResult<FileStat> {\n     fs_imp::stat(path)\n            .update_err(\"couldn't stat path\", |e|\n-               format!(\"{}; path={:?}\", e, path.display()))\n+               format!(\"{}; path={}\", e, path.display()))\n }\n \n /// Perform the same operation as the `stat` function, except that this\n@@ -324,7 +324,7 @@ pub fn stat(path: &Path) -> IoResult<FileStat> {\n pub fn lstat(path: &Path) -> IoResult<FileStat> {\n     fs_imp::lstat(path)\n            .update_err(\"couldn't lstat path\", |e|\n-               format!(\"{}; path={:?}\", e, path.display()))\n+               format!(\"{}; path={}\", e, path.display()))\n }\n \n /// Rename a file or directory to a new name.\n@@ -424,14 +424,14 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n pub fn chmod(path: &Path, mode: io::FilePermission) -> IoResult<()> {\n     fs_imp::chmod(path, mode.bits() as uint)\n            .update_err(\"couldn't chmod path\", |e|\n-               format!(\"{}; path={:?}; mode={:?}\", e, path.display(), mode))\n+               format!(\"{}; path={}; mode={:?}\", e, path.display(), mode))\n }\n \n /// Change the user and group owners of a file at the specified path.\n pub fn chown(path: &Path, uid: int, gid: int) -> IoResult<()> {\n     fs_imp::chown(path, uid, gid)\n            .update_err(\"couldn't chown path\", |e|\n-               format!(\"{}; path={:?}; uid={}; gid={}\", e, path.display(), uid, gid))\n+               format!(\"{}; path={}; uid={}; gid={}\", e, path.display(), uid, gid))\n }\n \n /// Creates a new hard link on the filesystem. The `dst` path will be a\n@@ -460,7 +460,7 @@ pub fn symlink(src: &Path, dst: &Path) -> IoResult<()> {\n pub fn readlink(path: &Path) -> IoResult<Path> {\n     fs_imp::readlink(path)\n            .update_err(\"couldn't resolve symlink for path\", |e|\n-               format!(\"{}; path={:?}\", e, path.display()))\n+               format!(\"{}; path={}\", e, path.display()))\n }\n \n /// Create a new, empty directory at the provided path\n@@ -483,7 +483,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n     fs_imp::mkdir(path, mode.bits() as uint)\n            .update_err(\"couldn't create directory\", |e|\n-               format!(\"{}; path={:?}; mode={:?}\", e, path.display(), mode))\n+               format!(\"{}; path={}; mode={}\", e, path.display(), mode))\n }\n \n /// Remove an existing, empty directory\n@@ -505,7 +505,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n pub fn rmdir(path: &Path) -> IoResult<()> {\n     fs_imp::rmdir(path)\n            .update_err(\"couldn't remove directory\", |e|\n-               format!(\"{}; path={:?}\", e, path.display()))\n+               format!(\"{}; path={}\", e, path.display()))\n }\n \n /// Retrieve a vector containing all entries within a provided directory\n@@ -545,7 +545,7 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n pub fn readdir(path: &Path) -> IoResult<Vec<Path>> {\n     fs_imp::readdir(path)\n            .update_err(\"couldn't read directory\",\n-                       |e| format!(\"{}; path={:?}\", e, path.display()))\n+                       |e| format!(\"{}; path={}\", e, path.display()))\n }\n \n /// Returns an iterator that will recursively walk the directory structure\n@@ -555,7 +555,7 @@ pub fn readdir(path: &Path) -> IoResult<Vec<Path>> {\n pub fn walk_dir(path: &Path) -> IoResult<Directories> {\n     Ok(Directories {\n         stack: try!(readdir(path).update_err(\"couldn't walk directory\",\n-                                             |e| format!(\"{}; path={:?}\", e, path.display())))\n+                                             |e| format!(\"{}; path={}\", e, path.display())))\n     })\n }\n \n@@ -605,7 +605,7 @@ pub fn mkdir_recursive(path: &Path, mode: FilePermission) -> IoResult<()> {\n \n         let result = mkdir(&curpath, mode)\n             .update_err(\"couldn't recursively mkdir\",\n-                        |e| format!(\"{}; path={:?}\", e, path.display()));\n+                        |e| format!(\"{}; path={}\", e, path.display()));\n \n         match result {\n             Err(mkdir_err) => {\n@@ -632,7 +632,7 @@ pub fn rmdir_recursive(path: &Path) -> IoResult<()> {\n     rm_stack.push(path.clone());\n \n     fn rmdir_failed(err: &IoError, path: &Path) -> String {\n-        format!(\"rmdir_recursive failed; path={:?}; cause={}\",\n+        format!(\"rmdir_recursive failed; path={}; cause={}\",\n                 path.display(), err)\n     }\n \n@@ -692,14 +692,14 @@ pub fn rmdir_recursive(path: &Path) -> IoResult<()> {\n pub fn change_file_times(path: &Path, atime: u64, mtime: u64) -> IoResult<()> {\n     fs_imp::utime(path, atime, mtime)\n            .update_err(\"couldn't change_file_times\", |e|\n-               format!(\"{}; path={:?}\", e, path.display()))\n+               format!(\"{}; path={}\", e, path.display()))\n }\n \n impl Reader for File {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         fn update_err<T>(result: IoResult<T>, file: &File) -> IoResult<T> {\n             result.update_err(\"couldn't read file\",\n-                              |e| format!(\"{}; path={:?}\",\n+                              |e| format!(\"{}; path={}\",\n                                           e, file.path.display()))\n         }\n \n@@ -722,15 +722,15 @@ impl Writer for File {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         self.fd.write(buf)\n             .update_err(\"couldn't write to file\",\n-                        |e| format!(\"{}; path={:?}\", e, self.path.display()))\n+                        |e| format!(\"{}; path={}\", e, self.path.display()))\n     }\n }\n \n impl Seek for File {\n     fn tell(&self) -> IoResult<u64> {\n         self.fd.tell()\n             .update_err(\"couldn't retrieve file cursor (`tell`)\",\n-                        |e| format!(\"{}; path={:?}\", e, self.path.display()))\n+                        |e| format!(\"{}; path={}\", e, self.path.display()))\n     }\n \n     fn seek(&mut self, pos: i64, style: SeekStyle) -> IoResult<()> {\n@@ -743,7 +743,7 @@ impl Seek for File {\n             Err(e) => Err(e),\n         };\n         err.update_err(\"couldn't seek in file\",\n-                       |e| format!(\"{}; path={:?}\", e, self.path.display()))\n+                       |e| format!(\"{}; path={}\", e, self.path.display()))\n     }\n }\n \n@@ -906,7 +906,7 @@ mod test {\n         if cfg!(unix) {\n             error!(result, \"no such file or directory\");\n         }\n-        error!(result, format!(\"path={:?}; mode=open; access=read\", filename.display()));\n+        error!(result, format!(\"path={}; mode=open; access=read\", filename.display()));\n     }\n \n     #[test]\n@@ -920,7 +920,7 @@ mod test {\n         if cfg!(unix) {\n             error!(result, \"no such file or directory\");\n         }\n-        error!(result, format!(\"path={:?}\", filename.display()));\n+        error!(result, format!(\"path={}\", filename.display()));\n     }\n \n     #[test]\n@@ -1188,7 +1188,7 @@ mod test {\n         error!(result, \"couldn't recursively mkdir\");\n         error!(result, \"couldn't create directory\");\n         error!(result, \"mode=0700\");\n-        error!(result, format!(\"path={:?}\", file.display()));\n+        error!(result, format!(\"path={}\", file.display()));\n     }\n \n     #[test]"}, {"sha": "afa149f962f8379fad38e564af8bebe4cca3ea7a", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -432,8 +432,8 @@ mod test {\n             writer.write(&[]).unwrap();\n             assert_eq!(writer.tell(), Ok(8));\n \n-            assert_eq!(writer.write(&[8, 9]).unwrap_err().kind, io::ShortWrite(1));\n-            assert_eq!(writer.write(&[10]).unwrap_err().kind, io::EndOfFile);\n+            assert_eq!(writer.write(&[8, 9]).err().unwrap().kind, io::ShortWrite(1));\n+            assert_eq!(writer.write(&[10]).err().unwrap().kind, io::EndOfFile);\n         }\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n         assert_eq!(buf, b);"}, {"sha": "3ad1b5222cbba63158125f8b8b58f1e921f071cf", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -228,13 +228,12 @@ pub use self::FileAccess::*;\n pub use self::IoErrorKind::*;\n \n use char::CharExt;\n-use clone::Clone;\n use default::Default;\n-use error::{FromError, Error};\n+use error::Error;\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n-use marker::{Sized, Send};\n+use marker::Sized;\n use mem::transmute;\n use ops::FnOnce;\n use option::Option;\n@@ -340,7 +339,8 @@ impl IoError {\n     }\n }\n \n-impl fmt::String for IoError {\n+#[stable]\n+impl fmt::Display for IoError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             IoError { kind: OtherIoError, desc: \"unknown error\", detail: Some(ref detail) } =>\n@@ -354,19 +354,7 @@ impl fmt::String for IoError {\n }\n \n impl Error for IoError {\n-    fn description(&self) -> &str {\n-        self.desc\n-    }\n-\n-    fn detail(&self) -> Option<String> {\n-        self.detail.clone()\n-    }\n-}\n-\n-impl FromError<IoError> for Box<Error + Send> {\n-    fn from_error(err: IoError) -> Box<Error + Send> {\n-        box err\n-    }\n+    fn description(&self) -> &str { self.desc }\n }\n \n /// A list specifying general categories of I/O error.\n@@ -1779,6 +1767,7 @@ pub struct UnstableFileStat {\n bitflags! {\n     /// A set of permissions for a file or directory is represented by a set of\n     /// flags which are or'd together.\n+    #[derive(Show)]\n     flags FilePermission: u32 {\n         const USER_READ     = 0o400,\n         const USER_WRITE    = 0o200,\n@@ -1820,13 +1809,8 @@ impl Default for FilePermission {\n     fn default() -> FilePermission { FilePermission::empty() }\n }\n \n-impl fmt::Show for FilePermission {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::String for FilePermission {\n+#[stable]\n+impl fmt::Display for FilePermission {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:04o}\", self.bits)\n     }"}, {"sha": "e8e065533e5006e277590695bcd1cfe5709fe017", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -38,7 +38,8 @@ pub enum IpAddr {\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n }\n \n-impl fmt::String for IpAddr {\n+#[stable]\n+impl fmt::Display for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             Ipv4Addr(a, b, c, d) =>\n@@ -69,7 +70,8 @@ pub struct SocketAddr {\n     pub port: Port,\n }\n \n-impl fmt::String for SocketAddr {\n+#[stable]\n+impl fmt::Display for SocketAddr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.ip {\n             Ipv4Addr(..) => write!(f, \"{}:{}\", self.ip, self.port),"}, {"sha": "c2f52f5c8a3b45c637a3ab3145b93fda67300cfc", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -394,7 +394,7 @@ impl Command {\n     }\n }\n \n-impl fmt::String for Command {\n+impl fmt::Debug for Command {\n     /// Format the program and arguments of a Command for display. Any\n     /// non-utf8 data is lossily converted using the utf8 replacement\n     /// character.\n@@ -493,7 +493,7 @@ pub enum StdioContainer {\n \n /// Describes the result of a process after it has terminated.\n /// Note that Windows have no signals, so the result is usually ExitStatus.\n-#[derive(PartialEq, Eq, Clone, Copy)]\n+#[derive(PartialEq, Eq, Clone, Copy, Show)]\n pub enum ProcessExit {\n     /// Normal termination with an exit status.\n     ExitStatus(int),\n@@ -502,15 +502,8 @@ pub enum ProcessExit {\n     ExitSignal(int),\n }\n \n-impl fmt::Show for ProcessExit {\n-    /// Format a ProcessExit enum, to nicely present the information.\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n-\n-impl fmt::String for ProcessExit {\n+#[stable]\n+impl fmt::Display for ProcessExit {\n     /// Format a ProcessExit enum, to nicely present the information.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "9bfc15f14389fc77b7fdcd83397fe02320ff6aaf", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -168,6 +168,7 @@ pub use core::raw;\n pub use core::simd;\n pub use core::result;\n pub use core::option;\n+pub use core::error;\n \n #[cfg(not(test))] pub use alloc::boxed;\n pub use alloc::rc;\n@@ -228,7 +229,6 @@ pub mod thunk;\n \n /* Common traits */\n \n-pub mod error;\n pub mod num;\n \n /* Runtime and platform support */"}, {"sha": "9ced1a7e1301c70a7166f1754503923e65a879c3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -16,7 +16,7 @@\n #![stable]\n #![allow(missing_docs)]\n \n-#[cfg(test)] use fmt::Show;\n+#[cfg(test)] use fmt::Debug;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n \n use marker::Copy;\n@@ -322,7 +322,7 @@ pub fn test_num<T>(ten: T, two: T) where\n     T: PartialEq + NumCast\n      + Add<Output=T> + Sub<Output=T>\n      + Mul<Output=T> + Div<Output=T>\n-     + Rem<Output=T> + Show\n+     + Rem<Output=T> + Debug\n      + Copy\n {\n     assert_eq!(ten.add(two),  cast(12i).unwrap());"}, {"sha": "985a8cd32e29d88c478f6f5920d42fdd9fe2fb8f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -855,7 +855,7 @@ pub enum MapOption {\n impl Copy for MapOption {}\n \n /// Possible errors when creating a map.\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub enum MapError {\n     /// # The following are POSIX-specific\n     ///\n@@ -900,7 +900,8 @@ pub enum MapError {\n     ErrMapViewOfFile(uint)\n }\n \n-impl fmt::Show for MapError {\n+#[stable]\n+impl fmt::Display for MapError {\n     fn fmt(&self, out: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {\n             ErrFdNotAvail => \"fd not available for reading or writing\",\n@@ -934,13 +935,6 @@ impl fmt::Show for MapError {\n \n impl Error for MapError {\n     fn description(&self) -> &str { \"memory map error\" }\n-    fn detail(&self) -> Option<String> { Some(format!(\"{:?}\", self)) }\n-}\n-\n-impl FromError<MapError> for Box<Error + Send> {\n-    fn from_error(err: MapError) -> Box<Error + Send> {\n-        box err\n-    }\n }\n \n // Round up `from` to be divisible by `to`"}, {"sha": "06d930ce50a7973fe1a76370a0be7d726868dcff", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -823,13 +823,15 @@ pub struct Display<'a, P:'a> {\n     filename: bool\n }\n \n-impl<'a, P: GenericPath> fmt::Show for Display<'a, P> {\n+#[stable]\n+impl<'a, P: GenericPath> fmt::Debug for Display<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Debug::fmt(&self.as_cow(), f)\n     }\n }\n \n-impl<'a, P: GenericPath> fmt::String for Display<'a, P> {\n+#[stable]\n+impl<'a, P: GenericPath> fmt::Display for Display<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.as_cow().fmt(f)\n     }"}, {"sha": "100876271b38f6216e2447db3719ca8d8c316a9b", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -57,9 +57,10 @@ pub fn is_sep(c: char) -> bool {\n     c == SEP\n }\n \n-impl fmt::Show for Path {\n+#[stable]\n+impl fmt::Debug for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Show::fmt(&self.display(), f)\n+        fmt::Debug::fmt(&self.display(), f)\n     }\n }\n "}, {"sha": "bd5f84165778cd1fa69c7dcd0e9463912bedbbe1", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -85,9 +85,10 @@ pub struct Path {\n     sepidx: Option<uint> // index of the final separator in the non-prefix portion of repr\n }\n \n-impl fmt::Show for Path {\n+#[stable]\n+impl fmt::Debug for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Show::fmt(&self.display(), f)\n+        fmt::Debug::fmt(&self.display(), f)\n     }\n }\n "}, {"sha": "96b1636667ecca7ae2fb84ab987d4e9072fce200", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -384,21 +384,21 @@ impl<T> !Sync for SyncSender<T> {}\n /// A `send` operation can only fail if the receiving end of a channel is\n /// disconnected, implying that the data could never be received. The error\n /// contains the data being sent as a payload so it can be recovered.\n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, Show)]\n #[stable]\n pub struct SendError<T>(pub T);\n \n /// An error returned from the `recv` function on a `Receiver`.\n ///\n /// The `recv` operation can only fail if the sending half of a channel is\n /// disconnected, implying that no further messages will ever be received.\n-#[derive(PartialEq, Eq, Clone, Copy)]\n+#[derive(PartialEq, Eq, Clone, Copy, Show)]\n #[stable]\n pub struct RecvError;\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n /// return data when called.\n-#[derive(PartialEq, Clone, Copy)]\n+#[derive(PartialEq, Clone, Copy, Show)]\n #[stable]\n pub enum TryRecvError {\n     /// This channel is currently empty, but the sender(s) have not yet\n@@ -414,7 +414,7 @@ pub enum TryRecvError {\n \n /// This enumeration is the list of the possible error outcomes for the\n /// `SyncSender::try_send` method.\n-#[derive(PartialEq, Clone)]\n+#[derive(PartialEq, Clone, Show)]\n #[stable]\n pub enum TrySendError<T> {\n     /// The data could not be sent on the channel because it would require that\n@@ -963,13 +963,15 @@ impl<T: Send> Drop for Receiver<T> {\n     }\n }\n \n-impl<T> fmt::Show for SendError<T> {\n+#[stable]\n+impl<T> fmt::Display for SendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"sending on a closed channel\".fmt(f)\n     }\n }\n \n-impl<T> fmt::Show for TrySendError<T> {\n+#[stable]\n+impl<T> fmt::Display for TrySendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             TrySendError::Full(..) => {\n@@ -982,13 +984,15 @@ impl<T> fmt::Show for TrySendError<T> {\n     }\n }\n \n-impl fmt::Show for RecvError {\n+#[stable]\n+impl fmt::Display for RecvError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"receiving on a closed channel\".fmt(f)\n     }\n }\n \n-impl fmt::Show for TryRecvError {\n+#[stable]\n+impl fmt::Display for TryRecvError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             TryRecvError::Empty => {"}, {"sha": "c97fcf7cefb74a68fb1ef9069377f3b4b3509376", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -53,13 +53,15 @@ pub struct Guard {\n /// is held. The precise semantics for when a lock is poisoned is documented on\n /// each lock, but once a lock is poisoned then all future acquisitions will\n /// return this error.\n+#[derive(Show)]\n #[stable]\n pub struct PoisonError<T> {\n     guard: T,\n }\n \n /// An enumeration of possible errors which can occur while calling the\n /// `try_lock` method.\n+#[derive(Show)]\n #[stable]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another task failed while holding\n@@ -90,7 +92,8 @@ pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;\n #[stable]\n pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n \n-impl<T> fmt::Show for PoisonError<T> {\n+#[stable]\n+impl<T> fmt::Display for PoisonError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.description().fmt(f)\n     }\n@@ -130,7 +133,8 @@ impl<T> FromError<PoisonError<T>> for TryLockError<T> {\n     }\n }\n \n-impl<T> fmt::Show for TryLockError<T> {\n+#[stable]\n+impl<T> fmt::Display for TryLockError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.description().fmt(f)\n     }"}, {"sha": "1f181e1fa2af56bcd6b85e9825dfaa5c512872be", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -519,14 +519,14 @@ mod test {\n     fn test_unnamed_thread() {\n         Thread::scoped(move|| {\n             assert!(Thread::current().name().is_none());\n-        }).join().map_err(|_| ()).unwrap();\n+        }).join().ok().unwrap();\n     }\n \n     #[test]\n     fn test_named_thread() {\n         Builder::new().name(\"ada lovelace\".to_string()).scoped(move|| {\n             assert!(Thread::current().name().unwrap() == \"ada lovelace\".to_string());\n-        }).join().map_err(|_| ()).unwrap();\n+        }).join().ok().unwrap();\n     }\n \n     #[test]\n@@ -662,7 +662,7 @@ mod test {\n             Err(e) => {\n                 type T = &'static str;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.downcast::<T>().unwrap(), \"static string\");\n+                assert_eq!(*e.downcast::<T>().ok().unwrap(), \"static string\");\n             }\n             Ok(()) => panic!()\n         }\n@@ -676,7 +676,7 @@ mod test {\n             Err(e) => {\n                 type T = String;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.downcast::<T>().unwrap(), \"owned string\".to_string());\n+                assert_eq!(*e.downcast::<T>().ok().unwrap(), \"owned string\".to_string());\n             }\n             Ok(()) => panic!()\n         }\n@@ -690,9 +690,9 @@ mod test {\n             Err(e) => {\n                 type T = Box<Any + Send>;\n                 assert!(e.is::<T>());\n-                let any = e.downcast::<T>().unwrap();\n+                let any = e.downcast::<T>().ok().unwrap();\n                 assert!(any.is::<u16>());\n-                assert_eq!(*any.downcast::<u16>().unwrap(), 413u16);\n+                assert_eq!(*any.downcast::<u16>().ok().unwrap(), 413u16);\n             }\n             Ok(()) => panic!()\n         }"}, {"sha": "2d56a8bcddfb8f66ea3f899d752fd48bc9ba3343", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -334,7 +334,8 @@ impl Div<i32> for Duration {\n     }\n }\n \n-impl fmt::String for Duration {\n+#[stable]\n+impl fmt::Display for Duration {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // technically speaking, negative duration is not valid ISO 8601,\n         // but we need to print it anyway."}, {"sha": "5f593ac7081c1a91335290d471ca49cd206deee3", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, PartialEq, Eq, Show)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -26,7 +26,7 @@ pub enum Os {\n     OsDragonfly,\n }\n \n-#[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy)]\n+#[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Show)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)\n@@ -119,25 +119,13 @@ impl Abi {\n     }\n }\n \n-impl fmt::Show for Abi {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::String for Abi {\n+impl fmt::Display for Abi {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"\\\"{}\\\"\", self.name())\n     }\n }\n \n-impl fmt::Show for Os {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::String for Os {\n+impl fmt::Display for Os {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             OsLinux => \"linux\".fmt(f),"}, {"sha": "acc5c70ac3cd89483d6d05e79dd59d79fc4e7dac", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -100,28 +100,28 @@ impl Ident {\n     }\n }\n \n-impl fmt::Show for Ident {\n+impl fmt::Debug for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}#{}\", self.name, self.ctxt)\n     }\n }\n \n-impl fmt::String for Ident {\n+impl fmt::Display for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(&self.name, f)\n+        fmt::Display::fmt(&self.name, f)\n     }\n }\n \n-impl fmt::Show for Name {\n+impl fmt::Debug for Name {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Name(nm) = *self;\n         write!(f, \"{:?}({})\", token::get_name(*self).get(), nm)\n     }\n }\n \n-impl fmt::String for Name {\n+impl fmt::Display for Name {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(token::get_name(*self).get(), f)\n+        fmt::Display::fmt(token::get_name(*self).get(), f)\n     }\n }\n \n@@ -1100,13 +1100,13 @@ impl PartialEq for IntTy {\n     }\n }\n \n-impl fmt::Show for IntTy {\n+impl fmt::Debug for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n-impl fmt::String for IntTy {\n+impl fmt::Display for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::int_ty_to_string(*self, None))\n     }\n@@ -1155,13 +1155,13 @@ impl UintTy {\n     }\n }\n \n-impl fmt::Show for UintTy {\n+impl fmt::Debug for UintTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n-impl fmt::String for UintTy {\n+impl fmt::Display for UintTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::uint_ty_to_string(*self, None))\n     }\n@@ -1173,13 +1173,13 @@ pub enum FloatTy {\n     TyF64,\n }\n \n-impl fmt::Show for FloatTy {\n+impl fmt::Debug for FloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n-impl fmt::String for FloatTy {\n+impl fmt::Display for FloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::float_ty_to_string(*self))\n     }\n@@ -1222,24 +1222,15 @@ pub enum PrimTy {\n     TyChar\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy, Show)]\n pub enum Onceness {\n     Once,\n     Many\n }\n \n-impl fmt::Show for Onceness {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(match *self {\n-            Once => \"once\",\n-            Many => \"many\",\n-        }, f)\n-    }\n-}\n-\n-impl fmt::String for Onceness {\n+impl fmt::Display for Onceness {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(match *self {\n+        fmt::Display::fmt(match *self {\n             Once => \"once\",\n             Many => \"many\",\n         }, f)\n@@ -1358,9 +1349,9 @@ pub enum Unsafety {\n     Normal,\n }\n \n-impl fmt::String for Unsafety {\n+impl fmt::Display for Unsafety {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(match *self {\n+        fmt::Display::fmt(match *self {\n             Unsafety::Normal => \"normal\",\n             Unsafety::Unsafe => \"unsafe\",\n         }, f)\n@@ -1375,7 +1366,7 @@ pub enum ImplPolarity {\n     Negative,\n }\n \n-impl fmt::Show for ImplPolarity {\n+impl fmt::Debug for ImplPolarity {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ImplPolarity::Positive => \"positive\".fmt(f),"}, {"sha": "6dc7d93c47b4ca287797b6ca3274c57beb0d9c72", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -46,7 +46,7 @@ impl PathElem {\n     }\n }\n \n-impl fmt::String for PathElem {\n+impl fmt::Display for PathElem {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let slot = token::get_name(self.name());\n         write!(f, \"{}\", slot)"}, {"sha": "59471488af9ad8045530e86249fb60ff8c29ee3c", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -358,9 +358,9 @@ pub enum StabilityLevel {\n     Locked\n }\n \n-impl fmt::String for StabilityLevel {\n+impl fmt::Display for StabilityLevel {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Show::fmt(self, f)\n+        fmt::Debug::fmt(self, f)\n     }\n }\n "}, {"sha": "0c7f6befc4e3e1b884c5a95df1828e5f050c559b", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -239,9 +239,9 @@ pub enum Level {\n     Help,\n }\n \n-impl fmt::String for Level {\n+impl fmt::Display for Level {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        use std::fmt::String;\n+        use std::fmt::Display;\n \n         match *self {\n             Bug => \"error: internal compiler error\".fmt(f),"}, {"sha": "e52a2b513ce1f3582a793c50045767a2b07d7676", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -99,7 +99,9 @@ pub fn expand_meta_derive(cx: &mut ExtCtxt,\n \n                             \"Rand\" => expand!(rand::expand_deriving_rand),\n \n+                            // NOTE(stage0): remove \"Show\"\n                             \"Show\" => expand!(show::expand_deriving_show),\n+                            \"Debug\" => expand!(show::expand_deriving_show),\n \n                             \"Default\" => expand!(default::expand_deriving_default),\n "}, {"sha": "f5b5d4dda199c90ea1eeb4c014d5ab3ece96ac71", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -35,7 +35,7 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"fmt\", \"Show\")),\n+        path: Path::new(vec!(\"std\", \"fmt\", \"Debug\")),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -67,7 +67,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n         Struct(_) => substr.type_ident,\n         EnumMatching(_, v, _) => v.node.name,\n         EnumNonMatchingCollapsed(..) | StaticStruct(..) | StaticEnum(..) => {\n-            cx.span_bug(span, \"nonsensical .fields in `#[derive(Show)]`\")\n+            cx.span_bug(span, \"nonsensical .fields in `#[derive(Debug)]`\")\n         }\n     };\n "}, {"sha": "8ea9d6168ef4130d90faa68776e2f59cf67ddc6f", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -603,8 +603,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         let trait_ = match *ty {\n             Known(ref tyname) => {\n                 match &tyname[] {\n-                    \"\"  => \"String\",\n-                    \"?\" => \"Show\",\n+                    \"\"  => \"Display\",\n+                    \"?\" => \"Debug\",\n                     \"e\" => \"LowerExp\",\n                     \"E\" => \"UpperExp\",\n                     \"o\" => \"Octal\","}, {"sha": "872354024e93c319bec2e6da8b7444f9e9a6d99e", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -22,7 +22,7 @@ pub struct OwnedSlice<T> {\n     data: Box<[T]>\n }\n \n-impl<T:fmt::Show> fmt::Show for OwnedSlice<T> {\n+impl<T:fmt::Debug> fmt::Debug for OwnedSlice<T> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.data.fmt(fmt)\n     }"}, {"sha": "753e3a68d2ecd146aa12278569a33c92898aad1c", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -586,10 +586,10 @@ impl<'a> StringReader<'a> {\n     /// `\\x00` marker.\n     #[inline(never)]\n     fn scan_embedded_hygienic_ident(&mut self) -> ast::Ident {\n-        fn bump_expecting_char<'a,D:fmt::Show>(r: &mut StringReader<'a>,\n-                                               c: char,\n-                                               described_c: D,\n-                                               whence: &str) {\n+        fn bump_expecting_char<'a,D:fmt::Debug>(r: &mut StringReader<'a>,\n+                                                c: char,\n+                                                described_c: D,\n+                                                whence: &str) {\n             match r.curr {\n                 Some(r_c) if r_c == c => r.bump(),\n                 Some(r_c) => panic!(\"expected {:?}, hit {:?}, {}\", described_c, r_c, whence),"}, {"sha": "a129fd19d94054ae64dfa79b98bd790f78207b0d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -375,7 +375,7 @@ pub enum Nonterminal {\n     NtTT(P<ast::TokenTree>), // needs P'ed to break a circularity\n }\n \n-impl fmt::Show for Nonterminal {\n+impl fmt::Debug for Nonterminal {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             NtItem(..) => f.pad(\"NtItem(..)\"),\n@@ -651,15 +651,15 @@ impl BytesContainer for InternedString {\n     }\n }\n \n-impl fmt::Show for InternedString {\n+impl fmt::Debug for InternedString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self, f)\n+        fmt::Debug::fmt(&self.string[], f)\n     }\n }\n \n-impl fmt::String for InternedString {\n+impl fmt::Display for InternedString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", &self.string[])\n+        fmt::Display::fmt(&self.string[], f)\n     }\n }\n "}, {"sha": "01f3839b0390ef3a2293af2198bbac377c08201c", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -36,7 +36,7 @@\n //!   implementation changes (using a special thread-local heap, for example).\n //!   Moreover, a switch to, e.g. `P<'a, T>` would be easy and mostly automated.\n \n-use std::fmt::{self, Show};\n+use std::fmt::{self, Display, Debug};\n use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n use std::ptr;\n@@ -100,9 +100,14 @@ impl<T: PartialEq> PartialEq for P<T> {\n \n impl<T: Eq> Eq for P<T> {}\n \n-impl<T: Show> Show for P<T> {\n+impl<T: Debug> Debug for P<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (**self).fmt(f)\n+        Debug::fmt(&**self, f)\n+    }\n+}\n+impl<T: Display> Display for P<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Display::fmt(&**self, f)\n     }\n }\n "}, {"sha": "1b35b1b04a313e872c72ecf0f868a6ea4d5f51ca", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -114,9 +114,16 @@ impl Ord for RcStr {\n     }\n }\n \n-impl fmt::Show for RcStr {\n+impl fmt::Debug for RcStr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        use std::fmt::Show;\n+        use std::fmt::Debug;\n+        self[].fmt(f)\n+    }\n+}\n+\n+impl fmt::Display for RcStr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        use std::fmt::Display;\n         self[].fmt(f)\n     }\n }"}, {"sha": "2ef0bca3785cbc43ba1d6b81b46abeb030125d20", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -197,7 +197,7 @@ impl<T: Writer+Send> TerminfoTerminal<T> {\n         let mut file = entry.unwrap();\n         let ti = parse(&mut file, false);\n         if ti.is_err() {\n-            debug!(\"error parsing terminfo entry: {:?}\", ti.unwrap_err());\n+            debug!(\"error parsing terminfo entry: {:?}\", ti.err().unwrap());\n             return None;\n         }\n "}, {"sha": "0b51a976c0e8d96137ab15d9134586db121ca3d2", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -624,7 +624,7 @@ mod test {\n             };\n             let res = get_res(\"%p1\", cap, &[p], vars);\n             assert!(res.is_ok(),\n-                    \"Op {} failed with 1 stack entry: {}\", cap, res.unwrap_err());\n+                    \"Op {} failed with 1 stack entry: {}\", cap, res.err().unwrap());\n         }\n         let caps = [\"%+\", \"%-\", \"%*\", \"%/\", \"%m\", \"%&\", \"%|\", \"%A\", \"%O\"];\n         for &cap in caps.iter() {\n@@ -636,7 +636,7 @@ mod test {\n                     \"Binop {} succeeded incorrectly with 1 stack entry\", cap);\n             let res = get_res(\"%{1}%{2}\", cap, &[], vars);\n             assert!(res.is_ok(),\n-                    \"Binop {} failed with 2 stack entries: {:?}\", cap, res.unwrap_err());\n+                    \"Binop {} failed with 2 stack entries: {:?}\", cap, res.err().unwrap());\n         }\n     }\n \n@@ -651,15 +651,15 @@ mod test {\n         for &(op, bs) in v.iter() {\n             let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-            assert!(res.is_ok(), res.unwrap_err());\n+            assert!(res.is_ok(), res.err().unwrap());\n             assert_eq!(res.unwrap(), vec!(b'0' + bs[0]));\n             let s = format!(\"%{{1}}%{{1}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-            assert!(res.is_ok(), res.unwrap_err());\n+            assert!(res.is_ok(), res.err().unwrap());\n             assert_eq!(res.unwrap(), vec!(b'0' + bs[1]));\n             let s = format!(\"%{{2}}%{{1}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-            assert!(res.is_ok(), res.unwrap_err());\n+            assert!(res.is_ok(), res.err().unwrap());\n             assert_eq!(res.unwrap(), vec!(b'0' + bs[2]));\n         }\n     }\n@@ -669,15 +669,15 @@ mod test {\n         let mut vars = Variables::new();\n         let s = b\"\\\\E[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m\";\n         let res = expand(s, &[Number(1)], &mut vars);\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), res.err().unwrap());\n         assert_eq!(res.unwrap(),\n                    \"\\\\E[31m\".bytes().collect::<Vec<_>>());\n         let res = expand(s, &[Number(8)], &mut vars);\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), res.err().unwrap());\n         assert_eq!(res.unwrap(),\n                    \"\\\\E[90m\".bytes().collect::<Vec<_>>());\n         let res = expand(s, &[Number(42)], &mut vars);\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), res.err().unwrap());\n         assert_eq!(res.unwrap(),\n                    \"\\\\E[38;5;42m\".bytes().collect::<Vec<_>>());\n     }"}, {"sha": "d1b106c5ce5b78aa51a56f9ee9a4597ef8dd44a9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -63,7 +63,6 @@ use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::f64;\n-use std::fmt::Show;\n use std::fmt;\n use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n@@ -109,9 +108,9 @@ impl TestName {\n         }\n     }\n }\n-impl fmt::String for TestName {\n+impl fmt::Display for TestName {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self.as_slice(), f)\n+        fmt::Display::fmt(self.as_slice(), f)\n     }\n }\n \n@@ -172,7 +171,7 @@ impl TestFn {\n     }\n }\n \n-impl fmt::Show for TestFn {\n+impl fmt::Debug for TestFn {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(match *self {\n             StaticTestFn(..) => \"StaticTestFn(..)\","}, {"sha": "cd461cf5766d65dfabedb2814ff2bce5490e5356", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -333,7 +333,7 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n }\n \n /// Render writes the min, max and quartiles of the provided `Summary` to the provided `Writer`.\n-pub fn write_5_number_summary<W: Writer, T: Float + fmt::String + fmt::Show>(w: &mut W,\n+pub fn write_5_number_summary<W: Writer, T: Float + fmt::Display + fmt::Debug>(w: &mut W,\n                                                           s: &Summary<T>) -> io::IoResult<()> {\n     let (q1,q2,q3) = s.quartiles;\n     write!(w, \"(min={}, q1={}, med={}, q3={}, max={})\",\n@@ -355,7 +355,7 @@ pub fn write_5_number_summary<W: Writer, T: Float + fmt::String + fmt::Show>(w:\n /// ```{.ignore}\n ///   10 |        [--****#******----------]          | 40\n /// ```\n-pub fn write_boxplot<W: Writer, T: Float + fmt::String + fmt::Show + FromPrimitive>(\n+pub fn write_boxplot<W: Writer, T: Float + fmt::Display + fmt::Debug + FromPrimitive>(\n                      w: &mut W,\n                      s: &Summary<T>,\n                      width_hint: uint)"}, {"sha": "876c98298dc53fc9fd9c69b2a431d1bd90e3501f", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -12,7 +12,7 @@\n // can't be used as rvalues\n \n use std::ops::Index;\n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n struct S;\n \n@@ -31,9 +31,9 @@ struct T;\n impl Copy for T {}\n \n impl Index<usize> for T {\n-    type Output = Show + 'static;\n+    type Output = Debug + 'static;\n \n-    fn index<'a>(&'a self, idx: &usize) -> &'a (Show + 'static) {\n+    fn index<'a>(&'a self, idx: &usize) -> &'a (Debug + 'static) {\n         static x: usize = 42;\n         &x\n     }"}, {"sha": "51deb99a4f2cda7747feae6e2df16f83c0f80e9e", "filename": "src/test/compile-fail/issue-14853.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n trait Str {}\n \n trait Something {\n-    fn yay<T: Show>(_: Option<Self>, thing: &[T]);\n+    fn yay<T: Debug>(_: Option<Self>, thing: &[T]);\n }\n \n struct X { data: u32 }"}, {"sha": "2c03a9e07332e90944142ddc0ef21f48b33c2713", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -12,19 +12,19 @@\n \n use std::{fmt, ops};\n \n-struct Shower<T> {\n+struct Debuger<T> {\n     x: T\n }\n \n-impl<T: fmt::Show> ops::Fn<(), ()> for Shower<T> {\n+impl<T: fmt::Debug> ops::Fn<(), ()> for Debuger<T> {\n     fn call(&self, _args: ()) {\n //~^ ERROR `call` has an incompatible type for trait: expected \"rust-call\" fn, found \"Rust\" fn\n         println!(\"{:?}\", self.x);\n     }\n }\n \n-fn make_shower<T>(x: T) -> Shower<T> {\n-    Shower { x: x }\n+fn make_shower<T>(x: T) -> Debuger<T> {\n+    Debuger { x: x }\n }\n \n pub fn main() {"}, {"sha": "a49339ecd7f2811e169e2316856af749a233b84c", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn send<T:Send + std::fmt::Show>(ch: _chan<T>, data: T) {\n+fn send<T:Send + std::fmt::Debug>(ch: _chan<T>, data: T) {\n     println!(\"{:?}\", ch);\n     println!(\"{:?}\", data);\n     panic!();\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct _chan<T>(isize);\n \n // Tests that \"log(debug, message);\" is flagged as using"}, {"sha": "69ed025070b4f95d088f3d08c3c739733abef32b", "filename": "src/test/run-fail/assert-eq-macro-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-panic.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:assertion failed: `(left == right) && (right == left)` (left: `14i`, right: `15i`)\n+// error-pattern:assertion failed: `(left == right) && (right == left)` (left: `14`, right: `15`)\n \n fn main() {\n     assert_eq!(14i,15i);"}, {"sha": "9bef7f70420e272c0944e38a55086848cb86e5b1", "filename": "src/test/run-pass/cfg_attr.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg_attr.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -10,44 +10,44 @@\n \n // compile-flags:--cfg set1 --cfg set2\n #![allow(dead_code)]\n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n-struct NotShowable;\n+struct NotDebugable;\n \n-#[cfg_attr(set1, derive(Show))]\n+#[cfg_attr(set1, derive(Debug))]\n struct Set1;\n \n-#[cfg_attr(notset, derive(Show))]\n-struct Notset(NotShowable);\n+#[cfg_attr(notset, derive(Debug))]\n+struct Notset(NotDebugable);\n \n-#[cfg_attr(not(notset), derive(Show))]\n+#[cfg_attr(not(notset), derive(Debug))]\n struct NotNotset;\n \n-#[cfg_attr(not(set1), derive(Show))]\n-struct NotSet1(NotShowable);\n+#[cfg_attr(not(set1), derive(Debug))]\n+struct NotSet1(NotDebugable);\n \n-#[cfg_attr(all(set1, set2), derive(Show))]\n+#[cfg_attr(all(set1, set2), derive(Debug))]\n struct AllSet1Set2;\n \n-#[cfg_attr(all(set1, notset), derive(Show))]\n-struct AllSet1Notset(NotShowable);\n+#[cfg_attr(all(set1, notset), derive(Debug))]\n+struct AllSet1Notset(NotDebugable);\n \n-#[cfg_attr(any(set1, notset), derive(Show))]\n+#[cfg_attr(any(set1, notset), derive(Debug))]\n struct AnySet1Notset;\n \n-#[cfg_attr(any(notset, notset2), derive(Show))]\n-struct AnyNotsetNotset2(NotShowable);\n+#[cfg_attr(any(notset, notset2), derive(Debug))]\n+struct AnyNotsetNotset2(NotDebugable);\n \n-#[cfg_attr(all(not(notset), any(set1, notset)), derive(Show))]\n+#[cfg_attr(all(not(notset), any(set1, notset)), derive(Debug))]\n struct Complex;\n \n-#[cfg_attr(any(notset, not(any(set1, notset))), derive(Show))]\n-struct ComplexNot(NotShowable);\n+#[cfg_attr(any(notset, not(any(set1, notset))), derive(Debug))]\n+struct ComplexNot(NotDebugable);\n \n-#[cfg_attr(any(target_endian = \"little\", target_endian = \"big\"), derive(Show))]\n+#[cfg_attr(any(target_endian = \"little\", target_endian = \"big\"), derive(Debug))]\n struct KeyValue;\n \n-fn is_show<T: Show>() {}\n+fn is_show<T: Debug>() {}\n \n fn main() {\n     is_show::<Set1>();"}, {"sha": "ee19d9e69b3018788b4abd0e534f0fa065375dc9", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n // Check that coercions apply at the pointer level and don't cause\n // rvalue expressions to be unsized. See #20169 for more information.\n@@ -21,15 +21,15 @@ pub fn main() {\n     let _: Box<[int]> = box if true { [1, 2, 3] } else { [1, 3, 4] };\n     let _: Box<[int]> = box match true { true => [1, 2, 3], false => [1, 3, 4] };\n     let _: Box<Fn(int) -> _> = box { |x| (x as u8) };\n-    let _: Box<Show> = box if true { false } else { true };\n-    let _: Box<Show> = box match true { true => 'a', false => 'b' };\n+    let _: Box<Debug> = box if true { false } else { true };\n+    let _: Box<Debug> = box match true { true => 'a', false => 'b' };\n \n     let _: &[int] = &{ [1, 2, 3] };\n     let _: &[int] = &if true { [1, 2, 3] } else { [1, 3, 4] };\n     let _: &[int] = &match true { true => [1, 2, 3], false => [1, 3, 4] };\n     let _: &Fn(int) -> _ = &{ |x| (x as u8) };\n-    let _: &Show = &if true { false } else { true };\n-    let _: &Show = &match true { true => 'a', false => 'b' };\n+    let _: &Debug = &if true { false } else { true };\n+    let _: &Debug = &match true { true => 'a', false => 'b' };\n \n     let _: Box<[int]> = Box::new([1, 2, 3]);\n     let _: Box<Fn(int) -> _> = Box::new(|x| (x as u8));"}, {"sha": "78b603690fda2742c0e67604e3b60ec4f8642c66", "filename": "src/test/run-pass/coherence-where-clause.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n trait MyTrait {\n@@ -23,7 +23,7 @@ impl<T> MyTrait for T\n     }\n }\n \n-#[derive(Clone,Show,PartialEq)]\n+#[derive(Clone,Debug,PartialEq)]\n struct MyType {\n     dummy: uint\n }\n@@ -35,7 +35,7 @@ impl MyTrait for MyType {\n }\n \n fn test_eq<M>(m: M, n: M)\n-where M : MyTrait + Show + PartialEq\n+where M : MyTrait + Debug + PartialEq\n {\n     assert_eq!(m.get(), n);\n }"}, {"sha": "acd07bc98d319dce481e9a24a82c6c7b2d5dc64e", "filename": "src/test/run-pass/deriving-show-2.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -10,39 +10,39 @@\n \n use std::fmt;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum A {}\n-#[derive(Show)]\n+#[derive(Debug)]\n enum B { B1, B2, B3 }\n-#[derive(Show)]\n+#[derive(Debug)]\n enum C { C1(int), C2(B), C3(String) }\n-#[derive(Show)]\n+#[derive(Debug)]\n enum D { D1{ a: int } }\n-#[derive(Show)]\n+#[derive(Debug)]\n struct E;\n-#[derive(Show)]\n+#[derive(Debug)]\n struct F(int);\n-#[derive(Show)]\n+#[derive(Debug)]\n struct G(int, int);\n-#[derive(Show)]\n+#[derive(Debug)]\n struct H { a: int }\n-#[derive(Show)]\n+#[derive(Debug)]\n struct I { a: int, b: int }\n-#[derive(Show)]\n+#[derive(Debug)]\n struct J(Custom);\n \n struct Custom;\n-impl fmt::Show for Custom {\n+impl fmt::Debug for Custom {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"yay\")\n     }\n }\n \n-trait ToShow {\n+trait ToDebug {\n     fn to_show(&self) -> String;\n }\n \n-impl<T: fmt::Show> ToShow for T {\n+impl<T: fmt::Debug> ToDebug for T {\n     fn to_show(&self) -> String {\n         format!(\"{:?}\", self)\n     }\n@@ -51,12 +51,12 @@ impl<T: fmt::Show> ToShow for T {\n pub fn main() {\n     assert_eq!(B::B1.to_show(), \"B1\".to_string());\n     assert_eq!(B::B2.to_show(), \"B2\".to_string());\n-    assert_eq!(C::C1(3).to_show(), \"C1(3i)\".to_string());\n+    assert_eq!(C::C1(3).to_show(), \"C1(3)\".to_string());\n     assert_eq!(C::C2(B::B2).to_show(), \"C2(B2)\".to_string());\n-    assert_eq!(D::D1{ a: 2 }.to_show(), \"D1 { a: 2i }\".to_string());\n+    assert_eq!(D::D1{ a: 2 }.to_show(), \"D1 { a: 2 }\".to_string());\n     assert_eq!(E.to_show(), \"E\".to_string());\n-    assert_eq!(F(3).to_show(), \"F(3i)\".to_string());\n-    assert_eq!(G(3, 4).to_show(), \"G(3i, 4i)\".to_string());\n-    assert_eq!(I{ a: 2, b: 4 }.to_show(), \"I { a: 2i, b: 4i }\".to_string());\n+    assert_eq!(F(3).to_show(), \"F(3)\".to_string());\n+    assert_eq!(G(3, 4).to_show(), \"G(3, 4)\".to_string());\n+    assert_eq!(I{ a: 2, b: 4 }.to_show(), \"I { a: 2, b: 4 }\".to_string());\n     assert_eq!(J(Custom).to_show(), \"J(yay)\".to_string());\n }"}, {"sha": "7986b97685f6af6f33a1b47233a2e4b54cd24571", "filename": "src/test/run-pass/deriving-show.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Unit;\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Tuple(int, uint);\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Struct { x: int, y: uint }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum Enum {\n     Nullary,\n     Variant(int, uint),\n@@ -32,9 +32,9 @@ macro_rules! t {\n \n pub fn main() {\n     t!(Unit, \"Unit\");\n-    t!(Tuple(1, 2), \"Tuple(1i, 2u)\");\n-    t!(Struct { x: 1, y: 2 }, \"Struct { x: 1i, y: 2u }\");\n+    t!(Tuple(1, 2), \"Tuple(1, 2)\");\n+    t!(Struct { x: 1, y: 2 }, \"Struct { x: 1, y: 2 }\");\n     t!(Enum::Nullary, \"Nullary\");\n-    t!(Enum::Variant(1, 2), \"Variant(1i, 2u)\");\n-    t!(Enum::StructVariant { x: 1, y: 2 }, \"StructVariant { x: 1i, y: 2u }\");\n+    t!(Enum::Variant(1, 2), \"Variant(1, 2)\");\n+    t!(Enum::StructVariant { x: 1, y: 2 }, \"StructVariant { x: 1, y: 2 }\");\n }"}, {"sha": "0c7ecfcefff34bcdc9bcf3cac4e53fd5eefe9dad", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -12,7 +12,7 @@\n // work and don't ICE.\n \n use std::ops::Index;\n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n struct S;\n \n@@ -27,16 +27,16 @@ impl Index<uint> for S {\n struct T;\n \n impl Index<uint> for T {\n-    type Output = Show + 'static;\n+    type Output = Debug + 'static;\n \n-    fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n+    fn index<'a>(&'a self, idx: &uint) -> &'a (Debug + 'static) {\n         static X: uint = 42;\n-        &X as &(Show + 'static)\n+        &X as &(Debug + 'static)\n     }\n }\n \n fn main() {\n     assert_eq!(&S[0], \"hello\");\n     &T[0];\n-    // let x = &x as &Show;\n+    // let x = &x as &Debug;\n }"}, {"sha": "e273baef256bcedd99bc7b634df9351f3562dffe", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -33,7 +33,7 @@ impl fmt::UpperHex for B {\n         f.write_str(\"adios\")\n     }\n }\n-impl fmt::String for C {\n+impl fmt::Display for C {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad_integral(true, \"\u2603\", \"123\")\n     }\n@@ -63,31 +63,31 @@ pub fn main() {\n     t!(format!(\"{}\", 10i), \"10\");\n     t!(format!(\"{}\", 10u), \"10\");\n     t!(format!(\"{:?}\", '\u2603'), \"'\\\\u{2603}'\");\n-    t!(format!(\"{:?}\", 10i), \"10i\");\n-    t!(format!(\"{:?}\", 10u), \"10u\");\n+    t!(format!(\"{:?}\", 10i), \"10\");\n+    t!(format!(\"{:?}\", 10u), \"10\");\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n     t!(format!(\"{:o}\", 10u), \"12\");\n     t!(format!(\"{:x}\", 10u), \"a\");\n     t!(format!(\"{:X}\", 10u), \"A\");\n     t!(format!(\"{}\", \"foo\"), \"foo\");\n     t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n-    t!(format!(\"{:p}\", 0x1234 as *const int), \"0x1234\");\n-    t!(format!(\"{:p}\", 0x1234 as *mut int), \"0x1234\");\n+    t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n+    t!(format!(\"{:p}\", 0x1234 as *mut isize), \"0x1234\");\n     t!(format!(\"{:x}\", A), \"aloha\");\n     t!(format!(\"{:X}\", B), \"adios\");\n     t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n     t!(format!(\"{1} {0}\", 0i, 1i), \"1 0\");\n-    t!(format!(\"{foo} {bar}\", foo=0i, bar=1i), \"0 1\");\n-    t!(format!(\"{foo} {1} {bar} {0}\", 0i, 1i, foo=2i, bar=3i), \"2 1 3 0\");\n+    t!(format!(\"{foo} {bar}\", foo=0i, bar=1is), \"0 1\");\n+    t!(format!(\"{foo} {1} {bar} {0}\", 0is, 1is, foo=2is, bar=3is), \"2 1 3 0\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n     t!(format!(\"{foo_bar}\", foo_bar=1i), \"1\");\n     t!(format!(\"{}\", 5i + 5i), \"10\");\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n \n     // FIXME(#20676)\n-    // let a: &fmt::Show = &1i;\n-    // t!(format!(\"{:?}\", a), \"1i\");\n+    // let a: &fmt::Debug = &1i;\n+    // t!(format!(\"{:?}\", a), \"1\");\n \n \n     // Formatting strings and their arguments\n@@ -154,7 +154,7 @@ pub fn main() {\n     // make sure that format! doesn't cause spurious unused-unsafe warnings when\n     // it's inside of an outer unsafe block\n     unsafe {\n-        let a: int = ::std::mem::transmute(3u);\n+        let a: isize = ::std::mem::transmute(3u);\n         format!(\"{}\", a);\n     }\n \n@@ -215,8 +215,8 @@ fn test_format_args() {\n fn test_order() {\n     // Make sure format!() arguments are always evaluated in a left-to-right\n     // ordering\n-    fn foo() -> int {\n-        static mut FOO: int = 0;\n+    fn foo() -> isize {\n+        static mut FOO: isize = 0;\n         unsafe {\n             FOO += 1;\n             FOO"}, {"sha": "01a2322ae939919c397dbe71d8902180cccbdabf", "filename": "src/test/run-pass/issue-20676.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20676.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -15,6 +15,6 @@\n use std::fmt;\n \n fn main() {\n-    let a: &fmt::Show = &1_i32;\n+    let a: &fmt::Debug = &1_i32;\n     format!(\"{:?}\", a);\n }"}, {"sha": "0118fce4ec3424b7125748b9463216f66c64c681", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -24,6 +24,6 @@ pub fn main() {\n     let mut table = HashMap::new();\n     table.insert(\"one\".to_string(), 1i);\n     table.insert(\"two\".to_string(), 2i);\n-    assert!(check_strs(format!(\"{:?}\", table).as_slice(), \"HashMap {\\\"one\\\": 1i, \\\"two\\\": 2i}\") ||\n-            check_strs(format!(\"{:?}\", table).as_slice(), \"HashMap {\\\"two\\\": 2i, \\\"one\\\": 1i}\"));\n+    assert!(check_strs(format!(\"{:?}\", table).as_slice(), \"HashMap {\\\"one\\\": 1, \\\"two\\\": 2}\") ||\n+            check_strs(format!(\"{:?}\", table).as_slice(), \"HashMap {\\\"two\\\": 2, \\\"one\\\": 1}\"));\n }"}, {"sha": "9d5f8576c633ee83a31c6bf78f33778135c4cf83", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -11,28 +11,28 @@\n #![feature(unsafe_destructor)]\n \n trait X {\n-    fn call<T: std::fmt::Show>(&self, x: &T);\n-    fn default_method<T: std::fmt::Show>(&self, x: &T) {\n+    fn call<T: std::fmt::Debug>(&self, x: &T);\n+    fn default_method<T: std::fmt::Debug>(&self, x: &T) {\n         println!(\"X::default_method {:?}\", x);\n     }\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Y(int);\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Z<T> {\n     x: T\n }\n \n impl X for Y {\n-    fn call<T: std::fmt::Show>(&self, x: &T) {\n+    fn call<T: std::fmt::Debug>(&self, x: &T) {\n         println!(\"X::call {:?} {:?}\", self, x);\n     }\n }\n \n #[unsafe_destructor]\n-impl<T: X + std::fmt::Show> Drop for Z<T> {\n+impl<T: X + std::fmt::Debug> Drop for Z<T> {\n     fn drop(&mut self) {\n         // These statements used to cause an ICE.\n         self.x.call(self);"}, {"sha": "379b8f7700e594fb66d8b043a8ab6ceda260f74b", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn assert_repr_eq<T: std::fmt::Show>(obj : T, expected : String) {\n+fn assert_repr_eq<T: std::fmt::Debug>(obj : T, expected : String) {\n     assert_eq!(expected, format!(\"{:?}\", obj));\n }\n \n pub fn main() {\n-    let abc = [1i, 2, 3];\n+    let abc = [1, 2, 3];\n     let tf = [true, false];\n     let x  = [(), ()];\n     let slice = &x[..1];\n \n-    assert_repr_eq(&abc[], \"[1i, 2i, 3i]\".to_string());\n+    assert_repr_eq(&abc[], \"[1, 2, 3]\".to_string());\n     assert_repr_eq(&tf[], \"[true, false]\".to_string());\n     assert_repr_eq(&x[], \"[(), ()]\".to_string());\n     assert_repr_eq(slice, \"[()]\".to_string());"}, {"sha": "c4b45ae0f0e62cf49b3db6293516414483aa1725", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Clone, Show)]\n+#[derive(Clone, Debug)]\n enum foo {\n   a(uint),\n   b(String),\n }\n \n-fn check_log<T: std::fmt::Show>(exp: String, v: T) {\n+fn check_log<T: std::fmt::Debug>(exp: String, v: T) {\n     assert_eq!(exp, format!(\"{:?}\", v));\n }\n \n pub fn main() {\n-    let mut x = Some(foo::a(22u));\n-    let exp = \"Some(a(22u))\".to_string();\n+    let mut x = Some(foo::a(22));\n+    let exp = \"Some(a(22))\".to_string();\n     let act = format!(\"{:?}\", x);\n     assert_eq!(act, exp);\n     check_log(exp, x);"}, {"sha": "e8852377957f88ed3a406dff051bd8f6d1e99de8", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum foo {\n-  a(uint),\n+  a(usize),\n   b(String),\n   c,\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum bar {\n   d, e, f\n }\n \n pub fn main() {\n-    assert_eq!(\"a(22u)\".to_string(), format!(\"{:?}\", foo::a(22u)));\n+    assert_eq!(\"a(22)\".to_string(), format!(\"{:?}\", foo::a(22)));\n     assert_eq!(\"c\".to_string(), format!(\"{:?}\", foo::c));\n     assert_eq!(\"d\".to_string(), format!(\"{:?}\", bar::d));\n }"}, {"sha": "15df67e14882f908ed3fd57fe985a46ae2877409", "filename": "src/test/run-pass/multidispatch1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n \n trait MyTrait<T> {\n     fn get(&self) -> T;\n@@ -29,7 +29,7 @@ impl MyTrait<u8> for MyType {\n }\n \n fn test_eq<T,M>(m: M, v: T)\n-where T : Eq + Show,\n+where T : Eq + Debug,\n       M : MyTrait<T>\n {\n     assert_eq!(m.get(), v);"}, {"sha": "0c2652e6a7cb418330fe8d92ed8fcc80254f655a", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::Show;\n+use std::fmt::Debug;\n use std::default::Default;\n \n trait MyTrait<T> {\n@@ -34,7 +34,7 @@ impl MyTrait<uint> for MyType {\n }\n \n fn test_eq<T,M>(m: M, v: T)\n-where T : Eq + Show,\n+where T : Eq + Debug,\n       M : MyTrait<T>\n {\n     assert_eq!(m.get(), v);"}, {"sha": "c90c6ce87f09d3a712ebdb60b966332d1996aefc", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -26,6 +26,6 @@ fn main() {\n     Thread::scoped(move|| -> () {\n         let _a = A;\n         panic!();\n-    }).join().unwrap_err();\n+    }).join().err().unwrap();\n     assert!(unsafe { !HIT });\n }"}, {"sha": "5e0523d704189c09f9232ae76954ae2cfc6e4d8f", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -28,7 +28,7 @@ impl<K,V> AssociationList<K,V> {\n     }\n }\n \n-impl<K: PartialEq + std::fmt::Show, V:Clone> Index<K> for AssociationList<K,V> {\n+impl<K: PartialEq + std::fmt::Debug, V:Clone> Index<K> for AssociationList<K,V> {\n     type Output = V;\n \n     fn index<'a>(&'a self, index: &K) -> &'a V {"}, {"sha": "05643b0b56ba46f7175feab1778c126247aecfb4", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -22,14 +22,14 @@ mod rusti {\n }\n \n // This is the type with the questionable alignment\n-#[derive(Show)]\n+#[derive(Debug)]\n struct Inner {\n     c64: u32\n }\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n-#[derive(Show)]\n+#[derive(Debug)]\n struct Outer {\n     c8: u8,\n     t: Inner\n@@ -66,6 +66,6 @@ pub fn main() {\n         // because `inner`s alignment was 4.\n         assert_eq!(mem::size_of::<Outer>(), m::size());\n \n-        assert_eq!(y, \"Outer { c8: 22u8, t: Inner { c64: 44u32 } }\".to_string());\n+        assert_eq!(y, \"Outer { c8: 22, t: Inner { c64: 44 } }\".to_string());\n     }\n }"}, {"sha": "eaf76ef5714a8e8033edc2e8f00816114a69bf30", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -22,14 +22,14 @@ mod rusti {\n }\n \n // This is the type with the questionable alignment\n-#[derive(Show)]\n+#[derive(Debug)]\n struct Inner {\n     c64: u64\n }\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n-#[derive(Show)]\n+#[derive(Debug)]\n struct Outer {\n     c8: u8,\n     t: Inner\n@@ -95,6 +95,6 @@ pub fn main() {\n         // because `Inner`s alignment was 4.\n         assert_eq!(mem::size_of::<Outer>(), m::m::size());\n \n-        assert_eq!(y, \"Outer { c8: 22u8, t: Inner { c64: 44u64 } }\".to_string());\n+        assert_eq!(y, \"Outer { c8: 22, t: Inner { c64: 44 } }\".to_string());\n     }\n }"}, {"sha": "f68dea04a08765f1831c4ccd76acac8ac5ad8df4", "filename": "src/test/run-pass/sepcomp-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -36,5 +36,5 @@ mod b {\n }\n \n fn main() {\n-    Thread::scoped(move|| { ::b::g() }).join().unwrap_err();\n+    Thread::scoped(move|| { ::b::g() }).join().err().unwrap();\n }"}, {"sha": "f496765edca9882266cb850a8fc4399d93018680", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {"}, {"sha": "fc45e107bb0eb79d38643ee15c1e0bc104eee56e", "filename": "src/test/run-pass/small-enums-with-fields.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -10,7 +10,7 @@\n \n use std::mem::size_of;\n \n-#[derive(PartialEq, Show)]\n+#[derive(PartialEq, Debug)]\n enum Either<T, U> { Left(T), Right(U) }\n \n macro_rules! check {\n@@ -29,14 +29,14 @@ macro_rules! check {\n pub fn main() {\n     check!(Option<u8>, 2,\n            None, \"None\",\n-           Some(129u8), \"Some(129u8)\");\n+           Some(129u8), \"Some(129)\");\n     check!(Option<i16>, 4,\n            None, \"None\",\n-           Some(-20000i16), \"Some(-20000i16)\");\n+           Some(-20000i16), \"Some(-20000)\");\n     check!(Either<u8, i8>, 2,\n-           Either::Left(132u8), \"Left(132u8)\",\n-           Either::Right(-32i8), \"Right(-32i8)\");\n+           Either::Left(132u8), \"Left(132)\",\n+           Either::Right(-32i8), \"Right(-32)\");\n     check!(Either<u8, i16>, 4,\n-           Either::Left(132u8), \"Left(132u8)\",\n-           Either::Right(-20000i16), \"Right(-20000i16)\");\n+           Either::Left(132u8), \"Left(132)\",\n+           Either::Right(-20000i16), \"Right(-20000)\");\n }"}, {"sha": "cc0a75181db96aee22a6432e9ec4b0d632e2836b", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Show)]\n+#[derive(Debug)]\n enum a_tag {\n     a_tag_var(u64)\n }\n \n-#[derive(Show)]\n+#[derive(Debug)]\n struct t_rec {\n     c8: u8,\n     t: a_tag\n@@ -23,5 +23,5 @@ pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag::a_tag_var(44u64)};\n     let y = format!(\"{:?}\", x);\n     println!(\"y = {:?}\", y);\n-    assert_eq!(y, \"t_rec { c8: 22u8, t: a_tag_var(44u64) }\".to_string());\n+    assert_eq!(y, \"t_rec { c8: 22, t: a_tag_var(44) }\".to_string());\n }"}, {"sha": "3c50712b4647f1d6c7c115468861cac7d0a40a72", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -26,6 +26,6 @@ pub fn main() {\n         let _b = Foo;\n     }).join();\n \n-    let s = x.unwrap_err().downcast::<&'static str>().unwrap();\n+    let s = x.err().unwrap().downcast::<&'static str>().ok().unwrap();\n     assert_eq!(s.as_slice(), \"This panic should happen.\");\n }"}, {"sha": "31f2612624201785eec0d1ce35c952e09a48e791", "filename": "src/test/run-pass/vec-to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-to_str.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub fn main() {\n-    assert_eq!(format!(\"{:?}\", vec!(0i, 1)), \"[0i, 1i]\".to_string());\n+    assert_eq!(format!(\"{:?}\", vec!(0i, 1)), \"[0, 1]\".to_string());\n \n     let foo = vec!(3i, 4);\n     let bar: &[int] = &[4, 5];\n \n-    assert_eq!(format!(\"{:?}\", foo), \"[3i, 4i]\");\n-    assert_eq!(format!(\"{:?}\", bar), \"[4i, 5i]\");\n+    assert_eq!(format!(\"{:?}\", foo), \"[3, 4]\");\n+    assert_eq!(format!(\"{:?}\", bar), \"[4, 5]\");\n }"}, {"sha": "ffeb4be349a655614e29d78f968e9b564c19c62a", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c3ee861ec488827044e07d5d0cd7c8508c681f/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=87c3ee861ec488827044e07d5d0cd7c8508c681f", "patch": "@@ -58,7 +58,7 @@ fn main() {\n     let _failures = range(0, 100).map(|_| {\n         let cmd = Command::new(too_long.as_slice());\n         let failed = cmd.spawn();\n-        assert!(failed.is_err(), \"Make sure the command fails to spawn(): {}\", cmd);\n+        assert!(failed.is_err(), \"Make sure the command fails to spawn(): {:?}\", cmd);\n         failed\n     }).collect::<Vec<_>>();\n "}]}