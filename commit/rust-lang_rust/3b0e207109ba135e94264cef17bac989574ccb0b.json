{"sha": "3b0e207109ba135e94264cef17bac989574ccb0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMGUyMDcxMDliYTEzNWU5NDI2NGNlZjE3YmFjOTg5NTc0Y2NiMGI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-08T00:26:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-08T00:26:30Z"}, "message": "Drop closures. Un-XFAIL bind-interior.rs.", "tree": {"sha": "3a3f388b4b37bd34233ba3f721d42da08747e923", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a3f388b4b37bd34233ba3f721d42da08747e923"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0e207109ba135e94264cef17bac989574ccb0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0e207109ba135e94264cef17bac989574ccb0b", "html_url": "https://github.com/rust-lang/rust/commit/3b0e207109ba135e94264cef17bac989574ccb0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0e207109ba135e94264cef17bac989574ccb0b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb09eb58569f5a0e5544c6256173d4b6b8ffcf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb09eb58569f5a0e5544c6256173d4b6b8ffcf2", "html_url": "https://github.com/rust-lang/rust/commit/2fb09eb58569f5a0e5544c6256173d4b6b8ffcf2"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "c9c7b6b0790ddf8f345644272067c5d7035ff347", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b0e207109ba135e94264cef17bac989574ccb0b/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3b0e207109ba135e94264cef17bac989574ccb0b/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=3b0e207109ba135e94264cef17bac989574ccb0b", "patch": "@@ -418,6 +418,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         arith-0.rs \\\n                         arith-1.rs \\\n                         arith-2.rs \\\n+                        bind-interior.rs \\\n                         bind-thunk.rs \\\n                         bind-trivial.rs \\\n                         bitwise.rs \\"}, {"sha": "505718790bd237a418aed2bd73063ce363b6d43a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3b0e207109ba135e94264cef17bac989574ccb0b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0e207109ba135e94264cef17bac989574ccb0b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3b0e207109ba135e94264cef17bac989574ccb0b", "patch": "@@ -298,7 +298,9 @@ fn T_closure_ptr(TypeRef lltarget_ty,\n }\n \n fn T_opaque_closure_ptr() -> TypeRef {\n-    ret T_ptr(T_box(T_nil()));\n+    ret T_closure_ptr(T_struct(vec(T_ptr(T_nil()),\n+                                   T_ptr(T_nil()))),\n+                      T_nil());\n }\n \n \n@@ -849,6 +851,50 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n                                         T_int(), C_int(0));\n         }\n \n+        case (ty.ty_fn(_,_)) {\n+            fn hit_zero(@block_ctxt cx, ValueRef v) -> result {\n+\n+                // Call through the closure's own fields-drop glue first.\n+                auto body =\n+                    cx.build.GEP(v,\n+                                 vec(C_int(0),\n+                                     C_int(abi.box_rc_field_body)));\n+\n+                auto bindings =\n+                    cx.build.GEP(body,\n+                                 vec(C_int(0),\n+                                     C_int(abi.closure_elt_bindings)));\n+                auto llrawptr = cx.build.BitCast(bindings, T_ptr(T_i8()));\n+\n+                auto tydescptr =\n+                    cx.build.GEP(body,\n+                                 vec(C_int(0),\n+                                     C_int(abi.closure_elt_tydesc)));\n+                auto tydesc = cx.build.Load(tydescptr);\n+                auto llfnptr =\n+                    cx.build.GEP(tydesc,\n+                                 vec(C_int(0),\n+                                     C_int(abi.tydesc_field_drop_glue_off)));\n+                auto llfn = cx.build.Load(llfnptr);\n+                cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n+\n+                // Then free the body.\n+                // FIXME: switch gc/non-gc on layer of the type.\n+                ret trans_non_gc_free(cx, v);\n+            }\n+            auto box_cell =\n+                cx.build.GEP(v,\n+                             vec(C_int(0),\n+                                 C_int(abi.fn_field_box)));\n+\n+            auto boxptr = cx.build.Load(box_cell);\n+\n+            ret decr_refcnt_and_if_zero(cx, boxptr,\n+                                        bind hit_zero(_, boxptr),\n+                                        \"free fn\",\n+                                        T_int(), C_int(0));\n+        }\n+\n         case (_) {\n             if (ty.type_is_structural(t)) {\n                 ret iter_structural_ty(cx, v, t,\n@@ -2145,13 +2191,11 @@ impure fn trans_bind(@block_ctxt cx, @ast.expr f,\n             auto pair_code = bcx.build.GEP(pair_v,\n                                            vec(C_int(0),\n                                                C_int(abi.fn_field_code)));\n+\n+            let @ty.t pair_ty = node_ann_type(cx.fcx.ccx, ann);\n             let ValueRef llthunk =\n-                trans_bind_thunk(cx.fcx.ccx,\n-                                 node_ann_type(cx.fcx.ccx, ann),\n-                                 ty.expr_ty(f),\n-                                 args,\n-                                 llclosure_ty,\n-                                 bound_tys);\n+                trans_bind_thunk(cx.fcx.ccx, pair_ty, ty.expr_ty(f),\n+                                 args, llclosure_ty, bound_tys);\n \n             bcx.build.Store(llthunk, pair_code);\n \n@@ -2163,6 +2207,9 @@ impure fn trans_bind(@block_ctxt cx, @ast.expr f,\n                                                   T_opaque_closure_ptr()),\n                             pair_box);\n \n+            find_scope_cx(cx).cleanups +=\n+                clean(bind drop_slot(_, pair_v, pair_ty));\n+\n             ret res(bcx, pair_v);\n         }\n     }"}]}