{"sha": "53323751a9caaf678689e0d437f79d0c169b2dae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzIzNzUxYTljYWFmNjc4Njg5ZTBkNDM3Zjc5ZDBjMTY5YjJkYWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-19T14:06:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-19T14:06:44Z"}, "message": "proc_macro: Preserve spans of attributes on functions\n\nThis commit updates the tokenization of items which are subsequently passed to\n`proc_macro` to ensure that span information is preserved on attributes as much\nas possible. Previously this area of the code suffered from #43081 where we\nhaven't actually implemented converting an attribute to to a token tree yet, but\na local fix was possible here.\n\nCloses #47941", "tree": {"sha": "712369d9688700a6f9f8139ce82e24ed9e9d0064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712369d9688700a6f9f8139ce82e24ed9e9d0064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53323751a9caaf678689e0d437f79d0c169b2dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53323751a9caaf678689e0d437f79d0c169b2dae", "html_url": "https://github.com/rust-lang/rust/commit/53323751a9caaf678689e0d437f79d0c169b2dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53323751a9caaf678689e0d437f79d0c169b2dae/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba21844f6c85a0cd55c8ea0250d5cd758134f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba21844f6c85a0cd55c8ea0250d5cd758134f84", "html_url": "https://github.com/rust-lang/rust/commit/5ba21844f6c85a0cd55c8ea0250d5cd758134f84"}], "stats": {"total": 137, "additions": 132, "deletions": 5}, "files": [{"sha": "fd8f394a600f09b456b97774f2a208d7b2783642", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=53323751a9caaf678689e0d437f79d0c169b2dae", "patch": "@@ -777,11 +777,50 @@ fn prepend_attrs(sess: &ParseSess,\n     for attr in attrs {\n         assert_eq!(attr.style, ast::AttrStyle::Outer,\n                    \"inner attributes should prevent cached tokens from existing\");\n-        // FIXME: Avoid this pretty-print + reparse hack as bove\n-        let name = FileName::MacroExpansion;\n-        let source = pprust::attr_to_string(attr);\n-        let stream = parse_stream_from_source_str(name, source, sess, Some(span));\n-        builder.push(stream);\n+\n+        if attr.is_sugared_doc {\n+            let stream = parse_stream_from_source_str(\n+                FileName::MacroExpansion,\n+                pprust::attr_to_string(attr),\n+                sess,\n+                Some(span),\n+            );\n+            builder.push(stream);\n+            continue\n+        }\n+\n+        // synthesize # [ $path $tokens ] manually here\n+        let mut brackets = tokenstream::TokenStreamBuilder::new();\n+\n+        // For simple paths, push the identifier directly\n+        if attr.path.segments.len() == 1 && attr.path.segments[0].args.is_none() {\n+            let ident = attr.path.segments[0].ident;\n+            let token = Ident(ident, ident.as_str().starts_with(\"r#\"));\n+            brackets.push(tokenstream::TokenTree::Token(ident.span, token));\n+\n+        // ... and for more complicated paths, fall back to a reparse hack that\n+        // should eventually be removed.\n+        } else {\n+            let stream = parse_stream_from_source_str(\n+                FileName::MacroExpansion,\n+                pprust::path_to_string(&attr.path),\n+                sess,\n+                Some(span),\n+            );\n+            brackets.push(stream);\n+        }\n+\n+        brackets.push(attr.tokens.clone());\n+\n+        let tokens = tokenstream::Delimited {\n+            delim: DelimToken::Bracket,\n+            tts: brackets.build().into(),\n+        };\n+        // The span we list here for `#` and for `[ ... ]` are both wrong in\n+        // that it encompasses more than each token, but it hopefully is \"good\n+        // enough\" for now at least.\n+        builder.push(tokenstream::TokenTree::Token(attr.span, Pound));\n+        builder.push(tokenstream::TokenTree::Delimited(attr.span, tokens));\n     }\n     builder.push(tokens.clone());\n     Some(builder.build())"}, {"sha": "e1401653ba356a3330bbbcffabd5ab2ae28168ee", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs?ref=53323751a9caaf678689e0d437f79d0c169b2dae", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attribute-spans-preserved.rs\n+\n+#![feature(use_extern_macros)]\n+\n+extern crate attribute_spans_preserved as foo;\n+\n+use foo::foo;\n+\n+#[ foo ( let y: u32 = \"z\"; ) ] //~ ERROR: mismatched types\n+#[ bar let x: u32 = \"y\"; ] //~ ERROR: mismatched types\n+fn main() {\n+}"}, {"sha": "fe62bd23b87c9bc4a6e2421bcdd0a7ac0c205881", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=53323751a9caaf678689e0d437f79d0c169b2dae", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/attribute-spans-preserved.rs:19:23\n+   |\n+LL | #[ foo ( let y: u32 = \"z\"; ) ] //~ ERROR: mismatched types\n+   |                       ^^^ expected u32, found reference\n+   |\n+   = note: expected type `u32`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/attribute-spans-preserved.rs:20:21\n+   |\n+LL | #[ bar let x: u32 = \"y\"; ] //~ ERROR: mismatched types\n+   |                     ^^^ expected u32, found reference\n+   |\n+   = note: expected type `u32`\n+              found type `&'static str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "33dc064ef680f313d8bedc215f569f4ecf7cb269", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stdout?ref=53323751a9caaf678689e0d437f79d0c169b2dae", "patch": "@@ -0,0 +1 @@\n+fn main (  ) { let y : u32 = \"z\" ; let x : u32 = \"y\" ; }"}, {"sha": "e725cc7afb82b7a2c0c512b275f323d44236950a", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/attribute-spans-preserved.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattribute-spans-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53323751a9caaf678689e0d437f79d0c169b2dae/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattribute-spans-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattribute-spans-preserved.rs?ref=53323751a9caaf678689e0d437f79d0c169b2dae", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn foo(attr: TokenStream, f: TokenStream) -> TokenStream {\n+    let mut tokens = f.into_iter();\n+    assert_eq!(tokens.next().unwrap().to_string(), \"#\");\n+    let next_attr = match tokens.next().unwrap() {\n+        TokenTree::Group(g) => g,\n+        _ => panic!(),\n+    };\n+\n+    let fn_tok = tokens.next().unwrap();\n+    let ident_tok = tokens.next().unwrap();\n+    let args_tok = tokens.next().unwrap();\n+    let body = tokens.next().unwrap();\n+\n+    let new_body = attr.into_iter()\n+        .chain(next_attr.stream().into_iter().skip(1));\n+\n+    let tokens = vec![\n+        fn_tok,\n+        ident_tok,\n+        args_tok,\n+        Group::new(Delimiter::Brace, new_body.collect()).into(),\n+    ].into_iter().collect::<TokenStream>();\n+    println!(\"{}\", tokens);\n+    return tokens\n+}"}]}