{"sha": "9d2772207ebe378fece31bfdcff4f50eff24c19d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjc3MjIwN2ViZTM3OGZlY2UzMWJmZGNmZjRmNTBlZmYyNGMxOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T13:33:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T13:33:47Z"}, "message": "Auto merge of #4418 - euclio:byte-lit-suggestion, r=flip1995\n\nuse a structured suggestion for char-lit-as-u8\n\nchangelog: use a structured suggestion for char-lit-as-u8", "tree": {"sha": "6b0674625066150f6d51be253454ee7552797ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b0674625066150f6d51be253454ee7552797ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d2772207ebe378fece31bfdcff4f50eff24c19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2772207ebe378fece31bfdcff4f50eff24c19d", "html_url": "https://github.com/rust-lang/rust/commit/9d2772207ebe378fece31bfdcff4f50eff24c19d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d2772207ebe378fece31bfdcff4f50eff24c19d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe57fad85ffa8561bd5ead77353337d7de23139", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe57fad85ffa8561bd5ead77353337d7de23139", "html_url": "https://github.com/rust-lang/rust/commit/ffe57fad85ffa8561bd5ead77353337d7de23139"}, {"sha": "14d1d040b435d089d6240dc50a789eccdf857afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d1d040b435d089d6240dc50a789eccdf857afb", "html_url": "https://github.com/rust-lang/rust/commit/14d1d040b435d089d6240dc50a789eccdf857afb"}], "stats": {"total": 116, "additions": 90, "deletions": 26}, "files": [{"sha": "c210cf82a300967aa0c70ddcbaf1d62513ff9e13", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -15,7 +15,7 @@ use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n-use syntax::ast::{FloatTy, IntTy, UintTy};\n+use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::Span;\n use syntax::symbol::sym;\n@@ -1122,7 +1122,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let ExprKind::Lit(ref lit) = ex.node {\n-                use syntax::ast::{LitIntType, LitKind};\n                 if let LitKind::Int(n, _) = lit.node {\n                     if cast_to.is_floating_point() {\n                         let from_nbits = 128 - n.leading_zeros();\n@@ -1487,29 +1486,40 @@ declare_clippy_lint! {\n     /// ```\n     pub CHAR_LIT_AS_U8,\n     complexity,\n-    \"casting a character literal to u8\"\n+    \"casting a character literal to u8 truncates\"\n }\n \n declare_lint_pass!(CharLitAsU8 => [CHAR_LIT_AS_U8]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        use syntax::ast::LitKind;\n-\n-        if let ExprKind::Cast(ref e, _) = expr.node {\n-            if let ExprKind::Lit(ref l) = e.node {\n-                if let LitKind::Char(_) = l.node {\n-                    if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !expr.span.from_expansion() {\n-                        let msg = \"casting character literal to u8. `char`s \\\n-                                   are 4 bytes wide in rust, so casting to u8 \\\n-                                   truncates them\";\n-                        let help = format!(\n-                            \"Consider using a byte literal instead:\\nb{}\",\n-                            snippet(cx, e.span, \"'x'\")\n-                        );\n-                        span_help_and_lint(cx, CHAR_LIT_AS_U8, expr.span, msg, &help);\n-                    }\n-                }\n+        if_chain! {\n+            if !expr.span.from_expansion();\n+            if let ExprKind::Cast(e, _) = &expr.node;\n+            if let ExprKind::Lit(l) = &e.node;\n+            if let LitKind::Char(c) = l.node;\n+            if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty;\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let snippet = snippet_with_applicability(cx, e.span, \"'x'\", &mut applicability);\n+\n+                span_lint_and_then(\n+                    cx,\n+                    CHAR_LIT_AS_U8,\n+                    expr.span,\n+                    \"casting a character literal to `u8` truncates\",\n+                    |db| {\n+                        db.note(\"`char` is four bytes wide, but `u8` is a single byte\");\n+\n+                        if c.is_ascii() {\n+                            db.span_suggestion(\n+                                expr.span,\n+                                \"use a byte literal instead\",\n+                                format!(\"b{}\", snippet),\n+                                applicability,\n+                            );\n+                        }\n+                });\n             }\n         }\n     }"}, {"sha": "1435e9968dd93438f85d4f75cccbbc1c50a0f4be", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -171,7 +171,7 @@ pub const ALL_LINTS: [Lint; 313] = [\n     Lint {\n         name: \"char_lit_as_u8\",\n         group: \"complexity\",\n-        desc: \"casting a character literal to u8\",\n+        desc: \"casting a character literal to u8 truncates\",\n         deprecation: None,\n         module: \"types\",\n     },"}, {"sha": "0a53a3d6490a3d8ade83eb4de080af0da6fc31ba", "filename": "tests/ui/char_lit_as_u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::char_lit_as_u8)]\n-#![allow(unused_variables)]\n+\n fn main() {\n-    let c = 'a' as u8;\n+    let _ = '\u2764' as u8; // no suggestion, since a byte literal won't work.\n }"}, {"sha": "b9836d2f25532d5806663ac9c865fd6430fe867a", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -1,12 +1,11 @@\n-error: casting character literal to u8. `char`s are 4 bytes wide in rust, so casting to u8 truncates them\n+error: casting a character literal to `u8` truncates\n   --> $DIR/char_lit_as_u8.rs:4:13\n    |\n-LL |     let c = 'a' as u8;\n+LL |     let _ = '\u2764' as u8; // no suggestion, since a byte literal won't work.\n    |             ^^^^^^^^^\n    |\n    = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n-   = help: Consider using a byte literal instead:\n-           b'a'\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n \n error: aborting due to previous error\n "}, {"sha": "3dc3cb4e7573dbb3147ac20f4a876c655da51a5d", "filename": "tests/ui/char_lit_as_u8_suggestions.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.fixed?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::char_lit_as_u8)]\n+\n+fn main() {\n+    let _ = b'a';\n+    let _ = b'\\n';\n+    let _ = b'\\0';\n+    let _ = b'\\x01';\n+}"}, {"sha": "d379a0234942ab46864a666ac5c4237a498db9ca", "filename": "tests/ui/char_lit_as_u8_suggestions.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.rs?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::char_lit_as_u8)]\n+\n+fn main() {\n+    let _ = 'a' as u8;\n+    let _ = '\\n' as u8;\n+    let _ = '\\0' as u8;\n+    let _ = '\\x01' as u8;\n+}"}, {"sha": "bf7cb1607b4e208cbf7d633d2a29e068b2269f3d", "filename": "tests/ui/char_lit_as_u8_suggestions.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d2772207ebe378fece31bfdcff4f50eff24c19d/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr?ref=9d2772207ebe378fece31bfdcff4f50eff24c19d", "patch": "@@ -0,0 +1,35 @@\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:6:13\n+   |\n+LL |     let _ = 'a' as u8;\n+   |             ^^^^^^^^^ help: use a byte literal instead: `b'a'`\n+   |\n+   = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:7:13\n+   |\n+LL |     let _ = '/n' as u8;\n+   |             ^^^^^^^^^^ help: use a byte literal instead: `b'/n'`\n+   |\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:8:13\n+   |\n+LL |     let _ = '/0' as u8;\n+   |             ^^^^^^^^^^ help: use a byte literal instead: `b'/0'`\n+   |\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:9:13\n+   |\n+LL |     let _ = '/x01' as u8;\n+   |             ^^^^^^^^^^^^ help: use a byte literal instead: `b'/x01'`\n+   |\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: aborting due to 4 previous errors\n+"}]}