{"sha": "34c24990296ff473511dbd471f5ff288f956add5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YzI0OTkwMjk2ZmY0NzM1MTFkYmQ0NzFmNWZmMjg4Zjk1NmFkZDU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T07:42:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T08:43:06Z"}, "message": "Cargo fmt", "tree": {"sha": "d31df0c2da6af8696e53a2c9190c88773ae50687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31df0c2da6af8696e53a2c9190c88773ae50687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c24990296ff473511dbd471f5ff288f956add5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c24990296ff473511dbd471f5ff288f956add5", "html_url": "https://github.com/rust-lang/rust/commit/34c24990296ff473511dbd471f5ff288f956add5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c24990296ff473511dbd471f5ff288f956add5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09d54512da002e9695402b88fda63bcc49f6b762", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d54512da002e9695402b88fda63bcc49f6b762", "html_url": "https://github.com/rust-lang/rust/commit/09d54512da002e9695402b88fda63bcc49f6b762"}], "stats": {"total": 190, "additions": 95, "deletions": 95}, "files": [{"sha": "fdeb3cf428681e16d0765a40d3b37ac2588aef6d", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -164,13 +164,13 @@ enum TargetKind {\n impl TargetKind {\n     fn should_format(&self) -> bool {\n         match *self {\n-            TargetKind::Lib |\n-            TargetKind::Bin |\n-            TargetKind::Example |\n-            TargetKind::Test |\n-            TargetKind::Bench |\n-            TargetKind::CustomBuild |\n-            TargetKind::ProcMacro => true,\n+            TargetKind::Lib\n+            | TargetKind::Bin\n+            | TargetKind::Example\n+            | TargetKind::Test\n+            | TargetKind::Bench\n+            | TargetKind::CustomBuild\n+            | TargetKind::ProcMacro => true,\n             _ => false,\n         }\n     }"}, {"sha": "8a4b4257891050e94680b8c4cca147f46114d5ed", "filename": "src/chains.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -350,19 +350,19 @@ fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool\n         ast::ExprKind::Mac(..) | ast::ExprKind::Call(..) => {\n             context.use_block_indent() && repr.contains('\\n')\n         }\n-        ast::ExprKind::Struct(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) |\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::Block(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Match(..) => repr.contains('\\n'),\n-        ast::ExprKind::Paren(ref expr) |\n-        ast::ExprKind::Binary(_, _, ref expr) |\n-        ast::ExprKind::Index(_, ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) => is_block_expr(context, expr, repr),\n+        ast::ExprKind::Struct(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::Block(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Match(..) => repr.contains('\\n'),\n+        ast::ExprKind::Paren(ref expr)\n+        | ast::ExprKind::Binary(_, _, ref expr)\n+        | ast::ExprKind::Index(_, ref expr)\n+        | ast::ExprKind::Unary(_, ref expr) => is_block_expr(context, expr, repr),\n         _ => false,\n     }\n }\n@@ -396,9 +396,9 @@ fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext) -> Option<ast::Exp\n         ast::ExprKind::MethodCall(_, ref expressions) => {\n             Some(convert_try(&expressions[0], context))\n         }\n-        ast::ExprKind::TupField(ref subexpr, _) |\n-        ast::ExprKind::Field(ref subexpr, _) |\n-        ast::ExprKind::Try(ref subexpr) => Some(convert_try(subexpr, context)),\n+        ast::ExprKind::TupField(ref subexpr, _)\n+        | ast::ExprKind::Field(ref subexpr, _)\n+        | ast::ExprKind::Try(ref subexpr) => Some(convert_try(subexpr, context)),\n         _ => None,\n     }\n }"}, {"sha": "5f5b3d8fe261005ff8f87881b423b16906dd73eb", "filename": "src/closures.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -328,17 +328,17 @@ where\n \n fn is_block_closure_forced(expr: &ast::Expr) -> bool {\n     match expr.node {\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) |\n-        ast::ExprKind::ForLoop(..) => true,\n-        ast::ExprKind::AddrOf(_, ref expr) |\n-        ast::ExprKind::Box(ref expr) |\n-        ast::ExprKind::Try(ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) |\n-        ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced(expr),\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::ForLoop(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced(expr),\n         _ => false,\n     }\n }"}, {"sha": "2511e5df216a6015646e72d658a09bc24eff7131", "filename": "src/comment.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -64,10 +64,10 @@ impl<'a> CommentStyle<'a> {\n \n     pub fn closer(&self) -> &'a str {\n         match *self {\n-            CommentStyle::DoubleSlash |\n-            CommentStyle::TripleSlash |\n-            CommentStyle::Custom(..) |\n-            CommentStyle::Doc => \"\",\n+            CommentStyle::DoubleSlash\n+            | CommentStyle::TripleSlash\n+            | CommentStyle::Custom(..)\n+            | CommentStyle::Doc => \"\",\n             CommentStyle::DoubleBullet => \" **/\",\n             CommentStyle::SingleBullet | CommentStyle::Exclamation => \" */\",\n         }\n@@ -648,9 +648,9 @@ enum FullCodeCharKind {\n impl FullCodeCharKind {\n     fn is_comment(&self) -> bool {\n         match *self {\n-            FullCodeCharKind::StartComment |\n-            FullCodeCharKind::InComment |\n-            FullCodeCharKind::EndComment => true,\n+            FullCodeCharKind::StartComment\n+            | FullCodeCharKind::InComment\n+            | FullCodeCharKind::EndComment => true,\n             _ => false,\n         }\n     }"}, {"sha": "1086a7030ba485b74d7ab3d4ce4f015fab0c54d3", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -99,12 +99,12 @@ pub fn format_expr(\n         ast::ExprKind::Tup(ref items) => {\n             rewrite_tuple(context, &ptr_vec_to_ref_vec(items), expr.span, shape)\n         }\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) => to_control_flow(expr, expr_type)\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..) => to_control_flow(expr, expr_type)\n             .and_then(|control_flow| control_flow.rewrite(context, shape)),\n         ast::ExprKind::Block(ref block) => {\n             match expr_type {\n@@ -161,10 +161,10 @@ pub fn format_expr(\n         ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n         }\n-        ast::ExprKind::Try(..) |\n-        ast::ExprKind::Field(..) |\n-        ast::ExprKind::TupField(..) |\n-        ast::ExprKind::MethodCall(..) => rewrite_chain(expr, context, shape),\n+        ast::ExprKind::Try(..)\n+        | ast::ExprKind::Field(..)\n+        | ast::ExprKind::TupField(..)\n+        | ast::ExprKind::MethodCall(..) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::Mac(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n@@ -2060,29 +2060,29 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n             (context.use_block_indent() && args_len == 1)\n                 || (context.config.indent_style() == IndentStyle::Visual && args_len > 1)\n         }\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) => {\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..) => {\n             context.config.combine_control_expr() && context.use_block_indent() && args_len == 1\n         }\n         ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n             context.use_block_indent()\n                 || context.config.indent_style() == IndentStyle::Visual && args_len > 1\n         }\n-        ast::ExprKind::Array(..) |\n-        ast::ExprKind::Call(..) |\n-        ast::ExprKind::Mac(..) |\n-        ast::ExprKind::MethodCall(..) |\n-        ast::ExprKind::Struct(..) |\n-        ast::ExprKind::Tup(..) => context.use_block_indent() && args_len == 1,\n-        ast::ExprKind::AddrOf(_, ref expr) |\n-        ast::ExprKind::Box(ref expr) |\n-        ast::ExprKind::Try(ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) |\n-        ast::ExprKind::Cast(ref expr, _) => can_be_overflowed_expr(context, expr, args_len),\n+        ast::ExprKind::Array(..)\n+        | ast::ExprKind::Call(..)\n+        | ast::ExprKind::Mac(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Struct(..)\n+        | ast::ExprKind::Tup(..) => context.use_block_indent() && args_len == 1,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => can_be_overflowed_expr(context, expr, args_len),\n         _ => false,\n     }\n }"}, {"sha": "300aa046cf12ec4653fcc6bf918c1c9df65bc8df", "filename": "src/imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -27,9 +27,9 @@ use visitor::{rewrite_extern_crate, FmtVisitor};\n \n fn path_of(a: &ast::ViewPath_) -> &ast::Path {\n     match *a {\n-        ast::ViewPath_::ViewPathSimple(_, ref p) |\n-        ast::ViewPath_::ViewPathGlob(ref p) |\n-        ast::ViewPath_::ViewPathList(ref p, _) => p,\n+        ast::ViewPath_::ViewPathSimple(_, ref p)\n+        | ast::ViewPath_::ViewPathGlob(ref p)\n+        | ast::ViewPath_::ViewPathList(ref p, _) => p,\n     }\n }\n \n@@ -366,10 +366,10 @@ impl<'a> ImportItem<'a> {\n \n     fn to_str(&self) -> Option<&str> {\n         match *self {\n-            ImportItem::SelfImport(s) |\n-            ImportItem::SnakeCase(s) |\n-            ImportItem::CamelCase(s) |\n-            ImportItem::AllCaps(s) => Some(s),\n+            ImportItem::SelfImport(s)\n+            | ImportItem::SnakeCase(s)\n+            | ImportItem::CamelCase(s)\n+            | ImportItem::AllCaps(s) => Some(s),\n             ImportItem::Invalid => None,\n         }\n     }"}, {"sha": "1b8840392cafffae3960f2fabf8bc90c32935743", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -245,10 +245,10 @@ impl<'a> Spanned for TuplePatField<'a> {\n pub fn can_be_overflowed_pat(context: &RewriteContext, pat: &TuplePatField, len: usize) -> bool {\n     match *pat {\n         TuplePatField::Pat(pat) => match pat.node {\n-            ast::PatKind::Path(..) |\n-            ast::PatKind::Tuple(..) |\n-            ast::PatKind::Struct(..) |\n-            ast::PatKind::TupleStruct(..) => context.use_block_indent() && len == 1,\n+            ast::PatKind::Path(..)\n+            | ast::PatKind::Tuple(..)\n+            | ast::PatKind::Struct(..)\n+            | ast::PatKind::TupleStruct(..) => context.use_block_indent() && len == 1,\n             ast::PatKind::Ref(ref p, _) | ast::PatKind::Box(ref p) => {\n                 can_be_overflowed_pat(context, &TuplePatField::Pat(p), len)\n             }"}, {"sha": "d851dfda79dca7812f04ed450b06a0d2ad9226a7", "filename": "src/utils.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34c24990296ff473511dbd471f5ff288f956add5/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c24990296ff473511dbd471f5ff288f956add5/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=34c24990296ff473511dbd471f5ff288f956add5", "patch": "@@ -240,10 +240,10 @@ pub fn semicolon_for_expr(context: &RewriteContext, expr: &ast::Expr) -> bool {\n pub fn semicolon_for_stmt(context: &RewriteContext, stmt: &ast::Stmt) -> bool {\n     match stmt.node {\n         ast::StmtKind::Semi(ref expr) => match expr.node {\n-            ast::ExprKind::While(..) |\n-            ast::ExprKind::WhileLet(..) |\n-            ast::ExprKind::Loop(..) |\n-            ast::ExprKind::ForLoop(..) => false,\n+            ast::ExprKind::While(..)\n+            | ast::ExprKind::WhileLet(..)\n+            | ast::ExprKind::Loop(..)\n+            | ast::ExprKind::ForLoop(..) => false,\n             ast::ExprKind::Break(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Ret(..) => {\n                 context.config.trailing_semicolon()\n             }\n@@ -450,18 +450,18 @@ pub fn paren_overhead(context: &RewriteContext) -> usize {\n \n pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n     match e.node {\n-        ast::ExprKind::InPlace(ref e, _) |\n-        ast::ExprKind::Call(ref e, _) |\n-        ast::ExprKind::Binary(_, ref e, _) |\n-        ast::ExprKind::Cast(ref e, _) |\n-        ast::ExprKind::Type(ref e, _) |\n-        ast::ExprKind::Assign(ref e, _) |\n-        ast::ExprKind::AssignOp(_, ref e, _) |\n-        ast::ExprKind::Field(ref e, _) |\n-        ast::ExprKind::TupField(ref e, _) |\n-        ast::ExprKind::Index(ref e, _) |\n-        ast::ExprKind::Range(Some(ref e), _, _) |\n-        ast::ExprKind::Try(ref e) => left_most_sub_expr(e),\n+        ast::ExprKind::InPlace(ref e, _)\n+        | ast::ExprKind::Call(ref e, _)\n+        | ast::ExprKind::Binary(_, ref e, _)\n+        | ast::ExprKind::Cast(ref e, _)\n+        | ast::ExprKind::Type(ref e, _)\n+        | ast::ExprKind::Assign(ref e, _)\n+        | ast::ExprKind::AssignOp(_, ref e, _)\n+        | ast::ExprKind::Field(ref e, _)\n+        | ast::ExprKind::TupField(ref e, _)\n+        | ast::ExprKind::Index(ref e, _)\n+        | ast::ExprKind::Range(Some(ref e), _, _)\n+        | ast::ExprKind::Try(ref e) => left_most_sub_expr(e),\n         _ => e,\n     }\n }"}]}