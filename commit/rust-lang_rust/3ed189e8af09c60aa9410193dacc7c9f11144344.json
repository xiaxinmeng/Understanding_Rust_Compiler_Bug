{"sha": "3ed189e8af09c60aa9410193dacc7c9f11144344", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDE4OWU4YWYwOWM2MGFhOTQxMDE5M2RhY2M3YzlmMTExNDQzNDQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-18T19:21:18Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-19T16:50:23Z"}, "message": "Cleanup `PpMode` and friends", "tree": {"sha": "2574df86d1b224fc303cd85fc7f3312457d78cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2574df86d1b224fc303cd85fc7f3312457d78cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed189e8af09c60aa9410193dacc7c9f11144344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed189e8af09c60aa9410193dacc7c9f11144344", "html_url": "https://github.com/rust-lang/rust/commit/3ed189e8af09c60aa9410193dacc7c9f11144344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed189e8af09c60aa9410193dacc7c9f11144344/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2effd44e667d133e31ef334e30d10195218ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2effd44e667d133e31ef334e30d10195218ce6", "html_url": "https://github.com/rust-lang/rust/commit/cb2effd44e667d133e31ef334e30d10195218ce6"}], "stats": {"total": 157, "additions": 83, "deletions": 74}, "files": [{"sha": "00e4cc46c33e4c2b276764c7c8e15b7f08941ce1", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3ed189e8af09c60aa9410193dacc7c9f11144344/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed189e8af09c60aa9410193dacc7c9f11144344/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=3ed189e8af09c60aa9410193dacc7c9f11144344", "patch": "@@ -9,7 +9,7 @@ use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n-use rustc_session::config::{Input, PpMode, PpSourceMode};\n+use rustc_session::config::{Input, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n@@ -42,43 +42,41 @@ where\n     F: FnOnce(&dyn PrinterSupport) -> A,\n {\n     match *ppmode {\n-        PpmNormal | PpmEveryBodyLoops | PpmExpanded => {\n+        Normal | EveryBodyLoops | Expanded => {\n             let annotation = NoAnn { sess, tcx };\n             f(&annotation)\n         }\n \n-        PpmIdentified | PpmExpandedIdentified => {\n+        Identified | ExpandedIdentified => {\n             let annotation = IdentifiedAnnotation { sess, tcx };\n             f(&annotation)\n         }\n-        PpmExpandedHygiene => {\n+        ExpandedHygiene => {\n             let annotation = HygieneAnnotation { sess };\n             f(&annotation)\n         }\n-        _ => panic!(\"Should use call_with_pp_support_hir\"),\n     }\n }\n-fn call_with_pp_support_hir<A, F>(ppmode: &PpSourceMode, tcx: TyCtxt<'_>, f: F) -> A\n+fn call_with_pp_support_hir<A, F>(ppmode: &PpHirMode, tcx: TyCtxt<'_>, f: F) -> A\n where\n     F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate<'_>) -> A,\n {\n     match *ppmode {\n-        PpmNormal => {\n+        PpHirMode::Normal => {\n             let annotation = NoAnn { sess: tcx.sess, tcx: Some(tcx) };\n             f(&annotation, tcx.hir().krate())\n         }\n \n-        PpmIdentified => {\n+        PpHirMode::Identified => {\n             let annotation = IdentifiedAnnotation { sess: tcx.sess, tcx: Some(tcx) };\n             f(&annotation, tcx.hir().krate())\n         }\n-        PpmTyped => {\n+        PpHirMode::Typed => {\n             abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n \n             let annotation = TypedAnnotation { tcx, maybe_typeck_results: Cell::new(None) };\n             tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n         }\n-        _ => panic!(\"Should use call_with_pp_support\"),\n     }\n }\n \n@@ -395,7 +393,7 @@ pub fn print_after_parsing(\n \n     let mut out = String::new();\n \n-    if let PpmSource(s) = ppm {\n+    if let Source(s) = ppm {\n         // Silently ignores an identified node.\n         let out = &mut out;\n         call_with_pp_support(&s, sess, None, move |annotation| {\n@@ -436,7 +434,7 @@ pub fn print_after_hir_lowering<'tcx>(\n     let mut out = String::new();\n \n     match ppm {\n-        PpmSource(s) => {\n+        Source(s) => {\n             // Silently ignores an identified node.\n             let out = &mut out;\n             call_with_pp_support(&s, tcx.sess, Some(tcx), move |annotation| {\n@@ -455,20 +453,20 @@ pub fn print_after_hir_lowering<'tcx>(\n             })\n         }\n \n-        PpmHir(s) => {\n+        Hir(s) => {\n             let out = &mut out;\n             call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n-                debug!(\"pretty printing source code {:?}\", s);\n+                debug!(\"pretty printing HIR {:?}\", s);\n                 let sess = annotation.sess();\n                 let sm = sess.source_map();\n                 *out = pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n             })\n         }\n \n-        PpmHirTree(s) => {\n+        HirTree => {\n             let out = &mut out;\n-            call_with_pp_support_hir(&s, tcx, move |_annotation, krate| {\n-                debug!(\"pretty printing source code {:?}\", s);\n+            call_with_pp_support_hir(&PpHirMode::Normal, tcx, move |_annotation, krate| {\n+                debug!(\"pretty printing HIR tree\");\n                 *out = format!(\"{:#?}\", krate);\n             });\n         }\n@@ -493,9 +491,9 @@ fn print_with_analysis(\n     tcx.analysis(LOCAL_CRATE)?;\n \n     match ppm {\n-        PpmMir | PpmMirCFG => match ppm {\n-            PpmMir => write_mir_pretty(tcx, None, &mut out),\n-            PpmMirCFG => write_mir_graphviz(tcx, None, &mut out),\n+        Mir | MirCFG => match ppm {\n+            Mir => write_mir_pretty(tcx, None, &mut out),\n+            MirCFG => write_mir_graphviz(tcx, None, &mut out),\n             _ => unreachable!(),\n         },\n         _ => unreachable!(),"}, {"sha": "06a7d1aeb4d8cc1728d26243b7c20332e8ca1f57", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed189e8af09c60aa9410193dacc7c9f11144344/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed189e8af09c60aa9410193dacc7c9f11144344/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3ed189e8af09c60aa9410193dacc7c9f11144344", "patch": "@@ -348,7 +348,7 @@ fn configure_and_expand_inner<'a>(\n         rustc_builtin_macros::test_harness::inject(&sess, &mut resolver, &mut krate)\n     });\n \n-    if let Some(PpMode::PpmSource(PpSourceMode::PpmEveryBodyLoops)) = sess.opts.pretty {\n+    if let Some(PpMode::Source(PpSourceMode::EveryBodyLoops)) = sess.opts.pretty {\n         tracing::debug!(\"replacing bodies with loop {{}}\");\n         util::ReplaceBodyWithLoop::new(&mut resolver).visit_crate(&mut krate);\n     }"}, {"sha": "35854b2088639a99891a73b2f3b3a6636315e01c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 64, "deletions": 53, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/3ed189e8af09c60aa9410193dacc7c9f11144344/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed189e8af09c60aa9410193dacc7c9f11144344/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3ed189e8af09c60aa9410193dacc7c9f11144344", "patch": "@@ -2068,40 +2068,21 @@ fn parse_pretty(\n     debugging_opts: &DebuggingOptions,\n     efmt: ErrorOutputType,\n ) -> Option<PpMode> {\n-    let pretty = if debugging_opts.unstable_options {\n-        matches.opt_default(\"pretty\", \"normal\").map(|a| {\n-            // stable pretty-print variants only\n-            parse_pretty_inner(efmt, &a, false)\n-        })\n-    } else {\n-        None\n-    };\n-\n-    return if pretty.is_none() {\n-        debugging_opts.unpretty.as_ref().map(|a| {\n-            // extended with unstable pretty-print variants\n-            parse_pretty_inner(efmt, &a, true)\n-        })\n-    } else {\n-        pretty\n-    };\n-\n     fn parse_pretty_inner(efmt: ErrorOutputType, name: &str, extended: bool) -> PpMode {\n         use PpMode::*;\n-        use PpSourceMode::*;\n         let first = match (name, extended) {\n-            (\"normal\", _) => PpmSource(PpmNormal),\n-            (\"identified\", _) => PpmSource(PpmIdentified),\n-            (\"everybody_loops\", true) => PpmSource(PpmEveryBodyLoops),\n-            (\"expanded\", _) => PpmSource(PpmExpanded),\n-            (\"expanded,identified\", _) => PpmSource(PpmExpandedIdentified),\n-            (\"expanded,hygiene\", _) => PpmSource(PpmExpandedHygiene),\n-            (\"hir\", true) => PpmHir(PpmNormal),\n-            (\"hir,identified\", true) => PpmHir(PpmIdentified),\n-            (\"hir,typed\", true) => PpmHir(PpmTyped),\n-            (\"hir-tree\", true) => PpmHirTree(PpmNormal),\n-            (\"mir\", true) => PpmMir,\n-            (\"mir-cfg\", true) => PpmMirCFG,\n+            (\"normal\", _) => Source(PpSourceMode::Normal),\n+            (\"identified\", _) => Source(PpSourceMode::Identified),\n+            (\"everybody_loops\", true) => Source(PpSourceMode::EveryBodyLoops),\n+            (\"expanded\", _) => Source(PpSourceMode::Expanded),\n+            (\"expanded,identified\", _) => Source(PpSourceMode::ExpandedIdentified),\n+            (\"expanded,hygiene\", _) => Source(PpSourceMode::ExpandedHygiene),\n+            (\"hir\", true) => Hir(PpHirMode::Normal),\n+            (\"hir,identified\", true) => Hir(PpHirMode::Identified),\n+            (\"hir,typed\", true) => Hir(PpHirMode::Typed),\n+            (\"hir-tree\", true) => HirTree,\n+            (\"mir\", true) => Mir,\n+            (\"mir-cfg\", true) => MirCFG,\n             _ => {\n                 if extended {\n                     early_error(\n@@ -2130,6 +2111,18 @@ fn parse_pretty(\n         tracing::debug!(\"got unpretty option: {:?}\", first);\n         first\n     }\n+\n+    if debugging_opts.unstable_options {\n+        if let Some(a) = matches.opt_default(\"pretty\", \"normal\") {\n+            // stable pretty-print variants only\n+            return Some(parse_pretty_inner(efmt, &a, false));\n+        }\n+    }\n+\n+    debugging_opts.unpretty.as_ref().map(|a| {\n+        // extended with unstable pretty-print variants\n+        parse_pretty_inner(efmt, &a, true)\n+    })\n }\n \n pub fn make_crate_type_option() -> RustcOptGroup {\n@@ -2237,45 +2230,63 @@ impl fmt::Display for CrateType {\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n-    PpmNormal,\n-    PpmEveryBodyLoops,\n-    PpmExpanded,\n-    PpmIdentified,\n-    PpmExpandedIdentified,\n-    PpmExpandedHygiene,\n-    PpmTyped,\n+    /// `--pretty=normal`\n+    Normal,\n+    /// `-Zunpretty=everybody_loops`\n+    EveryBodyLoops,\n+    /// `--pretty=expanded`\n+    Expanded,\n+    /// `--pretty=identified`\n+    Identified,\n+    /// `--pretty=expanded,identified`\n+    ExpandedIdentified,\n+    /// `--pretty=expanded,hygiene`\n+    ExpandedHygiene,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum PpHirMode {\n+    /// `-Zunpretty=hir`\n+    Normal,\n+    /// `-Zunpretty=hir,identified`\n+    Identified,\n+    /// `-Zunpretty=hir,typed`\n+    Typed,\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n-    PpmSource(PpSourceMode),\n-    PpmHir(PpSourceMode),\n-    PpmHirTree(PpSourceMode),\n-    PpmMir,\n-    PpmMirCFG,\n+    /// Options that print the source code, i.e.\n+    /// `--pretty` and `-Zunpretty=everybody_loops`\n+    Source(PpSourceMode),\n+    /// Options that print the HIR, i.e. `-Zunpretty=hir`\n+    Hir(PpHirMode),\n+    /// `-Zunpretty=hir-tree`\n+    HirTree,\n+    /// `-Zunpretty=mir`\n+    Mir,\n+    /// `-Zunpretty=mir-cfg`\n+    MirCFG,\n }\n \n impl PpMode {\n     pub fn needs_ast_map(&self) -> bool {\n         use PpMode::*;\n         use PpSourceMode::*;\n         match *self {\n-            PpmSource(PpmNormal | PpmIdentified) => false,\n+            Source(Normal | Identified) => false,\n \n-            PpmSource(\n-                PpmExpanded | PpmEveryBodyLoops | PpmExpandedIdentified | PpmExpandedHygiene,\n-            )\n-            | PpmHir(_)\n-            | PpmHirTree(_)\n-            | PpmMir\n-            | PpmMirCFG => true,\n-            PpmSource(PpmTyped) => panic!(\"invalid state\"),\n+            Source(Expanded | EveryBodyLoops | ExpandedIdentified | ExpandedHygiene)\n+            | Hir(_)\n+            | HirTree\n+            | Mir\n+            | MirCFG => true,\n         }\n     }\n \n     pub fn needs_analysis(&self) -> bool {\n         use PpMode::*;\n-        matches!(*self, PpmMir | PpmMirCFG)\n+        matches!(*self, Mir | MirCFG)\n     }\n }\n "}]}