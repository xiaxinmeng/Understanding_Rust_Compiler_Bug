{"sha": "ca7df9a2a9c4b1f751e91040fe659f682c976919", "node_id": "C_kwDOAAsO6NoAKGNhN2RmOWEyYTljNGIxZjc1MWU5MTA0MGZlNjU5ZjY4MmM5NzY5MTk", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-11-10T00:34:49Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `for_loops_over_fallibles.rs`", "tree": {"sha": "7ca4d5a62f39a5b87fb40d684f414f28ceeece1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca4d5a62f39a5b87fb40d684f414f28ceeece1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7df9a2a9c4b1f751e91040fe659f682c976919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7df9a2a9c4b1f751e91040fe659f682c976919", "html_url": "https://github.com/rust-lang/rust/commit/ca7df9a2a9c4b1f751e91040fe659f682c976919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7df9a2a9c4b1f751e91040fe659f682c976919/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1a1f3643efb57b9bba515fc753d84ce39819e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1a1f3643efb57b9bba515fc753d84ce39819e0", "html_url": "https://github.com/rust-lang/rust/commit/3c1a1f3643efb57b9bba515fc753d84ce39819e0"}], "stats": {"total": 131, "additions": 85, "deletions": 46}, "files": [{"sha": "5330ce504b2c286d9019f2740d69c0bc4ebda3ef", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca7df9a2a9c4b1f751e91040fe659f682c976919/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ca7df9a2a9c4b1f751e91040fe659f682c976919/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=ca7df9a2a9c4b1f751e91040fe659f682c976919", "patch": "@@ -16,6 +16,13 @@ lint_enum_intrinsics_mem_variant =\n lint_expectation = this lint expectation is unfulfilled\n     .note = the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n \n+lint_for_loops_over_fallibles =\n+    for loop over {$article} `{$ty}`. This is more readably written as an `if let` statement\n+    .suggestion = consider using `if let` to clear intent\n+    .remove_next = to iterate over `{$recv_snip}` remove the call to `next`\n+    .use_while_let = to check pattern in a loop use `while let`\n+    .use_question_mark = consider unwrapping the `Result` with `?` to iterate over its contents\n+\n lint_non_binding_let_on_sync_lock =\n     non-binding let on a synchronization lock\n "}, {"sha": "7526b8c06327a864b98f1393b2aa762f83f7dbaf", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 29, "deletions": 46, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ca7df9a2a9c4b1f751e91040fe659f682c976919/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7df9a2a9c4b1f751e91040fe659f682c976919/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=ca7df9a2a9c4b1f751e91040fe659f682c976919", "patch": "@@ -1,7 +1,14 @@\n-use crate::{LateContext, LateLintPass, LintContext};\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::{\n+    lints::{\n+        ForLoopsOverFalliblesDiag, ForLoopsOverFalliblesLoopSub, ForLoopsOverFalliblesQuestionMark,\n+        ForLoopsOverFalliblesSuggestion,\n+    },\n+    LateContext, LateLintPass, LintContext,\n+};\n \n use hir::{Expr, Pat};\n-use rustc_errors::{Applicability, DelayDm};\n use rustc_hir as hir;\n use rustc_infer::{infer::TyCtxtInferExt, traits::ObligationCause};\n use rustc_middle::ty::{self, List};\n@@ -53,53 +60,29 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n             _ => return,\n         };\n \n-        let msg = DelayDm(|| {\n-            format!(\n-                \"for loop over {article} `{ty}`. This is more readably written as an `if let` statement\",\n-            )\n-        });\n-\n-        cx.struct_span_lint(FOR_LOOPS_OVER_FALLIBLES, arg.span, msg, |lint| {\n-            if let Some(recv) = extract_iterator_next_call(cx, arg)\n+        let sub =  if let Some(recv) = extract_iterator_next_call(cx, arg)\n             && let Ok(recv_snip) = cx.sess().source_map().span_to_snippet(recv.span)\n             {\n-                lint.span_suggestion(\n-                    recv.span.between(arg.span.shrink_to_hi()),\n-                    format!(\"to iterate over `{recv_snip}` remove the call to `next`\"),\n-                    \".by_ref()\",\n-                    Applicability::MaybeIncorrect\n-                );\n+                ForLoopsOverFalliblesLoopSub::RemoveNext { suggestion: recv.span.between(arg.span.shrink_to_hi()), recv_snip }\n             } else {\n-                lint.multipart_suggestion_verbose(\n-                    \"to check pattern in a loop use `while let`\",\n-                    vec![\n-                        // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n-                        (expr.span.with_hi(pat.span.lo()), format!(\"while let {var}(\")),\n-                        (pat.span.between(arg.span), \") = \".to_string()),\n-                    ],\n-                    Applicability::MaybeIncorrect\n-                );\n-            }\n-\n-            if suggest_question_mark(cx, adt, substs, expr.span) {\n-                lint.span_suggestion(\n-                    arg.span.shrink_to_hi(),\n-                    \"consider unwrapping the `Result` with `?` to iterate over its contents\",\n-                    \"?\",\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-\n-            lint.multipart_suggestion_verbose(\n-                \"consider using `if let` to clear intent\",\n-                vec![\n-                    // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n-                    (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n-                    (pat.span.between(arg.span), \") = \".to_string()),\n-                ],\n-                Applicability::MaybeIncorrect,\n-            )\n-        })\n+                ForLoopsOverFalliblesLoopSub::UseWhileLet { start_span: expr.span.with_hi(pat.span.lo()), end_span: pat.span.between(arg.span), var }\n+            } ;\n+        let question_mark = if suggest_question_mark(cx, adt, substs, expr.span) {\n+            Some(ForLoopsOverFalliblesQuestionMark { suggestion: arg.span.shrink_to_hi() })\n+        } else {\n+            None\n+        };\n+        let suggestion = ForLoopsOverFalliblesSuggestion {\n+            var,\n+            start_span: expr.span.with_hi(pat.span.lo()),\n+            end_span: pat.span.between(arg.span),\n+        };\n+\n+        cx.emit_spanned_lint(\n+            FOR_LOOPS_OVER_FALLIBLES,\n+            arg.span,\n+            ForLoopsOverFalliblesDiag { article, ty, sub, question_mark, suggestion },\n+        );\n     }\n }\n "}, {"sha": "a35493466040684e4c7b82fe83f64e03ad692c60", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ca7df9a2a9c4b1f751e91040fe659f682c976919/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7df9a2a9c4b1f751e91040fe659f682c976919/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=ca7df9a2a9c4b1f751e91040fe659f682c976919", "patch": "@@ -333,6 +333,55 @@ impl<'a> DecorateLint<'a, ()> for Expectation<'_> {\n     }\n }\n \n+// for_loops_over_fallibles.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_for_loops_over_fallibles)]\n+pub struct ForLoopsOverFalliblesDiag<'a> {\n+    pub article: &'static str,\n+    pub ty: &'static str,\n+    #[subdiagnostic]\n+    pub sub: ForLoopsOverFalliblesLoopSub<'a>,\n+    #[subdiagnostic]\n+    pub question_mark: Option<ForLoopsOverFalliblesQuestionMark>,\n+    #[subdiagnostic]\n+    pub suggestion: ForLoopsOverFalliblesSuggestion<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum ForLoopsOverFalliblesLoopSub<'a> {\n+    #[suggestion(remove_next, code = \".by_ref()\", applicability = \"maybe-incorrect\")]\n+    RemoveNext {\n+        #[primary_span]\n+        suggestion: Span,\n+        recv_snip: String,\n+    },\n+    #[multipart_suggestion(use_while_let, applicability = \"maybe-incorrect\")]\n+    UseWhileLet {\n+        #[suggestion_part(code = \"while let {var}(\")]\n+        start_span: Span,\n+        #[suggestion_part(code = \") = \")]\n+        end_span: Span,\n+        var: &'a str,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(use_question_mark, code = \"?\", applicability = \"maybe-incorrect\")]\n+pub struct ForLoopsOverFalliblesQuestionMark {\n+    #[primary_span]\n+    pub suggestion: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(suggestion, applicability = \"maybe-incorrect\")]\n+pub struct ForLoopsOverFalliblesSuggestion<'a> {\n+    pub var: &'a str,\n+    #[suggestion_part(code = \"if let {var}(\")]\n+    pub start_span: Span,\n+    #[suggestion_part(code = \") = \")]\n+    pub end_span: Span,\n+}\n+\n // internal.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_default_hash_types)]"}]}