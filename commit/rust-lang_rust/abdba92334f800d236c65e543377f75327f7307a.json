{"sha": "abdba92334f800d236c65e543377f75327f7307a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZGJhOTIzMzRmODAwZDIzNmM2NWU1NDMzNzdmNzUzMjdmNzMwN2E=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T13:54:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:54:21Z"}, "message": "Don't allocate empty generics", "tree": {"sha": "61fbd8e6dd3269dcd746767bcac8ba169d6eebfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61fbd8e6dd3269dcd746767bcac8ba169d6eebfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abdba92334f800d236c65e543377f75327f7307a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abdba92334f800d236c65e543377f75327f7307a", "html_url": "https://github.com/rust-lang/rust/commit/abdba92334f800d236c65e543377f75327f7307a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abdba92334f800d236c65e543377f75327f7307a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43cad21623bc5de59598a565097be9c7d8642818", "url": "https://api.github.com/repos/rust-lang/rust/commits/43cad21623bc5de59598a565097be9c7d8642818", "html_url": "https://github.com/rust-lang/rust/commit/43cad21623bc5de59598a565097be9c7d8642818"}], "stats": {"total": 118, "additions": 78, "deletions": 40}, "files": [{"sha": "6a0f493a79c369c0fd5f724af4c9f3279ffc0873", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=abdba92334f800d236c65e543377f75327f7307a", "patch": "@@ -80,43 +80,43 @@ impl GenericParams {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::StructId(id)) => {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::EnumId(id)) => {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::UnionId(id)) => {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::TraitId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::TypeAliasId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::ImplId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = db.item_tree(id.file_id);\n                 let item = &tree[id.value];\n-                item.generic_params.clone()\n+                tree[item.generic_params].clone()\n             }\n             GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => GenericParams::default(),\n         };"}, {"sha": "9e1fd904fa5c7391811de2eaac6e9b84fa50f390", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=abdba92334f800d236c65e543377f75327f7307a", "patch": "@@ -76,12 +76,37 @@ impl fmt::Debug for RawVisibilityId {\n     }\n }\n \n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct GenericParamsStorage {\n+    arena: Arena<GenericParams>,\n+}\n+\n+impl GenericParamsStorage {\n+    fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n+        if params.types.is_empty() && params.where_predicates.is_empty() {\n+            return GenericParamsId::EMPTY;\n+        }\n+\n+        GenericParamsId(self.arena.alloc(params).into_raw().into())\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, Eq, PartialEq)]\n+pub struct GenericParamsId(u32);\n+\n+impl GenericParamsId {\n+    pub const EMPTY: Self = GenericParamsId(u32::max_value());\n+}\n+\n static VIS_PUB: RawVisibility = RawVisibility::Public;\n static VIS_PRIV: RawVisibility =\n     RawVisibility::Module(ModPath { kind: PathKind::Super(0), segments: Vec::new() });\n static VIS_PUB_CRATE: RawVisibility =\n     RawVisibility::Module(ModPath { kind: PathKind::Crate, segments: Vec::new() });\n \n+static EMPTY_GENERICS: GenericParams =\n+    GenericParams { types: Arena::new(), where_predicates: Vec::new() };\n+\n #[derive(Default, Debug, Eq, PartialEq)]\n struct ItemTreeData {\n     imports: Arena<Import>,\n@@ -102,6 +127,7 @@ struct ItemTreeData {\n     exprs: Arena<Expr>,\n \n     vis: ItemVisibilities,\n+    generics: GenericParamsStorage,\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]\n@@ -364,6 +390,17 @@ impl Index<RawVisibilityId> for ItemTree {\n     }\n }\n \n+impl Index<GenericParamsId> for ItemTree {\n+    type Output = GenericParams;\n+\n+    fn index(&self, index: GenericParamsId) -> &Self::Output {\n+        match index {\n+            GenericParamsId::EMPTY => &EMPTY_GENERICS,\n+            _ => &self.data().generics.arena[Idx::from_raw(index.0.into())],\n+        }\n+    }\n+}\n+\n impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n     type Output = N;\n     fn index(&self, id: FileItemTreeId<N>) -> &N {\n@@ -398,7 +435,7 @@ pub struct ExternCrate {\n pub struct Function {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub has_self_param: bool,\n     pub is_unsafe: bool,\n     pub params: Vec<TypeRef>,\n@@ -410,7 +447,7 @@ pub struct Function {\n pub struct Struct {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::StructDef>,\n     pub kind: StructDefKind,\n@@ -430,7 +467,7 @@ pub enum StructDefKind {\n pub struct Union {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::UnionDef>,\n }\n@@ -439,7 +476,7 @@ pub struct Union {\n pub struct Enum {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub variants: Range<Idx<Variant>>,\n     pub ast_id: FileAstId<ast::EnumDef>,\n }\n@@ -466,15 +503,15 @@ pub struct Static {\n pub struct Trait {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub auto: bool,\n     pub items: Vec<AssocItem>,\n     pub ast_id: FileAstId<ast::TraitDef>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Impl {\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub target_trait: Option<TypeRef>,\n     pub target_type: TypeRef,\n     pub is_negative: bool,\n@@ -488,7 +525,7 @@ pub struct TypeAlias {\n     pub visibility: RawVisibilityId,\n     /// Bounds on the type alias itself. Only valid in trait declarations, eg. `type Assoc: Copy;`.\n     pub bounds: Vec<TypeBound>,\n-    pub generic_params: GenericParams,\n+    pub generic_params: GenericParamsId,\n     pub type_ref: Option<TypeRef>,\n     pub ast_id: FileAstId<ast::TypeAliasDef>,\n }"}, {"sha": "b1847a6cb5b6ce6d70001a6c53c8a17e609fcf28", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=abdba92334f800d236c65e543377f75327f7307a", "patch": "@@ -322,7 +322,7 @@ impl Ctx {\n         let mut res = Function {\n             name,\n             visibility,\n-            generic_params: GenericParams::default(),\n+            generic_params: GenericParamsId::EMPTY,\n             has_self_param,\n             is_unsafe: func.unsafe_token().is_some(),\n             params,\n@@ -545,7 +545,7 @@ impl Ctx {\n         &mut self,\n         owner: GenericsOwner<'_>,\n         node: &impl ast::TypeParamsOwner,\n-    ) -> GenericParams {\n+    ) -> GenericParamsId {\n         let mut sm = &mut ArenaMap::default();\n         let mut generics = GenericParams::default();\n         match owner {\n@@ -584,7 +584,8 @@ impl Ctx {\n                 generics.fill(&self.body_ctx, &mut sm, node);\n             }\n         }\n-        generics\n+\n+        self.data().generics.alloc(generics)\n     }\n \n     fn lower_type_bounds(&mut self, node: &impl ast::TypeBoundsOwner) -> Vec<TypeBound> {"}, {"sha": "b72f0f47bb46e5bcf53468aeb127a3bac7f1fc91", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abdba92334f800d236c65e543377f75327f7307a/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=abdba92334f800d236c65e543377f75327f7307a", "patch": "@@ -225,25 +225,25 @@ Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrateItem>(1) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n-Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 2, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }, TypeParamData { name: Some(Name(Text(\"U\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n+Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n-> TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n+> TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n+> Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n+> Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: Some(Tuple([])), provenance: TypeParamList }] }, where_predicates: [] }, fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n+Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n-Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n+Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n-Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n     \"###);\n }\n \n@@ -266,13 +266,13 @@ fn simple_inner_items() {\n inner attrs: Attrs { entries: None }\n \n top-level items:\n-Impl { generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"A\"))] }, generic_args: [None] }) }] }, target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n-> Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+> Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n inner items:\n \n for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):\n-Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"W\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"W\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Write\"))] }, generic_args: [None] }) }] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n \n     \"###);\n }\n@@ -296,9 +296,9 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -321,11 +321,11 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n-Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }] }, where_predicates: [] }, auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n+Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+> Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -348,11 +348,11 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n-Impl { generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+> Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -398,13 +398,13 @@ fn inner_item_attrs() {\n inner attrs: Attrs { entries: None }\n \n top-level items:\n-Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n+Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n \n inner items:\n \n for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(1):\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_inner\"))] }, input: None }]) }]\n-Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n     \"###);\n }\n@@ -423,7 +423,7 @@ fn assoc_item_macros() {\n inner attrs: Attrs { entries: None }\n \n top-level items:\n-Impl { generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n+Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"S\"))] }, generic_args: [None] }), is_negative: false, items: [MacroCall(Idx::<MacroCall>(0))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n > MacroCall { name: None, path: ModPath { kind: Plain, segments: [Name(Text(\"items\"))] }, is_export: false, is_local_inner: false, is_builtin: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::MacroCall>(1) }\n     \"###);\n }"}]}