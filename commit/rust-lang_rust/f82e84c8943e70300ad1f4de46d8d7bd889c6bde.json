{"sha": "f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MmU4NGM4OTQzZTcwMzAwYWQxZjRkZTQ2ZDhkN2JkODg5YzZiZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T19:56:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T19:56:47Z"}, "message": "Auto merge of #5998 - deg4uss3r:master, r=yaahc\n\nAdd map_err_ignore lint\n\nIn a large code base a lot of times errors are ignored by using something like:\n\n```rust\nfoo.map_err(|_| Some::Enum)?;\n```\n\nThis drops the original error in favor of a enum that will not have the original error's context. This lint helps catch throwing away the original error in favor of an enum without its context.\n\n---\n\n*Please keep the line below*\nchangelog: Added map_err_ignore lint", "tree": {"sha": "5b377fca586ae2fd583457e3a7ffb3c3cb382072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b377fca586ae2fd583457e3a7ffb3c3cb382072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "html_url": "https://github.com/rust-lang/rust/commit/f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231444d989db23ab53001e29af53fa844e0b08a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/231444d989db23ab53001e29af53fa844e0b08a1", "html_url": "https://github.com/rust-lang/rust/commit/231444d989db23ab53001e29af53fa844e0b08a1"}, {"sha": "d719b485434eac557e65bf55cca79e63f7b83d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d719b485434eac557e65bf55cca79e63f7b83d5b", "html_url": "https://github.com/rust-lang/rust/commit/d719b485434eac557e65bf55cca79e63f7b83d5b"}], "stats": {"total": 232, "additions": 214, "deletions": 18}, "files": [{"sha": "2aa4991488cc472772cd4a41ba9553b54da98ec4", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -1676,6 +1676,7 @@ Released 2018-09-13\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n+[`map_err_ignore`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n [`map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_identity\n [`map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or"}, {"sha": "44afd7e82fe7c52cbfc02039da6325ead4143a13", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -231,6 +231,7 @@ mod main_recursion;\n mod manual_async_fn;\n mod manual_non_exhaustive;\n mod map_clone;\n+mod map_err_ignore;\n mod map_identity;\n mod map_unit_fn;\n mod match_on_vec_items;\n@@ -627,6 +628,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &manual_async_fn::MANUAL_ASYNC_FN,\n         &manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n         &map_clone::MAP_CLONE,\n+        &map_err_ignore::MAP_ERR_IGNORE,\n         &map_identity::MAP_IDENTITY,\n         &map_unit_fn::OPTION_MAP_UNIT_FN,\n         &map_unit_fn::RESULT_MAP_UNIT_FN,\n@@ -920,6 +922,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n     store.register_late_pass(|| box methods::Methods);\n     store.register_late_pass(|| box map_clone::MapClone);\n+    store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n     store.register_late_pass(|| box types::LetUnitValue);\n     store.register_late_pass(|| box types::UnitCmp);\n@@ -1186,6 +1189,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n+        LintId::of(&map_err_ignore::MAP_ERR_IGNORE),\n         LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::MATCH_BOOL),\n         LintId::of(&matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),"}, {"sha": "5298e16a04d9b7d3578edc82c111fb3984cfbf9b", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -0,0 +1,147 @@\n+use crate::utils::span_lint_and_help;\n+\n+use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for instances of `map_err(|_| Some::Enum)`\n+    ///\n+    /// **Why is this bad?** This map_err throws away the original error rather than allowing the enum to contain and report the cause of the error\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Before:\n+    /// ```rust\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// enum Error {\n+    ///     Indivisible,\n+    ///     Remainder(u8),\n+    /// }\n+    ///\n+    /// impl fmt::Display for Error {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         match self {\n+    ///             Error::Indivisible => write!(f, \"could not divide input by three\"),\n+    ///             Error::Remainder(remainder) => write!(\n+    ///                 f,\n+    ///                 \"input is not divisible by three, remainder = {}\",\n+    ///                 remainder\n+    ///             ),\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for Error {}\n+    ///\n+    /// fn divisible_by_3(input: &str) -> Result<(), Error> {\n+    ///     input\n+    ///         .parse::<i32>()\n+    ///         .map_err(|_| Error::Indivisible)\n+    ///         .map(|v| v % 3)\n+    ///         .and_then(|remainder| {\n+    ///             if remainder == 0 {\n+    ///                 Ok(())\n+    ///             } else {\n+    ///                 Err(Error::Remainder(remainder as u8))\n+    ///             }\n+    ///         })\n+    /// }\n+    ///  ```\n+    ///\n+    ///  After:\n+    ///  ```rust\n+    /// use std::{fmt, num::ParseIntError};\n+    ///\n+    /// #[derive(Debug)]\n+    /// enum Error {\n+    ///     Indivisible(ParseIntError),\n+    ///     Remainder(u8),\n+    /// }\n+    ///\n+    /// impl fmt::Display for Error {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         match self {\n+    ///             Error::Indivisible(_) => write!(f, \"could not divide input by three\"),\n+    ///             Error::Remainder(remainder) => write!(\n+    ///                 f,\n+    ///                 \"input is not divisible by three, remainder = {}\",\n+    ///                 remainder\n+    ///             ),\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for Error {\n+    ///     fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {\n+    ///         match self {\n+    ///             Error::Indivisible(source) => Some(source),\n+    ///             _ => None,\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// fn divisible_by_3(input: &str) -> Result<(), Error> {\n+    ///     input\n+    ///         .parse::<i32>()\n+    ///         .map_err(Error::Indivisible)\n+    ///         .map(|v| v % 3)\n+    ///         .and_then(|remainder| {\n+    ///             if remainder == 0 {\n+    ///                 Ok(())\n+    ///             } else {\n+    ///                 Err(Error::Remainder(remainder as u8))\n+    ///             }\n+    ///         })\n+    /// }\n+    /// ```\n+    pub MAP_ERR_IGNORE,\n+    pedantic,\n+    \"`map_err` should not ignore the original error\"\n+}\n+\n+declare_lint_pass!(MapErrIgnore => [MAP_ERR_IGNORE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n+    // do not try to lint if this is from a macro or desugaring\n+    fn check_expr(&mut self, cx: &LateContext<'_>, e: &Expr<'_>) {\n+        if e.span.from_expansion() {\n+            return;\n+        }\n+\n+        // check if this is a method call (e.g. x.foo())\n+        if let ExprKind::MethodCall(ref method, _t_span, ref args, _) = e.kind {\n+            // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n+            // Enum::Variant[2]))\n+            if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n+                // make sure the first argument is a closure, and grab the CaptureRef, body_id, and body_span fields\n+                if let ExprKind::Closure(capture, _, body_id, body_span, _) = args[1].kind {\n+                    // check if this is by Reference (meaning there's no move statement)\n+                    if capture == CaptureBy::Ref {\n+                        // Get the closure body to check the parameters and values\n+                        let closure_body = cx.tcx.hir().body(body_id);\n+                        // make sure there's only one parameter (`|_|`)\n+                        if closure_body.params.len() == 1 {\n+                            // make sure that parameter is the wild token (`_`)\n+                            if let PatKind::Wild = closure_body.params[0].pat.kind {\n+                                // span the area of the closure capture and warn that the\n+                                // original error will be thrown away\n+                                span_lint_and_help(\n+                                    cx,\n+                                    MAP_ERR_IGNORE,\n+                                    body_span,\n+                                    \"`map_err(|_|...` ignores the original error\",\n+                                    None,\n+                                    \"Consider wrapping the error in an enum variant\",\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "a386cba8fba3505be87e443df83e33c9526aaee6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -1172,6 +1172,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"entry\",\n     },\n+    Lint {\n+        name: \"map_err_ignore\",\n+        group: \"pedantic\",\n+        desc: \"`map_err` should not ignore the original error\",\n+        deprecation: None,\n+        module: \"map_err_ignore\",\n+    },\n     Lint {\n         name: \"map_flatten\",\n         group: \"pedantic\","}, {"sha": "6b5bcdaa78e2762cd82fc68130cdb4405d217e03", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n+#![allow(clippy::map_err_ignore)]\n \n use std::mem::drop;\n "}, {"sha": "7974bf56d44cf582e1b80e98ecf4c31c4aeb226e", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:9:5\n+  --> $DIR/drop_ref.rs:10:5\n    |\n LL |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::drop-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:9:10\n+  --> $DIR/drop_ref.rs:10:10\n    |\n LL |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:12:5\n+  --> $DIR/drop_ref.rs:13:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:12:10\n+  --> $DIR/drop_ref.rs:13:10\n    |\n LL |     drop(&owned1);\n    |          ^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:13:5\n+  --> $DIR/drop_ref.rs:14:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:13:10\n+  --> $DIR/drop_ref.rs:14:10\n    |\n LL |     drop(&&owned1);\n    |          ^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:14:5\n+  --> $DIR/drop_ref.rs:15:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n+  --> $DIR/drop_ref.rs:15:10\n    |\n LL |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:18:5\n+  --> $DIR/drop_ref.rs:19:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:18:10\n+  --> $DIR/drop_ref.rs:19:10\n    |\n LL |     drop(reference1);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:21:5\n+  --> $DIR/drop_ref.rs:22:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:21:10\n+  --> $DIR/drop_ref.rs:22:10\n    |\n LL |     drop(reference2);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:24:5\n+  --> $DIR/drop_ref.rs:25:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:24:10\n+  --> $DIR/drop_ref.rs:25:10\n    |\n LL |     drop(reference3);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:29:5\n+  --> $DIR/drop_ref.rs:30:5\n    |\n LL |     drop(&val);\n    |     ^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:29:10\n+  --> $DIR/drop_ref.rs:30:10\n    |\n LL |     drop(&val);\n    |          ^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:37:5\n+  --> $DIR/drop_ref.rs:38:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:37:20\n+  --> $DIR/drop_ref.rs:38:20\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^"}, {"sha": "617b6422872645362a68e406fdf92490f78b94b5", "filename": "tests/ui/map_err.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.rs?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -0,0 +1,25 @@\n+#![warn(clippy::map_err_ignore)]\n+use std::convert::TryFrom;\n+use std::error::Error;\n+use std::fmt;\n+\n+#[derive(Debug)]\n+enum Errors {\n+    Ignored,\n+}\n+\n+impl Error for Errors {}\n+\n+impl fmt::Display for Errors {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Error\")\n+    }\n+}\n+\n+fn main() -> Result<(), Errors> {\n+    let x = u32::try_from(-123_i32);\n+\n+    println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n+\n+    Ok(())\n+}"}, {"sha": "7273f4603807865c42ff29e87d7878c12bceaaaa", "filename": "tests/ui/map_err.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f82e84c8943e70300ad1f4de46d8d7bd889c6bde/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "patch": "@@ -0,0 +1,11 @@\n+error: `map_err(|_|...` ignores the original error\n+  --> $DIR/map_err.rs:22:32\n+   |\n+LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n+   |                                ^^^\n+   |\n+   = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n+   = help: Consider wrapping the error in an enum variant\n+\n+error: aborting due to previous error\n+"}]}