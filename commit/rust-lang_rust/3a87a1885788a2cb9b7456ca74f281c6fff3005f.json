{"sha": "3a87a1885788a2cb9b7456ca74f281c6fff3005f", "node_id": "C_kwDOAAsO6NoAKDNhODdhMTg4NTc4OGEyY2I5Yjc0NTZjYTc0ZjI4MWM2ZmZmMzAwNWY", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2023-02-28T20:39:17Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2023-02-28T20:39:17Z"}, "message": "Make zeroed return an Option", "tree": {"sha": "1b9f7a92162410420d90ca869d3c9ddb5a563789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9f7a92162410420d90ca869d3c9ddb5a563789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a87a1885788a2cb9b7456ca74f281c6fff3005f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmP+ZnYACgkQfsyTL4ss\ncx6jPg/8CmkJ2eH/tlpCDD1rsPq2O4/oNgjtaNq0RFW+B83Y+UoA+jO9/8hhQld4\nEbmjEdYhv+iJkyFqpdTSJzvlP+tp6DLuz18rdqC+IUg2KRkJw7KjoobMiQD87ZNV\n/0INZqbYk05//bsutK92MgeIV5jqjshWTZzJV2dWyoAKDPpktIo1j6IapWBUtaB4\n1Qh7Vw5Byq8uLtSwVdaI5hPAwtPPKuCLSJpREYhgriDevCN7cq3a/E9Z/NID8tAI\n6N4LrjZ+qK/3887zWxcXy0aFA5aH1IAw+rCnUCN6nCrMShAXL3i4NL2U9SZzE3W2\n7xFkeRa3ZlWVsSyX7LPz8dmlRBNrQE3DQ1PZVPQLqL99elYrA0Q5WlLOxC+4Q/9p\nSxyilCWmsdh+ODjY8+p45V0XeQf6HdWDEJU7EeO29CXOxcZ45q/zitGZEJ9wpaWL\nQRK3n0FkrfEUmS2BmbTHsq5lsKI9kzKTLcX6Xd5daWLJNjJwlovhsG3WYIw88y4g\n+YMc0qLohgQN2+C61Pi4fqJX26dAoq7KwUvUZe0vmGOgk/f201JzFOig8NGf+xDQ\nONFbEIchztZS0r70DRFlCiJZdeblx7ph8XhiEnKqbPUy8I5GT3WGxAt4skmBPrhi\nGuE2N+C+2LdL3/BjBTFJsNoBUK9KAYE0rMSGrflUHV/5dglkCEQ=\n=M0+k\n-----END PGP SIGNATURE-----", "payload": "tree 1b9f7a92162410420d90ca869d3c9ddb5a563789\nparent 936b567d2e732afa1cc357c7faff2491d6d9212d\nauthor Rune Tynan <runetynan@gmail.com> 1677616757 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1677616757 -0500\n\nMake zeroed return an Option\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a87a1885788a2cb9b7456ca74f281c6fff3005f", "html_url": "https://github.com/rust-lang/rust/commit/3a87a1885788a2cb9b7456ca74f281c6fff3005f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a87a1885788a2cb9b7456ca74f281c6fff3005f/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936b567d2e732afa1cc357c7faff2491d6d9212d", "url": "https://api.github.com/repos/rust-lang/rust/commits/936b567d2e732afa1cc357c7faff2491d6d9212d", "html_url": "https://github.com/rust-lang/rust/commit/936b567d2e732afa1cc357c7faff2491d6d9212d"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "0628af747fa7d420c49b6bb5b4eba68146a43172", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a87a1885788a2cb9b7456ca74f281c6fff3005f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a87a1885788a2cb9b7456ca74f281c6fff3005f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=3a87a1885788a2cb9b7456ca74f281c6fff3005f", "patch": "@@ -42,11 +42,10 @@ pub trait AllocBytes:\n \n     /// Create a zeroed `AllocBytes` of the specified size and alignment;\n     /// call the callback error handler if there is an error in allocating the memory.\n-    fn zeroed<'tcx, F: Fn() -> InterpError<'tcx>>(\n+    fn zeroed(\n         size: Size,\n         _align: Align,\n-        handle_alloc_fail: F,\n-    ) -> Result<Self, InterpError<'tcx>>;\n+    ) -> Option<Self>;\n }\n \n // Default `bytes` for `Allocation` is a `Box<[u8]>`.\n@@ -59,16 +58,14 @@ impl AllocBytes for Box<[u8]> {\n         Box::<[u8]>::from(slice.into())\n     }\n \n-    fn zeroed<'tcx, F: Fn() -> InterpError<'tcx>>(\n+    fn zeroed(\n         size: Size,\n         _align: Align,\n-        handle_alloc_fail: F,\n-    ) -> Result<Self, InterpError<'tcx>> {\n-        let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize())\n-            .map_err(|_| handle_alloc_fail())?;\n+    ) -> Option<Self> {\n+        let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).ok()?;\n         // SAFETY: the box was zero-allocated, which is a valid initial value for Box<[u8]>\n         let bytes = unsafe { bytes.assume_init() };\n-        Ok(bytes)\n+        Some(bytes)\n     }\n }\n \n@@ -304,7 +301,7 @@ impl<Prov: Provenance, Bytes: AllocBytes> Allocation<Prov, (), Bytes> {\n     ///\n     /// If `panic_on_fail` is true, this will never return `Err`.\n     pub fn uninit<'tcx>(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'tcx, Self> {\n-        let handle_alloc_fail = || -> InterpError<'tcx> {\n+        let bytes = Bytes::zeroed(size, align).ok_or_else(|| {\n             // This results in an error that can happen non-deterministically, since the memory\n             // available to the compiler can change between runs. Normally queries are always\n             // deterministic. However, we can be non-deterministic here because all uses of const\n@@ -317,9 +314,7 @@ impl<Prov: Provenance, Bytes: AllocBytes> Allocation<Prov, (), Bytes> {\n                 tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpretation\")\n             });\n             InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n-        };\n-\n-        let bytes = Bytes::zeroed(size, align, handle_alloc_fail)?;\n+        })?;\n \n         Ok(Allocation {\n             bytes,"}]}